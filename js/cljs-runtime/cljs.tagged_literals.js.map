{"version":3,"sources":["cljs/tagged_literals.cljc"],"mappings":";AAYA,kCAAA,lCAAMA,4EACHC;AADH,AAEE,GAAU,AAACC,wBAAQD;AAAnB;AAAA,AACE,MAGW,KAAAE,MAAA;;;AAEb,YAAAC,eAAA,KAAA,AAAA,0EAAA,KAAAA,eAAA,KAAA,AAAA,8GAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,pCAAuDH;;AAatD,iCAAA,jCAAMI,0EACHJ;AADH,AAEE,GAAU,OAASA;AAAnB;AAAA,AACE,MAAO,KAAAE,MAAA;;;AACT,IAAA,AACE,OAACI,eAAKN;gBADR,QAAAK,JAEkBE;AAFlB,AAGI,MAAO,KAAAL,MAAW,AAAGK;;AAa3B,iCAAA,jCAAMC,0EACHR;AADH,AAEE,GAAU,OAASA;AAAnB;AAAA,AACE,MAAO,KAAAE,MAAA;;;AACT,IAAA,AACE,IAAAQ,eAAA,4DAAA,AAAA,wFAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,uEAAA,AAAA,mEAAA,AAAA,mBAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,8JAAA,AAAA,KAAA,kBAAAC,uBAAA,AAAA,AAAAA,qCAAA;AAAA,AAAA,QAAAD,6CAAAA,mDAAAA,RAAoBV,+BAAAA;gBADtB,QAAAS,JAEkBF;AAFlB,AAGI,MAAO,KAAAL,MAAW,AAAGK;;AAE9B,mDAAA,nDAAMK,8GAAuBC;AAA7B,AACE,SAAI,OAASA,oBACT,EAAK,cAAAC,bAAUD,qCACV,2BAAA,1BAAM,AAACE,oBAAUF;;AAE5B,AAAA;;;;;;;AAAA;AAAA,CAAA,wCAAA,xCAASO;AAAT,AAAA,AAAA;;;AAAA,CAAA,8CAAA,9CAASA;;AAAT,CAAA,iDAAA,jDAASA;;AAAT,CAAA,sDAAA,WAAAJ,mBAAAC,qBAAAC,zGAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;oCAAA,pCAASI,gFAASC;AAAlB,AAAA,YAAAF,6BAAkBE;;;AAATF,AAET,+BAAA,/BAAMG,sEACHvB;AADH,AAEE,GAAU,EAAI,AAACC,wBAAQD,WAAM,AAACwB,qBAAKxB;AAAnC;AAAA,AACE,MAGW,KAAAE,MAAA;;;AAEb,GAAU,EAAI,GAAK,AAACsB,qBAAKxB,aACX,AAACyB,uBAAOb,iDAAsB,AAACc,eAAK1B;AADlD;AAAA,AAEE,MAGW,KAAAE,MAAA;;;AAEb,YAAAkB,6BAAUpB;;AAEZ,AAAe2B,qDACb,uGAAA,2CAAA,AAAA,4FAAA,AAAA,wFAAA,AAAA,yFAAA,AAAA,/ZAACC,8MAES7B,yFACAK,yFACAI,oFACAe","names":["cljs.tagged-literals/read-queue","form","cljs.core/vector?","js/Error","cljs.core/List","cljs.tagged-literals/read-uuid","e85335","cljs.core/uuid","e","cljs.tagged-literals/read-inst","e85352","fexpr__85353","cljs.reader/read-date","cljs.tagged-literals/valid-js-literal-key?","k","cljs.core/Keyword","cljs.core/namespace","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","cljs.tagged-literals/JSValue","cljs.tagged-literals/->JSValue","val","cljs.tagged-literals/read-js","cljs.core/map?","cljs.core/every?","cljs.core/keys","cljs.tagged-literals/*cljs-data-readers*","cljs.core.merge"],"sourcesContent":[";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.tagged-literals\n  #?(:clj  (:require [cljs.instant :as inst])\n     :cljs (:require [cljs.reader :as reader])))\n\n(defn read-queue\n  [form]\n  (when-not (vector? form)\n    (throw\n      #?(:clj  (RuntimeException.\n                 \"Queue literal expects a vector for its elements.\")\n         :cljs (js/Error.\n                 \"Queue literal expects a vector for its elements.\"))))\n  (list 'cljs.core/into 'cljs.core.PersistentQueue.EMPTY form))\n\n#?(:clj\n   (defn read-uuid\n     [form]\n     (when-not (string? form)\n       (throw (RuntimeException. \"UUID literal expects a string as its representation.\")))\n     (try\n       (java.util.UUID/fromString form)\n       (catch Throwable e\n         (throw (RuntimeException. (.getMessage e)))))))\n\n#?(:cljs\n   (defn read-uuid\n     [form]\n     (when-not (string? form)\n       (throw (js/Error. \"UUID literal expects a string as its representation.\")))\n     (try\n       (uuid form)\n       (catch :default e\n         (throw (js/Error. (. e -message)))))))\n\n#?(:clj\n   (defn read-inst\n     [form]\n     (when-not (string? form)\n       (throw (RuntimeException. \"Instance literal expects a string for its timestamp.\")))\n     (try\n       (inst/read-instant-instant form)\n       (catch Throwable e\n         (throw (RuntimeException. (.getMessage e)))))))\n\n#?(:cljs\n   (defn read-inst\n     [form]\n     (when-not (string? form)\n       (throw (js/Error. \"Instance literal expects a string for its timestamp.\")))\n     (try\n       (#'reader/read-date form)\n       (catch :default e\n         (throw (js/Error. (. e -message)))))))\n\n(defn valid-js-literal-key? [k]\n  (or (string? k)\n      (and (keyword? k)\n           (nil? (namespace k)))))\n\n(deftype JSValue [val])\n\n(defn read-js\n  [form]\n  (when-not (or (vector? form) (map? form))\n    (throw\n      #?(:clj  (RuntimeException.\n                 \"JavaScript literal must use map or vector notation\")\n         :cljs (js/Error.\n                 \"JavaScript literal must use map or vector notation\"))))\n  (when-not (or (not (map? form))\n                (every? valid-js-literal-key? (keys form)))\n    (throw\n      #?(:clj  (RuntimeException.\n                 \"JavaScript literal keys must be strings or unqualified keywords\")\n         :cljs (js/Error.\n                 \"JavaScript literal keys must be strings or unqualified keywords\"))))\n  (JSValue. form))\n\n(def ^:dynamic *cljs-data-readers*\n  (merge ;; assumes we can read all data_readers\n    #?(:clj *data-readers*)\n    {'queue read-queue\n     'uuid  read-uuid\n     'inst  read-inst\n     'js    read-js}))\n"]}