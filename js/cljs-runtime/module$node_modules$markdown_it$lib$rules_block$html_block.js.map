{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_block$html_block.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAMnHC,MAAAA,CAAcH,OAAA,CAAQ,wDAAR,CACdI,QAAAA,CAAyBJ,OAAA,CAAQ,oDAAR,CAA6BI,CAAAA,sBAK1D,KAAIC,eAAiB,CACnB,CAAE,4CAAF,CAAgD,kCAAhD,CAAoF,CAAA,CAApF,CADmB,CAEnB,CAAE,UAAF,CAAkB,QAAlB,CAA2B,CAAA,CAA3B,CAFmB,CAGnB,CAAE,MAAF,CAAkB,KAAlB,CAA2B,CAAA,CAA3B,CAHmB,CAInB,CAAE,UAAF,CAAkB,GAAlB,CAA2B,CAAA,CAA3B,CAJmB,CAKnB,CAAE,cAAF,CAAkB,OAAlB,CAA2B,CAAA,CAA3B,CALmB,CAMnB,CAAE,IAAIC,MAAJ,CAAW,UAAX,CAAqBH,MAAYI,CAAAA,IAAZ,CAAiB,GAAjB,CAArB;AAA6C,wBAA7C,CAAiE,GAAjE,CAAF,CAAyE,IAAzE,CAA+E,CAAA,CAA/E,CANmB,CAOnB,CAAE,IAAID,MAAJ,CAAWF,OAAuBI,CAAAA,MAAlC,CAA2C,OAA3C,CAAF,CAAwD,IAAxD,CAA8D,CAAA,CAA9D,CAPmB,CAWrBP,OAAOC,CAAAA,OAAP,CAAiBO,QAAmB,CAACC,KAAD,CAAQC,SAAR,CAAmBC,OAAnB,CAA4BC,MAA5B,CAAoC,CAAA,IAClEC,CACAC,KAAAA,SAAML,KAAMM,CAAAA,MAAN,CAAaL,SAAb,CAANI,CAAgCL,KAAMO,CAAAA,MAAN,CAAaN,SAAb,CADpC,KAEIO,IAAMR,KAAMS,CAAAA,MAAN,CAAaR,SAAb,CAOV,IAJiD,CAIjD,EAJID,KAAMU,CAAAA,MAAN,CAAaT,SAAb,CAIJ,CAJ8BD,KAAMW,CAAAA,SAIpC,EAFI,CAACX,KAAMY,CAAAA,EAAGC,CAAAA,OAAQC,CAAAA,IAEtB,EAAkC,EAAlC,GAAId,KAAMe,CAAAA,GAAIC,CAAAA,UAAV,CAAqBX,QAArB,CAAJ,CAAiD,MAAO,CAAA,CAExDY,SAAA,CAAWjB,KAAMe,CAAAA,GAAIG,CAAAA,KAAV,CAAgBb,QAAhB,CAAqBG,GAArB,CAEX,KAAKJ,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBT,cAAewB,CAAAA,MAA/B,EACM,CAAAxB,cAAA,CAAeS,CAAf,CAAA,CAAkB,CAAlB,CAAqBgB,CAAAA,IAArB,CAA0BH,QAA1B,CADN,CAAuCb,CAAA,EAAvC,EAIA,GAAIA,CAAJ,GAAUT,cAAewB,CAAAA,MAAzB,CAAmC,MAAO,CAAA,CAE1C;GAAIhB,MAAJ,CAEE,MAAOR,eAAA,CAAeS,CAAf,CAAA,CAAkB,CAAlB,CAGTiB,OAAA,CAAWpB,SAAX,CAAuB,CAIvB,IAAI,CAACN,cAAA,CAAeS,CAAf,CAAA,CAAkB,CAAlB,CAAqBgB,CAAAA,IAArB,CAA0BH,QAA1B,CAAL,CACE,IAAA,CAAOI,MAAP,CAAkBnB,OAAlB,EACM,EAAAF,KAAMU,CAAAA,MAAN,CAAaW,MAAb,CAAA,CAAyBrB,KAAMW,CAAAA,SAA/B,CADN,CAA2BU,MAAA,EAA3B,CAOE,GAJAhB,QAII,CAJEL,KAAMM,CAAAA,MAAN,CAAae,MAAb,CAIF,CAJ2BrB,KAAMO,CAAAA,MAAN,CAAac,MAAb,CAI3B,CAHJb,GAGI,CAHER,KAAMS,CAAAA,MAAN,CAAaY,MAAb,CAGF,CAFJJ,QAEI,CAFOjB,KAAMe,CAAAA,GAAIG,CAAAA,KAAV,CAAgBb,QAAhB,CAAqBG,GAArB,CAEP,CAAAb,cAAA,CAAeS,CAAf,CAAA,CAAkB,CAAlB,CAAqBgB,CAAAA,IAArB,CAA0BH,QAA1B,CAAJ,CAAyC,CACf,CAAxB,GAAIA,QAASE,CAAAA,MAAb,EAA6BE,MAAA,EAC7B,MAFuC,CAO7CrB,KAAMsB,CAAAA,IAAN,CAAaD,MAEbE,QAAA,CAAgBvB,KAAMwB,CAAAA,IAAN,CAAW,YAAX,CAAyB,EAAzB,CAA6B,CAA7B,CAChBD,QAAME,CAAAA,GAAN,CAAgB,CAAExB,SAAF,CAAaoB,MAAb,CAChBE,QAAMG,CAAAA,OAAN,CAAgB1B,KAAM2B,CAAAA,QAAN,CAAe1B,SAAf,CAA0BoB,MAA1B,CAAoCrB,KAAMW,CAAAA,SAA1C;AAAqD,CAAA,CAArD,CAEhB,OAAO,CAAA,CAlD+D,CAvB+C;",
"sources":["node_modules/markdown-it/lib/rules_block/html_block.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_block$html_block\"] = function(global,require,module,exports) {\n// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true ],\n  [ /^\u003c!--/,        /--\u003e/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","block_names","HTML_OPEN_CLOSE_TAG_RE","HTML_SEQUENCES","RegExp","join","source","module.exports","state","startLine","endLine","silent","i","pos","bMarks","tShift","max","eMarks","sCount","blkIndent","md","options","html","src","charCodeAt","lineText","slice","length","test","nextLine","line","token","push","map","content","getLines"]
}
