{
"version":3,
"file":"module$node_modules$shadergraph$src$glsl$compile.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAAkB,IAAK,EAyBvBJ,QAAQI,CAAAA,OAAR,CAZgBA,QAAS,CAACC,OAAD,CAAU,CACjC,MAAM,CACJC,IADI,CAEJC,UAFI,CAAA,CAGFF,OAWEG,QAAAA,CAAM,EAEKA,QAAA,CAXaD,UAajBE,CAAAA,IAFYC,CAAAA,IAAR,CAEjB,CAFiC,CAAA,CAIjC,KAAK,IAAMC,GAAX,GAAkB,CAAC,UAAD,CAAa,UAAb,CAAyB,SAAzB,CAAoC,SAApC,CAA+C,WAA/C,CAAlB,CACE,IAAK,MAAMC,GAAX,GAhB4BL,WAgBV,CAAWI,GAAX,CAAlB,CALeH,OAAA,CAMXI,GANmBF,CAAAA,IAAR,CAMb,CAN6B,CAAA,CAT3BG,IAAAA,CAAYC,eAAA,CAAgBR,IAAhB,CAmBXE,OAnBW,CAClB,OAAO,CAACD,UAAD,CAAaM,GAAb,CAT0B,CAkCnC,OAAMC,gBAAkBA,QAAS,CAACR,IAAD;AAAOS,YAAP,CAAqB,CAGpD,IAAIJ,YACJ,OAAMK,GAAK,IAAIC,MAAJ,CAAW,MAAX,CAAqB,CAAA,EAAA,EAAM,CACpC,MAAMC,OAAS,EAEf,KAAKP,YAAL,GAAYI,aAAZ,CACEG,MAAOC,CAAAA,IAAP,CAAYR,YAAZ,CAGF,OAAOO,OAP6B,CAAN,CAAD,EAQ1BE,CAAAA,IAR0B,CAQrB,GARqB,CAApB,CAQM,MARN,CAQc,GARd,CAUXd,KAAA,CAAOA,IAAKe,CAAAA,OAAL,CAAa,aAAb,CAA4B,EAA5B,CACPf,KAAA,CAAOA,IAAKe,CAAAA,OAAL,CAAa,yBAAb,CAAwC,EAAxC,CAKP,OAAO,SAAS,CAACC,MAAD,CAASC,UAAT,CAAqBC,OAArB,CAA8B,CAC5C,IAAIb,YAEU,KAAd,EAAIW,MAAJ,GACEA,MADF,CACW,EADX,CAIkB,KAAlB,EAAIC,UAAJ,GACEA,UADF,CACe,EADf,CAIe,KAAf,EAAIC,OAAJ,GACEA,OADF,CACY,EADZ,CAIA,OAAMH,QAAU,EAEhB,KAAKV,YAAL,GAAYI,aAAZ,CACEM,OAAA,CAAQV,YAAR,CAAA,CAAkC,IAAnB,EAAAY,UAAA,CAAWZ,YAAX,CAAA;AAA0BA,YAA1B,CAAgCW,MAAhC,CAAyCX,YAGpDc,OAAAA,CAAWnB,IAAKe,CAAAA,OAAL,CAAaL,EAAb,CAAiBL,GAAA,EAAOU,OAAA,CAAQV,GAAR,CAAxB,CAEXe,WAAAA,CAAQ,CAAA,EAAA,EAAM,CAClB,MAAMC,QAAU,EAEhB,KAAKhB,YAAL,GAAYa,QAAZ,CAEEG,OAAQR,CAAAA,IAAR,CAAa,WAAWR,YAAX,IADCa,OAAArB,CAAQQ,YAARR,CACD,EAAb,CAGF,OAAOwB,QARW,CAAN,CAAD,EAWTD,WAAKE,CAAAA,MAAT,EACEF,UAAKP,CAAAA,IAAL,CAAU,EAAV,CAGF,OAAOO,WAAKN,CAAAA,IAAL,CAAU,IAAV,CAAP,CAAyBK,MAtCmB,CApBM,CArDuD;",
"sources":["node_modules/shadergraph/src/glsl/compile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$shadergraph$src$glsl$compile\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compile = void 0;\n\n/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\n/*\n  Compile snippet back into GLSL, but with certain symbols replaced by prefixes / placeholders\n*/\nconst compile = function (program) {\n  const {\n    code,\n    signatures\n  } = program; // Prepare list of placeholders\n\n  const placeholders = replaced(signatures); // Compile\n\n  const assembler = string_compiler(code, placeholders);\n  return [signatures, assembler];\n};\n\nexports.compile = compile;\n\nconst replaced = function (signatures) {\n  const out = {};\n\n  const s = sig => out[sig.name] = true;\n\n  s(signatures.main); // Prefix all global symbols\n\n  for (const key of [\"external\", \"internal\", \"varying\", \"uniform\", \"attribute\"]) {\n    for (const sig of signatures[key]) {\n      s(sig);\n    }\n  }\n\n  return out;\n};\n/*\nString-replacement based compiler\n*/\n\n\nconst string_compiler = function (code, placeholders) {\n  // Make regexp for finding placeholders\n  // Replace on word boundaries\n  let key;\n  const re = new RegExp(\"\\\\b(\" + (() => {\n    const result = [];\n\n    for (key in placeholders) {\n      result.push(key);\n    }\n\n    return result;\n  })().join(\"|\") + \")\\\\b\", \"g\"); // Strip comments\n\n  code = code.replace(/\\/\\/[^\\n]*/g, \"\");\n  code = code.replace(/\\/\\*([^*]|\\*[^/])*\\*\\//g, \"\"); // Strip all preprocessor commands (lazy)\n  //code = code.replace /^#[^\\n]*/mg, ''\n  // Assembler function that takes namespace prefix and exceptions\n  // and returns GLSL source code\n\n  return function (prefix, exceptions, defines) {\n    let key;\n\n    if (prefix == null) {\n      prefix = \"\";\n    }\n\n    if (exceptions == null) {\n      exceptions = {};\n    }\n\n    if (defines == null) {\n      defines = {};\n    }\n\n    const replace = {};\n\n    for (key in placeholders) {\n      replace[key] = exceptions[key] != null ? key : prefix + key;\n    }\n\n    const compiled = code.replace(re, key => replace[key]);\n\n    const defs = (() => {\n      const result1 = [];\n\n      for (key in defines) {\n        const value = defines[key];\n        result1.push(`#define ${key} ${value}`);\n      }\n\n      return result1;\n    })();\n\n    if (defs.length) {\n      defs.push(\"\");\n    }\n\n    return defs.join(\"\\n\") + compiled;\n  };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","compile","program","code","signatures","out","main","name","key","sig","assembler","string_compiler","placeholders","re","RegExp","result","push","join","replace","prefix","exceptions","defines","compiled","defs","result1","length"]
}
