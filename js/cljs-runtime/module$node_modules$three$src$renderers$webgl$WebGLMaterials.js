shadow$provide.module$node_modules$three$src$renderers$webgl$WebGLMaterials=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.WebGLMaterials=function(properties){function refreshUniformsCommon(uniforms,material){uniforms.opacity.value=material.opacity;material.color&&uniforms.diffuse.value.copy(material.color);material.emissive&&uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);material.map&&(uniforms.map.value=
material.map);material.alphaMap&&(uniforms.alphaMap.value=material.alphaMap);material.specularMap&&(uniforms.specularMap.value=material.specularMap);0<material.alphaTest&&(uniforms.alphaTest.value=material.alphaTest);const envMap=properties.get(material).envMap;envMap&&(uniforms.envMap.value=envMap,uniforms.flipEnvMap.value=envMap.isCubeTexture&&!1===envMap.isRenderTargetTexture?-1:1,uniforms.reflectivity.value=material.reflectivity,uniforms.ior.value=material.ior,uniforms.refractionRatio.value=material.refractionRatio);
material.lightMap&&(uniforms.lightMap.value=material.lightMap,uniforms.lightMapIntensity.value=material.lightMapIntensity);material.aoMap&&(uniforms.aoMap.value=material.aoMap,uniforms.aoMapIntensity.value=material.aoMapIntensity);let uvScaleMap;material.map?uvScaleMap=material.map:material.specularMap?uvScaleMap=material.specularMap:material.displacementMap?uvScaleMap=material.displacementMap:material.normalMap?uvScaleMap=material.normalMap:material.bumpMap?uvScaleMap=material.bumpMap:material.roughnessMap?
uvScaleMap=material.roughnessMap:material.metalnessMap?uvScaleMap=material.metalnessMap:material.alphaMap?uvScaleMap=material.alphaMap:material.emissiveMap?uvScaleMap=material.emissiveMap:material.clearcoatMap?uvScaleMap=material.clearcoatMap:material.clearcoatNormalMap?uvScaleMap=material.clearcoatNormalMap:material.clearcoatRoughnessMap?uvScaleMap=material.clearcoatRoughnessMap:material.specularIntensityMap?uvScaleMap=material.specularIntensityMap:material.specularColorMap?uvScaleMap=material.specularColorMap:
material.transmissionMap?uvScaleMap=material.transmissionMap:material.thicknessMap?uvScaleMap=material.thicknessMap:material.sheenColorMap?uvScaleMap=material.sheenColorMap:material.sheenRoughnessMap&&(uvScaleMap=material.sheenRoughnessMap);void 0!==uvScaleMap&&(uvScaleMap.isWebGLRenderTarget&&(uvScaleMap=uvScaleMap.texture),!0===uvScaleMap.matrixAutoUpdate&&uvScaleMap.updateMatrix(),uniforms.uvTransform.value.copy(uvScaleMap.matrix));let uv2ScaleMap;material.aoMap?uv2ScaleMap=material.aoMap:material.lightMap&&
(uv2ScaleMap=material.lightMap);void 0!==uv2ScaleMap&&(uv2ScaleMap.isWebGLRenderTarget&&(uv2ScaleMap=uv2ScaleMap.texture),!0===uv2ScaleMap.matrixAutoUpdate&&uv2ScaleMap.updateMatrix(),uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix))}function refreshUniformsStandard(uniforms,material){uniforms.roughness.value=material.roughness;uniforms.metalness.value=material.metalness;material.roughnessMap&&(uniforms.roughnessMap.value=material.roughnessMap);material.metalnessMap&&(uniforms.metalnessMap.value=
material.metalnessMap);material.emissiveMap&&(uniforms.emissiveMap.value=material.emissiveMap);material.bumpMap&&(uniforms.bumpMap.value=material.bumpMap,uniforms.bumpScale.value=material.bumpScale,material.side===_constants.BackSide&&(uniforms.bumpScale.value*=-1));material.normalMap&&(uniforms.normalMap.value=material.normalMap,uniforms.normalScale.value.copy(material.normalScale),material.side===_constants.BackSide&&uniforms.normalScale.value.negate());material.displacementMap&&(uniforms.displacementMap.value=
material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias);properties.get(material).envMap&&(uniforms.envMapIntensity.value=material.envMapIntensity)}return{refreshFogUniforms:function(uniforms,fog){uniforms.fogColor.value.copy(fog.color);fog.isFog?(uniforms.fogNear.value=fog.near,uniforms.fogFar.value=fog.far):fog.isFogExp2&&(uniforms.fogDensity.value=fog.density)},refreshMaterialUniforms:function(uniforms,material,
pixelRatio,height,transmissionRenderTarget){if(material.isMeshBasicMaterial)refreshUniformsCommon(uniforms,material);else if(material.isMeshLambertMaterial)refreshUniformsCommon(uniforms,material),material.emissiveMap&&(uniforms.emissiveMap.value=material.emissiveMap);else if(material.isMeshToonMaterial)refreshUniformsCommon(uniforms,material),material.gradientMap&&(uniforms.gradientMap.value=material.gradientMap),material.emissiveMap&&(uniforms.emissiveMap.value=material.emissiveMap),material.bumpMap&&
(uniforms.bumpMap.value=material.bumpMap,uniforms.bumpScale.value=material.bumpScale,material.side===_constants.BackSide&&(uniforms.bumpScale.value*=-1)),material.normalMap&&(uniforms.normalMap.value=material.normalMap,uniforms.normalScale.value.copy(material.normalScale),material.side===_constants.BackSide&&uniforms.normalScale.value.negate()),material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=
material.displacementBias);else if(material.isMeshPhongMaterial)refreshUniformsCommon(uniforms,material),uniforms.specular.value.copy(material.specular),uniforms.shininess.value=Math.max(material.shininess,1E-4),material.emissiveMap&&(uniforms.emissiveMap.value=material.emissiveMap),material.bumpMap&&(uniforms.bumpMap.value=material.bumpMap,uniforms.bumpScale.value=material.bumpScale,material.side===_constants.BackSide&&(uniforms.bumpScale.value*=-1)),material.normalMap&&(uniforms.normalMap.value=
material.normalMap,uniforms.normalScale.value.copy(material.normalScale),material.side===_constants.BackSide&&uniforms.normalScale.value.negate()),material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias);else if(material.isMeshStandardMaterial)refreshUniformsCommon(uniforms,material),material.isMeshPhysicalMaterial?(refreshUniformsStandard(uniforms,material),
uniforms.ior.value=material.ior,0<material.sheen&&(uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen),uniforms.sheenRoughness.value=material.sheenRoughness,material.sheenColorMap&&(uniforms.sheenColorMap.value=material.sheenColorMap),material.sheenRoughnessMap&&(uniforms.sheenRoughnessMap.value=material.sheenRoughnessMap)),0<material.clearcoat&&(uniforms.clearcoat.value=material.clearcoat,uniforms.clearcoatRoughness.value=material.clearcoatRoughness,material.clearcoatMap&&
(uniforms.clearcoatMap.value=material.clearcoatMap),material.clearcoatRoughnessMap&&(uniforms.clearcoatRoughnessMap.value=material.clearcoatRoughnessMap),material.clearcoatNormalMap&&(uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale),uniforms.clearcoatNormalMap.value=material.clearcoatNormalMap,material.side===_constants.BackSide&&uniforms.clearcoatNormalScale.value.negate())),0<material.transmission&&(uniforms.transmission.value=material.transmission,uniforms.transmissionSamplerMap.value=
transmissionRenderTarget.texture,uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width,transmissionRenderTarget.height),material.transmissionMap&&(uniforms.transmissionMap.value=material.transmissionMap),uniforms.thickness.value=material.thickness,material.thicknessMap&&(uniforms.thicknessMap.value=material.thicknessMap),uniforms.attenuationDistance.value=material.attenuationDistance,uniforms.attenuationColor.value.copy(material.attenuationColor)),uniforms.specularIntensity.value=
material.specularIntensity,uniforms.specularColor.value.copy(material.specularColor),material.specularIntensityMap&&(uniforms.specularIntensityMap.value=material.specularIntensityMap),material.specularColorMap&&(uniforms.specularColorMap.value=material.specularColorMap)):refreshUniformsStandard(uniforms,material);else if(material.isMeshMatcapMaterial)refreshUniformsCommon(uniforms,material),material.matcap&&(uniforms.matcap.value=material.matcap),material.bumpMap&&(uniforms.bumpMap.value=material.bumpMap,
uniforms.bumpScale.value=material.bumpScale,material.side===_constants.BackSide&&(uniforms.bumpScale.value*=-1)),material.normalMap&&(uniforms.normalMap.value=material.normalMap,uniforms.normalScale.value.copy(material.normalScale),material.side===_constants.BackSide&&uniforms.normalScale.value.negate()),material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias);
else if(material.isMeshDepthMaterial)refreshUniformsCommon(uniforms,material),material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias);else if(material.isMeshDistanceMaterial)refreshUniformsCommon(uniforms,material),material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,
uniforms.displacementBias.value=material.displacementBias),uniforms.referencePosition.value.copy(material.referencePosition),uniforms.nearDistance.value=material.nearDistance,uniforms.farDistance.value=material.farDistance;else if(material.isMeshNormalMaterial)refreshUniformsCommon(uniforms,material),material.bumpMap&&(uniforms.bumpMap.value=material.bumpMap,uniforms.bumpScale.value=material.bumpScale,material.side===_constants.BackSide&&(uniforms.bumpScale.value*=-1)),material.normalMap&&(uniforms.normalMap.value=
material.normalMap,uniforms.normalScale.value.copy(material.normalScale),material.side===_constants.BackSide&&uniforms.normalScale.value.negate()),material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias);else if(material.isLineBasicMaterial)uniforms.diffuse.value.copy(material.color),uniforms.opacity.value=material.opacity,material.isLineDashedMaterial&&
(uniforms.dashSize.value=material.dashSize,uniforms.totalSize.value=material.dashSize+material.gapSize,uniforms.scale.value=material.scale);else if(material.isPointsMaterial){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;uniforms.size.value=material.size*pixelRatio;uniforms.scale.value=.5*height;material.map&&(uniforms.map.value=material.map);material.alphaMap&&(uniforms.alphaMap.value=material.alphaMap);0<material.alphaTest&&(uniforms.alphaTest.value=material.alphaTest);
let uvScaleMap;material.map?uvScaleMap=material.map:material.alphaMap&&(uvScaleMap=material.alphaMap);void 0!==uvScaleMap&&(!0===uvScaleMap.matrixAutoUpdate&&uvScaleMap.updateMatrix(),uniforms.uvTransform.value.copy(uvScaleMap.matrix))}else if(material.isSpriteMaterial){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;uniforms.rotation.value=material.rotation;material.map&&(uniforms.map.value=material.map);material.alphaMap&&(uniforms.alphaMap.value=material.alphaMap);
0<material.alphaTest&&(uniforms.alphaTest.value=material.alphaTest);let uvScaleMap;material.map?uvScaleMap=material.map:material.alphaMap&&(uvScaleMap=material.alphaMap);void 0!==uvScaleMap&&(!0===uvScaleMap.matrixAutoUpdate&&uvScaleMap.updateMatrix(),uniforms.uvTransform.value.copy(uvScaleMap.matrix))}else material.isShadowMaterial?(uniforms.color.value.copy(material.color),uniforms.opacity.value=material.opacity):material.isShaderMaterial&&(material.uniformsNeedUpdate=!1)}}};var _constants=require("module$node_modules$three$src$constants")}
//# sourceMappingURL=module$node_modules$three$src$renderers$webgl$WebGLMaterials.js.map
