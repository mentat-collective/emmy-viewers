{"version":3,"sources":["nextjournal/clojure_mode/keymap.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.keymap/update-some","m","updates","cljs.core/reduce-kv","k","f","temp__5755__auto__","existing","cljs.core.get","cljs.core.assoc","cljs.core.dissoc","nextjournal.clojure-mode.keymap/serialize","command","nextjournal.clojure-mode.commands/reverse-index","nextjournal.clojure-mode.keymap/deserialize","nextjournal.clojure-mode.commands/index","nextjournal.clojure-mode.keymap/group","commands","cljs.core.map","cljs.core.reduce","p__67082","map__67083","cljs.core/--destructure-map","out","cmd","run","cljs.core.update","cljs.core.fnil","cljs.core/conj","nextjournal.clojure-mode.keymap/ungroup","bindings","cljs.core.into","p1__67085#","cljs.core/clj->js","nextjournal.clojure-mode.keymap/builtin-keymap*","nextjournal.clojure-mode.keymap/paredit-keymap*","nextjournal.clojure-mode.keymap/builtin","nextjournal.clojure-mode.keymap/paredit","nextjournal.clojure-mode.keymap/complete"],"sourcesContent":["(ns nextjournal.clojure-mode.keymap\n  (:require [\"@codemirror/commands\" :as commands]\n            [nextjournal.clojure-mode.commands :as cmd]))\n\n(defn update-some\n  \"Updates keys of map when key has value\"\n  [m updates]\n  (reduce-kv (fn [m k f]\n               (if-some [existing (get m k)]\n                 (assoc m k (f existing))\n                 (dissoc m k))) m updates))\n\n;; (de)serializing commands from keyword-id to function\n(defn serialize [command] (update-some command {:run cmd/reverse-index :shift cmd/reverse-index}))\n(defn deserialize [command] (update-some command {:run cmd/index :shift cmd/index}))\n\n\n(defn group\n  \"Returns a grouped map of bindings for a list of CodeMirror keymap entries\"\n  [commands]\n  (->> commands\n       (map serialize)\n       (reduce (fn [out {:as cmd :keys [run]}]\n                 (update out run (fnil conj []) (dissoc cmd :run))) {})))\n\n(defn ungroup\n  \"Returns a list of CodeMirror keymap entries for a grouped map of bindings\"\n  [commands]\n  (->> commands\n       (reduce-kv\n        (fn [out k bindings]\n          (into out (map #(deserialize (assoc % :run k)) bindings))) [])\n       (clj->js)))\n\n(comment\n (->> [commands/standardKeymap #_historyKeymap]\n      (mapcat #(js->clj % :keywordize-keys true))\n      group\n      cljs.pprint/pprint))\n\n(def builtin-keymap*\n  {:cursorLineDown\n   [{:key \"ArrowDown\", :shift :selectLineDown}\n    {:mac \"Ctrl-n\", :shift :selectLineDown}],\n   :selectAll [{:key \"Mod-a\"}],\n   :cursorLineBoundaryForward\n   [{:key \"End\", :shift :selectLineBoundaryForward}],\n   :deleteCharBackward [{:key \"Backspace\"} {:mac \"Ctrl-h\"}],\n   :cursorLineBoundaryBackward\n   [{:key \"Home\", :shift :selectLineBoundaryBackward\n     :mac \"Ctrl-a\"}\n    {:mac \"Cmd-ArrowLeft\" :shift :selectLineBoundaryBackward}],\n   :deleteCharForward [{:key \"Delete\"} {:mac \"Ctrl-d\"}],\n   :cursorCharLeft\n   [{:key \"ArrowLeft\", :shift :selectCharLeft}\n    {:mac \"Ctrl-b\", :shift :selectCharLeft}],\n   :cursorGroupBackward [{:mac \"Alt-b\", :shift :selectGroupBackward}],\n   :cursorDocEnd\n   [{:mac \"Cmd-ArrowDown\", :shift :selectDocEnd}\n    {:key \"Mod-End\", :shift :selectDocEnd}\n    {:mac \"Alt->\"}],\n   :deleteGroupBackward\n   [{:key \"Mod-Backspace\", :mac \"Alt-Backspace\"}\n    {:mac \"Ctrl-Alt-h\"}],\n   :deleteGroupForward\n   [{:key \"Mod-Delete\", :mac \"Ctrl-Alt-Backspace\"}\n    {:mac \"Alt-Delete\"}\n    {:mac \"Alt-d\"}],\n   :cursorPageDown\n   [{:mac \"Ctrl-ArrowDown\", :shift :selectPageDown}\n    {:key \"PageDown\", :shift :selectPageDown}\n    {:mac \"Ctrl-v\"}],\n   :cursorPageUp\n   [{:mac \"Ctrl-ArrowUp\", :shift :selectPageUp}\n    {:key \"PageUp\", :shift :selectPageUp}\n    {:mac \"Alt-v\"}],\n   :cursorLineEnd\n   [{:mac \"Cmd-ArrowRight\"}\n    {:mac \"Ctrl-e\", :shift :selectLineEnd}],\n   :cursorGroupForward [{:mac \"Alt-f\", :shift :selectGroupForward}],\n   :undoSelection [{:key \"Mod-u\", :preventDefault true}],\n   :cursorCharRight\n   [{:key \"ArrowRight\", :shift :selectCharRight}\n    {:mac \"Ctrl-f\", :shift :selectCharRight}],\n   :splitLine [{:mac \"Ctrl-o\"}],\n   :transposeChars [{:mac \"Ctrl-t\"}],\n   :cursorLineUp\n   [{:key \"ArrowUp\", :shift :selectLineUp}\n    {:mac \"Ctrl-p\", :shift :selectLineUp}],\n   :cursorDocStart\n   [{:mac \"Cmd-ArrowUp\", :shift :selectDocStart}\n    {:key \"Mod-Home\", :shift :selectDocStart}\n    {:mac \"Alt-<\"}]})\n\n(def paredit-keymap*\n  {:indent\n   [{:key \"Tab\"\n     :doc \"Indent document (or selection)\"}]\n   :enter-and-indent\n   [{:key \"Enter\"\n     :doc \"Insert newline and indent\"}]\n   :unwrap\n   [{:key \"Alt-s\"\n     :doc \"Lift contents of collection into parent\"\n     :preventDefault true}]\n   :kill\n   [{:key \"Ctrl-k\"\n     :doc \"Remove all forms from cursor to end of line\"\n     :preventDefault true}]\n   :nav-left\n   [{:key \"Alt-ArrowLeft\"\n     :shift :nav-select-left\n     :doc \"Move cursor one unit to the left (shift: selects this region)\"\n     :preventDefault true}]\n   :nav-right\n   [{:key \"Alt-ArrowRight\"\n     :shift :nav-select-right\n     :doc \"Move cursor one unit to the right (shift: selects this region)\"\n     :preventDefault true}]\n\n   :slurp-forward\n   [{:key \"Ctrl-ArrowRight\"\n     :doc \"Expand collection to include form to the right\"\n     :preventDefault true}\n    {:key \"Mod-Shift-k\" :preventDefault true}]\n   :slurp-backward\n   [{:doc \"Grow collection backwards by one form\"\n     :key \"Ctrl-Alt-ArrowLeft\"\n     :preventDefault true}]\n\n   :barf-forward\n   [{:key \"Ctrl-ArrowLeft\"\n     :doc \"Shrink collection forwards by one form\"\n     :preventDefault true}\n    {:key \"Mod-Shift-j\" :preventDefault true}]\n   :barf-backward\n   [{:doc \"Shrink collection backwards by one form\"\n     :key \"Ctrl-Alt-ArrowRight\"}]\n\n   :selection-grow\n   [{:doc \"Grow selections\"\n     :key \"Alt-ArrowUp\"}\n    {:key \"Mod-1\"}]\n   :selection-return\n   [{:doc \"Shrink selections\"\n     :key \"Alt-ArrowDown\"}\n    {:key \"Mod-2\"}]})\n\n(def builtin (ungroup builtin-keymap*))\n(def paredit (ungroup paredit-keymap*))\n(def complete (.concat paredit builtin))\n\n(comment\n (ungroup default-keymap))\n"]}