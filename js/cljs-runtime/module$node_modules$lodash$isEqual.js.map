{
"version":3,
"file":"module$node_modules$lodash$isEqual.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,kCAAA,CAAuD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC/F,IAAIC,YAAcH,OAAA,CAAQ,yCAAR,CAkClBC,OAAOC,CAAAA,OAAP,CAJAE,QAAgB,CAACC,KAAD,CAAQC,KAAR,CAAe,CAC7B,MAAOH,YAAA,CAAYE,KAAZ,CAAmBC,KAAnB,CADsB,CA/BgE;",
"sources":["node_modules/lodash/isEqual.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$isEqual\"] = function(global,require,module,exports) {\nvar baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseIsEqual","isEqual","value","other"]
}
