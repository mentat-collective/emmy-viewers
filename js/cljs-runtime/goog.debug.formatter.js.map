{
"version":3,
"file":"goog.debug.formatter.js",
"lineCount":188,
"mappings":"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",
"sources":["goog/debug/formatter.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Definition of various formatters for logging. Please minimize\n * dependencies this file has on other closure classes as any dependency it\n * takes won't be able to use the logging infrastructure.\n */\n\ngoog.provide('goog.debug.Formatter');\ngoog.provide('goog.debug.HtmlFormatter');\ngoog.provide('goog.debug.TextFormatter');\ngoog.provide('goog.debug.formatter');\n\ngoog.require('goog.debug');\ngoog.require('goog.debug.RelativeTimeProvider');\ngoog.require('goog.html.SafeHtml');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.html.uncheckedconversions');\ngoog.require('goog.log');\ngoog.require('goog.string.Const');\ngoog.requireType('goog.log.LogRecord');\n\n\n/**\n * Base class for Formatters. A Formatter is used to format a LogRecord into\n * something that can be displayed to the user.\n *\n * @param {string=} opt_prefix The prefix to place before text records.\n * @constructor\n */\ngoog.debug.formatter.Formatter = function(opt_prefix) {\n  'use strict';\n  this.prefix_ = opt_prefix || '';\n\n  /**\n   * A provider that returns the relative start time.\n   * @type {goog.debug.RelativeTimeProvider}\n   * @private\n   */\n  this.startTimeProvider_ =\n      goog.debug.RelativeTimeProvider.getDefaultInstance();\n};\n\n\n/**\n * Whether to append newlines to the end of formatted log records.\n * @type {boolean}\n */\ngoog.debug.formatter.Formatter.prototype.appendNewline = true;\n\n\n/**\n * Whether to show absolute time in the DebugWindow.\n * @type {boolean}\n */\ngoog.debug.formatter.Formatter.prototype.showAbsoluteTime = true;\n\n\n/**\n * Whether to show relative time in the DebugWindow.\n * @type {boolean}\n */\ngoog.debug.formatter.Formatter.prototype.showRelativeTime = true;\n\n\n/**\n * Whether to show the logger name in the DebugWindow.\n * @type {boolean}\n */\ngoog.debug.formatter.Formatter.prototype.showLoggerName = true;\n\n\n/**\n * Whether to show the logger exception text.\n * @type {boolean}\n */\ngoog.debug.formatter.Formatter.prototype.showExceptionText = false;\n\n\n/**\n * Whether to show the severity level.\n * @type {boolean}\n */\ngoog.debug.formatter.Formatter.prototype.showSeverityLevel = false;\n\n\n/**\n * Formats a record.\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {string} The formatted string.\n */\ngoog.debug.formatter.Formatter.prototype.formatRecord = goog.abstractMethod;\n\n\n/**\n * Formats a record as SafeHtml.\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {!goog.html.SafeHtml} The formatted string as SafeHtml.\n */\ngoog.debug.formatter.Formatter.prototype.formatRecordAsHtml =\n    goog.abstractMethod;\n\n\n/**\n * Sets the start time provider. By default, this is the default instance\n * but can be changed.\n * @param {goog.debug.RelativeTimeProvider} provider The provider to use.\n */\ngoog.debug.formatter.Formatter.prototype.setStartTimeProvider = function(\n    provider) {\n  'use strict';\n  this.startTimeProvider_ = provider;\n};\n\n\n/**\n * Returns the start time provider. By default, this is the default instance\n * but can be changed.\n * @return {goog.debug.RelativeTimeProvider} The start time provider.\n */\ngoog.debug.formatter.Formatter.prototype.getStartTimeProvider = function() {\n  'use strict';\n  return this.startTimeProvider_;\n};\n\n\n/**\n * Resets the start relative time.\n */\ngoog.debug.formatter.Formatter.prototype.resetRelativeTimeStart = function() {\n  'use strict';\n  this.startTimeProvider_.reset();\n};\n\n\n/**\n * Returns a string for the time/date of the LogRecord.\n * @param {?goog.log.LogRecord} logRecord The record to get a time stamp for.\n * @return {string} A string representation of the time/date of the LogRecord.\n * @private\n */\ngoog.debug.formatter.Formatter.getDateTimeStamp_ = function(logRecord) {\n  'use strict';\n  var time = new Date(logRecord.getMillis());\n  return goog.debug.formatter.Formatter.getTwoDigitString_(\n             (time.getFullYear() - 2000)) +\n      goog.debug.formatter.Formatter.getTwoDigitString_((time.getMonth() + 1)) +\n      goog.debug.formatter.Formatter.getTwoDigitString_(time.getDate()) + ' ' +\n      goog.debug.formatter.Formatter.getTwoDigitString_(time.getHours()) + ':' +\n      goog.debug.formatter.Formatter.getTwoDigitString_(time.getMinutes()) +\n      ':' +\n      goog.debug.formatter.Formatter.getTwoDigitString_(time.getSeconds()) +\n      '.' +\n      goog.debug.formatter.Formatter.getTwoDigitString_(\n          Math.floor(time.getMilliseconds() / 10));\n};\n\n\n/**\n * Returns the number as a two-digit string, meaning it prepends a 0 if the\n * number if less than 10.\n * @param {number} n The number to format.\n * @return {string} A two-digit string representation of `n`.\n * @private\n */\ngoog.debug.formatter.Formatter.getTwoDigitString_ = function(n) {\n  'use strict';\n  if (n < 10) {\n    return '0' + n;\n  }\n  return String(n);\n};\n\n\n/**\n * Returns a string for the number of seconds relative to the start time.\n * Prepads with spaces so that anything less than 1000 seconds takes up the\n * same number of characters for better formatting.\n * @param {?goog.log.LogRecord} logRecord The log to compare time to.\n * @param {number} relativeTimeStart The start time to compare to.\n * @return {string} The number of seconds of the LogRecord relative to the\n *     start time.\n * @private\n */\ngoog.debug.formatter.Formatter.getRelativeTime_ = function(\n    logRecord, relativeTimeStart) {\n  'use strict';\n  var ms = logRecord.getMillis() - relativeTimeStart;\n  var sec = ms / 1000;\n  var str = sec.toFixed(3);\n\n  var spacesToPrepend = 0;\n  if (sec < 1) {\n    spacesToPrepend = 2;\n  } else {\n    while (sec < 100) {\n      spacesToPrepend++;\n      sec *= 10;\n    }\n  }\n  while (spacesToPrepend-- > 0) {\n    str = ' ' + str;\n  }\n  return str;\n};\n\n\n\n/**\n * Formatter that returns formatted html. See formatRecord for the classes\n * it uses for various types of formatted output.\n *\n * @param {string=} opt_prefix The prefix to place before text records.\n * @constructor\n * @extends {goog.debug.formatter.Formatter}\n */\ngoog.debug.formatter.HtmlFormatter = function(opt_prefix) {\n  'use strict';\n  goog.debug.formatter.Formatter.call(this, opt_prefix);\n};\ngoog.inherits(\n    goog.debug.formatter.HtmlFormatter, goog.debug.formatter.Formatter);\n\n\n/**\n * Exposes an exception that has been caught by a try...catch and outputs the\n * error as HTML with a stack trace.\n *\n * @param {*} err Error object or string.\n * @param {?Function=} fn If provided, when collecting the stack trace all\n *     frames above the topmost call to this function, including that call,\n *     will be left out of the stack trace.\n * @return {string} Details of exception, as HTML.\n */\ngoog.debug.formatter.HtmlFormatter.exposeException = function(err, fn) {\n  'use strict';\n  var html = goog.debug.formatter.HtmlFormatter.exposeExceptionAsHtml(err, fn);\n  return goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Exposes an exception that has been caught by a try...catch and outputs the\n * error with a stack trace.\n *\n * @param {*} err Error object or string.\n * @param {?Function=} fn If provided, when collecting the stack trace all\n *     frames above the topmost call to this function, including that call,\n *     will be left out of the stack trace.\n * @return {!goog.html.SafeHtml} Details of exception.\n */\ngoog.debug.formatter.HtmlFormatter.exposeExceptionAsHtml = function(err, fn) {\n  'use strict';\n  try {\n    var e = goog.debug.normalizeErrorObject(err);\n    // Create the error message\n    var viewSourceUrl =\n        goog.debug.formatter.HtmlFormatter.createViewSourceUrl_(e.fileName);\n    var error = goog.html.SafeHtml.concat(\n        goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n            'Message: ' + e.message + '\\nUrl: '),\n        goog.html.SafeHtml.create(\n            'a', {href: viewSourceUrl, target: '_new'}, e.fileName),\n        goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n            '\\nLine: ' + e.lineNumber + '\\n\\nBrowser stack:\\n' + e.stack +\n            '-> ' +\n            '[end]\\n\\nJS stack traversal:\\n' + goog.debug.getStacktrace(fn) +\n            '-> '));\n    return error;\n  } catch (e2) {\n    return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n        'Exception trying to expose exception! You win, we lose. ' + e2);\n  }\n};\n\n\n/**\n * @param {?string=} fileName\n * @return {!goog.html.SafeUrl} SafeUrl with view-source scheme, pointing at\n *     fileName.\n * @private\n */\ngoog.debug.formatter.HtmlFormatter.createViewSourceUrl_ = function(fileName) {\n  'use strict';\n  if (fileName == null) {\n    fileName = '';\n  }\n  if (!/^https?:\\/\\//i.test(fileName)) {\n    return goog.html.SafeUrl.fromConstant(\n        goog.string.Const.from('sanitizedviewsrc'));\n  }\n  var sanitizedFileName = goog.html.SafeUrl.sanitize(fileName);\n  return goog.html.uncheckedconversions\n      .safeUrlFromStringKnownToSatisfyTypeContract(\n          goog.string.Const.from('view-source scheme plus HTTP/HTTPS URL'),\n          'view-source:' + goog.html.SafeUrl.unwrap(sanitizedFileName));\n};\n\n\n\n/**\n * Whether to show the logger exception text\n * @type {boolean}\n * @override\n */\ngoog.debug.formatter.HtmlFormatter.prototype.showExceptionText = true;\n\n\n/**\n * Formats a record\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {string} The formatted string as html.\n * @override\n */\ngoog.debug.formatter.HtmlFormatter.prototype.formatRecord = function(\n    logRecord) {\n  'use strict';\n  if (!logRecord) {\n    return '';\n  }\n  // OK not to use goog.html.SafeHtml.unwrap() here.\n  return this.formatRecordAsHtml(logRecord).getTypedStringValue();\n};\n\n\n/**\n * Formats a record.\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {!goog.html.SafeHtml} The formatted string as SafeHtml.\n * @override\n */\ngoog.debug.formatter.HtmlFormatter.prototype.formatRecordAsHtml = function(\n    logRecord) {\n  'use strict';\n  if (!logRecord) {\n    return goog.html.SafeHtml.EMPTY;\n  }\n\n  var className;\n  switch (logRecord.getLevel().value) {\n    case goog.log.Level.SHOUT.value:\n      className = 'dbg-sh';\n      break;\n    case goog.log.Level.SEVERE.value:\n      className = 'dbg-sev';\n      break;\n    case goog.log.Level.WARNING.value:\n      className = 'dbg-w';\n      break;\n    case goog.log.Level.INFO.value:\n      className = 'dbg-i';\n      break;\n    case goog.log.Level.FINE.value:\n    default:\n      className = 'dbg-f';\n      break;\n  }\n\n  // HTML for user defined prefix, time, logger name, and severity.\n  var sb = [];\n  sb.push(this.prefix_, ' ');\n  if (this.showAbsoluteTime) {\n    sb.push(\n        '[', goog.debug.formatter.Formatter.getDateTimeStamp_(logRecord), '] ');\n  }\n  if (this.showRelativeTime) {\n    sb.push(\n        '[',\n        goog.debug.formatter.Formatter.getRelativeTime_(\n            logRecord, this.startTimeProvider_.get()),\n        's] ');\n  }\n  if (this.showLoggerName) {\n    sb.push('[', logRecord.getLoggerName(), '] ');\n  }\n  if (this.showSeverityLevel) {\n    sb.push('[', logRecord.getLevel().name, '] ');\n  }\n  var fullPrefixHtml =\n      goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(sb.join(''));\n\n  // HTML for exception text and log record.\n  var exceptionHtml = goog.html.SafeHtml.EMPTY;\n  if (this.showExceptionText && logRecord.getException()) {\n    exceptionHtml = goog.html.SafeHtml.concat(\n        goog.html.SafeHtml.BR,\n        goog.debug.formatter.HtmlFormatter.exposeExceptionAsHtml(\n            logRecord.getException()));\n  }\n  var logRecordHtml = goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n      logRecord.getMessage());\n  var recordAndExceptionHtml = goog.html.SafeHtml.create(\n      'span', {'class': className},\n      goog.html.SafeHtml.concat(logRecordHtml, exceptionHtml));\n\n\n  // Combine both pieces of HTML and, if needed, append a final newline.\n  var html;\n  if (this.appendNewline) {\n    html = goog.html.SafeHtml.concat(\n        fullPrefixHtml, recordAndExceptionHtml, goog.html.SafeHtml.BR);\n  } else {\n    html = goog.html.SafeHtml.concat(fullPrefixHtml, recordAndExceptionHtml);\n  }\n  return html;\n};\n\n\n\n/**\n * Formatter that returns formatted plain text\n *\n * @param {string=} opt_prefix The prefix to place before text records.\n * @constructor\n * @extends {goog.debug.formatter.Formatter}\n * @final\n */\ngoog.debug.formatter.TextFormatter = function(opt_prefix) {\n  'use strict';\n  goog.debug.formatter.Formatter.call(this, opt_prefix);\n};\ngoog.inherits(\n    goog.debug.formatter.TextFormatter, goog.debug.formatter.Formatter);\n\n\n/**\n * Formats a record as text\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {string} The formatted string.\n * @override\n */\ngoog.debug.formatter.TextFormatter.prototype.formatRecord = function(\n    logRecord) {\n  'use strict';\n  var sb = [];\n  sb.push(this.prefix_, ' ');\n  if (this.showAbsoluteTime) {\n    sb.push(\n        '[', goog.debug.formatter.Formatter.getDateTimeStamp_(logRecord), '] ');\n  }\n  if (this.showRelativeTime) {\n    sb.push(\n        '[',\n        goog.debug.formatter.Formatter.getRelativeTime_(\n            logRecord, this.startTimeProvider_.get()),\n        's] ');\n  }\n\n  if (this.showLoggerName) {\n    sb.push('[', logRecord.getLoggerName(), '] ');\n  }\n  if (this.showSeverityLevel) {\n    sb.push('[', logRecord.getLevel().name, '] ');\n  }\n  sb.push(logRecord.getMessage());\n  if (this.showExceptionText) {\n    var exception = logRecord.getException();\n    if (exception !== undefined) {\n      var exceptionText =\n          exception instanceof Error ? exception.message : String(exception);\n      sb.push('\\n', exceptionText);\n    }\n  }\n  if (this.appendNewline) {\n    sb.push('\\n');\n  }\n  return sb.join('');\n};\n\n\n/**\n * Formats a record as text\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {!goog.html.SafeHtml} The formatted string as SafeHtml. This is\n *     just an HTML-escaped version of the text obtained from formatRecord().\n * @override\n */\ngoog.debug.formatter.TextFormatter.prototype.formatRecordAsHtml = function(\n    logRecord) {\n  'use strict';\n  return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n      goog.debug.formatter.TextFormatter.prototype.formatRecord(logRecord));\n};\n\n// Aliases for the above formatters.\n// TODO(user): Delete these aliases when there are no more usages.\n\n/**\n * @constructor\n */\ngoog.debug.Formatter = goog.debug.formatter.Formatter;\n\n/**\n * @constructor\n */\ngoog.debug.TextFormatter = goog.debug.formatter.TextFormatter;\n\n/**\n * @constructor\n */\ngoog.debug.HtmlFormatter = goog.debug.formatter.HtmlFormatter;\n"],
"names":["goog","provide","require","requireType","debug","formatter","Formatter","goog.debug.formatter.Formatter","opt_prefix","prefix_","startTimeProvider_","RelativeTimeProvider","getDefaultInstance","prototype","appendNewline","showAbsoluteTime","showRelativeTime","showLoggerName","showExceptionText","showSeverityLevel","formatRecord","abstractMethod","formatRecordAsHtml","setStartTimeProvider","goog.debug.formatter.Formatter.prototype.setStartTimeProvider","provider","getStartTimeProvider","goog.debug.formatter.Formatter.prototype.getStartTimeProvider","resetRelativeTimeStart","goog.debug.formatter.Formatter.prototype.resetRelativeTimeStart","reset","getDateTimeStamp_","goog.debug.formatter.Formatter.getDateTimeStamp_","logRecord","time","Date","getMillis","getTwoDigitString_","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","goog.debug.formatter.Formatter.getTwoDigitString_","n","String","getRelativeTime_","goog.debug.formatter.Formatter.getRelativeTime_","relativeTimeStart","ms","sec","str","toFixed","spacesToPrepend","HtmlFormatter","goog.debug.formatter.HtmlFormatter","call","inherits","exposeException","goog.debug.formatter.HtmlFormatter.exposeException","err","fn","html","exposeExceptionAsHtml","SafeHtml","unwrap","goog.debug.formatter.HtmlFormatter.exposeExceptionAsHtml","e","normalizeErrorObject","viewSourceUrl","createViewSourceUrl_","fileName","error","concat","htmlEscapePreservingNewlinesAndSpaces","message","create","href","target","lineNumber","stack","getStacktrace","e2","goog.debug.formatter.HtmlFormatter.createViewSourceUrl_","test","SafeUrl","fromConstant","string","Const","from","sanitizedFileName","sanitize","uncheckedconversions","safeUrlFromStringKnownToSatisfyTypeContract","goog.debug.formatter.HtmlFormatter.prototype.formatRecord","getTypedStringValue","goog.debug.formatter.HtmlFormatter.prototype.formatRecordAsHtml","EMPTY","className","getLevel","value","log","Level","SHOUT","SEVERE","WARNING","INFO","FINE","sb","push","get","getLoggerName","name","fullPrefixHtml","join","exceptionHtml","getException","BR","logRecordHtml","getMessage","recordAndExceptionHtml","TextFormatter","goog.debug.formatter.TextFormatter","goog.debug.formatter.TextFormatter.prototype.formatRecord","exception","undefined","exceptionText","Error","goog.debug.formatter.TextFormatter.prototype.formatRecordAsHtml"]
}
