{"version":3,"sources":["sci/impl/read.cljc"],"mappings":"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","names":["sci.impl.read/eof-or-throw","opts","v","cljs.core/keyword-identical?","sci.impl.parser/eof","temp__5751__auto__","eof","cljs.core.ex_info","sci.impl.read/with-resolver","var_args","G__90584","sci.impl.read/read","js/Error","sci-ctx","cljs.core/deref","sci.impl.read.read","sci.impl.io/in","stream","eof-error?","eof-value","_eof-error?","_recursive?","sci.impl.parser.parse_next","cljs.core.assoc","cljs.core.into","G__90588","sci.impl.read/read-string","s","reader","cljs.tools.reader.reader_types.indexing_push_back_reader","cljs.tools.reader.reader_types.string_push_back_reader","sci.impl.read/load-string","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.impl.utils/current-ns","ret","x","sci.impl.utils/eval","sci.impl.read/source-logging-reader","string-reader","cljs.tools.reader.reader-types/string-reader","buf-len","pushback-reader","cljs.tools.reader.reader-types/PushbackReader","cljs.core.object_array","cljs.tools.reader.reader_types.source_logging_push_back_reader"],"sourcesContent":["(ns sci.impl.read\n  {:no-doc true}\n  (:refer-clojure :exclude [eval load-string read read-string read+string])\n  (:require [clojure.tools.reader.reader-types :as r]\n            [sci.impl.io :as io]\n            [sci.impl.parser :as parser]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn- eof-or-throw [opts v]\n  (if (utils/kw-identical? parser/eof v)\n    (if-let [eof (:eof opts)]\n      (if (not (utils/kw-identical? :eofthrow eof))\n        eof\n        (throw (ex-info \"EOF while reading\"\n                        {:type :sci.error/parse\n                         :opts opts})))\n      (throw (ex-info \"EOF while reading\"\n                      {:type :sci.error/parse\n                       :opts opts})))\n    v))\n\n\n(defn with-resolver [opts]\n  #?(:clj (if-let [^clojure.lang.LispReader$Resolver resolver\n                   @parser/reader-resolver]\n            (assoc opts :auto-resolve\n                   (fn [alias]\n                     (if (= :current alias)\n                       (let [c (.currentNS ^clojure.lang.LispReader$Resolver resolver)]\n                         c)\n                       (.resolveAlias ^clojure.lang.LispReader$Resolver resolver alias))))\n            opts)\n     :cljs opts))\n\n(defn read\n  ([sci-ctx]\n   (read sci-ctx @io/in))\n  ([sci-ctx stream]\n   (read sci-ctx stream true nil))\n  ([sci-ctx stream eof-error? eof-value]\n   (read sci-ctx stream eof-error? eof-value false))\n  ([sci-ctx stream _eof-error? eof-value _recursive?]\n   (let [v (parser/parse-next sci-ctx stream\n                              (-> {:eof eof-value}\n                                  (with-resolver)))]\n     (eof-or-throw {:eof eof-value} v)))\n  ([sci-ctx opts stream]\n   (let [opts (with-resolver opts)\n         opts (if (:read-cond opts)\n                ;; always prioritize platform feature\n                (assoc opts :features (into #?(:clj #{:clj}\n                                               :cljs #{:cljs})\n                                            (:features opts)))\n                opts)\n         v (parser/parse-next sci-ctx stream opts)]\n     (eof-or-throw opts v))))\n\n(defn read-string\n  ([sci-ctx s]\n   (let [reader (r/indexing-push-back-reader (r/string-push-back-reader s))]\n     (read sci-ctx reader)))\n  ([sci-ctx opts s]\n   (let [reader (r/indexing-push-back-reader (r/string-push-back-reader s))]\n     (read sci-ctx opts reader))))\n\n(defn load-string [sci-ctx s]\n  (vars/with-bindings {utils/current-ns @utils/current-ns}\n    (let [reader (r/indexing-push-back-reader (r/string-push-back-reader s))]\n      (loop [ret nil]\n        (let [x (parser/parse-next sci-ctx reader)]\n          (if (utils/kw-identical? parser/eof x)\n            ret\n            (recur (utils/eval sci-ctx x))))))))\n\n;; used by source-fn\n(defn source-logging-reader\n  [x]\n  #?(:clj (r/source-logging-push-back-reader (r/push-back-reader x))\n     :cljs (let [string-reader (r/string-reader x)\n                 buf-len 1\n                 pushback-reader (r/PushbackReader. string-reader\n                                                    (object-array buf-len)\n                                                    buf-len buf-len)]\n             (r/source-logging-push-back-reader pushback-reader))))\n"]}