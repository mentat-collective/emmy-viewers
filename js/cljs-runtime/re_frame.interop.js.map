{"version":3,"sources":["re_frame/interop.cljs"],"mappings":";;;AAOA,AAAKA,6BAAUC;AAEf,+BAAA,AAAAC,6CAAA,AAAAC,gCAAA,5GAAKC;AAEL,AAAKC,gCAAaC;AAMlB;;;AAAcC,wCAA4CC;AAE1D,yBAAA,zBAAMC,0DAAOC;AAAb,AACE,OAACC,gDAAkBD;;AAErB,gCAAA,hCAAME,wEAAQF;AAAd,AACE,GAAA,GAAA,MAAA,LAA6CA;AAA7C,GAAA,EAAA,WAAA,CAAAG,gCAAA,AAA6CH;AAA7C;;AAAA,GAAA,EAAA,AAA6CA;AAA7C,OAAAI,kCAAYC,4BAAiCL;;AAA7C;;;;AAAA,OAAAI,kCAAYC,4BAAiCL;;;AAE/C,gCAAA,hCAAMM,wEAAQN;AAAd,AACE,GAAA,GAAA,MAAA,LAAmBA;AAAnB,GAAA,EAAA,CAAA,wCAAA,cAAA,CAAAG,gCAAA,vFAAmBH,uFAAAA;AAAnB;;AAAA,GAAA,EAAA,AAAmBA;AAAnB,OAAAI,kCAAYG,iBAAOP;;AAAnB;;;;AAAA,OAAAI,kCAAYG,iBAAOP;;;AAGrB,iCAAA,jCAAMQ,0EAAeC;AAArB,AACE,OAACC,4BAA4BD;;AAE/B,wCAAA,xCAAME,wFAAiBC,QAAQH;AAA/B,AACE,OAACI,mCAA8BD,QAAQH;;AAEzC,iCAAA,jCAAMK,0EAAUF;AAAhB,AACC,OAACG,4BAAuBH;;AAEzB,qCAAA,rCAAMI,kFAAcP,EAAEQ;AAAtB,AACE,OAACC,WAAcT,EAAEQ;;AAEnB,uBAAA,vBAAME;AAAN,AACE,GAAI,EACC,QAAAC,kCACA,QAAAA,wCAAAC;AACH,OAACA;;AACD,OAACC;;;AAEL;;;;8BAAA,9BAAMC,oEAGHC;AAHH,AAIE,GAAM,EAAA,GAAA,iBAAA,SAAA,EAAA,EAAA,WAAA,CAAArB,gCAAA,8CAAA,KAAA,OAAA,nIAA8CqB,yEAAAA;AAApD,AACE,QAAK,iBAAAC,cAAOE;IAAPD,cAAiBF;AAAjB,AAAA,oBAAA,CAAAC,4CAAAA,8DAAAC,eAAAD,0CAAAC,7EACEE,yDAAAA;AADF;;AAAA,oBAAA,CAAAH,4CAAAA,gEAAAC,eAAAD,4CAAAC,jFAEEG,2DAAAA;AAFF;;AAAA,oBAAA,CAAAJ,4CAAAA,iEAAAC,eAAAD,6CAAAC,nFAGEI,4DAAAA;AAHF;;AAAA,oBAAA,CAAAL,4CAAAA,8DAAAC,eAAAD,0CAAAC,7EAIEK,yDAAAA;AAJF;;AAAA;;;;;iDAMA,AAACC,eAAKR;;AAPb;;;AAWF,+CAAA,/CAAeS;AAEf,iCAAA,jCAAMC,0EAAezB;AAArB,AACE,OAAC0B,4DACA;AAAA,AACE,IAAAC,8CAAUH;IAAVI,8CAAA;AAAA,AAAA,gDAAAA,/CAAUJ;;AAAV,IAAA,AACE,QAACxB,kCAAAA,oCAAAA;UADH,AAAA,gDAAA2B,/CAAUH;;;AAGf,IAAMK,qBAAa,AAAO,AAAgBC,qDAChBA;AAD1B,AAEE,mDAAA,lDAAM,AAAgBA;AAAtB,AACO,OAACL,+BAAcI;;AAExB,IAAME,qBAAaC;AAAnB,AACE,CAAMA,qCAAmC,WAAUC;AAAV,AACE,oBAAIT;AACF,OAAcS;;AACd,QAACF,mDAAAA,sDAAAA,LAAaE,kCAAAA","names":["re-frame.interop/next-tick","reagent.impl.batching/do-before-flush","cljs.core.into","cljs.core/PersistentQueue","re-frame.interop/empty-queue","re-frame.interop/after-render","reagent.core/after-render","re-frame.interop/debug-enabled?","goog/DEBUG","re-frame.interop/ratom","x","reagent.core.atom","re-frame.interop/ratom?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","reagent.ratom/IReactiveAtom","re-frame.interop/deref?","cljs.core/IDeref","re-frame.interop/make-reaction","f","reagent.ratom/make-reaction","re-frame.interop/add-on-dispose!","a-ratom","reagent.ratom/add-on-dispose!","re-frame.interop/dispose!","reagent.ratom/dispose!","re-frame.interop/set-timeout!","ms","js/setTimeout","re-frame.interop/now","js/performance","js/performance.now","js/Date.now","re-frame.interop/reagent-id","reactive-val","pred__86738","expr__86739","cljs.core/instance?","reagent.ratom/RAtom","reagent.ratom/RCursor","reagent.ratom/Reaction","reagent.ratom/Track","cljs.core/hash","re-frame.interop/*in-batch?*","re-frame.interop/batch-updates","js/module$node_modules$react_dom$index.unstable_batchedUpdates","*in-batch?*-orig-val__86745","*in-batch?*-temp-val__86746","flush-queues","reagent.impl.batching/render-queue","queue-render","reagent.impl.batching/queue-render","c"],"sourcesContent":["(ns re-frame.interop\n  (:require [reagent.core]\n            [reagent.impl.batching]\n            [reagent.ratom]\n            [react :as react]\n            [react-dom :as react-dom]))\n\n(def next-tick reagent.impl.batching/do-before-flush)\n\n(def empty-queue #queue [])\n\n(def after-render reagent.core/after-render)\n\n;; Make sure the Google Closure compiler sees this as a boolean constant,\n;; otherwise Dead Code Elimination won't happen in `:advanced` builds.\n;; Type hints have been liberally sprinkled.\n;; https://developers.google.com/closure/compiler/docs/js-for-compiler\n(def ^boolean debug-enabled? \"@define {boolean}\" ^boolean goog/DEBUG)\n\n(defn ratom [x]\n  (reagent.core/atom x))\n\n(defn ratom? [x]\n  (satisfies? reagent.ratom/IReactiveAtom ^clj x))\n\n(defn deref? [x]\n  (satisfies? IDeref x))\n\n\n(defn make-reaction [f]\n  (reagent.ratom/make-reaction f))\n\n(defn add-on-dispose! [a-ratom f]\n  (reagent.ratom/add-on-dispose! a-ratom f))\n\n(defn dispose! [a-ratom]\n\t(reagent.ratom/dispose! a-ratom))\n\n(defn set-timeout! [f ms]\n  (js/setTimeout f ms))\n\n(defn now []\n  (if (and\n       (exists? js/performance)\n       (exists? js/performance.now))\n    (js/performance.now)\n    (js/Date.now)))\n\n(defn reagent-id\n  \"Produces an id for reactive Reagent values\n  e.g. reactions, ratoms, cursors.\"\n  [reactive-val]\n  (when (implements? reagent.ratom/IReactiveAtom ^clj reactive-val)\n    (str (condp instance? reactive-val\n           reagent.ratom/RAtom \"ra\"\n           reagent.ratom/RCursor \"rc\"\n           reagent.ratom/Reaction \"rx\"\n           reagent.ratom/Track \"tr\"\n           \"other\")\n         (hash reactive-val))))\n\n;; Make reagent benefit from batched updates\n\n(def ^:dynamic *in-batch?* false)\n\n(defn batch-updates [f]\n  (react-dom/unstable_batchedUpdates\n   (fn []\n     (binding [*in-batch?* true]\n       (f)))))\n\n(let [flush-queues (.bind (.-flush-queues reagent.impl.batching/render-queue)\n                          reagent.impl.batching/render-queue)]\n  (set! (.-flush-queues reagent.impl.batching/render-queue)\n        #(batch-updates flush-queues)))\n\n(let [queue-render reagent.impl.batching/queue-render]\n  (set! reagent.impl.batching/queue-render (fn [^clj c]\n                                             (if *in-batch?*\n                                               (.forceUpdate c)\n                                               (queue-render c)))))\n"]}