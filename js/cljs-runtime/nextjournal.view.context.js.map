{"version":3,"sources":["nextjournal/view/context.cljs"],"mappings":";;AAuBA,GAAA,QAAAA,wCAAAC,6CAAAC,qDAAAC;AAAA;AAAA,AAAA,AAASC,uCACP,AAACC,kBACA,WAAKC;AAAL,AACE,GAAI,cAAAC,bAAUD;AACZ,OAACE,8CAAoB,AAACC,gBAAM,4CAAKH;;AACjCA;;;;AAEP,AAAA;;;;mCAAA,2CAAAI,9EAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,sEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,wEAAA,xEAAME,mFAGHM,SAAWC;AAHd,AAIE,IAAOD,eAAS,AAACE,cAAIF;IACdG,sHACS,AAACC,+CAAO,tGACR,AAAA,0CAAA,zCAAcK,1DACd,oDAAA,pDAAQC;kBAFKL,EAAEC;AAAP,AAAW,IAAAC,WAAMF;AAAN,AAAA,AAAAE,cAAe,AAACC,sDAAmBF;;AAAnCC;;IADnBN,HACA;;AAFhB,AAKE,GAAI,AAACU,uBAAOX;AACVG;;AACA,eAAO,AAACS,eAAKZ;eACN,iBAAAa,aAAyB,AAAChB,gBAAMG;qBAAhC,AAAAc,4CAAAD,WAAA,IAAA,5EAAOE;QAAP,AAAAD,4CAAAD,WAAA,IAAA,/DAAsBG;IACZC,UAAQ,AAACnC,qCAAYiC;AAD/B,AAEE,sEAAA,/DAACL,8CAAoB,AAAYO,4BACAD,IACZb;;;;;;;;;;AAhBpC,CAAA,2DAAA,3DAAMT;;AAAN;AAAA,CAAA,qDAAA,WAAAC,hEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAkBA;;;;mCAAA,nCAAMuB,8EAGHD,QAAQE;AAHX,AAIE,4GAAA,rGAACT,8CACA,AAAY,AAAC5B,qCAAYmC,uBAEzB,WAAKG;AAAL,AACE,6DAAA,tDAACZ,yIAAoBW,EAAEC","names":["js/nextjournal","js/nextjournal.view","js/nextjournal.view.context","js/nextjournal.view.context.get-context","nextjournal.view.context/get-context","cljs.core/memoize","k","cljs.core/Keyword","js/module$node_modules$react$index.createContext","cljs.core/munge","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","nextjournal.view.context/provide","seq88836","G__88837","cljs.core/first","cljs.core/next","self__4851__auto__","bindings","body","cljs.core/seq","out","cljs.core.reduce","a","el","G__88838","reagent.core.as_element","js/module$node_modules$react$index.Fragment","js/module$node_modules$react$index.createElement","cljs.core/empty?","cljs.core/rest","vec__88839","cljs.core.nth","context-or-key","v","context","nextjournal.view.context/consume","f","value"],"sourcesContent":["(ns nextjournal.view.context\n  \"The following provide and consume Reagent components expose React contexts without fuss.\n\n  * Contexts can be keywords or React context instances. In the case of keywords, React context instances are created behind the scenes.\n  * Context values are left alone, they remain as JS or Clojure values (no coercion).\n  * Ratoms inside consume work as you'd expect.\n  * You can provide multiple contexts at the same time, but you can only c/consume one context at a time.\n\n  example use:\n\n  ``` clojure\n  [c/provide {:app-theme {:color \\\"blue\\\"}}\n   ;; consume one context at a time\n   [c/consume :app-theme\n    (fn [{:keys [color] :as _theme}]\n      [:div {:style {:color color}} \\\"Colorful Text\\\"])]]\n  ```\n\n  From https://gist.github.com/mhuebert/d400701f7eddbc4fffa811c70178a8c1\"\n  (:require [\"react\" :as react]\n            [reagent.core :as reagent]\n            [nextjournal.log :as log]))\n\n(defonce get-context\n  (memoize\n   (fn [k]\n     (if (keyword? k)\n       (react/createContext (munge (str k)))\n       k))))\n\n(defn provide\n  \"Adds React contexts to the component tree.\n   `bindings` should be a map of {<keyword-or-Context>, <value-to-be-bound>}.\"\n  [bindings & body]\n  (loop [bindings (seq bindings)\n         out (->> body\n                  (reduce (fn [a el] (doto a (.push (reagent/as-element el)))) #js [])\n                  (.concat #js [react/Fragment #js {}])\n                  (.apply react/createElement nil))]\n    (if (empty? bindings)\n      out\n      (recur (rest bindings)\n             (let [[context-or-key v] (first bindings)\n                   ^js context (get-context context-or-key)]\n               (react/createElement (.-Provider context)\n                                    #js {:value v}\n                                    out))))))\n\n(defn consume\n  \"Reads a React context value within component tree.\n   `context` should be a keyword or React Context instance.\"\n  [context f]\n  (react/createElement\n   (.-Consumer (get-context context))\n   #js {}\n   (fn [value]\n     (reagent/as-element [f value]))))\n"]}