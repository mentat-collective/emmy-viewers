{
"version":3,
"file":"module$node_modules$three$src$materials$ShaderMaterial.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/three/src/materials/ShaderMaterial.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$materials$ShaderMaterial\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShaderMaterial = void 0;\n\nvar _Material = require(\"./Material.js\");\n\nvar _UniformsUtils = require(\"../renderers/shaders/UniformsUtils.js\");\n\nvar _default_vertexGlsl = _interopRequireDefault(require(\"../renderers/shaders/ShaderChunk/default_vertex.glsl.js\"));\n\nvar _default_fragmentGlsl = _interopRequireDefault(require(\"../renderers/shaders/ShaderChunk/default_fragment.glsl.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>\n * }\n */\nclass ShaderMaterial extends _Material.Material {\n  constructor(parameters) {\n    super();\n    this.type = 'ShaderMaterial';\n    this.defines = {};\n    this.uniforms = {};\n    this.vertexShader = _default_vertexGlsl.default;\n    this.fragmentShader = _default_fragmentGlsl.default;\n    this.linewidth = 1;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.fog = false; // set to use scene fog\n\n    this.lights = false; // set to use scene lights\n\n    this.clipping = false; // set to use user-defined clipping planes\n\n    this.extensions = {\n      derivatives: false,\n      // set to use derivatives\n      fragDepth: false,\n      // set to use fragment depth values\n      drawBuffers: false,\n      // set to use draw buffers\n      shaderTextureLOD: false // set to use shader texture LOD\n\n    }; // When rendered geometry doesn't include these attributes but the material does,\n    // use these default values in WebGL. This avoids errors when buffer data is missing.\n\n    this.defaultAttributeValues = {\n      'color': [1, 1, 1],\n      'uv': [0, 0],\n      'uv2': [0, 0]\n    };\n    this.index0AttributeName = undefined;\n    this.uniformsNeedUpdate = false;\n    this.glslVersion = null;\n\n    if (parameters !== undefined) {\n      if (parameters.attributes !== undefined) {\n        console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n      }\n\n      this.setValues(parameters);\n    }\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.fragmentShader = source.fragmentShader;\n    this.vertexShader = source.vertexShader;\n    this.uniforms = (0, _UniformsUtils.cloneUniforms)(source.uniforms);\n    this.defines = Object.assign({}, source.defines);\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.lights = source.lights;\n    this.clipping = source.clipping;\n    this.extensions = Object.assign({}, source.extensions);\n    this.glslVersion = source.glslVersion;\n    return this;\n  }\n\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.glslVersion = this.glslVersion;\n    data.uniforms = {};\n\n    for (const name in this.uniforms) {\n      const uniform = this.uniforms[name];\n      const value = uniform.value;\n\n      if (value && value.isTexture) {\n        data.uniforms[name] = {\n          type: 't',\n          value: value.toJSON(meta).uuid\n        };\n      } else if (value && value.isColor) {\n        data.uniforms[name] = {\n          type: 'c',\n          value: value.getHex()\n        };\n      } else if (value && value.isVector2) {\n        data.uniforms[name] = {\n          type: 'v2',\n          value: value.toArray()\n        };\n      } else if (value && value.isVector3) {\n        data.uniforms[name] = {\n          type: 'v3',\n          value: value.toArray()\n        };\n      } else if (value && value.isVector4) {\n        data.uniforms[name] = {\n          type: 'v4',\n          value: value.toArray()\n        };\n      } else if (value && value.isMatrix3) {\n        data.uniforms[name] = {\n          type: 'm3',\n          value: value.toArray()\n        };\n      } else if (value && value.isMatrix4) {\n        data.uniforms[name] = {\n          type: 'm4',\n          value: value.toArray()\n        };\n      } else {\n        data.uniforms[name] = {\n          value: value\n        }; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n      }\n    }\n\n    if (Object.keys(this.defines).length > 0) data.defines = this.defines;\n    data.vertexShader = this.vertexShader;\n    data.fragmentShader = this.fragmentShader;\n    const extensions = {};\n\n    for (const key in this.extensions) {\n      if (this.extensions[key] === true) extensions[key] = true;\n    }\n\n    if (Object.keys(extensions).length > 0) data.extensions = extensions;\n    return data;\n  }\n\n}\n\nexports.ShaderMaterial = ShaderMaterial;\nShaderMaterial.prototype.isShaderMaterial = true;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","ShaderMaterial","_Material","_UniformsUtils","_default_vertexGlsl","_default_fragmentGlsl","Material","constructor","parameters","type","defines","uniforms","vertexShader","fragmentShader","linewidth","wireframe","wireframeLinewidth","clipping","lights","fog","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","undefined","uniformsNeedUpdate","glslVersion","attributes","console","error","setValues","copy","source","cloneUniforms","assign","toJSON","meta","data","name","uniform","isTexture","uuid","isColor","getHex","isVector2","toArray","isVector3","isVector4","isMatrix3","isMatrix4","keys","length","key","prototype","isShaderMaterial"]
}
