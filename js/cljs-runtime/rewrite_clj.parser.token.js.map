{"version":3,"sources":["rewrite_clj/parser/token.cljc"],"mappings":";;AAMA,AAAA,4CAAA,oDAAAA,hGAAOM;AAAP,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,+EAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,iFAAA,kBAAAG,nGAAOD,4FACiBS;AADxB,AAAA,IAAAP,aAAAD;cAAA,AAAAE,4CAAAD,WAAA,IAAA,rEACmDQ;AADnD,AAEE,IAAMC,iBAAS,AAACC,cAAIF;AAApB,AACE,4CAAA,WAAAG,hDAACC,8BACCL;AADF,AAEG,IAAAM,oBAAK,AAACC,cAAI,6FAAAH,6CAAAA,zIAACF,+CAAAA,iEAAAA;AAAX,AAAA,GAAAI;AACK,wDAAAF,jDAACI;;AADNF;;;;;AALP,CAAA,oEAAA,pEAAOf;;AAAP;AAAA,CAAA,8DAAA,WAAAI,zEAAOJ;AAAP,AAAA,IAAAK,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAQA,iDAAA,jDAAOc,0GACiBT;AADxB,AAEE,IAAMU,IAAE,AAACC,wBAAOX;AAAhB,AACE,oDAAKU,+CACA,6GAAA,3GAAI,kDAAA,lDAACE,gDAAKF,SACR,AAACnB,0CAAiBS;;AAG7B;;;;uCAAA,vCAAOa,sFAGiBb,OAAwBc,MAAMC;AAHtD,AAIE,IAAMC,SAAO,wIAAA,mFAAA,IAAA,/NAACC,+EACCjB;AADf,AAGE,GAAI,AAACkB,uBAAOF;AACV,OAACG,gEAAkBL,MAAMC;;AACzB,IAAMK,IAAE,6CAAKL,0DAAaC;AAA1B,AACE,OAACG,gEACC,AAACE,kCAAcD,GACfA;;;AAEV;;;uCAAA,vCAAME,sFAEkBtB;AAFxB,AAGE,IAAMuB,aAAW,AAACZ,wBAAOX;IACnBoB,yGAAO,EAAI,wDAAA,xDAACI,6CAAED,kBACL,AAACd,+CAAsBT,QACvB,AAACT,0CAAiBS,vQACpB,6CAAKuB;IACZE,IAAE,AAACJ,kCAAcD;AALvB,AAME,GAAI,cAAAM,bAASD;AACX,OAACZ,qCAAYb,OAAOyB,EAAEL;;AACtB,OAACD,gEAAkBM,EAAEL","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","rewrite-clj.parser.token/read-to-boundary","p__75071","vec__75072","cljs.core.nth","seq75064","G__75065","cljs.core/first","cljs.core/next","self__5754__auto__","reader","allowed","allowed?","cljs.core/set","p1__75063#","rewrite-clj.reader/read-until","and__5043__auto__","cljs.core/not","rewrite-clj.reader/whitespace-or-boundary?","rewrite-clj.parser.token/read-to-char-boundary","c","rewrite-clj.reader/next","cljs.core.not_EQ_","rewrite-clj.parser.token/symbol-node","value","value-string","suffix","rewrite_clj.parser.token.read_to_boundary","cljs.core/empty?","rewrite_clj.node.token.token_node","s","rewrite-clj.reader/string->edn","rewrite-clj.parser.token/parse-token","first-char","cljs.core._EQ_","v","cljs.core/Symbol"],"sourcesContent":["(ns ^:no-doc rewrite-clj.parser.token\n  (:require [rewrite-clj.node.token :as ntoken]\n            [rewrite-clj.reader :as r]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn- read-to-boundary\n  [#?(:cljs ^not-native reader :default reader) & [allowed]]\n  (let [allowed? (set allowed)]\n    (r/read-until\n      reader\n      #(and (not (allowed? %))\n            (r/whitespace-or-boundary? %)))))\n\n(defn- read-to-char-boundary\n  [#?(:cljs ^not-native reader :default reader)]\n  (let [c (r/next reader)]\n    (str c\n         (if (not= c \\\\)\n           (read-to-boundary reader)\n           \"\"))))\n\n(defn- symbol-node\n  \"Symbols allow for certain boundary characters that have\n   to be handled explicitly.\"\n  [#?(:cljs ^not-native reader :default reader) value value-string]\n  (let [suffix (read-to-boundary\n                 reader\n                 [\\' \\:])]\n    (if (empty? suffix)\n      (ntoken/token-node value value-string)\n      (let [s (str value-string suffix)]\n        (ntoken/token-node\n          (r/string->edn s)\n          s)))))\n\n(defn parse-token\n  \"Parse a single token.\"\n  [#?(:cljs ^not-native reader :default reader)]\n  (let [first-char (r/next reader)\n        s (->> (if (= first-char \\\\)\n                 (read-to-char-boundary reader)\n                 (read-to-boundary reader))\n               (str first-char))\n        v (r/string->edn s)]\n    (if (symbol? v)\n      (symbol-node reader v s)\n      (ntoken/token-node v s))))\n"]}