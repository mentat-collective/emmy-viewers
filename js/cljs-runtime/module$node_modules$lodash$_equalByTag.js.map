{
"version":3,
"file":"module$node_modules$lodash$_equalByTag.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC/FC,MAAAA,CAASH,OAAA,CAAQ,oCAAR,CADsF,KAE/FI,WAAaJ,OAAA,CAAQ,wCAAR,CAFkF,CAG/FK,GAAKL,OAAA,CAAQ,+BAAR,CAH0F,CAI/FM,YAAcN,OAAA,CAAQ,yCAAR,CAJiF,CAK/FO,WAAaP,OAAA,CAAQ,wCAAR,CALkF,CAM/FQ,WAAaR,OAAA,CAAQ,wCAAR,CANkF,CA4B/FS,cAAgB,CADhBC,OACgB,CADFP,MAAA,CAASA,MAAOQ,CAAAA,SAAhB,CAA4BC,IAAAA,EAC1B,EAAcF,OAAYG,CAAAA,OAA1B;AAAoCD,IAAAA,EAoFxDX,OAAOC,CAAAA,OAAP,CAjEAY,QAAmB,CAACC,MAAD,CAASC,KAAT,CAAgBC,GAAhB,CAAqBC,OAArB,CAA8BC,UAA9B,CAA0CC,SAA1C,CAAqDC,KAArD,CAA4D,CAC7E,OAAQJ,GAAR,EACE,KAzBcK,mBAyBd,CACE,GAAKP,MAAOQ,CAAAA,UAAZ,EAA0BP,KAAMO,CAAAA,UAAhC,EACKR,MAAOS,CAAAA,UADZ,EAC0BR,KAAMQ,CAAAA,UADhC,CAEE,KAEFT,OAAA,CAASA,MAAOU,CAAAA,MAChBT,MAAA,CAAQA,KAAMS,CAAAA,MAEhB,MAlCiBC,sBAkCjB,CACE,GAAKX,MAAOQ,CAAAA,UAAZ,EAA0BP,KAAMO,CAAAA,UAAhC,EACI,CAACH,SAAA,CAAU,IAAIhB,UAAJ,CAAeW,MAAf,CAAV,CAAkC,IAAIX,UAAJ,CAAeY,KAAf,CAAlC,CADL,CAEE,KAEF,OAAO,CAAA,CAET,MAnDUW,kBAmDV,CACA,KAnDUC,eAmDV,CACA,KAjDYC,iBAiDZ,CAGE,MAAOxB,GAAA,CAAG,CAACU,MAAJ,CAAY,CAACC,KAAb,CAET,MAxDWc,gBAwDX,CACE,MAAOf,OAAOgB,CAAAA,IAAd;AAAsBf,KAAMe,CAAAA,IAA5B,EAAoChB,MAAOiB,CAAAA,OAA3C,EAAsDhB,KAAMgB,CAAAA,OAE9D,MAxDYC,iBAwDZ,CACA,KAvDYC,iBAuDZ,CAIE,MAAOnB,OAAP,EAAkBC,KAAlB,CAA0B,EAE5B,MAjESmB,cAiET,CACE,IAAIC,QAAU7B,UAEhB,MAjES8B,cAiET,CAEED,OAAA,GAAYA,OAAZ,CAAsB5B,UAAtB,CAEA,IAAIO,MAAOuB,CAAAA,IAAX,EAAmBtB,KAAMsB,CAAAA,IAAzB,EAAiC,EAHjBpB,OAGiB,CA/EZqB,CA+EY,CAAjC,CACE,KAIF,IADIC,GACJ,CADcnB,KAAMoB,CAAAA,GAAN,CAAU1B,MAAV,CACd,CACE,MAAOyB,IAAP,EAAkBxB,KAEpBE,QAAA,EAtFuBwB,CAyFvBrB,MAAMsB,CAAAA,GAAN,CAAU5B,MAAV,CAAkBC,KAAlB,CACI4B,MAAAA,CAAStC,WAAA,CAAY8B,OAAA,CAAQrB,MAAR,CAAZ,CAA6BqB,OAAA,CAAQpB,KAAR,CAA7B,CAA6CE,OAA7C,CAAsDC,UAAtD,CAAkEC,SAAlE,CAA6EC,KAA7E,CACbA,MAAA,CAAM,QAAN,CAAA,CAAgBN,MAAhB,CACA,OAAO6B,MAET,MAnFYC,iBAmFZ,CACE,GAAIpC,aAAJ,CACE,MAAOA,cAAcqC,CAAAA,IAAd,CAAmB/B,MAAnB,CAAP;AAAqCN,aAAcqC,CAAAA,IAAd,CAAmB9B,KAAnB,CA1D3C,CA6DA,MAAO,CAAA,CA9DsE,CA/CoB;",
"sources":["node_modules/lodash/_equalByTag.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_equalByTag\"] = function(global,require,module,exports) {\nvar Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Symbol","Uint8Array","eq","equalArrays","mapToArray","setToArray","symbolValueOf","symbolProto","prototype","undefined","valueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","dataViewTag","byteLength","byteOffset","buffer","arrayBufferTag","boolTag","dateTag","numberTag","errorTag","name","message","regexpTag","stringTag","mapTag","convert","setTag","size","COMPARE_PARTIAL_FLAG","stacked","get","COMPARE_UNORDERED_FLAG","set","result","symbolTag","call"]
}
