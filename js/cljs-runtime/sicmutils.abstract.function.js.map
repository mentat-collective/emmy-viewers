{"version":3,"sources":["sicmutils/abstract/function.cljc"],"mappings":"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A,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAzB,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,yDAAA,WAAAyB,OAAAE,3EAASM;;AAAT,AAAA,IAAAR,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAG,iBAAAD;;;AAAA,CAAA,AAAA,iFAAA,jFAASM,4FAsCac;;AAtCtB,AAAA,YAAA,RAsCiBM;AAtCjB,AAuCgB,IAAAC,WAAeD;IAAfE,WAAA,mFAAqBR;AAArB,AAAA,8JAAAO,SAAAC,kEAAAD,SAAAC,1OAACC,4EAAAA,+FAAAA;;;AAvCjB,CAAA,AAAA,iFAAA,jFAASvB,4FAwCac,EAAEC;;AAxCxB,AAAA,YAAA,RAwCiBK;AAxCjB,AAyCgB,IAAAI,WAAeJ;IAAfK,WAAA,mFAAqBX,EAAEC;AAAvB,AAAA,8JAAAS,SAAAC,kEAAAD,SAAAC,1OAACF,4EAAAA,+FAAAA;;;AAzCjB,CAAA,AAAA,iFAAA,jFAASvB,4FA0Cac,EAAEC,EAAEW;;AA1C1B,AAAA,YAAA,RA0CiBN;AA1CjB,AA2CgB,IAAAO,WAAeP;IAAfQ,WAAA,mFAAqBd,EAAEC,EAAEW;AAAzB,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAACL,4EAAAA,+FAAAA;;;AA3CjB,CAAA,AAAA,iFAAA,jFAASvB,4FA4Cac,EAAEC,EAAEW,EAAEtC;;AA5C5B,AAAA,YAAA,RA4CiBgC;AA5CjB,AA6CgB,IAAAS,WAAeT;IAAfU,WAAA,mFAAqBhB,EAAEC,EAAEW,EAAEtC;AAA3B,AAAA,8JAAAyC,SAAAC,kEAAAD,SAAAC,1OAACP,4EAAAA,+FAAAA;;;AA7CjB,CAAA,AAAA,iFAAA,jFAASvB,4FA8Cac,EAAEC,EAAEW,EAAEtC,EAAE2C;;AA9C9B,AAAA,YAAA,RA8CiBX;AA9CjB,AA+CgB,IAAAY,WAAeZ;IAAfa,WAAA,mFAAqBnB,EAAEC,EAAEW,EAAEtC,EAAE2C;AAA7B,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAACV,4EAAAA,+FAAAA;;;AA/CjB,CAAA,AAAA,iFAAA,jFAASvB,4FAgDac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB;;AAhDhC,AAAA,YAAA,RAgDiBU;AAhDjB,AAiDgB,IAAAc,WAAed;IAAfe,WAAA,mFAAqBrB,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB;AAA/B,AAAA,8JAAAwB,SAAAC,kEAAAD,SAAAC,1OAACZ,4EAAAA,+FAAAA;;;AAjDjB,CAAA,AAAA,iFAAA,jFAASvB,4FAkDac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B;;AAlDlC,AAAA,YAAA,RAkDiBhB;AAlDjB,AAmDgB,IAAAiB,WAAejB;IAAfkB,WAAA,mFAAqBxB,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B;AAAjC,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAACf,4EAAAA,+FAAAA;;;AAnDjB,CAAA,AAAA,iFAAA,jFAASvB,4FAoDac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG;;AApDpC,AAAA,YAAA,RAoDiBnB;AApDjB,AAqDgB,IAAAoB,WAAepB;IAAfqB,WAAA,mFAAqB3B,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG;AAAnC,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAAClB,4EAAAA,+FAAAA;;;AArDjB,CAAA,AAAA,iFAAA,jFAASvB,4FAsDac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG;;AAtDtC,AAAA,YAAA,RAsDiBtB;AAtDjB,AAuDgB,IAAAuB,WAAevB;IAAfwB,WAAA,mFAAqB9B,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG;AAArC,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAACrB,4EAAAA,+FAAAA;;;AAvDjB,CAAA,AAAA,kFAAA,lFAASvB,6FAwDac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG;;AAxDxC,AAAA,YAAA,RAwDiBzB;AAxDjB,AAyDgB,IAAA0B,WAAe1B;IAAf2B,WAAA,oFAAqBjC,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG;AAAvC,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAACxB,4EAAAA,+FAAAA;;;AAzDjB,CAAA,AAAA,kFAAA,lFAASvB,6FA0Dac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG;;AA1D1C,AAAA,YAAA,RA0DiB5B;AA1DjB,AA2DgB,IAAA6B,WAAe7B;IAAf8B,WAAA,oFAAqBpC,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG;AAAzC,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAAC3B,4EAAAA,+FAAAA;;;AA3DjB,CAAA,AAAA,kFAAA,lFAASvB,6FA4Dac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;;AA5D5C,AAAA,YAAA,RA4DiB/B;AA5DjB,AA6DgB,IAAAgC,WAAehC;IAAfiC,WAAA,oFAAqBvC,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;AAA3C,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAAC9B,4EAAAA,+FAAAA;;;AA7DjB,CAAA,AAAA,kFAAA,lFAASvB,6FA8Dac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;;AA9D9C,AAAA,YAAA,RA8DiBlC;AA9DjB,AA+DgB,IAAAmC,WAAenC;IAAfoC,WAAA,oFAAqB1C,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;AAA7C,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAACjC,4EAAAA,+FAAAA;;;AA/DjB,CAAA,AAAA,kFAAA,lFAASvB,6FAgEac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;;AAhEhD,AAAA,YAAA,RAgEiBrC;AAhEjB,AAiEgB,IAAAsC,WAAetC;IAAfuC,WAAA,oFAAqB7C,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;AAA/C,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAACpC,4EAAAA,+FAAAA;;;AAjEjB,CAAA,AAAA,kFAAA,lFAASvB,6FAkEac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;;AAlElD,AAAA,YAAA,RAkEiBxC;AAlEjB,AAmEgB,IAAAyC,WAAezC;IAAf0C,WAAA,oFAAqBhD,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;AAAjD,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAACvC,4EAAAA,+FAAAA;;;AAnEjB,CAAA,AAAA,kFAAA,lFAASvB,6FAoEac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;;AApEpD,AAAA,YAAA,RAoEiB3C;AApEjB,AAqEgB,IAAA4C,WAAe5C;IAAf6C,WAAA,oFAAqBnD,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;AAAnD,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAAC1C,4EAAAA,+FAAAA;;;AArEjB,CAAA,AAAA,kFAAA,lFAASvB,6FAsEac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;;AAtEtD,AAAA,YAAA,RAsEiB9C;AAtEjB,AAuEgB,IAAA+C,WAAe/C;IAAfgD,WAAA,oFAAqBtD,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;AAArD,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAAC7C,4EAAAA,+FAAAA;;;AAvEjB,CAAA,AAAA,kFAAA,lFAASvB,6FAwEac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;;AAxExD,AAAA,YAAA,RAwEiBjD;AAxEjB,AAyEgB,IAAAkD,WAAelD;IAAfmD,WAAA,oFAAqBzD,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG;AAAvD,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAAChD,4EAAAA,+FAAAA;;;AAzEjB,CAAA,AAAA,kFAAA,lFAASvB,6FA0Eac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAElH;;AA1E1D,AAAA,YAAA,RA0EiBiE;AA1EjB,AA2EgB,IAAAoD,WAAepD;IAAfqD,WAAA,oFAAqB3D,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAElH;AAAzD,AAAA,8JAAAqH,SAAAC,kEAAAD,SAAAC,1OAAClD,4EAAAA,+FAAAA;;;AA3EjB,CAAA,AAAA,kFAAA,lFAASvB,6FA4Eac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAElH,EAAEuH;;AA5E5D,AAAA,YAAA,RA4EiBtD;AA5EjB,AA6EgB,IAAAuD,WAAevD;IAAfwD,WAAA,oFAAqB9D,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAElH,EAAEuH;AAA3D,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAACrD,4EAAAA,+FAAAA;;;AA7EjB,CAAA,AAAA,kFAAA,lFAASvB,6FA8Eac,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAElH,EAAEuH,EAAEG;;AA9E9D,AAAA,YAAA,RA8EiBzD;AA9EjB,AA+EgB,IAAA0D,WAAe1D;IAAf2D,WAAoB,+CAAA,/CAACC,mIAAQlE,EAAEC,EAAEW,EAAEtC,EAAE2C,EAAErB,EAAE0B,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAEG,EAAElH,EAAEuH,UAAIG;AAAvE,AAAA,8JAAAC,SAAAC,kEAAAD,SAAAC,1OAACxD,4EAAAA,+FAAAA;;;AA/EjB,CAAA,kDAAA,lDAASvB;AAAT,AAAA,AAAA;;;AAAA,CAAA,wDAAA,xDAASA;;AAAT,CAAA,2DAAA,3DAASA;;AAAT,CAAA,gEAAA,WAAAJ,mBAAAC,qBAAAC,nHAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;8CAAA,9CAASI,kGAAUC,KAAKC,MAAMnB,OAAOC;AAArC,AAAA,YAAAe,uCAAmBE,KAAKC,MAAMnB,OAAOC;;;AAA5Be,AAqFT;;;;wDAAA,xDAAMiF,sHAGHvE;AAHH,AAIE,qBAAWV,bAASU;;AAEtB;;;;qCAAA,rCAAOwE,gFAGJxE;AAHH,AAAA,GAIS,AAACuE,sDAAkBvE;AAJ5B;AAAA,AAAA,MAAA,KAAA3C,MAAA;;;AAKE,OAAkB2C;;AAEpB;;;;6CAAA,7CAAOyE,gGAGJzE;AAHH,AAAA,GAIS,AAACuE,sDAAkBvE;AAJ5B;AAAA,AAAA,MAAA,KAAA3C,MAAA;;;AAKE,OAAoB2C;;AAEtB;;;;2CAAA,3CAAO0E,4FAGJ1E;AAHH,AAAA,GAIS,AAACuE,sDAAkBvE;AAJ5B;AAAA,AAAA,MAAA,KAAA3C,MAAA;;;AAKE,OAAmB2C;;AAErB;;;6CAAA,7CAAOM,gGAEJF,EAAEC;AAFL,AAGE,uEAAA,iIAAA,/LAAK,AAACkE,sDAAkBlE,UACnB,AAAC3D,6CAAE,AAAC8H,mCAAKpE,GAAG,AAACoE,mCAAKnE,WAClB,AAAC3D,6CAAE,AAAC+H,2CAAarE,GAAG,AAACqE,2CAAapE,SAClC,AAAC3D,6CAAE,AAACgI,yCAAWtE,GAAG,AAACsE,yCAAWrE;;AAErC,AAAA,iDAAA,uDAAAsE,xGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAxH,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+EAAA,/EAAMwH,0FACF7E;AADJ,AACO,qDAAA,mFAAA,2DAAA,YAAA,mFAAA,YAAA,vSAACT,4CAAWS;;;AADnB,CAAA,+EAAA,/EAAM6E,0FAEF7E,EAAE8E;AAFN,AAGG,IAAAC,aAAqB,AAAC3G,8DAA6B0G;aAAnD,AAAA3G,4CAAA4G,WAAA,IAAA,pEAAOzG;YAAP,AAAAH,4CAAA4G,WAAA,IAAA,nEAAcxG;AAAd,AACE,OAACyG,6EAAiBhF,EAAE1B,OAAOC;;;AAJhC,CAAA,+EAAA,/EAAMsG,0FAKF7E,EAAE1B,OAAOC;AALb,AAMG,GAAM,OAASA;AACT,IAAMkB,QAAM,2DAAA,zDAAI,AAACd,wBAAQL,SACX,AAAC2G,gBAAM3G;AADrB,AAGE,qDAAA,mFAAA,jIAACiB,4CAAWS,gJAAYP,cACZ,0CAAA,xCAAI,AAACd,wBAAQL,SAAQA,0FAAQA,gBAC7BC;;AANpB,GAQM,AAAC2G,qCAAa3G;AACd,IAAMwE,IAAY,AAACkC,gBAAM1G;IACnB4G,cAAY,AAACC,gCAAc7G;IAC3B8G,WAAY,AAACC,4BAAUtF,EAAE+C,EAAEoC;AAFjC,AAIE,qEAAA,WAAAI,iBAAAC,1FAACC;AAAD,AAAS,oFAAAF,wBAAAC,rGAACR,8FAAoB1G;qDACtB+G,SACA9G;;AAfhB,AAiBM,OAACE,uBAAU,CAAA,wDAAiBF;;;;;;AAvBrC,CAAA,yEAAA,zEAAMsG;;AAAN,AAyBA,8CAAA,9CAAea,kGAAeC;AAA9B,AACE,kBAAA,kEAAsBC;AAAtB,AACU,GAAI,kBAAAC,jBAASD;AAAOA;;AAAM,OAAC5I,gBAAM4I;;;mBAD3C,mEAEoBA;AAFpB,AAGU,GAAM,kBAAAC,jBAASD;AAAf,OAAAE,iDAAA,AAAAhJ,cAAA,AAAAwH,+CAAA,KAAAyB,eAAA,KAAA,AAAA,sIAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAD,iDAAA,AAAAhJ,cAAA,AAAAwH,+CAAA,KAAAyB,eAAA,KAAA,AAAA,2DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,WAAA,KAAA,IAAA,UAAA,KAAA,IAAA,lCAAiDH;;AAAjD,GAEM,EAAK,AAACjJ,4BAAYiJ,YACb,oEAAA,pEAAClJ,6CAAE,AAACuI,gBAAMW;AACf,IAAAI,aAAyBJ;UAAzB,AAAAzH,4CAAA6H,WAAA,IAAA,jEAAOC;aAAP,AAAA9H,4CAAA6H,WAAA,IAAA,pEAAW1H;YAAX,AAAAH,4CAAA6H,WAAA,IAAA,nEAAkBzH;AAAlB,AAAA,OAAAuH,iDAAA,AAAAhJ,cAAA,AAAAwH,sDAAA,KAAAyB,eAAA,KAAA,AAAA,sIAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAD,iDAAA,AAAAhJ,cAAA,AAAAwH,+CAAA,KAAAyB,eAAA,KAAA,AAAA,2DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,SAAA,KAAA,IAAA,UAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,YAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,WAAA,KAAA,IAAA,jLAC6BE,kHAAM3H,gDAAQC;;AALjD,AAOY,OAACE,uBAAU,CAAA,4EAAqCmH;;;;;AAVtE,AAWE,OAACtI,6CAAK,WAAKsI;AAAL,AAAA,0FACG,AAACM,YAAYN,OACb,AAACO,aAAUP;GACdD;;AASV,gDAAA,hDAAOS,sGAAiBpG,EAAEqG;AAA1B,AACE,IAAMC,OAAK,m8BAAA,AAAAR,iDAAA,AAAAhJ,cAAA,AAAAwH,+CAAA,KAAAyB,eAAA,KAAA,AAAAD,iDAAA,AAAAhJ,cAAA,AAAAwH,+CAAA,KAAAyB,eAAA,KAAA,AAAA,+DAAA,KAAA,IAAA,eAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,2CAAA,KAAA,IAAA,93CAAI,0EAAA,mFAAA,2DAAA,xNAACrJ,6CAAE,AAAC6J,0BAAQvG,+JACd,EAAI,mEAAA,nEAACtD,6CAAE,AAACM,gBAAMqJ,YACZ,+IAAA,AAAAP,iDAAA,AAAAhJ,cAAA,AAAAwH,+CAAA,KAAAyB,eAAA,KAAA,AAAAD,iDAAA,AAAAhJ,cAAA,AAAAwH,+CAAA,KAAAyB,eAAA,KAAA,AAAA,+DAAA,KAAA,IAAA,+BAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,2CAAA,KAAA,IAAA,1lBAAI,mEAAA,nEAACrJ,6CAAE,AAACuI,gBAAMoB,YAGZ,AAACG,6BAAe,AAAChC,mCAAKxE,iWACP,AAAC/C,eAAKoJ,kDAAQ,AAAC7B,mCAAKxE,uBACrC,uBAAA,vBAACvB,sYAGY4H,iDAAO,AAAC7B,mCAAKxE;AAVzC,AAWE,OAACT,4CACA+G,KAAK,AAACC,0BAAQvG,GAAG,AAACyE,2CAAazE,GAAG,AAAC0E,yCAAW1E;;AAEnD;;;;;mDAAA,nDAAOyG,4GAIJzG,EAAE0G;AAJL,AAKE,IAAMC,IAAS,AAACC,0BAAQF;IAClBG,SAAS,AAACC,kBAAQH;IAClBI,MAAS,AAACxJ,8CAAMyJ,qCAAgBH;IAChCI,KAAS,8DAAA,WAAAC,zEAACzB;AAAD,AAAS,wEAAAyB,jEAACC,kFAAgBJ;qDAAKJ;IACxCS,WAAS,AAACC,8BACA,WAAK9G,EAAE8F,KAAK3G;AAAZ,AACE,IAAM4H,KAAG,AAACC,kEAAehH,EAAEwG;AAA3B,AACE,GAAI,AAACS,4BAAQF;AAAb;;AAEE,OAACG,oEAAM,iBAAAC,WACC,AAACtB,8CAAgBpG,EAAEqG;IADpBsB,WAC0BV;AAD1B,AAAA,8JAAAS,SAAAC,kEAAAD,SAAAC,1OAAC9G,4EAAAA,+FAAAA;KAEDyG;;GACbX;AAZhB,AAaE,OAACpJ,8CAAMqK,sCAAM,AAACrK,8CAAMyC,EAAEiH,IAAI,AAACH,kBAAQM;;AAEvC;;;;oDAAA,pDAAOS,8GAGJ7H,EAAE8H,SAASC,SAASC;AAHvB,AAIE,GAAM,OAASD;AACT,GAAU,AAACE,iCAAaH;AAAxB;;AAAA,AACE,OAACrJ,uBAAU,CAAA,gGAAA,oEAAA,7EAAgDuJ,0EACtBhI,2DACT8H;;;AAJpC,GAKM,AAAC5C,qCAAa6C;AACd,AAAI,GAAU,qGAAA,nGAAK,EAAI,AAAC7C,qCAAa4C,eAAU,AAACnL,4BAAYmL,mBACzC,AAACpL,6CAAE,AAAC0I,gCAAc0C,UAAU,AAAC1C,gCAAc2C,gBAC3C,AAACrL,6CAAE,AAACuI,gBAAM6C,UAAU,AAAC7C,gBAAM8C;AAF1C;AAAA,AAGE,AAACtJ,uBAAU,CAAA,qFAAA,VAAoCsJ,kEACnBD;;;AAC9B,IAAAI,aAAA,AAAApL,cAAsC,AAACW,4CAAIqL,eAAKhB,SAASC,SAAS,AAACgB;IAAnEZ,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;mBAAA,AAAAlK,4CAAAmK,WAAA,IAAA,1EAASR;mBAAT,AAAA3J,4CAAAmK,WAAA,IAAA,1EAAkBP;gBAAlB,AAAA5J,4CAAAmK,WAAA,IAAA,vEAA2BO;AAA3B,AAAA,AACE,IAAAG,iBAAqBhJ;IAArBiJ,iBAAuBnB;IAAvBoB,iBAAgCnB;IAAhCoB,iBAAyC,AAACK,6CAAKxB,QAAQa;AAAvD,AAAA,mKAAAG,eAAAC,eAAAC,eAAAC,8EAAAH,eAAAC,eAAAC,eAAAC,1UAACtB,kFAAAA,+IAAAA;;AADH;AAAA,eAAAK;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAE,qBAAA,AAAAzL,cAAAoL;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,iBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,kBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAxD,gBAAAwD;eAAA;;;;;;;AAAA,IAAAG,aAAA,AAAA5L,gBAAAkL;mBAAA,AAAA/J,4CAAAyK,WAAA,IAAA,1EAASd;mBAAT,AAAA3J,4CAAAyK,WAAA,IAAA,1EAAkBb;gBAAlB,AAAA5J,4CAAAyK,WAAA,IAAA,vEAA2BC;AAA3B,AAAA,AACE,IAAAO,iBAAqBpJ;IAArBqJ,iBAAuBvB;IAAvBwB,iBAAgCvB;IAAhCwB,iBAAyC,AAACC,6CAAKxB,QAAQa;AAAvD,AAAA,mKAAAO,eAAAC,eAAAC,eAAAC,8EAAAH,eAAAC,eAAAC,eAAAC,1UAAC1B,kFAAAA,+IAAAA;;AADH;AAAA,eAAA,AAAA5K,eAAAiL;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAXV,GAaM,qBAAAuB,pBAAU1B;AACV,GAAU,AAACrL,6CAAE,AAACgN,qBAAO5B,UAAUC;AAA/B;;AAAA,AACE,OAACtJ,uBAAU,CAAA,mFAAA,wFAAA,lGAAkCsJ,kEAAqB,AAAC2B,qBAAO5B,+EAClC9H;;;AAhBhD,AAkBY,OAACvB,uBAAU,CAAA,0FAAA,VAAyCqJ,+DAAkBC;;;;;;AAEpF,8CAAA,9CAAOlH,kGAAeb,EAAE0G;AAAxB,AACE,qGAAA,mFAAA,xLAACmB,kDAAoB7H,EAAE0G,GAAG,AAACjC,2CAAazE;;AACxC,oBAAI,AAAC2J,eAAKC,wCAAalD;AACrB,OAACD,iDAAmBzG,EAAE0G;;AACtB,iDAAA,AAAAZ,iDAAA,AAAAhJ,cAAA,AAAAwH,+CAAA,KAAAyB,eAAA,2CAAA,KAAA,IAAA,hOAAC8D,iLAAqB,AAACrF,mCAAKxE,mBAAK,AAACvC,4CAAI0C,uBAASuG;;;AAOnD,AAAAoD,uEAAA,mFAAA,0HAAA,WAAoC9J;AAApC,AACE,OAACT,4CAAW,AAACuK,yDAAW,AAACtF,mCAAKxE,IAClB,AAACuG,0BAAQvG,GACT,AAACyE,2CAAazE,GACd,AAAC0E,yCAAW1E","names":["cljs.core.derive","sicmutils.abstract.function/sicm-set->exemplar","s","cljs.core._EQ_","cljs.core/sequential?","vec__87257","seq__87258","cljs.core/seq","first__87259","cljs.core/first","cljs.core/next","constructor","args","G__87262","js/Error","cljs.core.mapv","cljs.core.apply","sicmutils.structure/up","cljs.core.map","sicmutils.structure/down","cljs.core.repeat","cljs.core/second","G__87265","G__87269","cljs.core.into","G__87270","p__87275","vec__87276","cljs.core.nth","sicmutils.abstract.function/sicm-signature->domain-range","arrow","domain","range","and__4251__auto__","sicmutils.util/illegal","d","cljs.core/vector?","cljs.core/PROTOCOL_SENTINEL","unused__20572__auto__","self__","G__87299","args87287","cljs.core/aclone","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sicmutils.abstract.function/Function","sicmutils.abstract.function/->Function","name","arity","_","sicmutils.value/zero-like","sicmutils.value/one-like","meta","cljs.core/with-meta","cljs.core/identity","f","sicmutils.function$.compose","sicmutils.value/exact?","sicmutils.value/freeze","a","b","sicmutils.abstract.function/f:=","x","writer","cljs.core.write_all","this","G__87327","G__87328","sicmutils.abstract.function/literal-apply","G__87332","G__87333","c","G__87335","G__87336","G__87338","G__87339","e","G__87340","G__87341","G__87343","G__87344","g","G__87346","G__87347","h","G__87348","G__87349","i","G__87355","G__87356","j","G__87358","G__87359","k","G__87365","G__87366","l","G__87377","G__87378","m","G__87384","G__87385","n","G__87388","G__87389","o","G__87397","G__87398","p","G__87408","G__87409","q","G__87411","G__87412","r","G__87414","G__87415","G__87418","G__87419","t","G__87441","G__87442","rest","G__87448","G__87449","cljs.core.concat","sicmutils.abstract.function/literal-function?","sicmutils.abstract.function/name","sicmutils.abstract.function/domain-types","sicmutils.abstract.function/range-type","var_args","G__87463","sicmutils.abstract.function/literal-function","signature","vec__87464","sicmutils.abstract$.function$.literal_function","cljs.core/count","sicmutils.structure/structure?","orientation","sicmutils.structure/orientation","template","sicmutils.structure/literal","p1__87460#","p2__87461#","sicmutils.structure.mapr","sicmutils.abstract.function/binding-pairs","litfns","entry","cljs.core/Symbol","cljs.core.sequence","cljs.core/List","vec__87470","sym","extract-sym","entry->fn","sicmutils.abstract.function/literal-partial","path","fexp","sicmutils.function/arity","sicmutils.numsymb/derivative","sicmutils.abstract.function/literal-derivative","xs","v","sicmutils.matrix/seq->","flat-v","cljs.core/flatten","tag","sicmutils.differential/max-order-tag","ve","p1__87473#","sicmutils.differential.primal_part","partials","sicmutils.structure/map-chain","dx","sicmutils.differential.tangent_part","sicmutils.value/zero?","sicmutils.differential.d_COLON__STAR_","G__87474","G__87475","sicmutils.differential/d:+","sicmutils.abstract.function/check-argument-type","provided","expected","indexes","sicmutils.value/numerical?","seq__87476","chunk__87477","count__87478","i__87479","vec__87494","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__87501","sub-index","cljs.core/list","cljs.core.range","G__87497","G__87498","G__87499","G__87500","G__87504","G__87505","G__87506","G__87507","cljs.core.conj","cljs.core/Keyword","sicmutils.value/kind","cljs.core/some","sicmutils.differential/perturbed?","sicmutils.abstract.number/literal-number","sicmutils.generic/simplify"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.abstract.function\n  \"Implementation of a [[literal-function]] constructor. Literal functions can be\n  applied to structures and numeric inputs, and differentiated.\n\n  The namespace also contains an implementation of a small language for\n  declaring the input and output types of [[literal-function]] instances.\"\n  (:refer-clojure :exclude [name])\n  (:require [sicmutils.abstract.number :as an]\n            [sicmutils.differential :as d]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g]\n            [sicmutils.matrix :as m]\n            [sicmutils.numsymb :as sym]\n            [sicmutils.polynomial]\n            [sicmutils.structure :as s]\n            [sicmutils.util :as u]\n            [sicmutils.value :as v])\n  #?(:clj\n     (:import (clojure.lang IFn))))\n\n;; ## Abstract Function\n;;\n;; This namespace declares an abstract function type, along with the support\n;; structure to process the scmutils domain/range language.\n\n(declare literal-apply f:=)\n\n;; This derivation allows `::function` to take advantage of all generic\n;; operations installed via [[sicmutils.function]].\n\n(derive ::function ::v/function)\n\n(defn ^:private sicm-set->exemplar\n  \"Convert a SICM-style set (e.g., Real or (UP Real Real)) to\n  an exemplar (an instance of the relevant type).\"\n  [s]\n  (cond\n    (= s 'Real) 0\n\n    (sequential? s)\n    (let [[constructor & args] s]\n      (case constructor\n        X     (mapv sicm-set->exemplar args)\n        UP    (apply s/up (map sicm-set->exemplar args))\n        DOWN  (apply s/down (map sicm-set->exemplar args))\n        UP*   (apply s/up (repeat (second args) (sicm-set->exemplar (first args))))\n        DOWN* (apply s/down (repeat (second args) (sicm-set->exemplar (first args))))\n        X*    (into [] (repeat (second args) (sicm-set->exemplar (first args))))))))\n\n(defn ^:no-doc sicm-signature->domain-range\n  \"Convert a SICM-style literal function signature (e.g.,\n  '(-> Real (X Real Real)) ) to our 'exemplar' format.\"\n  [[arrow domain range]]\n  (when-not (and (= '-> arrow) domain range)\n    (u/illegal (str \"A SICM signature is of the form '(-> domain range), got: \" arrow domain range)))\n  [(let [d (sicm-set->exemplar domain)]\n     (if (vector? d) d [d]))\n   (sicm-set->exemplar range)])\n\n(deftype Function [name arity domain range]\n  v/Value\n  (zero? [_] false)\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [_] (fn [& _] (v/zero-like range)))\n  (one-like [_] (fn [& _] (v/one-like range)))\n  (identity-like [_]\n    (let [meta {:arity arity :from :identity-like}]\n      (with-meta identity meta)))\n  (exact? [f] (f/compose v/exact? f))\n  (freeze [_] (v/freeze name))\n  (kind [_] ::function)\n\n  f/IArity\n  (arity [_] arity)\n\n  Object\n  (toString [_] (str name))\n  #?(:clj (equals [a b] (f:= a b)))\n\n  #?@(:clj\n      [IFn\n       (invoke [this x] (literal-apply this [x]))\n       (invoke [this x y] (literal-apply this [x y]))\n       (invoke [this x y z] (literal-apply this [x y z]))\n       (invoke [this w x y z] (literal-apply this [w x y z]))\n       (applyTo [this xs] (literal-apply this xs))]\n\n      :cljs\n      [IEquiv\n       (-equiv [a b] (f:= a b))\n\n       IPrintWithWriter\n       (-pr-writer [x writer _]\n                   (write-all writer (.toString x)))\n\n       IFn\n       (-invoke [this a]\n                (literal-apply this [a]))\n       (-invoke [this a b]\n                (literal-apply this [a b]))\n       (-invoke [this a b c]\n                (literal-apply this [a b c]))\n       (-invoke [this a b c d]\n                (literal-apply this [a b c d]))\n       (-invoke [this a b c d e]\n                (literal-apply this [a b c d e]))\n       (-invoke [this a b c d e f]\n                (literal-apply this [a b c d e f]))\n       (-invoke [this a b c d e f g]\n                (literal-apply this [a b c d e f g]))\n       (-invoke [this a b c d e f g h]\n                (literal-apply this [a b c d e f g h]))\n       (-invoke [this a b c d e f g h i]\n                (literal-apply this [a b c d e f g h i]))\n       (-invoke [this a b c d e f g h i j]\n                (literal-apply this [a b c d e f g h i j]))\n       (-invoke [this a b c d e f g h i j k]\n                (literal-apply this [a b c d e f g h i j k]))\n       (-invoke [this a b c d e f g h i j k l]\n                (literal-apply this [a b c d e f g h i j k l]))\n       (-invoke [this a b c d e f g h i j k l m]\n                (literal-apply this [a b c d e f g h i j k l m]))\n       (-invoke [this a b c d e f g h i j k l m n]\n                (literal-apply this [a b c d e f g h i j k l m n]))\n       (-invoke [this a b c d e f g h i j k l m n o]\n                (literal-apply this [a b c d e f g h i j k l m n o]))\n       (-invoke [this a b c d e f g h i j k l m n o p]\n                (literal-apply this [a b c d e f g h i j k l m n o p]))\n       (-invoke [this a b c d e f g h i j k l m n o p q]\n                (literal-apply this [a b c d e f g h i j k l m n o p q]))\n       (-invoke [this a b c d e f g h i j k l m n o p q r]\n                (literal-apply this [a b c d e f g h i j k l m n o p q r]))\n       (-invoke [this a b c d e f g h i j k l m n o p q r s]\n                (literal-apply this [a b c d e f g h i j k l m n o p q r s]))\n       (-invoke [this a b c d e f g h i j k l m n o p q r s t]\n                (literal-apply this [a b c d e f g h i j k l m n o p q r s t]))\n       (-invoke [this a b c d e f g h i j k l m n o p q r s t rest]\n                (literal-apply this (concat [a b c d e f g h i j k l m n o p q r s t]  rest)))]))\n\n#?(:clj\n   (defmethod print-method Function [^Function f ^java.io.Writer w]\n     (.write w (.toString f))))\n\n(defn literal-function?\n  \"Returns true if the supplied object is an instance of [[Function]], false\n  otherwise.\"\n  [f]\n  (instance? Function f))\n\n(defn- name\n  \"Returns the `-name` field of the supplied [[Function]] object. Errors if any\n  other type is supplied.\"\n  [f]\n  {:pre [(literal-function? f)]}\n  (.-name ^Function f))\n\n(defn- domain-types\n  \"Returns the `-domain` field of the supplied [[Function]] object. Errors if any\n  other type is supplied.\"\n  [f]\n  {:pre [(literal-function? f)]}\n  (.-domain ^Function f))\n\n(defn- range-type\n  \"Returns the `-range` field of the supplied [[Function]] object. Errors if any\n  other type is supplied.\"\n  [f]\n  {:pre [(literal-function? f)]}\n  (.-range ^Function f))\n\n(defn- f:=\n  \"Returns true if the function `a` equals `b`, false otherwise.\"\n  [a b]\n  (and (literal-function? b)\n       (= (name a) (name b))\n       (= (domain-types a) (domain-types b))\n       (= (range-type a) (range-type b))))\n\n(defn literal-function\n  ([f] (->Function f [:exactly 1] [0] 0))\n  ([f signature]\n   (let [[domain range] (sicm-signature->domain-range signature)]\n     (literal-function f domain range)))\n  ([f domain range]\n   (cond (number? range)\n         (let [arity (if (vector? domain)\n                       (count domain)\n                       1)]\n           (->Function f [:exactly arity]\n                       (if (vector? domain) domain [domain])\n                       range))\n\n         (s/structure? range)\n         (let [n           (count range)\n               orientation (s/orientation range)\n               template    (s/literal f n orientation)]\n\n           (s/mapr #(literal-function %1 domain %2)\n                   template\n                   range))\n         :else\n         (u/illegal (str \"WTF range\" range)))))\n\n(defn ^:no-doc binding-pairs [litfns]\n  (letfn [(extract-sym [entry]\n            (if (symbol? entry) entry (first entry)))\n          (entry->fn [entry]\n            (cond (symbol? entry) `(literal-function (quote ~entry))\n\n                  (and (sequential? entry)\n                       (= (count entry) 3))\n                  (let [[sym domain range] entry]\n                    `(literal-function (quote ~sym) ~domain ~range))\n\n                  :else (u/illegal (str \"unknown literal function type\" entry))))]\n    (mapv (fn [entry]\n            [(extract-sym entry)\n             (entry->fn entry)])\n          litfns)))\n\n(defmacro with-literal-functions [litfns & body]\n  (let [pairs    (binding-pairs litfns)\n        bindings (into [] cat pairs)]\n    `(let ~bindings ~@body)))\n\n;; ## Differentiation of literal functions\n\n(defn- literal-partial [f path]\n  (let [fexp (if (= (f/arity f) [:exactly 1]) ;; univariate\n               (if (= (first path) 0)\n                 (if (= (count path) 1)\n                   ;; Special-case the single argument case, or a unary function\n                   ;; that's provided with a structure of a single entry.\n                   (sym/derivative (name f))\n                   `((~'partial ~@(next path)) ~(name f)))\n                 (u/illegal \"wrong indices\"))\n               ;; If the function takes multiple arguments we DO need to index\n               ;; into that first layer. (else the first layer is added.)\n               `((~'partial ~@path) ~(name f)))]\n    (->Function\n     fexp (f/arity f) (domain-types f) (range-type f))))\n\n(defn- literal-derivative\n  \"Takes a literal function `f` and a sequence of arguments `xs`, and generates an\n  expanded `((D f) xs)` by applying the chain rule and summing the partial\n  derivatives for each differential argument in the input structure.\"\n  [f xs]\n  (let [v        (m/seq-> xs)\n        flat-v   (flatten v)\n        tag      (apply d/max-order-tag flat-v)\n        ve       (s/mapr #(d/primal-part % tag) v)\n        partials (s/map-chain\n                  (fn [x path _]\n                    (let [dx (d/tangent-part x tag)]\n                      (if (v/zero? dx)\n                        0\n                        (d/d:* (literal-apply\n                                (literal-partial f path) ve)\n                               dx))))\n                  v)]\n    (apply d/d:+ (apply f ve) (flatten partials))))\n\n(defn- check-argument-type\n  \"Check that the argument provided at index i has the same type as\n  the exemplar expected.\"\n  [f provided expected indexes]\n  (cond (number? expected)\n        (when-not (v/numerical? provided)\n          (u/illegal (str \"expected numerical quantity in argument \" indexes\n                          \" of function call \" f\n                          \" but got \" provided)))\n        (s/structure? expected)\n        (do (when-not (and (or (s/structure? provided) (sequential? provided))\n                           (= (s/orientation provided) (s/orientation expected))\n                           (= (count provided) (count expected)))\n              (u/illegal (str \"expected structure matching \" expected\n                              \" but got \" provided)))\n            (doseq [[provided expected sub-index] (map list provided expected (range))]\n              (check-argument-type f provided expected (conj indexes sub-index))))\n        (keyword? expected) ;; a keyword has to match the argument's kind\n        (when-not (= (v/kind provided) expected)\n          (u/illegal (str \"expected argument of type \" expected \" but got \" (v/kind provided)\n                          \" in call to function \" f)))\n\n        :else (u/illegal (str \"unexpected argument example. got \" provided \" want \" expected))))\n\n(defn- literal-apply [f xs]\n  (check-argument-type f xs (domain-types f) [0])\n  (if (some d/perturbed? xs)\n    (literal-derivative f xs)\n    (an/literal-number `(~(name f) ~@(map v/freeze xs)))))\n\n;; ## Specific Generics\n;;\n;; We can install one more method - [[sicmutils.generic/simplify]] returns its\n;; argument with the internally captured name simplified.\n\n(defmethod g/simplify [::function] [f]\n  (->Function (g/simplify (name f))\n              (f/arity f)\n              (domain-types f)\n              (range-type f)))\n"]}