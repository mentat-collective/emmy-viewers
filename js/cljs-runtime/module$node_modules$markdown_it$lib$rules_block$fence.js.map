{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_block$fence.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/rules_block/fence.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_block$fence\"] = function(global,require,module,exports) {\n// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","state","startLine","endLine","silent","haveEndMarker","pos","bMarks","tShift","max","eMarks","sCount","blkIndent","marker","src","charCodeAt","mem","skipChars","len","markup","slice","params","indexOf","String","fromCharCode","nextLine","skipSpaces","line","token","push","info","content","getLines","map"]
}
