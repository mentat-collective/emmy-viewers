{"version":3,"sources":["sicmutils/rational_function.cljc"],"mappings":"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AA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA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","names":["cljs.core/PROTOCOL_SENTINEL","unused__20572__auto__","self__","G__86784","js/Error","args86775","cljs.core/aclone","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sicmutils.rational-function/RationalFunction","sicmutils.rational-function/->RationalFunction","arity","u","v","m","_","sicmutils.value/zero?","sicmutils.value/one?","sicmutils.value/identity?","sicmutils.value/zero-like","sicmutils.value/one-like","sicmutils.value/identity-like","cljs.core/List","sicmutils.value/freeze","this","that","sicmutils.rational-function/eq","G__86797","G__86798","sicmutils.rational-function/evaluate","a","G__86799","G__86800","b","G__86801","G__86802","c","G__86803","G__86804","d","G__86805","G__86806","e","G__86807","G__86808","f","G__86809","G__86810","g","G__86811","G__86812","h","G__86813","G__86814","i","G__86815","G__86816","j","G__86818","G__86819","k","G__86822","G__86823","l","G__86824","G__86825","G__86827","G__86828","n","G__86831","G__86832","o","G__86833","G__86834","p","G__86835","G__86836","q","G__86837","G__86838","r","G__86839","G__86840","s","G__86841","G__86842","t","G__86843","G__86844","rest","G__86845","G__86846","cljs.core.into","x","writer","cljs.core.write_all","sicmutils.rational-function/rational-function?","sicmutils.rational-function/coeff?","sicmutils.polynomial/coeff?","sicmutils.rational-function/bare-arity","rf","sicmutils.rational-function/bare-u","sicmutils.rational-function/bare-v","sicmutils.rational-function/arity","sicmutils.polynomial/arity","sicmutils.rational-function/check-same-arity","ua","va","cljs.core._EQ_","sicmutils.util/illegal","sicmutils.rational-function/negative?","sicmutils.polynomial/negative?","and__4251__auto__","sicmutils.value/=","sicmutils.ratio/denominator","sicmutils.ratio/numerator","sicmutils.rational-function/make-reduced","sicmutils.polynomial/polynomial?","sicmutils.generic/div","sicmutils.rational-function/coef-sgn","sicmutils.value/real?","sicmutils.generic/negative?","sicmutils.complex/complex?","sicmutils.generic/real-part","sicmutils.rational-function/->reduced","sicmutils.util/arithmetic-ex","vec__86892","cljs.core.nth","vec__86895","xform","cljs.core.comp","cljs.core.distinct","cljs.core.map","coefs","cljs.core.concat","sicmutils.polynomial/coefficients","factor","cljs.core.transduce","cljs.core.completing","sicmutils.generic/lcm","sicmutils.polynomial/leading-coefficient","sicmutils.generic/negate","u'","v'","sicmutils.generic/mul","sicmutils.generic/gcd","u''","v''","sicmutils.polynomial/evenly-divide","sicmutils.rational-function/make","sicmutils.rational-function/binary-combine","poly-op","uv-op","vec__86917","u-n","u-d","v-n","v-d","sicmutils.rational-function/uv:+","sicmutils.polynomial/add","divide-through","sicmutils.polynomial/mul","u':g","v':g","sicmutils.rational-function/uv:-","sicmutils.polynomial/negate","sicmutils.rational-function/uv:*","d1","d2","sicmutils.rational-function/uv:gcd","result","sicmutils.rational-function/negate","cljs.core/meta","sicmutils.rational-function/abs","sicmutils.rational-function/add","sicmutils.rational-function/sub","sicmutils.polynomial/sub","sicmutils.rational-function/mul","sicmutils.rational-function/square","sicmutils.polynomial/square","sicmutils.rational-function/cube","sicmutils.polynomial/cube","sicmutils.rational-function/expt","sicmutils.value/native-integral?","sicmutils.polynomial/expt","vec__86926","top","bottom","sicmutils.rational-function/invert","sicmutils.generic/invert","sicmutils.rational-function/div","sicmutils.rational-function/gcd","xs","sicmutils.polynomial/evaluate","sicmutils.rational-function/arg-scale","factors","sicmutils.polynomial/arg-scale","sicmutils.rational-function/arg-shift","shifts","sicmutils.polynomial/arg-shift","sicmutils.rational-function/partial-derivative","sicmutils.polynomial/partial-derivative","sicmutils.rational-function/partial-derivatives","sicmutils.polynomial/partial-derivatives","iter__4652__auto__","s__86950","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__86952","cljs.core/chunk-buffer","i__86951","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__86949","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","sicmutils.rational-function/operator-table","cljs.core.assoc","sicmutils.polynomial/operator-table","sicmutils.util.aggregate.group","sicmutils.rational-function/operators-known","sicmutils.util/keyset","var_args","G__86970","sicmutils.rational-function/expression->","expr","sicmutils.rational_function.expression__GT_","cljs.core/vector","cljs.core/compare","cont","v-compare","vars","sicmutils.expression/variables-in","clojure.set.difference","sorted","cljs.core.sort","sym->var","cljs.core/zipmap","sicmutils.polynomial/new-variables","sicmutils.expression/evaluate","sicmutils.rational-function/from-points","sicmutils.generic/simplify","sicmutils.rational-function.interpolate/bulirsch-stoer-recursive","sicmutils.polynomial.identity","sicmutils.rational-function/->expression","sicmutils.polynomial/->expression","G__86972","G__86973","fexpr__86971","sicmutils.numsymb/symbolic-operator","sicmutils.rational-function/analyzer","js/sicmutils","js/sicmutils.rational-function","js/sicmutils.rational-function.t_sicmutils$rational_function86974","sicmutils.rational-function/t_sicmutils$rational_function86974","_86976","meta86975","sicmutils.rational-function/->t_sicmutils$rational_function86974","cljs.core/contains?","sicmutils.polynomial/bare-arity","sicmutils.polynomial/defbinary","sicmutils.generic/solve-linear-right","sicmutils.generic/solve-linear","sicmutils.generic/exact-divide","vec__86977","term","terms","sicmutils.polynomial/bare-terms","sicmutils.polynomial.impl/constant-term?","sicmutils.polynomial.impl/coefficient","sicmutils.rational-function/defbinary","generic-op","pairs","seq__86980","chunk__86981","count__86982","i__86983","vec__86992","c__4679__auto__","cljs.core/chunk-first","vec__86997","cljs.core/next","sicmutils.generic/add","sicmutils.generic/sub","sicmutils.generic/abs","sicmutils.generic/square","sicmutils.generic/cube","sicmutils.generic/expt","cljs.core/with-meta","sicmutils.generic/partial-derivative","sicmutils.value/seqtype","selectors","cljs.core/empty?","sicmutils.structure/down*"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.rational-function\n  (:refer-clojure :exclude [abs])\n  (:require [clojure.set :as set]\n            [sicmutils.complex :refer [complex?]]\n            [sicmutils.expression :as x]\n            [sicmutils.expression.analyze :as a]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g]\n            [sicmutils.numsymb :as sym]\n            [sicmutils.polynomial :as p]\n            [sicmutils.polynomial.impl :as pi]\n            [sicmutils.ratio :as r]\n            [sicmutils.rational-function.interpolate :as ri]\n            [sicmutils.structure :as ss]\n            [sicmutils.util :as u]\n            [sicmutils.util.aggregate :as ua]\n            [sicmutils.value :as v])\n  #?(:clj\n     (:import (clojure.lang AFn IFn IObj Seqable))))\n\n;; ## Rational Functions\n;;\n;; This namespace contains an implementation of rational functions, or rational\n;; fractions; the data structure wraps a numerator `u` and denominator `v` where\n;; either or both are instances of [[p/Polynomial]]. (If both become\n;; non-polynomial, the functions in this namespace drop the [[RationalFunction]]\n;; instance down to whatever type is produced by `(g/divide u v)`).\n;;\n;; The [[RationalFunction]] type wraps up `u` and `v`, the `arity` of the\n;; rational function (which must match the arity of `u` and `v`) and optional\n;; metadata `m`.\n\n(declare evaluate eq)\n\n(deftype RationalFunction [arity u v m]\n  f/IArity\n  (arity [_] [:between 0 arity])\n\n  r/IRational\n  (numerator [_] u)\n  (denominator [_] v)\n\n\n\n  v/Value\n  (zero? [_] (v/zero? u))\n  (one? [_] (and (v/one? u) (v/one? v)))\n  (identity? [_] (and (v/identity? u) (v/one? v)))\n\n  (zero-like [_] (v/zero-like u))\n  (one-like [_] (v/one-like u))\n  (identity-like [_]\n    (RationalFunction. arity\n                       (v/identity-like u)\n                       (v/one-like v)\n                       m))\n  (exact? [_] false)\n  (freeze [_] (list '/ (v/freeze u) (v/freeze v)))\n  (kind [_] ::rational-function)\n\n  #?@(:clj\n      [Object\n       (equals [this that] (eq this that))\n       (toString [_] (pr-str (list '/ u v)))\n\n       IObj\n       (meta [_] m)\n       (withMeta [_ meta] (RationalFunction. arity u v meta))\n\n       Seqable\n       (seq [_] (list u v))\n\n       IFn\n       (invoke [this]\n               (evaluate this []))\n       (invoke [this a]\n               (evaluate this [a]))\n       (invoke [this a b]\n               (evaluate this [a b]))\n       (invoke [this a b c]\n               (evaluate this [a b c]))\n       (invoke [this a b c d]\n               (evaluate this [a b c d]))\n       (invoke [this a b c d e]\n               (evaluate this [a b c d e]))\n       (invoke [this a b c d e f]\n               (evaluate this [a b c d e f]))\n       (invoke [this a b c d e f g]\n               (evaluate this [a b c d e f g]))\n       (invoke [this a b c d e f g h]\n               (evaluate this [a b c d e f g h]))\n       (invoke [this a b c d e f g h i]\n               (evaluate this [a b c d e f g h i]))\n       (invoke [this a b c d e f g h i j]\n               (evaluate this [a b c d e f g h i j]))\n       (invoke [this a b c d e f g h i j k]\n               (evaluate this [a b c d e f g h i j k]))\n       (invoke [this a b c d e f g h i j k l]\n               (evaluate this [a b c d e f g h i j k l]))\n       (invoke [this a b c d e f g h i j k l m]\n               (evaluate this [a b c d e f g h i j k l m]))\n       (invoke [this a b c d e f g h i j k l m n]\n               (evaluate this [a b c d e f g h i j k l m n]))\n       (invoke [this a b c d e f g h i j k l m n o]\n               (evaluate this [a b c d e f g h i j k l m n o]))\n       (invoke [this a b c d e f g h i j k l m n o p]\n               (evaluate this [a b c d e f g h i j k l m n o p]))\n       (invoke [this a b c d e f g h i j k l m n o p q]\n               (evaluate this [a b c d e f g h i j k l m n o p q]))\n       (invoke [this a b c d e f g h i j k l m n o p q r]\n               (evaluate this [a b c d e f g h i j k l m n o p q r]))\n       (invoke [this a b c d e f g h i j k l m n o p q r s]\n               (evaluate this [a b c d e f g h i j k l m n o p q r s]))\n       (invoke [this a b c d e f g h i j k l m n o p q r s t]\n               (evaluate this [a b c d e f g h i j k l m n o p q r s t]))\n       (invoke [this a b c d e f g h i j k l m n o p q r s t rest]\n               (evaluate this (into [a b c d e f g h i j k l m n o p q r s t] rest)))\n       (applyTo [this xs] (AFn/applyToHelper this xs))]\n\n      :cljs\n      [Object\n       (toString [_] (str u \" : \" v))\n\n       IEquiv\n       (-equiv [this that] (eq this that))\n\n       IMeta\n       (-meta [_] m)\n\n       IWithMeta\n       (-with-meta [_ m] (RationalFunction. arity u v m))\n\n       ISeqable\n       (-seq [_] (list u v))\n\n       IFn\n       (-invoke [this]\n                (evaluate this []))\n       (-invoke [this a]\n                (evaluate this [a]))\n       (-invoke [this a b]\n                (evaluate this [a b]))\n       (-invoke [this a b c]\n                (evaluate this [a b c]))\n       (-invoke [this a b c d]\n                (evaluate this [a b c d]))\n       (-invoke [this a b c d e]\n                (evaluate this [a b c d e]))\n       (-invoke [this a b c d e f]\n                (evaluate this [a b c d e f]))\n       (-invoke [this a b c d e f g]\n                (evaluate this [a b c d e f g]))\n       (-invoke [this a b c d e f g h]\n                (evaluate this [a b c d e f g h]))\n       (-invoke [this a b c d e f g h i]\n                (evaluate this [a b c d e f g h i]))\n       (-invoke [this a b c d e f g h i j]\n                (evaluate this [a b c d e f g h i j]))\n       (-invoke [this a b c d e f g h i j k]\n                (evaluate this [a b c d e f g h i j k]))\n       (-invoke [this a b c d e f g h i j k l]\n                (evaluate this [a b c d e f g h i j k l]))\n       (-invoke [this a b c d e f g h i j k l m]\n                (evaluate this [a b c d e f g h i j k l m]))\n       (-invoke [this a b c d e f g h i j k l m n]\n                (evaluate this [a b c d e f g h i j k l m n]))\n       (-invoke [this a b c d e f g h i j k l m n o]\n                (evaluate this [a b c d e f g h i j k l m n o]))\n       (-invoke [this a b c d e f g h i j k l m n o p]\n                (evaluate this [a b c d e f g h i j k l m n o p]))\n       (-invoke [this a b c d e f g h i j k l m n o p q]\n                (evaluate this [a b c d e f g h i j k l m n o p q]))\n       (-invoke [this a b c d e f g h i j k l m n o p q r]\n                (evaluate this [a b c d e f g h i j k l m n o p q r]))\n       (-invoke [this a b c d e f g h i j k l m n o p q r s]\n                (evaluate this [a b c d e f g h i j k l m n o p q r s]))\n       (-invoke [this a b c d e f g h i j k l m n o p q r s t]\n                (evaluate this [a b c d e f g h i j k l m n o p q r s t]))\n       (-invoke [this a b c d e f g h i j k l m n o p q r s t rest]\n                (evaluate this (into [a b c d e f g h i j k l m n o p q r s t] rest)))\n\n       IPrintWithWriter\n       (-pr-writer\n        [x writer _]\n        (write-all writer\n                   \"#object[sicmutils.rational-function.RationalFunction \\\"\"\n                   (.toString x)\n                   \"\\\"]\"))]))\n\n(defn rational-function?\n  \"Returns true if the supplied argument is an instance of [[RationalFunction]],\n  false otherwise.\"\n  [r]\n  (instance? RationalFunction r))\n\n(defn coeff?\n  \"Returns true if `x` is explicitly _not_ an instance of [[RationalFunction]]\n  or [[polynomial/Polynomial]], false if it is.\"\n  [x]\n  (and (not (rational-function? x))\n       (p/coeff? x)))\n\n(defn ^:no-doc bare-arity\n  \"Given a [[RationalFunction]] instance `rf`, returns the `arity` field.\"\n  [rf]\n  (.-arity ^RationalFunction rf))\n\n(defn ^:no-doc bare-u\n  \"Given a [[RationalFunction]] instance `rf`, returns the `u` (numerator) field.\"\n  [rf]\n  (.-u ^RationalFunction rf))\n\n(defn ^:no-doc bare-v\n  \"Given a [[RationalFunction]] instance `rf`, returns the `v` (denominator) field.\"\n  [^RationalFunction rf]\n  (.-v rf))\n\n(defn arity\n  \"Returns the declared arity of the supplied [[RationalFunction]]\n  or [[polynomial/Polynomial]], or `0` for arguments of other types.\"\n  [r]\n  (if (rational-function? r)\n    (bare-arity r)\n    (p/arity r)))\n\n(defn- check-same-arity\n  \"Given two inputs `u` and `v`, checks that their arities are equal and returns\n  the value, or throws an exception if not.\n\n  If either `p` or `q` is a coefficient with [[arity]] equal to\n  0, [[check-same-arity]] successfully returns the other argument's arity.\"\n  [u v]\n  (let [ua (arity u)\n        va (arity v)]\n    (cond (zero? ua) va\n          (zero? va) ua\n          (= ua va) ua\n          :else (u/illegal (str \"Unequal arities: \" u \", \" v)))))\n\n(defn negative?\n  \"Returns true if the numerator of `r` is [[polynomial/negative?]], false\n  otherwise.\"\n  [r]\n  (if-not (rational-function? r)\n    (p/negative? r)\n    (p/negative? (bare-u r))))\n\n(defn eq\n  \"Returns true if the [[RationalFunction]] this is equal to `that`. If `that` is\n  a [[RationalFunction]], `this` and `that` are equal if they have equal `u` and\n  `v` and equal arity. `u` and `v` entries are compared\n  using [[sicmutils.value/=]].\n\n  If `that` is non-[[RationalFunction]], `eq` only returns true if `u` and `v`\n  respectively match the [[ratio/numerator]] and [[ratio/denominator]] of\n  `that`.\"\n  [^RationalFunction this that]\n  (if (instance? RationalFunction that)\n    (let [that ^RationalFunction that]\n      (and (= (.-arity this) (.-arity that))\n           (v/= (.-u this) (.-u that))\n           (v/= (.-v this) (.-v that))))\n\n    (and (v/= (.-v this) (r/denominator that))\n         (v/= (.-u this) (r/numerator that)))))\n\n;; ## Constructors\n\n(defn- make-reduced\n  \"Accepts an explicit `arity`, numerator `u` and denominator `v` and returns\n  either:\n\n  - `0`, in the case of a [[value/zero?]] numerator\n  - `u`, in the case of a [[value/one?]] denominator\n  - a [[RationalFunction]] instance if _either_ `u` or `v` is a [[polynomial/Polynomial]]\n  - `(g/div u v)` otherwise.\n\n  Call this function when you've already reduced `u` and `v` such that they\n  share no common factors and are dropped down to coefficients if possible, and\n  want to wrap them in [[RationalFunction]] only when necessary.\n\n  NOTE: The behavior of this mildly-opinionated constructor is similar\n  to [[polynomial/terms->polynomial]]\"\n  [arity u v]\n  (cond (v/zero? u) 0\n        (v/one? v)  u\n\n        (or (p/polynomial? u)\n            (p/polynomial? v))\n        (->RationalFunction arity u v nil)\n\n        :else (g/div u v)))\n\n(defn- coef-sgn\n  \"Returns `1` if the input is non-numeric or numeric and non-negative, `-1`\n  otherwise. In the slightly suspect case of a complex number\n  input, [[coef-sgn]] only examines the [[generic/real-part]] of the complex\n  number.\n\n  NOTE Negative [[RationalFunction]] instances attempt to keep the negative sign\n  in the numerator `u`. The complex number behavior is a kludge, but allows\n  canonicalization with complex coefficients.\"\n  [x]\n  (cond (v/real? x)\n        (if (g/negative? x) -1 1)\n\n        (complex? x)\n        (if (g/negative? (g/real-part x)) -1 1)\n\n        :else 1))\n\n(defn ^:no-doc ->reduced\n  \"Given a numerator `u` and denominator `v`, returns the result of:\n\n  - multiplying `u` and `v` by the least common multiple of all denominators\n    found in either `u` or `v`, so that `u` and `v` contain\n    no [[RationalFunction]]e or ratio-like coefficients\n  - normalizing the denominator `v` to be positive by negating `u`, if\n    applicable\n  - Cancelling out any common divisors between `u` and `v`\n\n  The result can be either a [[RationalFunction]], [[polynomial/Polynomial]] or\n  a `(g/div u v)`. See [[make-reduced]] for the details.\"\n  [u v]\n  (when (v/zero? v)\n    (u/arithmetic-ex\n     (str \"Can't form rational function with zero denominator: \" v)))\n  (let [a (check-same-arity u v)\n        xform (comp (distinct)\n                    (map r/denominator))\n        coefs (concat\n               (p/coefficients u)\n               (p/coefficients v))\n        factor (transduce xform (completing g/lcm) 1 coefs)\n        factor (if (= 1 (coef-sgn\n                         (p/leading-coefficient v)))\n                 factor\n                 (g/negate factor))\n        [u' v'] (if (v/one? factor)\n                  [u v]\n                  [(g/mul factor u)\n                   (g/mul factor v)])\n        g (g/gcd u' v')\n        [u'' v''] (if (v/one? g)\n                    [u' v']\n                    [(p/evenly-divide u' g)\n                     (p/evenly-divide v' g)])]\n    (make-reduced a u'' v'')))\n\n(defn make\n  \"Given a numerator `u` and denominator `v`, attempts to form\n  a [[RationalFunction]] instance by\n\n  - cancelling out any common factors between `u` and `v`\n  - normalizing `u` and `v` such that `v` is always positive\n  - multiplying `u` and `v` through by a commo factor, such that neither term\n    contains any rational coefficients\n\n  Returns a [[RationalFunction]] instance if either `u` or `v` remains\n  a [[polynomial/Polynomial]] after this process; else, returns `(g/div u' v')`,\n  where `u'` and `v'` are the reduced numerator and denominator.\"\n  [u v]\n  (if (and (coeff? u) (coeff? v))\n    (g/div u v)\n    (->reduced u v)))\n\n;; ## Rational Function Arithmetic\n;;\n;; The goal of this section is to implement `+`, `-`, `*` and `/` for rational\n;; function instances. The catch is that we want to hold to the contract\n;; that [[make]] provides - numerator and denominator should not acquire their\n;; own internal denominators! - without explicitly calling the\n;; expensive [[make]] each time.\n;;\n;; The Rational arithmetic algorithms used below come from Knuth, vol 2, section\n;; 4.5.1.\n\n(defn- binary-combine\n  \"Given two arguments `u` and `v`, as well as:\n\n  - `poly-op` - a function of two numerators\n  - `uv-op` - a function of four arguments, (`u-n`, `u-d`, `v-n`, `v-d` the\n    numerator and denominator of `u` and `v` respectively)\n\n  Returns the result of `(poly-op u-n v-n)` if `u-d` and `v-d` are\n  both [[value/one?]], or `(uv-op u-n u-d v-n v-d)` otherwise.\n\n  The result is reduced to a potentially-non-[[RationalFunction]] result\n  using [[make-reduced]].\"\n  [u v poly-op uv-op]\n  (let [a    (check-same-arity u v)\n        u-n  (r/numerator u)\n        u-d  (r/denominator u)\n        v-n  (r/numerator v)\n        v-d  (r/denominator v)\n        [n d] (if (and (v/one? u-d) (v/one? v-d))\n                [(poly-op u-n v-n) 1]\n                (uv-op u-n u-d v-n v-d))]\n    (make-reduced a n d)))\n\n;; The following functions act on full numerator, denominator pairs, and are\n;; suitable for use as the `uv-op` argument to [[binary-combine]].\n\n(defn- uv:+\n  \"Returns the `[numerator, denominator]` pair resulting from rational function\n  addition of `(/ u u')` and `(/ v v')`.\n\n  If the denominators are equal, [[uv:+]] adds the numerators and divides out\n  any factor common with the shared denominator.\n\n  Else, if the denominators are relatively prime, [[uv:+]] multiplies each side\n  by the other's denominator to create a single rational expression, then\n  divides out any common factors before returning.\n\n  In the final case, where the denominators are _not_ relatively prime, [[uv:+]]\n  attempts to efficiently divide out the GCD of the denominators without\n  creating large products.\"\n  [u u' v v']\n  (letfn [(divide-through [n d]\n            (if (v/zero? n)\n              [0 1]\n              (let [g (g/gcd d n)]\n                (if (v/one? g)\n                  [n d]\n                  [(p/evenly-divide n g)\n                   (p/evenly-divide d g)]))))]\n    (if (v/= u' v')\n      ;; Denominators are equal:\n      (let [n (p/add u v)]\n        (divide-through n u'))\n      (let [g (g/gcd u' v')]\n        (if (v/one? g)\n          ;; Denominators are relatively prime:\n          (divide-through\n           (p/add (p/mul u v')\n                  (p/mul u' v))\n           (p/mul u' v'))\n\n          ;; Denominators are NOT relatively prime:\n          (let [u':g (p/evenly-divide u' g)\n                v':g (p/evenly-divide v' g)]\n            (divide-through\n             (p/add (p/mul u v':g)\n                    (p/mul u':g v))\n             (p/mul u':g v'))))))))\n\n(defn- uv:-\n  \"Returns the `[numerator, denominator]` pair resulting from rational function\n  difference of `(/ u u')` and `(/ v v')`.\n\n  Similar to [[uv:+]]; inverts `v` before calling [[uv:+]] with the supplied arguments.\"\n  [u u' v v']\n  (uv:+ u u' (p/negate v) v'))\n\n(defn- uv:*\n  \"Returns the `[numerator, denominator]` pair resulting from rational function\n  multiplication of `(/ u u')` and `(/ v v')`.\"\n  [u u' v v']\n  (if (or (v/zero? u) (v/zero? v))\n    [0 1]\n    (let [d1 (g/gcd u v')\n          d2 (g/gcd u' v)\n          u'' (p/mul (p/evenly-divide u d1)\n                     (p/evenly-divide v d2))\n          v'' (p/mul (p/evenly-divide u' d2)\n                     (p/evenly-divide v' d1))]\n      [u'' v''])))\n\n(defn- uv:gcd\n  \"Returns the `[numerator, denominator]` pair that represents the greatest common\n  divisor of `(/ u u')` and `(/ v v')`.\"\n  [u u' v v']\n  (let [d1     (g/gcd u v)\n        d2     (g/lcm u' v')\n        result (make d1 d2)]\n    [(r/numerator result)\n     (r/denominator result)]))\n\n;; ## RationalFunction versions\n;;\n;; Armed with [[binary-combine]] and the functions above, we can now implement\n;; the full set of arithmetic functions for [[RationalFunction]] instances.\n\n(defn negate\n  \"Returns the negation of rational function `r`, ie, a [[RationalFunction]] with\n  its numerator negated.\n\n  Acts as [[generic/negate]] for non-[[RationalFunction]] inputs.\"\n  [r]\n  (if-not (rational-function? r)\n    (p/negate r)\n    (->RationalFunction (bare-arity r)\n                        (p/negate (bare-u r))\n                        (bare-v r)\n                        (meta r))))\n\n(defn abs\n  \"If the numerator of `r` is negative, returns `(negate r)`, else acts as\n  identity.\"\n  [r]\n  (if (negative? r)\n    (negate r)\n    r))\n\n(defn add\n  \"Returns the sum of rational functions `r` and `s`, with appropriate handling\n  of [[RationalFunction]], [[polynomial/Polynomial]] or coefficients of neither\n  type on either side.\"\n  [r s]\n  (cond (v/zero? r) s\n        (v/zero? s) r\n        :else (binary-combine r s p/add uv:+)))\n\n\n\n(defn sub\n  \"Returns the difference of rational functions `r` and `s`, with appropriate\n  handling of [[RationalFunction]], [[polynomial/Polynomial]] or coefficients of\n  neither type on either side.\"\n  [r s]\n  (cond (v/zero? r) (negate s)\n        (v/zero? s) r\n        :else (binary-combine r s p/sub uv:-)))\n\n(defn mul\n  \"Returns the product of rational functions `r` and `s`, with appropriate\n  handling of [[RationalFunction]], [[polynomial/Polynomial]] or coefficients of\n  neither type on either side.\"\n  [r s]\n  (cond (v/zero? r) r\n        (v/zero? s) s\n        (v/one? r) s\n        (v/one? s) r\n        :else (binary-combine r s p/mul uv:*)))\n\n(defn square\n  \"Returns the square of rational function `r`. Equivalent to `(mul r r)`.\"\n  [r]\n  (if-not (rational-function? r)\n    (p/square r)\n    (->RationalFunction (bare-arity r)\n                        (p/square (bare-u r))\n                        (p/square (bare-v r))\n                        (meta r))))\n\n(defn cube\n  \"Returns the cube of rational function `r`. Equivalent to `(mul r (mul r r))`.\"\n  [r]\n  (if-not (rational-function? r)\n    (p/cube r)\n    (->RationalFunction (bare-arity r)\n                        (p/cube (bare-u r))\n                        (p/cube (bare-v r))\n                        (meta r))))\n\n(defn expt\n  \"Returns a rational function generated by raising the input rational function\n  `r` to the (integer) power `n`.\"\n  [r n]\n  {:pre [(v/native-integral? n)]}\n  (if-not (rational-function? r)\n    (p/expt r n)\n    (let [u (bare-u r)\n          v (bare-v r)\n          [top bottom e] (if (neg? n)\n                           [v u (- n)]\n                           [u v n])]\n      (->RationalFunction (bare-arity r)\n                          (p/expt top e)\n                          (p/expt bottom e)\n                          (meta r)))))\n\n(defn invert\n  \"Given some rational function `r`, returns the inverse of `r`, ie, a rational\n  function with numerator and denominator reversed. The returned rational\n  function guarantees a positive denominator.\n\n  Acts as [[generic/invert]] for non-[[RationalFunction]] inputs.\"\n  [r]\n  (if-not (rational-function? r)\n    (g/invert r)\n    (let [u (bare-u r)\n          v (bare-v r)]\n      (cond (v/zero? u)\n            (u/arithmetic-ex\n             \"Can't form rational function with zero denominator.\")\n\n            (g/negative? u)\n            (->RationalFunction (bare-arity r)\n                                (g/negate v)\n                                (g/negate u)\n                                (meta r))\n\n            :else (->RationalFunction (bare-arity r) v u (meta r))))))\n\n(defn div\n  \"Returns the quotient of rational functions `r` and `s`, with appropriate\n  handling of [[RationalFunction]], [[polynomial/Polynomial]] or coefficients of\n  neither type on either side.\"\n  [r s]\n  (mul r (invert s)))\n\n(defn gcd\n  \"Returns the greatest common divisor of rational functions `r` and `s`, with\n  appropriate handling of [[RationalFunction]], [[polynomial/Polynomial]] or\n  coefficients of neither type on either side. \"\n  [r s]\n  (binary-combine r s g/gcd uv:gcd))\n\n;; ## Function Evaluation, Composition\n;;\n;; The following functions provide the ability to compose rational functions\n;; together without wrapping them in black-box functions.\n\n(defn evaluate\n  \"Given some rational function `xs` and a sequence of arguments with length >= 0\n  and < the [[arity]] of `r`, returns the result of evaluating the numerator and\n  denominator using `xs` and re-forming a rational function with the results.\n\n  Supplying fewer arguments than the arity will result in a partial evaluation.\n  Supplying too many arguments will error.\"\n  [r xs]\n  (if-not (rational-function? r)\n    (p/evaluate r xs)\n    (g/div (p/evaluate (bare-u r) xs)\n           (p/evaluate (bare-v r) xs))))\n\n(defn arg-scale\n  \"Given some [[RationalFunction]] `r`, returns a new [[RationalFunction]]\n  generated by substituting each indeterminate `x_i` for `f_i * x_i`, where\n  `f_i` is a factor supplied in the `factors` sequence.\n\n  Given a non-[[RationalFunction]], delegates to [[polynomial/arg-scale]].\"\n  [r factors]\n  (if-not (rational-function? r)\n    (p/arg-scale r factors)\n    (div (p/arg-scale (bare-u r) factors)\n         (p/arg-scale (bare-v r) factors))))\n\n(defn arg-shift\n  \"Given some [[RationalFunction]] `r`, returns a new [[RationalFunction]]\n  generated by substituting each indeterminate `x_i` for `s_i + x_i`, where\n  `s_i` is a shift supplied in the `shifts` sequence.\n\n  Given a non-[[RationalFunction]], delegates to [[polynomial/arg-shift]].\"\n  [r shifts]\n  (if-not (rational-function? r)\n    (p/arg-shift r shifts)\n    (div (p/arg-shift (bare-u r) shifts)\n         (p/arg-shift (bare-v r) shifts))))\n\n;; ## Derivatives\n\n(defn partial-derivative\n  \"Given some [[RationalFunction]] or [[polynomial/Polynomial]] `r`, returns the\n  partial derivative of `r` with respect to the `i`th indeterminate. Throws if\n  `i` is an invalid indeterminate index for `r`.\n\n  For non-polynomial or rational function inputs, returns `0`.\"\n  [r i]\n  (if-not (rational-function? r)\n    (p/partial-derivative r i)\n    (let [u (bare-u r)\n          v (bare-v r)]\n      (div (p/sub (p/mul (p/partial-derivative u i) v)\n                  (p/mul u (p/partial-derivative v i)))\n           (p/square v)))))\n\n(defn partial-derivatives\n  \"Returns the sequence of partial derivatives\n  of [[RationalFunction]] (or [[polynomial/Polynomial]]) `r` with respect to\n  each indeterminate. The returned sequence has length equal to the [[arity]] of\n  `r`.\n\n  For non-polynomial or rational function inputs, returns an empty sequence.\"\n  [r]\n  (if-not (rational-function? r)\n    (p/partial-derivatives r)\n    (for [i (range (bare-arity r))]\n      (partial-derivative r i))))\n\n;; ## Canonicalizer\n;;\n;; This section defines functions that allow conversion back and forth\n;; between [[RationalFunction]] instances and symbolic expressions.\n;;\n;; The `operator-table` represents the operations that can be understood from\n;; the point of view of a rational function over some field.\n\n(def ^{:no-doc true\n       :doc \"These operations are those allowed\n       between [[RationalFunction]], [[polynomial/Polynomial]] and coefficient\n       instances.\"}\n  operator-table\n  (assoc p/operator-table\n         '/ (ua/group g/div g/mul g/invert 1 v/zero?)\n         'invert g/invert))\n\n(def ^{:no-doc true\n       :doc \"Set of all arithmetic functions allowed\n       between [[RationalFunction]], [[polynomial/Polynomial]] and coefficient\n       instances.\"}\n  operators-known\n  (u/keyset operator-table))\n\n(defn expression->\n  \"Converts the supplied symbolic expression `expr` into Rational Function\n  canonical form (ie, a [[RationalFunction]] instance). `expr` should be a bare,\n  unwrapped expression built out of Clojure data structures.\n\n  Returns the result of calling continuation `cont` with\n  the [[RationalFunction]] and the list of variables corresponding to each\n  indeterminate in the [[RationalFunction]]. (`cont `defaults to `vector`).\n\n  The second optional argument `v-compare` allows you to provide a Comparator\n  between variables. Sorting indeterminates by `v-compare` will determine the\n  order of the indeterminates in the generated [[RationalFunction]]. The list of\n  variables passed to `cont` will be sorted using `v-compare`.\n\n  Absorbing an expression with [[expression->]] and emitting it again\n  with [[->expression]] will generate the canonical form of an expression, with\n  respect to the operations in the [[operators-known]] set.\n\n  This kind of simplification proceeds purely symbolically over the known\n  Rational Function operations; other operations outside the arithmetic\n  available should be factored out by an expression\n  analyzer (see [[sicmutils.expression.analyze/make-analyzer]]) before\n  calling [[expression->]].\n\n  NOTE that `cont` might receive a scalar, fraction or [[polynomial/Polynomial]]\n  instance; both are valid 'rational functions'. The latter as a rational\n  function with a denominator equal to `1`, and the former 2 result from\n  non-polynomial numerator and denominator.\n\n  NOTE See [[analyzer]] for an instance usable\n  by [[sicmutils.expression.analyze/make-analyzer]].\"\n  ([expr]\n   (expression-> expr vector compare))\n  ([expr cont]\n   (expression-> expr cont compare))\n  ([expr cont v-compare]\n   (let [vars     (-> (x/variables-in expr)\n                      (set/difference operators-known))\n         arity    (count vars)\n         sorted   (sort v-compare vars)\n         sym->var (zipmap sorted (p/new-variables arity))\n         rf       (x/evaluate expr sym->var operator-table)]\n     (cont rf sorted))))\n\n(defn from-points\n  \"Given a sequence of points of the form `[x, f(x)]`, returns a rational function\n  that passes through each input point.\"\n  [xs]\n  (g/simplify\n   (ri/bulirsch-stoer-recursive xs (p/identity))))\n\n(defn ->expression\n  \"Accepts a [[RationalFunction]] `r` and a sequence of symbols for each indeterminate,\n  and emits the canonical form of the symbolic expression that\n  represents [[RationalFunction]] `r`.\n\n  NOTE: this is the output stage of Rational Function canonical form\n  simplification. The input stage is handled by [[expression->]].\n\n  NOTE See [[analyzer]] for an instance usable\n  by [[sicmutils.expression.analyze/make-analyzer]].\"\n  [r vars]\n  (if-not (rational-function? r)\n    (p/->expression r vars)\n    ((sym/symbolic-operator '/)\n     (p/->expression (bare-u r) vars)\n     (p/->expression (bare-v r) vars))))\n\n(def ^{:doc \"Singleton [[a/ICanonicalize]] instance.\"}\n  analyzer\n  (reify a/ICanonicalize\n    (expression-> [_ expr cont]\n      (expression-> expr cont))\n\n    (expression-> [_ expr cont v-compare]\n      (expression-> expr cont v-compare))\n\n    (->expression [_ rf vars]\n      (->expression rf vars))\n\n    (known-operation? [_ o]\n      (contains? operators-known o))))\n\n;; ## Generic Implementations\n;;\n;; [[polynomial/Polynomial]] gains a few more functions; inverting a polynomial,\n;; for example, results in a [[RationalFunction]] instance, so the generic\n;; installation of `g/invert` and `g/div` belong here.\n\n(defmethod g/invert [::p/polynomial] [p]\n  (let [a (p/bare-arity p)]\n    (if (g/negative? p)\n      (->RationalFunction a -1 (g/negate p) (meta p))\n      (->RationalFunction a 1 p (meta p)))))\n\n(p/defbinary g/div make)\n(p/defbinary g/solve-linear-right make)\n(p/defbinary g/solve-linear (fn [l r] (div r l)))\n\n(defmethod g/exact-divide [::p/coeff ::p/polynomial] [c p]\n  (let [[term :as terms] (p/bare-terms p)]\n    (if (and (= (count terms) 1)\n             (pi/constant-term? term))\n      (g/exact-divide c (pi/coefficient term))\n      (make c p))))\n\n;; ### Rational Function Generics\n;;\n;; TODO: `g/quotient`, `g/remainder` and `g/lcm` feel like valid methods to\n;; install for [[RationalFunction]] instances.\n;; Close [#365](https://github.com/sicmutils/sicmutils/issues/365) when these\n;; are implemented.\n\n(defn ^:no-doc defbinary\n  \"Installs the supplied function `f` into `generic-op` such that it will act\n  between [[RationalFunction]] instances, or allow [[polynomial/Polynomial]]\n  instances or non-[[polynomial/Polynomial]] coefficients on either side.\"\n  [generic-op f]\n  (let [pairs [[::rational-function ::rational-function]\n               [::p/polynomial ::rational-function]\n               [::p/coeff ::rational-function]\n               [::rational-function ::p/polynomial]\n               [::rational-function ::p/coeff]]]\n    (doseq [[l r] pairs]\n      (defmethod generic-op [l r] [r s]\n        (f r s)))))\n\n;; `v/=` is not implemented with [[defbinary]] because the variable order needs\n;; to change so that a [[RationalFunction]] is always on the left.\n\n(defmethod v/= [::rational-function ::rational-function] [l r] (eq l r))\n(defmethod v/= [::p/polynomial ::rational-function] [l r] (eq r l))\n(defmethod v/= [::p/coeff ::rational-function] [l r] (eq r l))\n(defmethod v/= [::rational-function ::p/polynomial] [l r] (eq l r))\n(defmethod v/= [::rational-function ::p/coeff] [l r] (eq l r))\n\n(defbinary g/add add)\n(defbinary g/sub sub)\n(defbinary g/mul mul)\n(defbinary g/div div)\n(defbinary g/exact-divide div)\n(defbinary g/solve-linear-right div)\n(defbinary g/solve-linear (fn [l r] (div r l)))\n(defbinary g/gcd gcd)\n\n(defmethod g/negative? [::rational-function] [a] (negative? a))\n(defmethod g/abs [::rational-function] [a] (abs a))\n(defmethod g/negate [::rational-function] [a] (negate a))\n(defmethod g/invert [::rational-function] [a] (invert a))\n(defmethod g/square [::rational-function] [a] (square a))\n(defmethod g/cube [::rational-function] [a] (cube a))\n\n(defmethod g/expt [::rational-function ::v/integral] [b x]\n  (expt b x))\n\n(defmethod g/simplify [::rational-function] [r]\n  (-> (make (g/simplify (bare-u r))\n            (g/simplify (bare-v r)))\n      (with-meta (meta r))))\n\n(defmethod g/partial-derivative [::rational-function v/seqtype]\n  [r selectors]\n  (cond (empty? selectors)\n        (if (= 1 (bare-arity r))\n          (partial-derivative r 0)\n          (ss/down* (partial-derivatives r)))\n\n        (= 1 (count selectors))\n        (partial-derivative r (first selectors))\n\n        :else\n        (u/illegal\n         (str \"Invalid selector! Only 1 deep supported.\"))))\n"]}