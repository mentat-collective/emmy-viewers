{"version":3,"sources":["rewrite_clj/interop.cljc"],"mappings":";;AAMA,AAAA;;;;;oCAAA,4CAAAA,hFAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,uEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,yEAAA,zEAAME,oFAIHM,SAAWC;AAJd,AAMW,OAACC,8CAAMC,mBAAeH,SAASC;;;AAN1C,CAAA,4DAAA,5DAAMP;;AAAN;AAAA,CAAA,sDAAA,WAAAC,jEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAQA,kCAAA,lCAAMS,4EACHC;AADH,AAGW,OAACC,SAAYD;;AAExB,kCAAA,lCAAME,4EACHC,EAAEC;AADL,AAGW,OAAWD,WAAEC;;AAExB,8BAAA,9BAAMC;AAAN,AAEWC;;AAEX,8BAAA,9BAAMC;AAAN,AAEWC;;AAEX,gDAAA,hDAAMC,wGACqCC;AAD3C,AAGW,IAAAC,oBAAKD;AAAL,AAAA,oBAAAC;AAAO,QAAA,OAAM,AAAA,CAAA,KAAA,KAAA,KAAA,IAAA,aAAiDD;;AAA9DC;;;AAEX,4CAAA,5CAAMC,gGACHC;AADH,AAGW,GAAA,GAAA,SAAA,RAAuBA;AAAvB,GAAA,EAAA,CAAA,2CAAA,eAAA,CAAAC,gCAAA,3FAAuBD,2FAAAA;AAAvB;;AAAA;;;AAAA","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","rewrite-clj.interop/simple-format","seq73730","G__73731","cljs.core/first","cljs.core/next","self__5754__auto__","template","args","cljs.core.apply","goog.string/format","rewrite-clj.interop/str->int","s","js/parseInt","rewrite-clj.interop/int->str","n","base","rewrite-clj.interop/min-int","js/Number.MIN_SAFE_INTEGER","rewrite-clj.interop/max-int","js/Number.MAX_SAFE_INTEGER","rewrite-clj.interop/clojure-whitespace?","c","and__5043__auto__","rewrite-clj.interop/meta-available?","data","cljs.core/PROTOCOL_SENTINEL"],"sourcesContent":["(ns ^:no-doc rewrite-clj.interop\n  #?(:cljs (:require [goog.string :as gstring]\n                     goog.string.format)))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn simple-format\n  \"Interop version of string format\n  Note that there a big differences between Java's format and Google Closure's format - we don't address them.\n  %d and %s are known to work in both.\"\n  [template & args]\n  #?(:clj (apply format template args)\n     :cljs (apply gstring/format template args)))\n\n(defn str->int\n  [s]\n  #?(:clj (Long/parseLong s)\n     :cljs (js/parseInt s)))\n\n(defn int->str\n  [n base]\n  #?(:clj (.toString (biginteger n) base)\n     :cljs (.toString n base)))\n\n(defn min-int[]\n  #?(:clj  Long/MIN_VALUE\n     :cljs js/Number.MIN_SAFE_INTEGER))\n\n(defn max-int[]\n  #?(:clj Long/MAX_VALUE\n     :cljs js/Number.MAX_SAFE_INTEGER))\n\n(defn clojure-whitespace?\n  [#?(:clj ^java.lang.Character c :default c)]\n  #?(:clj (and c (or (= c \\,) (Character/isWhitespace c)))\n     :cljs (and c (< -1 (.indexOf #js [\\return \\newline \\tab \\space \",\"] c)))))\n\n(defn meta-available?\n  [data]\n  #?(:clj (instance? clojure.lang.IMeta data)\n     :cljs (implements? IWithMeta data)))\n"]}