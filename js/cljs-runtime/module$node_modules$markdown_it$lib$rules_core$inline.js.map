{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_core$inline.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlHD,MAAOC,CAAAA,OAAP,CAAiBC,QAAe,CAACC,KAAD,CAAQ,CAAA,IAClCC,OAASD,KAAMC,CAAAA,MADmB,CACHC,CAG9B,KAAAC,EAAI,CAAT,KAAYD,CAAZ,CAAgBD,MAAOG,CAAAA,MAAvB,CAA+BD,CAA/B,CAAmCD,CAAnC,CAAsCC,CAAA,EAAtC,CAA2C,CACzC,IAAAE,IAAMJ,MAAA,CAAOE,CAAP,CACW,SAAjB,GAAIE,GAAIC,CAAAA,IAAR,EACEN,KAAMO,CAAAA,EAAGC,CAAAA,MAAOC,CAAAA,KAAhB,CAAsBJ,GAAIK,CAAAA,OAA1B,CAAmCV,KAAMO,CAAAA,EAAzC,CAA6CP,KAAMW,CAAAA,GAAnD,CAAwDN,GAAIO,CAAAA,QAA5D,CAHuC,CAJL,CAH0E;",
"sources":["node_modules/markdown-it/lib/rules_core/inline.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_core$inline\"] = function(global,require,module,exports) {\n'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","state","tokens","l","i","length","tok","type","md","inline","parse","content","env","children"]
}
