shadow$provide.module$node_modules$three$src$geometries$BoxGeometry=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.BoxBufferGeometry=exports.BoxGeometry=void 0;global=require("module$node_modules$three$src$core$BufferGeometry");var _BufferAttribute=require("module$node_modules$three$src$core$BufferAttribute"),_Vector=require("module$node_modules$three$src$math$Vector3");class BoxGeometry extends global.BufferGeometry{constructor(width$jscomp$0=
1,height$jscomp$0=1,depth$jscomp$0=1,widthSegments=1,heightSegments=1,depthSegments=1){function buildPlane(u,v,w,udir,vdir,width,height,depth,gridX,gridY,materialIndex){const segmentWidth=width/gridX,segmentHeight=height/gridY,widthHalf=width/2,heightHalf=height/2,depthHalf=depth/2;height=gridX+1;const gridY1=gridY+1;let groupCount=width=0;const vector=new _Vector.Vector3;for(let iy=0;iy<gridY1;iy++){const y=iy*segmentHeight-heightHalf;for(let ix=0;ix<height;ix++)vector[u]=(ix*segmentWidth-widthHalf)*
udir,vector[v]=y*vdir,vector[w]=depthHalf,vertices.push(vector.x,vector.y,vector.z),vector[u]=0,vector[v]=0,vector[w]=0<depth?1:-1,normals.push(vector.x,vector.y,vector.z),uvs.push(ix/gridX),uvs.push(1-iy/gridY),width+=1}for(u=0;u<gridY;u++)for(v=0;v<gridX;v++)w=numberOfVertices+v+height*(u+1),udir=numberOfVertices+(v+1)+height*(u+1),vdir=numberOfVertices+(v+1)+height*u,indices.push(numberOfVertices+v+height*u,w,vdir),indices.push(w,udir,vdir),groupCount+=6;scope.addGroup(groupStart,groupCount,materialIndex);
groupStart+=groupCount;numberOfVertices+=width}super();this.type="BoxGeometry";this.parameters={width:width$jscomp$0,height:height$jscomp$0,depth:depth$jscomp$0,widthSegments,heightSegments,depthSegments};const scope=this;widthSegments=Math.floor(widthSegments);heightSegments=Math.floor(heightSegments);depthSegments=Math.floor(depthSegments);const indices=[],vertices=[],normals=[],uvs=[];let numberOfVertices=0,groupStart=0;buildPlane("z","y","x",-1,-1,depth$jscomp$0,height$jscomp$0,width$jscomp$0,
depthSegments,heightSegments,0);buildPlane("z","y","x",1,-1,depth$jscomp$0,height$jscomp$0,-width$jscomp$0,depthSegments,heightSegments,1);buildPlane("x","z","y",1,1,width$jscomp$0,depth$jscomp$0,height$jscomp$0,widthSegments,depthSegments,2);buildPlane("x","z","y",1,-1,width$jscomp$0,depth$jscomp$0,-height$jscomp$0,widthSegments,depthSegments,3);buildPlane("x","y","z",1,-1,width$jscomp$0,height$jscomp$0,depth$jscomp$0,widthSegments,heightSegments,4);buildPlane("x","y","z",-1,-1,width$jscomp$0,height$jscomp$0,
-depth$jscomp$0,widthSegments,heightSegments,5);this.setIndex(indices);this.setAttribute("position",new _BufferAttribute.Float32BufferAttribute(vertices,3));this.setAttribute("normal",new _BufferAttribute.Float32BufferAttribute(normals,3));this.setAttribute("uv",new _BufferAttribute.Float32BufferAttribute(uvs,2))}static fromJSON(data){return new BoxGeometry(data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments)}}exports.BoxBufferGeometry=exports.BoxGeometry=BoxGeometry}
//# sourceMappingURL=module$node_modules$three$src$geometries$BoxGeometry.js.map
