shadow$provide.module$node_modules$mathbox$build$esm$primitives$types$operator$split=function(global,require,module,exports){function _getRequireWildcardCache(nodeInterop$jscomp$0){if("function"!==typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop$jscomp$0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.Split=void 0;var UGLSL=
function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!==typeof obj&&"function"!==typeof obj)return{default:obj};if((nodeInterop=_getRequireWildcardCache(nodeInterop))&&nodeInterop.has(obj))return nodeInterop.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor,key;for(key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,
key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj;nodeInterop&&nodeInterop.set(obj,newObj);return newObj}(require("module$node_modules$mathbox$build$esm$util$glsl"));global=require("module$node_modules$mathbox$build$esm$primitives$types$operator$operator");class Split extends global.Operator{static initClass(){this.traits="node bind operator source index split".split(" ")}indexShader(shader){shader.pipe(this.operator);return super.indexShader(shader)}sourceShader(shader){shader.pipe(this.operator);
return super.sourceShader(shader)}getDimensions(){return this._resample(this.bind.source.getDimensions())}getActiveDimensions(){return this._resample(this.bind.source.getActiveDimensions())}getFutureDimensions(){return this._resample(this.bind.source.getFutureDimensions())}getIndexDimensions(){return this._resample(this.bind.source.getIndexDimensions())}_resample(dims){let dim;var {order}=this,{axis}=this,{overlap}=this,{length}=this;const {stride}=this,labels=["width","height","depth","items"],mapped=
order.map(x=>labels[x-1]);axis=order.indexOf(axis);order=(()=>{const result=[];for(dim of Array.from(mapped))result.push(dims[dim]);return result})();order.splice(axis,1,length,Math.floor((order[axis]-overlap)/stride));order=order.slice(0,4);overlap={};for(length=0;length<mapped.length;length++)dim=mapped[length],overlap[dim]=order[length];return overlap}make(){var left;super.make();if(null!=this.bind.source){var {order}=this.props,{axis}=this.props,{overlap}=this.props,{length}=this.props,permute=
order.join("");null==axis&&(axis=order[0]);var index=permute.indexOf(axis),split=permute[index]+(null!=(left=permute[index+1])?left:0);left=permute.replace(split[1],"").replace(split[0],"0")+"0";overlap=Math.min(length-1,overlap);permute=length-overlap;var uniforms={splitStride:this._attributes.make(this._types.number(permute))},transform=this._shaders.shader();transform.require(UGLSL.swizzleVec4(split,2));transform.require(UGLSL.swizzleVec4(left,4));transform.require(UGLSL.injectVec4(index));transform.pipe("split.position",
uniforms);transform.pipe(UGLSL.invertSwizzleVec4(order));this.operator=transform;this.order=order;this.axis=axis;this.overlap=overlap;this.length=length;return this.stride=permute}}unmake(){return super.unmake()}change(changed,touched,_init){if(changed["split.axis"]||changed["split.order"]||touched.operator)return this.rebuild()}}exports.Split=Split;Split.initClass()}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$primitives$types$operator$split.js.map
