shadow$provide.module$node_modules$shadergraph$src$glsl$compile=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.compile=void 0;exports.compile=function(program){const {code,signatures}=program;program={};program[signatures.main.name]=!0;for(var key of["external","internal","varying","uniform","attribute"])for(const sig of signatures[key])program[sig.name]=!0;key=string_compiler(code,program);return[signatures,key]};const string_compiler=function(code,
placeholders){let key$jscomp$1;const re=new RegExp("\\b("+(()=>{const result=[];for(key$jscomp$1 in placeholders)result.push(key$jscomp$1);return result})().join("|")+")\\b","g");code=code.replace(/\/\/[^\n]*/g,"");code=code.replace(/\/\*([^*]|\*[^/])*\*\//g,"");return function(prefix,exceptions,defines){let key$jscomp$0;null==prefix&&(prefix="");null==exceptions&&(exceptions={});null==defines&&(defines={});const replace={};for(key$jscomp$0 in placeholders)replace[key$jscomp$0]=null!=exceptions[key$jscomp$0]?
key$jscomp$0:prefix+key$jscomp$0;prefix=code.replace(re,key=>replace[key]);exceptions=(()=>{const result1=[];for(key$jscomp$0 in defines)result1.push(`#define ${key$jscomp$0} ${defines[key$jscomp$0]}`);return result1})();exceptions.length&&exceptions.push("");return exceptions.join("\n")+prefix}}}
//# sourceMappingURL=module$node_modules$shadergraph$src$glsl$compile.js.map
