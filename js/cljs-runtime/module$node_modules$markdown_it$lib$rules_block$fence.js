shadow$provide.module$node_modules$markdown_it$lib$rules_block$fence=function(global,require,module,exports){module.exports=function(state,startLine,endLine,silent){var haveEndMarker=!1,pos=state.bMarks[startLine]+state.tShift[startLine],max=state.eMarks[startLine];if(4<=state.sCount[startLine]-state.blkIndent||pos+3>max)return!1;var marker=state.src.charCodeAt(pos);if(126!==marker&&96!==marker)return!1;var mem=pos;pos=state.skipChars(pos,marker);var len=pos-mem;if(3>len)return!1;var markup=state.src.slice(mem,
pos);var params=state.src.slice(pos,max);if(96===marker&&0<=params.indexOf(String.fromCharCode(marker)))return!1;if(silent)return!0;for(silent=startLine;;){silent++;if(silent>=endLine)break;pos=mem=state.bMarks[silent]+state.tShift[silent];max=state.eMarks[silent];if(pos<max&&state.sCount[silent]<state.blkIndent)break;if(!(state.src.charCodeAt(pos)!==marker||4<=state.sCount[silent]-state.blkIndent||(pos=state.skipChars(pos,marker),pos-mem<len||(pos=state.skipSpaces(pos),pos<max)))){haveEndMarker=
!0;break}}len=state.sCount[startLine];state.line=silent+(haveEndMarker?1:0);endLine=state.push("fence","code",0);endLine.info=params;endLine.content=state.getLines(startLine+1,silent,len,!0);endLine.markup=markup;endLine.map=[startLine,state.line];return!0}}
//# sourceMappingURL=module$node_modules$markdown_it$lib$rules_block$fence.js.map
