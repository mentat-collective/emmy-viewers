{
"version":3,
"file":"module$node_modules$markdown_it$lib$token.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAetGC,QAASA,MAAK,CAACC,IAAD,CAAOC,GAAP,CAAYC,OAAZ,CAAqB,CAMjC,IAAKF,CAAAA,IAAL,CAAgBA,IAOhB,KAAKC,CAAAA,GAAL,CAAgBA,GAchB,KAAKE,CAAAA,GAAL,CAPA,IAAKC,CAAAA,KAOL,CAPgB,IAkBhB,KAAKF,CAAAA,OAAL,CAAgBA,OAOhB,KAAKG,CAAAA,KAAL,CAAgB,CAOhB,KAAKC,CAAAA,QAAL,CAAgB,IA0BhB,KAAKC,CAAAA,IAAL,CAXA,IAAKC,CAAAA,MAWL,CAlBA,IAAKC,CAAAA,OAkBL,CAlBgB,EAyBhB,KAAKC,CAAAA,IAAL,CAAgB,IAgBhB,KAAKC,CAAAA,MAAL,CARA,IAAKC,CAAAA,KAQL,CARgB,CAAA,CA7FiB,CA8GnCb,KAAMc,CAAAA,SAAUC,CAAAA,SAAhB,CAA4BC,QAAkB,CAACC,IAAD,CAAO,CAAA,IACrCC,GAEd,IAAI,CAAC,IAAKb,CAAAA,KAAV,CAAmB,MAAO,CAAC,CAE3B,KAAAA,MAAQ,IAAKA,CAAAA,KAER,KAAAc,EAAI,CAAT,KAAYD,GAAZ,CAAkBb,KAAMe,CAAAA,MAAxB,CAAgCD,CAAhC,CAAoCD,GAApC,CAAyCC,CAAA,EAAzC,CACE,GAAId,KAAA,CAAMc,CAAN,CAAA,CAAS,CAAT,CAAJ,GAAoBF,IAApB,CAA4B,MAAOE,EAErC,OAAO,CAAC,CAV2C,CAmBrDnB,MAAMc,CAAAA,SAAUO,CAAAA,QAAhB;AAA2BC,QAAiB,CAACC,QAAD,CAAW,CACjD,IAAKlB,CAAAA,KAAT,CACE,IAAKA,CAAAA,KAAMmB,CAAAA,IAAX,CAAgBD,QAAhB,CADF,CAGE,IAAKlB,CAAAA,KAHP,CAGe,CAAEkB,QAAF,CAJsC,CAcvDvB,MAAMc,CAAAA,SAAUW,CAAAA,OAAhB,CAA0BC,QAAgB,CAACT,IAAD,CAAOU,KAAP,CAAc,CAAA,IAClDC,IAAM,IAAKb,CAAAA,SAAL,CAAeE,IAAf,CACNM,KAAAA,CAAW,CAAEN,IAAF,CAAQU,KAAR,CAEL,EAAV,CAAIC,GAAJ,CACE,IAAKP,CAAAA,QAAL,CAAcE,IAAd,CADF,CAGE,IAAKlB,CAAAA,KAAL,CAAWuB,GAAX,CAHF,CAGoBL,IAPkC,CAiBxDvB,MAAMc,CAAAA,SAAUe,CAAAA,OAAhB,CAA0BC,QAAgB,CAACb,IAAD,CAAO,CAC3CW,IAAAA,CAAM,IAAKb,CAAAA,SAAL,CAAeE,IAAf,CAAV,KAAgCU,MAAQ,IAC7B,EAAX,EAAIC,IAAJ,GACED,KADF,CACU,IAAKtB,CAAAA,KAAL,CAAWuB,IAAX,CAAA,CAAgB,CAAhB,CADV,CAGA,OAAOD,MALwC,CAejD3B,MAAMc,CAAAA,SAAUiB,CAAAA,QAAhB,CAA2BC,QAAiB,CAACf,IAAD,CAAOU,KAAP,CAAc,CACxD,IAAIC,IAAM,IAAKb,CAAAA,SAAL,CAAeE,IAAf,CAEA,EAAV,CAAIW,GAAJ,CACE,IAAKP,CAAAA,QAAL,CAAc,CAAEJ,IAAF,CAAQU,KAAR,CAAd,CADF,CAGE,IAAKtB,CAAAA,KAAL,CAAWuB,GAAX,CAAA,CAAgB,CAAhB,CAHF,CAGuB,IAAKvB,CAAAA,KAAL,CAAWuB,GAAX,CAAA,CAAgB,CAAhB,CAHvB,CAG4C,GAH5C;AAGkDD,KANM,CAW1D7B,OAAOC,CAAAA,OAAP,CAAiBC,KAzMqF;",
"sources":["node_modules/markdown-it/lib/token.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$token\"] = function(global,require,module,exports) {\n// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Token","type","tag","nesting","map","attrs","level","children","info","markup","content","meta","hidden","block","prototype","attrIndex","Token.prototype.attrIndex","name","len","i","length","attrPush","Token.prototype.attrPush","attrData","push","attrSet","Token.prototype.attrSet","value","idx","attrGet","Token.prototype.attrGet","attrJoin","Token.prototype.attrJoin"]
}
