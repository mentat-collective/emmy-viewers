{
"version":3,
"file":"module$node_modules$mathbox$build$esm$util$js.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,6CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsBJ,OAAQK,CAAAA,KAA9B,CAAsCL,OAAQM,CAAAA,KAA9C,CAAsD,IAAK,EA0B3DN,QAAQM,CAAAA,KAAR,CAbcA,QAAS,EAAG,CACxB,MAAMC,EAAI,EAEV,KAAK,MAAMC,GAAX,GAAkBC,MAAMC,CAAAA,IAAN,CAAWC,SAAX,CAAlB,CACE,IAAK,MAAMC,CAAX,GAAgBJ,IAAhB,CAEED,CAAA,CAAEK,CAAF,CAAA,CADUJ,GAAAK,CAAID,CAAJC,CAKd,OAAON,EAViB,CAiB1BP,QAAQK,CAAAA,KAAR,CAFcS,CAAAT,EAAKU,IAAKC,CAAAA,KAAL,CAAWD,IAAKE,CAAAA,SAAL,CAAeH,CAAf,CAAX,CAiEnBd,QAAQI,CAAAA,WAAR,CA7DoBA,QAAS,CAACc,GAAD,CAAM,CACjC,IAAIC,MAAQ,EAIZ,OAAMC,MAAQA,QAAS,CAACC,IAAD,CAAO,CAC5B,GAAIF,KAAMG,CAAAA,MAAV,CAAkB,CAChBC,IAAAA,sBAAAA,IAAAA,CAAKC;AAALD,qBAAKC,CAAAA,IAJe,KAAA,yBAIDL,KAJWM,CAAAA,OAAJ,CAAY,KAAZ,CAAmB,EAAnB,CAIrBD,+BAAL,CAAA,IAAA,CAAAD,qBAAA,CAAU,wBAAV,CADgB,CAIlB,MAAOJ,MAAP,CAAuB,IAAR,EAAAE,IAAA,CAAeA,IAAf,CAAsB,EALT,CAQ9BH,IAAA,CAAMA,GAAIQ,CAAAA,KAAJ,CAAU,qBAAV,CACN,KAAIC,MAAQ,CAAA,CACZ,OAAMJ,KAAO,EAEb,KAAK,MAAMK,KAAX,GAAoBnB,MAAMC,CAAAA,IAAN,CAAWQ,GAAX,CAApB,CAAqC,CACnC,MAAMW,KAAOD,KAAA,CAAM,CAAN,CAAb,CACME,MAAQF,KAAMG,CAAAA,KAAN,CAAY,CAAZ,CAEd,QAAQF,IAAR,EACE,KAAK,GAAL,CACA,KAAK,GAAL,CACE,GAAIF,KAAJ,CACMA,KAAJ,GAAcE,IAAd,EACEF,KACA,CADQ,CAAA,CACR,CAAAP,KAAA,CAAMU,KAAN,CAFF,EAIEX,KAJF,EAIWS,KALb,KAOO,CACL,GAAc,EAAd,GAAIT,KAAJ,CACE,KAAUa,MAAJ,CAAU,wBAAwBd,GAAxB,oDAAV,CAAN;AAGFS,KAAA,CAAQE,IACRV,MAAA,EAASW,KANJ,CASP,KAEF,MAAK,GAAL,CACA,KAAK,GAAL,CACOH,KAAL,CAGER,KAHF,EAGWS,KAHX,CACER,KAAA,CAAMU,KAAN,CAKF,MAEF,SACEX,KAAA,EAASS,KAhCb,CAJmC,CAwCrCR,KAAA,EACA,OAAOG,KA1D0B,CAtCuE;",
"sources":["node_modules/mathbox/build/esm/util/js.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathbox$build$esm$util$js\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseQuoted = exports.clone = exports.merge = void 0;\n\n// TODO: This file was created by bulk-decaffeinate.\n// Sanity-check the conversion and remove this comment.\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n// Merge multiple objects\nconst merge = function () {\n  const x = {};\n\n  for (const obj of Array.from(arguments)) {\n    for (const k in obj) {\n      const v = obj[k];\n      x[k] = v;\n    }\n  }\n\n  return x;\n};\n\nexports.merge = merge;\n\nconst clone = o => JSON.parse(JSON.serialize(o));\n\nexports.clone = clone;\n\nconst parseQuoted = function (str) {\n  let accum = \"\";\n\n  const unescape = str => str = str.replace(/\\\\/g, \"\");\n\n  const munch = function (next) {\n    if (accum.length) {\n      list.push(unescape(accum));\n    }\n\n    return accum = next != null ? next : \"\";\n  };\n\n  str = str.split(/(?=(?:\\\\.|[\"' ,]))/g);\n  let quote = false;\n  const list = [];\n\n  for (const chunk of Array.from(str)) {\n    const char = chunk[0];\n    const token = chunk.slice(1);\n\n    switch (char) {\n      case '\"':\n      case \"'\":\n        if (quote) {\n          if (quote === char) {\n            quote = false;\n            munch(token);\n          } else {\n            accum += chunk;\n          }\n        } else {\n          if (accum !== \"\") {\n            throw new Error(`ParseError: String \\`${str}\\` does not contain comma-separated quoted tokens.`);\n          }\n\n          quote = char;\n          accum += token;\n        }\n\n        break;\n\n      case \" \":\n      case \",\":\n        if (!quote) {\n          munch(token);\n        } else {\n          accum += chunk;\n        }\n\n        break;\n\n      default:\n        accum += chunk;\n    }\n  }\n\n  munch();\n  return list;\n};\n\nexports.parseQuoted = parseQuoted;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","parseQuoted","clone","merge","x","obj","Array","from","arguments","k","v","o","JSON","parse","serialize","str","accum","munch","next","length","list","push","replace","split","quote","chunk","char","token","slice","Error"]
}
