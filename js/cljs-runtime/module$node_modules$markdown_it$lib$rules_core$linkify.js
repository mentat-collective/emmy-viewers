shadow$provide.module$node_modules$markdown_it$lib$rules_core$linkify=function(global,require,module,exports){var arrayReplaceAt=require("module$node_modules$markdown_it$lib$common$utils").arrayReplaceAt;module.exports=function(state){var i,l,lastPos,blockTokens=state.tokens;if(state.md.options.linkify){var j=0;for(l=blockTokens.length;j<l;j++)if("inline"===blockTokens[j].type&&state.md.linkify.pretest(blockTokens[j].content)){var tokens=blockTokens[j].children;var htmlLinkLevel=0;for(i=tokens.length-
1;0<=i;i--){var currentToken=tokens[i];if("link_close"===currentToken.type)for(i--;tokens[i].level!==currentToken.level&&"link_open"!==tokens[i].type;)i--;else if("html_inline"===currentToken.type&&(/^<a[>\s]/i.test(currentToken.content)&&0<htmlLinkLevel&&htmlLinkLevel--,/^<\/a\s*>/i.test(currentToken.content)&&htmlLinkLevel++),!(0<htmlLinkLevel)&&"text"===currentToken.type&&state.md.linkify.test(currentToken.content)){var text=currentToken.content;var links=state.md.linkify.match(text);var nodes=
[];var level=currentToken.level;for(currentToken=lastPos=0;currentToken<links.length;currentToken++){var token=links[currentToken].url;var fullUrl=state.md.normalizeLink(token);if(state.md.validateLink(fullUrl)){var urlText=links[currentToken].text;urlText=links[currentToken].schema?"mailto:"!==links[currentToken].schema||/^mailto:/i.test(urlText)?state.md.normalizeLinkText(urlText):state.md.normalizeLinkText("mailto:"+urlText).replace(/^mailto:/,""):state.md.normalizeLinkText("http://"+urlText).replace(/^http:\/\//,
"");var pos=links[currentToken].index;pos>lastPos&&(token=new state.Token("text","",0),token.content=text.slice(lastPos,pos),token.level=level,nodes.push(token));token=new state.Token("link_open","a",1);token.attrs=[["href",fullUrl]];token.level=level++;token.markup="linkify";token.info="auto";nodes.push(token);token=new state.Token("text","",0);token.content=urlText;token.level=level;nodes.push(token);token=new state.Token("link_close","a",-1);token.level=--level;token.markup="linkify";token.info=
"auto";nodes.push(token);lastPos=links[currentToken].lastIndex}}lastPos<text.length&&(token=new state.Token("text","",0),token.content=text.slice(lastPos),token.level=level,nodes.push(token));blockTokens[j].children=tokens=arrayReplaceAt(tokens,i,nodes)}}}}}}
//# sourceMappingURL=module$node_modules$markdown_it$lib$rules_core$linkify.js.map
