{
"version":3,
"file":"module$node_modules$$mentatcollective$jsxgraph$node_modules$path_browserify$index.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/@mentatcollective/jsxgraph/node_modules/path-browserify/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mentatcollective$jsxgraph$node_modules$path_browserify$index\"] = function(global,require,module,exports) {\nvar process = require('process');\n// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n\n};"],
"names":["shadow$provide","global","require","module","exports","assertPath","path","TypeError","JSON","stringify","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","i","length","charCodeAt","lastSlashIndex","lastIndexOf","slice","process","posix","resolve","resolvedPath","resolvedAbsolute","cwd","arguments","undefined","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","from","to","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","toCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","ext","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","pathObject","dir","root","base","name","sep","parse","ret","delimiter","win32"]
}
