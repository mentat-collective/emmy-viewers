{"version":3,"sources":["sicmutils/numerical/quadrature/boole.cljc"],"mappings":";AAsCA,AAAA;;;;;;;;;;;;;;;sDAAA,8DAAAA,pHAAME;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oFAAA,pFAAMD,+FAcFM,EAAEC,EAAEC;AAdR,AAcW,+FAAA,2CAAA,8CAAA,jLAACC,kFAAeH,EAAEC,EAAEC;;;AAd/B,CAAA,oFAAA,iBAAAN,rGAAMF,+FAeFM,EAAEC,EAAEC;AAfR,AAAA,IAAAL,cAAAD;IAAAC,kBAAA,AAAAC,4BAAAD;QAAA,AAAAE,4CAAAF,gBAAA,8CAAA,9GAekBO;AAflB,AAAA,GAgBU,OAASA;AAhBnB;AAAA,AAAA,MAAA,KAAAT,MAAA;;;uFAiBO,AAACU,0FAAsBL,EAAEC,EAAEC,EAAEE,vLAC7B,0LAAA,IAAA,IAAA,IAAA,/LAACE;;;AAlBR,CAAA,8EAAA,9EAAMZ;;AAAN,AAoBA;;;;;;;;;;;AAAAa,gDAAA,AAAAC,yDAUW,AAACC,6CAAKC,gBAAMhB,qDACbA","names":["var_args","G__102647","sicmutils.numerical.quadrature.boole/boole-sequence","js/Error","p__102649","map__102650","cljs.core/--destructure-map","cljs.core.get","f","a","b","sicmutils.numerical.quadrature.boole.boole_sequence","n","sicmutils.numerical.quadrature.trapezoid.trapezoid_sequence","sicmutils.polynomial.richardson.richardson_column","sicmutils.numerical.quadrature.boole/integral","sicmutils.numerical.quadrature.common/make-integrator-fn","cljs.core.comp","cljs.core/first"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.numerical.quadrature.boole\n  (:require [sicmutils.numerical.quadrature.common :as qc :include-macros true]\n            [sicmutils.numerical.quadrature.trapezoid :as qt]\n            [sicmutils.polynomial.richardson :as pr]))\n\n;; ## Boole's Rule\n;;\n;; NOTE - Boole's Rule is commonly mis-spelled as \"Bode's Rule\"!\n;;\n;; This numerical integration method is a [closed Newton-Cotes\n;; formula](https://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas#Closed_Newton%E2%80%93Cotes_formulas);\n;; for each integral slice, Boole's rule samples:\n;;\n;; - each endpoint\n;; - three interior points\n;;\n;; and combines them into an area estimate for this slice using the following\n;; formula:\n;;\n;; $${{2h} \\over 45} (7f_0 + 32f_1 + 12f_2 + 32f_3 + 7f_4)$$\n;;\n;; Given a window of $[a, b]$ and a \"step size\" of $h = {{b - a} \\over 4}$. The\n;; point $f_i$ is the point $i$ steps into the window.\n;;\n;; There are a few simpler ways to understand this:\n;;\n;; - Boole's rule is simply the trapezoid method (see `trapezoid.cljc`),\n;;   subject to /two/ refinements of \"Richardson extrapolation\".\n;;\n;; - The trapezoid method fits a line to each integration slice. Boole's rule\n;;   fits a quartic (4th-order) polynomial to each slice.\n;;\n;; The test namespace contains a symbolic proof that the Richardson-extrapolated\n;; Trapezoid method is equivalent to using the formula above to calculate\n;; Boole's rule directly.\n\n(defn boole-sequence\n  \"Returns a (lazy) sequence of successively refined estimates of the integral of\n  `f` over the closed interval $[a, b]$ using Boole's rule.\n\n  Boole's rule is equivalent to the trapezoid method subject to two refinements\n  of Richardson extrapolation. The trapezoid method fits a line to each\n  integration slice. Boole's rule fits a quartic to each slice.\n\n  Returns estimates with $n, 2n, 4n, ...$ slices, geometrically increasing by a\n  factor of 2 with each estimate.\n\n  ### Optional arguments:\n\n  If supplied, `:n` (default 1) specifies the initial number of slices to use.\"\n  ([f a b] (boole-sequence f a b {:n 1}))\n  ([f a b {:keys [n] :or {n 1}}]\n   {:pre [(number? n)]}\n   (-> (qt/trapezoid-sequence f a b n)\n       (pr/richardson-column 2 2 2 2))))\n\n(qc/defintegrator integral\n  \"Returns an estimate of the integral of `f` over the closed interval $[a, b]$\n  using Boole's rule with $1, 2, 4 ... 2^n$ windows for each estimate.\n\n  Optionally accepts `opts`, a dict of optional arguments. All of these get\n  passed on to `us/seq-limit` to configure convergence checking.\n\n  See `boole-sequence` for more information about Boole's rule, caveats that\n  might apply when using this integration method and information on the optional\n  args in `opts` that customize this function's behavior.\"\n  :area-fn (comp first boole-sequence)\n  :seq-fn boole-sequence)\n"]}