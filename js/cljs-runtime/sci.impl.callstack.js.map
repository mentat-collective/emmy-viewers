{"version":3,"sources":["sci/impl/callstack.cljc"],"mappings":"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","names":["sci.impl.callstack/sci-ns-name","ns","sci.impl.callstack/select","m","new-m","cljs.core/select-keys","sci.impl.callstack/expr->data","expr","or__4253__auto__","cljs.core/meta","f","cljs.core/seqable?","cljs.core/first","fm","G__89777","cljs.core._EQ_","cljs.core.assoc","cljs.core/seq","cljs.core.filter","cljs.core/not-empty","sci.impl.callstack/clean-ns","temp__5751__auto__","sci.impl.callstack/stacktrace","callstack","cljs.core/deref","cljs.core.dedupe","data","cljs.core.mapcat","cljs.core.reduce","p__89779","vec__89780","cljs.core.nth","acc","last-file","last-ns","last-name","entry","new-last-name","new-last-file","new-entry","cljs.core.conj","fd","cljs.core.mapv","sci.impl.callstack/right-pad","s","n","cljs.core/count","clojure.string.join","cljs.core.repeat","sci.impl.callstack/format-stacktrace","st","cljs.core/force","cljs.core.keep","p__89790","map__89791","cljs.core/--destructure-map","cljs.core.get","file","line","column","built-in","local","nom","max-name","cljs.core/max","cljs.core.map","cljs.core.comp","p__89797","map__89798","name","loc"],"sourcesContent":["(ns sci.impl.callstack\n  {:no-doc true}\n  (:require [clojure.string :as str]\n            [sci.impl.types :as types]\n            [sci.lang]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn sci-ns-name [^sci.lang.Namespace ns]\n  (types/getName ns))\n\n(defn select [m]\n  (let [new-m (select-keys m [:ns :name :local :file :line :column\n                              :sci/built-in :macro])]\n    new-m))\n\n(defn expr->data [expr]\n  (let [m (or (meta expr) expr)\n        f (when (seqable? expr) (first expr))\n        fm (or (:sci.impl/f-meta m)\n               (some-> f meta))\n        fm (if (= :resolve-sym (:sci.impl/op fm))\n             (assoc fm :ns (:ns m))\n             fm)]\n    (seq (filter not-empty [(select m) (select fm)]))))\n\n(defn clean-ns [m]\n  (if-let [ns (:ns m)]\n    (assoc m :ns (sci-ns-name ns))\n    m))\n\n(defn stacktrace [callstack]\n  (let [callstack @callstack\n        callstack (dedupe callstack)\n        data (mapcat expr->data callstack)\n        data (reduce (fn [[acc last-file last-ns last-name] entry]\n                       (let [new-last-name (or (:name entry)\n                                               last-name)\n                             new-last-file (or (:file entry)\n                                               last-file)\n                             new-entry (if (identical? last-ns (:ns entry))\n                                         (assoc entry\n                                                :name new-last-name\n                                                :file new-last-file)\n                                         entry)]\n                         [(conj acc new-entry)\n                          new-last-file\n                          (:ns entry)\n                          new-last-name]))\n                     (let [fd (first data)]\n                       ['() (:file fd) (:ns fd) (:name fd)])\n                     data)]\n    (->> (first data)\n         (mapv clean-ns))))\n\n(defn right-pad [s n]\n  (let [n (- n (count s))]\n    (str s (str/join (repeat n \" \")))))\n\n(defn format-stacktrace [st]\n  (let [st (force st)\n        data (keep (fn [{:keys [:file :ns :line :column :sci/built-in\n                                :local]\n                         nom :name}]\n                     (when (or line built-in)\n                       {:name (str (if nom\n                                     (str ns \"/\" nom)\n                                     ns)\n                                   (when local\n                                     (str \"#\" local)))\n                        :loc (str (or file\n                                      (if built-in\n                                        \"<built-in>\"\n                                        \"<expr>\"))\n                                  (when line\n                                    (str \":\" line \":\" column)))}))\n                   st)\n        max-name (reduce max 0 (map (comp count :name) data))]\n    (mapv (fn [{:keys [:name :loc]}]\n            (str (right-pad name max-name)\n                 \" - \"\n                 loc))\n          data)))\n"]}