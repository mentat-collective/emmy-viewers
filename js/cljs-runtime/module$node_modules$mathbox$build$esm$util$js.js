shadow$provide.module$node_modules$mathbox$build$esm$util$js=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.parseQuoted=exports.clone=exports.merge=void 0;exports.merge=function(){const x={};for(const obj of Array.from(arguments))for(const k in obj)x[k]=obj[k];return x};exports.clone=o=>JSON.parse(JSON.serialize(o));exports.parseQuoted=function(str){let accum="";const munch=function(next){if(accum.length){var JSCompiler_temp_const=list,JSCompiler_temp_const$jscomp$0=
JSCompiler_temp_const.push;var JSCompiler_inline_result=accum.replace(/\\/g,"");JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,JSCompiler_inline_result)}return accum=null!=next?next:""};str=str.split(/(?=(?:\\.|["' ,]))/g);let quote=!1;const list=[];for(const chunk of Array.from(str)){const char=chunk[0],token=chunk.slice(1);switch(char){case '"':case "'":if(quote)quote===char?(quote=!1,munch(token)):accum+=chunk;else{if(""!==accum)throw Error(`ParseError: String \`${str}\` does not contain comma-separated quoted tokens.`);
quote=char;accum+=token}break;case " ":case ",":quote?accum+=chunk:munch(token);break;default:accum+=chunk}}munch();return list}}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$util$js.js.map
