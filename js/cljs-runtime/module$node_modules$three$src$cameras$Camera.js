shadow$provide.module$node_modules$three$src$cameras$Camera=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Camera=void 0;var _Matrix=require("module$node_modules$three$src$math$Matrix4");global=require("module$node_modules$three$src$core$Object3D");class Camera extends global.Object3D{constructor(){super();this.type="Camera";this.matrixWorldInverse=new _Matrix.Matrix4;this.projectionMatrix=new _Matrix.Matrix4;this.projectionMatrixInverse=new _Matrix.Matrix4}copy(source,
recursive){super.copy(source,recursive);this.matrixWorldInverse.copy(source.matrixWorldInverse);this.projectionMatrix.copy(source.projectionMatrix);this.projectionMatrixInverse.copy(source.projectionMatrixInverse);return this}getWorldDirection(target){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return target.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(force){super.updateMatrixWorld(force);this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(updateParents,
updateChildren){super.updateWorldMatrix(updateParents,updateChildren);this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}exports.Camera=Camera;Camera.prototype.isCamera=!0}
//# sourceMappingURL=module$node_modules$three$src$cameras$Camera.js.map
