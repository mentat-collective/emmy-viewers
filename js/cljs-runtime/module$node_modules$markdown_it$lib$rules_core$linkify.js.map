{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_core$linkify.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/rules_core/linkify.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_core$linkify\"] = function(global,require,module,exports) {\n// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","arrayReplaceAt","module.exports","state","i","l","lastPos","blockTokens","tokens","md","options","linkify","j","length","type","pretest","content","children","htmlLinkLevel","currentToken","level","test","text","links","match","nodes","ln","url","fullUrl","normalizeLink","validateLink","urlText","schema","normalizeLinkText","replace","pos","index","token","Token","slice","push","attrs","markup","info","lastIndex"]
}
