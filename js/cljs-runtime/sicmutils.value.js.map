{"version":3,"sources":["sicmutils/value.cljc"],"mappings":"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","names":["sicmutils$value$Numerical$numerical_QMARK_$dyn","x__4550__auto__","m__4551__auto__","sicmutils.value/numerical?","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","sicmutils.value/Numerical","_","sicmutils$value$Value$zero_QMARK_$dyn","sicmutils.value/zero?","sicmutils$value$Value$one_QMARK_$dyn","sicmutils.value/one?","sicmutils$value$Value$identity_QMARK_$dyn","sicmutils.value/identity?","sicmutils$value$Value$zero_like$dyn","sicmutils.value/zero-like","sicmutils$value$Value$one_like$dyn","sicmutils.value/one-like","sicmutils$value$Value$identity_like$dyn","sicmutils.value/identity-like","sicmutils$value$Value$exact_QMARK_$dyn","sicmutils.value/exact?","sicmutils$value$Value$freeze$dyn","sicmutils.value/freeze","sicmutils$value$Value$kind$dyn","sicmutils.value/kind","sicmutils.value/Value","this","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.value/argument-kind","seq95276","self__4852__auto__","cljs.core/seq","args","cljs.core.mapv","sicmutils.value/object-name-map","cljs.core.atom","sicmutils.value/seqtype","cljs.core.derive","cljs.core/Cons","cljs.core/PersistentVector","cljs.core/LazySeq","cljs.core/List","cljs.core/Range","sicmutils.value/native-integral?","x","cljs.core/integer?","sicmutils.value/integral?","cljs.core/int?","cljs.core._EQ_","sicmutils.value/real?","js/goog.math.Integer","sicmutils.value.goog$module$goog$math$Long","js/module$node_modules$fraction_DOT_js$bigfraction","sicmutils.value/number?","js/module$node_modules$complex_DOT_js$complex","sicmutils.value/numeric-zero?","sicmutils.value/scalar?","cljs.core.isa_QMARK_","js/Number","js/BigInt","cljs.core/PROTOCOL_SENTINEL","cljs.core/type","sicmutils.util/unsupported","cljs.core/Var","v","cljs.core/meta","o","cljs.core/sequential?","cljs.core.map","cljs.core/deref","cljs.core.get","sicmutils.value/exact-zero?","n","js/sicmutils","js/sicmutils.value","js/sicmutils.value.=","method-table__4747__auto__","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__95312","cljs.core/MultiFn","cljs.core.symbol","sicmutils.value/=","l","r","and__4251__auto__","cljs.core/count","cljs.core/every?","cljs.core/true?","seq__95313","chunk__95314","count__95315","i__95316","vec__95323","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__95326","cljs.core/first","cljs.core/next","from","to","f","sicmutils.util/int","sicmutils.util/long","sicmutils.util/bigint","cljs.core/IEquiv","cljs.core/-equiv","other","sicmutils.util/bigint?","writer","rep","cljs.core.write_all","cljs.core/IComparable","cljs.core/-compare","sicmutils.value.goog$module$goog$array.defaultCompare","js/Error","big-zero","big-one","sicmutils.value.goog$module$goog$math$Long.getOne","sicmutils.value.goog$module$goog$math$Long.getZero","sicmutils.value/kind-predicate","k","x2","sicmutils.value/compare","y","yv","cljs.core/native-satisfies?","cljs.core/array?","sicmutils.value/add-object-symbols!","o->syms","cljs.core.swap_BANG_","cljs.core/into","sicmutils.value/machine-epsilon","e","sicmutils.value/sqrt-machine-epsilon","Math/sqrt","sicmutils.value/within","\u03b5","Math/abs","sicmutils.value/relative-integer-tolerance","sicmutils.value/absolute-integer-tolerance","sicmutils.value/almost-integral?","or__4253__auto__","cljs.core/float?","z","Math/round","sicmutils.value/twopi","Math/PI","sicmutils.value/principal-value","cuthigh","cutlow","Math/floor"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.value\n  \"The home of most of the protocol-based extensible generic operations offered by\n  SICMUtils. The bulk of the others live in [[sicmutils.generic]].\n\n  See [the `Generics`\n  cljdocs](https://cljdoc.org/d/sicmutils/sicmutils/CURRENT/doc/basics/generics)\n  for a detailed discussion of how to use and extend the generic operations\n  defined in [[sicmutils.generic]] and [[sicmutils.value]].\"\n  (:refer-clojure :exclude [zero? number? = compare])\n  (:require [clojure.core :as core]\n            [sicmutils.util :as u]\n            #?@(:cljs [[\"complex.js\" :as Complex]\n                       [\"fraction.js/bigfraction.js\" :as Fraction]\n                       [goog.array :as garray]\n                       [goog.math.Long]\n                       [goog.math.Integer]]))\n  #?(:clj\n     (:import\n      (clojure.lang BigInt Sequential Var)\n      (org.apache.commons.math3.complex Complex))))\n\n(defprotocol Numerical\n  (^boolean numerical? [_]))\n\n(extend-protocol Numerical\n  #?(:clj Object :cljs default)\n  (numerical? [_] false))\n\n(defprotocol Value\n  (^boolean zero? [this])\n  (^boolean one? [this])\n  (^boolean identity? [this])\n  (zero-like [this])\n  (one-like [this])\n  (identity-like [this])\n  (^boolean exact? [this] \"Entries that are exact are available for `gcd`, among\n  other operations.\")\n  (freeze [this]\n    \"Freezing an expression means removing wrappers and other metadata from\n  subexpressions, so that the result is basically a pure S-expression with the\n  same structure as the input. Doing this will rob an expression of useful\n  information for further computation; so this is intended to be done just\n  before simplification and printing, to simplify those processes.\")\n  (kind [this]))\n\n(defn argument-kind [& args]\n  (mapv kind args))\n\n(def object-name-map (atom {}))\n\n(def seqtype #?(:clj Sequential :cljs ::seq))\n\n;; Allows multimethod dispatch to seqs in CLJS.\n#?(:cljs\n   (do\n     (derive Cons ::seq)\n     (derive IndexedSeq ::seq)\n     (derive PersistentVector ::seq)\n     (derive LazySeq ::seq)\n     (derive List ::seq)\n     (derive Range ::seq)))\n\n;; Smaller inheritance tree to enabled shared implementations between numeric\n;; types that represent mathematical integers.\n\n(derive ::native-integral ::integral)\n(derive ::integral ::real)\n(derive ::floating-point ::real)\n(derive ::real ::number)\n\n(defn native-integral?\n  \"Returns true if x is an integral number that Clojure's math operations work\n  with, false otherwise.\"\n  [x]\n  (integer? x))\n\n(defn integral?\n  \"Returns true if x is an integral number, false otherwise.\"\n  [x]\n  #?(:clj (integer? x)\n     :cljs (or (int? x)\n               (core/= \"bigint\" (goog/typeOf x)))))\n\n(defn real?\n  \"Returns true if `x` is either an integral number or a floating point number (ie,\n  in the numeric tower but not complex), false otherwise.\"\n  [x]\n  #?(:clj (instance? Number x)\n     :cljs (or (cljs.core/number? x)\n               (instance? goog.math.Integer x)\n               (instance? goog.math.Long x)\n               (core/= \"bigint\" (goog/typeOf x))\n               (instance? Fraction x))))\n\n(defn number?\n  \"Returns true if `x` is any number type in the numeric tower:\n\n  - integral\n  - floating point\n  - complex\n\n  false otherwise.\"\n  [x]\n  #?(:clj\n     (or (instance? Number x)\n         (instance? Complex x))\n     :cljs (or (cljs.core/number? x)\n               (core/= \"bigint\" (goog/typeOf x))\n               (instance? Fraction x)\n               (instance? goog.math.Integer x)\n               (instance? goog.math.Long x)\n               (instance? Complex x))))\n\n(defn numeric-zero?\n  \"Returns `true` if `x` is both a [[number?]] and [[zero?]], false otherwise.\"\n  [x]\n  (and (number? x)\n       (zero? x)))\n\n;; `::scalar` is a thing that symbolic expressions AND actual numbers both\n;; derive from.\n\n(derive ::number ::scalar)\n\n(defn scalar?\n  \"Returns true for anything that derives from `::scalar`, ie, any numeric type in\n  the numeric tower that responds true to [[number?]], plus symbolic expressions\n  generated by [[sicmutils.abstract.number/literal-number]],\n\n  false otherwise.\"\n  [x]\n  (isa? (kind x) ::scalar))\n\n#?(:clj\n   (do\n     (derive Number ::real)\n     (derive Double ::floating-point)\n     (derive Float ::floating-point)\n     (derive BigDecimal ::floating-point)\n     (derive Integer ::native-integral)\n     (derive Long ::native-integral)\n     (derive BigInt ::native-integral)\n     (derive BigInteger ::native-integral))\n\n   :cljs\n   (do (derive js/Number ::real)\n       (derive js/BigInt ::integral)\n       (derive goog.math.Integer ::integral)\n       (derive goog.math.Long ::integral)))\n\n(extend-protocol Numerical\n  #?(:clj Number :cljs number)\n  (numerical? [_] true)\n\n  #?@(:clj\n      [java.lang.Double\n       (numerical? [_] true)\n\n       java.lang.Float\n       (numerical? [_] true)]))\n\n(extend-protocol Value\n  #?(:clj Number :cljs number)\n  (zero? [x] (core/zero? x))\n  (one? [x] (== 1 x))\n  (identity? [x] (== 1 x))\n  (zero-like [_] 0)\n  (one-like [_] 1)\n  (identity-like [_] 1)\n  (freeze [x] x)\n  (exact? [x] #?(:clj  (or (integer? x) (ratio? x))\n                 :cljs (integer? x)))\n  (kind [x] #?(:clj (type x)\n               :cljs (if (exact? x)\n                       ::native-integral\n                       ::floating-point)))\n\n  #?(:clj Boolean :cljs boolean)\n  (zero? [_] false)\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [_] 0)\n  (one-like [_] 1)\n  (identity-like [_] 1)\n  (freeze [x] x)\n  (exact? [_] false)\n  (kind [x] (type x))\n\n  #?@(:clj\n      [java.lang.Double\n       (zero? [x] (core/zero? x))\n       (one? [x] (== 1 x))\n       (identity? [x] (== 1 x))\n       (zero-like [_] 0.0)\n       (one-like [_] 1.0)\n       (identity-like [_] 1.0)\n       (freeze [x] x)\n       (exact? [_] false)\n       (kind [x] (type x))\n\n       java.lang.Float\n       (zero? [x] (core/zero? x))\n       (one? [x] (== 1 x))\n       (identity? [x] (== 1 x))\n       (zero-like [_] 0.0)\n       (one-like [_] 1.0)\n       (identity-like [_] 1.0)\n       (freeze [x] x)\n       (exact? [_] false)\n       (kind [x] (type x))])\n\n  nil\n  (zero? [_] true)\n  (one?[_] false)\n  (identity?[_] false)\n  (zero-like [_] (u/unsupported \"nil doesn't support zero-like.\"))\n  (one-like [_] (u/unsupported \"nil doesn't support one-like.\"))\n  (identity-like [_] (u/unsupported \"nil doesn't support identity-like.\"))\n  (freeze [_] nil)\n  (exact? [_] false)\n  (kind [_] nil)\n\n  Var\n  (zero? [_] false)\n  (one?[_] false)\n  (identity?[_] false)\n  (zero-like [v] (u/unsupported (str \"zero-like: \" v)))\n  (one-like [v] (u/unsupported (str \"one-like: \" v)))\n  (identity-like [v] (u/unsupported (str \"identity-like: \" v)))\n  (freeze [v] (:name (meta v)))\n  (exact? [_] false)\n  (kind [v] (type v))\n\n  #?(:clj Object :cljs default)\n  (zero? [_] false)\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [o] (u/unsupported (str \"zero-like: \" o)))\n  (one-like [o] (u/unsupported (str \"one-like: \" o)))\n  (identity-like [o] (u/unsupported (str \"identity-like: \" o)))\n  (exact? [_] false)\n  (freeze [o] (if (sequential? o)\n                (map freeze o)\n                (get @object-name-map o o)))\n  (kind [o] (:type o (type o))))\n\n(defn exact-zero?\n  \"Returns true if the supplied argument is an exact numerical zero, false\n  otherwise.\"\n  [n]\n  (and (number? n)\n       (exact? n)\n       (zero? n)))\n\n;; Override equiv for numbers.\n(defmulti = argument-kind)\n\n;; These two constitute the default cases.\n(defmethod = [::number ::number] [l r]\n  #?(:clj  (== l r)\n     :cljs (identical? l r)))\n\n(defmethod = [seqtype seqtype] [l r]\n  (and (= (count l) (count r))\n       (every? true? (map = l r))))\n\n(defmethod = :default [l r]\n  (if (or (isa? (kind l) ::number)\n          (isa? (kind r) ::number))\n    false\n    (core/= l r)))\n\n#?(:cljs\n   ;; These definitions are required for the protocol implementation below.\n   (do\n     (defmethod = [::native-integral js/BigInt] [l r]\n       (coercive-= l r))\n\n     (defmethod = [js/BigInt ::native-integral] [l r]\n       (coercive-= l r))\n\n     (doseq [[from to f] [[goog.math.Long goog.math.Integer u/int]\n                          [::native-integral goog.math.Integer u/int]\n                          [::native-integral goog.math.Long u/long]\n                          [goog.math.Long js/BigInt u/bigint]\n                          [goog.math.Integer js/BigInt u/bigint]]]\n       (defmethod = [from to] [l r] (core/= (f l) r))\n       (defmethod = [to from] [l r] (core/= l (f r))))\n\n     (defmethod = [goog.math.Long goog.math.Long]\n       [^goog.math.Long l ^goog.math.Long r]\n       (.equals l r))\n\n     (defmethod = [goog.math.Integer goog.math.Integer]\n       [^goog.math.Integer l ^goog.math.Integer r]\n       (.equals l r))\n\n     (extend-protocol IEquiv\n       number\n       (-equiv [this other]\n         (cond (core/number? other) (identical? this other)\n               (numerical? other)   (= this (.valueOf other))\n               :else false))\n\n       goog.math.Integer\n       (-equiv [this other]\n         (if (core/= goog.math.Integer (type other))\n           (.equals this other)\n           (= this (.valueOf other))))\n\n       goog.math.Long\n       (-equiv [this other]\n         (if (core/= goog.math.Long (type other))\n           (.equals this other)\n           (= this (.valueOf other)))))))\n\n#?(:cljs\n   (extend-type js/BigInt\n     IEquiv\n     (-equiv [this o]\n       (let [other (.valueOf o)]\n         (if (u/bigint? other)\n           (coercive-= this other)\n           (= this other))))\n\n     IPrintWithWriter\n     (-pr-writer [x writer _]\n       (let [rep (if (<= x (.-MAX_SAFE_INTEGER js/Number))\n                   (str x)\n                   (str \"\\\"\" x \"\\\"\"))]\n         (write-all writer \"#sicm/bigint \" rep)))))\n\n#?(:cljs\n   ;; goog.math.{Long, Integer} won't compare properly using <, > etc unless they\n   ;; can convert themselves to numbers via `valueOf.` This extension takes care of\n   ;; that modification.\n   (do\n     (extend-type goog.math.Long\n       Object\n       (valueOf [this] (.toNumber this)))\n\n     (extend-type goog.math.Integer\n       Object\n       (valueOf [this] (.toNumber this)))))\n\n#?(:cljs\n   (extend-protocol IComparable\n     number\n     (-compare [this o]\n       (let [other (.valueOf o)]\n         (if (real? other)\n           (garray/defaultCompare this other)\n           (throw (js/Error. (str \"Cannot compare \" this \" to \" o))))))\n\n     js/BigInt\n     (-compare [this o]\n       (let [other (.valueOf o)]\n         (if (real? other)\n           (garray/defaultCompare this other)\n           (throw (js/Error. (str \"Cannot compare \" this \" to \" o))))))\n\n     goog.math.Integer\n     (-compare [this o]\n       (let [other (.valueOf o)]\n         (cond (instance? goog.math.Integer other) (.compare this other)\n               (real? other) (garray/defaultCompare this other)\n               :else (throw (js/Error. (str \"Cannot compare \" this \" to \" o))))))\n\n     goog.math.Long\n     (-compare [this o]\n       (let [other (.valueOf o)]\n         (cond (instance? goog.math.Long other) (.compare this other)\n               (real? other) (garray/defaultCompare this other)\n               :else (throw (js/Error. (str \"Cannot compare \" this \" to \" o))))))))\n\n#?(:cljs\n   ;; Clojurescript-specific implementations of Value.\n   (let [big-zero (js/BigInt 0)\n         big-one (js/BigInt 1)]\n\n     (extend-protocol Numerical\n       js/BigInt\n       (numerical? [_] true)\n\n       goog.math.Integer\n       (numerical? [_] true)\n\n       goog.math.Long\n       (numerical? [_] true))\n\n     (extend-protocol Value\n       js/BigInt\n       (zero? [x] (coercive-= big-zero x))\n       (one? [x] (coercive-= big-one x))\n       (identity? [x] (coercive-= big-one x))\n       (zero-like [_] big-zero)\n       (one-like [_] big-one)\n       (identity-like [_] big-one)\n       (freeze [x]\n         ;; Bigint freezes into a non-bigint if it can be represented as a\n         ;; number; otherwise, it turns into its own literal.\n         (if (<= x (.-MAX_SAFE_INTEGER js/Number))\n           (js/Number x)\n           x))\n       (exact? [_] true)\n       (kind [_] js/BigInt)\n\n       goog.math.Integer\n       (zero? [x] (.isZero x))\n       (one? [x] (core/= (.-ONE goog.math.Integer) x))\n       (identity? [x] (core/= (.-ONE goog.math.Integer) x))\n       (zero-like [_] (.-ZERO goog.math.Integer))\n       (one-like [_] (.-ONE goog.math.Integer))\n       (identity-like [_] (.-ONE goog.math.Integer))\n       (freeze [x] x)\n       (exact? [_] true)\n       (kind [_] goog.math.Integer)\n\n       goog.math.Long\n       (zero? [x] (.isZero x))\n       (one? [x] (core/= (goog.math.Long/getOne) x))\n       (identity? [x] (core/= (goog.math.Long/getOne) x))\n       (zero-like [_] (goog.math.Long/getZero))\n       (one-like [_] (goog.math.Long/getOne))\n       (identity-like [_] (goog.math.Long/getOne))\n       (freeze [x] x)\n       (exact? [_] true)\n       (kind [_] goog.math.Long))))\n\n(defn kind-predicate\n  \"Returns a predicate that returns true if its argument matches the supplied\n  kind-keyword `k`, false otherwise.\"\n  [x]\n  (let [k (kind x)]\n    (fn [x2] (isa? (kind x2) k))))\n\n#?(:clj\n   (defn compare\n     \"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Same as Java x.compareTo(y) except it also works for nil, and\n  compares numbers and collections in a type-independent manner. x\n  must implement Comparable\"\n     [x y]\n     (if (core/number? x)\n       (if (core/number? y)\n         (core/compare x y)\n         (- (core/compare y x)))\n       (core/compare x y)))\n   :cljs\n   (defn ^number compare\n     \"Comparator. Clone of [[cljs.core/compare]] that works with the expanded\n      SICMUtils numeric tower.\n\n  Returns a negative number, zero, or a positive number when x is logically\n  'less than', 'equal to', or 'greater than' y. Uses IComparable if available\n  and google.array.defaultCompare for objects of the same type and special-cases\n  nil to be less than any other object.\"\n     [x y]\n     (cond\n       (identical? x y) 0\n       (nil? x)         -1\n       (nil? y)         1\n       (core/number? x) (let [yv (.valueOf y)]\n                          (if (real? yv)\n                            (garray/defaultCompare x yv)\n                            (throw (js/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n       (satisfies? IComparable x)\n       (-compare x y)\n\n       :else\n       (if (and (or (string? x) (array? x) (true? x) (false? x))\n                (identical? (type x) (type y)))\n         (garray/defaultCompare x y)\n         (throw (js/Error. (str \"Cannot compare \" x \" to \" y)))))))\n\n(defn add-object-symbols!\n  [o->syms]\n  (swap! object-name-map into o->syms))\n\n(def machine-epsilon\n  (loop [e 1.0]\n    (if (core/= 1.0 (+ e 1.0))\n      (* e 2.0)\n      (recur (/ e 2.0)))))\n\n(def sqrt-machine-epsilon\n  (Math/sqrt machine-epsilon))\n\n(defn within\n  \"Returns a function that tests whether two values are within \u03b5 of each other.\"\n  [^double \u03b5]\n  (fn [^double x ^double y]\n    (< (Math/abs (- x y)) \u03b5)))\n\n(def ^:no-doc relative-integer-tolerance (* 100 machine-epsilon))\n(def ^:no-doc absolute-integer-tolerance 1e-20)\n\n(defn almost-integral?\n  \"Returns true if `x` is either:\n\n  - [[integral?]],\n  - a floating point number either < [[absolute-integer-tolerance]] (if near\n    zero) or within [[relative-integer-tolerance]] of the closest integer,\n\n  false otherwise.\"\n  [x]\n  (or (integral? x)\n      (and (float? x)\n           (let [x (double x)\n                 z (Math/round x)]\n             (if (zero? z)\n               (< (Math/abs x) absolute-integer-tolerance)\n               (< (Math/abs (/ (- x z) z)) relative-integer-tolerance))))))\n\n(def twopi (* 2 Math/PI))\n\n(defn principal-value [cuthigh]\n  (let [cutlow (- cuthigh twopi)]\n    (fn [x]\n      (if (and (<= cutlow x) (< x cuthigh))\n        x\n        (let [y (- x (* twopi (Math/floor (/ x twopi))))]\n          (if (< y cuthigh)\n            y\n            (- y twopi)))))))\n"]}