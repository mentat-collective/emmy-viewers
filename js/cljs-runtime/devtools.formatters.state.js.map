{"version":3,"sources":["devtools/formatters/state.cljs"],"mappings":";;AAiBA,sDAAA,tDAAeA;AAEf,uDAAA,vDAAMC;AAAN,AACE,UAAA,wDAAA,vDAAOD;;AAET,8CAAA,9CAAME;AAAN,AAAA;;AAGA,8CAAA,9CAAME;AAAN,AAAA,GACS,AAACH;AADV;AAAA,AAAA,MAAA,KAAAE,MAAA;;;AAEEH;;AAEF,AAAA,uDAAA,+DAAAK,tHAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,0FAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,4FAAA,5FAAME,uGAAuBM,EAAIC;AAAjC,AAAA,GACS,AAACjB;AADV;AAAA,AAAA,MAAA,KAAAE,MAAA;;;AAEE,QAAMH,sDAAgB,AAACmB,8CAAMF,EAAEjB,oDAAgBkB;;;AAFjD,CAAA,+EAAA,/EAAMP;;AAAN;AAAA,CAAA,yEAAA,WAAAC,pFAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAMA,iEAAA,jEAAMQ,0IAAiCC;AAAvC,AACE,oKAAA,7JAACC,0FAAsBC,8HAAgBC,eAAKH;;AAE9C,gDAAA,hDAAMI;AAAN,AACE,OAAA,yFAAU,AAACrB;;AAEb,+CAAA,/CAAMsB,sGAAcL;AAApB,AACE,IAAMM,cAAQ,AAACF;AAAf,AACE,sBAAA,WAAAG,1BAACC;AAAD,AAAO,QAAAD,qBAAcP;GAAQM;;AAEjC,qDAAA,rDAAYG;AAAZ,AACE,OAACC,mBAAQ,AAAA,8GAAoB,AAAC3B;;AAEhC,kDAAA,lDAAM4B,4GAAuBC,MAAMC;AAAnC,AACE,GAAI,GAAA,QAAA,PAAOA;AACT,2DAAA,pDAACC,8CAAMF,sFAAyBC;;AAChC,4DAAA,rDAACE,+CAAOH;;;AAEZ,oDAAA,pDAAMI;AAAN,AACE,OAAA,iHAAsB,AAACjC;;AAEzB,oDAAA,pDAAMkC,gHAAyBL,MAAMC;AAArC,AACE,GAAI,GAAA,QAAA,PAAOA;AACT,2DAAA,pDAACC,8CAAMF,yFAA2BC;;AAClC,4DAAA,rDAACE,+CAAOH;;;AAEZ,6CAAA,7CAAMM;AAAN,AACE,OAAA,mGAAe,AAACnC;;AAElB,6CAAA,7CAAMoC,kGAAkBP,MAAMC;AAA9B,AACE,GAAI,GAAA,QAAA,PAAOA;AACT,2DAAA,pDAACC,8CAAMF,2EAAoBC;;AAC3B,4DAAA,rDAACE,+CAAOH;;;AAEZ,+CAAA,/CAAMQ,sGAAoBR;AAA1B,oGACMA,3CACA,iDAAA,jDAACO,zDACD,gHAAA,zGAACF","names":["devtools.formatters.state/*current-state*","devtools.formatters.state/valid-current-state?","devtools.formatters.state/get-default-state","js/Error","devtools.formatters.state/get-current-state","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","devtools.formatters.state/update-current-state!","seq63920","G__63921","cljs.core/first","cljs.core/next","self__5754__auto__","f","args","cljs.core.apply","devtools.formatters.state/push-object-to-current-history!","object","devtools.formatters.state.update_current_state_BANG_","cljs.core/update","cljs.core/conj","devtools.formatters.state/get-current-history","devtools.formatters.state/is-circular?","history","p1__63929#","cljs.core/some","devtools.formatters.state/prevent-recursion?","cljs.core/boolean","devtools.formatters.state/set-prevent-recursion","state","val","cljs.core.assoc","cljs.core.dissoc","devtools.formatters.state/get-managed-print-level","devtools.formatters.state/set-managed-print-level","devtools.formatters.state/get-depth-budget","devtools.formatters.state/set-depth-budget","devtools.formatters.state/reset-depth-limits"],"sourcesContent":["(ns devtools.formatters.state)\n\n; - state management --------------------------------------------------------------------------------------------------------\n;\n; we have to maintain some state:\n; a) to prevent infinite recursion in some pathological cases (https://github.com/binaryage/cljs-devtools/issues/2)\n; b) to keep track of printed objects to visually signal circular data structures\n;\n; We dynamically bind *current-config* to the config passed from \"outside\" when entering calls to our API methods.\n; Initially the state is empty, but we accumulate there a history of seen values when rendering individual values\n; in depth-first traversal order. See alt-printer-impl where we re-bind *current-config* for each traversal level.\n; But there is a catch. For larger data structures our printing methods usually do not print everything at once.\n; We can include so called \"object references\" which are just placeholders which can be expanded later\n; by DevTools UI (when user clicks a disclosure triangle).\n; For proper continuation in rendering of those references we have to carry our existing state over.\n; We use \"config\" feature of custom formatters system to pass current state to future API calls.\n\n(def ^:dynamic *current-state* nil)\n\n(defn valid-current-state? []\n  (some? *current-state*))\n\n(defn get-default-state []\n  {})\n\n(defn get-current-state []\n  {:pre [(valid-current-state?)]}\n  *current-state*)\n\n(defn update-current-state! [f & args]\n  {:pre [(valid-current-state?)]}\n  (set! *current-state* (apply f *current-state* args)))\n\n; -- high level API ---------------------------------------------------------------------------------------------------------\n\n(defn push-object-to-current-history! [object]\n  (update-current-state! update :history conj object))\n\n(defn get-current-history []\n  (:history (get-current-state)))\n\n(defn is-circular? [object]\n  (let [history (get-current-history)]\n    (some #(identical? % object) history)))\n\n(defn ^bool prevent-recursion? []\n  (boolean (:prevent-recursion (get-current-state))))\n\n(defn set-prevent-recursion [state val]\n  (if (some? val)\n    (assoc state :prevent-recursion val)\n    (dissoc state :prevent-recursion)))\n\n(defn get-managed-print-level []\n  (:managed-print-level (get-current-state)))\n\n(defn set-managed-print-level [state val]\n  (if (some? val)\n    (assoc state :managed-print-level val)\n    (dissoc state :managed-print-level)))\n\n(defn get-depth-budget []\n  (:depth-budget (get-current-state)))\n\n(defn set-depth-budget [state val]\n  (if (some? val)\n    (assoc state :depth-budget val)\n    (dissoc state :depth-budget)))\n\n(defn reset-depth-limits [state]\n  (-> state\n      (set-depth-budget nil)\n      (set-managed-print-level nil)))\n"]}