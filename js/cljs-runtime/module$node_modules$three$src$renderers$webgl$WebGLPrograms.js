shadow$provide.module$node_modules$three$src$renderers$webgl$WebGLPrograms=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.WebGLPrograms=function(renderer,cubemaps,cubeuvmaps,extensions,capabilities,bindingStates,clipping){const _programLayers=new _Layers.Layers,_customShaders=new _WebGLShaderCache.WebGLShaderCache,programs=[],isWebGL2=capabilities.isWebGL2,logarithmicDepthBuffer=capabilities.logarithmicDepthBuffer,floatVertexTextures=capabilities.floatVertexTextures,
maxVertexUniforms=capabilities.maxVertexUniforms,vertexTextures=capabilities.vertexTextures;let precision=capabilities.precision;const shaderIDs={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",
ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(material,lights,shadows,scene,object){const fog=scene.fog;scene=material.isMeshStandardMaterial?scene.environment:null;scene=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||scene);const shaderID=shaderIDs[material.type];if(object.isSkinnedMesh){var JSCompiler_temp=object.skeleton.bones;if(floatVertexTextures)JSCompiler_temp=1024;else{var maxBones=Math.min(Math.floor((maxVertexUniforms-20)/4),
JSCompiler_temp.length);maxBones<JSCompiler_temp.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+JSCompiler_temp.length+" bones. This GPU supports "+maxBones+"."),JSCompiler_temp=0):JSCompiler_temp=maxBones}}else JSCompiler_temp=0;null!==material.precision&&(precision=capabilities.getMaxPrecision(material.precision),precision!==material.precision&&console.warn("THREE.WebGLProgram.getParameters:",material.precision,"not supported, using",precision,"instead."));let customVertexShaderID,customFragmentShaderID;
if(shaderID){var fragmentShader=_ShaderLib.ShaderLib[shaderID];maxBones=fragmentShader.vertexShader;fragmentShader=fragmentShader.fragmentShader}else maxBones=material.vertexShader,fragmentShader=material.fragmentShader,_customShaders.update(material),customVertexShaderID=_customShaders.getVertexShaderID(material),customFragmentShaderID=_customShaders.getFragmentShaderID(material);const currentRenderTarget=renderer.getRenderTarget(),useClearcoat=0<material.clearcoat;return{isWebGL2,shaderID,shaderName:material.type,
vertexShader:maxBones,fragmentShader,defines:material.defines,customVertexShaderID,customFragmentShaderID,isRawShaderMaterial:!0===material.isRawShaderMaterial,glslVersion:material.glslVersion,precision,instancing:!0===object.isInstancedMesh,instancingColor:!0===object.isInstancedMesh&&null!==object.instanceColor,supportsVertexTextures:vertexTextures,outputEncoding:null===currentRenderTarget?renderer.outputEncoding:!0===currentRenderTarget.isXRRenderTarget?currentRenderTarget.texture.encoding:_constants.LinearEncoding,
map:!!material.map,matcap:!!material.matcap,envMap:!!scene,envMapMode:scene&&scene.mapping,envMapCubeUV:!!scene&&(scene.mapping===_constants.CubeUVReflectionMapping||scene.mapping===_constants.CubeUVRefractionMapping),lightMap:!!material.lightMap,aoMap:!!material.aoMap,emissiveMap:!!material.emissiveMap,bumpMap:!!material.bumpMap,normalMap:!!material.normalMap,objectSpaceNormalMap:material.normalMapType===_constants.ObjectSpaceNormalMap,tangentSpaceNormalMap:material.normalMapType===_constants.TangentSpaceNormalMap,
decodeVideoTexture:!!material.map&&!0===material.map.isVideoTexture&&material.map.encoding===_constants.sRGBEncoding,clearcoat:useClearcoat,clearcoatMap:useClearcoat&&!!material.clearcoatMap,clearcoatRoughnessMap:useClearcoat&&!!material.clearcoatRoughnessMap,clearcoatNormalMap:useClearcoat&&!!material.clearcoatNormalMap,displacementMap:!!material.displacementMap,roughnessMap:!!material.roughnessMap,metalnessMap:!!material.metalnessMap,specularMap:!!material.specularMap,specularIntensityMap:!!material.specularIntensityMap,
specularColorMap:!!material.specularColorMap,transparent:material.transparent,alphaMap:!!material.alphaMap,alphaTest:0<material.alphaTest,gradientMap:!!material.gradientMap,sheen:0<material.sheen,sheenColorMap:!!material.sheenColorMap,sheenRoughnessMap:!!material.sheenRoughnessMap,transmission:0<material.transmission,transmissionMap:!!material.transmissionMap,thicknessMap:!!material.thicknessMap,combine:material.combine,vertexTangents:!!material.normalMap&&!!object.geometry&&!!object.geometry.attributes.tangent,
vertexColors:material.vertexColors,vertexAlphas:!0===material.vertexColors&&!!object.geometry&&!!object.geometry.attributes.color&&4===object.geometry.attributes.color.itemSize,vertexUvs:!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatMap||!!material.clearcoatRoughnessMap||!!material.clearcoatNormalMap||!!material.displacementMap||!!material.transmissionMap||
!!material.thicknessMap||!!material.specularIntensityMap||!!material.specularColorMap||!!material.sheenColorMap||!!material.sheenRoughnessMap,uvsVertexOnly:!(material.map||material.bumpMap||material.normalMap||material.specularMap||material.alphaMap||material.emissiveMap||material.roughnessMap||material.metalnessMap||material.clearcoatNormalMap||0<material.transmission||material.transmissionMap||material.thicknessMap||material.specularIntensityMap||material.specularColorMap||0<material.sheen||material.sheenColorMap||
material.sheenRoughnessMap)&&!!material.displacementMap,fog:!!fog,useFog:material.fog,fogExp2:fog&&fog.isFogExp2,flatShading:!!material.flatShading,sizeAttenuation:material.sizeAttenuation,logarithmicDepthBuffer,skinning:!0===object.isSkinnedMesh&&0<JSCompiler_temp,maxBones:JSCompiler_temp,useVertexTexture:floatVertexTextures,morphTargets:!!object.geometry&&!!object.geometry.morphAttributes.position,morphNormals:!!object.geometry&&!!object.geometry.morphAttributes.normal,morphTargetsCount:object.geometry&&
object.geometry.morphAttributes.position?object.geometry.morphAttributes.position.length:0,numDirLights:lights.directional.length,numPointLights:lights.point.length,numSpotLights:lights.spot.length,numRectAreaLights:lights.rectArea.length,numHemiLights:lights.hemi.length,numDirLightShadows:lights.directionalShadowMap.length,numPointLightShadows:lights.pointShadowMap.length,numSpotLightShadows:lights.spotShadowMap.length,numClippingPlanes:clipping.numPlanes,numClipIntersection:clipping.numIntersection,
dithering:material.dithering,shadowMapEnabled:renderer.shadowMap.enabled&&0<shadows.length,shadowMapType:renderer.shadowMap.type,toneMapping:material.toneMapped?renderer.toneMapping:_constants.NoToneMapping,physicallyCorrectLights:renderer.physicallyCorrectLights,premultipliedAlpha:material.premultipliedAlpha,doubleSided:material.side===_constants.DoubleSide,flipSided:material.side===_constants.BackSide,depthPacking:void 0!==material.depthPacking?material.depthPacking:!1,index0AttributeName:material.index0AttributeName,
extensionDerivatives:material.extensions&&material.extensions.derivatives,extensionFragDepth:material.extensions&&material.extensions.fragDepth,extensionDrawBuffers:material.extensions&&material.extensions.drawBuffers,extensionShaderTextureLOD:material.extensions&&material.extensions.shaderTextureLOD,rendererExtensionFragDepth:isWebGL2||extensions.has("EXT_frag_depth"),rendererExtensionDrawBuffers:isWebGL2||extensions.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:isWebGL2||extensions.has("EXT_shader_texture_lod"),
customProgramCacheKey:material.customProgramCacheKey()}},getProgramCacheKey:function(parameters){const array=[];parameters.shaderID?array.push(parameters.shaderID):(array.push(parameters.customVertexShaderID),array.push(parameters.customFragmentShaderID));if(void 0!==parameters.defines)for(const name in parameters.defines)array.push(name),array.push(parameters.defines[name]);!1===parameters.isRawShaderMaterial&&(array.push(parameters.precision),array.push(parameters.outputEncoding),array.push(parameters.envMapMode),
array.push(parameters.combine),array.push(parameters.vertexUvs),array.push(parameters.fogExp2),array.push(parameters.sizeAttenuation),array.push(parameters.maxBones),array.push(parameters.morphTargetsCount),array.push(parameters.numDirLights),array.push(parameters.numPointLights),array.push(parameters.numSpotLights),array.push(parameters.numHemiLights),array.push(parameters.numRectAreaLights),array.push(parameters.numDirLightShadows),array.push(parameters.numPointLightShadows),array.push(parameters.numSpotLightShadows),
array.push(parameters.shadowMapType),array.push(parameters.toneMapping),array.push(parameters.numClippingPlanes),array.push(parameters.numClipIntersection),_programLayers.disableAll(),parameters.isWebGL2&&_programLayers.enable(0),parameters.supportsVertexTextures&&_programLayers.enable(1),parameters.instancing&&_programLayers.enable(2),parameters.instancingColor&&_programLayers.enable(3),parameters.map&&_programLayers.enable(4),parameters.matcap&&_programLayers.enable(5),parameters.envMap&&_programLayers.enable(6),
parameters.envMapCubeUV&&_programLayers.enable(7),parameters.lightMap&&_programLayers.enable(8),parameters.aoMap&&_programLayers.enable(9),parameters.emissiveMap&&_programLayers.enable(10),parameters.bumpMap&&_programLayers.enable(11),parameters.normalMap&&_programLayers.enable(12),parameters.objectSpaceNormalMap&&_programLayers.enable(13),parameters.tangentSpaceNormalMap&&_programLayers.enable(14),parameters.clearcoat&&_programLayers.enable(15),parameters.clearcoatMap&&_programLayers.enable(16),
parameters.clearcoatRoughnessMap&&_programLayers.enable(17),parameters.clearcoatNormalMap&&_programLayers.enable(18),parameters.displacementMap&&_programLayers.enable(19),parameters.specularMap&&_programLayers.enable(20),parameters.roughnessMap&&_programLayers.enable(21),parameters.metalnessMap&&_programLayers.enable(22),parameters.gradientMap&&_programLayers.enable(23),parameters.alphaMap&&_programLayers.enable(24),parameters.alphaTest&&_programLayers.enable(25),parameters.vertexColors&&_programLayers.enable(26),
parameters.vertexAlphas&&_programLayers.enable(27),parameters.vertexUvs&&_programLayers.enable(28),parameters.vertexTangents&&_programLayers.enable(29),parameters.uvsVertexOnly&&_programLayers.enable(30),parameters.fog&&_programLayers.enable(31),array.push(_programLayers.mask),_programLayers.disableAll(),parameters.useFog&&_programLayers.enable(0),parameters.flatShading&&_programLayers.enable(1),parameters.logarithmicDepthBuffer&&_programLayers.enable(2),parameters.skinning&&_programLayers.enable(3),
parameters.useVertexTexture&&_programLayers.enable(4),parameters.morphTargets&&_programLayers.enable(5),parameters.morphNormals&&_programLayers.enable(6),parameters.premultipliedAlpha&&_programLayers.enable(7),parameters.shadowMapEnabled&&_programLayers.enable(8),parameters.physicallyCorrectLights&&_programLayers.enable(9),parameters.doubleSided&&_programLayers.enable(10),parameters.flipSided&&_programLayers.enable(11),parameters.depthPacking&&_programLayers.enable(12),parameters.dithering&&_programLayers.enable(13),
parameters.specularIntensityMap&&_programLayers.enable(14),parameters.specularColorMap&&_programLayers.enable(15),parameters.transmission&&_programLayers.enable(16),parameters.transmissionMap&&_programLayers.enable(17),parameters.thicknessMap&&_programLayers.enable(18),parameters.sheen&&_programLayers.enable(19),parameters.sheenColorMap&&_programLayers.enable(20),parameters.sheenRoughnessMap&&_programLayers.enable(21),parameters.decodeVideoTexture&&_programLayers.enable(22),parameters.transparent&&
_programLayers.enable(23),array.push(_programLayers.mask),array.push(renderer.outputEncoding));array.push(parameters.customProgramCacheKey);return array.join()},getUniforms:function(material){const shaderID=shaderIDs[material.type];return shaderID?_UniformsUtils.UniformsUtils.clone(_ShaderLib.ShaderLib[shaderID].uniforms):material.uniforms},acquireProgram:function(parameters,cacheKey){let program;for(let p=0,pl=programs.length;p<pl;p++){const preexistingProgram=programs[p];if(preexistingProgram.cacheKey===
cacheKey){program=preexistingProgram;++program.usedTimes;break}}void 0===program&&(program=new _WebGLProgram.WebGLProgram(renderer,cacheKey,parameters,bindingStates),programs.push(program));return program},releaseProgram:function(program){if(0===--program.usedTimes){const i=programs.indexOf(program);programs[i]=programs[programs.length-1];programs.pop();program.destroy()}},releaseShaderCache:function(material){_customShaders.remove(material)},programs,dispose:function(){_customShaders.dispose()}}};
var _constants=require("module$node_modules$three$src$constants"),_Layers=require("module$node_modules$three$src$core$Layers"),_WebGLProgram=require("module$node_modules$three$src$renderers$webgl$WebGLProgram"),_WebGLShaderCache=require("module$node_modules$three$src$renderers$webgl$WebGLShaderCache"),_ShaderLib=require("module$node_modules$three$src$renderers$shaders$ShaderLib"),_UniformsUtils=require("module$node_modules$three$src$renderers$shaders$UniformsUtils")}
//# sourceMappingURL=module$node_modules$three$src$renderers$webgl$WebGLPrograms.js.map
