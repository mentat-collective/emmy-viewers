{"version":3,"sources":["sicmutils/calculus/hodge_star.cljc"],"mappings":"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","names":["sicmutils.calculus.hodge-star/Gram-Schmidt","vector-basis","metric","x","sicmutils.generic/sqrt","sicmutils.generic/square","v","sicmutils.generic._STAR_","sicmutils.generic._SLASH_","make-positive","vects","cljs.core/flatten","e0","normalize","cljs.core/first","ins","cljs.core/rest","outs","cljs.core/empty?","sicmutils.structure/down*","cljs.core.conj","sicmutils.generic._","cljs.core.apply","sicmutils.generic/+","cljs.core.map","outv","G__87904","G__87905","sicmutils.calculus.hodge-star/orthonormalize","basis","coordinate-system","ovb","sicmutils.calculus.basis/basis->vector-basis","sicmutils.calculus.basis/make-basis","sicmutils.calculus.basis/vector-basis->dual","sicmutils.calculus.hodge-star/list-difference","l1","l2","cljs.core.remove","cljs.core.into","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.calculus.hodge-star/Hodge-star","p__87919","map__87921","cljs.core/--destructure-map","cljs.core.get","seq87910","G__87911","cljs.core/next","G__87912","self__4851__auto__","spec","orthonormalize?","sicmutils.calculus.basis/basis?","sicmutils.calculus.basis/coordinate-system->basis","on-vector-basis","on-oneform-basis","sicmutils.calculus.basis/basis->oneform-basis","basis-check","sicmutils.matrix/by-rows*","ei","ej","bsigns","sicmutils.matrix/diagonal","pform-field","js/Error","sicmutils.function/function?","sicmutils.calculus.form-field/form-field?","p","sicmutils.calculus.form-field/get-rank","sicmutils.calculus.form-field/wedge","pvect-basis-lists","sicmutils.util.permute/combinations","coeffs","pvect","pform-basis-lists","n-p:form-basis-lists","onefbl","n-p:basis","n-p:basis-list","signs","bsign-list","p:basis-list","sicmutils.generic/*","sicmutils.util.permute.permutation_parity","cljs.core.concat"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.calculus.hodge-star\n  (:refer-clojure :exclude [+ - * /])\n  (:require [sicmutils.calculus.basis :as b]\n            [sicmutils.calculus.form-field :as ff]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g :refer [+ - * /]]\n            [sicmutils.matrix :as matrix]\n            [sicmutils.structure :as s]\n            [sicmutils.util.permute :as permute]))\n\n;; ## Hodge-star dual\n;;\n;; This namespace holds functions from hodge-star.scm and gram-schmidt.scm in\n;; scmutils.\n;;\n;; ## Gram-Schmidt orthonormalization process\n\n(defn Gram-Schmidt [vector-basis metric]\n  (letfn [(make-positive [x]\n            (g/sqrt (g/square x)))\n          (normalize [v]\n            (* (/ 1 (g/sqrt (make-positive (metric v v))))\n               v))]\n    (let [vects (flatten vector-basis)\n          e0    (normalize (first vects))]\n      (loop [ins (rest vects)\n             outs [e0]]\n        (if (empty? ins)\n          (s/down* outs)\n          (recur (rest ins)\n                 (conj outs\n                       (normalize\n                        (- (first ins)\n                           (apply + (map (fn [outv]\n                                           (* (metric (first ins) outv)\n                                              outv))\n                                         outs)))))))))))\n\n(defn orthonormalize [basis metric coordinate-system]\n  (let [ovb (Gram-Schmidt (b/basis->vector-basis basis) metric)]\n    (b/make-basis ovb (b/vector-basis->dual ovb coordinate-system))))\n\n(defn- list-difference\n  \"Returns a new list containing all elements in `l1` not present in `l2`.\n  Duplicates are allowed in the return value.\"\n  [l1 l2]\n  (remove (into #{} l2) l1))\n\n(defn Hodge-star\n  \"Takes a `metric` and a `spec` and returns the [Hodge star\n  operator](https://en.wikipedia.org/wiki/Hodge_star_operator) (actually just a\n  function, but I suspect this should be a proper operator!)\n\n  `spec` may be:\n\n  - a coordinate system with an orthonormal basis\n  - an orthonormal basis\n  - a basis\n\n  if the spec is a basis that needs to be orthonormalized, the optional\n  `:orthonormalize?` keyword argument must be a coordinate system.\"\n  [metric spec & {:keys [orthonormalize?]\n                  :or {orthonormalize? false}}]\n  (let [basis (if (b/basis? spec)\n                (if orthonormalize?\n                  ;; orthonormalize? must be a coordinate system...\n                  (orthonormalize spec metric orthonormalize?)\n                  spec)\n                ;; spec must be a coordinate system if it's not a basis.\n                (if orthonormalize?\n                  (orthonormalize (b/coordinate-system->basis spec)\n                                  metric\n                                  spec)\n                  (b/coordinate-system->basis spec)))\n        on-vector-basis  (flatten (b/basis->vector-basis basis))\n        on-oneform-basis (flatten (b/basis->oneform-basis basis))\n        basis-check (matrix/by-rows*\n                     (map (fn [ei]\n                            (map (fn [ej]\n                                   (metric ei ej))\n                                 on-vector-basis))\n                          on-vector-basis))\n        bsigns (matrix/diagonal basis-check)]\n    (fn the-star [pform-field]\n      (assert (or (f/function? pform-field)\n                  (ff/form-field? pform-field)))\n      (let [p (ff/get-rank pform-field)]\n        (if (zero? p)\n          (* pform-field (apply ff/wedge on-oneform-basis))\n          (let [pvect-basis-lists (permute/combinations on-vector-basis p)\n                coeffs (map (fn [pvect]\n                              (apply pform-field pvect))\n                            pvect-basis-lists)\n                pform-basis-lists (permute/combinations on-oneform-basis p)\n                n-p:form-basis-lists (map (fn [onefbl]\n                                            (list-difference on-oneform-basis onefbl))\n                                          pform-basis-lists)\n                n-p:basis (map (fn [n-p:basis-list]\n                                 (apply ff/wedge n-p:basis-list))\n                               n-p:form-basis-lists)\n                signs (map (fn [bsign-list p:basis-list n-p:basis-list]\n                             (* (apply * bsign-list)\n                                (permute/permutation-parity\n                                 (concat p:basis-list n-p:basis-list)\n                                 on-oneform-basis)))\n                           (permute/combinations bsigns p)\n                           pform-basis-lists\n                           n-p:form-basis-lists)]\n            (apply + (map * signs coeffs n-p:basis))))))))\n"]}