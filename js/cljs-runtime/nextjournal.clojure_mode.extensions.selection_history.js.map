{"version":3,"sources":["nextjournal/clojure_mode/extensions/selection_history.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.extensions.selection-history/event-annotation","nextjournal.clojure-mode.util/user-event-annotation","nextjournal.clojure-mode.extensions.selection-history/second-last","arr","nextjournal.clojure-mode.extensions.selection-history/ser","selection","cljs.core.js__GT_clj","cljs.core.map","cljs.core.juxt","nextjournal.clojure-mode.extensions.selection-history/something-selected?","p1__89348#","cljs.core/some","cljs.core/not","nextjournal.clojure-mode.extensions.selection-history/selection-history-field","js/module$node_modules$$codemirror$state$dist$index_cjs.StateField","state","cljs.core/List","p__89349","map__89351","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","map__89352","obj89355","js/undefined","obj89358","obj89360","stack","tr","docChanged","previous-position","cljs.core/first","cljs.core.keep_indexed","i","x","nextjournal.clojure-mode.selections/eq?","nextjournal.clojure-mode.util/get-user-event-annotation","vec__89364","seq__89365","cljs.core/seq","first__89366","cljs.core/next","f","more","cljs.core.drop","cljs.core/cons","cljs.core.assoc","nextjournal.clojure-mode.extensions.selection-history/extension","nextjournal.clojure-mode.extensions.selection-history/stack","nextjournal.clojure-mode.extensions.selection-history/grow-1","start","end","node","nextjournal.clojure-mode.node/nearest-touching","nextjournal.clojure-mode.node/ancestors","cljs.core.mapcat","nextjournal.clojure-mode.node/inner-span","cljs.core/identity","cljs.core.filter","p__89377","map__89378","obj89382","obj89385","a-start","a-end","nextjournal.clojure-mode.extensions.selection-history/selection-grow*","nextjournal.clojure_mode.util.update_ranges","p__89399","map__89400","obj89409","obj89412","obj89414","range","from","to","empty","or__4253__auto__","G__89415","nextjournal.clojure_mode.node.balanced_range","G__89420","nextjournal.clojure-mode.node/range","nextjournal.clojure-mode.extensions.selection-history/selection-return*","temp__5751__auto__","cljs.core/second"],"sourcesContent":["(ns nextjournal.clojure-mode.extensions.selection-history\n  (:require [\"@codemirror/state\" :refer [Facet Extension EditorSelection StateField]]\n            [applied-science.js-interop :as j]\n            [nextjournal.clojure-mode.util :as u]\n            [nextjournal.clojure-mode.selections :as sel]\n            [nextjournal.clojure-mode.node :as n]))\n\n(def event-annotation (u/user-event-annotation \"selectionhistory\"))\n\n(defn second-last [^js arr]\n  (when (> (.-length arr) 1)\n    (aget arr (dec (.-length arr)))))\n\n(defn ser [selection]\n  (-> (.toJSON ^js selection)\n      (js->clj :keywordize-keys true)\n      :ranges\n      (->> (map (juxt :anchor :head)))))\n\n(defn something-selected? [^js selection]\n  (-> selection .-ranges (->> (some #(not (.-empty ^js %))))))\n\n(def selection-history-field\n  \"Stores selection history\"\n  (.define StateField\n           #js{:create (fn [^js state] (list {:selection (.-selection state)}))\n               :update\n                       (j/fn [stack ^:js {:as tr {:keys [selection]} :state :keys [docChanged]}]\n                         (let [previous-position\n                               (first (keep-indexed (fn [i x]\n                                                      (when (sel/eq? (:selection x) selection)\n                                                        i)) stack))]\n                           (cond\n\n                             ;; doc changed => clear log\n                             docChanged (list {:selection selection\n                                               :event     (u/get-user-event-annotation tr)})\n\n                             ;; no selection => clear stack to current position\n                             (not (something-selected? selection))\n                             (list {:selection selection\n                                    :event     (u/get-user-event-annotation tr)})\n\n                             ;; selection found in stack => move there\n                             previous-position\n                             (let [[f & more] (drop previous-position stack)]\n                               (cons (assoc f :prev-event (:event (first stack))) more))\n\n                             ;; transaction has selection => add to log\n                             :else\n                             (cons {:selection selection\n                                    :event     (u/get-user-event-annotation tr)}\n                                   stack))))}))\n\n(defn extension [] selection-history-field)\n\n(defn stack [^js state]\n  (.field state selection-history-field))\n\n(j/defn grow-1 [state start end]\n  (let [node (n/nearest-touching state end -1)]\n    (->> (n/ancestors node)\n         (mapcat (juxt n/inner-span identity))              ;; include inner-spans\n         (cons node)\n         (filter (j/fn [^:js {a-start :from a-end :to}]\n                   (and (<= a-start start)\n                        (>= a-end end)\n                        (not (and (== a-start start)\n                                  (== a-end end))))))\n         first)))\n\n(defn selection-grow* [^js state]\n  (u/update-ranges state\n                   #js{:annotations event-annotation}\n                   (j/fn [^:js {:as range :keys [from to empty]}]\n                     (if empty\n                       {:range (or (some->> (n/nearest-touching state from -1)\n                                            (n/balanced-range state))\n                                   range)}\n                       {:range (or (some->> (grow-1 state from to)\n                                            n/range)\n                                   range)}))))\n\n(defn selection-return* [^js state]\n  (if-let [selection (:selection (second (stack state)))]\n    (.update state #js{:selection   selection\n                       :annotations event-annotation})\n    (u/update-ranges state\n                     #js{:annotations event-annotation}\n                     (fn [^js range] {:cursor (.-from range)}))))\n"]}