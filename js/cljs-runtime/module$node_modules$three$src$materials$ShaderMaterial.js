shadow$provide.module$node_modules$three$src$materials$ShaderMaterial=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.ShaderMaterial=void 0;global=require("module$node_modules$three$src$materials$Material");var _UniformsUtils=require("module$node_modules$three$src$renderers$shaders$UniformsUtils"),_default_vertexGlsl=_interopRequireDefault(require("module$node_modules$three$src$renderers$shaders$ShaderChunk$default_vertex_glsl")),
_default_fragmentGlsl=_interopRequireDefault(require("module$node_modules$three$src$renderers$shaders$ShaderChunk$default_fragment_glsl"));class ShaderMaterial extends global.Material{constructor(parameters){super();this.type="ShaderMaterial";this.defines={};this.uniforms={};this.vertexShader=_default_vertexGlsl.default;this.fragmentShader=_default_fragmentGlsl.default;this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.clipping=this.lights=this.fog=!1;this.extensions={derivatives:!1,
fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;this.uniformsNeedUpdate=!1;this.glslVersion=null;void 0!==parameters&&(void 0!==parameters.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(parameters))}copy(source){super.copy(source);this.fragmentShader=source.fragmentShader;this.vertexShader=source.vertexShader;this.uniforms=
(0,_UniformsUtils.cloneUniforms)(source.uniforms);this.defines=Object.assign({},source.defines);this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.lights=source.lights;this.clipping=source.clipping;this.extensions=Object.assign({},source.extensions);this.glslVersion=source.glslVersion;return this}toJSON(meta){const data=super.toJSON(meta);data.glslVersion=this.glslVersion;data.uniforms={};for(const name in this.uniforms){const value=this.uniforms[name].value;data.uniforms[name]=
value&&value.isTexture?{type:"t",value:value.toJSON(meta).uuid}:value&&value.isColor?{type:"c",value:value.getHex()}:value&&value.isVector2?{type:"v2",value:value.toArray()}:value&&value.isVector3?{type:"v3",value:value.toArray()}:value&&value.isVector4?{type:"v4",value:value.toArray()}:value&&value.isMatrix3?{type:"m3",value:value.toArray()}:value&&value.isMatrix4?{type:"m4",value:value.toArray()}:{value}}0<Object.keys(this.defines).length&&(data.defines=this.defines);data.vertexShader=this.vertexShader;
data.fragmentShader=this.fragmentShader;meta={};for(const key in this.extensions)!0===this.extensions[key]&&(meta[key]=!0);0<Object.keys(meta).length&&(data.extensions=meta);return data}}exports.ShaderMaterial=ShaderMaterial;ShaderMaterial.prototype.isShaderMaterial=!0}
//# sourceMappingURL=module$node_modules$three$src$materials$ShaderMaterial.js.map
