shadow$provide.module$node_modules$three$src$renderers$shaders$ShaderChunk$lights_fragment_maps_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;exports.default="\n#if defined( RE_IndirectDiffuse )\n\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel \x3d texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance \x3d lightMapTexel.rgb * lightMapIntensity;\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tlightMapIrradiance *\x3d PI;\n\n\t\t#endif\n\n\t\tirradiance +\x3d lightMapIrradiance;\n\n\t#endif\n\n\t#if defined( USE_ENVMAP ) \x26\x26 defined( STANDARD ) \x26\x26 defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tiblIrradiance +\x3d getIBLIrradiance( geometry.normal );\n\n\t#endif\n\n#endif\n\n#if defined( USE_ENVMAP ) \x26\x26 defined( RE_IndirectSpecular )\n\n\tradiance +\x3d getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tclearcoatRadiance +\x3d getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\n\t#endif\n\n#endif\n"}
//# sourceMappingURL=module$node_modules$three$src$renderers$shaders$ShaderChunk$lights_fragment_maps_glsl.js.map
