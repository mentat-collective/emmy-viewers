shadow$provide.module$node_modules$three$src$renderers$webgl$WebGLProgram=function(global,require,module,exports){function getShaderErrors(gl,shader,type){const status=gl.getShaderParameter(shader,gl.COMPILE_STATUS),errors=gl.getShaderInfoLog(shader).trim();if(status&&""===errors)return"";type=type.toUpperCase()+"\n\n"+errors+"\n\n";gl=gl.getShaderSource(shader).split("\n");for(shader=0;shader<gl.length;shader++)gl[shader]=shader+1+": "+gl[shader];gl=gl.join("\n");return type+gl}function getTexelEncodingFunction(functionName,
encoding){a:switch(encoding){case _constants.LinearEncoding:encoding=["Linear","( value )"];break a;case _constants.sRGBEncoding:encoding=["sRGB","( value )"];break a;default:console.warn("THREE.WebGLProgram: Unsupported encoding:",encoding),encoding=["Linear","( value )"]}return"vec4 "+functionName+"( vec4 value ) { return LinearTo"+encoding[0]+encoding[1]+"; }"}function getToneMappingFunction(functionName,toneMapping){switch(toneMapping){case _constants.LinearToneMapping:toneMapping="Linear";break;
case _constants.ReinhardToneMapping:toneMapping="Reinhard";break;case _constants.CineonToneMapping:toneMapping="OptimizedCineon";break;case _constants.ACESFilmicToneMapping:toneMapping="ACESFilmic";break;case _constants.CustomToneMapping:toneMapping="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",toneMapping),toneMapping="Linear"}return"vec3 "+functionName+"( vec3 color ) { return "+toneMapping+"ToneMapping( color ); }"}function generateDefines(defines){const chunks=
[];for(const name in defines){const value=defines[name];!1!==value&&chunks.push("#define "+name+" "+value)}return chunks.join("\n")}function filterEmptyLine(string){return""!==string}function replaceLightNums(string,parameters){return string.replace(/NUM_DIR_LIGHTS/g,parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g,parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g,parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,
parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,parameters.numPointLightShadows)}function replaceClippingPlaneNums(string,parameters){return string.replace(/NUM_CLIPPING_PLANES/g,parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,parameters.numClippingPlanes-parameters.numClipIntersection)}function includeReplacer(match,include){match=_ShaderChunk.ShaderChunk[include];if(void 0===match)throw Error("Can not resolve #include \x3c"+
include+"\x3e");return match.replace(includePattern,includeReplacer)}function deprecatedLoopReplacer(match,start,end,snippet){console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");return loopReplacer(match,start,end,snippet)}function loopReplacer(match,start,end,snippet){match="";for(start=parseInt(start);start<parseInt(end);start++)match+=snippet.replace(/\[\s*i\s*\]/g,"[ "+start+" ]").replace(/UNROLLED_LOOP_INDEX/g,start);
return match}function generatePrecision(parameters){let precisionstring="precision "+parameters.precision+" float;\nprecision "+parameters.precision+" int;";"highp"===parameters.precision?precisionstring+="\n#define HIGH_PRECISION":"mediump"===parameters.precision?precisionstring+="\n#define MEDIUM_PRECISION":"lowp"===parameters.precision&&(precisionstring+="\n#define LOW_PRECISION");return precisionstring}function generateShadowMapTypeDefine(parameters){let shadowMapTypeDefine="SHADOWMAP_TYPE_BASIC";
parameters.shadowMapType===_constants.PCFShadowMap?shadowMapTypeDefine="SHADOWMAP_TYPE_PCF":parameters.shadowMapType===_constants.PCFSoftShadowMap?shadowMapTypeDefine="SHADOWMAP_TYPE_PCF_SOFT":parameters.shadowMapType===_constants.VSMShadowMap&&(shadowMapTypeDefine="SHADOWMAP_TYPE_VSM");return shadowMapTypeDefine}function generateEnvMapTypeDefine(parameters){let envMapTypeDefine="ENVMAP_TYPE_CUBE";if(parameters.envMap)switch(parameters.envMapMode){case _constants.CubeReflectionMapping:case _constants.CubeRefractionMapping:envMapTypeDefine=
"ENVMAP_TYPE_CUBE";break;case _constants.CubeUVReflectionMapping:case _constants.CubeUVRefractionMapping:envMapTypeDefine="ENVMAP_TYPE_CUBE_UV"}return envMapTypeDefine}function generateEnvMapModeDefine(parameters){let envMapModeDefine="ENVMAP_MODE_REFLECTION";if(parameters.envMap)switch(parameters.envMapMode){case _constants.CubeRefractionMapping:case _constants.CubeUVRefractionMapping:envMapModeDefine="ENVMAP_MODE_REFRACTION"}return envMapModeDefine}function generateEnvMapBlendingDefine(parameters){let envMapBlendingDefine=
"ENVMAP_BLENDING_NONE";if(parameters.envMap)switch(parameters.combine){case _constants.MultiplyOperation:envMapBlendingDefine="ENVMAP_BLENDING_MULTIPLY";break;case _constants.MixOperation:envMapBlendingDefine="ENVMAP_BLENDING_MIX";break;case _constants.AddOperation:envMapBlendingDefine="ENVMAP_BLENDING_ADD"}return envMapBlendingDefine}Object.defineProperty(exports,"__esModule",{value:!0});exports.WebGLProgram=function(renderer,cacheKey,parameters,bindingStates){const gl=renderer.getContext();var defines=
parameters.defines,vertexShader=parameters.vertexShader,fragmentShader=parameters.fragmentShader,shadowMapTypeDefine=generateShadowMapTypeDefine(parameters),envMapTypeDefine=generateEnvMapTypeDefine(parameters),envMapModeDefine=generateEnvMapModeDefine(parameters),envMapBlendingDefine=generateEnvMapBlendingDefine(parameters),customExtensions=parameters.isWebGL2?"":[parameters.extensionDerivatives||parameters.envMapCubeUV||parameters.bumpMap||parameters.tangentSpaceNormalMap||parameters.clearcoatNormalMap||
parameters.flatShading||"physical"===parameters.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(parameters.extensionFragDepth||parameters.logarithmicDepthBuffer)&&parameters.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",parameters.extensionDrawBuffers&&parameters.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(parameters.extensionShaderTextureLOD||parameters.envMap||parameters.transmission)&&parameters.rendererExtensionShaderTextureLod?
"#extension GL_EXT_shader_texture_lod : enable":""].filter(filterEmptyLine).join("\n"),customDefines=generateDefines(defines);const program=gl.createProgram();var versionString=parameters.glslVersion?"#version "+parameters.glslVersion+"\n":"";parameters.isRawShaderMaterial?(defines=[customDefines].filter(filterEmptyLine).join("\n"),0<defines.length&&(defines+="\n"),shadowMapTypeDefine=[customExtensions,customDefines].filter(filterEmptyLine).join("\n"),0<shadowMapTypeDefine.length&&(shadowMapTypeDefine+=
"\n")):(defines=[generatePrecision(parameters),"#define SHADER_NAME "+parameters.shaderName,customDefines,parameters.instancing?"#define USE_INSTANCING":"",parameters.instancingColor?"#define USE_INSTANCING_COLOR":"",parameters.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define MAX_BONES "+parameters.maxBones,parameters.useFog&&parameters.fog?"#define USE_FOG":"",parameters.useFog&&parameters.fogExp2?"#define FOG_EXP2":"",parameters.map?"#define USE_MAP":"",parameters.envMap?"#define USE_ENVMAP":
"",parameters.envMap?"#define "+envMapModeDefine:"",parameters.lightMap?"#define USE_LIGHTMAP":"",parameters.aoMap?"#define USE_AOMAP":"",parameters.emissiveMap?"#define USE_EMISSIVEMAP":"",parameters.bumpMap?"#define USE_BUMPMAP":"",parameters.normalMap?"#define USE_NORMALMAP":"",parameters.normalMap&&parameters.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",parameters.normalMap&&parameters.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",parameters.clearcoatMap?"#define USE_CLEARCOATMAP":
"",parameters.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",parameters.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",parameters.displacementMap&&parameters.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",parameters.specularMap?"#define USE_SPECULARMAP":"",parameters.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",parameters.specularColorMap?"#define USE_SPECULARCOLORMAP":"",parameters.roughnessMap?"#define USE_ROUGHNESSMAP":"",parameters.metalnessMap?"#define USE_METALNESSMAP":
"",parameters.alphaMap?"#define USE_ALPHAMAP":"",parameters.transmission?"#define USE_TRANSMISSION":"",parameters.transmissionMap?"#define USE_TRANSMISSIONMAP":"",parameters.thicknessMap?"#define USE_THICKNESSMAP":"",parameters.sheenColorMap?"#define USE_SHEENCOLORMAP":"",parameters.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",parameters.vertexTangents?"#define USE_TANGENT":"",parameters.vertexColors?"#define USE_COLOR":"",parameters.vertexAlphas?"#define USE_COLOR_ALPHA":"",parameters.vertexUvs?
"#define USE_UV":"",parameters.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",parameters.flatShading?"#define FLAT_SHADED":"",parameters.skinning?"#define USE_SKINNING":"",parameters.useVertexTexture?"#define BONE_TEXTURE":"",parameters.morphTargets?"#define USE_MORPHTARGETS":"",parameters.morphNormals&&!1===parameters.flatShading?"#define USE_MORPHNORMALS":"",parameters.morphTargets&&parameters.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",parameters.morphTargets&&parameters.isWebGL2?"#define MORPHTARGETS_COUNT "+
parameters.morphTargetsCount:"",parameters.doubleSided?"#define DOUBLE_SIDED":"",parameters.flipSided?"#define FLIP_SIDED":"",parameters.shadowMapEnabled?"#define USE_SHADOWMAP":"",parameters.shadowMapEnabled?"#define "+shadowMapTypeDefine:"",parameters.sizeAttenuation?"#define USE_SIZEATTENUATION":"",parameters.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;",
"uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )",
"\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) \x26\x26 ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;",
"\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n"),shadowMapTypeDefine=[customExtensions,generatePrecision(parameters),"#define SHADER_NAME "+parameters.shaderName,customDefines,parameters.useFog&&parameters.fog?"#define USE_FOG":"",parameters.useFog&&parameters.fogExp2?"#define FOG_EXP2":"",parameters.map?"#define USE_MAP":"",parameters.matcap?"#define USE_MATCAP":
"",parameters.envMap?"#define USE_ENVMAP":"",parameters.envMap?"#define "+envMapTypeDefine:"",parameters.envMap?"#define "+envMapModeDefine:"",parameters.envMap?"#define "+envMapBlendingDefine:"",parameters.lightMap?"#define USE_LIGHTMAP":"",parameters.aoMap?"#define USE_AOMAP":"",parameters.emissiveMap?"#define USE_EMISSIVEMAP":"",parameters.bumpMap?"#define USE_BUMPMAP":"",parameters.normalMap?"#define USE_NORMALMAP":"",parameters.normalMap&&parameters.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":
"",parameters.normalMap&&parameters.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",parameters.clearcoat?"#define USE_CLEARCOAT":"",parameters.clearcoatMap?"#define USE_CLEARCOATMAP":"",parameters.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",parameters.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",parameters.specularMap?"#define USE_SPECULARMAP":"",parameters.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",parameters.specularColorMap?"#define USE_SPECULARCOLORMAP":
"",parameters.roughnessMap?"#define USE_ROUGHNESSMAP":"",parameters.metalnessMap?"#define USE_METALNESSMAP":"",parameters.alphaMap?"#define USE_ALPHAMAP":"",parameters.alphaTest?"#define USE_ALPHATEST":"",parameters.sheen?"#define USE_SHEEN":"",parameters.sheenColorMap?"#define USE_SHEENCOLORMAP":"",parameters.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",parameters.transmission?"#define USE_TRANSMISSION":"",parameters.transmissionMap?"#define USE_TRANSMISSIONMAP":"",parameters.thicknessMap?
"#define USE_THICKNESSMAP":"",parameters.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",parameters.vertexTangents?"#define USE_TANGENT":"",parameters.vertexColors||parameters.instancingColor?"#define USE_COLOR":"",parameters.vertexAlphas?"#define USE_COLOR_ALPHA":"",parameters.vertexUvs?"#define USE_UV":"",parameters.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",parameters.gradientMap?"#define USE_GRADIENTMAP":"",parameters.flatShading?"#define FLAT_SHADED":"",parameters.doubleSided?"#define DOUBLE_SIDED":
"",parameters.flipSided?"#define FLIP_SIDED":"",parameters.shadowMapEnabled?"#define USE_SHADOWMAP":"",parameters.shadowMapEnabled?"#define "+shadowMapTypeDefine:"",parameters.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",parameters.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",parameters.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(parameters.extensionShaderTextureLOD||
parameters.envMap)&&parameters.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",parameters.toneMapping!==_constants.NoToneMapping?"#define TONE_MAPPING":"",parameters.toneMapping!==_constants.NoToneMapping?_ShaderChunk.ShaderChunk.tonemapping_pars_fragment:"",parameters.toneMapping!==_constants.NoToneMapping?getToneMappingFunction("toneMapping",parameters.toneMapping):"",parameters.dithering?"#define DITHERING":
"",parameters.transparent?"":"#define OPAQUE",_ShaderChunk.ShaderChunk.encodings_pars_fragment,getTexelEncodingFunction("linearToOutputTexel",parameters.outputEncoding),parameters.depthPacking?"#define DEPTH_PACKING "+parameters.depthPacking:"","\n"].filter(filterEmptyLine).join("\n"));vertexShader=vertexShader.replace(includePattern,includeReplacer);vertexShader=replaceLightNums(vertexShader,parameters);vertexShader=replaceClippingPlaneNums(vertexShader,parameters);fragmentShader=fragmentShader.replace(includePattern,
includeReplacer);fragmentShader=replaceLightNums(fragmentShader,parameters);fragmentShader=replaceClippingPlaneNums(fragmentShader,parameters);vertexShader=vertexShader.replace(unrollLoopPattern,loopReplacer).replace(deprecatedUnrollLoopPattern,deprecatedLoopReplacer);fragmentShader=fragmentShader.replace(unrollLoopPattern,loopReplacer).replace(deprecatedUnrollLoopPattern,deprecatedLoopReplacer);parameters.isWebGL2&&!0!==parameters.isRawShaderMaterial&&(versionString="#version 300 es\n",defines="precision mediump sampler2DArray;\n#define attribute in\n#define varying out\n#define texture2D texture\n"+
defines,shadowMapTypeDefine=["#define varying in",parameters.glslVersion===_constants.GLSL3?"":"layout(location \x3d 0) out highp vec4 pc_fragColor;",parameters.glslVersion===_constants.GLSL3?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad"].join("\n")+
"\n"+shadowMapTypeDefine);fragmentShader=versionString+shadowMapTypeDefine+fragmentShader;vertexShader=(0,_WebGLShader.WebGLShader)(gl,gl.VERTEX_SHADER,versionString+defines+vertexShader);fragmentShader=(0,_WebGLShader.WebGLShader)(gl,gl.FRAGMENT_SHADER,fragmentShader);gl.attachShader(program,vertexShader);gl.attachShader(program,fragmentShader);void 0!==parameters.index0AttributeName?gl.bindAttribLocation(program,0,parameters.index0AttributeName):!0===parameters.morphTargets&&gl.bindAttribLocation(program,
0,"position");gl.linkProgram(program);if(renderer.debug.checkShaderErrors){renderer=gl.getProgramInfoLog(program).trim();versionString=gl.getShaderInfoLog(vertexShader).trim();envMapTypeDefine=gl.getShaderInfoLog(fragmentShader).trim();envMapBlendingDefine=envMapModeDefine=!0;if(!1===gl.getProgramParameter(program,gl.LINK_STATUS))envMapModeDefine=!1,customExtensions=getShaderErrors(gl,vertexShader,"vertex"),customDefines=getShaderErrors(gl,fragmentShader,"fragment"),console.error("THREE.WebGLProgram: Shader Error "+
gl.getError()+" - VALIDATE_STATUS "+gl.getProgramParameter(program,gl.VALIDATE_STATUS)+"\n\nProgram Info Log: "+renderer+"\n"+customExtensions+"\n"+customDefines);else if(""!==renderer)console.warn("THREE.WebGLProgram: Program Info Log:",renderer);else if(""===versionString||""===envMapTypeDefine)envMapBlendingDefine=!1;envMapBlendingDefine&&(this.diagnostics={runnable:envMapModeDefine,programLog:renderer,vertexShader:{log:versionString,prefix:defines},fragmentShader:{log:envMapTypeDefine,prefix:shadowMapTypeDefine}})}gl.deleteShader(vertexShader);
gl.deleteShader(fragmentShader);let cachedUniforms;this.getUniforms=function(){void 0===cachedUniforms&&(cachedUniforms=new _WebGLUniforms.WebGLUniforms(gl,program));return cachedUniforms};let cachedAttributes;this.getAttributes=function(){if(void 0===cachedAttributes){const attributes={},n=gl.getProgramParameter(program,gl.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const info=gl.getActiveAttrib(program,i),name=info.name;let locationSize=1;info.type===gl.FLOAT_MAT2&&(locationSize=2);info.type===gl.FLOAT_MAT3&&
(locationSize=3);info.type===gl.FLOAT_MAT4&&(locationSize=4);attributes[name]={type:info.type,location:gl.getAttribLocation(program,name),locationSize}}cachedAttributes=attributes}return cachedAttributes};this.destroy=function(){bindingStates.releaseStatesOfProgram(this);gl.deleteProgram(program);this.program=void 0};this.name=parameters.shaderName;this.id=programIdCount++;this.cacheKey=cacheKey;this.usedTimes=1;this.program=program;this.vertexShader=vertexShader;this.fragmentShader=fragmentShader;
return this};var _WebGLUniforms=require("module$node_modules$three$src$renderers$webgl$WebGLUniforms"),_WebGLShader=require("module$node_modules$three$src$renderers$webgl$WebGLShader"),_ShaderChunk=require("module$node_modules$three$src$renderers$shaders$ShaderChunk"),_constants=require("module$node_modules$three$src$constants");let programIdCount=0;const includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm,deprecatedUnrollLoopPattern=/#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g}
//# sourceMappingURL=module$node_modules$three$src$renderers$webgl$WebGLProgram.js.map
