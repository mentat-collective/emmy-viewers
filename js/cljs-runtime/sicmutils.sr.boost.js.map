{"version":3,"sources":["sicmutils/sr/boost.cljc"],"mappings":";AASA,qCAAA,gDAAAA,rFAAMG,kFAAiBC;AAAvB,AAAA,IAAAH,cAAAD;QAAA,AAAAE,4CAAAD,YAAA,IAAA,hEAA2BI;QAA3B,AAAAH,4CAAAD,YAAA,IAAA,hEAA6BK;QAA7B,AAAAJ,4CAAAD,YAAA,IAAA,hEAA+BM;AAA/B,AACE,OAACC,8GAAGJ,GAAGC,EAAEC,EAAEC;;AAEb,uCAAA,+CAAAE,tFAAME;AAAN,AAAA,IAAAD,cAAAD;SAAA,AAAAP,4CAAAQ,YAAA,IAAA,jEAAuBN;AAAvB,AAA4BA;;AAE5B,0CAAA,kDAAAQ,5FAAME;AAAN,AAAA,IAAAD,cAAAD;QAAA,AAAAV,4CAAAW,YAAA,IAAA,hEAA0BE;QAA1B,AAAAb,4CAAAW,YAAA,IAAA,hEAA4BR;QAA5B,AAAAH,4CAAAW,YAAA,IAAA,hEAA8BP;QAA9B,AAAAJ,4CAAAW,YAAA,IAAA,hEAAgCN;AAAhC,AACE,OAACC,8GAAGH,EAAEC,EAAEC;;AAEV,0CAAA,1CAAMS,4FAAsBC;AAA5B,AACE,OAACC,qDACA,AAACC,kDAAE,AAACC,uDAAS,AAACT,qCAAeM,aAC1B,AAACG,uDAAS,AAACN,wCAAkBG;;AAEnC,2CAAA,3CAAMI,8FAAuBJ;AAA7B,AACE,OAACC,qDACA,AAACC,kDAAE,AAACC,uDAAS,AAACN,wCAAkBG,aAC7B,AAACG,uDAAS,AAACT,qCAAeM;;AAEhC,mCAAA,nCAAMK,8EAAeC;AAArB,AACE,kBAAKC;AAAL,AACE,IAAMC,QAAM,AAAAC,wDAAA,IAAK,AAACR,qDAAO,kDAAA,lDAACC,sDAAI,AAACC,uDAASG;IAClCI,SAAO,AAAAD,wDAAG,uDAAA,vDAACE,4DAAKH,OACN,AAACL,uDAASG;IACpBM,YAAW,AAAClB,qCAAea;IAC3BM,aAAW,AAAChB,wCAAkBU;IAC9BO,gBAAc,AAACC,4DAAcT,KAAKO;AALxC,AAME,OAAC3B,mCACA,AAAC8B,uDAAER,MAAM,AAACG,uDAAEC,UAAUE,gBACtB,AAACH,8DAAE,AAACK,8DAAER,MAAMF,uDAAKM,gBACdC,6DACA,AAACG,8DAAEN,OAAOJ,uDAAKQ;;;AASzB;;;;oCAAA,pCAAMG,gFAGHC,UAAUC;AAHb,AAIE,kBAAKC;AAAL,AACE,IAAMC,iBAAe,AAAC3B,qCAAe0B;IAC/BE,gBAAc,AAACzB,wCAAkBuB;IACjCG,SAAO,AAACpB,uDAASgB;IACjBK,KAAG,AAACT,4DAAcG,UAAUI;IAC5Bd,QAAM,AAAAC,wDAAA,IAAK,AAACR,qDAAO,kDAAA,lDAACC,sDAAIqB;IACxBE,QAAM,wDAAA,xDAACvB,kDAAEM;IACTkB,WAAS,AAACV,uDAAER,MAAM,AAACG,uDAAEU,eAAe,AAACL,uDAAEQ,GAAGL;IAC1CQ,UAAQ,AAAChB,8DAAE,AAACK,8DAAER,MAAMW,4DAAID,UAAUG,qBACvBC,gEACA,AAACN,8DAAES,MAAMP,4DAAUM;AATpC,AAUE,OAACtC,mCAAgBwC,SAASC;;;AAOhC,uCAAA,vCAAMC,sFAAmBC;AAAzB,AACE,kBAAKtB;AAAL,AACE,OAACrB,mCACA,AAACQ,qCAAea,MAChB,iBAAAuB,YAAG,AAACjC,wCAAkBU;AAAtB,AAAA,0EAAAuB,yBAAAA,3FAACD,kCAAAA,6CAAAA","names":["p__103388","vec__103389","cljs.core.nth","sicmutils.sr.boost/make-four-tuple","ct","x","y","z","sicmutils.structure.up","p__103392","vec__103393","sicmutils.sr.boost/four-tuple->ct","p__103397","vec__103398","sicmutils.sr.boost/four-tuple->space","_","sicmutils.sr.boost/proper-time-interval","four-tuple","sicmutils.generic/sqrt","sicmutils.generic._","sicmutils.generic/square","sicmutils.sr.boost/proper-space-interval","sicmutils.sr.boost/general-boost","beta","xi-p","gamma","sicmutils.generic._SLASH_","factor","sicmutils.generic._PLUS_","xi-p-time","xi-p-space","beta-dot-xi-p","sicmutils.generic/dot-product","sicmutils.generic._STAR_","sicmutils.sr.boost/general-boost2","direction","v:c","four-tuple-prime","delta-ct-prime","delta-x-prime","betasq","bx","alpha","delta-ct","delta-x","sicmutils.sr.boost/extended-rotation","R","G__103405"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.sr.boost\n  (:refer-clojure :exclude [+ - * /])\n  (:require [sicmutils.generic :as g :refer [+ - * /]]\n            [sicmutils.structure :refer [up]]))\n\n;; ## Special Relativity -- Boosts\n\n(defn make-four-tuple [ct [x y z]]\n  (up ct x y z))\n\n(defn four-tuple->ct [[ct]] ct)\n\n(defn four-tuple->space [[_ x y z]]\n  (up x y z))\n\n(defn proper-time-interval [four-tuple]\n  (g/sqrt\n   (- (g/square (four-tuple->ct four-tuple))\n      (g/square (four-tuple->space four-tuple)))))\n\n(defn proper-space-interval [four-tuple]\n  (g/sqrt\n   (- (g/square (four-tuple->space four-tuple))\n      (g/square (four-tuple->ct four-tuple)))))\n\n(defn general-boost [beta]\n  (fn [xi-p]\n    (let [gamma (/ 1 (g/sqrt (- 1 (g/square beta))))\n          factor (/ (+ -1 gamma)\n                    (g/square beta))\n          xi-p-time  (four-tuple->ct xi-p)\n          xi-p-space (four-tuple->space xi-p)\n          beta-dot-xi-p (g/dot-product beta xi-p-space)]\n      (make-four-tuple\n       (* gamma (+ xi-p-time beta-dot-xi-p))\n       (+ (* gamma beta xi-p-time)\n          xi-p-space\n          (* factor beta beta-dot-xi-p))))))\n\n;; It is inconvenient that the general boost as just defined does not work if\n;; $\\bfbeta$ is zero. An alternate way to specify a boost is through the\n;; magnitude of $v/c$ and a direction:\n;;\n;; this one works for zero v:c ... direction is a unit 3-vector, v:c is the\n;; speed, a number.\n\n(defn general-boost2\n  \"Takes a unit 3-vector `direction` (representing a direction) and a velocity\n  `v:c` normalized by `C`.\"\n  [direction v:c]\n  (fn [four-tuple-prime]\n    (let [delta-ct-prime (four-tuple->ct four-tuple-prime)\n          delta-x-prime (four-tuple->space four-tuple-prime)\n          betasq (g/square v:c)\n          bx (g/dot-product direction delta-x-prime)\n          gamma (/ 1 (g/sqrt (- 1 betasq)))\n          alpha (- gamma 1)\n          delta-ct (* gamma (+ delta-ct-prime (* bx v:c)))\n          delta-x (+ (* gamma v:c direction delta-ct-prime)\n                     delta-x-prime\n                     (* alpha direction bx))]\n      (make-four-tuple delta-ct delta-x))))\n\n;; ## extended rotations\n\n;; Boosts are linear functions of incremental vectors. To be parallel we take\n;; rotations to functions as well, rather than as multipliers.\n\n(defn extended-rotation [R]\n  (fn [xi-p]\n    (make-four-tuple\n     (four-tuple->ct xi-p)\n     (R (four-tuple->space xi-p)))))\n"]}