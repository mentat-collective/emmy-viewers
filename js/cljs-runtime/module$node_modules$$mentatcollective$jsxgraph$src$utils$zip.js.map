{
"version":3,
"file":"module$node_modules$$mentatcollective$jsxgraph$src$utils$zip.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/@mentatcollective/jsxgraph/src/utils/zip.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mentatcollective$jsxgraph$src$utils$zip\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jxg = _interopRequireDefault(require(\"../jxg\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n    Copyright 2008-2022\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph and JSXCompressor.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n    JSXCompressor is free software dual licensed under the GNU LGPL or Apache License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n      OR\n      * Apache License Version 2.0\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License, Apache\n    License, and the MIT License along with JSXGraph. If not, see\n    <http://www.gnu.org/licenses/>, <https://www.apache.org/licenses/LICENSE-2.0.html>,\n    and <http://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n\n/*jslint nomen: true, plusplus: true, bitwise: true*/\n\n/**\n * @fileoverview Utilities for uncompressing and base64 decoding\n */\n// Zip routine constants\nvar bitReverse = [0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe, 0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1, 0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9, 0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5, 0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd, 0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3, 0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb, 0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7, 0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff],\n    cplens = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0],\n    cplext = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99]\n/* 99==invalid */\n,\n    cpdist = [0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001],\n    cpdext = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13],\n    border = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],\n    NAMEMAX = 256; // Util namespace\n\n_jxg.default.Util = _jxg.default.Util || {};\n/**\n * @class Unzip class\n * Class for gunzipping, unzipping and base64 decoding of files.\n * It is used for reading GEONExT, Geogebra and Intergeo files.\n *\n * Only Huffman codes are decoded in gunzip.\n * The code is based on the source code for gunzip.c by Pasi Ojala\n * @see http://www.cs.tut.fi/~albert/Dev/gunzip/gunzip.c\n * @see http://www.cs.tut.fi/~albert\n */\n\n_jxg.default.Util.Unzip = function (barray) {\n  var gpflags,\n      crc,\n      SIZE,\n      fileout,\n      flens,\n      fmax,\n      outputArr = [],\n      output = \"\",\n      debug = false,\n      files = 0,\n      unzipped = [],\n      buf32k = new Array(32768),\n      bIdx = 0,\n      modeZIP = false,\n      barraylen = barray.length,\n      bytepos = 0,\n      bitpos = 0,\n      bb = 1,\n      bits = 0,\n      literalTree = new Array(288),\n      distanceTree = new Array(32),\n      treepos = 0,\n      Places = null,\n      Places2 = null,\n      impDistanceTree = new Array(64),\n      impLengthTree = new Array(64),\n      len = 0,\n      fpos = new Array(17),\n      nameBuf = [];\n  fpos[0] = 0;\n\n  function readByte() {\n    bits += 8;\n\n    if (bytepos < barraylen) {\n      return barray[bytepos++];\n    }\n\n    return -1;\n  }\n\n  function byteAlign() {\n    bb = 1;\n  }\n\n  function readBit() {\n    var carry;\n\n    try {\n      // Prevent problems on iOS7 with >>\n      bits++;\n      carry = bb & 1;\n      bb >>= 1;\n\n      if (bb === 0) {\n        bb = readByte();\n        carry = bb & 1;\n        bb = bb >> 1 | 0x80;\n      }\n\n      return carry;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  function readBits(a) {\n    var res = 0,\n        i = a; // Prevent problems on iOS7 with >>\n\n    try {\n      while (i--) {\n        res = res << 1 | readBit();\n      }\n\n      if (a) {\n        res = bitReverse[res] >> 8 - a;\n      }\n    } catch (e) {\n      throw e;\n    }\n\n    return res;\n  }\n\n  function flushBuffer() {\n    bIdx = 0;\n  }\n\n  function addBuffer(a) {\n    SIZE++;\n    buf32k[bIdx++] = a;\n    outputArr.push(String.fromCharCode(a));\n\n    if (bIdx === 0x8000) {\n      bIdx = 0;\n    }\n  }\n\n  function HufNode() {\n    this.b0 = 0;\n    this.b1 = 0;\n    this.jump = null;\n    this.jumppos = -1;\n  }\n\n  function isPat() {\n    while (true) {\n      if (fpos[len] >= fmax) {\n        return -1;\n      }\n\n      if (flens[fpos[len]] === len) {\n        return fpos[len]++;\n      }\n\n      fpos[len]++;\n    }\n  }\n\n  function rec() {\n    var curplace = Places[treepos],\n        tmp;\n\n    if (len === 17) {\n      return -1;\n    }\n\n    treepos++;\n    len++;\n    tmp = isPat();\n\n    if (tmp >= 0) {\n      /* leaf cell for 0-bit */\n      curplace.b0 = tmp;\n    } else {\n      /* Not a Leaf cell */\n      curplace.b0 = 0x8000;\n\n      if (rec()) {\n        return -1;\n      }\n    }\n\n    tmp = isPat();\n\n    if (tmp >= 0) {\n      /* leaf cell for 1-bit */\n      curplace.b1 = tmp;\n      /* Just for the display routine */\n\n      curplace.jump = null;\n    } else {\n      /* Not a Leaf cell */\n      curplace.b1 = 0x8000;\n      curplace.jump = Places[treepos];\n      curplace.jumppos = treepos;\n\n      if (rec()) {\n        return -1;\n      }\n    }\n\n    len--;\n    return 0;\n  }\n\n  function createTree(currentTree, numval, lengths, show) {\n    var i;\n    Places = currentTree;\n    treepos = 0;\n    flens = lengths;\n    fmax = numval;\n\n    for (i = 0; i < 17; i++) {\n      fpos[i] = 0;\n    }\n\n    len = 0;\n\n    if (rec()) {\n      return -1;\n    }\n\n    return 0;\n  }\n\n  function decodeValue(currentTree) {\n    var len,\n        i,\n        b,\n        xtreepos = 0,\n        X = currentTree[xtreepos];\n    /* decode one symbol of the data */\n\n    while (true) {\n      b = readBit();\n\n      if (b) {\n        if (!(X.b1 & 0x8000)) {\n          /* If leaf node, return data */\n          return X.b1;\n        }\n\n        X = X.jump;\n        len = currentTree.length;\n\n        for (i = 0; i < len; i++) {\n          if (currentTree[i] === X) {\n            xtreepos = i;\n            break;\n          }\n        }\n      } else {\n        if (!(X.b0 & 0x8000)) {\n          /* If leaf node, return data */\n          return X.b0;\n        }\n\n        xtreepos++;\n        X = currentTree[xtreepos];\n      }\n    }\n  }\n\n  function deflateLoop() {\n    var last, c, type, i, j, l, ll, ll2, len, blockLen, dist, cSum, n, literalCodes, distCodes, lenCodes, z;\n\n    do {\n      last = readBit();\n      type = readBits(2);\n\n      if (type === 0) {\n        // Stored\n        byteAlign();\n        blockLen = readByte();\n        blockLen |= readByte() << 8;\n        cSum = readByte();\n        cSum |= readByte() << 8;\n\n        if ((blockLen ^ ~cSum) & 0xffff) {\n          _jxg.default.debug(\"BlockLen checksum mismatch\\n\");\n        }\n\n        while (blockLen--) {\n          c = readByte();\n          addBuffer(c);\n        }\n      } else if (type === 1) {\n        /* Fixed Huffman tables -- fixed decode routine */\n        while (true) {\n          /*\n               256    0000000        0\n               :   :     :\n               279    0010111        23\n               0   00110000    48\n               :    :      :\n               143    10111111    191\n               280 11000000    192\n               :    :      :\n               287 11000111    199\n               144    110010000    400\n               :    :       :\n               255    111111111    511\n                Note the bit order!\n               */\n          j = bitReverse[readBits(7)] >> 1;\n\n          if (j > 23) {\n            j = j << 1 | readBit();\n            /* 48..255 */\n\n            if (j > 199) {\n              /* 200..255 */\n              j -= 128;\n              /*  72..127 */\n\n              j = j << 1 | readBit();\n              /* 144..255 << */\n            } else {\n              /*  48..199 */\n              j -= 48;\n              /*   0..151 */\n\n              if (j > 143) {\n                j = j + 136;\n                /* 280..287 << */\n\n                /*   0..143 << */\n              }\n            }\n          } else {\n            /*   0..23 */\n            j += 256;\n            /* 256..279 << */\n          }\n\n          if (j < 256) {\n            addBuffer(j);\n          } else if (j === 256) {\n            /* EOF */\n            break;\n          } else {\n            j -= 256 + 1;\n            /* bytes + EOF */\n\n            len = readBits(cplext[j]) + cplens[j];\n            j = bitReverse[readBits(5)] >> 3;\n\n            if (cpdext[j] > 8) {\n              dist = readBits(8);\n              dist |= readBits(cpdext[j] - 8) << 8;\n            } else {\n              dist = readBits(cpdext[j]);\n            }\n\n            dist += cpdist[j];\n\n            for (j = 0; j < len; j++) {\n              c = buf32k[bIdx - dist & 0x7fff];\n              addBuffer(c);\n            }\n          }\n        } // while\n\n      } else if (type === 2) {\n        // \"static\" just to preserve stack\n        ll = new Array(288 + 32); // Dynamic Huffman tables\n\n        literalCodes = 257 + readBits(5);\n        distCodes = 1 + readBits(5);\n        lenCodes = 4 + readBits(4);\n\n        for (j = 0; j < 19; j++) {\n          ll[j] = 0;\n        } // Get the decode tree code lengths\n\n\n        for (j = 0; j < lenCodes; j++) {\n          ll[border[j]] = readBits(3);\n        }\n\n        len = distanceTree.length;\n\n        for (i = 0; i < len; i++) {\n          distanceTree[i] = new HufNode();\n        }\n\n        if (createTree(distanceTree, 19, ll, 0)) {\n          flushBuffer();\n          return 1;\n        } //read in literal and distance code lengths\n\n\n        n = literalCodes + distCodes;\n        i = 0;\n        z = -1;\n\n        while (i < n) {\n          z++;\n          j = decodeValue(distanceTree); // length of code in bits (0..15)\n\n          if (j < 16) {\n            ll[i++] = j; // repeat last length 3 to 6 times\n          } else if (j === 16) {\n            j = 3 + readBits(2);\n\n            if (i + j > n) {\n              flushBuffer();\n              return 1;\n            }\n\n            l = i ? ll[i - 1] : 0;\n\n            while (j--) {\n              ll[i++] = l;\n            }\n          } else {\n            // 3 to 10 zero length codes\n            if (j === 17) {\n              j = 3 + readBits(3); // j == 18: 11 to 138 zero length codes\n            } else {\n              j = 11 + readBits(7);\n            }\n\n            if (i + j > n) {\n              flushBuffer();\n              return 1;\n            }\n\n            while (j--) {\n              ll[i++] = 0;\n            }\n          }\n        } // Can overwrite tree decode tree as it is not used anymore\n\n\n        len = literalTree.length;\n\n        for (i = 0; i < len; i++) {\n          literalTree[i] = new HufNode();\n        }\n\n        if (createTree(literalTree, literalCodes, ll, 0)) {\n          flushBuffer();\n          return 1;\n        }\n\n        len = literalTree.length;\n\n        for (i = 0; i < len; i++) {\n          distanceTree[i] = new HufNode();\n        }\n\n        ll2 = [];\n\n        for (i = literalCodes; i < ll.length; i++) {\n          ll2[i - literalCodes] = ll[i];\n        }\n\n        if (createTree(distanceTree, distCodes, ll2, 0)) {\n          flushBuffer();\n          return 1;\n        }\n\n        while (true) {\n          j = decodeValue(literalTree); // In C64: if carry set\n\n          if (j >= 256) {\n            j -= 256;\n\n            if (j === 0) {\n              // EOF\n              break;\n            }\n\n            j -= 1;\n            len = readBits(cplext[j]) + cplens[j];\n            j = decodeValue(distanceTree);\n\n            if (cpdext[j] > 8) {\n              dist = readBits(8);\n              dist |= readBits(cpdext[j] - 8) << 8;\n            } else {\n              dist = readBits(cpdext[j]);\n            }\n\n            dist += cpdist[j];\n\n            while (len--) {\n              c = buf32k[bIdx - dist & 0x7fff];\n              addBuffer(c);\n            }\n          } else {\n            addBuffer(j);\n          }\n        }\n      }\n    } while (!last);\n\n    flushBuffer();\n    byteAlign();\n    return 0;\n  }\n  /**\n   * nextFile:\n   * Extract the next file from the compressed archive.\n   * Calls skipdir() to proceed recursively.\n   *\n   * @return {Boolean}  false if the end of files' data section has baseElement\n   * reached. Then, then all recursive functions are stopped immediately.\n   *\n   */\n\n\n  function nextFile() {\n    var i,\n        c,\n        extralen,\n        filelen,\n        size,\n        compSize,\n        crc,\n        method,\n        tmp = []; // Prevent problems on iOS7 with >>\n\n    try {\n      outputArr = [];\n      modeZIP = false;\n      tmp[0] = readByte();\n      tmp[1] = readByte(); //GZIP\n\n      if (tmp[0] === 0x78 && tmp[1] === 0xda) {\n        deflateLoop();\n        unzipped[files] = [outputArr.join(\"\"), \"geonext.gxt\"];\n        files++;\n      } //GZIP\n\n\n      if (tmp[0] === 0x1f && tmp[1] === 0x8b) {\n        skipdir();\n        unzipped[files] = [outputArr.join(\"\"), \"file\"];\n        files++;\n      } //ZIP\n\n\n      if (tmp[0] === 0x50 && tmp[1] === 0x4b) {\n        modeZIP = true;\n        tmp[2] = readByte();\n        tmp[3] = readByte();\n\n        if (tmp[2] === 0x03 && tmp[3] === 0x04) {\n          //MODE_ZIP\n          tmp[0] = readByte();\n          tmp[1] = readByte();\n          gpflags = readByte();\n          gpflags |= readByte() << 8;\n          method = readByte();\n          method |= readByte() << 8;\n          readByte();\n          readByte();\n          readByte();\n          readByte();\n          crc = readByte();\n          crc |= readByte() << 8;\n          crc |= readByte() << 16;\n          crc |= readByte() << 24;\n          compSize = readByte();\n          compSize |= readByte() << 8;\n          compSize |= readByte() << 16;\n          compSize |= readByte() << 24;\n          size = readByte();\n          size |= readByte() << 8;\n          size |= readByte() << 16;\n          size |= readByte() << 24;\n          filelen = readByte();\n          filelen |= readByte() << 8;\n          extralen = readByte();\n          extralen |= readByte() << 8;\n          i = 0;\n          nameBuf = [];\n\n          while (filelen--) {\n            c = readByte();\n\n            if (c === \"/\" | c === \":\") {\n              i = 0;\n            } else if (i < NAMEMAX - 1) {\n              nameBuf[i++] = String.fromCharCode(c);\n            }\n          }\n\n          if (!fileout) {\n            fileout = nameBuf;\n          }\n\n          i = 0;\n\n          while (i < extralen) {\n            c = readByte();\n            i++;\n          }\n\n          SIZE = 0;\n\n          if (method === 8) {\n            deflateLoop();\n            unzipped[files] = new Array(2);\n            unzipped[files][0] = outputArr.join(\"\");\n            unzipped[files][1] = nameBuf.join(\"\");\n            files++;\n          }\n\n          if (skipdir()) {\n            // We are beyond the files' data in the zip archive.\n            // Let's get out immediately...\n            return false;\n          }\n        }\n\n        return true;\n      }\n    } catch (e) {\n      throw e;\n    }\n\n    return false;\n  }\n  /**\n   * Test if the end of the files' data part of the archive has baseElement\n   * reached. If not, uncompressing is resumed.\n   *\n   * @return {Boolean}  true if the end of the files' data sections have\n   * been reached.\n   *\n   * @private\n   */\n\n\n  function skipdir() {\n    var crc,\n        compSize,\n        size,\n        os,\n        i,\n        c,\n        tmp = [];\n\n    if (gpflags & 8) {\n      tmp[0] = readByte();\n      tmp[1] = readByte();\n      tmp[2] = readByte();\n      tmp[3] = readByte(); // signature for data descriptor record: 0x08074b50\n      // 12 bytes:\n      //  crc 4 bytes\n      //  compressed size 4 bytes\n      // uncompressed size 4 bytes\n\n      if (tmp[0] === 0x50 && tmp[1] === 0x4b && tmp[2] === 0x07 && tmp[3] === 0x08) {\n        crc = readByte();\n        crc |= readByte() << 8;\n        crc |= readByte() << 16;\n        crc |= readByte() << 24;\n      } else {\n        crc = tmp[0] | tmp[1] << 8 | tmp[2] << 16 | tmp[3] << 24;\n      }\n\n      compSize = readByte();\n      compSize |= readByte() << 8;\n      compSize |= readByte() << 16;\n      compSize |= readByte() << 24;\n      size = readByte();\n      size |= readByte() << 8;\n      size |= readByte() << 16;\n      size |= readByte() << 24;\n    }\n\n    if (modeZIP) {\n      if (nextFile()) {\n        // A file has been decompressed, we have to proceed\n        return false;\n      }\n    }\n\n    tmp[0] = readByte();\n\n    if (tmp[0] !== 8) {\n      // It seems, we are beyond the files' data in the zip archive.\n      // We'll skip the rest..\n      return true;\n    } // There is another file in the zip file. We proceed...\n\n\n    gpflags = readByte();\n    readByte();\n    readByte();\n    readByte();\n    readByte();\n    readByte();\n    os = readByte();\n\n    if (gpflags & 4) {\n      tmp[0] = readByte();\n      tmp[2] = readByte();\n      len = tmp[0] + 256 * tmp[1];\n\n      for (i = 0; i < len; i++) {\n        readByte();\n      }\n    }\n\n    if (gpflags & 8) {\n      i = 0;\n      nameBuf = [];\n      c = readByte();\n\n      while (c) {\n        if (c === \"7\" || c === \":\") {\n          i = 0;\n        }\n\n        if (i < NAMEMAX - 1) {\n          nameBuf[i++] = c;\n        }\n\n        c = readByte();\n      }\n    }\n\n    if (gpflags & 16) {\n      c = readByte();\n\n      while (c) {\n        c = readByte();\n      }\n    }\n\n    if (gpflags & 2) {\n      readByte();\n      readByte();\n    }\n\n    deflateLoop();\n    crc = readByte();\n    crc |= readByte() << 8;\n    crc |= readByte() << 16;\n    crc |= readByte() << 24;\n    size = readByte();\n    size |= readByte() << 8;\n    size |= readByte() << 16;\n    size |= readByte() << 24;\n\n    if (modeZIP) {\n      if (nextFile()) {\n        // A file has been decompressed, we have to proceed\n        return false;\n      }\n    } // We are here in non-ZIP-files only,\n    // In that case the eturn value doesn't matter\n\n\n    return false;\n  }\n\n  _jxg.default.Util.Unzip.prototype.unzipFile = function (name) {\n    var i;\n    this.unzip();\n\n    for (i = 0; i < unzipped.length; i++) {\n      if (unzipped[i][1] === name) {\n        return unzipped[i][0];\n      }\n    }\n\n    return \"\";\n  };\n\n  _jxg.default.Util.Unzip.prototype.unzip = function () {\n    nextFile();\n    return unzipped;\n  };\n};\n\nvar _default = _jxg.default.Util;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_jxg","_interopRequireDefault","obj","__esModule","bitReverse","cplens","cplext","cpdist","cpdext","border","Util","Unzip","_jxg.default.Util.Unzip","barray","readByte","bits","bytepos","barraylen","readBit","carry","bb","e","readBits","a","res","i","addBuffer","SIZE","buf32k","bIdx","outputArr","push","String","fromCharCode","HufNode","b1","b0","jump","jumppos","isPat","fpos","len","fmax","flens","rec","curplace","Places","treepos","tmp","createTree","currentTree","numval","lengths","show","decodeValue","xtreepos","X","b","length","deflateLoop","z","last","type","blockLen","cSum","debug","c","j","dist","ll","Array","literalCodes","distCodes","lenCodes","distanceTree","n","l","literalTree","ll2","nextFile","modeZIP","unzipped","files","join","skipdir","gpflags","method","filelen","extralen","nameBuf","fileout","prototype","unzipFile","_jxg.default.Util.Unzip.prototype.unzipFile","name","unzip","_jxg.default.Util.Unzip.prototype.unzip"]
}
