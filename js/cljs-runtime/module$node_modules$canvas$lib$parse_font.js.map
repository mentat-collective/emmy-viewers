{
"version":3,
"file":"module$node_modules$canvas$lib$parse_font.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBtG,MAAMC,SAAeC,MAAJ,CAAW,iCAAX,CAA6B,GAA7B,CAAjB,CACMC,QAAcD,MAAJ,CAAW,oBAAX,CAA4B,GAA5B,CADhB,CAEME,UAAgBF,MAAJ,CAAW,gBAAX,CAA8B,GAA9B,CAFlB,CAGMG,UAAgBH,MAAJ,CAAW,mHAAX,CAA+B,GAA/B,CAHlB,CAIMI,aAAmBJ,MAAJ,CACnB,uIADmB,CAJrB;AAWMK,MAAQ,EAadR,OAAOC,CAAAA,OAAP,CAAiBQ,GAAAC,EAAO,CAEtB,GAAIF,KAAA,CAAMC,GAAN,CAAJ,CAAgB,MAAOD,MAAA,CAAMC,GAAN,CAGvB,KAAME,WAAaJ,YAAaK,CAAAA,IAAb,CAAkBH,GAAlB,CACnB,IAAKE,UAAL,CAAA,CAGA,IAAME,KAAO,CACXC,OAAQ,QADG,CAEXC,MAAO,QAFI,CAGXC,QAAS,QAHE,CAIXC,QAAS,QAJE,CAKXC,KAAMC,UAAA,CAAWR,UAAA,CAAW,CAAX,CAAX,CALK,CAMXS,KAAMT,UAAA,CAAW,CAAX,CANK,CAOXU,OAAQV,UAAA,CAAW,CAAX,CAAcW,CAAAA,OAAd,CAAsB,OAAtB,CAA+B,EAA/B,CAAmCA,CAAAA,OAAnC,CAA2C,QAA3C,CAAqD,GAArD,CAPG,CAAb,CAWIR,MAEES,WAAAA,CAASd,GAAIe,CAAAA,SAAJ,CAAc,CAAd,CAAiBb,UAAWc,CAAAA,KAA5B,CACf,IAAKX,MAAL,CAAcZ,QAASU,CAAAA,IAAT,CAAcW,UAAd,CAAd,CAAsCV,IAAKC,CAAAA,MAAL,CAAcA,MAAA,CAAO,CAAP,CACpD,IAAKC,MAAL,CAAaX,OAAQQ,CAAAA,IAAR,CAAaW,UAAb,CAAb,CAAoCV,IAAKE,CAAAA,KAAL,CAAaA,MAAA,CAAM,CAAN,CACjD,IAAKE,MAAL,CAAeZ,SAAUO,CAAAA,IAAV,CAAeW,UAAf,CAAf,CAAwCV,IAAKI,CAAAA,OAAL;AAAeA,MAAA,CAAQ,CAAR,CACvD,IAAKD,UAAL,CAAeV,SAAUM,CAAAA,IAAV,CAAeW,UAAf,CAAf,CAAwCV,IAAKG,CAAAA,OAAL,CAAeA,UAAA,CAAQ,CAAR,CAIvD,QAAQH,IAAKO,CAAAA,IAAb,EACE,KAAK,IAAL,CACEP,IAAKK,CAAAA,IAAL,EAAa,GACb,MACF,MAAK,IAAL,CACEL,IAAKK,CAAAA,IAAL,EAAa,EACb,MACF,MAAK,IAAL,CACEL,IAAKK,CAAAA,IAAL,EAAa,EACb,MACF,MAAK,IAAL,CACEL,IAAKK,CAAAA,IAAL,EAAa,EAAb,CAAoB,IACpB,MACF,MAAK,IAAL,CACEL,IAAKK,CAAAA,IAAL,EAAa,EAAb,CAAoB,IACpB,MAKF,MAAK,IAAL,CACA,KAAK,KAAL,CACEL,IAAKK,CAAAA,IAAL,EA/DgBQ,EA+DhB,CAA6B,GAC7B,MACF,MAAK,GAAL,CACEb,IAAKK,CAAAA,IAAL,EAAa,EAAb,CAAkB,IAAlB,CAAyB,CAzB7B,CA6BA,MAAQV,MAAA,CAAMC,GAAN,CAAR,CAAqBI,IArDrB,CANsB,CAzC8E;",
"sources":["node_modules/canvas/lib/parse-font.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$canvas$lib$parse_font\"] = function(global,require,module,exports) {\n'use strict'\n\n/**\n * Font RegExp helpers.\n */\n\nconst weights = 'bold|bolder|lighter|[1-9]00'\nconst styles = 'italic|oblique'\nconst variants = 'small-caps'\nconst stretches = 'ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded'\nconst units = 'px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q'\nconst string = '\\'([^\\']+)\\'|\"([^\"]+)\"|[\\\\w\\\\s-]+'\n\n// [ [ <\u2018font-style\u2019> || <font-variant-css21> || <\u2018font-weight\u2019> || <\u2018font-stretch\u2019> ]?\n//    <\u2018font-size\u2019> [ / <\u2018line-height\u2019> ]? <\u2018font-family\u2019> ]\n// https://drafts.csswg.org/css-fonts-3/#font-prop\nconst weightRe = new RegExp(`(${weights}) +`, 'i')\nconst styleRe = new RegExp(`(${styles}) +`, 'i')\nconst variantRe = new RegExp(`(${variants}) +`, 'i')\nconst stretchRe = new RegExp(`(${stretches}) +`, 'i')\nconst sizeFamilyRe = new RegExp(\n  `([\\\\d\\\\.]+)(${units}) *((?:${string})( *, *(?:${string}))*)`)\n\n/**\n * Cache font parsing.\n */\n\nconst cache = {}\n\nconst defaultHeight = 16 // pt, common browser default\n\n/**\n * Parse font `str`.\n *\n * @param {String} str\n * @return {Object} Parsed font. `size` is in device units. `unit` is the unit\n *   appearing in the input string.\n * @api private\n */\n\nmodule.exports = str => {\n  // Cached\n  if (cache[str]) return cache[str]\n\n  // Try for required properties first.\n  const sizeFamily = sizeFamilyRe.exec(str)\n  if (!sizeFamily) return // invalid\n\n  // Default values and required properties\n  const font = {\n    weight: 'normal',\n    style: 'normal',\n    stretch: 'normal',\n    variant: 'normal',\n    size: parseFloat(sizeFamily[1]),\n    unit: sizeFamily[2],\n    family: sizeFamily[3].replace(/[\"']/g, '').replace(/ *, */g, ',')\n  }\n\n  // Optional, unordered properties.\n  let weight, style, variant, stretch\n  // Stop search at `sizeFamily.index`\n  const substr = str.substring(0, sizeFamily.index)\n  if ((weight = weightRe.exec(substr))) font.weight = weight[1]\n  if ((style = styleRe.exec(substr))) font.style = style[1]\n  if ((variant = variantRe.exec(substr))) font.variant = variant[1]\n  if ((stretch = stretchRe.exec(substr))) font.stretch = stretch[1]\n\n  // Convert to device units. (`font.unit` is the original unit)\n  // TODO: ch, ex\n  switch (font.unit) {\n    case 'pt':\n      font.size /= 0.75\n      break\n    case 'pc':\n      font.size *= 16\n      break\n    case 'in':\n      font.size *= 96\n      break\n    case 'cm':\n      font.size *= 96.0 / 2.54\n      break\n    case 'mm':\n      font.size *= 96.0 / 25.4\n      break\n    case '%':\n      // TODO disabled because existing unit tests assume 100\n      // font.size *= defaultHeight / 100 / 0.75\n      break\n    case 'em':\n    case 'rem':\n      font.size *= defaultHeight / 0.75\n      break\n    case 'q':\n      font.size *= 96 / 25.4 / 4\n      break\n  }\n\n  return (cache[str] = font)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","weightRe","RegExp","styleRe","variantRe","stretchRe","sizeFamilyRe","cache","str","module.exports","sizeFamily","exec","font","weight","style","stretch","variant","size","parseFloat","unit","family","replace","substr","substring","index","defaultHeight"]
}
