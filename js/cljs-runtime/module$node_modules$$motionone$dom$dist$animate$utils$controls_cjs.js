shadow$provide.module$node_modules$$motionone$dom$dist$animate$utils$controls_cjs=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$motionone$utils$dist$index_cjs"),stopAnimation=require("module$node_modules$$motionone$dom$dist$animate$utils$stop_animation_cjs");const createAnimation=factory=>factory(),controls={get:(target,key)=>{const activeAnimation=target.animations[0];switch(key){case "duration":return target.duration;
case "currentTime":return utils.time.s((null===activeAnimation||void 0===activeAnimation?void 0:activeAnimation[key])||0);case "playbackRate":case "playState":return null===activeAnimation||void 0===activeAnimation?void 0:activeAnimation[key];case "finished":return target.finished||(target.finished=Promise.all(target.animations.map(selectFinished)).catch(utils.noop)),target.finished;case "stop":return()=>{target.animations.forEach(animation=>stopAnimation.stopAnimation(animation))};case "forEachNative":return callback=>
{target.animations.forEach(animation=>callback(animation,target))};default:return"undefined"===typeof(null===activeAnimation||void 0===activeAnimation?void 0:activeAnimation[key])?void 0:()=>target.animations.forEach(animation=>animation[key]())}},set:(target,key,value)=>{switch(key){case "currentTime":value=utils.time.ms(value);case "currentTime":case "playbackRate":for(let i=0;i<target.animations.length;i++)target.animations[i][key]=value;return!0}return!1}},selectFinished=animation=>animation.finished;
exports.controls=controls;exports.withControls=(animationFactory,options,duration=utils.defaults.duration)=>new Proxy({animations:animationFactory.map(createAnimation).filter(Boolean),duration,options},controls)}
//# sourceMappingURL=module$node_modules$$motionone$dom$dist$animate$utils$controls_cjs.js.map
