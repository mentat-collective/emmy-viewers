{
"version":3,
"file":"module$node_modules$markdown_it_block_image$lib$tokenizer.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/markdown-it-block-image/lib/tokenizer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it_block_image$lib$tokenizer\"] = function(global,require,module,exports) {\n// Copyright (c) Rotorz Limited. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root.\n\n\"use strict\";\n\n\nconst SYNTAX_CHARS = \"![]()\".split(\"\");\nconst SYNTAX_CODES = SYNTAX_CHARS.map(char => char.charCodeAt(0));\n\n\nfunction advanceToSymbol(state, endLine, symbol, pointer) {\n  let maxPos = null;\n  let symbolLine = pointer.line;\n  let symbolIndex = state.src.indexOf(symbol, pointer.pos);\n\n  if (symbolIndex === -1) return false;\n\n  maxPos = state.eMarks[pointer.line];\n  while (symbolIndex >= maxPos) {\n    ++symbolLine;\n    maxPos = state.eMarks[symbolLine];\n\n    if (symbolLine >= endLine) return false;\n  }\n\n  pointer.prevPos = pointer.pos;\n  pointer.pos = symbolIndex;\n  pointer.line = symbolLine;\n  return true;\n}\n\n\nfunction tokenizer(state, startLine, endLine, silent) {\n  let startPos = state.bMarks[startLine] + state.tShift[startLine];\n  let maxPos = state.eMarks[startLine];\n\n  let pointer = { line: startLine, pos: startPos };\n\n  // Block image must be at start of input or the previous line must be blank.\n  if (startLine !== 0) {\n    let prevLineStartPos = state.bMarks[startLine - 1] + state.tShift[startLine - 1];\n    let prevLineMaxPos = state.eMarks[startLine - 1];\n    if (prevLineMaxPos > prevLineStartPos) return false;\n  }\n\n  // Identify as being a potential block image.\n  if (maxPos - startPos < 2) return false;\n  if (SYNTAX_CODES[0] !== state.src.charCodeAt(pointer.pos++)) return false;\n\n  // Read alt text from within square brackets.\n  if (SYNTAX_CODES[1] !== state.src.charCodeAt(pointer.pos++)) return false;\n  if (!advanceToSymbol(state, endLine, \"]\", pointer)) return false;\n  ++pointer.pos;\n\n  // Read image url and title from within parenthesis.\n  if (SYNTAX_CODES[3] !== state.src.charCodeAt(pointer.pos++)) return false;\n  if (!advanceToSymbol(state, endLine, \")\", pointer)) return false;\n\n  ++pointer.pos;\n\n  // Do not recognize as block element when there is trailing text.\n  maxPos = state.eMarks[pointer.line];\n  let trailingText = state.src\n    .substr(pointer.pos, maxPos - pointer.pos)\n    .trim();\n  if (trailingText !== \"\") return false;\n\n  // Block image must be at end of input or the next line must be blank.\n  if (endLine !== pointer.line + 1) {\n    let nextLineStartPos = state.bMarks[pointer.line + 1] + state.tShift[pointer.line + 1];\n    let nextLineMaxPos = state.eMarks[pointer.line + 1];\n    if (nextLineMaxPos > nextLineStartPos) return false;\n  }\n\n  if (pointer.line >= endLine) return false;\n\n  if (!silent) {\n    let token;\n\n    if (this.options.outputContainer) {\n      token = state.push(\"block-image_open\", this.options.outputContainer, 1);\n      token.map = [ pointer.line, pointer.line + 1 ];\n\n      if (this.options.containerClassName) {\n        token.attrSet(\"class\", this.options.containerClassName);\n      }\n    }\n\n    token = state.push(\"inline\", \"\", 0);\n    token.content = state.src.substr(startPos, pointer.pos - startPos);\n    token.map = [ startLine, pointer.line + 1 ];\n    token.children = [];\n\n    if (this.options.outputContainer) {\n      state.push(\"block-image_close\", this.options.outputContainer, -1);\n    }\n\n    state.line = pointer.line + 1;\n  }\n\n  return true;\n}\n\n\nmodule.exports = tokenizer;\n\n};"],
"names":["shadow$provide","global","require","module","exports","advanceToSymbol","state","endLine","symbol","pointer","symbolLine","line","symbolIndex","src","indexOf","pos","maxPos","eMarks","prevPos","SYNTAX_CODES","SYNTAX_CHARS","map","char","charCodeAt","tokenizer","startLine","silent","startPos","bMarks","tShift","prevLineMaxPos","substr","trim","trailingText","nextLineMaxPos","options","outputContainer","token","push","containerClassName","attrSet","content","children"]
}
