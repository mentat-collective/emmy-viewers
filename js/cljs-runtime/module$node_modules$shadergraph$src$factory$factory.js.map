{
"version":3,
"file":"module$node_modules$shadergraph$src$factory$factory.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/shadergraph/src/factory/factory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$shadergraph$src$factory$factory\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Factory = void 0;\n\nvar _graph = require(\"../graph\");\n\nvar Block = _interopRequireWildcard(require(\"../block\"));\n\nvar Visualize = _interopRequireWildcard(require(\"../visualize\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS104: Avoid inline assignments\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\n/*\n  Chainable factory\n\n  Exposes methods to build a graph incrementally\n*/\nclass Factory {\n  constructor(language, fetch, config) {\n    this.language = language;\n    this.fetch = fetch;\n    this.config = config;\n    this.graph();\n  } // Combined call/concat shortcut\n\n\n  pipe(name, uniforms, namespace, defines) {\n    if (name instanceof Factory) {\n      this._concat(name);\n    } else if (name != null) {\n      this._call(name, uniforms, namespace, defines);\n    }\n\n    return this;\n  } // Old name\n\n\n  call(name, uniforms, namespace, defines) {\n    return this.pipe(name, uniforms, namespace, defines);\n  } // Combined callback/import shortcut\n\n\n  require(name, uniforms, namespace, defines) {\n    if (name instanceof Factory) {\n      this._import(name);\n    } else if (name != null) {\n      this.callback();\n\n      this._call(name, uniforms, namespace, defines);\n\n      this.end();\n    }\n\n    return this;\n  } // Old name\n\n\n  import(name, uniforms, namespace, defines) {\n    return this.require(name, uniforms, namespace, defines);\n  } // Create parallel branches that connect as one block to the end\n  // (one outgoing connection per outlet)\n\n\n  split() {\n    this._group(\"_combine\", true);\n\n    return this;\n  } // Create parallel branches that fan out from the end\n  // (multiple outgoing connections per outlet)\n\n\n  fan() {\n    this._group(\"_combine\", false);\n\n    return this;\n  } // Create isolated subgraph\n\n\n  isolate() {\n    this._group(\"_isolate\");\n\n    return this;\n  } // Create callback subgraph\n\n\n  callback() {\n    this._group(\"_callback\");\n\n    return this;\n  } // Next branch in group\n\n\n  next() {\n    this._next();\n\n    return this;\n  } // Connect branches to previous tail and add pass-through from end\n\n\n  pass() {\n    const pass = this._stack[2].end;\n    this.end();\n    this._state.end = this._state.end.concat(pass);\n    return this;\n  } // Leave nested branches and join up with main graph,\n  // applying stored op along the way\n\n\n  end() {\n    const [sub, main] = Array.from(this._exit());\n    const {\n      op\n    } = sub;\n\n    if (this[op]) {\n      this[op](sub, main);\n    }\n\n    return this;\n  } // Old name\n\n\n  join() {\n    return this.end();\n  } // Return finalized graph / reset factory\n\n\n  graph() {\n    // Pop remaining stack\n    while ((this._stack != null ? this._stack.length : undefined) > 1) {\n      this.end();\n    } // Remember terminating node(s) of graph\n\n\n    if (this._graph) {\n      this._tail(this._state, this._graph);\n    }\n\n    const graph = this._graph;\n    this._graph = new _graph.Graph();\n    this._state = new State();\n    this._stack = [this._state];\n    return graph;\n  } // Compile shortcut (graph is thrown away)\n\n\n  compile(namespace) {\n    if (namespace == null) {\n      namespace = \"main\";\n    }\n\n    return this.graph().compile(namespace);\n  } // Link shortcut (graph is thrown away)\n\n\n  link(namespace) {\n    if (namespace == null) {\n      namespace = \"main\";\n    }\n\n    return this.graph().link(namespace);\n  } // Serialize for debug\n\n\n  serialize() {\n    return Visualize.serialize(this._graph);\n  } // Return true if empty\n\n\n  empty() {\n    return this._graph.nodes.length === 0;\n  } // Concatenate existing factory onto tail\n  // Retains original factory\n\n\n  _concat(factory) {\n    // Ignore empty concat\n    let block;\n\n    if (factory._state.nodes.length === 0) {\n      return this;\n    }\n\n    this._tail(factory._state, factory._graph);\n\n    try {\n      block = new Block.Isolate(factory._graph);\n    } catch (error) {\n      if (this.config.autoInspect) {\n        Visualize.inspect(error, this._graph, factory);\n      }\n\n      throw error;\n    }\n\n    this._auto(block);\n\n    return this;\n  } // Add existing factory as callback\n  // Retains original factory\n\n\n  _import(factory) {\n    // Check for empty require\n    let block;\n\n    if (factory._state.nodes.length === 0) {\n      throw \"Can't import empty callback\";\n    }\n\n    this._tail(factory._state, factory._graph);\n\n    try {\n      block = new Block.Callback(factory._graph);\n    } catch (error) {\n      if (this.config.autoInspect) {\n        Visualize.inspect(error, this._graph, factory);\n      }\n\n      throw error;\n    }\n\n    this._auto(block);\n\n    return this;\n  } // Connect parallel branches to tail\n\n\n  _combine(sub, main) {\n    for (const to of Array.from(sub.start)) {\n      for (const from of Array.from(main.end)) {\n        from.connect(to, sub.multi);\n      }\n    }\n\n    main.end = sub.end;\n    return main.nodes = main.nodes.concat(sub.nodes);\n  } // Make subgraph and connect to tail\n\n\n  _isolate(sub, _main) {\n    if (sub.nodes.length) {\n      let block;\n\n      const subgraph = this._subgraph(sub);\n\n      this._tail(sub, subgraph);\n\n      try {\n        block = new Block.Isolate(subgraph);\n      } catch (error) {\n        if (this.config.autoInspect) {\n          Visualize.inspect(error, this._graph, subgraph);\n        }\n\n        throw error;\n      }\n\n      return this._auto(block);\n    }\n  } // Convert to callback and connect to tail\n\n\n  _callback(sub, _main) {\n    if (sub.nodes.length) {\n      let block;\n\n      const subgraph = this._subgraph(sub);\n\n      this._tail(sub, subgraph);\n\n      try {\n        block = new Block.Callback(subgraph);\n      } catch (error) {\n        if (this.config.autoInspect) {\n          Visualize.inspect(error, this._graph, subgraph);\n        }\n\n        throw error;\n      }\n\n      return this._auto(block);\n    }\n  } // Create next call block\n\n\n  _call(name, uniforms, namespace, defines) {\n    const snippet = this.fetch(name);\n    snippet.bind(this.config, uniforms, namespace, defines);\n    const block = new Block.Call(snippet);\n    return this._auto(block);\n  } // Move current state into subgraph\n\n\n  _subgraph(sub) {\n    const subgraph = new _graph.Graph(null, this._graph);\n    subgraph.adopt(sub.nodes);\n    return subgraph;\n  } // Finalize graph tail\n\n\n  _tail(state, graph) {\n    // Merge (unique) terminating ends into single tail node if needed\n    let tail = state.end.concat(state.tail);\n    tail = tail.filter((node, i) => tail.indexOf(node) === i);\n\n    if (tail.length > 1) {\n      tail = new Block.Join(tail);\n      tail = [tail.node];\n\n      this._graph.add(tail);\n    } // Save single endpoint\n\n\n    graph.tail = tail[0];\n    state.end = tail;\n    state.tail = [];\n\n    if (!graph.tail) {\n      throw new Error(\"Cannot finalize empty graph\");\n    } // Add compile/link/export/inspect shortcut methods\n\n\n    graph.compile = namespace => {\n      if (namespace == null) {\n        namespace = \"main\";\n      }\n\n      try {\n        return graph.tail.owner.compile(this.language, namespace);\n      } catch (error) {\n        if (this.config.autoInspect) {\n          graph.inspect(error);\n        }\n\n        throw error;\n      }\n    };\n\n    graph.link = namespace => {\n      if (namespace == null) {\n        namespace = \"main\";\n      }\n\n      try {\n        return graph.tail.owner.link(this.language, namespace);\n      } catch (error) {\n        if (this.config.autoInspect) {\n          graph.inspect(error);\n        }\n\n        throw error;\n      }\n    };\n\n    graph.export = (layout, depth) => {\n      return graph.tail.owner.export(layout, depth);\n    };\n\n    return graph.inspect = (message = null) => Visualize.inspect(message, graph);\n  } // Create group for branches or callbacks\n\n\n  _group(op, multi) {\n    this._push(op, multi); // Accumulator\n\n\n    this._push(); // Current\n\n\n    return this;\n  } // Merge branch into accumulator and reset state\n\n\n  _next() {\n    const sub = this._pop();\n\n    this._state.start = this._state.start.concat(sub.start);\n    this._state.end = this._state.end.concat(sub.end);\n    this._state.nodes = this._state.nodes.concat(sub.nodes);\n    this._state.tail = this._state.tail.concat(sub.tail);\n    return this._push();\n  } // Exit nested branches\n\n\n  _exit() {\n    this._next();\n\n    this._pop();\n\n    return [this._pop(), this._state];\n  } // State stack\n\n\n  _push(op, multi) {\n    this._stack.unshift(new State(op, multi));\n\n    return this._state = this._stack[0];\n  }\n\n  _pop() {\n    let left;\n    this._state = this._stack[1];\n\n    if (this._state == null) {\n      this._state = new State();\n    }\n\n    return (left = this._stack.shift()) != null ? left : new State();\n  } // Auto append or insert depending on whether we have inputs\n\n\n  _auto(block) {\n    if (block.node.inputs.length) {\n      return this._append(block);\n    } else {\n      return this._insert(block);\n    }\n  } // Add block and connect to end\n\n\n  _append(block) {\n    let end;\n    const {\n      node\n    } = block;\n\n    this._graph.add(node);\n\n    for (end of Array.from(this._state.end)) {\n      end.connect(node);\n    }\n\n    if (!this._state.start.length) {\n      this._state.start = [node];\n    }\n\n    this._state.end = [node];\n\n    this._state.nodes.push(node);\n\n    if (!node.outputs.length) {\n      this._state.tail.push(node);\n    }\n  } // Add block and connect to start\n\n\n  _prepend(block) {\n    let start;\n    const {\n      node\n    } = block;\n\n    this._graph.add(node);\n\n    for (start of Array.from(this._state.start)) {\n      node.connect(start);\n    }\n\n    if (!this._state.end.length) {\n      this._state.end = [node];\n    }\n\n    this._state.start = [node];\n\n    this._state.nodes.push(node);\n\n    if (!node.outputs.length) {\n      this._state.tail.push(node);\n    }\n  } // Insert loose block\n\n\n  _insert(block) {\n    const {\n      node\n    } = block;\n\n    this._graph.add(node);\n\n    this._state.start.push(node);\n\n    this._state.end.push(node);\n\n    this._state.nodes.push(node);\n\n    if (!node.outputs.length) {\n      return this._state.tail.push(node);\n    }\n  }\n\n}\n\nexports.Factory = Factory;\n\nclass State {\n  constructor(op = null, multi, start, end, nodes, tail) {\n    this.op = op;\n\n    if (multi == null) {\n      multi = false;\n    }\n\n    this.multi = multi;\n\n    if (start == null) {\n      start = [];\n    }\n\n    this.start = start;\n\n    if (end == null) {\n      end = [];\n    }\n\n    this.end = end;\n\n    if (nodes == null) {\n      nodes = [];\n    }\n\n    this.nodes = nodes;\n\n    if (tail == null) {\n      tail = [];\n    }\n\n    this.tail = tail;\n  }\n\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","value","Factory","_graph","Block","Visualize","constructor","language","fetch","config","graph","pipe","name","uniforms","namespace","defines","_concat","_call","_import","callback","end","import","split","_group","fan","isolate","next","_next","pass","_stack","_state","concat","sub","main","Array","from","_exit","op","join","length","undefined","_tail","Graph","State","compile","link","serialize","empty","nodes","factory","block","Isolate","error","autoInspect","inspect","_auto","Callback","_combine","to","start","connect","multi","_isolate","_main","subgraph","_subgraph","_callback","snippet","bind","Call","adopt","state","tail","filter","node","i","indexOf","Join","add","Error","graph.compile","owner","graph.link","export","layout","depth","graph.export","message","graph.inspect","_push","_pop","unshift","left","shift","inputs","_append","_insert","push","outputs","_prepend"]
}
