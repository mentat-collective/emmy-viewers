shadow$provide.module$node_modules$three$src$renderers$webgl$WebGLBackground=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.WebGLBackground=function(renderer$jscomp$0,cubemaps,cubeuvmaps,state,objects,alpha$jscomp$0,premultipliedAlpha){function setClear(color,alpha){state.buffers.color.setClear(color.r,color.g,color.b,alpha,premultipliedAlpha)}const clearColor=new _Color.Color(0);let clearAlpha=!0===alpha$jscomp$0?0:1,planeMesh,boxMesh,currentBackground=
null,currentBackgroundVersion=0,currentTonemapping=null;return{getClearColor:function(){return clearColor},setClearColor:function(color,alpha=1){clearColor.set(color);clearAlpha=alpha;setClear(clearColor,clearAlpha)},getClearAlpha:function(){return clearAlpha},setClearAlpha:function(alpha){clearAlpha=alpha;setClear(clearColor,clearAlpha)},render:function(renderList,scene$jscomp$0){let forceClear=!1,background=!0===scene$jscomp$0.isScene?scene$jscomp$0.background:null;background&&background.isTexture&&
(background=(0<scene$jscomp$0.backgroundBlurriness?cubeuvmaps:cubemaps).get(background));var xr=renderer$jscomp$0.xr;(xr=xr.getSession&&xr.getSession())&&"additive"===xr.environmentBlendMode&&(background=null);null===background?setClear(clearColor,clearAlpha):background&&background.isColor&&(setClear(background,1),forceClear=!0);(renderer$jscomp$0.autoClear||forceClear)&&renderer$jscomp$0.clear(renderer$jscomp$0.autoClearColor,renderer$jscomp$0.autoClearDepth,renderer$jscomp$0.autoClearStencil);if(background&&
(background.isCubeTexture||background.mapping===_constants.CubeUVReflectionMapping)){void 0===boxMesh&&(boxMesh=new _Mesh.Mesh(new _BoxGeometry.BoxGeometry(1,1,1),new _ShaderMaterial.ShaderMaterial({name:"BackgroundCubeMaterial",uniforms:(0,_UniformsUtils.cloneUniforms)(_ShaderLib.ShaderLib.backgroundCube.uniforms),vertexShader:_ShaderLib.ShaderLib.backgroundCube.vertexShader,fragmentShader:_ShaderLib.ShaderLib.backgroundCube.fragmentShader,side:_constants.BackSide,depthTest:!1,depthWrite:!1,fog:!1})),
boxMesh.geometry.deleteAttribute("normal"),boxMesh.geometry.deleteAttribute("uv"),boxMesh.onBeforeRender=function(renderer,scene,camera){this.matrixWorld.copyPosition(camera.matrixWorld)},Object.defineProperty(boxMesh.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),objects.update(boxMesh));boxMesh.material.uniforms.envMap.value=background;boxMesh.material.uniforms.flipEnvMap.value=background.isCubeTexture&&!1===background.isRenderTargetTexture?-1:1;boxMesh.material.uniforms.backgroundBlurriness.value=
scene$jscomp$0.backgroundBlurriness;if(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer$jscomp$0.toneMapping)boxMesh.material.needsUpdate=!0,currentBackground=background,currentBackgroundVersion=background.version,currentTonemapping=renderer$jscomp$0.toneMapping;boxMesh.layers.enableAll();renderList.unshift(boxMesh,boxMesh.geometry,boxMesh.material,0,0,null)}else if(background&&background.isTexture){void 0===planeMesh&&(planeMesh=new _Mesh.Mesh(new _PlaneGeometry.PlaneGeometry(2,
2),new _ShaderMaterial.ShaderMaterial({name:"BackgroundMaterial",uniforms:(0,_UniformsUtils.cloneUniforms)(_ShaderLib.ShaderLib.background.uniforms),vertexShader:_ShaderLib.ShaderLib.background.vertexShader,fragmentShader:_ShaderLib.ShaderLib.background.fragmentShader,side:_constants.FrontSide,depthTest:!1,depthWrite:!1,fog:!1})),planeMesh.geometry.deleteAttribute("normal"),Object.defineProperty(planeMesh.material,"map",{get:function(){return this.uniforms.t2D.value}}),objects.update(planeMesh));
planeMesh.material.uniforms.t2D.value=background;!0===background.matrixAutoUpdate&&background.updateMatrix();planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);if(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer$jscomp$0.toneMapping)planeMesh.material.needsUpdate=!0,currentBackground=background,currentBackgroundVersion=background.version,currentTonemapping=renderer$jscomp$0.toneMapping;planeMesh.layers.enableAll();renderList.unshift(planeMesh,
planeMesh.geometry,planeMesh.material,0,0,null)}}}};var _constants=require("module$node_modules$three$src$constants"),_BoxGeometry=require("module$node_modules$three$src$geometries$BoxGeometry"),_PlaneGeometry=require("module$node_modules$three$src$geometries$PlaneGeometry"),_ShaderMaterial=require("module$node_modules$three$src$materials$ShaderMaterial"),_Color=require("module$node_modules$three$src$math$Color"),_Mesh=require("module$node_modules$three$src$objects$Mesh"),_ShaderLib=require("module$node_modules$three$src$renderers$shaders$ShaderLib"),
_UniformsUtils=require("module$node_modules$three$src$renderers$shaders$UniformsUtils")}
//# sourceMappingURL=module$node_modules$three$src$renderers$webgl$WebGLBackground.js.map
