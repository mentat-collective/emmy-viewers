{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_inline$backticks.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAMvHD,MAAOC,CAAAA,OAAP,CAAiBC,QAAiB,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAAA,IACrCC,GADqC,CACLC,QADK,CAE5CC,IAAMJ,KAAMI,CAAAA,GAGhB,IAAW,EAAX,GAFSJ,KAAMK,CAAAA,GAAIC,CAAAA,UAAVC,CAAqBH,GAArBG,CAET,CAA0B,MAAO,CAAA,CAEjC,KAAAC,MAAQJ,GACRA,IAAA,EAIA,KAHAF,GAGA,CAHMF,KAAMS,CAAAA,MAGZ,CAAOL,GAAP,CAAaF,GAAb,EAAkD,EAAlD,GAAoBF,KAAMK,CAAAA,GAAIC,CAAAA,UAAV,CAAqBF,GAArB,CAApB,CAAA,CAAiEA,GAAA,EAEjE,KAAAM,OAASV,KAAMK,CAAAA,GAAIM,CAAAA,KAAV,CAAgBH,KAAhB,CAAuBJ,GAAvB,CACT,KAAAQ,aAAeF,MAAOG,CAAAA,MAEtB,IAAIb,KAAMc,CAAAA,gBAAV,GAA+Bd,KAAMe,CAAAA,SAAN,CAAgBH,YAAhB,CAA/B,EAAgE,CAAhE,GAAsEJ,KAAtE,CAGE,MAFKP,OAEE,GAFMD,KAAMgB,CAAAA,OAEZ,EAFuBN,MAEvB,EADPV,KAAMI,CAAAA,GACC;AADMQ,YACN,CAAA,CAAA,CAMT,KAHaT,QAGb,CAHwBC,GAGxB,CAA2D,CAAC,CAA5D,IAAQa,KAAR,CAAqBjB,KAAMK,CAAAA,GAAIa,CAAAA,OAAV,CAAkB,GAAlB,CAAuBf,QAAvB,CAArB,EAAA,CAA+D,CAI7D,IAHAA,QAGA,CAHWc,KAGX,CAHwB,CAGxB,CAAOd,QAAP,CAAkBD,GAAlB,EAA4D,EAA5D,GAAyBF,KAAMK,CAAAA,GAAIC,CAAAA,UAAV,CAAqBH,QAArB,CAAzB,CAAA,CAA2EA,QAAA,EAE3E,KAAAgB,aAAehB,QAAfgB,CAA0BF,KAE1B,IAAIE,YAAJ,GAAqBP,YAArB,CAUE,MARKX,OAQE,GAPLmB,MAEA,CAFYpB,KAAMqB,CAAAA,IAAN,CAAW,aAAX,CAA0B,MAA1B,CAAkC,CAAlC,CAEZ,CADAD,MAAME,CAAAA,MACN,CADgBZ,MAChB,CAAAU,MAAMG,CAAAA,OAAN,CAAgBvB,KAAMK,CAAAA,GAAIM,CAAAA,KAAV,CAAgBP,GAAhB,CAAqBa,KAArB,CACbO,CAAAA,OADa,CACL,KADK,CACE,GADF,CAEbA,CAAAA,OAFa,CAEL,UAFK,CAEO,IAFP,CAKX,EADPxB,KAAMI,CAAAA,GACC,CADKD,QACL,CAAA,CAAA,CAITH,MAAMe,CAAAA,SAAN,CAAgBI,YAAhB,CAAA,CAAgCF,KAtB6B,CA0B/DjB,KAAMc,CAAAA,gBAAN,CAAyB,CAAA,CAEpBb,OAAL,GAAaD,KAAMgB,CAAAA,OAAnB,EAA8BN,MAA9B,CACAV;KAAMI,CAAAA,GAAN,EAAaQ,YACb,OAAO,CAAA,CAxDyC,CANqE;",
"sources":["node_modules/markdown-it/lib/rules_inline/backticks.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_inline$backticks\"] = function(global,require,module,exports) {\n// Parse backticks\n\n'use strict';\n\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n  openerLength = marker.length;\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n\n  matchStart = matchEnd = pos;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    closerLength = matchEnd - matchStart;\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        token     = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","state","silent","max","matchEnd","pos","src","charCodeAt","ch","start","posMax","marker","slice","openerLength","length","backticksScanned","backticks","pending","matchStart","indexOf","closerLength","token","push","markup","content","replace"]
}
