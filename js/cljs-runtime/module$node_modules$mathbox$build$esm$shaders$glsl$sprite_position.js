shadow$provide.module$node_modules$mathbox$build$esm$shaders$glsl$sprite_position=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;exports.default="uniform vec2 spriteOffset;\nuniform float spriteScale;\nuniform float spriteDepth;\nuniform float spriteSnap;\n\nuniform vec2 renderOdd;\nuniform float renderScale;\nuniform float renderScaleInv;\nuniform float pixelUnit;\nuniform float focusDepth;\n\nuniform vec4 geometryClip;\nattribute vec4 position4;\nattribute vec2 sprite;\n\nvarying float vPixelSize;\n\n// External\nvec3 getPosition(vec4 xyzw, float canonical);\nvec4 getSprite(vec4 xyzw);\n\nvec3 getSpritePosition() {\n  // Clip points\n  vec4 p \x3d min(geometryClip, position4);\n  float diff \x3d length(position4 - p);\n  if (diff \x3e 0.0) {\n    return vec3(0.0, 0.0, 1000.0);\n  }\n\n  // Make sprites\n  vec3 center \x3d getPosition(p, 1.0);\n  vec4 atlas \x3d getSprite(p);\n\n  // Sprite goes from -1..1, width \x3d 2.\n  // -1..1 -\x3e -0.5..0.5\n  vec2 halfSprite \x3d sprite * .5;\n  vec2 halfFlipSprite \x3d vec2(halfSprite.x, -halfSprite.y);\n\n#ifdef POSITION_UV\n  // Assign UVs\n  vUV \x3d atlas.xy + atlas.zw * (halfFlipSprite + .5);\n#endif\n\n  // Depth blending\n  // TODO: orthographic camera\n  // Workaround: set depth \x3d 0\n  float depth \x3d focusDepth, z;\n  z \x3d -center.z;\n  if (spriteDepth \x3c 1.0) {\n    depth \x3d mix(z, focusDepth, spriteDepth);\n  }\n  \n  // Match device/unit mapping \n  float size \x3d pixelUnit * spriteScale;\n  float depthSize \x3d depth * size;\n\n  // Calculate pixelSize for anti-aliasing\n  float pixelSize \x3d (spriteDepth \x3e 0.0 ? depthSize / z : size);\n  vPixelSize \x3d pixelSize;\n\n  // Position sprite\n  vec2 atlasOdd \x3d fract(atlas.zw / 2.0);\n  vec2 offset \x3d (spriteOffset + halfSprite * atlas.zw) * depthSize;\n  if (spriteSnap \x3e 0.5) {\n    // Snap to pixel (w/ epsilon shift to avoid jitter)\n    return vec3(((floor(center.xy / center.z * renderScale + 0.001) + renderOdd + atlasOdd) * center.z + offset) * renderScaleInv, center.z);\n  }\n  else {\n    // Place directly\n    return center + vec3(offset * renderScaleInv, 0.0);\n  }\n\n}\n"}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$shaders$glsl$sprite_position.js.map
