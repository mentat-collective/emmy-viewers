{"version":3,"sources":["sicmutils/abstract/number.cljc"],"mappings":";AAiBA,AAAA,CAAA,AAAA,wDAAAA,xDAAaC;;AAAb,CAAA,AAAA,AAAaA,gFAEX,WAAaC;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAA;;;AAFF,CAAA,AAAA,oDAAAF,pDAAaC;;AAAb,CAAA,AAAA,AAAaA,uEAKX,WAAQC;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAA;;;AALF,CAAA,AAAA,AAAaD,sEAMX,WAAOC;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAA;;;AANF,CAAA,AAAA,AAAaD,2EAOX,WAAYC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;AAPF,CAAA,AAAA,AAAaD,qEAQX,WAAYC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;AARF,CAAA,AAAA,AAAaD,oEASX,WAAWC;AAAX,AAAA,YAAA,RAAWA;AAAX,AAAA;;;AATF,CAAA,AAAA,AAAaD,yEAUX,WAAgBC;AAAhB,AAAA,YAAA,RAAgBA;AAAhB,AAAA;;;AAVF,CAAA,AAAA,AAAaD,wEAWX,WAASC;AAAT,AAAA,YAAA,RAASA;AAAT,AAAA;;;AAXF,CAAA,AAAA,AAAaD,kEAYX,WAASE;AAAT,AAAA,YAAA,RAASA;AAAT,AAAYA;;;AAZd,CAAA,AAAA,AAAaF,gEAaX,WAAOC;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAUD;;AAEZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CAAA,5CAAMG,+FAkCHC;AAlCH,AAmCE,yCAAA,lCAACC,qIAA2BD;;AAE9B;;;;;;;mDAAA,nDAAME,6GAMHF;AANH,AAOE,SAAK,AAACG,oCAAWH,QACZ,kFAAA,lFAACI,6CAAE,AAACC,kCAAeL;;AAE1B;;;;;;;;;;oDAAA,pDAAMM,+GASHN;AATH,AAUE,SAAI,AAACE,iDAAgBF,QACjB,cAAAJ,bAASI;;AAIf,gEAAA,hEAACO,+CAAOX;AACR,+CAAA,mGAAA,lJAACW;AAMD,AAAAC,iEAAA,oIAAA,jDAAgBZ,iBAAOa,2CAAYZ,EAAEA;AAArC,AAAA;;AACA,AAAAW,iEAAA,oIAAA,jDAAgBC,wBAAUb,oCAASC,EAAEA;AAArC,AAAA;;AACA,AAAAW,iEAAA,oGAAA,8FAAA,/GAAgBZ,0HAAoBC,EAAEA;AAAtC,AAAA;;AACA,AAAAW,iEAAA,mFAAA,+GAAA,zBAA2BZ,oCAASC,EAAEA;AAAtC,AAAA;;AACA,AAAAW,iEAAA,mFAAA,mIAAA,hCAA4BC,2CAAYC,EAAEC;AAA1C,AAA6C,OAACH,mDAAI,AAACI,mCAAgBF,GAAGC;;AACtE,AAAAH,iEAAA,2GAAA,2GAAA,nIAAgBC,8IAAwBC,EAAEC;AAA1C,AAA6C,OAACH,mDAAIE,EAAE,AAACE,mCAAgBD;;AACrE,AAAAH,iEAAA,mFAAA,mGAAA,8FAAA,WAAyCE,EAAEC;AAA3C,AAA8C,OAACH,mDAAI,AAACI,mCAAgBF,GAAGC;;AACvE,AAAAH,iEAAA,mFAAA,sFAAA,2GAAA,WAAyCE,EAAEC;AAA3C,AAA8C,OAACH,mDAAIE,EAAE,AAACE,mCAAgBD;;AACtE,AAAAH,iEAAA,mFAAA,mGAAA,2GAAA,WAA0CE,EAAEC;AAA5C,AACE,OAACP,6CAAE,AAACQ,mCAAgBF,GACjB,AAACE,mCAAgBD;;AAEtB,sCAAA,tCAAOE,mFAAUC,WAAWC;AAA5B,AACE,IAAAC,qBAAY,AAACE,oCAAsBH;AAAnC,AAAA,oBAAAC;AAAA,SAAAA,LAASC;AAAT,AACE,OAAAH,uDAAA,mFAAA,2GAAA,WAAqCK;AAArC,AACE,IAAMC,SAAO,iBAAAC,YAAI,AAACT,mCAAgBO;AAArB,AAAA,4EAAAE,0BAAAA,9FAACJ,mCAAAA,8CAAAA;;AAAd,AACE,OAAClB,0CACA,iBAAAiB,yBAAkBO;AAAlB,AAAA,oBAAAP;AAAA,eAAAA,XAASM;AAAT,AACE,QAACA,yCAAAA,iDAAAA,VAASF,6BAAAA;;AACVA;;;;;AAEP,OAAAN,uDAAA,mFAAA,2GAAA,WAAqCK;AAArC,AACE,0CAAA,0GAAA,7IAACK,sIAA4BT,0FAAQI;;;;AAE3C,uCAAA,vCAAOM,qFAAWX,WAAWC;AAA7B,AACE,YAAA,mFAAA,mFAAA,mGAAA,2GAAA,mFAAA,sFAAA,2GAAA,mFAAA,mGAAA,t0BAAMW;AAAN,AAGE,IAAAV,qBAAY,AAACE,oCAAsBH;AAAnC,AAAA,oBAAAC;AAAA,SAAAA,LAASC;AAAT,AACE,IAAAU,cAAA,AAAAC,cAAcF;IAAdG,gBAAA;IAAAC,gBAAA;IAAAC,YAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,YAAAD;AAAA,IAAAE,cAAA,AAAAH,mDAAAE;QAAA,AAAAE,4CAAAD,YAAA,IAAA,hEAAStB;QAAT,AAAAuB,4CAAAD,YAAA,IAAA,hEAAWrB;AAAX,AAAA,AACE,AAAAG,uDAAA,+FAAA,ZAAuBJ,EAAEC;kBAAIQ,EAAEwB;AAA/B,AACE,IAAMvB,SAAO,iBAAAwB,YAAI,AAAChC,mCAAgBO;IAArB0B,YACI,AAACjC,mCAAgB+B;AADrB,AAAA,4EAAAC,UAAAC,0BAAAD,UAAAC,lHAAC5B,mCAAAA,wDAAAA;;AAAd,AAEE,OAAClB,0CACA,iBAAAiB,yBAAkBO;AAAlB,AAAA,oBAAAP;AAAA,eAAAA,XAASM;AAAT,AACE,QAACA,yCAAAA,iDAAAA,VAASF,6BAAAA;;AACVA;;;;;;AAPT;AAAA,gBAAAO;gBAAAE;gBAAAC;gBAAA,CAAAC,YAAA;;;;;;;AAAA,IAAAG,qBAAA,AAAAN,cAAAD;AAAA,AAAA,GAAAO;AAAA,AAAA,IAAAP,kBAAAO;AAAA,AAAA,GAAA,AAAAC,6BAAAR;AAAA,IAAAS,kBAAA,AAAAC,sBAAAV;AAAA,AAAA,gBAAA,AAAAW,qBAAAX;gBAAAS;gBAAA,AAAAG,gBAAAH;gBAAA;;;;;;;AAAA,IAAAI,cAAA,AAAAC,gBAAAd;QAAA,AAAAM,4CAAAO,YAAA,IAAA,hEAAS9B;QAAT,AAAAuB,4CAAAO,YAAA,IAAA,hEAAW7B;AAAX,AAAA,AACE,AAAAG,uDAAA,+FAAA,ZAAuBJ,EAAEC;kBAAIQ,EAAEwB;AAA/B,AACE,IAAMvB,SAAO,iBAAA0B,YAAI,AAAClC,mCAAgBO;IAArB4B,YACI,AAACnC,mCAAgB+B;AADrB,AAAA,4EAAAG,UAAAC,0BAAAD,UAAAC,lHAAC9B,mCAAAA,wDAAAA;;AAAd,AAEE,OAAClB,0CACA,iBAAAiB,yBAAkBO;AAAlB,AAAA,oBAAAP;AAAA,eAAAA,XAASM;AAAT,AACE,QAACA,yCAAAA,iDAAAA,VAASF,6BAAAA;;AACVA;;;;;;AAPT;AAAA,gBAAA,AAAAsB,eAAAf;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;;AASA,IAAAqB,cAAA,AAAApB,cAAcF;IAAduB,gBAAA;IAAAC,gBAAA;IAAAC,YAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,YAAAD;AAAA,IAAAE,cAAA,AAAAH,mDAAAE;QAAA,AAAAlB,4CAAAmB,YAAA,IAAA,hEAAS1C;QAAT,AAAAuB,4CAAAmB,YAAA,IAAA,hEAAWzC;AAAX,AAAA,AACE,AAAAG,uDAAA,+FAAA,ZAAuBJ,EAAEC;kBAAIQ,EAAEwB;AAA/B,AACE,0CAAA,0GAAA,7IAACnB,sIAA4BT,0FAAQI,EAAEwB;;;;AAF3C;AAAA,gBAAAK;gBAAAC;gBAAAC;gBAAA,CAAAC,YAAA;;;;;;;AAAA,IAAAjB,qBAAA,AAAAN,cAAAoB;AAAA,AAAA,GAAAd;AAAA,AAAA,IAAAc,kBAAAd;AAAA,AAAA,GAAA,AAAAC,6BAAAa;AAAA,IAAAZ,kBAAA,AAAAC,sBAAAW;AAAA,AAAA,gBAAA,AAAAV,qBAAAU;gBAAAZ;gBAAA,AAAAG,gBAAAH;gBAAA;;;;;;;AAAA,IAAAiB,cAAA,AAAAZ,gBAAAO;QAAA,AAAAf,4CAAAoB,YAAA,IAAA,hEAAS3C;QAAT,AAAAuB,4CAAAoB,YAAA,IAAA,hEAAW1C;AAAX,AAAA,AACE,AAAAG,uDAAA,+FAAA,ZAAuBJ,EAAEC;kBAAIQ,EAAEwB;AAA/B,AACE,0CAAA,0GAAA,7IAACnB,sIAA4BT,0FAAQI,EAAEwB;;;;AAF3C;AAAA,gBAAA,AAAAD,eAAAM;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;;;AAIN,2DAAA,AAAA,3DAACvB,qCAAU6B;AACX,2DAAA,AAAA,3DAAC7B,qCAAU8B;AACX,2DAAA,AAAA,3DAAC9B,qCAAU+B;AACX,2DAAA,AAAA,3DAAC/B,qCAAUgC;AACX,8DAAA,AAAA,9DAAChC,qCAAUiC;AACX,iEAAA,AAAA,jEAACjC,qCAAUkC;AACX,4DAAA,AAAA,5DAAClC,qCAAUmC;AACX,6DAAA,AAAA,7DAAC/C,oCAASgD;AACV,6DAAA,AAAA,7DAAChD,oCAASiD;AACV,mEAAA,AAAA,nEAACjD,oCAASkD;AACV,sEAAA,AAAA,tEAAClD,oCAASmD;AACV,4DAAA,AAAA,5DAACnD,oCAASoD;AACV,8DAAA,AAAA,9DAACpD,oCAASqD;AAEV,0DAAA,AAAA,1DAACrD,oCAASsD;AACV,0DAAA,AAAA,1DAACtD,oCAASuD;AACV,0DAAA,AAAA,1DAACvD,oCAASwD;AACV,0DAAA,AAAA,1DAACxD,oCAASyD;AACV,0DAAA,AAAA,1DAACzD,oCAAS0D;AAEV,2DAAA,AAAA,3DAAC1D,oCAAS2D;AACV,2DAAA,AAAA,3DAAC3D,oCAAS4D;AACV,2DAAA,AAAA,3DAAC5D,oCAAS6D;AACV,4DAAA,AAAA,5DAACjD,qCAAUiD;AACX,2DAAA,AAAA,3DAAC7D,oCAAS8D;AAEV,2DAAA,AAAA,3DAAC9D,oCAAS+D;AACV,2DAAA,AAAA,3DAAC/D,oCAASgE;AACV,2DAAA,AAAA,3DAAChE,oCAASiE;AACV,2DAAA,AAAA,3DAACjE,oCAASkE;AACV,2DAAA,AAAA,3DAAClE,oCAASmE;AACV,2DAAA,AAAA,3DAACnE,oCAASoE;AAEV,0DAAA,AAAA,1DAACpE,oCAASqE;AACV,2DAAA,AAAA,3DAACrE,oCAASsE;AAEV,0DAAA,AAAA,1DAACtE,oCAASuE;AAEV,IAAMC,aAAI,oCAAA,AAAA,pCAACnE;IACLoE,aAAI,oCAAA,AAAA,pCAACpE;AADX,AAEE,AAAAqE,mEAAA,mFAAA,2GAAA,WAAiCpE;AAAjC,AACE,IAAMA,QAAE,AAACP,mCAAgBO;AAAzB,AACE,OAACpB,0CACA,iBAAAyF,YAAK,CAACH,2CAAAA,kDAAAA,TAAIlE,8BAAAA;IAAVsE,YACK,qFAAA,4BAAA,hHAACJ,2CAAAA,gDAAAA;AADN,AAAA,4FAAAG,UAAAC,kCAAAD,UAAAC,1IAACH,2CAAAA,gEAAAA;;;;AAGN,AAAAI,oEAAA,mFAAA,2GAAA,WAAkCvE;AAAlC,AACE,IAAMA,QAAE,AAACP,mCAAgBO;AAAzB,AACE,OAACpB,0CACA,iBAAA4F,YAAK,CAACN,2CAAAA,kDAAAA,TAAIlE,8BAAAA;IAAVyE,YAAa,qFAAA,6BAAA,jHAACP,2CAAAA,iDAAAA;AAAd,AAAA,4FAAAM,UAAAC,kCAAAD,UAAAC,1IAACN,2CAAAA,gEAAAA;;;AAER,0DAAA,AAAA,1DAACzE,oCAASgF;AAEV,wEAAA,AAAA,xEAACpE,qCAAUqE;AACX,kEAAA,AAAA,lEAACrE,qCAAUsE;AACX,gEAAA,AAAA,hEAAClF,oCAASmF;AACV,gEAAA,AAAA,hEAACnF,oCAASoF;AACV,gEAAA,AAAA,hEAACpF,oCAASqF;AACV,4DAAA,AAAA,5DAACrF,oCAASsF;AACV,gEAAA,AAAA,hEAACtF,oCAASuF;AACV,mEAAA,AAAA,nEAAC3E,qCAAU4E;AACX,qEAAA,AAAA,rEAAC5E,qCAAU6E;AAEX,2DAAA,AAAA,3DAAC7E,qCAAU8E;AACX,2DAAA,AAAA,3DAAC9E,qCAAU+E;AAKX,AAAAC,8EAAA,mFAAA,2GAAA,WAAsC5G;AAAtC,AAAA;;AAEA,AAAA6G,uEAAA,4GAAA,zBAAuB9G,oCAASuB;AAAhC,AAAmCA;;AACnC,AAAAuF,uEAAA,mFAAA,2GAAA,WAAqCvF;AAArC,AACE,OAACpB,0CACA,AAAC4G,uCACA,AAAC/F,mCAAgBO;;AAErB,AAAeyF,+CACb,AAACC,kBAAQH;AAEX;;;;;;;;2DAAA,3DAAeI,6HAOZ9G;AAPH,AAQE,GAAI,AAACE,iDAAgBF;AACnB,OAAC4G,6CAAkB5G;;AACnBA","names":["cljs.core/PROTOCOL_SENTINEL","cljs.core/Symbol","_","o","sicmutils.abstract.number/literal-number","x","sicmutils.expression/make-literal","sicmutils.abstract.number/literal-number?","sicmutils.expression/literal?","cljs.core._EQ_","sicmutils.expression/literal-type","sicmutils.abstract.number/abstract-number?","cljs.core.derive","sicmutils.value/=","sicmutils.value/seqtype","l","r","sicmutils.expression/expression-of","sicmutils.abstract.number/defunary","generic-op","op-sym","temp__5751__auto__","op","sicmutils.numsymb/symbolic-operator","a","newexp","G__100790","simplify","sicmutils.numsymb/*incremental-simplifier*","sicmutils.expression/literal-apply","sicmutils.abstract.number/defbinary","pairs","seq__100791","cljs.core/seq","chunk__100792","count__100793","i__100794","vec__100807","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__100812","cljs.core/first","cljs.core/next","b","G__100810","G__100811","G__100815","G__100816","seq__100817","chunk__100818","count__100819","i__100820","vec__100831","vec__100838","sicmutils.generic/add","sicmutils.generic/sub","sicmutils.generic/mul","sicmutils.generic/div","sicmutils.generic/modulo","sicmutils.generic/remainder","sicmutils.generic/expt","sicmutils.generic/negate","sicmutils.generic/invert","sicmutils.generic/integer-part","sicmutils.generic/fractional-part","sicmutils.generic/floor","sicmutils.generic/ceiling","sicmutils.generic/sin","sicmutils.generic/cos","sicmutils.generic/tan","sicmutils.generic/sec","sicmutils.generic/csc","sicmutils.generic/asin","sicmutils.generic/acos","sicmutils.generic/atan","sicmutils.generic/acot","sicmutils.generic/sinh","sicmutils.generic/cosh","sicmutils.generic/tanh","sicmutils.generic/coth","sicmutils.generic/sech","sicmutils.generic/csch","sicmutils.generic/abs","sicmutils.generic/sqrt","sicmutils.generic/log","log","div","sicmutils.generic/log2","G__100845","G__100846","sicmutils.generic/log10","G__100847","G__100848","sicmutils.generic/exp","sicmutils.generic/make-rectangular","sicmutils.generic/make-polar","sicmutils.generic/real-part","sicmutils.generic/imag-part","sicmutils.generic/magnitude","sicmutils.generic/angle","sicmutils.generic/conjugate","sicmutils.generic/dot-product","sicmutils.generic/inner-product","sicmutils.generic/gcd","sicmutils.generic/lcm","sicmutils.generic/negative?","sicmutils.generic/simplify","sicmutils.simplify/simplify-expression","sicmutils.abstract.number/memoized-simplify","cljs.core/memoize","sicmutils.abstract.number/simplify-numerical-expression"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.abstract.number\n  \"Symbolic expressions in SICMUtils are created through the [[literal-number]]\n  constructor, or implicitly by performing arithmetic between symbols and\n  numbers.\n\n  This namespace implements the [[literal-number]] constructor and installs the\n  underlying type into the generic arithmetic system.\"\n  (:require [sicmutils.expression :as x]\n            [sicmutils.generic :as g]\n            [sicmutils.numsymb :as sym]\n            [sicmutils.simplify :as ss]\n            [sicmutils.value :as v])\n  #?(:clj\n     (:import (clojure.lang Symbol))))\n\n(extend-type Symbol\n  v/Numerical\n  (numerical? [_] true)\n\n  v/Value\n  (zero? [_] false)\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [_] 0)\n  (one-like [_] 1)\n  (identity-like [_] 1)\n  (exact? [_] false)\n  (freeze [o] o)\n  (kind [_] Symbol))\n\n(defn literal-number\n  \"Returns its argument, wrapped in a marker type that responds to the generic\n  operations registered in [[sicmutils.numsymb]].\n\n  Symbols are automatically treated as [[literal-number]] instances, so\n\n  ```clojure\n  (* 10 (literal-number 'x))\n  ```\n\n  is equivalent to\n\n  ```clojure\n  (* 10 'x)\n  ```\n\n  If you pass an actual number, sicmutils will attempt to preserve exact values\n  through various operations:\n\n  ```clojure\n  (g/+ 1 (g/cos (g/* 2 (literal-number 4))))\n  ;;=> (+ 1 (cos 8))\n  ```\n\n  Notice that the `(g/* 2 ...)` is evaluated, but `cos` evaluation is deferred,\n  since the result is inexact. On the other hand, if the number is inexact to\n  begin with:\n\n  ```clojure\n  (g/+ 1 (g/cos (g/* 2 (literal-number 2.2))))\n  ;;=> 0.6926671300215806\n  ```\n\n  the system will go ahead and evaluate it.\"\n  [x]\n  (x/make-literal ::x/numeric x))\n\n(defn literal-number?\n  \"Returns true if `x` is an explicit symbolic expression or something passed to\n  `literal-number`, false otherwise.\n\n  See [[abstract-number?]] for a similar function that also responds true to\n  symbols.\"\n  [x]\n  (and (x/literal? x)\n       (= (x/literal-type x) ::x/numeric)))\n\n(defn abstract-number?\n  \"Returns true if `x` is:\n\n  - a symbolic expression\n  - some object wrapped by a call to [[literal-number]]\n  - a symbol (which implicitly acts as a [[literal-number]])\n\n  See [[literal-number?]] for a similar function that won't respond true to\n  symbols, only to explicit symbolic expressions or wrapped literal numbers.\"\n  [x]\n  (or (literal-number? x)\n      (symbol? x)))\n\n;; ## Generic Installation\n\n(derive Symbol ::x/numeric)\n(derive ::x/numeric ::v/scalar)\n\n;; This installs equality into `v/=` between symbolic expressions (and symbols,\n;; see inheritance above), sequences where appropriate, and anything in the\n;; standard numeric tower.\n\n(defmethod v/= [Symbol v/seqtype] [_ _] false)\n(defmethod v/= [v/seqtype Symbol] [_ _] false)\n(defmethod v/= [Symbol ::v/number] [_ _] false)\n(defmethod v/= [::v/number Symbol] [_ _] false)\n(defmethod v/= [::x/numeric v/seqtype] [l r] (v/= (x/expression-of l) r))\n(defmethod v/= [v/seqtype ::x/numeric] [l r] (v/= l (x/expression-of r)))\n(defmethod v/= [::x/numeric ::v/number] [l r] (v/= (x/expression-of l) r))\n(defmethod v/= [::v/number ::x/numeric] [l r] (v/= l (x/expression-of r)))\n(defmethod v/= [::x/numeric ::x/numeric] [l r]\n  (= (x/expression-of l)\n     (x/expression-of r)))\n\n(defn- defunary [generic-op op-sym]\n  (if-let [op (sym/symbolic-operator op-sym)]\n    (defmethod generic-op [::x/numeric] [a]\n      (let [newexp (op (x/expression-of a))]\n        (literal-number\n         (if-let [simplify sym/*incremental-simplifier*]\n           (simplify newexp)\n           newexp))))\n\n    (defmethod generic-op [::x/numeric] [a]\n      (x/literal-apply ::x/numeric op-sym [a]))))\n\n(defn- defbinary [generic-op op-sym]\n  (let [pairs [[::x/numeric ::x/numeric]\n               [::v/number ::x/numeric]\n               [::x/numeric ::v/number]]]\n    (if-let [op (sym/symbolic-operator op-sym)]\n      (doseq [[l r] pairs]\n        (defmethod generic-op [l r] [a b]\n          (let [newexp (op (x/expression-of a)\n                           (x/expression-of b))]\n            (literal-number\n             (if-let [simplify sym/*incremental-simplifier*]\n               (simplify newexp)\n               newexp)))))\n\n      (doseq [[l r] pairs]\n        (defmethod generic-op [l r] [a b]\n          (x/literal-apply ::x/numeric op-sym [a b]))))))\n\n(defbinary g/add '+)\n(defbinary g/sub '-)\n(defbinary g/mul '*)\n(defbinary g/div '/)\n(defbinary g/modulo 'modulo)\n(defbinary g/remainder 'remainder)\n(defbinary g/expt 'expt)\n(defunary g/negate 'negate)\n(defunary g/invert 'invert)\n(defunary g/integer-part 'integer-part)\n(defunary g/fractional-part 'fractional-part)\n(defunary g/floor 'floor)\n(defunary g/ceiling 'ceiling)\n\n(defunary g/sin 'sin)\n(defunary g/cos 'cos)\n(defunary g/tan 'tan)\n(defunary g/sec 'sec)\n(defunary g/csc 'csc)\n\n(defunary g/asin 'asin)\n(defunary g/acos 'acos)\n(defunary g/atan 'atan)\n(defbinary g/atan 'atan)\n(defunary g/acot 'acot)\n\n(defunary g/sinh 'sinh)\n(defunary g/cosh 'cosh)\n(defunary g/tanh 'tanh)\n(defunary g/coth 'coth)\n(defunary g/sech 'sech)\n(defunary g/csch 'csch)\n\n(defunary g/abs 'abs)\n(defunary g/sqrt 'sqrt)\n\n(defunary g/log 'log)\n\n(let [log (sym/symbolic-operator 'log)\n      div (sym/symbolic-operator '/)]\n  (defmethod g/log2 [::x/numeric] [a]\n    (let [a (x/expression-of a)]\n      (literal-number\n       (div (log a)\n            (log 2)))))\n\n  (defmethod g/log10 [::x/numeric] [a]\n    (let [a (x/expression-of a)]\n      (literal-number\n       (div (log a) (log 10))))))\n\n(defunary g/exp 'exp)\n\n(defbinary g/make-rectangular 'make-rectangular)\n(defbinary g/make-polar 'make-polar)\n(defunary g/real-part 'real-part)\n(defunary g/imag-part 'imag-part)\n(defunary g/magnitude 'magnitude)\n(defunary g/angle 'angle)\n(defunary g/conjugate 'conjugate)\n(defbinary g/dot-product 'dot-product)\n(defbinary g/inner-product 'inner-product)\n\n(defbinary g/gcd 'gcd)\n(defbinary g/lcm 'lcm)\n\n;; We currently default to `false` here; once literals gain metadata saying\n;; whether or not they are negative, we return /something/. Maybe this is\n;; ill-founded, but it was required for some polynomial code.\n(defmethod g/negative? [::x/numeric] [_] false)\n\n(defmethod g/simplify [Symbol] [a] a)\n(defmethod g/simplify [::x/numeric] [a]\n  (literal-number\n   (ss/simplify-expression\n    (x/expression-of a))))\n\n(def ^:private memoized-simplify\n  (memoize g/simplify))\n\n(defn ^:no-doc simplify-numerical-expression\n  \"This function will only simplify instances of [[expression/Literal]]; if `x` is\n  of that type, [[simplify-numerical-expression]] acts as a memoized version\n  of [[generic/simplify]]. Else, acts as identity.\n\n  This trick is used in [[sicmutils.calculus.manifold]] to memoize\n  simplification _only_ for non-[[differential/Differential]] types.\"\n  [x]\n  (if (literal-number? x)\n    (memoized-simplify x)\n    x))\n"]}