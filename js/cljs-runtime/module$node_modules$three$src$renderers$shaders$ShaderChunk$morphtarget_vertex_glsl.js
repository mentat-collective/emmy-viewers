shadow$provide.module$node_modules$three$src$renderers$shaders$ShaderChunk$morphtarget_vertex_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;exports.default="\n#ifdef USE_MORPHTARGETS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in position \x3d sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\ttransformed *\x3d morphTargetBaseInfluence;\n\n\t#ifdef MORPHTARGETS_TEXTURE\n\n\t\tfor ( int i \x3d 0; i \x3c MORPHTARGETS_COUNT; i ++ ) {\n\n\t\t\t#ifndef USE_MORPHNORMALS\n\n\t\t\t\tif ( morphTargetInfluences[ i ] !\x3d 0.0 ) transformed +\x3d getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\n\t\t\t#else\n\n\t\t\t\tif ( morphTargetInfluences[ i ] !\x3d 0.0 ) transformed +\x3d getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\n\t\t\t#endif\n\n\t\t}\n\n\t#else\n\n\t\ttransformed +\x3d morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed +\x3d morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed +\x3d morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed +\x3d morphTarget3 * morphTargetInfluences[ 3 ];\n\n\t\t#ifndef USE_MORPHNORMALS\n\n\t\t\ttransformed +\x3d morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed +\x3d morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed +\x3d morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed +\x3d morphTarget7 * morphTargetInfluences[ 7 ];\n\n\t\t#endif\n\n\t#endif\n\n#endif\n"}
//# sourceMappingURL=module$node_modules$three$src$renderers$shaders$ShaderChunk$morphtarget_vertex_glsl.js.map
