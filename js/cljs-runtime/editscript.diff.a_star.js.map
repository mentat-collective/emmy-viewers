{"version":3,"sources":["editscript/diff/a_star.cljc"],"mappings":"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","names":["editscript$diff$a-star$INode$get_path$dyn","x__5393__auto__","m__5394__auto__","editscript.diff.a-star/get-path","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","editscript$diff$a-star$INode$get_value$dyn","editscript.diff.a-star/get-value","editscript$diff$a-star$INode$get_children$dyn","editscript.diff.a-star/get-children","editscript$diff$a-star$INode$add_child$dyn","editscript.diff.a-star/add-child","editscript$diff$a-star$INode$get_key$dyn","editscript.diff.a-star/get-key","editscript$diff$a-star$INode$get_parent$dyn","editscript.diff.a-star/get-parent","editscript$diff$a-star$INode$get_first$dyn","editscript.diff.a-star/get-first","editscript$diff$a-star$INode$get_last$dyn","editscript.diff.a-star/get-last","editscript$diff$a-star$INode$get_next$dyn","editscript.diff.a-star/get-next","editscript$diff$a-star$INode$set_next$dyn","editscript.diff.a-star/set-next","editscript$diff$a-star$INode$set_order$dyn","editscript.diff.a-star/set-order","editscript$diff$a-star$INode$get_order$dyn","editscript.diff.a-star/get-order","editscript$diff$a-star$INode$get_size$dyn","editscript.diff.a-star/get-size","editscript$diff$a-star$INode$set_size$dyn","editscript.diff.a-star/set-size","editscript.diff.a-star/INode","this","node","o","s","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","editscript.diff.a-star/Node","editscript.diff.a-star/->Node","path","value","parent","children","first","last","next","index","order","size","_","cljs.core/peek","n","cljs.core/long","cljs.core.assoc","editscript.diff.a-star/associative-children","data","cljs.core/reduce-kv","k","v","G__75575","G__75576","G__75577","G__75578","editscript.diff.a-star/index*","cljs.core.conj","editscript.diff.a-star/set-children","seq__75581","cljs.core/seq","chunk__75582","count__75583","i__75584","temp__5753__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","x","G__75595","G__75596","G__75597","G__75598","G__75599","G__75600","G__75601","G__75602","editscript.diff.a-star/list-children","cljs.core.reduce","i","G__75609","G__75610","G__75611","G__75612","editscript.diff.a-star/inc-order","cljs.core/-vreset!","cljs.core/-deref","editscript.diff.a-star/index-collection","type","G__75617","cljs.core/Keyword","js/Error","cs","cljs.core/vals","cljs.core.map","cljs.core/+","G__75625","cljs.core/deref","editscript.diff.a-star/index-value","editscript.edit/get-type","cljs.core._EQ_","editscript.diff.a-star/index","cljs.core/volatile!","editscript.diff.a-star/coord-hash","a","b","editscript.util.common/szudzik","editscript.diff.a-star/Coord","editscript.diff.a-star/->Coord","that","cljs.core/-hash","editscript.diff.a-star/get-coord","coord","editscript$diff$a-star$IStep$operator$dyn","editscript.diff.a-star/operator","editscript$diff$a-star$IStep$current$dyn","editscript.diff.a-star/current","editscript$diff$a-star$IStep$neighbor$dyn","editscript.diff.a-star/neighbor","editscript.diff.a-star/IStep","editscript.diff.a-star/Step","editscript.diff.a-star/->Step","op","cur","nbr","editscript.diff.a-star/get-step","step","cljs.core.juxt","editscript$diff$a-star$IState$get_came$dyn","editscript.diff.a-star/get-came","editscript$diff$a-star$IState$set_came$dyn","editscript.diff.a-star/set-came","editscript$diff$a-star$IState$get_open$dyn","editscript.diff.a-star/get-open","editscript$diff$a-star$IState$set_open$dyn","editscript.diff.a-star/set-open","editscript$diff$a-star$IState$get_g$dyn","editscript.diff.a-star/get-g","editscript$diff$a-star$IState$set_g$dyn","editscript.diff.a-star/set-g","editscript.diff.a-star/IState","came","open","g","editscript.diff.a-star/State","editscript.diff.a-star/->State","c","got","editscript.diff.a-star/get-state","state","editscript.diff.a-star/access-g","cljs.core.get","editscript.diff.a_star.goog$module$goog$math$Long.getMaxValue","editscript.diff.a-star/compute-cost","opts","gc","G__75761","sb","G__75762","G__75763","G__75764","G__75765","editscript.diff.a-star/diff*","p__75766","vec__75767","cljs.core.nth","editscript.diff.a-star/heuristic","end","gx","gy","G__75770","vec__75771","vec__75774","na","nb","ra","rb","y","dy","dx","editscript.diff.a-star/explore","goal","vec__75777","vec__75780","came'","tmp-g","G__75783","cljs.core.assoc_BANG_","editscript.diff.a-star/next-node","or__5045__auto__","editscript.diff.a-star/vec-frontier","vec__75790","vec__75793","a=b","x=gx","x<gx","y<gy","na'","nb'","G__75796","editscript.diff.a-star/map-frontier","init","vec__75800","vec__75803","ka","kb","cljs.core/contains?","va","vb","mb","cb","startb","enda","G__75806","editscript.diff.a-star/frontier","G__75807","editscript.diff.a-star/A*","cljs.core/transient","editscript.util.pairing.priority_map","vec__75816","cljs.core/empty?","cljs.core.ex_info","vec__75819","cost","cljs.core/persistent!","p1__75808#","p2__75809#","cljs.core/pop","editscript.diff.a-star/vec-fn","cljs.core/vec","editscript.diff.a-star/use-quick","edits","editscript.util.common/vec-edits","G__75830","vec__75831","seq__75832","first__75833","vec__75838","seq__75839","first__75840","ops","m","cljs.core/integer?","cljs.core.sequence","cljs.core.concat","cljs.core/List","G__75841","root","sa","typea","update","r","and__5043__auto__","fexpr__75848","p1__75847#","cc+1","res","editscript.diff.a-star/index-key?","G__75852","fexpr__75851","editscript.diff.a-star/adjust-delete-insert","trie","newp","prev","left","vec__75859","seq__75860","first__75861","ks","d","cljs.core.get_in","fexpr__75862","seen","cljs.core/assoc-in","G__75865","editscript.diff.a-star/adjust-append","path'","editscript.diff.a-star/convert-path","roota","p__75873","map__75875","cljs.core/--destructure-map","editscript.diff.a-star/write-script","steps","script","str-diff","p__75876","vec__75877","G__75881","editscript.edit/delete-data","cljs.core.not_EQ_","editscript.util.common/diff-str","editscript.edit/replace-data","editscript.edit/add-data","editscript.diff.a-star/trace*","temp__5751__auto__","vec__75884","vec__75887","vec__75891","var_args","G__75895","editscript.diff.a-star/trace","editscript.diff.a_star.trace","G__75898","editscript.diff.a-star/diff","editscript.diff.a_star.diff","editscript.edit/edits->script","rootb"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.diff.a-star\n  (:require [editscript.edit :as e]\n            [editscript.util.pairing :as pa]\n            [editscript.util.common :as co]\n            #?(:cljs [goog.math.Long :refer [getMaxValue]]))\n  #?(:clj (:import [clojure.lang PersistentVector Keyword]\n                   [java.io Writer]\n                   [java.lang Comparable])))\n\n#?(:clj (set! *warn-on-reflection* true))\n#?(:clj (set! *unchecked-math* :warn-on-boxed))\n\n;; indexing\n\n(defprotocol INode\n  (get-path [this] \"Get the path to the node from root\")\n  (get-value [this] \"Get the actual data\")\n  (get-children [this] \"Get all children node in a map\")\n  (add-child [this node] \"Add a child node\")\n  (get-key [this] \"Get the key of this node\")\n  (get-parent [this] \"Get the parent node\")\n  (get-first [this] \"Get the first child node\")\n  (get-last [this] \"Get the last child node\")\n  (get-next [this] \"Get the next sibling node\")\n  (set-next [this node] \"Set the next sibling node\")\n  (set-order [this o] \"Set the traversal order of this node\")\n  (^long get-order [this] \"Get the order of this node in traversal\")\n  (^long get-size [this] \"Get the size of sub-tree, used to estimate cost\")\n  (set-size [this s] \"Set the size of sub-tree\"))\n\n(deftype Node [^PersistentVector path\n               value\n               parent\n               ^:unsynchronized-mutable children\n               ^:unsynchronized-mutable first\n               ^:unsynchronized-mutable last\n               ^:unsynchronized-mutable next\n               ^:unsynchronized-mutable index\n               ^:unsynchronized-mutable ^long order\n               ^:unsynchronized-mutable ^long size]\n  INode\n  (get-path [_] path)\n  (get-key [this] (-> this get-path peek))\n  (get-value [_] value)\n  (get-parent [_] parent)\n  (get-children [_] children)\n  (get-first [_] first)\n  (get-last [_] last)\n  (get-next [_] next)\n  (set-next [_ n] (set! next n))\n  (get-order [_] order)\n  (set-order [this o] (set! order (long o)) this)\n  (get-size [_] size)\n  (set-size [this s] (set! size (long s)) this)\n  (add-child [_ node]\n    (set! children (assoc children (get-key node) node))\n    (when last (set-next last node))\n    (when-not first (set! first node))\n    (set! last node)\n    node))\n\n#?(:clj\n   (defmethod print-method Node\n     [x ^Writer writer]\n     (print-method {:value    (get-value x)\n                    :order    (get-order x)\n                    :children (get-children x)}\n                   writer)))\n\n(declare index*)\n\n(defn- associative-children\n  \"map and vector are associative\"\n  [order path data parent]\n  (reduce-kv\n   (fn [_ k v]\n     (index* order (conj path k) v parent))\n   nil\n   data))\n\n(defn- set-children\n  \"set is a map of keys to themselves\"\n  [order path data parent]\n  (doseq [x data]\n    (index* order (conj path x) x parent)))\n\n(defn- list-children\n  \"add index as key\"\n  [order path data parent]\n  (reduce\n   (fn [i x]\n     (index* order (conj path i) x parent)\n     (inc ^long i))\n   0\n   data))\n\n(defn- inc-order\n  \"order value reflects the size of elements\"\n  [order ^long size]\n  (vswap! order (fn [o] (+ size ^long o))))\n\n(defn- index-collection\n  [type order path data parent]\n  (let [node (->Node path data parent {} nil nil nil 0 0 1)]\n    (add-child parent node)\n    (case type\n      (:map :vec) (associative-children order path data node)\n      :set        (set-children order path data node)\n      :lst        (list-children order path data node))\n    (let [^long cs (->> (get-children node) vals (map get-size) (reduce +))\n          size     (+ (get-size node) cs)]\n      (doto node\n        (set-order @order)\n        (set-size size))\n      (inc-order order size))\n    node))\n\n(defn- index-value\n  [order path data parent]\n  (let [node (->Node path data parent nil nil nil nil 0 @order 1)]\n    (add-child parent node)\n    (inc-order order 1)\n    node))\n\n(defn- index*\n  [order path data parent]\n  (let [type (e/get-type data)]\n    (if (or (= type :val) (= type :str))\n      (index-value order path data parent)\n      (index-collection type order path data parent))))\n\n(defn- index\n  \"Traverse data to build an indexing tree of Nodes,\n  compute path, sizes of sub-trees, siblings, etc. for each Node.\n  This takes little time\"\n  [data]\n  (let [order (volatile! 0)]\n    (index* order [] data (->Node [] ::dummy nil {} nil nil nil 0 -1 0))))\n\n;; diffing\n\n(defn- coord-hash\n  [a b]\n  (co/szudzik (get-order a) (get-order b)))\n\n#?(:clj\n   (deftype Coord [^Node a\n                   ^Node b]\n     ;; Java's native hash is too slow,\n     ;; overriding hashCode significantly speeds things up\n     Object\n     (hashCode [_] (coord-hash a b))\n     (equals [this that]\n       (= (.hashCode this) (.hashCode that)))\n     (toString [_]\n       (str \"[\" (get-value a) \",\" (get-value b) \"]\"))\n\n     Comparable\n     (compareTo [this that]\n       (- (.hashCode this) (.hashCode that))))\n\n   :cljs\n   (deftype Coord [^Node a\n                   ^Node b]\n     IHash\n     (-hash [_] (coord-hash a b))\n\n     IEquiv\n     (-equiv [this that]\n       (= (-hash this) (-hash that)))\n\n     IComparable\n     (-compare [this that]\n       (- (-hash this) (-hash that)))))\n\n(defn- get-coord\n  [^Coord coord]\n  [(.-a coord) (.-b coord)])\n\n(defprotocol IStep\n  (operator [this] \"Operator to try\")\n  (current [this] \"Starting pair of nodes\")\n  (neighbor [this] \"Destination pair of nodes\"))\n\n(deftype Step [^Keyword op\n               ^Coord cur\n               ^Coord nbr]\n  IStep\n  (operator [_] op)\n  (current [_] cur)\n  (neighbor [_] nbr))\n\n#?(:clj\n   (defmethod print-method Step\n     [x ^Writer writer]\n     (print-method {:op  (operator x)\n                    :cur (current x)\n                    :nbr (neighbor x)}\n                   writer)))\n\n(defn- get-step\n  [step]\n  ((juxt operator current neighbor) step))\n\n(defprotocol IState\n  (get-came [this] \"Get the local succession map\")\n  (set-came [this came] \"Set the local succession map\")\n  (get-open [this] \"Get the open priority queue\")\n  (set-open [this open] \"Set the open priority queue\")\n  (get-g [this] \"Get the g cost map\")\n  (set-g [this g] \"Set the g cost map\"))\n\n(deftype State [^:unsynchronized-mutable came\n                ^:unsynchronized-mutable open\n                ^:unsynchronized-mutable g]\n  IState\n  (get-came [_] came)\n  (set-came [this c] (set! came c) this)\n  (get-open [_] open)\n  (set-open [this o] (set! open o) this)\n  (get-g [_] g)\n  (set-g [this got] (set! g got) this))\n\n(defn- get-state\n  [state]\n  ((juxt get-came get-open get-g) state))\n\n(defn- access-g\n  [g cur]\n  (get g cur #?(:clj Long/MAX_VALUE\n                :cljs (getMaxValue))))\n\n(declare diff*)\n\n(defn- compute-cost\n  [^Coord cur came g op opts]\n  (let [^long gc (access-g g cur)]\n    (case op\n      :=      gc\n      ;; delete only cost 1, for not including deleted data in script\n      :-      (inc gc)\n      ;; these cost the size of included data, plus 1\n      (:a :i) (let [sb (get-size (.-b cur))]\n                (+ gc (inc ^long sb)))\n      :r      (+ gc ^long (diff* (.-a cur) (.-b cur) came opts)))))\n\n(defn- heuristic\n  \"A simplistic but optimistic estimate of the cost to reach goal when at (x y).\n\n  For nested structure, multiple deletion may be merged into one.\n  Also, because addition/replacement requires new value to be present in\n  editscript, whereas deletion does not, we assign estimate differently. \"\n  ^long [type cur end [gx gy]]\n  (case type\n    (:map :set) 0\n    (:vec :lst) (let [[na nb] (get-coord cur)\n                      [ra rb] (get-coord end)\n                      x       (if (identical? ra na) gx (get-order na))\n                      y       (if (identical? rb nb) gy (get-order nb))\n                      dy      (- ^long gy ^long y)\n                      dx      (- ^long gx ^long x)]\n                  (cond\n                    (== dx 0) dy\n                    (== dy 0) 1\n                    (> dx dy) 3\n                    (< dx dy) (- dy dx)\n                    :else     2))))\n\n(defn- explore\n  [type end came goal state step opts]\n  (let [[came' open g] (get-state state)\n        [op cur nbr]   (get-step step)\n        tmp-g          (compute-cost cur came g op opts)]\n    (if (>= ^long tmp-g ^long (access-g g nbr))\n      state\n      (doto state\n        (set-came (assoc! came' nbr [cur op]))\n        (set-open (assoc open nbr\n                         (+ ^long tmp-g ^long (heuristic type nbr end goal))))\n        (set-g (assoc! g nbr tmp-g))))))\n\n(defn- next-node\n  [na ra]\n  (or (get-next na) ra))\n\n(defn- vec-frontier\n  [end cur]\n  (let [[ra rb] (get-coord end)\n        [na nb] (get-coord cur)\n        a=b     (= (get-value na) (get-value nb))\n        x=gx    (identical? na ra)\n        x<gx    (not x=gx)\n        y<gy    (not (identical? nb rb))\n        na'     (next-node na ra)\n        nb'     (next-node nb rb)]\n    (if (and x<gx y<gy a=b)\n      [(->Step := cur (->Coord na' nb'))]\n      (cond-> []\n        x<gx            (conj (->Step :- cur (->Coord na' nb)))  ; delete\n        (and x<gx y<gy) (conj (->Step :r cur (->Coord na' nb'))) ; replace\n        (and x=gx y<gy) (conj (->Step :a cur (->Coord na nb')))  ; append\n        (and x<gx y<gy) (conj (->Step :i cur (->Coord na nb'))))))) ; insert\n\n(defn- map-frontier\n  [^Coord init end cur]\n  (let [[ra rb] (get-coord end)\n        [na nb] (get-coord cur)\n        ka      (get-key na)\n        kb      (get-key nb)]\n    (if (identical? na ra)\n      ;; testing keys of b\n      [(->Step (if (contains? (get-value ra) kb) := :a)\n               cur (->Coord ra (next-node nb rb)))]\n      (let [va  (get-value na)\n            vb  (get-value nb)\n            mb  (get-value rb)\n            na' (next-node na ra)\n            cb  (get-children rb)]\n        (if (identical? na' ra)\n          ;; transition point from testing keys of a to that of b\n          (let [startb (->Coord ra (.-b init))\n                enda   (->Coord na (cb ka))]\n            (if (contains? mb ka)\n              (if (= ka kb)\n                [(->Step (if (= va vb) := :r) cur startb)]\n                [(->Step := cur enda)\n                 (->Step :r enda startb)])\n              [(->Step :- cur startb)]))\n          ;; testing keys of a\n          [(if (contains? mb ka)\n             (if (= ka kb)\n               (->Step (if (= va vb) := :r)\n                       cur (->Coord na' (or (cb (get-key na')) nb)))\n               (->Step := cur (->Coord na (cb ka))))\n             (->Step :- cur (->Coord na' nb)))])))))\n\n(defn- frontier\n  [type init end cur]\n  (case type\n    (:vec :lst) (vec-frontier end cur)\n    (:map :set) (map-frontier init end cur)))\n\n(defn- A*\n  [type ra rb came opts]\n  (let [end  (->Coord ra rb)\n        init (->Coord (get-first ra) (get-first rb))\n        goal [(get-order ra) (get-order rb)]]\n    (loop [state (->State (transient {})\n                          (pa/priority-map init (heuristic type init end goal))\n                          (transient {init 0}))]\n      (let [[came' open _] (get-state state)]\n        (if (empty? open)\n          (throw (ex-info \"A* diff fails to find a solution\" {:ra ra :rb rb}))\n          (let [[cur cost] (peek open)]\n            (if (= cur end)\n              (do (vswap! came assoc end (persistent! came'))\n                  cost)\n              (recur (reduce\n                       #(explore type end came goal %1 %2 opts)\n                       (set-open state (pop open))\n                       (frontier type init end cur))))))))))\n\n(defn- vec-fn\n  [node]\n  (let [v (get-value node)]\n    (if (= :vec (e/get-type v))\n      v\n      (vec v))))\n\n(defn- use-quick\n  [ra rb came opts]\n  (let [edits (co/vec-edits (vec-fn ra) (vec-fn rb) opts)]\n    (if (= edits :timeout)\n      edits\n      (loop [[op & ops] edits\n             na         (get-first ra)\n             nb         (get-first rb)\n             m          (transient {})\n             cost       0]\n        (if op\n          (let [na' (next-node na ra)\n                nb' (next-node nb rb)\n                cur (->Coord na nb)\n                sb  (get-size nb)]\n            (if (integer? op)\n              (recur (if (> ^long op 1) `[~(dec ^long op) ~@ops] ops)\n                     na' nb'\n                     (assoc! m (->Coord na' nb') [cur :=])\n                     (long cost))\n              (case op\n                :- (recur ops na' nb\n                          (assoc! m (->Coord na' nb) [cur op])\n                          (inc (long cost)))\n                :+ (recur ops na nb'\n                          (assoc! m (->Coord na nb')\n                                  [cur (if (identical? na ra) :a :i)])\n                          (+ (long cost) 1 (long sb)))\n                :r (recur ops na' nb'\n                          (assoc! m (->Coord na' nb') [cur op])\n                          (+ (long cost) 1 (long sb))))))\n          (let [root (->Coord ra rb)]\n            (vswap! came assoc root (persistent! m))\n            cost))))))\n\n(defn- diff*\n  ^long [ra rb came opts]\n  (let [sa     ^long (get-size ra)\n        sb     ^long (get-size rb)\n        va     (get-value ra)\n        vb     (get-value rb)\n        typea  (e/get-type va)\n        update #(vswap! came assoc (->Coord ra rb) {})]\n    (cond\n      ;; both are leaves, skip or replace\n      (= 1 sa sb)\n      (do (update)\n          (if (= va vb)\n            0\n            2))\n      ;; one of them is leaf, replace\n      (or (= 1 sa) (= 1 sb))\n      (do (update)\n          (inc ^long sb))\n      ;; non-empty coll with same type, drill down\n      (= typea (e/get-type vb))\n      (if (= va vb)\n        (do (update) 0)\n        (let [r (inc ^long sb)\n              a (if (and (#{:vec :lst} typea)\n                         (let [cc+1 #(-> % get-children count inc)]\n                           (or (= sa (cc+1 ra)) (= sb (cc+1 rb)))))\n                  ;; vec or lst contains leaves only, safe to use quick algo.\n                  (let [res (use-quick ra rb came opts)]\n                    (if (= res :timeout) (inc r) res))\n                  ;; otherwise run A*\n                  (A* typea ra rb came opts))]\n          (if (< r ^long a)\n            (do (update) r)\n            a)))\n      ;; types differ, can only replace\n      :else\n      (do (update)\n          (inc ^long sb)))))\n\n;; generating editscript\n\n(defn- index-key?\n  [node]\n  (#{:vec :lst} (-> node get-value e/get-type)))\n\n(defn- adjust-delete-insert\n  [trie op root path]\n  (if (= op :=)\n    path\n    (loop [newp []\n           prev []\n           node root\n           left path]\n      (if (seq left)\n        (let [[k & ks] left\n              ^long d  (get-in @trie (conj prev :delta) 0)]\n          (recur (conj newp (if (index-key? node) (+ ^long k d) k))\n                 (conj prev k)\n                 ((get-children node) k)\n                 ks))\n        (if (index-key? (get-parent node))\n          (let [seen    (conj (if (seq path) (pop path) path) :delta)\n                ^long d (get-in @trie seen 0)]\n            (vswap! trie assoc-in seen (case op :- (dec d) :i (inc d) d))\n            newp)\n          newp)))))\n\n(defn- adjust-append\n  [trie op na nb path path']\n  (if (= op :a)\n    (if (index-key? na)\n      (conj path' (let [seen    (conj path :delta)\n                        ^long d (get-in @trie seen 0)]\n                    (vswap! trie assoc-in seen (inc d))\n                    (+ d (-> na get-children count))))\n      (conj path' (get-key nb)))\n    path'))\n\n(defn- convert-path\n  [trie op roota na nb path]\n  (->> path\n       (adjust-delete-insert trie op roota)\n       (adjust-append trie op na nb path)))\n\n(defn- write-script\n  [steps roota script {:keys [str-diff]\n                       :or   {str-diff :none}\n                       :as   opts}]\n  (reduce\n    (fn [trie [op na nb]]\n      (let [path (convert-path trie op roota na nb (get-path na))\n            va   (get-value na)\n            vb   (get-value nb)]\n        (case op\n          :-      (e/delete-data script path)\n          :r      (if (and (= :str (e/get-type va) (e/get-type vb))\n                           (not= str-diff :none))\n                    (co/diff-str script path va vb opts)\n                    (e/replace-data script path vb))\n          (:a :i) (e/add-data script path vb)\n          nil)\n        trie))\n    (volatile! {:delta 0})\n    steps))\n\n(defn- trace*\n  [came cur steps]\n  (if-let [m (came cur)]\n    (if (seq m)\n      (loop [v (m cur)]\n        (if v\n          (let [[prev op] v\n                [na nb]   (get-coord prev)]\n            (if (and (came prev) (= op :r))\n              (trace* came prev steps)\n              (vswap! steps conj [op na nb]))\n            (recur (m prev)))\n          steps))\n      (let [[ra rb] (get-coord cur)]\n        (vswap! steps conj [(if (= (get-value ra) (get-value rb)) := :r)\n                            ra rb])\n        steps))\n    steps))\n\n(defn- trace\n  ([came cur]\n   @(trace* came cur (volatile! '())))\n  ([came ^Coord cur script opts]\n   (-> (trace came cur)\n       (write-script (.-a cur) script opts))))\n\n(defn diff\n  \"Create an EditScript that represents the minimal difference between `b` and `a`\"\n  ([a b]\n   (diff a b nil))\n  ([a b opts]\n   (let [script (e/edits->script [])]\n     (when-not (= a b)\n       (let [roota (index a)\n             rootb (index b)\n             came  (volatile! {})\n             cost  (diff* roota rootb came opts)]\n         ;; #?(:clj (let [total          (* (get-size roota) (get-size rootb))\n         ;;               ^long explored (reduce + (map count (vals @came)))]\n         ;;           (printf \"cost is %d, explored %d of %d - %.1f%%\\n\"\n         ;;                   cost explored total\n         ;;                   (* 100 (double (/ explored total))))))\n         (trace @came (->Coord roota rootb) script opts)\n         script))\n     script)))\n"]}