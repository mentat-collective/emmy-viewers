shadow$provide.module$node_modules$three$src$renderers$shaders$ShaderChunk$skinning_pars_vertex_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;exports.default="\n#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\n\tmat4 getBoneMatrix( const in float i ) {\n\n\t\tfloat j \x3d i * 4.0;\n\t\tfloat x \x3d mod( j, float( boneTextureSize ) );\n\t\tfloat y \x3d floor( j / float( boneTextureSize ) );\n\n\t\tfloat dx \x3d 1.0 / float( boneTextureSize );\n\t\tfloat dy \x3d 1.0 / float( boneTextureSize );\n\n\t\ty \x3d dy * ( y + 0.5 );\n\n\t\tvec4 v1 \x3d texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 \x3d texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 \x3d texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 \x3d texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\tmat4 bone \x3d mat4( v1, v2, v3, v4 );\n\n\t\treturn bone;\n\n\t}\n\n#endif\n"}
//# sourceMappingURL=module$node_modules$three$src$renderers$shaders$ShaderChunk$skinning_pars_vertex_glsl.js.map
