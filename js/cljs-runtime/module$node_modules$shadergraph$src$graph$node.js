shadow$provide.module$node_modules$shadergraph$src$graph$node=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Node=void 0;var _graph=require("module$node_modules$shadergraph$src$graph$graph"),_outlet=require("module$node_modules$shadergraph$src$graph$outlet");class Node{static initClass(){this.index=0}static id(_name){return++Node.index}constructor(owner,outlets){this.owner=owner;this.graph=null;this.inputs=[];this.outputs=[];this.all=[];this.outlets=
null;this.id=Node.id();this.setOutlets(outlets)}getIn(name){return Array.from(this.inputs).filter(outlet=>outlet.name===name)[0]}getOut(name){return Array.from(this.outputs).filter(outlet=>outlet.name===name)[0]}get(name){return this.getIn(name)||this.getOut(name)}setOutlets(outlets){if(null!=outlets){let outlet;if(null==this.outlets){this.outlets={};for(outlet of Array.from(outlets))outlet instanceof _outlet.Outlet||(outlet=_outlet.Outlet.make(outlet)),this._add(outlet);return}const match={};for(outlet of Array.from(outlets))match[[outlet.name,
outlet.inout,outlet.type].join("-")]=!0;for(let key in this.outlets)outlet=this.outlets[key],key=[outlet.name,outlet.inout,outlet.type].join("-"),match[key]?match[key]=outlet:this._remove(outlet);for(outlet of Array.from(outlets))outlets=match[[outlet.name,outlet.inout,outlet.type].join("-")],outlets instanceof _outlet.Outlet?this._morph(outlets,outlet):(outlet instanceof _outlet.Outlet||(outlet=_outlet.Outlet.make(outlet)),this._add(outlet));this}return this.outlets}connect(node,empty,force){let dest;
let source;const outlets={},hints={};for(dest of Array.from(node.inputs))if(force||!dest.input)({type:dests}=dest),node=dests+"/"+dest.hint,hints[node]||(hints[node]=dest),outlets[dests]=node=outlets[dests]||[],node.push(dest);force=this.outputs;force=force.filter(outlet=>!(empty&&outlet.output.length));for(source of Array.from(force.slice())){({type:dests}=source);node=dests+"/"+source.hint;var dests=outlets[dests];if(dest=hints[node])source.connect(dest),delete hints[node],dests.splice(dests.indexOf(dest),
1),force.splice(force.indexOf(source),1)}if(!force.length)return this;for(source of Array.from(force.slice()))({type:dests}=source),(dests=outlets[dests])&&dests.length&&source.connect(dests.shift());return this}disconnect(_node){let outlet;for(outlet of Array.from(this.inputs))outlet.disconnect();for(outlet of Array.from(this.outputs))outlet.disconnect();return this}_key(outlet){return[outlet.name,outlet.inout].join("-")}_add(outlet){const key=this._key(outlet);if(outlet.node)throw Error("Adding outlet to two nodes at once.");
if(this.outlets[key])throw Error(`Adding two identical outlets to same node. (${key})`);outlet.node=this;outlet.inout===_graph.Graph.IN&&this.inputs.push(outlet);outlet.inout===_graph.Graph.OUT&&this.outputs.push(outlet);this.all.push(outlet);return this.outlets[key]=outlet}_morph(existing,outlet){let key=this._key(outlet);delete this.outlets[key];existing.morph(outlet);key=this._key(outlet);return this.outlets[key]=outlet}_remove(outlet){const key=this._key(outlet);if(outlet.node!==this)throw Error("Removing outlet from wrong node.");
outlet.disconnect();outlet.node=null;delete this.outlets[key];outlet.inout===_graph.Graph.IN&&this.inputs.splice(this.inputs.indexOf(outlet),1);outlet.inout===_graph.Graph.OUT&&this.outputs.splice(this.outputs.indexOf(outlet),1);this.all.splice(this.all.indexOf(outlet),1);return this}}exports.Node=Node;Node.initClass()}
//# sourceMappingURL=module$node_modules$shadergraph$src$graph$node.js.map
