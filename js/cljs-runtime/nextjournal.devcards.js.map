{"version":3,"sources":["nextjournal/devcards.cljs"],"mappings":"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","names":["js/nextjournal","js/nextjournal.devcards","js/nextjournal.devcards.registry","nextjournal.devcards/registry","reagent.core.atom","flatland.ordered.map.ordered_map","p__88779","map__88780","cljs.core/--destructure-map","cljs.core.get","nextjournal.devcards/register-devcard*","opts","ns","name","cljs.core.swap_BANG_","cljs.core/assoc-in","nextjournal.devcards/error-boundary","_elem","error","reagent.core.create_class","_this","_","cljs.core/deref","cljs.core/reset!","e","info","trace","G__88784","clojure.string.split","cljs.core.map","clojure.string/trim","cljs.core.remove","cljs.core/empty?","clojure.string.join","elem","temp__5751__auto__","vec__88786","cljs.core.nth","temp__5753__auto__","stack","cljs.core.merge","nextjournal.view/wrap-render","p__88790","map__88791","nextjournal.view/wrap-methods","nextjournal.devcards/testview","state","cljs.core/update","cljs.core.fnil","cljs.core/inc","cljs.core.assoc","re_frame.context.reg_sub","db","re_frame.context.reg_event_db","cljs.core.update","p__88793","map__88794","re-frame.context/frame-context","nextjournal.devcards/testc","dispatch","subscribe","G__88795","G__88796","p__88798","map__88799","nextjournal.devcards/frame-display","re-frame.context/current-frame","cljs.core.into","frame","re_frame.frame.make_frame","re-frame.context/provide-frame","*current-frame*-orig-val__88802","re-frame.registry/*current-frame*","*current-frame*-temp-val__88803","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","re-frame.frame/IFrame","js/Error","cljs.core.range"],"sourcesContent":["(ns nextjournal.devcards\n  (:require-macros [nextjournal.devcards :as dc])\n  (:require [clojure.string]\n            [flatland.ordered.map :as ordered-map]\n            [nextjournal.view :as v]\n            [re-frame.context :as rf]\n            [re-frame.frame :as rf.frame]\n            [reagent.core :as r]))\n\n(defonce registry (r/atom (ordered-map/ordered-map)))\n\n(defn register-devcard* [{:as opts :keys [ns name]}]\n  (swap! registry assoc-in [ns name] opts))\n\n(defn error-boundary [_elem]\n  (let [error (r/atom nil)]\n    (r/create-class\n     {:UNSAFE_component-will-receive-props\n      (fn [_this _]\n        (when @error\n          (reset! error nil)))\n      :component-did-catch\n      (fn [_this e ^js info]\n        (reset! error [e info])\n        (let [trace (some-> info\n                            (.-componentStack)\n                            (clojure.string/split \"\\n\")\n                            (->> (map clojure.string/trim)\n                                 (remove empty?)\n                                 (clojure.string/join \"\\n\")))]\n          (set! (.-componentStack info) trace)))\n      :reagent-render\n      (fn [elem]\n        (if-let [[e info] @error]\n          [:div.sans-serif\n           [:div.b.f6.red \"Error\"]\n           [:pre.text-xs.red.mt2.b\n            {:style {:overflow-x \"auto\"}}\n            (.-message e)]\n           (when-let [stack (.-componentStack ^js info)]\n             [:pre.text-xs.red.mt2\n              {:style {:overflow-x \"auto\"}}\n              stack])]\n          (do\n            (reset! error nil)\n            elem)))})))\n\n(v/defview testview [{::v/keys [state]}]\n  [:h1 {:on-click #(swap! state update :clicks (fnil inc 0))}\n   \"Hello \" (:name @state) \"! (\" (:clicks @state 0) \" clicks)\"])\n\n(dc/defcard testview-card\n  \"evaluating this form should change the inital state if changed.\"\n  [state]\n  [testview {::v/initial-state state}]\n  {::dc/state {:name \"World\"}\n   :some-value-in-db 1})\n\n\n(rf/reg-sub\n ::counter\n (fn [db]\n   (::counter db 0)))\n\n(rf/reg-event-db\n ::inc\n (fn [db]\n   (update db ::counter inc)))\n\n(v/defview testc [{::rf/keys [dispatch subscribe]}]\n  [:h1 {:on-click #(dispatch [::inc])} \"Counter = \" @(subscribe [::counter])])\n\n(dc/defcard counter-db-1\n  \"cards can use completely isolated dbs and use subscriptions and event handlers.\"\n  []\n  [testc]\n  {::counter 10})\n\n(dc/defcard counter-db-2\n  \"notice how clicking here doesn't affect the card above.\"\n  []\n  [testc]\n  {::counter 999})\n\n(dc/when-enabled\n (v/defview frame-display\n   {::v/initial-state\n    (fn []\n      (:frame-id (rf/current-frame)))}\n   [{::v/keys [state]}]\n   [:div @state \"/\" (:frame-id (rf/current-frame))]))\n\n(dc/defcard multiframe\n \"Demonstrates using multiple isolated frames in a component\"\n  []\n  (into [:div]\n        (map\n         #(let [frame (rf.frame/make-frame\n                       {:registry (:registry (rf/current-frame))\n                        :app-db (r/atom {})})]\n            [rf/provide-frame frame\n             (rf/bind-frame frame\n                            [frame-display])])\n         (range 2))))\n\n(dc/defcard device-frame\n  \"Renders inside an iframe with a device frame, currently limited to :iphone\"\n  []\n  [:div.font-sans\n   [:div.p-8.text-2xl.fixed.left-0.top-0.right-0.bg-red-500 \"Fixed on top\"]\n   [:div.p-8.text-2xl.fixed.left-0.right-0.bg-blue-500\n    {:class \"bottom-[78px]\"}\n    \"Fixed on bottom\"]]\n  {::dc/device :iphone})"]}