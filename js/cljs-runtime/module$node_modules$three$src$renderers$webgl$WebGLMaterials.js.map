{
"version":3,
"file":"module$node_modules$three$src$renderers$webgl$WebGLMaterials.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/three/src/renderers/webgl/WebGLMaterials.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$renderers$webgl$WebGLMaterials\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLMaterials = WebGLMaterials;\n\nvar _constants = require(\"../../constants.js\");\n\nfunction WebGLMaterials(renderer, properties) {\n  function refreshFogUniforms(uniforms, fog) {\n    uniforms.fogColor.value.copy(fog.color);\n\n    if (fog.isFog) {\n      uniforms.fogNear.value = fog.near;\n      uniforms.fogFar.value = fog.far;\n    } else if (fog.isFogExp2) {\n      uniforms.fogDensity.value = fog.density;\n    }\n  }\n\n  function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n    if (material.isMeshBasicMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshLambertMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshToonMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsToon(uniforms, material);\n    } else if (material.isMeshPhongMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsPhong(uniforms, material);\n    } else if (material.isMeshStandardMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsStandard(uniforms, material);\n\n      if (material.isMeshPhysicalMaterial) {\n        refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n      }\n    } else if (material.isMeshMatcapMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsMatcap(uniforms, material);\n    } else if (material.isMeshDepthMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshDistanceMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsDistance(uniforms, material);\n    } else if (material.isMeshNormalMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isLineBasicMaterial) {\n      refreshUniformsLine(uniforms, material);\n\n      if (material.isLineDashedMaterial) {\n        refreshUniformsDash(uniforms, material);\n      }\n    } else if (material.isPointsMaterial) {\n      refreshUniformsPoints(uniforms, material, pixelRatio, height);\n    } else if (material.isSpriteMaterial) {\n      refreshUniformsSprites(uniforms, material);\n    } else if (material.isShadowMaterial) {\n      uniforms.color.value.copy(material.color);\n      uniforms.opacity.value = material.opacity;\n    } else if (material.isShaderMaterial) {\n      material.uniformsNeedUpdate = false; // #15581\n    }\n  }\n\n  function refreshUniformsCommon(uniforms, material) {\n    uniforms.opacity.value = material.opacity;\n\n    if (material.color) {\n      uniforms.diffuse.value.copy(material.color);\n    }\n\n    if (material.emissive) {\n      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n    }\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === _constants.BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === _constants.BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.specularMap) {\n      uniforms.specularMap.value = material.specularMap;\n    }\n\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    }\n\n    const envMap = properties.get(material).envMap;\n\n    if (envMap) {\n      uniforms.envMap.value = envMap;\n      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;\n      uniforms.reflectivity.value = material.reflectivity;\n      uniforms.ior.value = material.ior;\n      uniforms.refractionRatio.value = material.refractionRatio;\n    }\n\n    if (material.lightMap) {\n      uniforms.lightMap.value = material.lightMap; // artist-friendly light intensity scaling factor\n\n      const scaleFactor = renderer.physicallyCorrectLights !== true ? Math.PI : 1;\n      uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;\n    }\n\n    if (material.aoMap) {\n      uniforms.aoMap.value = material.aoMap;\n      uniforms.aoMapIntensity.value = material.aoMapIntensity;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. specular map\n    // 3. displacementMap map\n    // 4. normal map\n    // 5. bump map\n    // 6. roughnessMap map\n    // 7. metalnessMap map\n    // 8. alphaMap map\n    // 9. emissiveMap map\n    // 10. clearcoat map\n    // 11. clearcoat normal map\n    // 12. clearcoat roughnessMap map\n    // 13. iridescence map\n    // 14. iridescence thickness map\n    // 15. specular intensity map\n    // 16. specular tint map\n    // 17. transmission map\n    // 18. thickness map\n\n\n    let uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.specularMap) {\n      uvScaleMap = material.specularMap;\n    } else if (material.displacementMap) {\n      uvScaleMap = material.displacementMap;\n    } else if (material.normalMap) {\n      uvScaleMap = material.normalMap;\n    } else if (material.bumpMap) {\n      uvScaleMap = material.bumpMap;\n    } else if (material.roughnessMap) {\n      uvScaleMap = material.roughnessMap;\n    } else if (material.metalnessMap) {\n      uvScaleMap = material.metalnessMap;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    } else if (material.emissiveMap) {\n      uvScaleMap = material.emissiveMap;\n    } else if (material.clearcoatMap) {\n      uvScaleMap = material.clearcoatMap;\n    } else if (material.clearcoatNormalMap) {\n      uvScaleMap = material.clearcoatNormalMap;\n    } else if (material.clearcoatRoughnessMap) {\n      uvScaleMap = material.clearcoatRoughnessMap;\n    } else if (material.iridescenceMap) {\n      uvScaleMap = material.iridescenceMap;\n    } else if (material.iridescenceThicknessMap) {\n      uvScaleMap = material.iridescenceThicknessMap;\n    } else if (material.specularIntensityMap) {\n      uvScaleMap = material.specularIntensityMap;\n    } else if (material.specularColorMap) {\n      uvScaleMap = material.specularColorMap;\n    } else if (material.transmissionMap) {\n      uvScaleMap = material.transmissionMap;\n    } else if (material.thicknessMap) {\n      uvScaleMap = material.thicknessMap;\n    } else if (material.sheenColorMap) {\n      uvScaleMap = material.sheenColorMap;\n    } else if (material.sheenRoughnessMap) {\n      uvScaleMap = material.sheenRoughnessMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      // backwards compatibility\n      if (uvScaleMap.isWebGLRenderTarget) {\n        uvScaleMap = uvScaleMap.texture;\n      }\n\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    } // uv repeat and offset setting priorities for uv2\n    // 1. ao map\n    // 2. light map\n\n\n    let uv2ScaleMap;\n\n    if (material.aoMap) {\n      uv2ScaleMap = material.aoMap;\n    } else if (material.lightMap) {\n      uv2ScaleMap = material.lightMap;\n    }\n\n    if (uv2ScaleMap !== undefined) {\n      // backwards compatibility\n      if (uv2ScaleMap.isWebGLRenderTarget) {\n        uv2ScaleMap = uv2ScaleMap.texture;\n      }\n\n      if (uv2ScaleMap.matrixAutoUpdate === true) {\n        uv2ScaleMap.updateMatrix();\n      }\n\n      uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsLine(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n  }\n\n  function refreshUniformsDash(uniforms, material) {\n    uniforms.dashSize.value = material.dashSize;\n    uniforms.totalSize.value = material.dashSize + material.gapSize;\n    uniforms.scale.value = material.scale;\n  }\n\n  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.size.value = material.size * pixelRatio;\n    uniforms.scale.value = height * 0.5;\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n\n    let uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsSprites(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.rotation.value = material.rotation;\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n\n    let uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsPhong(uniforms, material) {\n    uniforms.specular.value.copy(material.specular);\n    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n  }\n\n  function refreshUniformsToon(uniforms, material) {\n    if (material.gradientMap) {\n      uniforms.gradientMap.value = material.gradientMap;\n    }\n  }\n\n  function refreshUniformsStandard(uniforms, material) {\n    uniforms.roughness.value = material.roughness;\n    uniforms.metalness.value = material.metalness;\n\n    if (material.roughnessMap) {\n      uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (material.metalnessMap) {\n      uniforms.metalnessMap.value = material.metalnessMap;\n    }\n\n    const envMap = properties.get(material).envMap;\n\n    if (envMap) {\n      //uniforms.envMap.value = material.envMap; // part of uniforms common\n      uniforms.envMapIntensity.value = material.envMapIntensity;\n    }\n  }\n\n  function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n    uniforms.ior.value = material.ior; // also part of uniforms common\n\n    if (material.sheen > 0) {\n      uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);\n      uniforms.sheenRoughness.value = material.sheenRoughness;\n\n      if (material.sheenColorMap) {\n        uniforms.sheenColorMap.value = material.sheenColorMap;\n      }\n\n      if (material.sheenRoughnessMap) {\n        uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n      }\n    }\n\n    if (material.clearcoat > 0) {\n      uniforms.clearcoat.value = material.clearcoat;\n      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n      if (material.clearcoatMap) {\n        uniforms.clearcoatMap.value = material.clearcoatMap;\n      }\n\n      if (material.clearcoatRoughnessMap) {\n        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n      }\n\n      if (material.clearcoatNormalMap) {\n        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n        if (material.side === _constants.BackSide) {\n          uniforms.clearcoatNormalScale.value.negate();\n        }\n      }\n    }\n\n    if (material.iridescence > 0) {\n      uniforms.iridescence.value = material.iridescence;\n      uniforms.iridescenceIOR.value = material.iridescenceIOR;\n      uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];\n      uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];\n\n      if (material.iridescenceMap) {\n        uniforms.iridescenceMap.value = material.iridescenceMap;\n      }\n\n      if (material.iridescenceThicknessMap) {\n        uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\n      }\n    }\n\n    if (material.transmission > 0) {\n      uniforms.transmission.value = material.transmission;\n      uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n      uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n\n      if (material.transmissionMap) {\n        uniforms.transmissionMap.value = material.transmissionMap;\n      }\n\n      uniforms.thickness.value = material.thickness;\n\n      if (material.thicknessMap) {\n        uniforms.thicknessMap.value = material.thicknessMap;\n      }\n\n      uniforms.attenuationDistance.value = material.attenuationDistance;\n      uniforms.attenuationColor.value.copy(material.attenuationColor);\n    }\n\n    uniforms.specularIntensity.value = material.specularIntensity;\n    uniforms.specularColor.value.copy(material.specularColor);\n\n    if (material.specularIntensityMap) {\n      uniforms.specularIntensityMap.value = material.specularIntensityMap;\n    }\n\n    if (material.specularColorMap) {\n      uniforms.specularColorMap.value = material.specularColorMap;\n    }\n  }\n\n  function refreshUniformsMatcap(uniforms, material) {\n    if (material.matcap) {\n      uniforms.matcap.value = material.matcap;\n    }\n  }\n\n  function refreshUniformsDistance(uniforms, material) {\n    uniforms.referencePosition.value.copy(material.referencePosition);\n    uniforms.nearDistance.value = material.nearDistance;\n    uniforms.farDistance.value = material.farDistance;\n  }\n\n  return {\n    refreshFogUniforms: refreshFogUniforms,\n    refreshMaterialUniforms: refreshMaterialUniforms\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebGLMaterials","renderer","properties","refreshUniformsCommon","uniforms","material","opacity","color","diffuse","copy","emissive","multiplyScalar","emissiveIntensity","map","alphaMap","bumpMap","bumpScale","side","_constants","BackSide","displacementMap","displacementScale","displacementBias","emissiveMap","normalMap","normalScale","negate","specularMap","alphaTest","envMap","get","flipEnvMap","isCubeTexture","isRenderTargetTexture","reflectivity","ior","refractionRatio","lightMap","lightMapIntensity","scaleFactor","physicallyCorrectLights","Math","PI","aoMap","aoMapIntensity","uvScaleMap","roughnessMap","metalnessMap","clearcoatMap","clearcoatNormalMap","clearcoatRoughnessMap","iridescenceMap","iridescenceThicknessMap","specularIntensityMap","specularColorMap","transmissionMap","thicknessMap","sheenColorMap","sheenRoughnessMap","undefined","isWebGLRenderTarget","texture","matrixAutoUpdate","updateMatrix","uvTransform","matrix","uv2ScaleMap","uv2Transform","refreshFogUniforms","fog","fogColor","isFog","fogNear","near","fogFar","far","isFogExp2","fogDensity","density","refreshMaterialUniforms","pixelRatio","height","transmissionRenderTarget","isMeshBasicMaterial","isMeshLambertMaterial","isMeshToonMaterial","gradientMap","isMeshPhongMaterial","specular","shininess","max","isMeshStandardMaterial","roughness","metalness","envMapIntensity","isMeshPhysicalMaterial","sheen","sheenColor","sheenRoughness","clearcoat","clearcoatRoughness","clearcoatNormalScale","iridescence","iridescenceIOR","iridescenceThicknessMinimum","iridescenceThicknessRange","iridescenceThicknessMaximum","transmission","transmissionSamplerMap","transmissionSamplerSize","set","width","thickness","attenuationDistance","attenuationColor","specularIntensity","specularColor","isMeshMatcapMaterial","matcap","isMeshDepthMaterial","isMeshDistanceMaterial","referencePosition","nearDistance","farDistance","isMeshNormalMaterial","isLineBasicMaterial","isLineDashedMaterial","dashSize","totalSize","gapSize","scale","isPointsMaterial","size","isSpriteMaterial","rotation","isShadowMaterial","isShaderMaterial","uniformsNeedUpdate"]
}
