{
"version":3,
"file":"module$node_modules$three$src$renderers$webgl$WebGLMaterials.js",
"lineCount":23,
"mappings":"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",
"sources":["node_modules/three/src/renderers/webgl/WebGLMaterials.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$renderers$webgl$WebGLMaterials\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLMaterials = WebGLMaterials;\n\nvar _constants = require(\"../../constants.js\");\n\nfunction WebGLMaterials(properties) {\n  function refreshFogUniforms(uniforms, fog) {\n    uniforms.fogColor.value.copy(fog.color);\n\n    if (fog.isFog) {\n      uniforms.fogNear.value = fog.near;\n      uniforms.fogFar.value = fog.far;\n    } else if (fog.isFogExp2) {\n      uniforms.fogDensity.value = fog.density;\n    }\n  }\n\n  function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n    if (material.isMeshBasicMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshLambertMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsLambert(uniforms, material);\n    } else if (material.isMeshToonMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsToon(uniforms, material);\n    } else if (material.isMeshPhongMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsPhong(uniforms, material);\n    } else if (material.isMeshStandardMaterial) {\n      refreshUniformsCommon(uniforms, material);\n\n      if (material.isMeshPhysicalMaterial) {\n        refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n      } else {\n        refreshUniformsStandard(uniforms, material);\n      }\n    } else if (material.isMeshMatcapMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsMatcap(uniforms, material);\n    } else if (material.isMeshDepthMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsDepth(uniforms, material);\n    } else if (material.isMeshDistanceMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsDistance(uniforms, material);\n    } else if (material.isMeshNormalMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsNormal(uniforms, material);\n    } else if (material.isLineBasicMaterial) {\n      refreshUniformsLine(uniforms, material);\n\n      if (material.isLineDashedMaterial) {\n        refreshUniformsDash(uniforms, material);\n      }\n    } else if (material.isPointsMaterial) {\n      refreshUniformsPoints(uniforms, material, pixelRatio, height);\n    } else if (material.isSpriteMaterial) {\n      refreshUniformsSprites(uniforms, material);\n    } else if (material.isShadowMaterial) {\n      uniforms.color.value.copy(material.color);\n      uniforms.opacity.value = material.opacity;\n    } else if (material.isShaderMaterial) {\n      material.uniformsNeedUpdate = false; // #15581\n    }\n  }\n\n  function refreshUniformsCommon(uniforms, material) {\n    uniforms.opacity.value = material.opacity;\n\n    if (material.color) {\n      uniforms.diffuse.value.copy(material.color);\n    }\n\n    if (material.emissive) {\n      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n    }\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.specularMap) {\n      uniforms.specularMap.value = material.specularMap;\n    }\n\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    }\n\n    const envMap = properties.get(material).envMap;\n\n    if (envMap) {\n      uniforms.envMap.value = envMap;\n      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;\n      uniforms.reflectivity.value = material.reflectivity;\n      uniforms.ior.value = material.ior;\n      uniforms.refractionRatio.value = material.refractionRatio;\n    }\n\n    if (material.lightMap) {\n      uniforms.lightMap.value = material.lightMap;\n      uniforms.lightMapIntensity.value = material.lightMapIntensity;\n    }\n\n    if (material.aoMap) {\n      uniforms.aoMap.value = material.aoMap;\n      uniforms.aoMapIntensity.value = material.aoMapIntensity;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. specular map\n    // 3. displacementMap map\n    // 4. normal map\n    // 5. bump map\n    // 6. roughnessMap map\n    // 7. metalnessMap map\n    // 8. alphaMap map\n    // 9. emissiveMap map\n    // 10. clearcoat map\n    // 11. clearcoat normal map\n    // 12. clearcoat roughnessMap map\n    // 13. specular intensity map\n    // 14. specular tint map\n    // 15. transmission map\n    // 16. thickness map\n\n\n    let uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.specularMap) {\n      uvScaleMap = material.specularMap;\n    } else if (material.displacementMap) {\n      uvScaleMap = material.displacementMap;\n    } else if (material.normalMap) {\n      uvScaleMap = material.normalMap;\n    } else if (material.bumpMap) {\n      uvScaleMap = material.bumpMap;\n    } else if (material.roughnessMap) {\n      uvScaleMap = material.roughnessMap;\n    } else if (material.metalnessMap) {\n      uvScaleMap = material.metalnessMap;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    } else if (material.emissiveMap) {\n      uvScaleMap = material.emissiveMap;\n    } else if (material.clearcoatMap) {\n      uvScaleMap = material.clearcoatMap;\n    } else if (material.clearcoatNormalMap) {\n      uvScaleMap = material.clearcoatNormalMap;\n    } else if (material.clearcoatRoughnessMap) {\n      uvScaleMap = material.clearcoatRoughnessMap;\n    } else if (material.specularIntensityMap) {\n      uvScaleMap = material.specularIntensityMap;\n    } else if (material.specularColorMap) {\n      uvScaleMap = material.specularColorMap;\n    } else if (material.transmissionMap) {\n      uvScaleMap = material.transmissionMap;\n    } else if (material.thicknessMap) {\n      uvScaleMap = material.thicknessMap;\n    } else if (material.sheenColorMap) {\n      uvScaleMap = material.sheenColorMap;\n    } else if (material.sheenRoughnessMap) {\n      uvScaleMap = material.sheenRoughnessMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      // backwards compatibility\n      if (uvScaleMap.isWebGLRenderTarget) {\n        uvScaleMap = uvScaleMap.texture;\n      }\n\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    } // uv repeat and offset setting priorities for uv2\n    // 1. ao map\n    // 2. light map\n\n\n    let uv2ScaleMap;\n\n    if (material.aoMap) {\n      uv2ScaleMap = material.aoMap;\n    } else if (material.lightMap) {\n      uv2ScaleMap = material.lightMap;\n    }\n\n    if (uv2ScaleMap !== undefined) {\n      // backwards compatibility\n      if (uv2ScaleMap.isWebGLRenderTarget) {\n        uv2ScaleMap = uv2ScaleMap.texture;\n      }\n\n      if (uv2ScaleMap.matrixAutoUpdate === true) {\n        uv2ScaleMap.updateMatrix();\n      }\n\n      uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsLine(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n  }\n\n  function refreshUniformsDash(uniforms, material) {\n    uniforms.dashSize.value = material.dashSize;\n    uniforms.totalSize.value = material.dashSize + material.gapSize;\n    uniforms.scale.value = material.scale;\n  }\n\n  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.size.value = material.size * pixelRatio;\n    uniforms.scale.value = height * 0.5;\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n\n    let uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsSprites(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.rotation.value = material.rotation;\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n\n    let uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsLambert(uniforms, material) {\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n  }\n\n  function refreshUniformsPhong(uniforms, material) {\n    uniforms.specular.value.copy(material.specular);\n    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === _constants.BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === _constants.BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsToon(uniforms, material) {\n    if (material.gradientMap) {\n      uniforms.gradientMap.value = material.gradientMap;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === _constants.BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === _constants.BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsStandard(uniforms, material) {\n    uniforms.roughness.value = material.roughness;\n    uniforms.metalness.value = material.metalness;\n\n    if (material.roughnessMap) {\n      uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (material.metalnessMap) {\n      uniforms.metalnessMap.value = material.metalnessMap;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === _constants.BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === _constants.BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n\n    const envMap = properties.get(material).envMap;\n\n    if (envMap) {\n      //uniforms.envMap.value = material.envMap; // part of uniforms common\n      uniforms.envMapIntensity.value = material.envMapIntensity;\n    }\n  }\n\n  function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n    refreshUniformsStandard(uniforms, material);\n    uniforms.ior.value = material.ior; // also part of uniforms common\n\n    if (material.sheen > 0) {\n      uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);\n      uniforms.sheenRoughness.value = material.sheenRoughness;\n\n      if (material.sheenColorMap) {\n        uniforms.sheenColorMap.value = material.sheenColorMap;\n      }\n\n      if (material.sheenRoughnessMap) {\n        uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n      }\n    }\n\n    if (material.clearcoat > 0) {\n      uniforms.clearcoat.value = material.clearcoat;\n      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n      if (material.clearcoatMap) {\n        uniforms.clearcoatMap.value = material.clearcoatMap;\n      }\n\n      if (material.clearcoatRoughnessMap) {\n        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n      }\n\n      if (material.clearcoatNormalMap) {\n        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n        if (material.side === _constants.BackSide) {\n          uniforms.clearcoatNormalScale.value.negate();\n        }\n      }\n    }\n\n    if (material.transmission > 0) {\n      uniforms.transmission.value = material.transmission;\n      uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n      uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n\n      if (material.transmissionMap) {\n        uniforms.transmissionMap.value = material.transmissionMap;\n      }\n\n      uniforms.thickness.value = material.thickness;\n\n      if (material.thicknessMap) {\n        uniforms.thicknessMap.value = material.thicknessMap;\n      }\n\n      uniforms.attenuationDistance.value = material.attenuationDistance;\n      uniforms.attenuationColor.value.copy(material.attenuationColor);\n    }\n\n    uniforms.specularIntensity.value = material.specularIntensity;\n    uniforms.specularColor.value.copy(material.specularColor);\n\n    if (material.specularIntensityMap) {\n      uniforms.specularIntensityMap.value = material.specularIntensityMap;\n    }\n\n    if (material.specularColorMap) {\n      uniforms.specularColorMap.value = material.specularColorMap;\n    }\n  }\n\n  function refreshUniformsMatcap(uniforms, material) {\n    if (material.matcap) {\n      uniforms.matcap.value = material.matcap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === _constants.BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === _constants.BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsDepth(uniforms, material) {\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsDistance(uniforms, material) {\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n\n    uniforms.referencePosition.value.copy(material.referencePosition);\n    uniforms.nearDistance.value = material.nearDistance;\n    uniforms.farDistance.value = material.farDistance;\n  }\n\n  function refreshUniformsNormal(uniforms, material) {\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === _constants.BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === _constants.BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  return {\n    refreshFogUniforms: refreshFogUniforms,\n    refreshMaterialUniforms: refreshMaterialUniforms\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebGLMaterials","properties","refreshUniformsCommon","uniforms","material","opacity","color","diffuse","copy","emissive","multiplyScalar","emissiveIntensity","map","alphaMap","specularMap","alphaTest","envMap","get","flipEnvMap","isCubeTexture","isRenderTargetTexture","reflectivity","ior","refractionRatio","lightMap","lightMapIntensity","aoMap","aoMapIntensity","uvScaleMap","displacementMap","normalMap","bumpMap","roughnessMap","metalnessMap","emissiveMap","clearcoatMap","clearcoatNormalMap","clearcoatRoughnessMap","specularIntensityMap","specularColorMap","transmissionMap","thicknessMap","sheenColorMap","sheenRoughnessMap","undefined","isWebGLRenderTarget","texture","matrixAutoUpdate","updateMatrix","uvTransform","matrix","uv2ScaleMap","uv2Transform","refreshUniformsStandard","roughness","metalness","bumpScale","side","_constants","BackSide","normalScale","negate","displacementScale","displacementBias","envMapIntensity","refreshFogUniforms","fog","fogColor","isFog","fogNear","near","fogFar","far","isFogExp2","fogDensity","density","refreshMaterialUniforms","pixelRatio","height","transmissionRenderTarget","isMeshBasicMaterial","isMeshLambertMaterial","isMeshToonMaterial","gradientMap","isMeshPhongMaterial","specular","shininess","Math","max","isMeshStandardMaterial","isMeshPhysicalMaterial","sheen","sheenColor","sheenRoughness","clearcoat","clearcoatRoughness","clearcoatNormalScale","transmission","transmissionSamplerMap","transmissionSamplerSize","set","width","thickness","attenuationDistance","attenuationColor","specularIntensity","specularColor","isMeshMatcapMaterial","matcap","isMeshDepthMaterial","isMeshDistanceMaterial","referencePosition","nearDistance","farDistance","isMeshNormalMaterial","isLineBasicMaterial","isLineDashedMaterial","dashSize","totalSize","gapSize","scale","isPointsMaterial","size","isSpriteMaterial","rotation","isShadowMaterial","isShaderMaterial","uniformsNeedUpdate"]
}
