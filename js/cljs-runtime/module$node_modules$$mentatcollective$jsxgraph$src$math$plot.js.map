{
"version":3,
"file":"module$node_modules$$mentatcollective$jsxgraph$src$math$plot.js",
"lineCount":61,
"mappings":"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",
"sources":["node_modules/@mentatcollective/jsxgraph/src/math/plot.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mentatcollective$jsxgraph$src$math$plot\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jxg = _interopRequireDefault(require(\"../jxg\"));\n\nvar _constants = _interopRequireDefault(require(\"../base/constants\"));\n\nvar _coords = _interopRequireDefault(require(\"../base/coords\"));\n\nvar _math = _interopRequireDefault(require(\"./math\"));\n\nvar _extrapolate = _interopRequireDefault(require(\"./extrapolate\"));\n\nvar _numerics = _interopRequireDefault(require(\"./numerics\"));\n\nvar _statistics = _interopRequireDefault(require(\"./statistics\"));\n\nvar _geometry = _interopRequireDefault(require(\"./geometry\"));\n\nvar _ia = _interopRequireDefault(require(\"./ia\"));\n\nvar _type = _interopRequireDefault(require(\"../utils/type\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n    Copyright 2008-2022\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <http://www.gnu.org/licenses/>\n    and <http://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * Functions for plotting of curves.\n * @name JXG.Math.Plot\n * @exports Mat.Plot as JXG.Math.Plot\n * @namespace\n */\n_math.default.Plot = {\n  /**\n   * Check if at least one point on the curve is finite and real.\n   **/\n  checkReal: function (points) {\n    var b = false,\n        i,\n        p,\n        len = points.length;\n\n    for (i = 0; i < len; i++) {\n      p = points[i].usrCoords;\n\n      if (!isNaN(p[1]) && !isNaN(p[2]) && Math.abs(p[0]) > _math.default.eps) {\n        b = true;\n        break;\n      }\n    }\n\n    return b;\n  },\n  //----------------------------------------------------------------------\n  // Plot algorithm v0\n  //----------------------------------------------------------------------\n\n  /**\n   * Updates the data points of a parametric curve. This version is used if {@link JXG.Curve#doadvancedplot} is <tt>false</tt>.\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Number} mi Left bound of curve\n   * @param {Number} ma Right bound of curve\n   * @param {Number} len Number of data points\n   * @returns {JXG.Curve} Reference to the curve object.\n   */\n  updateParametricCurveNaive: function (curve, mi, ma, len) {\n    var i,\n        t,\n        suspendUpdate = false,\n        stepSize = (ma - mi) / len;\n\n    for (i = 0; i < len; i++) {\n      t = mi + i * stepSize; // The last parameter prevents rounding in usr2screen().\n\n      curve.points[i].setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(t, suspendUpdate), curve.Y(t, suspendUpdate)], false);\n      curve.points[i]._t = t;\n      suspendUpdate = true;\n    }\n\n    return curve;\n  },\n  //----------------------------------------------------------------------\n  // Plot algorithm v1\n  //----------------------------------------------------------------------\n\n  /**\n   * Crude and cheap test if the segment defined by the two points <tt>(x0, y0)</tt> and <tt>(x1, y1)</tt> is\n   * outside the viewport of the board. All parameters have to be given in screen coordinates.\n   *\n   * @private\n   * @deprecated\n   * @param {Number} x0\n   * @param {Number} y0\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {JXG.Board} board\n   * @returns {Boolean} <tt>true</tt> if the given segment is outside the visible area.\n   */\n  isSegmentOutside: function (x0, y0, x1, y1, board) {\n    return y0 < 0 && y1 < 0 || y0 > board.canvasHeight && y1 > board.canvasHeight || x0 < 0 && x1 < 0 || x0 > board.canvasWidth && x1 > board.canvasWidth;\n  },\n\n  /**\n   * Compares the absolute value of <tt>dx</tt> with <tt>MAXX</tt> and the absolute value of <tt>dy</tt>\n   * with <tt>MAXY</tt>.\n   *\n   * @private\n   * @deprecated\n   * @param {Number} dx\n   * @param {Number} dy\n   * @param {Number} MAXX\n   * @param {Number} MAXY\n   * @returns {Boolean} <tt>true</tt>, if <tt>|dx| &lt; MAXX</tt> and <tt>|dy| &lt; MAXY</tt>.\n   */\n  isDistOK: function (dx, dy, MAXX, MAXY) {\n    return Math.abs(dx) < MAXX && Math.abs(dy) < MAXY && !isNaN(dx + dy);\n  },\n\n  /**\n   * @private\n   * @deprecated\n   */\n  isSegmentDefined: function (x0, y0, x1, y1) {\n    return !(isNaN(x0 + y0) && isNaN(x1 + y1));\n  },\n\n  /**\n   * Updates the data points of a parametric curve. This version is used if {@link JXG.Curve#doadvancedplot} is <tt>true</tt>.\n   * Since 0.99 this algorithm is deprecated. It still can be used if {@link JXG.Curve#doadvancedplotold} is <tt>true</tt>.\n   *\n   * @deprecated\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Number} mi Left bound of curve\n   * @param {Number} ma Right bound of curve\n   * @returns {JXG.Curve} Reference to the curve object.\n   */\n  updateParametricCurveOld: function (curve, mi, ma) {\n    var i,\n        t,\n        d,\n        x,\n        y,\n        t0,\n        x0,\n        y0,\n        top,\n        depth,\n        MAX_DEPTH,\n        MAX_XDIST,\n        MAX_YDIST,\n        suspendUpdate = false,\n        po = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false),\n        dyadicStack = [],\n        depthStack = [],\n        pointStack = [],\n        divisors = [],\n        distOK = false,\n        j = 0,\n        distFromLine = function (p1, p2, p0) {\n      var lbda,\n          d,\n          x0 = p0[1] - p1[1],\n          y0 = p0[2] - p1[2],\n          x1 = p2[0] - p1[1],\n          y1 = p2[1] - p1[2],\n          den = x1 * x1 + y1 * y1;\n\n      if (den >= _math.default.eps) {\n        lbda = (x0 * x1 + y0 * y1) / den;\n\n        if (lbda > 0) {\n          if (lbda <= 1) {\n            x0 -= lbda * x1;\n            y0 -= lbda * y1; // lbda = 1.0;\n          } else {\n            x0 -= x1;\n            y0 -= y1;\n          }\n        }\n      }\n\n      d = x0 * x0 + y0 * y0;\n      return Math.sqrt(d);\n    };\n\n    _jxg.default.deprecated(\"Curve.updateParametricCurveOld()\");\n\n    if (curve.board.updateQuality === curve.board.BOARD_QUALITY_LOW) {\n      MAX_DEPTH = 15;\n      MAX_XDIST = 10; // 10\n\n      MAX_YDIST = 10; // 10\n    } else {\n      MAX_DEPTH = 21;\n      MAX_XDIST = 0.7; // 0.7\n\n      MAX_YDIST = 0.7; // 0.7\n    }\n\n    divisors[0] = ma - mi;\n\n    for (i = 1; i < MAX_DEPTH; i++) {\n      divisors[i] = divisors[i - 1] * 0.5;\n    }\n\n    i = 1;\n    dyadicStack[0] = 1;\n    depthStack[0] = 0;\n    t = mi;\n    po.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(t, suspendUpdate), curve.Y(t, suspendUpdate)], false); // Now, there was a first call to the functions defining the curve.\n    // Defining elements like sliders have been evaluated.\n    // Therefore, we can set suspendUpdate to false, so that these defining elements\n    // need not be evaluated anymore for the rest of the plotting.\n\n    suspendUpdate = true;\n    x0 = po.scrCoords[1];\n    y0 = po.scrCoords[2];\n    t0 = t;\n    t = ma;\n    po.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(t, suspendUpdate), curve.Y(t, suspendUpdate)], false);\n    x = po.scrCoords[1];\n    y = po.scrCoords[2];\n    pointStack[0] = [x, y];\n    top = 1;\n    depth = 0;\n    curve.points = [];\n    curve.points[j++] = new _coords.default(_constants.default.COORDS_BY_SCREEN, [x0, y0], curve.board, false);\n\n    do {\n      distOK = this.isDistOK(x - x0, y - y0, MAX_XDIST, MAX_YDIST) || this.isSegmentOutside(x0, y0, x, y, curve.board);\n\n      while (depth < MAX_DEPTH && (!distOK || depth < 6) && (depth <= 7 || this.isSegmentDefined(x0, y0, x, y))) {\n        // We jump out of the loop if\n        // * depth>=MAX_DEPTH or\n        // * (depth>=6 and distOK) or\n        // * (depth>7 and segment is not defined)\n        dyadicStack[top] = i;\n        depthStack[top] = depth;\n        pointStack[top] = [x, y];\n        top += 1;\n        i = 2 * i - 1; // Here, depth is increased and may reach MAX_DEPTH\n\n        depth++; // In that case, t is undefined and we will see a jump in the curve.\n\n        t = mi + i * divisors[depth];\n        po.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(t, suspendUpdate), curve.Y(t, suspendUpdate)], false, true);\n        x = po.scrCoords[1];\n        y = po.scrCoords[2];\n        distOK = this.isDistOK(x - x0, y - y0, MAX_XDIST, MAX_YDIST) || this.isSegmentOutside(x0, y0, x, y, curve.board);\n      }\n\n      if (j > 1) {\n        d = distFromLine(curve.points[j - 2].scrCoords, [x, y], curve.points[j - 1].scrCoords);\n\n        if (d < 0.015) {\n          j -= 1;\n        }\n      }\n\n      curve.points[j] = new _coords.default(_constants.default.COORDS_BY_SCREEN, [x, y], curve.board, false);\n      curve.points[j]._t = t;\n      j += 1;\n      x0 = x;\n      y0 = y;\n      t0 = t;\n      top -= 1;\n      x = pointStack[top][0];\n      y = pointStack[top][1];\n      depth = depthStack[top] + 1;\n      i = dyadicStack[top] * 2;\n    } while (top > 0 && j < 500000);\n\n    curve.numberPoints = curve.points.length;\n    return curve;\n  },\n  //----------------------------------------------------------------------\n  // Plot algorithm v2\n  //----------------------------------------------------------------------\n\n  /**\n   * Add a point to the curve plot. If the new point is too close to the previously inserted point,\n   * it is skipped.\n   * Used in {@link JXG.Curve._plotRecursive}.\n   *\n   * @private\n   * @param {JXG.Coords} pnt Coords to add to the list of points\n   */\n  _insertPoint_v2: function (curve, pnt, t) {\n    var lastReal = !isNaN(this._lastCrds[1] + this._lastCrds[2]),\n        // The last point was real\n    newReal = !isNaN(pnt.scrCoords[1] + pnt.scrCoords[2]),\n        // New point is real point\n    cw = curve.board.canvasWidth,\n        ch = curve.board.canvasHeight,\n        off = 500;\n    newReal = newReal && pnt.scrCoords[1] > -off && pnt.scrCoords[2] > -off && pnt.scrCoords[1] < cw + off && pnt.scrCoords[2] < ch + off;\n    /*\n     * Prevents two consecutive NaNs or points wich are too close\n     */\n\n    if (!newReal && lastReal || newReal && (!lastReal || Math.abs(pnt.scrCoords[1] - this._lastCrds[1]) > 0.7 || Math.abs(pnt.scrCoords[2] - this._lastCrds[2]) > 0.7)) {\n      pnt._t = t;\n      curve.points.push(pnt);\n      this._lastCrds = pnt.copy(\"scrCoords\");\n    }\n  },\n\n  /**\n   * Check if there is a single NaN function value at t0.\n   * @param {*} curve\n   * @param {*} t0\n   * @returns {Boolean} true if there is a second NaN point close by, false otherwise\n   */\n  neighborhood_isNaN_v2: function (curve, t0) {\n    var is_undef,\n        pnt = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false),\n        t,\n        p;\n    t = t0 + _math.default.eps;\n    pnt.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(t, true), curve.Y(t, true)], false);\n    p = pnt.usrCoords;\n    is_undef = isNaN(p[1] + p[2]);\n\n    if (!is_undef) {\n      t = t0 - _math.default.eps;\n      pnt.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(t, true), curve.Y(t, true)], false);\n      p = pnt.usrCoords;\n      is_undef = isNaN(p[1] + p[2]);\n\n      if (!is_undef) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Investigate a function term at the bounds of intervals where\n   * the function is not defined, e.g. log(x) at x = 0.\n   *\n   * c is inbetween a and b\n   * @private\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Array} a Screen coordinates of the left interval bound\n   * @param {Array} b Screen coordinates of the right interval bound\n   * @param {Array} c Screen coordinates of the bisection point at (ta + tb) / 2\n   * @param {Number} ta Parameter which evaluates to a, i.e. [1, X(ta), Y(ta)] = a in screen coordinates\n   * @param {Number} tb Parameter which evaluates to b, i.e. [1, X(tb), Y(tb)] = b in screen coordinates\n   * @param {Number} tc (ta + tb) / 2 = tc. Parameter which evaluates to b, i.e. [1, X(tc), Y(tc)] = c in screen coordinates\n   * @param {Number} depth Actual recursion depth. The recursion stops if depth is equal to 0.\n   * @returns {JXG.Boolean} true if the point is inserted and the recursion should stop, false otherwise.\n   */\n  _borderCase: function (curve, a, b, c, ta, tb, tc, depth) {\n    var t,\n        pnt,\n        p,\n        p_good = null,\n        j,\n        max_it = 30,\n        is_undef = false,\n        t_nan,\n        t_real,\n        t_real2,\n        vx,\n        vy,\n        vx2,\n        vy2,\n        dx,\n        dy; // asymptote;\n\n    if (depth <= 1) {\n      pnt = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false); // Test if there is a single undefined point.\n      // If yes, we ignore it.\n\n      if (isNaN(a[1] + a[2]) && !isNaN(c[1] + c[2]) && !this.neighborhood_isNaN_v2(curve, ta)) {\n        return false;\n      }\n\n      if (isNaN(b[1] + b[2]) && !isNaN(c[1] + c[2]) && !this.neighborhood_isNaN_v2(curve, tb)) {\n        return false;\n      }\n\n      if (isNaN(c[1] + c[2]) && (!isNaN(a[1] + a[2]) || !isNaN(b[1] + b[2])) && !this.neighborhood_isNaN_v2(curve, tc)) {\n        return false;\n      }\n\n      j = 0; // Bisect a, b and c until the point t_real is inside of the definition interval\n      // and as close as possible at the boundary.\n      // t_real2 is the second closest point.\n\n      do {\n        // There are four cases:\n        //  a  |  c  |  b\n        // ---------------\n        // inf | R   | R\n        // R   | R   | inf\n        // inf | inf | R\n        // R   | inf | inf\n        //\n        if (isNaN(a[1] + a[2]) && !isNaN(c[1] + c[2])) {\n          t_nan = ta;\n          t_real = tc;\n          t_real2 = tb;\n        } else if (isNaN(b[1] + b[2]) && !isNaN(c[1] + c[2])) {\n          t_nan = tb;\n          t_real = tc;\n          t_real2 = ta;\n        } else if (isNaN(c[1] + c[2]) && !isNaN(b[1] + b[2])) {\n          t_nan = tc;\n          t_real = tb;\n          t_real2 = tb + (tb - tc);\n        } else if (isNaN(c[1] + c[2]) && !isNaN(a[1] + a[2])) {\n          t_nan = tc;\n          t_real = ta;\n          t_real2 = ta - (tc - ta);\n        } else {\n          return false;\n        }\n\n        t = 0.5 * (t_nan + t_real);\n        pnt.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(t, true), curve.Y(t, true)], false);\n        p = pnt.usrCoords;\n        is_undef = isNaN(p[1] + p[2]);\n\n        if (is_undef) {\n          t_nan = t;\n        } else {\n          t_real2 = t_real;\n          t_real = t;\n        }\n\n        ++j;\n      } while (is_undef && j < max_it); // If bisection was successful, take this point.\n      // Useful only for general curves, for function graph\n      // the code below overwrite p_good from here.\n\n\n      if (j < max_it) {\n        p_good = p.slice();\n        c = p.slice();\n        t_real = t;\n      } // OK, bisection has been done now.\n      // t_real contains the closest inner point to the border of the interval we could find.\n      // t_real2 is the second nearest point to this boundary.\n      // Now we approximate the derivative by computing the slope of the line through these two points\n      // and test if it is \"infinite\", i.e larger than 400 in absolute values.\n      //\n\n\n      vx = curve.X(t_real, true);\n      vx2 = curve.X(t_real2, true);\n      dx = (vx - vx2) / (t_real - t_real2);\n      vy = curve.Y(t_real, true);\n      vy2 = curve.Y(t_real2, true);\n      dy = (vy - vy2) / (t_real - t_real2);\n\n      if (p_good !== null) {\n        this._insertPoint_v2(curve, new _coords.default(_constants.default.COORDS_BY_USER, p_good, curve.board, false));\n\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Recursive interval bisection algorithm for curve plotting.\n   * Used in {@link JXG.Curve.updateParametricCurve}.\n   * @private\n   * @deprecated\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Array} a Screen coordinates of the left interval bound\n   * @param {Number} ta Parameter which evaluates to a, i.e. [1, X(ta), Y(ta)] = a in screen coordinates\n   * @param {Array} b Screen coordinates of the right interval bound\n   * @param {Number} tb Parameter which evaluates to b, i.e. [1, X(tb), Y(tb)] = b in screen coordinates\n   * @param {Number} depth Actual recursion depth. The recursion stops if depth is equal to 0.\n   * @param {Number} delta If the distance of the bisection point at (ta + tb) / 2 from the point (a + b) / 2 is less then delta,\n   *                 the segment [a,b] is regarded as straight line.\n   * @returns {JXG.Curve} Reference to the curve object.\n   */\n  _plotRecursive_v2: function (curve, a, ta, b, tb, depth, delta) {\n    var tc,\n        c,\n        ds,\n        mindepth = 0,\n        isSmooth,\n        isJump,\n        isCusp,\n        cusp_threshold = 0.5,\n        jump_threshold = 0.99,\n        pnt = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false);\n\n    if (curve.numberPoints > 65536) {\n      return;\n    } // Test if the function is undefined in an interval\n\n\n    if (depth < this.nanLevel && this._isUndefined(curve, a, ta, b, tb)) {\n      return this;\n    }\n\n    if (depth < this.nanLevel && this._isOutside(a, ta, b, tb, curve.board)) {\n      return this;\n    }\n\n    tc = (ta + tb) * 0.5;\n    pnt.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(tc, true), curve.Y(tc, true)], false);\n    c = pnt.scrCoords;\n\n    if (this._borderCase(curve, a, b, c, ta, tb, tc, depth)) {\n      return this;\n    }\n\n    ds = this._triangleDists(a, b, c); // returns [d_ab, d_ac, d_cb, d_cd]\n\n    isSmooth = depth < this.smoothLevel && ds[3] < delta;\n    isJump = depth < this.jumpLevel && (ds[2] > jump_threshold * ds[0] || ds[1] > jump_threshold * ds[0] || ds[0] === Infinity || ds[1] === Infinity || ds[2] === Infinity);\n    isCusp = depth < this.smoothLevel + 2 && ds[0] < cusp_threshold * (ds[1] + ds[2]);\n\n    if (isCusp) {\n      mindepth = 0;\n      isSmooth = false;\n    }\n\n    --depth;\n\n    if (isJump) {\n      this._insertPoint_v2(curve, new _coords.default(_constants.default.COORDS_BY_SCREEN, [NaN, NaN], curve.board, false), tc);\n    } else if (depth <= mindepth || isSmooth) {\n      this._insertPoint_v2(curve, pnt, tc); //if (this._borderCase(a, b, c, ta, tb, tc, depth)) {}\n\n    } else {\n      this._plotRecursive_v2(curve, a, ta, c, tc, depth, delta);\n\n      if (!isNaN(pnt.scrCoords[1] + pnt.scrCoords[2])) {\n        this._insertPoint_v2(curve, pnt, tc);\n      }\n\n      this._plotRecursive_v2(curve, c, tc, b, tb, depth, delta);\n    }\n\n    return this;\n  },\n\n  /**\n   * Updates the data points of a parametric curve. This version is used if {@link JXG.Curve#plotVersion} is <tt>3</tt>.\n   *\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Number} mi Left bound of curve\n   * @param {Number} ma Right bound of curve\n   * @returns {JXG.Curve} Reference to the curve object.\n   */\n  updateParametricCurve_v2: function (curve, mi, ma) {\n    var ta,\n        tb,\n        a,\n        b,\n        suspendUpdate = false,\n        pa = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false),\n        pb = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false),\n        depth,\n        delta,\n        w2,\n        h2,\n        bbox,\n        ret_arr; //console.time(\"plot\");\n\n    if (curve.board.updateQuality === curve.board.BOARD_QUALITY_LOW) {\n      depth = _type.default.evaluate(curve.visProp.recursiondepthlow) || 13;\n      delta = 2; // this.smoothLevel = 5; //depth - 7;\n\n      this.smoothLevel = depth - 6;\n      this.jumpLevel = 3;\n    } else {\n      depth = _type.default.evaluate(curve.visProp.recursiondepthhigh) || 17;\n      delta = 2; // smoothLevel has to be small for graphs in a huge interval.\n      // this.smoothLevel = 3; //depth - 7; // 9\n\n      this.smoothLevel = depth - 9; // 9\n\n      this.jumpLevel = 2;\n    }\n\n    this.nanLevel = depth - 4;\n    curve.points = [];\n\n    if (this.xterm === \"x\") {\n      // For function graphs we can restrict the plot interval\n      // to the visible area +plus margin\n      bbox = curve.board.getBoundingBox();\n      w2 = (bbox[2] - bbox[0]) * 0.3;\n      h2 = (bbox[1] - bbox[3]) * 0.3;\n      ta = Math.max(mi, bbox[0] - w2);\n      tb = Math.min(ma, bbox[2] + w2);\n    } else {\n      ta = mi;\n      tb = ma;\n    }\n\n    pa.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(ta, suspendUpdate), curve.Y(ta, suspendUpdate)], false); // The first function calls of X() and Y() are done. We can now\n    // switch `suspendUpdate` on. If supported by the functions, this\n    // avoids for the rest of the plotting algorithm, evaluation of any\n    // parent elements.\n\n    suspendUpdate = true;\n    pb.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(tb, suspendUpdate), curve.Y(tb, suspendUpdate)], false); // Find start and end points of the visible area (plus a certain margin)\n\n    ret_arr = this._findStartPoint(curve, pa.scrCoords, ta, pb.scrCoords, tb);\n    pa.setCoordinates(_constants.default.COORDS_BY_SCREEN, ret_arr[0], false);\n    ta = ret_arr[1];\n    ret_arr = this._findStartPoint(curve, pb.scrCoords, tb, pa.scrCoords, ta);\n    pb.setCoordinates(_constants.default.COORDS_BY_SCREEN, ret_arr[0], false);\n    tb = ret_arr[1]; // Save the visible area.\n    // This can be used in Curve.hasPoint().\n\n    this._visibleArea = [ta, tb]; // Start recursive plotting algorithm\n\n    a = pa.copy(\"scrCoords\");\n    b = pb.copy(\"scrCoords\");\n    pa._t = ta;\n    curve.points.push(pa);\n    this._lastCrds = pa.copy(\"scrCoords\"); // Used in _insertPoint\n\n    this._plotRecursive_v2(curve, a, ta, b, tb, depth, delta);\n\n    pb._t = tb;\n    curve.points.push(pb);\n    curve.numberPoints = curve.points.length; //console.timeEnd(\"plot\");\n\n    return curve;\n  },\n  //----------------------------------------------------------------------\n  // Plot algorithm v3\n  //----------------------------------------------------------------------\n\n  /**\n   *\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {*} pnt\n   * @param {*} t\n   * @param {*} depth\n   * @param {*} limes\n   * @private\n   */\n  _insertLimesPoint: function (curve, pnt, t, depth, limes) {\n    var p0, p1, p2; // Ignore jump point if it follows limes\n\n    if (Math.abs(this._lastUsrCrds[1]) === Infinity && Math.abs(limes.left_x) === Infinity || Math.abs(this._lastUsrCrds[2]) === Infinity && Math.abs(limes.left_y) === Infinity) {\n      // console.log(\"SKIP:\", pnt.usrCoords, this._lastUsrCrds, limes);\n      return;\n    } // // Ignore jump left from limes\n    // if (Math.abs(limes.left_x) > 100 * Math.abs(this._lastUsrCrds[1])) {\n    //     x = Math.sign(limes.left_x) * Infinity;\n    // } else {\n    //     x = limes.left_x;\n    // }\n    // if (Math.abs(limes.left_y) > 100 * Math.abs(this._lastUsrCrds[2])) {\n    //     y = Math.sign(limes.left_y) * Infinity;\n    // } else {\n    //     y = limes.left_y;\n    // }\n    // //pnt.setCoordinates(Const.COORDS_BY_USER, [x, y], false);\n    // Add points at a jump. pnt contains [NaN, NaN]\n    //console.log(\"Add\", t, pnt.usrCoords, limes, depth)\n\n\n    p0 = new _coords.default(_constants.default.COORDS_BY_USER, [limes.left_x, limes.left_y], curve.board);\n    p0._t = t;\n    curve.points.push(p0);\n\n    if (!isNaN(limes.left_x) && !isNaN(limes.left_y) && !isNaN(limes.right_x) && !isNaN(limes.right_y) && (Math.abs(limes.left_x - limes.right_x) > _math.default.eps || Math.abs(limes.left_y - limes.right_y) > _math.default.eps)) {\n      p1 = new _coords.default(_constants.default.COORDS_BY_SCREEN, pnt, curve.board);\n      p1._t = t;\n      curve.points.push(p1);\n    }\n\n    p2 = new _coords.default(_constants.default.COORDS_BY_USER, [limes.right_x, limes.right_y], curve.board);\n    p2._t = t;\n    curve.points.push(p2);\n    this._lastScrCrds = p2.copy(\"scrCoords\");\n    this._lastUsrCrds = p2.copy(\"usrCoords\");\n  },\n\n  /**\n   * Add a point to the curve plot. If the new point is too close to the previously inserted point,\n   * it is skipped.\n   * Used in {@link JXG.Curve._plotRecursive}.\n   *\n   * @private\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {JXG.Coords} pnt Coords to add to the list of points\n   */\n  _insertPoint: function (curve, pnt, t, depth, limes) {\n    var last_is_real = !isNaN(this._lastScrCrds[1] + this._lastScrCrds[2]),\n        // The last point was real\n    point_is_real = !isNaN(pnt[1] + pnt[2]),\n        // New point is real point\n    cw = curve.board.canvasWidth,\n        ch = curve.board.canvasHeight,\n        p,\n        near = 0.8,\n        off = 500;\n\n    if (_type.default.exists(limes)) {\n      this._insertLimesPoint(curve, pnt, t, depth, limes);\n\n      return;\n    } // Check if point has real coordinates and\n    // coordinates are not too far away from canvas.\n\n\n    point_is_real = point_is_real && pnt[1] > -off && pnt[2] > -off && pnt[1] < cw + off && pnt[2] < ch + off; // Prevent two consecutive NaNs\n\n    if (!last_is_real && !point_is_real) {\n      return;\n    } // Prevent two consecutive points which are too close\n\n\n    if (point_is_real && last_is_real && Math.abs(pnt[1] - this._lastScrCrds[1]) < near && Math.abs(pnt[2] - this._lastScrCrds[2]) < near) {\n      return;\n    } // Prevent two consecutive points at infinity (either direction)\n\n\n    if (Math.abs(pnt[1]) === Infinity && Math.abs(this._lastUsrCrds[1]) === Infinity || Math.abs(pnt[2]) === Infinity && Math.abs(this._lastUsrCrds[2]) === Infinity) {\n      return;\n    } //console.log(\"add\", t, pnt.usrCoords, depth)\n    // Add regular point\n\n\n    p = new _coords.default(_constants.default.COORDS_BY_SCREEN, pnt, curve.board);\n    p._t = t;\n    curve.points.push(p);\n    this._lastScrCrds = p.copy(\"scrCoords\");\n    this._lastUsrCrds = p.copy(\"usrCoords\");\n  },\n\n  /**\n   * Compute distances in screen coordinates between the points ab,\n   * ac, cb, and cd, where d = (a + b)/2.\n   * cd is used for the smoothness test, ab, ac, cb are used to detect jumps, cusps and poles.\n   *\n   * @private\n   * @param {Array} a Screen coordinates of the left interval bound\n   * @param {Array} b Screen coordinates of the right interval bound\n   * @param {Array} c Screen coordinates of the bisection point at (ta + tb) / 2\n   * @returns {Array} array of distances in screen coordinates between: ab, ac, cb, and cd.\n   */\n  _triangleDists: function (a, b, c) {\n    var d, d_ab, d_ac, d_cb, d_cd;\n    d = [a[0] * b[0], (a[1] + b[1]) * 0.5, (a[2] + b[2]) * 0.5];\n    d_ab = _geometry.default.distance(a, b, 3);\n    d_ac = _geometry.default.distance(a, c, 3);\n    d_cb = _geometry.default.distance(c, b, 3);\n    d_cd = _geometry.default.distance(c, d, 3);\n    return [d_ab, d_ac, d_cb, d_cd];\n  },\n\n  /**\n   * Test if the function is undefined on an interval:\n   * If the interval borders a and b are undefined, 20 random values\n   * are tested if they are undefined, too.\n   * Only if all values are undefined, we declare the function to be undefined in this interval.\n   *\n   * @private\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Array} a Screen coordinates of the left interval bound\n   * @param {Number} ta Parameter which evaluates to a, i.e. [1, X(ta), Y(ta)] = a in screen coordinates\n   * @param {Array} b Screen coordinates of the right interval bound\n   * @param {Number} tb Parameter which evaluates to b, i.e. [1, X(tb), Y(tb)] = b in screen coordinates\n   */\n  _isUndefined: function (curve, a, ta, b, tb) {\n    var t, i, pnt;\n\n    if (!isNaN(a[1] + a[2]) || !isNaN(b[1] + b[2])) {\n      return false;\n    }\n\n    pnt = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false);\n\n    for (i = 0; i < 20; ++i) {\n      t = ta + Math.random() * (tb - ta);\n      pnt.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(t, true), curve.Y(t, true)], false);\n\n      if (!isNaN(pnt.scrCoords[0] + pnt.scrCoords[1] + pnt.scrCoords[2])) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Decide if a path segment is too far from the canvas that we do not need to draw it.\n   * @private\n   * @param  {Array}  a  Screen coordinates of the start point of the segment\n   * @param  {Array}  ta Curve parameter of a  (unused).\n   * @param  {Array}  b  Screen coordinates of the end point of the segment\n   * @param  {Array}  tb Curve parameter of b (unused).\n   * @param  {JXG.Board} board\n   * @returns {Boolean}   True if the segment is too far away from the canvas, false otherwise.\n   */\n  _isOutside: function (a, ta, b, tb, board) {\n    var off = 500,\n        cw = board.canvasWidth,\n        ch = board.canvasHeight;\n    return !!(a[1] < -off && b[1] < -off || a[2] < -off && b[2] < -off || a[1] > cw + off && b[1] > cw + off || a[2] > ch + off && b[2] > ch + off);\n  },\n\n  /**\n   * Decide if a point of a curve is too far from the canvas that we do not need to draw it.\n   * @private\n   * @param {Array}  a  Screen coordinates of the point\n   * @param {JXG.Board} board\n   * @returns {Boolean}  True if the point is too far away from the canvas, false otherwise.\n   */\n  _isOutsidePoint: function (a, board) {\n    var off = 500,\n        cw = board.canvasWidth,\n        ch = board.canvasHeight;\n    return !!(a[1] < -off || a[2] < -off || a[1] > cw + off || a[2] > ch + off);\n  },\n\n  /**\n   * For a curve c(t) defined on the interval [ta, tb] find the first point\n   * which is in the visible area of the board (plus some outside margin).\n   * <p>\n   * This method is necessary to restrict the recursive plotting algorithm\n   * {@link JXG.Curve._plotRecursive} to the visible area and not waste\n   * recursion to areas far outside of the visible area.\n   * <p>\n   * This method can also be used to find the last visible point\n   * by reversing the input parameters.\n   *\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param  {Array}  ta Curve parameter of a.\n   * @param  {Array}  b  Screen coordinates of the end point of the segment (unused)\n   * @param  {Array}  tb Curve parameter of b\n   * @return {Array}  Array of length two containing the screen ccordinates of\n   * the starting point and the curve parameter at this point.\n   * @private\n   */\n  _findStartPoint: function (curve, a, ta, b, tb) {\n    var i,\n        delta,\n        tc,\n        td,\n        z,\n        isFound,\n        w2,\n        h2,\n        pnt = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false),\n        steps = 40,\n        eps = 0.01,\n        fnX1,\n        fnX2,\n        fnY1,\n        fnY2,\n        bbox = curve.board.getBoundingBox(); // The code below is too unstable.\n    // E.g. [function(t) { return Math.pow(t, 2) * (t + 5) * Math.pow(t - 5, 2); }, -8, 8]\n    // Therefore, we return here.\n\n    if (true || !this._isOutsidePoint(a, curve.board)) {\n      return [a, ta];\n    }\n\n    w2 = (bbox[2] - bbox[0]) * 0.3;\n    h2 = (bbox[1] - bbox[3]) * 0.3;\n    bbox[0] -= w2;\n    bbox[1] += h2;\n    bbox[2] += w2;\n    bbox[3] -= h2;\n    delta = (tb - ta) / steps;\n    tc = ta + delta;\n    isFound = false;\n\n    fnX1 = function (t) {\n      return curve.X(t, true) - bbox[0];\n    };\n\n    fnY1 = function (t) {\n      return curve.Y(t, true) - bbox[1];\n    };\n\n    fnX2 = function (t) {\n      return curve.X(t, true) - bbox[2];\n    };\n\n    fnY2 = function (t) {\n      return curve.Y(t, true) - bbox[3];\n    };\n\n    for (i = 0; i < steps; ++i) {\n      // Left border\n      z = bbox[0];\n      td = _numerics.default.root(fnX1, [tc - delta, tc], curve); // td = Numerics.fzero(fnX1, [tc - delta, tc], this);\n      // console.log(\"A\", tc - delta, tc, td, Math.abs(this.X(td, true) - z));\n\n      if (Math.abs(curve.X(td, true) - z) < eps) {\n        //} * Math.abs(z)) {\n        isFound = true;\n        break;\n      } // Top border\n\n\n      z = bbox[1];\n      td = _numerics.default.root(fnY1, [tc - delta, tc], curve); // td = Numerics.fzero(fnY1, [tc - delta, tc], this);\n      // console.log(\"B\", tc - delta, tc, td, Math.abs(this.Y(td, true) - z));\n\n      if (Math.abs(curve.Y(td, true) - z) < eps) {\n        // * Math.abs(z)) {\n        isFound = true;\n        break;\n      } // Right border\n\n\n      z = bbox[2];\n      td = _numerics.default.root(fnX2, [tc - delta, tc], curve); // td = Numerics.fzero(fnX2, [tc - delta, tc], this);\n      // console.log(\"C\", tc - delta, tc, td, Math.abs(this.X(td, true) - z));\n\n      if (Math.abs(curve.X(td, true) - z) < eps) {\n        // * Math.abs(z)) {\n        isFound = true;\n        break;\n      } // Bottom border\n\n\n      z = bbox[3];\n      td = _numerics.default.root(fnY2, [tc - delta, tc], curve); // td = Numerics.fzero(fnY2, [tc - delta, tc], this);\n      // console.log(\"D\", tc - delta, tc, td, Math.abs(this.Y(td, true) - z));\n\n      if (Math.abs(curve.Y(td, true) - z) < eps) {\n        // * Math.abs(z)) {\n        isFound = true;\n        break;\n      }\n\n      tc += delta;\n    }\n\n    if (isFound) {\n      pnt.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(td, true), curve.Y(td, true)], false);\n      return [pnt.scrCoords, td];\n    }\n\n    console.log(\"TODO _findStartPoint\", curve.Y.toString(), tc);\n    pnt.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(ta, true), curve.Y(ta, true)], false);\n    return [pnt.scrCoords, ta];\n  },\n\n  /**\n   * Investigate a function term at the bounds of intervals where\n   * the function is not defined, e.g. log(x) at x = 0.\n   *\n   * c is inbetween a and b\n   *\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Array} a Screen coordinates of the left interval bound\n   * @param {Array} b Screen coordinates of the right interval bound\n   * @param {Array} c Screen coordinates of the bisection point at (ta + tb) / 2\n   * @param {Number} ta Parameter which evaluates to a, i.e. [1, X(ta), Y(ta)] = a in screen coordinates\n   * @param {Number} tb Parameter which evaluates to b, i.e. [1, X(tb), Y(tb)] = b in screen coordinates\n   * @param {Number} tc (ta + tb) / 2 = tc. Parameter which evaluates to b, i.e. [1, X(tc), Y(tc)] = c in screen coordinates\n   * @param {Number} depth Actual recursion depth. The recursion stops if depth is equal to 0.\n   * @returns {JXG.Boolean} true if the point is inserted and the recursion should stop, false otherwise.\n   *\n   * @private\n   */\n  _getBorderPos: function (curve, ta, a, tc, c, tb, b) {\n    var t,\n        pnt,\n        p,\n        j,\n        max_it = 30,\n        is_undef = false,\n        t_real2,\n        t_good,\n        t_bad;\n    pnt = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false);\n    j = 0; // Bisect a, b and c until the point t_real is inside of the definition interval\n    // and as close as possible at the boundary.\n    // t_real2 is the second closest point.\n    // There are four cases:\n    //  a  |  c  |  b\n    // ---------------\n    // inf | R   | R\n    // R   | R   | inf\n    // inf | inf | R\n    // R   | inf | inf\n    //\n\n    if (isNaN(a[1] + a[2]) && !isNaN(c[1] + c[2])) {\n      t_bad = ta;\n      t_good = tc;\n      t_real2 = tb;\n    } else if (isNaN(b[1] + b[2]) && !isNaN(c[1] + c[2])) {\n      t_bad = tb;\n      t_good = tc;\n      t_real2 = ta;\n    } else if (isNaN(c[1] + c[2]) && !isNaN(b[1] + b[2])) {\n      t_bad = tc;\n      t_good = tb;\n      t_real2 = tb + (tb - tc);\n    } else if (isNaN(c[1] + c[2]) && !isNaN(a[1] + a[2])) {\n      t_bad = tc;\n      t_good = ta;\n      t_real2 = ta - (tc - ta);\n    } else {\n      return false;\n    }\n\n    do {\n      t = 0.5 * (t_good + t_bad);\n      pnt.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(t, true), curve.Y(t, true)], false);\n      p = pnt.usrCoords;\n      is_undef = isNaN(p[1] + p[2]);\n\n      if (is_undef) {\n        t_bad = t;\n      } else {\n        t_real2 = t_good;\n        t_good = t;\n      }\n\n      ++j;\n    } while (j < max_it && Math.abs(t_good - t_bad) > _math.default.eps);\n\n    return t;\n  },\n\n  /**\n   *\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Number} ta\n   * @param {Number} tb\n   */\n  _getCuspPos: function (curve, ta, tb) {\n    var a = [curve.X(ta, true), curve.Y(ta, true)],\n        b = [curve.X(tb, true), curve.Y(tb, true)],\n        max_func = function (t) {\n      var c = [curve.X(t, true), curve.Y(t, true)];\n      return -(Math.sqrt((a[0] - c[0]) * (a[0] - c[0]) + (a[1] - c[1]) * (a[1] - c[1])) + Math.sqrt((b[0] - c[0]) * (b[0] - c[0]) + (b[1] - c[1]) * (b[1] - c[1])));\n    };\n\n    return _numerics.default.fminbr(max_func, [ta, tb], curve);\n  },\n\n  /**\n   *\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Number} ta\n   * @param {Number} tb\n   */\n  _getJumpPos: function (curve, ta, tb) {\n    var max_func = function (t) {\n      var e = _math.default.eps * _math.default.eps,\n          c1 = [curve.X(t, true), curve.Y(t, true)],\n          c2 = [curve.X(t + e, true), curve.Y(t + e, true)];\n      return -Math.abs((c2[1] - c1[1]) / (c2[0] - c1[0]));\n    };\n\n    return _numerics.default.fminbr(max_func, [ta, tb], curve);\n  },\n\n  /**\n   *\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Number} t\n   * @private\n   */\n  _getLimits: function (curve, t) {\n    var res,\n        step = 2 / (curve.maxX() - curve.minX()),\n        x_l,\n        x_r,\n        y_l,\n        y_r; // From left\n\n    res = _extrapolate.default.limit(t, -step, curve.X);\n    x_l = res[0];\n\n    if (res[1] === \"infinite\") {\n      x_l = Math.sign(x_l) * Infinity;\n    }\n\n    res = _extrapolate.default.limit(t, -step, curve.Y);\n    y_l = res[0];\n\n    if (res[1] === \"infinite\") {\n      y_l = Math.sign(y_l) * Infinity;\n    } // From right\n\n\n    res = _extrapolate.default.limit(t, step, curve.X);\n    x_r = res[0];\n\n    if (res[1] === \"infinite\") {\n      x_r = Math.sign(x_r) * Infinity;\n    }\n\n    res = _extrapolate.default.limit(t, step, curve.Y);\n    y_r = res[0];\n\n    if (res[1] === \"infinite\") {\n      y_r = Math.sign(y_r) * Infinity;\n    }\n\n    return {\n      left_x: x_l,\n      left_y: y_l,\n      right_x: x_r,\n      right_y: y_r,\n      t: t\n    };\n  },\n\n  /**\n   *\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Array} a\n   * @param {Number} tc\n   * @param {Array} c\n   * @param {Number} tb\n   * @param {Array} b\n   * @param {String} may_be_special\n   * @param {Number} depth\n   * @private\n   */\n  _getLimes: function (curve, ta, a, tc, c, tb, b, may_be_special, depth) {\n    var t;\n\n    if (may_be_special === \"border\") {\n      t = this._getBorderPos(curve, ta, a, tc, c, tb, b);\n    } else if (may_be_special === \"cusp\") {\n      t = this._getCuspPos(curve, ta, tb);\n    } else if (may_be_special === \"jump\") {\n      t = this._getJumpPos(curve, ta, tb);\n    }\n\n    return this._getLimits(curve, t);\n  },\n\n  /**\n   * Recursive interval bisection algorithm for curve plotting.\n   * Used in {@link JXG.Curve.updateParametricCurve}.\n   * @private\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Array} a Screen coordinates of the left interval bound\n   * @param {Number} ta Parameter which evaluates to a, i.e. [1, X(ta), Y(ta)] = a in screen coordinates\n   * @param {Array} b Screen coordinates of the right interval bound\n   * @param {Number} tb Parameter which evaluates to b, i.e. [1, X(tb), Y(tb)] = b in screen coordinates\n   * @param {Number} depth Actual recursion depth. The recursion stops if depth is equal to 0.\n   * @param {Number} delta If the distance of the bisection point at (ta + tb) / 2 from the point (a + b) / 2 is less then delta,\n   *                 the segment [a,b] is regarded as straight line.\n   * @returns {JXG.Curve} Reference to the curve object.\n   */\n  _plotNonRecursive: function (curve, a, ta, b, tb, d) {\n    var tc,\n        c,\n        ds,\n        mindepth = 0,\n        limes = null,\n        a_nan,\n        b_nan,\n        isSmooth = false,\n        may_be_special = \"\",\n        x,\n        y,\n        oc,\n        depth,\n        ds0,\n        stack = [],\n        stack_length = 0,\n        item;\n    oc = curve.board.origin.scrCoords;\n    stack[stack_length++] = [a, ta, b, tb, d, Infinity];\n\n    while (stack_length > 0) {\n      // item = stack.pop();\n      item = stack[--stack_length];\n      a = item[0];\n      ta = item[1];\n      b = item[2];\n      tb = item[3];\n      depth = item[4];\n      ds0 = item[5];\n      isSmooth = false;\n      may_be_special = \"\";\n      limes = null; //console.log(stack.length, item)\n\n      if (curve.points.length > 65536) {\n        return;\n      }\n\n      if (depth < this.nanLevel) {\n        // Test if the function is undefined in the whole interval [ta, tb]\n        if (this._isUndefined(curve, a, ta, b, tb)) {\n          continue;\n        } // Test if the graph is far outside the visible are for the interval [ta, tb]\n\n\n        if (this._isOutside(a, ta, b, tb, curve.board)) {\n          continue;\n        }\n      }\n\n      tc = (ta + tb) * 0.5; // Screen coordinates of point at tc\n\n      x = curve.X(tc, true);\n      y = curve.Y(tc, true);\n      c = [1, oc[1] + x * curve.board.unitX, oc[2] - y * curve.board.unitY];\n      ds = this._triangleDists(a, b, c); // returns [d_ab, d_ac, d_cb, d_cd]\n\n      a_nan = isNaN(a[1] + a[2]);\n      b_nan = isNaN(b[1] + b[2]);\n\n      if (a_nan && !b_nan || !a_nan && b_nan) {\n        may_be_special = \"border\";\n      } else if (ds[0] > 0.66 * ds0 || ds[0] < this.cusp_threshold * (ds[1] + ds[2]) || ds[1] > 5 * ds[2] || ds[2] > 5 * ds[1]) {\n        may_be_special = \"cusp\";\n      } else if (ds[2] > this.jump_threshold * ds[0] || ds[1] > this.jump_threshold * ds[0] || ds[0] === Infinity || ds[1] === Infinity || ds[2] === Infinity) {\n        may_be_special = \"jump\";\n      }\n\n      isSmooth = may_be_special === \"\" && depth < this.smoothLevel && ds[3] < this.smooth_threshold;\n\n      if (depth < this.testLevel && !isSmooth) {\n        if (may_be_special === \"\") {\n          isSmooth = true;\n        } else {\n          limes = this._getLimes(curve, ta, a, tc, c, tb, b, may_be_special, depth);\n        }\n      }\n\n      if (limes !== null) {\n        c = [1, NaN, NaN];\n\n        this._insertPoint(curve, c, tc, depth, limes);\n      } else if (depth <= mindepth || isSmooth) {\n        this._insertPoint(curve, c, tc, depth, null);\n      } else {\n        stack[stack_length++] = [c, tc, b, tb, depth - 1, ds[0]];\n        stack[stack_length++] = [a, ta, c, tc, depth - 1, ds[0]];\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Updates the data points of a parametric curve. This version is used if {@link JXG.Curve#plotVersion} is <tt>3</tt>.\n   * This is an experimental plot version, <b>not recommended</b> to be used.\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Number} mi Left bound of curve\n   * @param {Number} ma Right bound of curve\n   * @returns {JXG.Curve} Reference to the curve object.\n   */\n  updateParametricCurve_v3: function (curve, mi, ma) {\n    var ta,\n        tb,\n        a,\n        b,\n        suspendUpdate = false,\n        pa = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false),\n        pb = new _coords.default(_constants.default.COORDS_BY_USER, [0, 0], curve.board, false),\n        depth,\n        w2,\n        // h2,\n    bbox,\n        ret_arr; // console.log(\"-----------------------------------------------------------\");\n    // console.time(\"plot\");\n\n    if (curve.board.updateQuality === curve.board.BOARD_QUALITY_LOW) {\n      depth = _type.default.evaluate(curve.visProp.recursiondepthlow) || 14;\n    } else {\n      depth = _type.default.evaluate(curve.visProp.recursiondepthhigh) || 17;\n    } // smoothLevel has to be small for graphs in a huge interval.\n\n\n    this.smoothLevel = 7; //depth - 10;\n\n    this.nanLevel = depth - 4;\n    this.testLevel = 4;\n    this.cusp_threshold = 0.5;\n    this.jump_threshold = 0.99;\n    this.smooth_threshold = 2;\n    curve.points = [];\n\n    if (curve.xterm === \"x\") {\n      // For function graphs we can restrict the plot interval\n      // to the visible area +plus margin\n      bbox = curve.board.getBoundingBox();\n      w2 = (bbox[2] - bbox[0]) * 0.3; //h2 = (bbox[1] - bbox[3]) * 0.3;\n\n      ta = Math.max(mi, bbox[0] - w2);\n      tb = Math.min(ma, bbox[2] + w2);\n    } else {\n      ta = mi;\n      tb = ma;\n    }\n\n    pa.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(ta, suspendUpdate), curve.Y(ta, suspendUpdate)], false); // The first function calls of X() and Y() are done. We can now\n    // switch `suspendUpdate` on. If supported by the functions, this\n    // avoids for the rest of the plotting algorithm, evaluation of any\n    // parent elements.\n\n    suspendUpdate = true;\n    pb.setCoordinates(_constants.default.COORDS_BY_USER, [curve.X(tb, suspendUpdate), curve.Y(tb, suspendUpdate)], false); // Find start and end points of the visible area (plus a certain margin)\n\n    ret_arr = this._findStartPoint(curve, pa.scrCoords, ta, pb.scrCoords, tb);\n    pa.setCoordinates(_constants.default.COORDS_BY_SCREEN, ret_arr[0], false);\n    ta = ret_arr[1];\n    ret_arr = this._findStartPoint(curve, pb.scrCoords, tb, pa.scrCoords, ta);\n    pb.setCoordinates(_constants.default.COORDS_BY_SCREEN, ret_arr[0], false);\n    tb = ret_arr[1]; // Save the visible area.\n    // This can be used in Curve.hasPoint().\n\n    this._visibleArea = [ta, tb]; // Start recursive plotting algorithm\n\n    a = pa.copy(\"scrCoords\");\n    b = pb.copy(\"scrCoords\");\n    pa._t = ta;\n    curve.points.push(pa);\n    this._lastScrCrds = pa.copy(\"scrCoords\"); // Used in _insertPoint\n\n    this._lastUsrCrds = pa.copy(\"usrCoords\"); // Used in _insertPoint\n\n    this._plotNonRecursive(curve, a, ta, b, tb, depth);\n\n    pb._t = tb;\n    curve.points.push(pb);\n    curve.numberPoints = curve.points.length; // console.timeEnd(\"plot\");\n    // console.log(\"number of points:\", this.numberPoints);\n\n    return curve;\n  },\n  //----------------------------------------------------------------------\n  // Plot algorithm v4\n  //----------------------------------------------------------------------\n  _criticalInterval: function (vec, le, level) {\n    var i,\n        j,\n        le1,\n        med,\n        sgn,\n        sgnChange,\n        isGroup = false,\n        abs_vec,\n        last = -Infinity,\n        very_small = false,\n        smooth = false,\n        group = 0,\n        groups = [],\n        types = [],\n        positions = [];\n    abs_vec = _statistics.default.abs(vec);\n    med = _statistics.default.median(abs_vec);\n\n    if (med < 1.0e-7) {\n      med = 1.0e-7;\n      very_small = true;\n    } else {\n      med *= this.criticalThreshold;\n    } //console.log(\"Median\", med);\n\n\n    for (i = 0; i < le; i++) {\n      // Start a group if not yet done and\n      // add position to group\n      if (abs_vec[i] > med\n      /*&& abs_vec[i] > 0.01*/\n      ) {\n        positions.push({\n          i: i,\n          v: vec[i],\n          group: group\n        });\n        last = i;\n\n        if (!isGroup) {\n          isGroup = true;\n        }\n      } else {\n        if (isGroup && i > last + 4) {\n          // End the group\n          if (positions.length > 0) {\n            groups.push(positions.slice(0));\n          }\n\n          positions = [];\n          isGroup = false;\n          group++;\n        }\n      }\n    }\n\n    if (isGroup) {\n      if (positions.length > 1) {\n        groups.push(positions.slice(0));\n      }\n    }\n\n    if (very_small && groups.length === 0) {\n      smooth = true;\n    } // Decide if there is a singular critical point\n    // or if a whole interval is problematic.\n    // The latter is the case if the differences have many sign changes.\n\n\n    for (j = 0; j < groups.length; j++) {\n      types[j] = \"point\";\n      le1 = groups[j].length;\n\n      if (le1 < 64) {\n        continue;\n      }\n\n      sgnChange = 0;\n      sgn = Math.sign(groups[j][0].v);\n\n      for (i = 1; i < le1; i++) {\n        if (Math.sign(groups[j][i].v) !== sgn) {\n          sgnChange++;\n          sgn = Math.sign(groups[j][i].v);\n        }\n      }\n\n      if (sgnChange * 6 > le1) {\n        types[j] = \"interval\";\n      }\n    }\n\n    return {\n      smooth: smooth,\n      groups: groups,\n      types: types\n    };\n  },\n  Component: function () {\n    this.left_isNaN = false;\n    this.right_isNaN = false;\n    this.left_t = null;\n    this.right_t = null;\n    this.t_values = [];\n    this.x_values = [];\n    this.y_values = [];\n    this.len = 0;\n  },\n  findComponents: function (curve, mi, ma, steps) {\n    var i,\n        t,\n        le,\n        h,\n        x,\n        y,\n        components = [],\n        comp,\n        comp_nr = 0,\n        cnt = 0,\n        cntNaNs = 0,\n        comp_started = false,\n        suspended = false;\n    h = (ma - mi) / steps;\n    components[comp_nr] = new this.Component();\n    comp = components[comp_nr];\n\n    for (i = 0, t = mi; i <= steps; i++, t += h) {\n      x = curve.X(t, suspended);\n      y = curve.Y(t, suspended);\n\n      if (isNaN(x) || isNaN(y)) {\n        cntNaNs++; // Wait for - at least - two consecutive NaNs\n        // This avoids starting a new component if\n        // the function value has infinity as intermediate value.\n\n        if (cntNaNs > 1 && comp_started) {\n          // Finalize a component\n          comp.right_isNaN = true;\n          comp.right_t = t - h;\n          comp.len = cnt; // Prepare a new component\n\n          comp_started = false;\n          comp_nr++;\n          components[comp_nr] = new this.Component();\n          comp = components[comp_nr];\n          cntNaNs = 0;\n        }\n      } else {\n        // Now there is a non-NaN entry.\n        if (!comp_started) {\n          // Start the component\n          comp_started = true;\n          cnt = 0;\n\n          if (cntNaNs > 0) {\n            comp.left_t = t - h;\n            comp.left_isNaN = true;\n          }\n        }\n\n        cntNaNs = 0; // Add the value to the component\n\n        comp.t_values[cnt] = t;\n        comp.x_values[cnt] = x;\n        comp.y_values[cnt] = y;\n        cnt++;\n      }\n\n      if (i === 0) {\n        suspended = true;\n      }\n    }\n\n    if (comp_started) {\n      comp.len = cnt;\n    } else {\n      components.pop();\n    }\n\n    return components;\n  },\n  getPointType: function (curve, pos, t_approx, t_values, x_table, y_table, len) {\n    var x_values = x_table[0],\n        y_values = y_table[0],\n        full_len = t_values.length,\n        result = {\n      idx: pos,\n      t: t_approx,\n      //t_values[pos],\n      x: x_values[pos],\n      y: y_values[pos],\n      type: \"other\"\n    };\n\n    if (pos < 5) {\n      result.type = \"borderleft\";\n      result.idx = 0;\n      result.t = t_values[0];\n      result.x = x_values[0];\n      result.y = y_values[0]; // console.log('Border left', result.t);\n\n      return result;\n    }\n\n    if (pos > len - 6) {\n      result.type = \"borderright\";\n      result.idx = full_len - 1;\n      result.t = t_values[full_len - 1];\n      result.x = x_values[full_len - 1];\n      result.y = y_values[full_len - 1]; // console.log('Border right', result.t, full_len - 1);\n\n      return result;\n    }\n\n    return result;\n  },\n  newtonApprox: function (idx, t, h, level, table) {\n    var i,\n        s = 0.0;\n\n    for (i = level; i > 0; i--) {\n      s = (s + table[i][idx]) * (t - (i - 1) * h) / i;\n    }\n\n    return s + table[0][idx];\n  },\n  thiele: function (t, recip, t_values, idx, degree) {\n    var i,\n        v = 0.0;\n\n    for (i = degree; i > 1; i--) {\n      v = (t - t_values[idx + i]) / (recip[i][idx + 1] - recip[i - 2][idx + 1] + v);\n    }\n\n    return recip[0][idx + 1] + (t - t_values[idx + 1]) / (recip[1][idx + 1] + v);\n  },\n  differenceMethodExperiments: function (component, curve) {\n    var i,\n        level,\n        le,\n        up,\n        t_values = component.t_values,\n        x_values = component.x_values,\n        y_values = component.y_values,\n        x_diffs = [],\n        y_diffs = [],\n        x_slopes = [],\n        y_slopes = [],\n        x_table = [],\n        y_table = [],\n        x_recip = [],\n        y_recip = [],\n        h,\n        numerator,\n        // x_med, y_med,\n    foundCriticalPoint = 0,\n        pos,\n        ma,\n        j,\n        v,\n        groups,\n        criticalPoints = [];\n    h = t_values[1] - t_values[0];\n    x_table.push([]);\n    y_table.push([]);\n    x_recip.push([]);\n    y_recip.push([]);\n    le = y_values.length;\n\n    for (i = 0; i < le; i++) {\n      x_table[0][i] = x_values[i];\n      y_table[0][i] = y_values[i];\n      x_recip[0][i] = x_values[i];\n      y_recip[0][i] = y_values[i];\n    }\n\n    x_table.push([]);\n    y_table.push([]);\n    x_recip.push([]);\n    y_recip.push([]);\n    numerator = h;\n    le = y_values.length - 1;\n\n    for (i = 0; i < le; i++) {\n      x_diffs[i] = x_values[i + 1] - x_values[i];\n      y_diffs[i] = y_values[i + 1] - y_values[i];\n      x_slopes[i] = x_diffs[i];\n      y_slopes[i] = y_diffs[i];\n      x_table[1][i] = x_diffs[i];\n      y_table[1][i] = y_diffs[i];\n      x_recip[1][i] = numerator / x_diffs[i];\n      y_recip[1][i] = numerator / y_diffs[i];\n    }\n\n    le--;\n    up = Math.min(8, y_values.length - 1);\n\n    for (level = 1; level < up; level++) {\n      x_table.push([]);\n      y_table.push([]);\n      x_recip.push([]);\n      y_recip.push([]);\n      numerator *= h;\n\n      for (i = 0; i < le; i++) {\n        x_diffs[i] = x_diffs[i + 1] - x_diffs[i];\n        y_diffs[i] = y_diffs[i + 1] - y_diffs[i];\n        x_table[level + 1][i] = x_diffs[i];\n        y_table[level + 1][i] = y_diffs[i];\n        x_recip[level + 1][i] = numerator / (x_recip[level][i + 1] - x_recip[level][i]) + x_recip[level - 1][i + 1];\n        y_recip[level + 1][i] = numerator / (y_recip[level][i + 1] - y_recip[level][i]) + y_recip[level - 1][i + 1];\n      } // if (level == 1) {\n      //     console.log(\"bends level=\", level, y_diffs.toString());\n      // }\n      // Store point location which may be centered around\n      // critical points.\n      // If the lebvel is suitable, step out of the loop.\n\n\n      groups = this._criticalPoints(y_diffs, le, level);\n\n      if (groups === false) {\n        // Its seems, the degree of the polynomial is equal to level\n        console.log(\"Polynomial of degree\", level);\n        groups = [];\n        break;\n      }\n\n      if (groups.length > 0) {\n        foundCriticalPoint++;\n\n        if (foundCriticalPoint > 1 && level % 2 === 0) {\n          break;\n        }\n      }\n\n      le--;\n    } // console.log(\"Last diffs\", y_diffs, \"level\", level);\n    // Analyze the groups which have been found.\n\n\n    for (i = 0; i < groups.length; i++) {\n      // console.log(\"Group\", i, groups[i])\n      // Identify the maximum difference, i.e. the center of the \"problem\"\n      ma = -Infinity;\n\n      for (j = 0; j < groups[i].length; j++) {\n        v = Math.abs(groups[i][j].v);\n\n        if (v > ma) {\n          ma = v;\n          pos = j;\n        }\n      }\n\n      pos = Math.floor(groups[i][pos].i + level / 2); // Analyze the critical point\n\n      criticalPoints.push(this.getPointType(curve, pos, t_values, x_values, y_values, x_slopes, y_slopes, le + 1));\n    }\n\n    return [criticalPoints, x_table, y_table, x_recip, y_recip];\n  },\n  getCenterOfCriticalInterval: function (group, degree, t_values) {\n    var ma,\n        j,\n        pos,\n        v,\n        num = 0.0,\n        den = 0.0,\n        h = t_values[1] - t_values[0],\n        pos_mean,\n        range = []; // Identify the maximum difference, i.e. the center of the \"problem\"\n    // If there are several equal maxima, store the positions\n    // in the array range and determine the center of the array.\n\n    ma = -Infinity;\n    range = [];\n\n    for (j = 0; j < group.length; j++) {\n      v = Math.abs(group[j].v);\n\n      if (v > ma) {\n        range = [j];\n        ma = v;\n        pos = j;\n      } else if (ma === v) {\n        range.push(j);\n      }\n    }\n\n    if (range.length > 0) {\n      pos_mean = range.reduce(function (total, val) {\n        return total + val;\n      }, 0) / range.length;\n      pos = Math.floor(pos_mean);\n      pos_mean += group[0].i;\n    }\n\n    if (ma < Infinity) {\n      for (j = 0; j < group.length; j++) {\n        num += Math.abs(group[j].v) * group[j].i;\n        den += Math.abs(group[j].v);\n      }\n\n      pos_mean = num / den;\n    }\n\n    pos_mean += degree / 2;\n    return [group[pos].i + degree / 2, pos_mean, t_values[Math.floor(pos_mean)] + h * (pos_mean - Math.floor(pos_mean))];\n  },\n  differenceMethod: function (component, curve) {\n    var i,\n        level,\n        le,\n        up,\n        t_values = component.t_values,\n        x_values = component.x_values,\n        y_values = component.y_values,\n        x_table = [],\n        y_table = [],\n        foundCriticalPoint = 0,\n        degree_x = -1,\n        degree_y = -1,\n        pos,\n        res,\n        res_x,\n        res_y,\n        t_approx,\n        groups = [],\n        types,\n        criticalPoints = [];\n    le = y_values.length; // x_table.push([]);\n    // y_table.push([]);\n    // for (i = 0; i < le; i++) {\n    //     x_table[0][i] = x_values[i];\n    //     y_table[0][i] = y_values[i];\n    // }\n\n    x_table.push(new Float64Array(x_values));\n    y_table.push(new Float64Array(y_values));\n    le--;\n    up = Math.min(12, le);\n\n    for (level = 0; level < up; level++) {\n      // Old style method:\n      // x_table.push([]);\n      // y_table.push([]);\n      // for (i = 0; i < le; i++) {\n      //     x_table[level + 1][i] = x_table[level][i + 1] - x_table[level][i];\n      //     y_table[level + 1][i] = y_table[level][i + 1] - y_table[level][i];\n      // }\n      // New method:\n      x_table.push(new Float64Array(le));\n      y_table.push(new Float64Array(le));\n      x_table[level + 1] = x_table[level].map(function (v, idx, arr) {\n        return arr[idx + 1] - v;\n      });\n      y_table[level + 1] = y_table[level].map(function (v, idx, arr) {\n        return arr[idx + 1] - v;\n      }); // Store point location which may be centered around critical points.\n      // If the level is suitable, step out of the loop.\n\n      res_y = this._criticalInterval(y_table[level + 1], le, level);\n\n      if (res_y.smooth === true) {\n        // Its seems, the degree of the polynomial is equal to level\n        // If the values in level + 1 are zero, it might be a polynomial of degree level.\n        // Seems to work numerically stable until degree 6.\n        degree_y = level;\n        groups = [];\n      }\n\n      res_x = this._criticalInterval(x_table[level + 1], le, level);\n\n      if (degree_x === -1 && res_x.smooth === true) {\n        // Its seems, the degree of the polynomial is equal to level\n        // If the values in level + 1 are zero, it might be a polynomial of degree level.\n        // Seems to work numerically stable until degree 6.\n        degree_x = level;\n      }\n\n      if (degree_y >= 0) {\n        break;\n      }\n\n      if (res_y.groups.length > 0) {\n        foundCriticalPoint++;\n\n        if (foundCriticalPoint > 2 && (level + 1) % 2 === 0) {\n          groups = res_y.groups;\n          types = res_y.types;\n          break;\n        }\n      }\n\n      le--;\n    } // console.log(\"Last diffs\", y_table[Math.min(level + 1, up)], \"level\", level + 1);\n    // Analyze the groups which have been found.\n\n\n    for (i = 0; i < groups.length; i++) {\n      if (types[i] === \"interval\") {\n        continue;\n      } // console.log(\"Group\", i, groups[i], types[i], level + 1)\n\n\n      res = this.getCenterOfCriticalInterval(groups[i], level + 1, t_values);\n      pos = res_y[0];\n      pos = Math.floor(res[1]);\n      t_approx = res[2]; // console.log(\"Critical points:\", groups, res, pos)\n      // Analyze the type of the critical point\n      // Result is of type 'borderleft', borderright', 'other'\n\n      criticalPoints.push(this.getPointType(curve, pos, t_approx, t_values, x_table, y_table, le + 1));\n    } // if (level === up) {\n    //     console.log(\"No convergence!\");\n    // } else {\n    //     console.log(\"Convergence level\", level);\n    // }\n\n\n    return [criticalPoints, x_table, y_table, degree_x, degree_y];\n  },\n  _insertPoint_v4: function (curve, crds, t, doLog) {\n    var p,\n        prev = null,\n        x,\n        y,\n        near = 0.8;\n\n    if (curve.points.length > 0) {\n      prev = curve.points[curve.points.length - 1].scrCoords;\n    } // Add regular point\n\n\n    p = new _coords.default(_constants.default.COORDS_BY_USER, crds, curve.board);\n\n    if (prev !== null) {\n      x = p.scrCoords[1] - prev[1];\n      y = p.scrCoords[2] - prev[2];\n\n      if (x * x + y * y < near * near) {\n        // Math.abs(p.scrCoords[1] - prev[1]) < near &&\n        // Math.abs(p.scrCoords[2] - prev[2]) < near) {\n        return;\n      }\n    }\n\n    p._t = t;\n    curve.points.push(p);\n  },\n  getInterval: function (curve, ta, tb) {\n    var t_int, x_int, y_int; //console.log('critical point', ta, tb);\n\n    _ia.default.disable();\n\n    t_int = _ia.default.Interval(ta, tb);\n    curve.board.mathLib = _ia.default;\n    curve.board.mathLibJXG = _ia.default;\n    x_int = curve.X(t_int, true);\n    y_int = curve.Y(t_int, true);\n    curve.board.mathLib = Math;\n    curve.board.mathLibJXG = _jxg.default.Math; //console.log(x_int, y_int);\n\n    return y_int;\n  },\n  sign: function (v) {\n    if (v < 0) {\n      return -1;\n    }\n\n    if (v > 0) {\n      return 1;\n    }\n\n    return 0;\n  },\n  handleBorder: function (curve, comp, group, x_table, y_table) {\n    var idx = group.idx,\n        t,\n        t1,\n        t2,\n        size = 32,\n        y_int,\n        x,\n        y,\n        lo,\n        hi,\n        i,\n        components2,\n        le,\n        h; // console.log(\"HandleBorder at t =\", t_approx);\n    // console.log(\"component:\", comp)\n    // console.log(\"Group:\", group);\n\n    h = comp.t_values[1] - comp.t_values[0];\n\n    if (group.type === \"borderleft\") {\n      t = comp.left_isNaN ? comp.left_t : group.t - h;\n      t1 = t;\n      t2 = t1 + h;\n    } else if (group.type === \"borderright\") {\n      t = comp.right_isNaN ? comp.right_t : group.t + h;\n      t2 = t;\n      t1 = t2 - h;\n    } else {\n      console.log(\"No bordercase!!!\");\n    }\n\n    components2 = this.findComponents(curve, t1, t2, size);\n\n    if (components2.length === 0) {\n      return;\n    }\n\n    if (group.type === \"borderleft\") {\n      t1 = components2[0].left_t;\n      t2 = components2[0].t_values[0];\n      h = components2[0].t_values[1] - components2[0].t_values[0];\n      t1 = t1 === null ? t2 - h : t1;\n      t = t1;\n      y_int = this.getInterval(curve, t1, t2);\n\n      if (_type.default.isObject(y_int)) {\n        lo = y_int.lo;\n        hi = y_int.hi;\n        x = curve.X(t, true);\n        y = y_table[1][idx] < 0 ? hi : lo;\n\n        this._insertPoint_v4(curve, [1, x, y], t);\n      }\n    }\n\n    le = components2[0].t_values.length;\n\n    for (i = 0; i < le; i++) {\n      t = components2[0].t_values[i];\n      x = components2[0].x_values[i];\n      y = components2[0].y_values[i];\n\n      this._insertPoint_v4(curve, [1, x, y], t);\n    }\n\n    if (group.type === \"borderright\") {\n      t1 = components2[0].t_values[le - 1];\n      t2 = components2[0].right_t;\n      h = components2[0].t_values[1] - components2[0].t_values[0];\n      t2 = t2 === null ? t1 + h : t2;\n      t = t2;\n      y_int = this.getInterval(curve, t1, t2);\n\n      if (_type.default.isObject(y_int)) {\n        lo = y_int.lo;\n        hi = y_int.hi;\n        x = curve.X(t, true);\n        y = y_table[1][idx] > 0 ? hi : lo;\n\n        this._insertPoint_v4(curve, [1, x, y], t);\n      }\n    }\n  },\n  _seconditeration_v4: function (curve, comp, group, x_table, y_table) {\n    var i, t1, t2, ret, components2, comp2, idx, groups2, g, x_table2, y_table2, start, le; // Look at two points, hopefully left and right from the critical point\n\n    t1 = comp.t_values[group.idx - 2];\n    t2 = comp.t_values[group.idx + 2];\n    components2 = this.findComponents(curve, t1, t2, 64);\n\n    for (idx = 0; idx < components2.length; idx++) {\n      comp2 = components2[idx];\n      ret = this.differenceMethod(comp2, curve);\n      groups2 = ret[0];\n      x_table2 = ret[1];\n      y_table2 = ret[2];\n      start = 0;\n\n      for (g = 0; g <= groups2.length; g++) {\n        if (g === groups2.length) {\n          le = comp2.len;\n        } else {\n          le = groups2[g].idx;\n        } // Insert all uncritical points until next critical point\n\n\n        for (i = start; i < le; i++) {\n          if (!isNaN(comp2.x_values[i]) && !isNaN(comp2.y_values[i])) {\n            this._insertPoint_v4(curve, [1, comp2.x_values[i], comp2.y_values[i]], comp2.t_values[i]);\n          }\n        } // Handle next critical point\n\n\n        if (g < groups2.length) {\n          this.handleSingularity(curve, comp2, groups2[g], x_table2, y_table2);\n          start = groups2[g].idx + 1;\n        }\n      }\n\n      le = comp2.len;\n\n      if (idx < components2.length - 1) {\n        this._insertPoint_v4(curve, [1, NaN, NaN], comp2.right_t);\n      }\n    }\n\n    return this;\n  },\n  _recurse_v4: function (curve, t1, t2, x1, y1, x2, y2, level) {\n    var tol = 2,\n        t = (t1 + t2) * 0.5,\n        x = curve.X(t, true),\n        y = curve.Y(t, true),\n        dx,\n        dy; //console.log(\"Level\", level)\n\n    if (level === 0) {\n      this._insertPoint_v4(curve, [1, NaN, NaN], t);\n\n      return;\n    } // console.log(\"R\", t1, t2)\n\n\n    dx = (x - x1) * curve.board.unitX;\n    dy = (y - y1) * curve.board.unitY; // console.log(\"D1\", Math.sqrt(dx * dx + dy * dy))\n\n    if (Math.sqrt(dx * dx + dy * dy) > tol) {\n      this._recurse_v4(curve, t1, t, x1, y1, x, y, level - 1);\n    } else {\n      this._insertPoint_v4(curve, [1, x, y], t);\n    }\n\n    dx = (x - x2) * curve.board.unitX;\n    dy = (y - y2) * curve.board.unitY; // console.log(\"D2\", Math.sqrt(dx * dx + dy * dy), x-x2, y-y2)\n\n    if (Math.sqrt(dx * dx + dy * dy) > tol) {\n      this._recurse_v4(curve, t, t2, x, y, x2, y2, level - 1);\n    } else {\n      this._insertPoint_v4(curve, [1, x, y], t);\n    }\n  },\n  handleSingularity: function (curve, comp, group, x_table, y_table) {\n    var idx = group.idx,\n        t,\n        t1,\n        t2,\n        y_int,\n        i1,\n        i2,\n        x,\n        y,\n        lo,\n        hi,\n        d_lft,\n        d_rgt,\n        d_thresh = 100,\n        di1 = 5,\n        di2 = 3,\n        d1,\n        d2;\n    t = group.t;\n    console.log(\"HandleSingularity at t =\", t); // console.log(comp.t_values[idx - 1], comp.y_values[idx - 1], comp.t_values[idx + 1], comp.y_values[idx + 1]);\n    // console.log(group);\n    // Look at two points, hopefully left and right from the critical point\n\n    t1 = comp.t_values[idx - di1];\n    t2 = comp.t_values[idx + di1];\n    y_int = this.getInterval(curve, t1, t2);\n\n    if (_type.default.isObject(y_int)) {\n      lo = y_int.lo;\n      hi = y_int.hi;\n    } else {\n      if (y_table[0][idx - 1] < y_table[0][idx + 1]) {\n        lo = y_table[0][idx - 1];\n        hi = y_table[0][idx + 1];\n      } else {\n        lo = y_table[0][idx + 1];\n        hi = y_table[0][idx - 1];\n      }\n    }\n\n    x = curve.X(t, true);\n    d_lft = (y_table[0][idx - di2] - y_table[0][idx - di1]) / (comp.t_values[idx - di2] - comp.t_values[idx - di1]);\n    d_rgt = (y_table[0][idx + di2] - y_table[0][idx + di1]) / (comp.t_values[idx + di2] - comp.t_values[idx + di1]);\n    console.log(\":::\", d_lft, d_rgt); //this._insertPoint_v4(curve, [1, NaN, NaN], 0);\n\n    if (d_lft < -d_thresh) {\n      // Left branch very steep downwards -> add the minimum\n      this._insertPoint_v4(curve, [1, x, lo], t, true);\n\n      if (d_rgt <= d_thresh) {\n        // Right branch not very steep upwards -> interrupt the curve\n        // I.e. it looks like -infty / (finite or infty) and not like -infty / -infty\n        this._insertPoint_v4(curve, [1, NaN, NaN], t);\n      }\n    } else if (d_lft > d_thresh) {\n      // Left branch very steep upwards -> add the maximum\n      this._insertPoint_v4(curve, [1, x, hi], t);\n\n      if (d_rgt >= -d_thresh) {\n        // Right branch not very steep downwards -> interrupt the curve\n        // I.e. it looks like infty / (finite or -infty) and not like infty / infty\n        this._insertPoint_v4(curve, [1, NaN, NaN], t);\n      }\n    } else {\n      if (lo === -Infinity) {\n        this._insertPoint_v4(curve, [1, x, lo], t, true);\n\n        this._insertPoint_v4(curve, [1, NaN, NaN], t);\n      }\n\n      if (hi === Infinity) {\n        this._insertPoint_v4(curve, [1, NaN, NaN], t);\n\n        this._insertPoint_v4(curve, [1, x, hi], t, true);\n      }\n\n      if (group.t < comp.t_values[idx]) {\n        i1 = idx - 1;\n        i2 = idx;\n      } else {\n        i1 = idx;\n        i2 = idx + 1;\n      }\n\n      t1 = comp.t_values[i1];\n      t2 = comp.t_values[i2];\n\n      this._recurse_v4(curve, t1, t2, x_table[0][i1], y_table[0][i1], x_table[0][i2], y_table[0][i2], 10); // x = (x_table[0][idx] - x_table[0][idx - 1]) * curve.board.unitX;\n      // y = (y_table[0][idx] - y_table[0][idx - 1]) * curve.board.unitY;\n      // d1 = Math.sqrt(x * x + y * y);\n      // x = (x_table[0][idx + 1] - x_table[0][idx]) * curve.board.unitX;\n      // y = (y_table[0][idx + 1] - y_table[0][idx]) * curve.board.unitY;\n      // d2 = Math.sqrt(x * x + y * y);\n      // console.log(\"end\", t1, t2, t);\n      // if (true || (d1 > 2 || d2 > 2)) {\n      // console.log(d1, d2, y_table[0][idx])\n      //                     // Finite jump\n      //                     this._insertPoint_v4(curve, [1, NaN, NaN], t);\n      //                 } else {\n      //                     if (lo !== -Infinity && hi !== Infinity) {\n      //                         // Critical point which can be ignored\n      //                         this._insertPoint_v4(curve, [1, x_table[0][idx], y_table[0][idx]], comp.t_values[idx]);\n      //                     } else {\n      //                         if (lo === -Infinity) {\n      //                             this._insertPoint_v4(curve, [1, x, lo], t, true);\n      //                             this._insertPoint_v4(curve, [1, NaN, NaN], t);\n      //                         }\n      //                         if (hi === Infinity) {\n      //                             this._insertPoint_v4(curve, [1, NaN, NaN], t);\n      //                             this._insertPoint_v4(curve, [1, x, hi], t, true);\n      //                         }\n      //                     }\n      // }\n\n    }\n\n    if (d_rgt < -d_thresh) {\n      // Right branch very steep downwards -> add the maximum\n      this._insertPoint_v4(curve, [1, x, hi], t);\n    } else if (d_rgt > d_thresh) {\n      // Right branch very steep upwards -> add the minimum\n      this._insertPoint_v4(curve, [1, x, lo], t);\n    }\n  },\n\n  /**\n   * Number of equidistant points where the function is evaluated\n   */\n  steps: 1021,\n  //2053, // 1021,\n\n  /**\n   * If the absolute maximum of the set of differences is larger than\n   * criticalThreshold * median of these values, it is regarded as critical point.\n   * @see JXG.Math.Plot#_criticalInterval\n   */\n  criticalThreshold: 1000,\n  plot_v4: function (curve, ta, tb, steps) {\n    var i,\n        j,\n        le,\n        components,\n        idx,\n        comp,\n        groups,\n        g,\n        start,\n        ret,\n        x_table,\n        y_table,\n        t,\n        t1,\n        t2,\n        good,\n        bad,\n        x_int,\n        y_int,\n        degree_x,\n        degree_y,\n        h = (tb - ta) / steps,\n        Ypl = function (x) {\n      return curve.Y(x, true);\n    },\n        Ymi = function (x) {\n      return -curve.Y(x, true);\n    },\n        h2 = h * 0.5;\n\n    components = this.findComponents(curve, ta, tb, steps);\n\n    for (idx = 0; idx < components.length; idx++) {\n      comp = components[idx];\n      ret = this.differenceMethod(comp, curve);\n      groups = ret[0];\n      x_table = ret[1];\n      y_table = ret[2];\n      degree_x = ret[3];\n      degree_y = ret[4]; // if (degree_x >= 0) {\n      //     console.log(\"x polynomial of degree\", degree_x);\n      // }\n      // if (degree_y >= 0) {\n      //     console.log(\"y polynomial of degree\", degree_y);\n      // }\n\n      if (groups.length === 0 || groups[0].type !== \"borderleft\") {\n        groups.unshift({\n          idx: 0,\n          t: comp.t_values[0],\n          x: comp.x_values[0],\n          y: comp.y_values[0],\n          type: \"borderleft\"\n        });\n      }\n\n      if (groups[groups.length - 1].type !== \"borderright\") {\n        le = comp.t_values.length;\n        groups.push({\n          idx: le - 1,\n          t: comp.t_values[le - 1],\n          x: comp.x_values[le - 1],\n          y: comp.y_values[le - 1],\n          type: \"borderright\"\n        });\n      }\n\n      start = 0;\n\n      for (g = 0; g <= groups.length; g++) {\n        if (g === groups.length) {\n          le = comp.len;\n        } else {\n          le = groups[g].idx - 1;\n        }\n\n        good = 0;\n        bad = 0; // Insert all uncritical points until next critical point\n\n        for (i = start; i < le - 2; i++) {\n          this._insertPoint_v4(curve, [1, comp.x_values[i], comp.y_values[i]], comp.t_values[i]);\n\n          j = Math.max(0, i - 2); // Add more points in critical intervals\n\n          if (true && //degree_y === -1 && // No polynomial\n          i >= start + 3 && i < le - 3 && // Do not do this if too close to a critical point\n          y_table.length > 3 && Math.abs(y_table[2][i]) > 0.2 * Math.abs(y_table[0][i])) {\n            t = comp.t_values[i];\n            h2 = h * 0.25;\n            y_int = this.getInterval(curve, t, t + h);\n\n            if (_type.default.isObject(y_int)) {\n              if (y_table[2][i] > 0) {\n                this._insertPoint_v4(curve, [1, t + h2, y_int.lo], t + h2);\n              } else {\n                this._insertPoint_v4(curve, [1, t + h - h2, y_int.hi], t + h - h2);\n              }\n            } else {\n              t1 = _numerics.default.fminbr(Ypl, [t, t + h]);\n              t2 = _numerics.default.fminbr(Ymi, [t, t + h]);\n\n              if (t1 < t2) {\n                this._insertPoint_v4(curve, [1, curve.X(t1, true), curve.Y(t1, true)], t1);\n\n                this._insertPoint_v4(curve, [1, curve.X(t2, true), curve.Y(t2, true)], t2);\n              } else {\n                this._insertPoint_v4(curve, [1, curve.X(t2, true), curve.Y(t2, true)], t2);\n\n                this._insertPoint_v4(curve, [1, curve.X(t1, true), curve.Y(t1, true)], t1);\n              }\n            }\n\n            bad++;\n          } else {\n            good++;\n          }\n        } // console.log(\"GOOD\", good, \"BAD\", bad);\n        // Handle next critical point\n\n\n        if (g < groups.length) {\n          //console.log(\"critical point / interval\", groups[g]);\n          i = groups[g].idx;\n\n          if (groups[g].type === \"borderleft\" || groups[g].type === \"borderright\") {\n            this.handleBorder(curve, comp, groups[g], x_table, y_table);\n          } else {\n            this._seconditeration_v4(curve, comp, groups[g], x_table, y_table);\n          }\n\n          start = groups[g].idx + 1 + 1;\n        }\n      }\n\n      le = comp.len;\n\n      if (idx < components.length - 1) {\n        this._insertPoint_v4(curve, [1, NaN, NaN], comp.right_t);\n      }\n    }\n  },\n\n  /**\n   * Updates the data points of a parametric curve, plotVersion 4. This version is used if {@link JXG.Curve#plotVersion} is <tt>4</tt>.\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Number} mi Left bound of curve\n   * @param {Number} ma Right bound of curve\n   * @returns {JXG.Curve} Reference to the curve object.\n   */\n  updateParametricCurve_v4: function (curve, mi, ma) {\n    var ta, tb, w2, bbox;\n\n    if (curve.xterm === \"x\") {\n      // For function graphs we can restrict the plot interval\n      // to the visible area +plus margin\n      bbox = curve.board.getBoundingBox();\n      w2 = (bbox[2] - bbox[0]) * 0.3; // h2 = (bbox[1] - bbox[3]) * 0.3;\n\n      ta = Math.max(mi, bbox[0] - w2);\n      tb = Math.min(ma, bbox[2] + w2);\n    } else {\n      ta = mi;\n      tb = ma;\n    }\n\n    curve.points = []; //console.log(\"--------------------\");\n\n    this.plot_v4(curve, ta, tb, this.steps);\n    curve.numberPoints = curve.points.length; //console.log(curve.numberPoints);\n  },\n  //----------------------------------------------------------------------\n  // Plot algorithm alias\n  //----------------------------------------------------------------------\n\n  /**\n   * Updates the data points of a parametric curve, alias for {@link JXG.Curve#updateParametricCurve_v2}.\n   * This is needed for backwards compatibility, if this method has been\n   * used directly in an application.\n   * @param {JXG.Curve} curve JSXGraph curve element\n   * @param {Number} mi Left bound of curve\n   * @param {Number} ma Right bound of curve\n   * @returns {JXG.Curve} Reference to the curve object.\n   *\n   * @see JXG.Curve#updateParametricCurve_v2\n   */\n  updateParametricCurve: function (curve, mi, ma) {\n    return this.updateParametricCurve_v2(curve, mi, ma);\n  }\n};\nvar _default = _math.default.Plot;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_jxg","_constants","_coords","_math","_extrapolate","_numerics","_statistics","_geometry","_ia","_type","Plot","checkReal","points","b","i","len","length","p","usrCoords","isNaN","Math","abs","eps","updateParametricCurveNaive","curve","mi","ma","suspendUpdate","stepSize","t","setCoordinates","COORDS_BY_USER","X","Y","_t","isSegmentOutside","x0","y0","x1","y1","board","canvasHeight","canvasWidth","isDistOK","dx","dy","MAXX","MAXY","isSegmentDefined","updateParametricCurveOld","MAX_XDIST","po","dyadicStack","depthStack","pointStack","divisors","distOK","j","deprecated","updateQuality","BOARD_QUALITY_LOW","MAX_DEPTH","MAX_YDIST","scrCoords","x","y","top","depth","COORDS_BY_SCREEN","p0","p1","p2","den","lbda","sqrt","d","numberPoints","_insertPoint_v2","pnt","lastReal","_lastCrds","newReal","cw","ch","off","push","copy","neighborhood_isNaN_v2","t0","is_undef","_borderCase","a","c","ta","tb","tc","p_good","t_nan","t_real","t_real2","max_it","slice","_plotRecursive_v2","delta","mindepth","nanLevel","_isUndefined","_isOutside","ds","_triangleDists","isSmooth","smoothLevel","isJump","jumpLevel","jump_threshold","Infinity","cusp_threshold","NaN","updateParametricCurve_v2","pa","pb","evaluate","visProp","recursiondepthlow","recursiondepthhigh","xterm","bbox","getBoundingBox","w2","max","min","ret_arr","_findStartPoint","_visibleArea","_insertLimesPoint","limes","_lastUsrCrds","left_x","left_y","right_x","right_y","_lastScrCrds","_insertPoint","last_is_real","point_is_real","exists","near","d_ab","distance","d_ac","d_cb","d_cd","random","_isOutsidePoint","_getBorderPos","t_bad","t_good","_getCuspPos","fminbr","max_func","_getJumpPos","e","c1","c2","_getLimits","step","maxX","minX","res","limit","x_l","sign","y_l","x_r","y_r","_getLimes","may_be_special","_plotNonRecursive","stack","stack_length","oc","origin","item","ds0","unitX","unitY","a_nan","b_nan","smooth_threshold","testLevel","updateParametricCurve_v3","_criticalInterval","vec","le","level","isGroup","last","very_small","smooth","group","groups","types","positions","abs_vec","med","median","criticalThreshold","v","le1","sgnChange","sgn","Component","right_isNaN","left_isNaN","right_t","left_t","t_values","x_values","y_values","findComponents","steps","components","comp_nr","cnt","cntNaNs","comp_started","suspended","h","comp","pop","getPointType","pos","t_approx","x_table","y_table","full_len","result","idx","type","newtonApprox","table","s","thiele","recip","degree","differenceMethodExperiments","component","x_diffs","y_diffs","x_slopes","y_slopes","x_recip","y_recip","foundCriticalPoint","criticalPoints","numerator","up","_criticalPoints","console","log","floor","getCenterOfCriticalInterval","num","range","pos_mean","reduce","total","val","differenceMethod","degree_x","degree_y","Float64Array","map","arr","res_y","res_x","_insertPoint_v4","crds","doLog","prev","getInterval","disable","t_int","Interval","mathLib","mathLibJXG","y_int","handleBorder","t1","t2","components2","size","isObject","lo","hi","_seconditeration_v4","g","start","comp2","ret","groups2","x_table2","y_table2","handleSingularity","_recurse_v4","x2","y2","tol","di1","d_lft","di2","d_rgt","d_thresh","i1","i2","plot_v4","good","Ypl","Ymi","h2","unshift","bad","updateParametricCurve_v4","updateParametricCurve"]
}
