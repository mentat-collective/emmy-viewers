{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_inline$link.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/rules_inline/link.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_inline$link\"] = function(global,require,module,exports) {\n// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      token,\n      href = '',\n      title = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) { break; }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","normalizeReference","isSpace","module.exports","state","silent","attrs","label","title","href","oldPos","pos","max","posMax","start","parseReference","src","charCodeAt","labelStart","labelEnd","md","helpers","parseLinkLabel","code","res","parseLinkDestination","ok","normalizeLink","str","validateLink","parseLinkTitle","env","references","slice","ref","token","push","inline","tokenize"]
}
