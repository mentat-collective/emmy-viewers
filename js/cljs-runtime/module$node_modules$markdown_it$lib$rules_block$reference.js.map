{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_block$reference.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/rules_block/reference.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_block$reference\"] = function(global,require,module,exports) {\n'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","normalizeReference","isSpace","module.exports","state","startLine","_endLine","silent","destEndPos","start","lines","pos","bMarks","tShift","max","eMarks","nextLine","sCount","blkIndent","src","charCodeAt","endLine","lineMax","terminatorRules","md","block","ruler","getRules","oldParentType","parentType","isEmpty","terminate","i","l","length","str","getLines","trim","ch","labelEnd","res","helpers","parseLinkDestination","ok","href","normalizeLink","validateLink","destEndLineNo","parseLinkTitle","title","label","slice","env","references","line"]
}
