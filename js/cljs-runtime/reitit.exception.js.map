{"version":3,"sources":["reitit/exception.cljc"],"mappings":"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","names":["var_args","G__93213","reitit.exception/fail!","js/Error","type","reitit.exception.fail_BANG_","data","cljs.core.ex_info","reitit.exception/get-message","e","cljs.core/ex-message","js/reitit","js/reitit.exception","js/reitit.exception.format-exception","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__93216","cljs.core/MultiFn","cljs.core.symbol","reitit.exception/format-exception","_","reitit.exception/exception","cljs.core/ex-data","message","cljs.core.assoc","or__4253__auto__","cljs.core.pr_str","conflicts","path","route-data","cljs.core/not-empty","cljs.core/select-keys","cljs.core.apply","cljs.core/str","cljs.core.mapv","p__93223","vec__93224","vec__93227","cljs.core.nth","vals","resolve-str","clojure.string.join","p__93234","vec__93235","p__93239","vec__93240","name","cljs.core/first"],"sourcesContent":["(ns reitit.exception\n  (:require [clojure.string :as str]))\n\n(defn fail!\n  ([type]\n   (fail! type nil))\n  ([type data]\n   (throw (ex-info (str type) {:type type, :data data}))))\n\n(defn get-message [e]\n  #?(:clj (.getMessage ^Exception e) :cljs (ex-message e)))\n\n(defmulti format-exception (fn [type _ _] type))\n\n(defn exception [e]\n  (let [data (ex-data e)\n        message (format-exception (:type data) (get-message e) (:data data))]\n    ;; there is a 3-arity version (+cause) of ex-info, but the default repl error message is taken from the cause\n    (ex-info message (assoc (or data {}) ::cause e))))\n\n;;\n;; Formatters\n;;\n\n(defmethod format-exception :default [_ message data]\n  (str message (if data (str \"\\n\\n\" (pr-str data)))))\n\n(defmethod format-exception :path-conflicts [_ _ conflicts]\n  (letfn [(resolve-str [path route-data]\n            (str (if (:conflicting route-data) \"   \" \"-> \")\n                 path \" \" (not-empty (select-keys route-data [:conflicting]))))]\n    (apply str \"Router contains conflicting route paths:\\n\\n\"\n           (mapv\n             (fn [[[path route-data] vals]]\n               (str (resolve-str path route-data)\n                    \"\\n\"\n                    (str/join \"\\n\" (mapv (fn [[path route-data]]\n                                           (resolve-str path route-data)) vals))\n                    \"\\n\\n\"))\n             conflicts))))\n\n(defmethod format-exception :name-conflicts [_ _ conflicts]\n  (apply str \"Router contains conflicting route names:\\n\\n\"\n         (mapv\n           (fn [[name vals]]\n             (str name \"\\n-> \" (str/join \"\\n-> \" (mapv first vals)) \"\\n\"))\n           conflicts)))\n\n(defmethod format-exception :reitit.impl/merge-data [_ _ data]\n  (str \"Error merging route-data\\n\\n\" (pr-str data)))\n"]}