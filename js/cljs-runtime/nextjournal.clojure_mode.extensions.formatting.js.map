{"version":3,"sources":["nextjournal/clojure_mode/extensions/formatting.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.extensions.formatting/spaces","state","n","js/module$node_modules$$codemirror$language$dist$index_cjs","p__88862","map__88865","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj88867","js/undefined","nextjournal.clojure-mode.extensions.formatting/indent-node-props","type-name","type","p__88868","map__88869","obj88871","obj88872","obj88873","obj88874","context","pos","unit","node","cljs.core._EQ_","nextjournal.clojure-mode.node/coll-type?","G__88877","nextjournal.clojure-mode.node/down","nextjournal.clojure-mode.node/end","and__4251__auto__","G__88885","fexpr__88884","G__88886","nextjournal.clojure-mode.node/right","nextjournal.clojure-mode.node/name","nextjournal.clojure-mode.extensions.formatting/props","js/module$node_modules$$codemirror$language$dist$index_cjs.indentNodeProp","nextjournal.clojure-mode.extensions.formatting/get-indentation","js/module$node_modules$$codemirror$language$dist$index_cjs.getIndentation","nextjournal.clojure-mode.extensions.formatting/make-indent-context","js/module$node_modules$$codemirror$language$dist$index_cjs.IndentContext","nextjournal.clojure-mode.extensions.formatting/indent-all","nextjournal.clojure-mode.util/update-lines","from","content","line-num","current-indent","indent","nextjournal.clojure-mode.util/guard","cljs.core/complement","cljs.core/neg?","G__88913","js/Error","cljs.core/compare","nextjournal.clojure-mode.extensions.formatting/expected-space","n1","n2","nextjournal.clojure-mode.node/start-edge-type?","nextjournal.clojure-mode.node/prefix-edge-type?","nextjournal.clojure-mode.node/end-edge-type?","nextjournal.clojure-mode.node/same-edge-type?","nextjournal.clojure-mode.extensions.formatting/space-changes","to","nodes","nextjournal.clojure-mode.node/terminal-nodes","nextjournal.clojure_mode.node.tree","p1__88918#","cljs.core.filter","nextjournal.clojure-mode.node/start","cljs.core/reverse","trim?","G__88927","cljs.core/first","cljs.core.partition","cljs.core.reduce","p__88929","vec__88934","map__89005","cljs.core.nth","obj89011","obj89013","obj89015","map__89006","obj89022","obj89025","obj89026","out","start2","end2","start1","end1","expected","actual","G__89031","Array89035","Array89039","nextjournal.clojure-mode.extensions.formatting/into-arr","arr","items","seq__89041","cljs.core/seq","chunk__89042","count__89043","i__89044","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","i","nextjournal.clojure-mode.extensions.formatting/format-line","indent-context","text","changes","format-spaces?","indentation-change","G__89065","space-changes","G__89067","Array89068","nextjournal.clojure-mode.extensions.formatting/format-selection","nextjournal.clojure-mode.util/update-selected-lines","p__89072","map__89073","obj89076","obj89079","obj89080","line","number","range","nextjournal.clojure-mode.extensions.formatting/format-all","nextjournal.clojure-mode.extensions.formatting/format-transaction","tr","origin","nextjournal.clojure-mode.util/get-user-event-annotation","temp__5751__auto__","G__89084","nextjournal.clojure-mode.util/iter-changed-lines","obj89088","obj89090","nextjournal.clojure-mode.extensions.formatting/format","nextjournal.clojure-mode.util/something-selected?","nextjournal.clojure-mode.extensions.formatting/prefix-all","prefix","_","nextjournal.clojure-mode.extensions.formatting/ext-format-changed-lines","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorState"],"sourcesContent":["(ns nextjournal.clojure-mode.extensions.formatting\n  (:require [\"@codemirror/language\" :as language :refer [IndentContext]]\n            [\"@codemirror/state\" :refer [EditorState Transaction]]\n            [\"@codemirror/view\" :as view]\n            [\"@codemirror/commands\" :as commands]\n            [applied-science.js-interop :as j]\n            [nextjournal.clojure-mode.util :as u]\n            [nextjournal.clojure-mode.node :as n]))\n\n;; CodeMirror references\n;; IndentContext https://codemirror.net/6/docs/ref/#state.IndentContext\n;; indentation facet: https://codemirror.net/6/docs/ref/#state.EditorState%5Eindentation\n;; indentation commands: https://codemirror.net/6/docs/ref/#commands.indentSelection\n\n;; Clojure formatting reference\n;; https://tonsky.me/blog/clojurefmt/\n\n(defn spaces [^js state n]\n  (.indentString language state n))\n\n(j/defn indent-node-props [^:js {type-name :name :as type}]\n  (j/fn [^:js {:as ^js context :keys [pos unit node ^js state]}]\n    (cond (= \"Program\" type-name)\n          0\n\n          (n/coll-type? type)\n          (cond-> (.column context\n                           (-> node n/down n/end))\n            ;; start at the inner-left edge of the coll.\n            ;; if it's a list beginning with a symbol, add 1 space.\n            (and (= \"List\" type-name)\n                 (#{\"Operator\"\n                    \"DefLike\"\n                    \"NS\"} (some-> node n/down n/right n/name)))\n            (+ 1))\n          :else -1)))\n\n(def props (.add language/indentNodeProp\n                 indent-node-props))\n\n(defn get-indentation [^js context pos]\n  (language/getIndentation (.-state context) pos))\n\n(defn make-indent-context [state]\n  (new IndentContext state))\n\n;; TODO: check if this is used at all\n(defn indent-all [^js state]\n  (let [context (make-indent-context state)]\n    (u/update-lines state\n                    (fn [from content line-num]\n                      (let [current-indent (-> (.exec #\"^\\s*\" content)\n                                               ^js (aget 0)\n                                               .-length)\n                            ^number indent (-> (get-indentation context from)\n                                               (u/guard (complement neg?)))]\n                        (when indent\n                          (case (compare indent current-indent)\n                            0 nil\n                            1 #js{:from (+ from current-indent)\n                                  :insert (spaces state (- indent ^number current-indent))}\n                            -1 #js{:from (+ from indent)\n                                   :to (+ from current-indent)})))))))\n\n(defn expected-space [n1 n2]\n  ;;  (prn :expected (map n/name [n1 n2]))\n  (if\n   (or\n    (n/start-edge-type? n1)\n    (n/prefix-edge-type? n1)\n    (n/end-edge-type? n2)\n    (n/same-edge-type? n2))\n    0\n    1))\n\n(defn space-changes [state from to]\n  (let [nodes (->> (n/terminal-nodes (n/tree state) from to)\n                   (filter #(or (<= from (n/start %) to)\n                                (<= from (n/end %) to)))\n                   (reverse))\n        trim? (some-> (first nodes) n/end (< to))]\n    (->> nodes\n         (partition 2 1)\n         (reduce (j/fn [out [^:js {n2 :type start2 :from end2 :to}\n                             ^:js {n1 :type start1 :from end1 :to}]]\n                   (let [expected (expected-space n1 n2)\n                         actual (- start2 end1)]\n                     (case (compare actual expected)\n                       0 out\n                       1 (j/push! out #js{:from (if (zero? expected)\n                                                  end1\n                                                  (inc end1))\n                                          :to start2})\n                       -1 (j/push! out #js{:from end1\n                                           :insert \" \"})\n                       out)))\n\n                 (if trim?\n                   (j/lit [{:from (-> nodes first n/end)\n                            :to to}])\n                   #js[])))))\n\n(defn into-arr [^js arr items]\n  (doseq [i items] (.push arr i))\n  arr)\n\n(defn format-line\n  \"Returns mutated `changes` array\"\n  [^js state\n   indent-context\n   from\n   text\n   line-num\n   changes\n   format-spaces?]\n  {:pre [(some? text)]}\n  (let [current-indent (-> ^js (aget (.exec #\"^\\s*\" text) 0)\n                           .-length)\n        ^number indent (-> (get-indentation indent-context from)\n                           (u/guard (complement neg?)))\n        indentation-change\n        (when indent\n          (case (compare indent current-indent)\n            0 nil\n            1 #js{:from (+ from current-indent)\n                  :insert (spaces state (- indent current-indent))}\n            -1 #js{:from (+ from indent)\n                   :to (+ from current-indent)}))\n        space-changes (when format-spaces?\n                        (space-changes state\n                                       (+ from current-indent)\n                                       (+ from (count text))))]\n    (cond-> changes\n      space-changes (into-arr space-changes)\n      indentation-change (j/push! indentation-change))))\n\n(defn format-selection\n  [^js state]\n  (let [context (make-indent-context state)]\n    (u/update-selected-lines state\n                             (j/fn [^:js {:as line :keys [from text number]} ^js changes ^js range]\n                               (format-line state context from text number changes true)))))\n\n(defn format-all [state]\n  (let [context (make-indent-context state)]\n    (u/update-lines state\n                    (fn [^number from ^string text line-num]\n                      (format-line state context from text line-num #js[] true)))))\n\n(defn format-transaction [^js tr]\n  (let [origin (u/get-user-event-annotation tr)]\n    (if-let [changes\n             (case origin\n               (\"input\" \"input.type\"\n                \"delete\"\n                \"keyboardselection\"\n                \"pointerselection\" \"select.pointer\"\n                \"cut\"\n                \"noformat\"\n                \"evalregion\") nil\n               \"format-selections\" (format-selection (.-state tr))\n               (let [state (.-state tr)\n                     context (make-indent-context state)]\n                 (u/iter-changed-lines tr\n                                       (fn [^js line ^js changes]\n                                         (format-line state context (.-from line) (.-text line) (.-number line) changes true)))))]\n      (.. tr -startState (update (j/assoc! changes :filter false)))\n      tr)))\n\n(defn format [state]\n  (if (u/something-selected? state)\n    (.update state (format-selection state))\n    (format-all state)))\n\n(defn prefix-all [prefix state]\n  (u/update-lines state\n    (fn [from _ _] #js{:from from :insert prefix})))\n\n(defn ext-format-changed-lines [] (.. EditorState -transactionFilter (of format-transaction)))\n"]}