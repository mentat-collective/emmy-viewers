{"version":3,"sources":["sicmutils/mechanics/rotation.cljc"],"mappings":"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","names":["sicmutils.mechanics.rotation/rotate-x-matrix-2","c","s","sicmutils.matrix.by_rows","sicmutils.generic._","sicmutils.mechanics.rotation/rotate-x-matrix","\u03b1","sicmutils.generic/cos","sicmutils.generic/sin","sicmutils.mechanics.rotation/Rx-matrix","sicmutils.mechanics.rotation/rotate-y-matrix-2","sicmutils.mechanics.rotation/rotate-y-matrix","sicmutils.mechanics.rotation/Ry-matrix","sicmutils.mechanics.rotation/rotate-z-matrix-2","sicmutils.mechanics.rotation/rotate-z-matrix","sicmutils.mechanics.rotation/Rz-matrix","p__87253","vec__87254","cljs.core.nth","sicmutils.mechanics.rotation/angle-axis->rotation-matrix","theta","x","y","z","colatitude","sicmutils.generic/acos","longitude","sicmutils.generic/atan","sicmutils.generic._STAR_","sicmutils.matrix/transpose","sicmutils.mechanics.rotation/rotate-x-tuple-2","sicmutils.matrix/m->s","sicmutils.structure/literal-down","sicmutils.structure/literal-up","sicmutils.mechanics.rotation/rotate-x-tuple","sicmutils.mechanics.rotation/rotate-y-tuple-2","sicmutils.mechanics.rotation/rotate-y-tuple","sicmutils.mechanics.rotation/rotate-z-tuple-2","sicmutils.mechanics.rotation/rotate-z-tuple","sicmutils.mechanics.rotation/Rx","p__87264","vec__87266","sicmutils.structure.up","sicmutils.generic._PLUS_","sicmutils.mechanics.rotation/Ry","p__87271","vec__87272","sicmutils.mechanics.rotation/Rz","p__87279","vec__87280","sicmutils.mechanics.rotation/rotate-x","sicmutils.mechanics.rotation/rotate-y","sicmutils.mechanics.rotation/rotate-z","sicmutils.mechanics.rotation/wcross->w","A","cljs.core.get_in","p__87283","vec__87284","sicmutils.mechanics.rotation/Euler->M","phi","psi","var_args","G__87289","sicmutils.mechanics.rotation/M->Euler","js/Error","M","sicmutils.mechanics.rotation.M__GT_Euler","tolerance-in-ulps","tolerance","sicmutils.value/machine-epsilon","close?","sicmutils.util.stream/close-enuf?","cx","cx-number?","sicmutils.value/number?","and__4251__auto__","Math/PI","sx","sicmutils.generic._SLASH_"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.mechanics.rotation\n  (:refer-clojure :exclude [+ - * /])\n  (:require [sicmutils.generic :as g :refer [cos sin + - * /]]\n            [sicmutils.matrix :as matrix]\n            [sicmutils.structure :as s :refer [up]]\n            [sicmutils.util.stream :as us]\n            [sicmutils.value :as v]))\n\n(defn- rotate-x-matrix-2 [c s]\n  (matrix/by-rows [1 0 0]\n                  [0 c (- s)]\n                  [0 s c]))\n\n(defn rotate-x-matrix\n  \"Produce the matrix of a rotation of \u03b1 radians about the x axis.\"\n  [\u03b1]\n  (rotate-x-matrix-2 (cos \u03b1) (sin \u03b1)))\n\n(def Rx-matrix rotate-x-matrix)\n\n(defn- rotate-y-matrix-2 [c s]\n  (matrix/by-rows  [c 0 s]\n                   [0 1 0]\n                   [(- s) 0 c]))\n\n(defn rotate-y-matrix\n  \"Produce the matrix of a rotation of \u03b1 radians about the y axis.\"\n  [\u03b1]\n  (rotate-y-matrix-2 (cos \u03b1) (sin \u03b1)))\n\n(def Ry-matrix rotate-y-matrix)\n\n(defn- rotate-z-matrix-2\n  \"Produce the matrix of a rotation of \u03b1 radians about the z axis.\"\n  [c s]\n  (matrix/by-rows [c (- s) 0]\n                  [s c 0]\n                  [0 0 1]))\n\n(defn rotate-z-matrix\n  \"Produce the matrix of a rotation of \u03b1 radians about the z axis.\"\n  [\u03b1]\n  (rotate-z-matrix-2 (cos \u03b1) (sin \u03b1)))\n\n(def Rz-matrix rotate-z-matrix)\n\n(defn angle-axis->rotation-matrix [theta [x y z]]\n  (let [colatitude (g/acos z)\n        longitude (g/atan y x)]\n    (* (rotate-z-matrix longitude)\n       (rotate-y-matrix colatitude)\n       (rotate-z-matrix theta)\n       (matrix/transpose (rotate-y-matrix colatitude))\n       (matrix/transpose (rotate-z-matrix longitude)))))\n\n;; ## Rotation Tuples\n\n(defn ^:no-doc rotate-x-tuple-2 [c s]\n  (matrix/m->s\n   (s/literal-down 'l 3)\n   (rotate-x-matrix-2 c s)\n   (s/literal-up 'r 3)))\n\n(defn rotate-x-tuple [\u03b1]\n  (rotate-x-tuple-2 (cos \u03b1)\n                    (sin \u03b1)))\n\n(defn ^:no-doc rotate-y-tuple-2 [c s]\n  (matrix/m->s\n   (s/literal-down 'l 3)\n   (rotate-y-matrix-2 c s)\n   (s/literal-up 'r 3)))\n\n(defn rotate-y-tuple [\u03b1]\n  (rotate-y-tuple-2 (cos \u03b1)\n                    (sin \u03b1)))\n\n(defn ^:no-doc rotate-z-tuple-2 [c s]\n  (matrix/m->s\n   (s/literal-down 'l 3)\n   (rotate-z-matrix-2 c s)\n   (s/literal-up 'r 3)))\n\n(defn rotate-z-tuple [\u03b1]\n  (rotate-z-tuple-2 (cos \u03b1)\n                    (sin \u03b1)))\n\n;; ## Rotation procedures\n\n;; XXX: R[xyz] should not return an up; they should return a struct\n;; of the same shape they were given. But do rotations of covectors\n;; work that way? Maybe we should assert up-ness here rather than\n;; promise to be more general than we are.\n\n(defn Rx\n  \"Returns a function which rotates a vector \u03b1 radians about the x axis.\"\n  [\u03b1]\n  (fn [[x y z]]\n    (let [c (cos \u03b1)\n          s (sin \u03b1)]\n      (up x\n          (- (* c y) (* s z))\n          (+ (* s y) (* c z))))))\n\n(defn Ry\n  \"Returns a function which rotates a vector \u03b1 radians about the y axis.\"\n  [\u03b1]\n  (fn [[x y z]]\n    (let [c (cos \u03b1)\n          s (sin \u03b1)]\n      (up (+ (* c x) (* s z))\n          y\n          (- (* c z) (* s x))))))\n\n(defn Rz\n  \"Returns a function which rotates a vector \u03b1 radians about the z axis.\"\n  [\u03b1]\n  (fn [[x y z]]\n    (let [c (cos \u03b1)\n          s (sin \u03b1)]\n      (up (- (* c x) (* s y))\n          (+ (* s x) (* c y))\n          z))))\n\n;; Aliases to match scmutils.\n\n(def rotate-x Rx)\n(def rotate-y Ry)\n(def rotate-z Rz)\n\n(defn wcross->w [A]\n  (up (get-in A [1 2])\n      (get-in A [2 0])\n      (get-in A [0 1])))\n\n;; ## Rotation Matrix to Euler Angles\n\n(defn Euler->M\n  \"Compute the rotation matrix from a 3-vector of Euler angles.\n\n  Our Euler Angle convention:\n\n  M(theta, phi, psi) = R_z(phi)*R_x(theta)*R_z(psi)\"\n  [[theta phi psi]]\n  (* (rotate-z-matrix phi)\n     (rotate-x-matrix theta)\n     (rotate-z-matrix psi)))\n\n;; Ported from code added to scmutils by GJS, 28 Sept 2020.\n\n(defn M->Euler\n  \"Given a 3x3 rotation matrix, returns a [[sicmutils.structure/up]] of the\n  corresponding Euler angles.\n\n  Our Euler Angle convention:\n\n  M(theta, phi, psi) = R_z(phi)*R_x(theta)*R_z(psi)\"\n  ([M]\n   (M->Euler M nil))\n  ([M tolerance-in-ulps]\n   (let [tolerance (if (nil? tolerance-in-ulps)\n                     v/machine-epsilon\n                     (* tolerance-in-ulps v/machine-epsilon))\n         close? (us/close-enuf? tolerance)\n         cx (get-in M [2 2])\n         cx-number? (v/number? cx)]\n     (cond (and cx-number? (close? cx -1)) ;; Nonunique\n           (let [theta Math/PI\n                 phi (- (g/atan\n                         (- (get-in M [0 1]))\n                         (get-in M [0 0])))\n                 psi 0]\n             (up theta phi psi))\n\n           (and cx-number? (close? cx +1)) ;; Nonunique\n           (let [theta 0\n                 phi (g/atan\n                      (- (get-in M [0 1]))\n                      (get-in M [0 0]))\n                 psi 0]\n             (up theta phi psi))\n\n           :else\n           (let [theta (g/acos cx)\n                 sx (sin theta)\n                 phi (g/atan (/ (get-in M [0 2]) sx)\n                             (- (/ (get-in M [1 2]) sx)))\n                 psi (g/atan (/ (get-in M [2 0]) sx)\n                             (/ (get-in M [2 1]) sx))]\n             (up theta phi psi))))))\n"]}