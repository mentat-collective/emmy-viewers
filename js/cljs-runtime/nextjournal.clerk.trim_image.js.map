{"version":3,"sources":["nextjournal/clerk/trim_image.cljs"],"mappings":"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","names":["nextjournal.clerk.trim-image/get-rgba","x","y","img-width","img-data","coord","nextjournal.clerk.trim-image/white?","cljs.core._EQ_","nextjournal.clerk.trim-image/scan-y","from-top?","img-height","colored-col","and__5043__auto__","cljs.core/not","nextjournal.clerk.trim-image/scan-x","from-left?","colored-row","var_args","G__80243","nextjournal.clerk.trim-image/trim-image","js/Error","p__80246","map__80247","cljs.core/--destructure-map","cljs.core.get","img","nextjournal.clerk.trim_image.trim_image","padding","canvas","js/document.createElement","ctx","_","x1","y1","x2","y2","dx","dy","trimmed-data","result-img","nextjournal.clerk.trim-image/append-trimmed-image","base64","id","event","trimmed-img","js/document"],"sourcesContent":["(ns nextjournal.clerk.trim-image\n  \"Utility functions to trim open graph preview images.\")\n\n(defn get-rgba [x y img-width img-data]\n  (let [coord (* (+ (* img-width y) x) 4)]\n    {:r (.at img-data coord)\n     :g (.at img-data (+ coord 1))\n     :b (.at img-data (+ coord 2))\n     :a (.at img-data (+ coord 3))}))\n\n(defn white? [x y img-width img-data]\n  (= {:r 255 :g 255 :b 255 :a 255} (get-rgba x y img-width img-data)))\n\n(defn scan-y [from-top? img-width img-height img-data]\n  (loop [y (if from-top? 0 (dec img-height))\n         colored-col nil]\n    (if (and (not colored-col) (if from-top? (< y img-height) (< -1 y)))\n      (recur\n       (if from-top? (inc y) (dec y))\n       (loop [x 0]\n         (cond\n           (not (white? x y img-width img-data)) y\n           (< x (dec img-width)) (recur (inc x)))))\n      colored-col)))\n\n(defn scan-x [from-left? img-width img-height img-data]\n  (loop [x (if from-left? 0 (dec img-width))\n         colored-row nil]\n    (if (and (not colored-row) (if from-left? (< x img-width) (<= 0 x)))\n      (recur\n       (if from-left? (inc x) (dec x))\n       (loop [y 0]\n         (cond\n           (not (white? x y img-width img-data)) x\n           (< y (dec img-height)) (recur (inc y)))))\n      colored-row)))\n\n(defn ^:export trim-image\n  ([img] (trim-image img {}))\n  ([img {:keys [padding] :or {padding 0}}]\n   (let [canvas (js/document.createElement \"canvas\")\n         ctx (.getContext canvas \"2d\")\n         img-width (.-naturalWidth img)\n         img-height (.-naturalHeight img)\n         _ (.setAttribute canvas \"width\" img-width)\n         _ (.setAttribute canvas \"height\" img-height)\n         _ (.drawImage ctx img 0 0 img-width img-height)\n         img-data (.-data (.getImageData ctx 0 0 img-width img-height))\n         x1 (scan-x true img-width img-height img-data)\n         y1 (scan-y true img-width img-height img-data)\n         x2 (scan-x false img-width img-height img-data)\n         y2 (scan-y false img-width img-height img-data)\n         dx (inc (- x2 x1))\n         dy (inc (- y2 y1))\n         trimmed-data (.getImageData ctx x1 y1 dx dy)\n         _ (.setAttribute canvas \"width\" (+ dx (* padding 2)))\n         _ (.setAttribute canvas \"height\" (+ dy (* padding 2)))\n         _ (.clearRect ctx 0 0 (+ dx padding) (+ dy padding))\n         _ (set! (.-fillStyle ctx) \"white\")\n         _ (.fillRect ctx 0 0 (.-width canvas) (.-height canvas))\n         _ (.putImageData ctx trimmed-data padding padding)\n         result-img (js/document.createElement \"img\")]\n     (.setAttribute result-img \"src\" (.toDataURL canvas \"image/png\"))\n     result-img)))\n\n(defn ^:export append-trimmed-image [base64 id]\n  (let [img (js/document.createElement \"img\")]\n    (.addEventListener img \"load\" (fn [event]\n                                    (let [trimmed-img (trim-image (.-target event) {:padding 20})]\n                                      (.setAttribute trimmed-img \"id\" id)\n                                      (.. js/document -body (appendChild trimmed-img)))))\n    (.setAttribute img \"src\" base64)))\n"]}