{"version":3,"sources":["sicmutils/mechanics/rigid.cljc"],"mappings":"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","names":["p__103445","vec__103446","cljs.core.nth","sicmutils.mechanics.rigid/three-vector-components->antisymmetric","x","y","z","sicmutils.matrix.by_rows","sicmutils.generic._","js/Error","sicmutils.mechanics.rigid/antisymmetric->column-matrix","a","sicmutils.matrix/antisymmetric?","sicmutils.matrix.column","cljs.core.get_in","sicmutils.mechanics.rigid/M-of-q->omega-of-t","M-of-q","q","M-of-t","sicmutils.function$.compose","t","sicmutils.generic._STAR_","fexpr__103452","sicmutils.calculus.derivative/D","sicmutils.matrix/transpose","sicmutils.mechanics.rigid/M-of-q->omega-body-of-t","G__103455","fexpr__103459","sicmutils.mechanics.rigid/M->omega","sicmutils.mechanics.lagrange/Gamma-bar","sicmutils.mechanics.rigid/M->omega-body","sicmutils.mechanics.rigid/T-body","A","B","C","p__103462","vec__103463","w0","w1","w2","sicmutils.generic._SLASH_","sicmutils.generic._PLUS_","sicmutils.generic/square","sicmutils.mechanics.rigid/L-body","p__103466","vec__103467","sicmutils.structure.down","sicmutils.mechanics.rigid/L-space","M","omega-body","sicmutils.generic/transpose","sicmutils.mechanics.rigid/Euler->omega","angles-path","sicmutils.mechanics.rotation/Euler->M","fexpr__103471","M-on-path","w-cross","sicmutils.mechanics.rigid/Euler->omega-body","p__103472","vec__103473","vec__103476","vec__103479","sicmutils.mechanics.rigid/Euler-state->omega-body","_","theta","psi","thetadot","phidot","psidot","omega-a","sicmutils.generic/sin","sicmutils.generic/cos","omega-b","omega-c","sicmutils.structure.up","sicmutils.mechanics.rigid/T-body-Euler","local","sicmutils.mechanics.rigid/T-rigid-body","sicmutils.mechanics.rigid/L-body-Euler","sicmutils.mechanics.rigid/Euler-state->L-body","sicmutils.mechanics.rigid/L-space-Euler","angles","sicmutils.mechanics.lagrange/coordinate","sicmutils.mechanics.rigid/Euler-state->L-space","sicmutils.mechanics.rigid/rigid-sysder","sicmutils.mechanics.lagrange.Lagrangian__GT_state_derivative","p__103489","vec__103490","sicmutils.mechanics.rigid/quaternion-state->omega-body","qdot","two-q-norm","sicmutils.generic/dot-product","omega**a","sicmutils.quaternion/I-matrix","omega**b","sicmutils.quaternion/J-matrix","omega**c","sicmutils.quaternion/K-matrix","q:a","q:b","q:c","p__103496","vec__103497","sicmutils.mechanics.rigid/quaternion-state->omega-space","Q","sicmutils.matrix/up->column-matrix","QdotT","sicmutils.matrix/row*","two-m**2-inv","omega**x","omega**y","omega**z","sicmutils.mechanics.rigid/qw-state->L-body","p__103501","vec__103502","omega","sicmutils.mechanics.rigid/qw-state->L-space","state->body","p__103511","vec__103512","qw-state","Lbody","sicmutils.quaternion/->rotation-matrix","sicmutils.quaternion.make","sicmutils.mechanics.rigid/T-quaternion-state","p__103518","vec__103519","Qdot","m**2-inv","sicmutils.generic/invert"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.mechanics.rigid\n  (:refer-clojure :exclude [+ - * /])\n  (:require [sicmutils.calculus.derivative :refer [D]]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g :refer [sin cos + - * /]]\n            [sicmutils.matrix :as matrix]\n            [sicmutils.mechanics.lagrange :as L]\n            [sicmutils.mechanics.rotation :as r]\n            [sicmutils.quaternion :as q]\n            [sicmutils.structure :as s :refer [up]]))\n\n;; ## Chapter 2: generalized coordinates to angular velocities\n\n(defn three-vector-components->antisymmetric [[x y z]]\n  (matrix/by-rows\n   [0 (- z) y]\n   [z 0 (- x)]\n   [(- y) x 0]))\n\n(defn antisymmetric->column-matrix\n  \"Given an antisymmetric matrix `a` of dimension 3, returns a column vector of\n  its positive components.\"\n  [a]\n  {:pre [(matrix/antisymmetric? a)]}\n  (matrix/column\n   (get-in a [2 1])\n   (get-in a [0 2])\n   (get-in a [1 0])))\n\n;; Note from GJS: Suggested by Jack Wisdom on 30 Sept 2019.\n\n(defn M-of-q->omega-of-t [M-of-q]\n  (fn [q]\n    (let [M-of-t (f/compose M-of-q q)]\n      (fn [t]\n        (antisymmetric->column-matrix\n         (* ((D M-of-t) t)\n            (matrix/transpose (M-of-t t))))))))\n\n(defn M-of-q->omega-body-of-t [M-of-q]\n  (fn [q]\n    (fn [t]\n      (* (matrix/transpose (M-of-q (q t)))\n         (((M-of-q->omega-of-t M-of-q) q) t)))))\n\n(defn M->omega [M-of-q]\n  (L/Gamma-bar\n   (M-of-q->omega-of-t M-of-q)))\n\n(defn M->omega-body [M-of-q]\n  (L/Gamma-bar\n   (M-of-q->omega-body-of-t M-of-q)))\n\n;; Assuming omega-body is on principal axes, and A, B, C are the principal\n;; moments. Angular velocity to kinetic energy and angular momenta\n\n(defn T-body [A B C]\n  (fn [[w0 w1 w2]]\n    (* (/ 1 2)\n       (+ (* A (g/square w0))\n          (* B (g/square w1))\n          (* C (g/square w2))))))\n\n(defn L-body [A B C]\n  (fn [[w0 w1 w2]]\n    (s/down (* A w0)\n            (* B w1)\n            (* C w2))))\n\n(defn L-space [M]\n  (fn [A B C]\n    (fn [omega-body]\n      (* ((L-body A B C) omega-body)\n         (g/transpose M)))))\n\n;; ## Euler Angles\n\n(defn Euler->omega [angles-path]\n  (fn [t]\n    (letfn [(M-on-path [t]\n              (r/Euler->M (angles-path t)))\n            (w-cross [t]\n              (* ((D M-on-path) t)\n                 (g/transpose (M-on-path t))))]\n      (antisymmetric->column-matrix\n       (w-cross t)))))\n\n(defn Euler->omega-body [angles-path]\n  (fn [t]\n    (* (g/transpose (r/Euler->M (angles-path t)))\n       ((Euler->omega angles-path) t))))\n\n;; Assuming Euler angles rotate principal axes from reference orientation.\n;;\n\n\n(defn Euler-state->omega-body\n  \"Although this implementation appears to summarize `(M->omega-body r/Euler->M)`,\n  it is actually essential to prevent intermediate expression explosion.\"\n  [[_ [theta _ psi] [thetadot phidot psidot]]]\n  (let [omega-a (+ (* (sin psi) (sin theta) phidot)\n                   (* (cos psi) thetadot))\n        omega-b (+ (* (cos psi) (sin theta) phidot)\n                   (* -1 (sin psi) thetadot))\n        omega-c (+ (* (cos theta) phidot)\n                   psidot)]\n    (up omega-a omega-b omega-c)))\n\n(defn T-body-Euler [A B C]\n  (fn [local]\n    ((T-body A B C)\n     (Euler-state->omega-body local))))\n\n(def ^{:doc \"Alias for [[T-body-Euler]].\"}\n  T-rigid-body T-body-Euler)\n\n(defn L-body-Euler [A B C]\n  (fn [local]\n    ((L-body A B C)\n     (Euler-state->omega-body local))))\n\n(def ^{:doc \"Alias for [[L-body-Euler]].\"}\n  Euler-state->L-body L-body-Euler)\n\n(defn L-space-Euler [A B C]\n  (fn [local]\n    (let [angles (L/coordinate local)]\n      (* ((L-body-Euler A B C) local)\n         (g/transpose (r/Euler->M angles))))))\n\n(def ^{:doc \"Alias for [[L-space-Euler]].\"}\n  Euler-state->L-space L-space-Euler)\n\n(defn rigid-sysder [A B C]\n  (L/Lagrangian->state-derivative\n   (T-rigid-body A B C)))\n\n;; ## Quaternion representation\n\n(defn quaternion-state->omega-body [[_ q qdot]]\n  (let [two-q-norm (/ (* 2 q)\n                      (g/dot-product q q))\n        omega**a (g/dot-product two-q-norm (* q/I-matrix qdot))\n        omega**b (g/dot-product two-q-norm (* q/J-matrix qdot))\n        omega**c (g/dot-product two-q-norm (* q/K-matrix qdot))]\n    (up omega**a omega**b omega**c)))\n\n;; I'm not sure what these are in Quaternion land, so I'll leave them here as\n;; private for now.\n\n(let [q:a (matrix/by-rows\n           [0 1 0 0]\n           [-1 0 0 0]\n           [0 0 0 1]\n           [0 0 -1 0])\n      q:b (matrix/by-rows\n           [0 0 1 0]\n           [0 0 0 -1]\n           [-1 0 0 0]\n           [0 1 0 0])\n      q:c (matrix/by-rows\n           [0 0 0 1]\n           [0 0 1 0]\n           [0 -1 0 0]\n           [-1 0 0 0])]\n  (defn quaternion-state->omega-space [[_ q qdot]]\n    (let [Q     (matrix/up->column-matrix q)\n          QdotT (matrix/row* qdot)\n          two-m**2-inv (/ -2 (g/dot-product q q))\n          omega**x (* two-m**2-inv (get-in (* QdotT q:a Q) [0 0]))\n          omega**y (* two-m**2-inv (get-in (* QdotT q:b Q) [0 0]))\n          omega**z (* two-m**2-inv (get-in (* QdotT q:c Q) [0 0]))]\n      (up omega**x omega**y omega**z))))\n\n(defn qw-state->L-body [A B C]\n  (fn [[_ _ omega]]\n    ((L-body A B C) omega)))\n\n(defn qw-state->L-space [A B C]\n  (let [state->body (qw-state->L-body A B C)]\n    (fn [[_ q :as qw-state]]\n      (let [Lbody (state->body qw-state)\n            M     (q/->rotation-matrix (q/make q))]\n        (* Lbody (g/transpose M))))))\n\n(defn T-quaternion-state [A B C]\n  (fn [[_ q qdot]]\n    (let [Q        (matrix/up->column-matrix q)\n          Qdot     (matrix/up->column-matrix qdot)\n          m**2-inv (g/invert (get-in (* (matrix/transpose Q) Q) [0 0]))\n          x        (* m**2-inv q/I-matrix Qdot)\n          y        (* m**2-inv q/J-matrix Qdot)\n          z        (* m**2-inv q/K-matrix Qdot)\n          M        (* Q (matrix/transpose Q))]\n      (* 2 (+ (* A (get-in (* (matrix/transpose x) M x) [0 0]))\n              (* B (get-in (* (matrix/transpose y) M y) [0 0]))\n              (* C (get-in (* (matrix/transpose z) M z) [0 0])))))))\n"]}