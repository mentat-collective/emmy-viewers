shadow$provide.module$node_modules$three$src$renderers$shaders$ShaderChunk$lights_physical_fragment_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;exports.default="\nPhysicalMaterial material;\nmaterial.diffuseColor \x3d diffuseColor.rgb * ( 1.0 - metalnessFactor );\n\nvec3 dxy \x3d max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness \x3d max( max( dxy.x, dxy.y ), dxy.z );\n\nmaterial.roughness \x3d max( roughnessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.\nmaterial.roughness +\x3d geometryRoughness;\nmaterial.roughness \x3d min( material.roughness, 1.0 );\n\n#ifdef IOR\n\n\t#ifdef SPECULAR\n\n\t\tfloat specularIntensityFactor \x3d specularIntensity;\n\t\tvec3 specularColorFactor \x3d specularColor;\n\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\n\t\t\tspecularIntensityFactor *\x3d texture2D( specularIntensityMap, vUv ).a;\n\n\t\t#endif\n\n\t\t#ifdef USE_SPECULARCOLORMAP\n\n\t\t\tspecularColorFactor *\x3d texture2D( specularColorMap, vUv ).rgb;\n\n\t\t#endif\n\n\t\tmaterial.specularF90 \x3d mix( specularIntensityFactor, 1.0, metalnessFactor );\n\n\t#else\n\n\t\tfloat specularIntensityFactor \x3d 1.0;\n\t\tvec3 specularColorFactor \x3d vec3( 1.0 );\n\t\tmaterial.specularF90 \x3d 1.0;\n\n\t#endif\n\n\tmaterial.specularColor \x3d mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n\n#else\n\n\tmaterial.specularColor \x3d mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 \x3d 1.0;\n\n#endif\n\n#ifdef USE_CLEARCOAT\n\n\tmaterial.clearcoat \x3d clearcoat;\n\tmaterial.clearcoatRoughness \x3d clearcoatRoughness;\n\tmaterial.clearcoatF0 \x3d vec3( 0.04 );\n\tmaterial.clearcoatF90 \x3d 1.0;\n\n\t#ifdef USE_CLEARCOATMAP\n\n\t\tmaterial.clearcoat *\x3d texture2D( clearcoatMap, vUv ).x;\n\n\t#endif\n\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\t\tmaterial.clearcoatRoughness *\x3d texture2D( clearcoatRoughnessMap, vUv ).y;\n\n\t#endif\n\n\tmaterial.clearcoat \x3d saturate( material.clearcoat ); // Burley clearcoat model\n\tmaterial.clearcoatRoughness \x3d max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness +\x3d geometryRoughness;\n\tmaterial.clearcoatRoughness \x3d min( material.clearcoatRoughness, 1.0 );\n\n#endif\n\n#ifdef USE_SHEEN\n\n\tmaterial.sheenColor \x3d sheenColor;\n\n\t#ifdef USE_SHEENCOLORMAP\n\n\t\tmaterial.sheenColor *\x3d texture2D( sheenColorMap, vUv ).rgb;\n\n\t#endif\n\n\tmaterial.sheenRoughness \x3d clamp( sheenRoughness, 0.07, 1.0 );\n\n\t#ifdef USE_SHEENROUGHNESSMAP\n\n\t\tmaterial.sheenRoughness *\x3d texture2D( sheenRoughnessMap, vUv ).a;\n\n\t#endif\n\n#endif\n"}
//# sourceMappingURL=module$node_modules$three$src$renderers$shaders$ShaderChunk$lights_physical_fragment_glsl.js.map
