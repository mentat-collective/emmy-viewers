{"version":3,"sources":["rewrite_clj/node/integer.cljc"],"mappings":"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","names":["this__5343__auto__","k__5344__auto__","this__5345__auto__","k74294","else__5346__auto__","G__74300","cljs.core/Keyword","value","base","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__74302","vec__74303","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__74293","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this74295","other74296","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__74320","this__5351__auto__","k__5352__auto__","pred__74321","cljs.core/keyword-identical?","expr__74322","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.integer/IntNode","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__74298","extmap__5385__auto__","G__74324","cljs.core/record?","rewrite-clj.node.integer/->IntNode","rewrite-clj.node.integer/map->IntNode","_node","_opts","node","sign","abs-value","G__74318","s","rewrite-clj.interop/int->str","prefix","G__74319","cljs.core/long","rewrite-clj.node.protocols/make-printable!","var_args","G__74326","rewrite-clj.node.integer/integer-node","js/Error","rewrite_clj.node.integer.integer_node","cljs.core/integer?"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.integer\n  (:require [rewrite-clj.interop :as interop]\n            [rewrite-clj.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defrecord IntNode [value base]\n  node/Node\n  (tag [_node] :token)\n  (node-type [_node] :int)\n  (printable-only? [_node] false)\n  (sexpr* [_node _opts] value)\n  (length [node]\n    (count (node/string node)))\n  (string [_node]\n    (let [sign (when (< value 0)\n                 \"-\")\n          abs-value (cond-> value (< value 0) -)\n          s (interop/int->str abs-value base)\n          prefix (case (long base)\n                   8  \"0\"\n                   10 \"\"\n                   16 \"0x\"\n                   (str base \"r\"))]\n      (str sign prefix s)))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! IntNode)\n\n;; ## Constructor\n\n(defn integer-node\n  \"Create node representing an integer `value` in `base`.\n\n  `base` defaults to 10.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/integer-node 42)\n       n/string)\n   ;; => \\\"42\\\"\n\n   (-> (n/integer-node 31 2)\n       n/string)\n   ;; => \\\"2r11111\\\"\n   ```\n\n   Note: the parser does not currently parse to integer-nodes, but they fully supported for output.\"\n  ([value]\n   (integer-node value 10))\n  ([value base]\n   {:pre [(integer? value)\n          (integer? base)\n          (< 1 base 37)]}\n   (->IntNode value base)))\n"]}