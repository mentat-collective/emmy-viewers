{"version":3,"sources":["sicmutils/numbers.cljc"],"mappings":";;;;AA4BA,AAAAA,kEAAA,mFAAA,iFAAA,yFAAA,WAAsCC,EAAEC;AAAxC,AAA2C,QAA0BD,IAAEC;;AACvE,AAAAC,kEAAA,mFAAA,iFAAA,yFAAA,WAAsCF,EAAEC;AAAxC,AAA2C,QAA0BD,IAAEC;;AACvE,AAAAE,kEAAA,mFAAA,iFAAA,yFAAA,WAAsCH,EAAEC;AAAxC,AAA2C,QAA0BD,IAAEC;;AACvE,AAAAG,qEAAA,mFAAA,yFAAA,WAAgCJ;AAAhC,AAAmC,UAAQA;;AAC3C,AAAAK,8EAAA,mFAAA,yFAAA,WAAmCL;AAAnC,AAAsC,YAAA,JAAMA;;AAE5C,AAAAM,mEAAA,mFAAA,iFAAA,yFAAA,WAAuCL,EAAEM;AAAzC,AACE,GAAI,EAAK,KAAA,JAAMN,cACN,GAAK,wEAAA,vEACC,AAACO,gEAAkBD;AAChC,OAACE,oDAAM,AAACP,oDAAMK,EAAE,AAACG,oDAAMT;;AACvB,QAACU,4DAAAA,iEAAAA,PAAeV,6CAAAA,3CAAEM,6CAAAA;;;AAEtB,AAAAK,kEAAA,mFAAA,yFAAA,WAA6BZ;AAA7B,AAAgC,QAACa,2DAAAA,8DAAAA,LAAcb,0CAAAA;;AAC/C,AAAAc,wEAAA,mFAAA,yFAAA,WAAmCd;AAAnC,AAAsC,QAACa,2DAAAA,8DAAAA,LAAcb,0CAAAA;;AACrD,AAAAe,kEAAA,mFAAA,iFAAA,yFAAA,WAAsCf,EAAEC;AAAxC,AAA2C,QAAQD,IAAEC;;AACrD,AAAAe,qEAAA,mFAAA,yFAAA,WAAgChB;AAAhC,AAAmC,QAAA,MAAQA;;AAC3C,AAAAiB,oEAAA,mFAAA,yFAAA,WAA+BjB;AAA/B,AAAkC,OAACkB,gBAAK,AAACC,WAAWnB;;AACpD,AAAAoB,sEAAA,mFAAA,yFAAA,WAAiCpB;AAAjC,AAAoC,OAACkB,gBAAK,AAACG,UAAUrB;;AACrD,AAAAsB,2EAAA,mFAAA,yFAAA,WAAsCtB;AAAtC,AAEW,OAACuB,WAAWvB;;AAEvB,AAAAwB,8EAAA,mFAAA,mGAAA,WAAuCC;AAAvC,AAAA;;AACA,AAAAD,8EAAA,mFAAA,yFAAA,WAAmCxB;AAAnC,AAGW,OAAC0B,0BAAU1B;;AAGtB,AAAA2B,wEAAA,mFAAA,yFAAA,WAAmC3B;AAAnC,AAAsCA;;AACtC,AAAA4B,wEAAA,mFAAA,yFAAA,WAAmCH;AAAnC,AAAA;;AAEA,AAAAI,oEAAA,mFAAA,yFAAA,WAA+B7B;AAA/B,AACE,GAAI,KAAA,JAAMA;AACR8B;;AACA,OAACC,0BAAY/B;;;AAEjB,AAAAgC,wEAAA,mFAAA,yFAAA,WAAmChC;AAAnC,AAAsCA;;AAItC,AAAAiC,mEAAA,mFAAA,yFAAA,WAA8BjC;AAA9B,AACE,GAAM,AAACkC,4BAAQlC;AAAf;;AAAA,oBACM,AAACwB,gEAAYxB;AADnB;;AAAA,AAEY,OAACmC,wDAAI,AAACC,oDAAMpC,GAAGA;;;;;AAE7B,AAAAoC,kEAAA,mFAAA,yFAAA,WAA6BpC;AAA7B,AAAgC,OAACqC,SAASrC;;AAC1C,AAAAsC,kEAAA,mFAAA,yFAAA,WAA6BtC;AAA7B,AAAgC,OAACuC,SAASvC;;AAC1C,AAAAwC,kEAAA,mFAAA,yFAAA,WAA6BxC;AAA7B,AAAgC,OAACyC,SAASzC;;AAE1C,AAAA0C,mEAAA,mFAAA,yFAAA,WAA8B1C;AAA9B,AAAiC,OAAC2C,UAAU3C;;AAC5C,AAAA4C,mEAAA,mFAAA,yFAAA,WAA8B5C;AAA9B,AAAiC,OAAC6C,UAAU7C;;AAC5C,AAAA8C,mEAAA,mFAAA,yFAAA,WAA8B9C;AAA9B,AAAiC,OAAC+C,UAAU/C;;AAE5C,AAAAgD,mEAAA,mFAAA,yFAAA,WAA8BhD;AAA9B,AAAiC,OAACiD,UAAUjD;;AAC5C,AAAAgD,mEAAA,mFAAA,iFAAA,yFAAA,WAAuChD,EAAEC;AAAzC,AAA4C,OAACiD,WAAWlD,EAAEC;;AAM1D,AAAAkD,mEAAA,mFAAA,yFAAA,WAA8BnD;AAA9B,AACE,GAAI,0DAAA,zDAAG,AAACY,oDAAMZ;AACZ,OAACmD,qDAAO,AAACC,wDAAQpD;;AACjB,OAACqD,UAAUrD;;;AAEf,AAAAsD,mEAAA,mFAAA,yFAAA,WAA8BtD;AAA9B,AACE,GAAI,0DAAA,zDAAG,AAACY,oDAAMZ;AACZ,OAACsD,qDAAO,AAACF,wDAAQpD;;AACjB,OAACuD,UAAUvD;;;AAGZ,AAEE,AAAAwD,oEAAA,mFAAA,yFAAA,WAA+BxD;AAA/B,AACE,GAAI,MAAA,LAAIA;AACN,OAACyD,WAAWzD;;AACZ,OAACwD,sDAAQ,AAACJ,wDAAQpD;;;;AAEtB,AAAA0D,oEAAA,mFAAA,yFAAA,WAA+B1D;AAA/B,AACE,GAAI,MAAA,LAAIA;AACN,OAAC2D,WAAW3D;;AACZ,OAAC0D,sDAAQ,AAACN,wDAAQpD;;;;AAEtB,AAAA4D,oEAAA,mFAAA,yFAAA,WAA+B5D;AAA/B,AACE,GAAI,2DAAA,1DAAI,AAACY,oDAAMZ;AACb,OAAC4D,sDAAQ,AAACR,wDAAQpD;;AAClB,OAAC6D,WAAW7D;;;AAErB,AAAA8D,mEAAA,mFAAA,yFAAA,WAA8B9D;AAA9B,AACE,GAAI,KAAA,JAAMA;AACR,OAAC8D,qDAAO,AAACV,wDAAQpD;;AACjB,QAAC+D,4DAAAA,+DAAAA,LAAe/D,2CAAAA;;;AAEpB,AAAAU,kEAAA,mFAAA,yFAAA,WAA6BV;AAA7B,AACE,GAAI,KAAA,JAAMA;AACR,OAACU,oDAAM,AAAC0C,wDAAQpD;;AAChB,OAACgE,SAAShE;;;AASL,AAAAiE,oEAAA,kGAAA,fAAoBC,0BAAY3D;AAAhC,AACE,GAAI,KAAA,JAAMA;AACR,OAAC0D,sDAAQ,AAACb,wDAAQ7C;;AAClB,OAAC4D,WAAW5D;;;AAEhB,AAAA6D,mEAAA,kGAAA,fAAmBF,0BAAY3D;AAA/B,AACE,GAAI,KAAA,JAAMA;AACR,OAAC6D,qDAAO,AAAChB,wDAAQ7C;;AACjB,OAAC8D,UAAU9D;;;AAExB,AAAAE,kEAAA,mFAAA,yFAAA,WAA6BT;AAA7B,AACE,GAAI,OAAA,NAAYA;AAAhB;;AAEE,OAACsE,SAAStE;;;AAOd;;;;;mCAAA,nCAAOuE,8EAIJtE,EAAED;AAJL,AAKE,oBAAM,AAACwE,mDAAIxE,EAAEC;AAAc,OAACwE,yBAAWzE;;AAAvC,oBACM,AAACwE,mDAAIxE,EAAE,AAACI,uDAASH;AAAI,OAACG,uDAAS,AAACqE,yBAAWzE;;AADjD,GAEM,AAAC0E,2BAAO1E;AAAcC;;AAF5B,GAGM,AAACyE,2BAAO,AAACtE,uDAASJ;AAAI,OAACI,uDAASH;;AAHtC,AAAA;;;;;;;AAMF,AAAA0E,2EAAA,mFAAA,sFAAA,yFAAA,WAAiD1E,EAAED;AAAnD,AACE,IAAA4E,mBAAI,AAACL,iCAAetE,EAAED;AAAtB,AAAA,oBAAA4E;AAAAA;;AACI,OAACC,uBACA,CAAA,oFAAA,HAA0C5E,oDAAOD;;;AAExD,AAAA8E,uEAAA,mFAAA,sFAAA,yFAAA,WAA6C7E,EAAED;AAA/C,AACE,IAAA4E,mBAAI,AAACL,iCAAetE,EAAED;AAAtB,AAAA,oBAAA4E;AAAAA;;AACI,OAACC,uBACA,CAAA,gFAAA,HAAsC5E,oDAAOD;;;AAEpD;;;;iCAAA,jCAAgBgF,0EAGbhF,EAAEC;AAHL,AAAA,GAIS,AAACiC,4BAAQ,AAAC+C,0DAAYjF,EAAEC;AAJjC;AAAA,AAAA,MAAA,KAAA8E,MAAA;;;AAKE,OAACD,yDAAW9E,EAAEC;;AAEhB,AAAA0E,2EAAA,mFAAA,2FAAA,mGAAA,WAAuD1E,EAAED;AAAzD,AACE,OAACgF,+BAAa/E,EAAED;;AAElB,AAAAsB,2EAAA,mFAAA,mGAAA,WAA0CtB;AAA1C,AAA6CA;;AAC7C,AAAAQ,8EAAA,mFAAA,mGAAA,WAA6CiB;AAA7C,AAAA;;AACA,AAAAR,oEAAA,mFAAA,mGAAA,WAAmCjB;AAAnC,AAAsCA;;AACtC,AAAAoB,sEAAA,mFAAA,mGAAA,WAAqCpB;AAArC,AAAwCA;;AAIxC,AAAA8E,uEAAA,mFAAA,wGAAA,gHAAA,WAAiE9E,EAAEC;AAAnE,AAAsE,OAACiF,eAAKlF,EAAEC;;AAC9E,AAAAgF,wEAAA,mFAAA,iFAAA,yFAAA,WAA4CjF,EAAEC;AAA9C,AAAiD,OAACkF,cAAInF,EAAEC;;AACxD,AAAAmF,qEAAA,mFAAA,iFAAA,yFAAA,WAAyCpF,EAAEC;AAA3C,AAA8C,OAACoF,cAAIrF,EAAEC;;AAoClD,AACE,UAAA,gCAAcD;AAAd,AACU,GAAI,KAAA,JAAMA;AAAG,UAAQA;;AAAGA;;;iBADlC,uCAGqBA,EAAEC;AAHvB,AAIU,IAAOD,QAAE,AAACsF,IAAItF;IACPC,QAAE,AAACqF,IAAIrF;;AADd,AAEE,GAAI,UAAA,TAAYA;AACdD;;AACA,eAAOC;eAAE,CAAQD,QAAEC;;;;;;;;AARjC,AAYE,AAAAsF,kEAAA,mFAAA,wGAAA,gHAAA,WAA4DvF,EAAEC;AAA9D,AACE,IAAOD,QAAE,AAACsF,IAAItF;IACPC,QAAE,AAACqF,IAAIrF;;AADd,AAEE,GAAI,WAAA,VAAYA;AACdD;;AACA,eAAOC;eAAE,AAACkF,cAAInF,MAAEC;;;;;;;;;AAEtB,AAAAsF,kEAAA,yGAAA,tBAAkBC,OAAUA,0BAAYxF,EAAEC;AAA1C,AACE,OAACwF,WAAWzF,EAAEC;;;AAEhB,AAAAsF,kEAAA,mFAAA,uHAAA,fAAsCC,0BAAYxF,EAAEC;AAApD,AACE,OAACwF,WAAW,AAACD,OAAUxF,GAAGC;;;AAE5B,AAAAsF,kEAAA,0FAAA,gHAAA,vHAAmBC,kIAAgCxF,EAAEC;AAArD,AACE,OAACwF,WAAWzF,EAAE,AAACwF,OAAUvF;;;AAE7B,AAAAK,mEAAA,mFAAA,wGAAA,gHAAA,WAA6DN,EAAEC;AAA/D,AACE,GAAI,KAAA,JAAMA;AACR,OAACe,uDAAS,iBAAA0E,WAAgB1F;IAAhB2F,WAAkB,GAAQ1F;AAA1B,AAAA,8HAAAyF,SAAAC,kDAAAD,SAAAC,1LAAChF,4DAAAA,+EAAAA;;;AACX,QAACA,4DAAAA,iEAAAA,PAAeX,6CAAAA,3CAAEC,6CAAAA;;;;AAEtB,AAAAc,kEAAA,mFAAA,2FAAA,mGAAA,WAA8Cf,EAAEC;AAAhD,AACE,IAAM2F,MAAI,AAACX,0DAAYjF,EAAEC;AAAzB,AACE,GAAI,AAACiC,4BAAQ0D;AACX,OAACd,yDAAW9E,EAAEC;;AACd,OAAC4F,0DAAc7F,EAAEC;;;;AAEvB,AAAAe,qEAAA,mFAAA,mGAAA,WAAoChB;AAApC,AACE,GAAI,AAAC0E,2BAAO1E;AACVA;;AACA,iEAAA,1DAAC6F,8DAAgB7F;;;AAMvB,AAEE,AAAAD,kEAAA,yGAAA,tBAAkByF,OAAUA,0BAAYxF,EAAEC;AAA1C,AAA6C,QAAQD,IAAEC;;;AACvD,AAAAC,kEAAA,yGAAA,tBAAkBsF,OAAUA,0BAAYxF,EAAEC;AAA1C,AAA6C,QAAQD,IAAEC;;;AACvD,AAAAmF,qEAAA,yGAAA,tBAAqBI,OAAUA,0BAAYxF,EAAEC;AAA7C,AAAgD,OAAC6F,iCAAiB9F,EAAEC;;;AACpE,AAAAE,kEAAA,yGAAA,tBAAkBqF,OAAUA,0BAAYxF,EAAEC;AAA1C,AAA6C,QAAQD,IAAEC;;;AACvD,AAAAG,qEAAA,kGAAA,fAAqBoF,0BAAYxF;AAAjC,AAAoC,UAAQA;;;AAE5C,AAAAM,mEAAA,yGAAA,tBAAmBkF,OAAUA,0BAAYxF,EAAEC;AAA3C,AACE,oBAAI,AAACI,gEAAYJ;AACf,OAACe,uDAAS,AAAkBhB,KAAE,GAAQC;;AACtC,OAAkBD,KAAEC;;;;AAExB,AAAAW,kEAAA,kGAAA,fAAkB4E,0BAAYxF;AAA9B,AAAiC,GAAI,KAAA,JAAMA;AAAG,UAAQA;;AAAGA;;;;AACzD,AAAA8E,uEAAA,yGAAA,tBAAuBU,OAAUA,0BAAYxF,EAAEC;AAA/C,AAAkD,QAAQD,IAAEC;;;AAC5D,AAAAgF,wEAAA,yGAAA,tBAAwBO,OAAUA,0BAAYxF,EAAEC;AAAhD,AAAmD,QAAQD,IAAEC;;;AAC7D,AAAAa,wEAAA,kGAAA,fAAwB0E,0BAAYxF;AAApC,AACE,GAAI,KAAA,JAAMA;AAAG,UAAQA;;AAAGA;;;;AAE1B,AAAAe,kEAAA,yGAAA,tBAAkByE,OAAUA,0BAAYxF,EAAEC;AAA1C,AACE,IAAM2F,MAAI,CAAQ5F,IAAEC;AAApB,AACE,GAAI,AAACiC,4BAAQ0D;AACX,QAAQ5F,IAAEC;;AACV,OAAC4F,0DAAc7F,EAAEC;;;;AAEvB,IAAA8F,mBAAA,AAAAC,cAAA,mFAAYjG,sBAAMG,sBAAMC,sBAAMY,sBAAMT,uBAAO8E,yBAASH,4BAAYH;IAAhEmB,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,eAAA,AAAAD,wDAAAE,nEAAQS;AAAR,AAAA,AAEE,AAAAA,qDAAA,0FAAA,mGAAA,1GAAepB;kBAAyBxF,EAAEC;AAA1C,AACE,IAAA4G,WAAI7G;IAAJ8G,WAAM,AAACtB,OAAUvF;AAAjB,AAAA,wFAAA4G,SAAAC,+BAAAD,SAAAC,jIAACF,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,0GAAA,fAA4BpB;kBAAYxF,EAAEC;AAA1C,AACE,IAAAgH,WAAI,AAACzB,OAAUxF;IAAfkH,WAAkBjH;AAAlB,AAAA,wFAAAgH,SAAAC,+BAAAD,SAAAC,jIAACN,yCAAAA,4DAAAA;;;;AAIH,AAAAA,qDAAA,0FAAA,6GAAA,pHAAepB;kBAA+BxF,EAAEC;AAAhD,AACE,IAAAoH,WAAI,AAACnD,OAAUlE;IAAfsH,WAAkBrH;AAAlB,AAAA,wFAAAoH,SAAAC,+BAAAD,SAAAC,jIAACV,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,oHAAA,fAAkCpB;kBAAYxF,EAAEC;AAAhD,AACE,IAAAwH,WAAIzH;IAAJ0H,WAAM,AAACxD,OAAUjE;AAAjB,AAAA,wFAAAwH,SAAAC,+BAAAD,SAAAC,jIAACd,yCAAAA,4DAAAA;;;;AAdL;AAAA,eAAAb;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAI,gBAAAX,3BAAQa;AAAR,AAAA,AAEE,AAAAA,qDAAA,0FAAA,mGAAA,1GAAepB;kBAAyBxF,EAAEC;AAA1C,AACE,IAAA8G,WAAI/G;IAAJgH,WAAM,AAACxB,OAAUvF;AAAjB,AAAA,wFAAA8G,SAAAC,+BAAAD,SAAAC,jIAACJ,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,0GAAA,fAA4BpB;kBAAYxF,EAAEC;AAA1C,AACE,IAAAkH,WAAI,AAAC3B,OAAUxF;IAAfoH,WAAkBnH;AAAlB,AAAA,wFAAAkH,SAAAC,+BAAAD,SAAAC,jIAACR,yCAAAA,4DAAAA;;;;AAIH,AAAAA,qDAAA,0FAAA,6GAAA,pHAAepB;kBAA+BxF,EAAEC;AAAhD,AACE,IAAAsH,WAAI,AAACrD,OAAUlE;IAAfwH,WAAkBvH;AAAlB,AAAA,wFAAAsH,SAAAC,+BAAAD,SAAAC,jIAACZ,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,oHAAA,fAAkCpB;kBAAYxF,EAAEC;AAAhD,AACE,IAAA0H,WAAI3H;IAAJ4H,WAAM,AAAC1D,OAAUjE;AAAjB,AAAA,wFAAA0H,SAAAC,+BAAAD,SAAAC,jIAAChB,yCAAAA,4DAAAA;;;;AAdL;AAAA,eAAA,AAAAD,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAkBA,IAAA8B,mBAAA,AAAA7B,cAAA,oFAAY1D,sBAAMF,sBAAMI,sBACZW,uBAAOG,uBAAON,uBACdN,uBAAOE,uBAAOE,uBACdY,wBAAQF,wBAAQA,wBAChByE,sBAAMC,sBAAMC,sBAAMC,uBAAOC,uBACzB3H,sBAAMD,sBAAMqD;IALxBgE,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,eAAA,AAAAD,wDAAAE,nEAAQpB;AAAR,AAAA,AAME,AAAAA,qDAAA,kGAAA,fAAepB;kBAAYxF;AAA3B,AACE,IAAAsI,WAAI,AAACpE,OAAUlE;AAAf,AAAA,wFAAAsI,+BAAAA,/GAAC1B,yCAAAA,mDAAAA;;;;AAPL;AAAA,eAAAiB;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA5B,2BAAA,AAAAJ,cAAA6B;AAAA,AAAA,GAAAzB;AAAA,AAAA,IAAAyB,uBAAAzB;AAAA,AAAA,GAAA,AAAAC,6BAAAwB;AAAA,IAAAvB,wBAAA,AAAAC,sBAAAsB;AAAA,AAAA,eAAA,AAAArB,qBAAAqB;eAAAvB;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAI,gBAAAmB,3BAAQjB;AAAR,AAAA,AAME,AAAAA,qDAAA,kGAAA,fAAepB;kBAAYxF;AAA3B,AACE,IAAAuI,WAAI,AAACrE,OAAUlE;AAAf,AAAA,wFAAAuI,+BAAAA,/GAAC3B,yCAAAA,mDAAAA;;;;AAPL;AAAA,eAAA,AAAAD,eAAAkB;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AASA,AAAA7E,mEAAA,0FAAA,yFAAA,hGAAmBwC,2GAAqBgD,EAAEC;AAA1C,AAA6C,OAACzF,qDAAO,AAACkB,OAAUsE,GAAGC;;;AACnE,AAAAzF,mEAAA,mFAAA,gGAAA,fAA4BwC,0BAAYgD,EAAEC;AAA1C,AAA6C,OAACzF,qDAAOwF,EAAE,AAACtE,OAAUuE;;;AAClE,AAAAzF,mEAAA,yGAAA,tBAAmBwC,OAAUA,0BAAYgD,EAAEC;AAA3C,AAA8C,OAACzF,qDAAO,AAACkB,OAAUsE,GAAG,AAACtE,OAAUuE;;;AAG/E,AAAA1I,kEAAA,qLAAA,lGAAkB2I,6CAAKA,gEAAO1I,EAAEC;AAAhC,AAAmC,OAAMD,MAAEC;;;AAC3C,AAAAC,kEAAA,qLAAA,lGAAkBwI,6CAAKA,gEAAO1I,EAAEC;AAAhC,AAAmC,OAAWD,WAAEC;;;AAChD,AAAAE,kEAAA,qLAAA,lGAAkBuI,6CAAKA,gEAAa1I,EAAQC;AAA5C,AAA+C,OAAWD,WAAEC;;;AAC5D,AAAAG,qEAAA,wIAAA,rDAAqBsI,gEAAa1I;AAAlC,AAAqC,OAASA;;;AAC9C,AAAAY,kEAAA,wIAAA,rDAAkB8H,gEAAa1I;AAA/B,AAAkC,oBAAI,AAAaA;AAAG,OAASA;;AAAGA;;;;AAClE,AAAAiF,wEAAA,qLAAA,lGAAwByD,6CAAKA,gEAAa1I,EAAQC;AAAlD,AAAqD,OAASD,SAAEC;;;AAChE,AAAAa,wEAAA,wIAAA,rDAAwB4H,gEAAa1I;AAArC,AAAwC,oBAAI,AAAaA;AAAG,OAASA;;AAAGA;;;;AAKxE,gBAAA,sCAAoB2I,KAAKC;AAAzB,AACU,IAAaC,IAAED;IACFE,IAAE,AAACC;IACHC,IAAEL;;AAFf,AAGE,IAAMM,IAAE,AAACC,cAAI,AAAQL;IACfA,QAAE,aAAA,bAAmBA;AAD3B,AAEE,GACEI;AAAE,eAAOJ;eAAEC;eAAE,AAAWE,WAAEA;;;;;;AAD5B,oBAEE,AAASH;AAAG,OAAWG,WAAEF;;AAF3B,AAGQ,eAAOD;eAAE,AAAWG,WAAEF;eAAG,AAAWE,WAAEA;;;;;;;;;;;AAT5D,AAUE,AAAA1I,mEAAA,qLAAA,lGAAmBoI,6CAAKA,gEAAO1I,EAAQC;AAAvC,AACE,oBAAI,AAAaA;AACf,OAACe,uDAAS,AAACmI,UAAUnJ,EAAE,AAASC;;AAChC,OAACkJ,UAAUnJ,EAAEC;;;;AAKnB,IAAAmJ,mBAAA,AAAApD,cAAA,mFAAYjG,sBAAMG,sBAAMC,sBAAMoF,sBAAMiE,sBAAMlJ,uBAAO2E,4BAAYH;IAA7DuE,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,eAAA,AAAAD,wDAAAE,nEAAQ3C;AAAR,AAAA,AACE,AAAAA,qDAAA,gIAAA,gHAAA,7JAAe8B;kBAA2B1I,EAAEC;AAA5C,AACE,IAAAwJ,WAAIzJ;IAAJ0J,WAAM,AAACG,wDAAgB5J;AAAvB,AAAA,wFAAAwJ,SAAAC,+BAAAD,SAAAC,jIAAC9C,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,6JAAA,rDAAmC8B;kBAAO1I,EAAEC;AAA5C,AACE,IAAA6J,WAAI,AAACD,wDAAgB7J;IAArB+J,WAAwB9J;AAAxB,AAAA,wFAAA6J,SAAAC,+BAAAD,SAAAC,jIAACnD,yCAAAA,4DAAAA;;;;AAIH,AAAAA,qDAAA,gIAAA,6GAAA,1JAAe8B;kBAA0B1I,EAAEC;AAA3C,AACE,IAAAiK,WAAI,AAAChG,OAAUlE;IAAfmK,WAAkBlK;AAAlB,AAAA,wFAAAiK,SAAAC,+BAAAD,SAAAC,jIAACvD,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,0JAAA,rDAAkC8B;kBAAO1I,EAAEC;AAA3C,AACE,IAAAqK,WAAItK;IAAJuK,WAAM,AAACrG,OAAUjE;AAAjB,AAAA,wFAAAqK,SAAAC,+BAAAD,SAAAC,jIAAC3D,yCAAAA,4DAAAA;;;;AAbL;AAAA,eAAAwC;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAnD,2BAAA,AAAAJ,cAAAoD;AAAA,AAAA,GAAAhD;AAAA,AAAA,IAAAgD,uBAAAhD;AAAA,AAAA,GAAA,AAAAC,6BAAA+C;AAAA,IAAA9C,wBAAA,AAAAC,sBAAA6C;AAAA,AAAA,eAAA,AAAA5C,qBAAA4C;eAAA9C;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAI,gBAAA0C,3BAAQxC;AAAR,AAAA,AACE,AAAAA,qDAAA,gIAAA,gHAAA,7JAAe8B;kBAA2B1I,EAAEC;AAA5C,AACE,IAAA0J,WAAI3J;IAAJ4J,WAAM,AAACC,wDAAgB5J;AAAvB,AAAA,wFAAA0J,SAAAC,+BAAAD,SAAAC,jIAAChD,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,6JAAA,rDAAmC8B;kBAAO1I,EAAEC;AAA5C,AACE,IAAA+J,WAAI,AAACH,wDAAgB7J;IAArBiK,WAAwBhK;AAAxB,AAAA,wFAAA+J,SAAAC,+BAAAD,SAAAC,jIAACrD,yCAAAA,4DAAAA;;;;AAIH,AAAAA,qDAAA,gIAAA,6GAAA,1JAAe8B;kBAA0B1I,EAAEC;AAA3C,AACE,IAAAmK,WAAI,AAAClG,OAAUlE;IAAfqK,WAAkBpK;AAAlB,AAAA,wFAAAmK,SAAAC,+BAAAD,SAAAC,jIAACzD,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,0JAAA,rDAAkC8B;kBAAO1I,EAAEC;AAA3C,AACE,IAAAuK,WAAIxK;IAAJyK,WAAM,AAACvG,OAAUjE;AAAjB,AAAA,wFAAAuK,SAAAC,+BAAAD,SAAAC,jIAAC7D,yCAAAA,4DAAAA;;;;AAbL;AAAA,eAAA,AAAAD,eAAAyC;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAgBA,AAAArJ,kEAAA,+HAAA,5CAAkB2K,kBAAQA,qCAAU1K,EAAEC;AAAtC,AAAyC,OAAMD,MAAEC;;;AACjD,AAAAC,kEAAA,+HAAA,5CAAkBwK,kBAAQA,qCAAU1K,EAAEC;AAAtC,AAAyC,OAAWD,WAAEC;;;AACtD,AAAAE,kEAAA,+HAAA,5CAAkBuK,kBAAQA,qCAAmB1K,EAAWC;AAAxD,AAA2D,OAAWD,WAAEC;;;AACxE,AAAAG,qEAAA,6GAAA,1BAAqBsK,qCAAmB1K;AAAxC,AAA2C,OAASA;;;AACpD,AAAAY,kEAAA,6GAAA,1BAAkB8J,qCAAmB1K;AAArC,AAAwC,oBAAI,AAAaA;AAAG,OAASA;;AAAGA;;;;AACxE,AAAAiF,wEAAA,+HAAA,5CAAwByF,kBAAQA,qCAAmB1K,EAAWC;AAA9D,AAAiE,OAASD,SAAEC;;;AAC5E,AAAAa,wEAAA,6GAAA,1BAAwB4J,qCAAmB1K;AAA3C,AAA8C,oBAAI,AAAaA;AAAG,OAASA;;AAAGA;;;;AAE9E,eAAA,qCAAmB2I,KAAKC;AAAxB,AACU,IAAgBC,IAAED;IACFE,IAAE,AAAO4B;IACT1B,IAAEL;;AAFlB,AAGE,IAAMM,IAAE,AAACC,cAAI,AAAQL;IACNA,QAAE,aAAA,bAAaA;AAD9B,AAEE,GACEI;AAAE,eAAOJ;eAAEC;eAAE,AAAWE,WAAEA;;;;;;AAD5B,oBAEE,AAASH;AAAG,OAAWG,WAAEF;;AAF3B,AAGQ,eAAOD;eAAE,AAAWG,WAAEF;eAAG,AAAWE,WAAEA;;;;;;;;;;;AAT5D,AAUE,AAAA1I,mEAAA,+HAAA,5CAAmBoK,kBAAQA,qCAAU1K,EAAWC;AAAhD,AACE,oBAAI,AAAaA;AACf,OAACe,uDAAS,AAAC2J,SAAS3K,EAAE,AAASC;;AAC/B,OAAC0K,SAAS3K,EAAEC;;;;AAKlB,IAAA2K,mBAAA,AAAA5E,cAAA,mFAAYjG,sBAAMG,sBAAMC,sBAAMoF,sBAAMiE,sBAAMlJ,uBAAO2E,4BAAYH;IAA7D+F,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,eAAA,AAAAD,wDAAAE,nEAAQnE;AAAR,AAAA,AACE,AAAAA,qDAAA,qGAAA,gHAAA,lIAAe8D;kBAA8B1K,EAAEC;AAA/C,AACE,IAAA+K,WAAIhL;IAAJiL,WAAM,AAACG,6BAAmBnL;AAA1B,AAAA,wFAAA+K,SAAAC,+BAAAD,SAAAC,jIAACrE,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,kIAAA,1BAAmC8D;kBAAU1K,EAAEC;AAA/C,AACE,IAAAoL,WAAI,AAACD,6BAAmBpL;IAAxBsL,WAA2BrL;AAA3B,AAAA,wFAAAoL,SAAAC,+BAAAD,SAAAC,jIAAC1E,yCAAAA,4DAAAA;;;;AAIH,AAAAA,qDAAA,qGAAA,6GAAA,/HAAe8D;kBAA6B1K,EAAEC;AAA9C,AACE,IAAAwL,WAAI,AAACvH,OAAUlE;IAAf0L,WAAkBzL;AAAlB,AAAA,wFAAAwL,SAAAC,+BAAAD,SAAAC,jIAAC9E,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,+HAAA,1BAAkC8D;kBAAU1K,EAAEC;AAA9C,AACE,IAAA4L,WAAI7L;IAAJ8L,WAAM,AAAC5H,OAAUjE;AAAjB,AAAA,wFAAA4L,SAAAC,+BAAAD,SAAAC,jIAAClF,yCAAAA,4DAAAA;;;;AAIH,AAAAA,qDAAA,0JAAA,vEAAe8D,kBAAQhC;kBAAO1I,EAAEC;AAAhC,AACE,IAAAgM,WAAIjM;IAAJkM,WAAM,AAACd,6BAAmBnL;AAA1B,AAAA,wFAAAgM,SAAAC,+BAAAD,SAAAC,jIAACtF,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,0JAAA,vEAAe8B,6CAAKgC;kBAAU1K,EAAEC;AAAhC,AACE,IAAAoM,WAAI,AAACjB,6BAAmBpL;IAAxBsM,WAA2BrM;AAA3B,AAAA,wFAAAoM,SAAAC,+BAAAD,SAAAC,jIAAC1F,yCAAAA,4DAAAA;;;;AArBL;AAAA,eAAAgE;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA3E,2BAAA,AAAAJ,cAAA4E;AAAA,AAAA,GAAAxE;AAAA,AAAA,IAAAwE,uBAAAxE;AAAA,AAAA,GAAA,AAAAC,6BAAAuE;AAAA,IAAAtE,wBAAA,AAAAC,sBAAAqE;AAAA,AAAA,eAAA,AAAApE,qBAAAoE;eAAAtE;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAI,gBAAAkE,3BAAQhE;AAAR,AAAA,AACE,AAAAA,qDAAA,qGAAA,gHAAA,lIAAe8D;kBAA8B1K,EAAEC;AAA/C,AACE,IAAAiL,WAAIlL;IAAJmL,WAAM,AAACC,6BAAmBnL;AAA1B,AAAA,wFAAAiL,SAAAC,+BAAAD,SAAAC,jIAACvE,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,kIAAA,1BAAmC8D;kBAAU1K,EAAEC;AAA/C,AACE,IAAAsL,WAAI,AAACH,6BAAmBpL;IAAxBwL,WAA2BvL;AAA3B,AAAA,wFAAAsL,SAAAC,+BAAAD,SAAAC,jIAAC5E,yCAAAA,4DAAAA;;;;AAIH,AAAAA,qDAAA,qGAAA,6GAAA,/HAAe8D;kBAA6B1K,EAAEC;AAA9C,AACE,IAAA0L,WAAI,AAACzH,OAAUlE;IAAf4L,WAAkB3L;AAAlB,AAAA,wFAAA0L,SAAAC,+BAAAD,SAAAC,jIAAChF,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,mFAAA,+HAAA,1BAAkC8D;kBAAU1K,EAAEC;AAA9C,AACE,IAAA8L,WAAI/L;IAAJgM,WAAM,AAAC9H,OAAUjE;AAAjB,AAAA,wFAAA8L,SAAAC,+BAAAD,SAAAC,jIAACpF,yCAAAA,4DAAAA;;;;AAIH,AAAAA,qDAAA,0JAAA,vEAAe8D,kBAAQhC;kBAAO1I,EAAEC;AAAhC,AACE,IAAAkM,WAAInM;IAAJoM,WAAM,AAAChB,6BAAmBnL;AAA1B,AAAA,wFAAAkM,SAAAC,+BAAAD,SAAAC,jIAACxF,yCAAAA,4DAAAA;;;;AAEH,AAAAA,qDAAA,0JAAA,vEAAe8B,6CAAKgC;kBAAU1K,EAAEC;AAAhC,AACE,IAAAsM,WAAI,AAACnB,6BAAmBpL;IAAxBwM,WAA2BvM;AAA3B,AAAA,wFAAAsM,SAAAC,+BAAAD,SAAAC,jIAAC5F,yCAAAA,4DAAAA;;;;AArBL;AAAA,eAAA,AAAAD,eAAAiE;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAwBA,AAAA9F,uEAAA,qLAAA,lGAAuB4D,6CAAKA,gEAAa1I,EAAQC;AAAjD,AAAoD,OAAMD,MAAEC;;;AAC5D,AAAA6E,uEAAA,+HAAA,5CAAuB4F,kBAAQA,qCAAmB1K,EAAWC;AAA7D,AAAgE,OAASD,SAAEC","names":["sicmutils.generic/add","a","b","sicmutils.generic/mul","sicmutils.generic/sub","sicmutils.generic/negate","sicmutils.generic/negative?","sicmutils.generic/expt","x","sicmutils.generic/fractional-part","sicmutils.generic/exp","sicmutils.generic/log","sicmutils.util/compute-expt","sicmutils.generic/abs","sicmutils.util/compute-abs","sicmutils.generic/magnitude","sicmutils.generic/div","sicmutils.generic/invert","sicmutils.generic/floor","cljs.core/long","Math/floor","sicmutils.generic/ceiling","Math/ceil","sicmutils.generic/integer-part","Math/trunc","sicmutils.generic/infinite?","_","cljs.core/infinite?","sicmutils.generic/real-part","sicmutils.generic/imag-part","sicmutils.generic/angle","Math/PI","sicmutils.value/zero-like","sicmutils.generic/conjugate","sicmutils.generic/sinc","sicmutils.value/zero?","sicmutils.generic._SLASH_","sicmutils.generic/sin","Math/sin","sicmutils.generic/cos","Math/cos","sicmutils.generic/tan","Math/tan","sicmutils.generic/cosh","Math/cosh","sicmutils.generic/sinh","Math/sinh","sicmutils.generic/tanh","Math/tanh","sicmutils.generic/atan","Math/atan","Math/atan2","sicmutils.generic/asin","sicmutils.complex.complex","Math/asin","sicmutils.generic/acos","Math/acos","sicmutils.generic/acosh","Math/acosh","sicmutils.generic/asinh","Math/asinh","sicmutils.generic/atanh","Math/atanh","sicmutils.generic/sqrt","sicmutils.util/compute-sqrt","Math/log","sicmutils.generic/log10","js/Number","Math/log10","sicmutils.generic/log2","Math/log2","Math/exp","sicmutils.numbers/careful-divide","sicmutils.value/=","sicmutils.value/one-like","sicmutils.value/one?","sicmutils.generic/exact-divide","or__4253__auto__","sicmutils.util/illegal","sicmutils.generic/quotient","js/Error","sicmutils.numbers/exact-divide","sicmutils.generic/remainder","cljs.core/quot","cljs.core/rem","sicmutils.generic/modulo","cljs.core/mod","abs","sicmutils.generic/gcd","js/BigInt","bigint-gcd","G__78172","G__78173","rem","sicmutils.ratio.rationalize","sicmutils.generic/modulo-default","seq__78191","cljs.core/seq","chunk__78192","count__78193","i__78194","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","op","G__78214","G__78215","G__78223","G__78224","G__78216","G__78217","G__78225","G__78226","G__78219","G__78220","G__78227","G__78228","G__78221","G__78222","G__78229","G__78230","seq__78233","chunk__78234","count__78235","i__78236","sicmutils.generic/cot","sicmutils.generic/sec","sicmutils.generic/csc","sicmutils.generic/sech","sicmutils.generic/csch","G__78239","G__78240","l","r","sicmutils.numbers.goog$module$goog$math$Long","base","pow","n","y","sicmutils.numbers.goog$module$goog$math$Long.getOne","z","t","cljs.core/not","long-expt","seq__78254","chunk__78255","count__78256","i__78257","sicmutils.generic/lcm","G__78274","G__78275","G__78282","G__78283","sicmutils.numbers.goog$module$goog$math$Long.fromNumber","G__78276","G__78277","G__78284","G__78285","G__78278","G__78279","G__78286","G__78287","G__78280","G__78281","G__78288","G__78289","js/goog.math.Integer","int-expt","seq__78290","chunk__78291","count__78292","i__78293","G__78318","G__78319","G__78330","G__78331","goog.math.Integer/fromNumber","G__78320","G__78321","G__78332","G__78333","G__78322","G__78323","G__78334","G__78335","G__78324","G__78325","G__78336","G__78337","G__78326","G__78327","G__78338","G__78339","G__78328","G__78329","G__78340","G__78341"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.numbers\n  \"This namespace extends of all appropriate SICMUtils generic operations\n  from [[sicmutils.generic]] and [[sicmutils.value]] to the Clojure(script)\n  numeric tower.\n\n  For other numeric extensions, see [[sicmutils.ratio]]\n  and [[sicmutils.complex]].\"\n  (:refer-clojure :exclude [zero? / + - *])\n  (:require [clojure.core :as core]\n            [sicmutils.complex :refer [complex]]\n            #?(:cljs [sicmutils.ratio :as r])\n\n            ;; Required to enable the generic gcd implementation.\n            [sicmutils.euclid]\n            [sicmutils.generic :as g]\n            [sicmutils.util :as u]\n            [sicmutils.value :as v])\n  #?(:cljs\n     (:import (goog.math Long Integer))\n     :clj\n     (:import (clojure.lang BigInt)\n              (java.math BigInteger)\n              (org.apache.commons.math3.util ArithmeticUtils))))\n\n;; \"Backstop\" implementations that apply to anything that descends from\n;; ::v/real.\n(defmethod g/add [::v/real ::v/real] [a b] (#?(:clj +' :cljs core/+) a b))\n(defmethod g/mul [::v/real ::v/real] [a b] (#?(:clj *' :cljs core/*) a b))\n(defmethod g/sub [::v/real ::v/real] [a b] (#?(:clj -' :cljs core/-) a b))\n(defmethod g/negate [::v/real] [a] (core/- a))\n(defmethod g/negative? [::v/real] [a] (neg? a))\n\n(defmethod g/expt [::v/real ::v/real] [b x]\n  (if (and (neg? b)\n           (not (core/zero?\n                 (g/fractional-part x))))\n    (g/exp (g/mul x (g/log b)))\n    (u/compute-expt b x)))\n\n(defmethod g/abs [::v/real] [a] (u/compute-abs a))\n(defmethod g/magnitude [::v/real] [a] (u/compute-abs a))\n(defmethod g/div [::v/real ::v/real] [a b] (core// a b))\n(defmethod g/invert [::v/real] [a] (core// a))\n(defmethod g/floor [::v/real] [a] (long (Math/floor a)))\n(defmethod g/ceiling [::v/real] [a] (long (Math/ceil a)))\n(defmethod g/integer-part [::v/real] [a]\n  #?(:clj (long a)\n     :cljs (Math/trunc a)))\n\n(defmethod g/infinite? [::v/integral] [_] false)\n(defmethod g/infinite? [::v/real] [a]\n  #?(:clj (or (= a ##Inf)\n              (= a ##-Inf))\n     :cljs (infinite? a)))\n\n;; ## Complex Operations\n(defmethod g/real-part [::v/real] [a] a)\n(defmethod g/imag-part [::v/real] [_] 0)\n\n(defmethod g/angle [::v/real] [a]\n  (if (neg? a)\n    Math/PI\n    (v/zero-like a)))\n\n(defmethod g/conjugate [::v/real] [a] a)\n\n;; ## Trig Operations\n\n(defmethod g/sinc [::v/real] [a]\n  (cond (v/zero? a)     1\n        (g/infinite? a) 0\n        :else (g// (g/sin a) a)))\n\n(defmethod g/sin [::v/real] [a] (Math/sin a))\n(defmethod g/cos [::v/real] [a] (Math/cos a))\n(defmethod g/tan [::v/real] [a] (Math/tan a))\n\n(defmethod g/cosh [::v/real] [a] (Math/cosh a))\n(defmethod g/sinh [::v/real] [a] (Math/sinh a))\n(defmethod g/tanh [::v/real] [a] (Math/tanh a))\n\n(defmethod g/atan [::v/real] [a] (Math/atan a))\n(defmethod g/atan [::v/real ::v/real] [a b] (Math/atan2 a b))\n\n;; Operations which allow promotion to complex numbers when their\n;; arguments would otherwise result in a NaN if computed on the real\n;; line\n\n(defmethod g/asin [::v/real] [a]\n  (if (> (g/abs a) 1)\n    (g/asin (complex a))\n    (Math/asin a)))\n\n(defmethod g/acos [::v/real] [a]\n  (if (> (g/abs a) 1)\n    (g/acos (complex a))\n    (Math/acos a)))\n\n#?(:cljs\n   (do\n     ;; JS makes these available natively.\n     (defmethod g/acosh [::v/real] [a]\n       (if (>= a 1)\n         (Math/acosh a)\n         (g/acosh (complex a))))\n\n     (defmethod g/asinh [::v/real] [a]\n       (if (>= a 1)\n         (Math/asinh a)\n         (g/asinh (complex a))))\n\n     (defmethod g/atanh [::v/real] [a]\n       (if (>= (g/abs a) 1)\n         (g/atanh (complex a))\n         (Math/atanh a)))))\n\n(defmethod g/sqrt [::v/real] [a]\n  (if (neg? a)\n    (g/sqrt (complex a))\n    (u/compute-sqrt a)))\n\n(defmethod g/log [::v/real] [a]\n  (if (neg? a)\n    (g/log (complex a))\n    (Math/log a)))\n\n;; Specialized methods provided by the host platforms.\n\n#?(:clj  (defmethod g/log10 [Double] [x]\n           (if (neg? x)\n             (g/log10 (complex x))\n             (Math/log10 x)))\n\n   :cljs (defmethod g/log10 [js/Number] [x]\n           (if (neg? x)\n             (g/log10 (complex x))\n             (Math/log10 x))))\n\n#?(:cljs (defmethod g/log2 [js/Number] [x]\n           (if (neg? x)\n             (g/log2 (complex x))\n             (Math/log2 x))))\n\n(defmethod g/exp [::v/real] [a]\n  (if (core/zero? a)\n    1\n    (Math/exp a)))\n\n;; We don't yet suport quotient, remainder with floating point, but there are a\n;; few cases where it does make sense. When two numbers are identical up to\n;; sign, it's fine to say that they divide evenly (and return 1 or -1). If that\n;; happens, we can return a 0 remainder.\n\n(defn- careful-divide\n  \"Minimum effort division. If `b` and `a` are equal or of opposite sign,\n  returns 1 or -1 respectively. If `a` is 1 or -1, returns `b` or `-b`\n  respectively. Else, returns nil.\"\n  [b a]\n  (cond (v/= a b)            (v/one-like a)\n        (v/= a (g/negate b)) (g/negate (v/one-like a))\n        (v/one? a)            b\n        (v/one? (g/negate a)) (g/negate b)\n        :else nil))\n\n(defmethod g/exact-divide [::v/scalar ::v/real] [b a]\n  (or (careful-divide b a)\n      (u/illegal\n       (str \"exact-divide not allowed between: \" b \", \" a))))\n\n(defmethod g/quotient [::v/scalar ::v/real] [b a]\n  (or (careful-divide b a)\n      (u/illegal\n       (str \"quotient not allowed between: \" b \", \" a))))\n\n(defn ^:private exact-divide\n  \"Checked implementation of g/exact-divide general enough to use for any type\n  that defines g/remainder and g/quotient.\"\n  [a b]\n  {:pre [(v/zero? (g/remainder a b))]}\n  (g/quotient a b))\n\n(defmethod g/exact-divide [::v/integral ::v/integral] [b a]\n  (exact-divide b a))\n\n(defmethod g/integer-part [::v/integral] [a] a)\n(defmethod g/fractional-part [::v/integral] [_] 0)\n(defmethod g/floor [::v/integral] [a] a)\n(defmethod g/ceiling [::v/integral] [a] a)\n\n;; All JVM and JS types that respond to ::native-integral behave correctly with\n;; Clojure's native `quot`, `rem`, `mod`.\n(defmethod g/quotient [::v/native-integral ::v/native-integral] [a b] (quot a b))\n(defmethod g/remainder [::v/real ::v/real] [a b] (rem a b))\n(defmethod g/modulo [::v/real ::v/real] [a b] (mod a b))\n\n;; This section defines methods that act differently between Clojurescript and\n;; Clojure. The clojure methods are all slightly more refined based on Java's\n;; type system.\n#?(:clj\n   ;; Efficient, native GCD on the JVM.\n   (do (defmethod g/gcd [BigInteger BigInteger] [a b]\n         (.gcd ^BigInteger a\n               ^BigInteger b))\n\n       (defmethod g/gcd [BigInt BigInt] [a b]\n         (.gcd (biginteger a)\n               (biginteger b)))\n\n       (defmethod g/gcd [Long Long] [a b]\n         (ArithmeticUtils/gcd ^long a ^long b))\n\n       (defmethod g/gcd [Integer Integer] [a b]\n         (ArithmeticUtils/gcd ^int a ^int b))\n\n       (doseq [from [Long BigInt Integer]]\n         (defmethod g/gcd [BigInteger from] [a b]\n           (.gcd ^BigInteger a (biginteger b)))\n\n         (defmethod g/gcd [from BigInteger] [a b]\n           (.gcd (biginteger a) b)))\n\n       (doseq [from [Long Integer]]\n         (defmethod g/gcd [BigInt from] [a b]\n           (.gcd (biginteger a) (biginteger b)))\n\n         (defmethod g/gcd [from BigInt] [a b]\n           (.gcd (biginteger a) (biginteger b))))))\n\n#?(:cljs\n   (do\n     (letfn [(abs [a]\n               (if (neg? a) (core/- a) a))\n\n             (bigint-gcd [a b]\n               (loop [a (abs a)\n                      b (abs b)]\n                 (if (coercive-= b 0)\n                   a\n                   (recur b (js-mod a b)))))]\n\n       ;; The following GCD implementations use native operations to get more\n       ;; speed than the generic implementation in `sicmutils.euclid`.\n       (defmethod g/gcd [::v/native-integral ::v/native-integral] [a b]\n         (loop [a (abs a)\n                b (abs b)]\n           (if (core/zero? b)\n             a\n             (recur b (rem a b)))))\n\n       (defmethod g/gcd [js/BigInt js/BigInt] [a b]\n         (bigint-gcd a b))\n\n       (defmethod g/gcd [::v/native-integral js/BigInt] [a b]\n         (bigint-gcd (js/BigInt a) b))\n\n       (defmethod g/gcd [ js/BigInt ::v/native-integral] [a b]\n         (bigint-gcd a (js/BigInt b))))\n\n     (defmethod g/expt [::v/native-integral ::v/native-integral] [a b]\n       (if (neg? b)\n         (g/invert (u/compute-expt a (core/- b)))\n         (u/compute-expt a b)))\n\n     (defmethod g/div [::v/integral ::v/integral] [a b]\n       (let [rem (g/remainder a b)]\n         (if (v/zero? rem)\n           (g/quotient a b)\n           (r/rationalize a b))))\n\n     (defmethod g/invert [::v/integral] [a]\n       (if (v/one? a)\n         a\n         (r/rationalize 1 a)))))\n\n;; Clojurescript and Javascript have a number of numeric types available that\n;; don't respond true to number? These each require their own block of method\n;; implementations.\n#?(:cljs\n   (do\n     ;; native BigInt type in JS.\n     (defmethod g/add [js/BigInt js/BigInt] [a b] (core/+ a b))\n     (defmethod g/mul [js/BigInt js/BigInt] [a b] (core/* a b))\n     (defmethod g/modulo [js/BigInt js/BigInt] [a b] (g/modulo-default a b))\n     (defmethod g/sub [js/BigInt js/BigInt] [a b] (core/- a b))\n     (defmethod g/negate [js/BigInt] [a] (core/- a))\n\n     (defmethod g/expt [js/BigInt js/BigInt] [a b]\n       (if (g/negative? b)\n         (g/invert (js* \"~{} ** ~{}\" a (core/- b)))\n         (js* \"~{} ** ~{}\" a b)))\n\n     (defmethod g/abs [js/BigInt] [a] (if (neg? a) (core/- a) a))\n     (defmethod g/quotient [js/BigInt js/BigInt] [a b] (core// a b))\n     (defmethod g/remainder [js/BigInt js/BigInt] [a b] (js-mod a b))\n     (defmethod g/magnitude [js/BigInt] [a]\n       (if (neg? a) (core/- a) a))\n\n     (defmethod g/div [js/BigInt js/BigInt] [a b]\n       (let [rem (js-mod a b)]\n         (if (v/zero? rem)\n           (core// a b)\n           (r/rationalize a b))))\n\n     (doseq [op [g/add g/mul g/sub g/div g/expt g/modulo g/remainder g/quotient]]\n       ;; Compatibility between js/BigInt and the other integral types.\n       (defmethod op [js/BigInt ::v/integral] [a b]\n         (op a (js/BigInt b)))\n\n       (defmethod op [::v/integral js/BigInt] [a b]\n         (op (js/BigInt a) b))\n\n       ;; For NON integrals, we currently have no choice but to downcast the\n       ;; BigInt to a floating point number.\n       (defmethod op [js/BigInt ::v/floating-point] [a b]\n         (op (js/Number a) b))\n\n       (defmethod op [::v/floating-point js/BigInt] [a b]\n         (op a (js/Number b))))\n\n     ;; BigInt can't handle these operations natively, so we override with a\n     ;; downcast to number for now.\n     (doseq [op [g/cos g/sin g/tan\n                 g/asin g/acos g/atan\n                 g/cosh g/sinh g/tanh\n                 g/asinh g/acosh g/acosh\n                 g/cot g/sec g/csc g/sech g/csch\n                 g/log g/exp g/sqrt]]\n       (defmethod op [js/BigInt] [a]\n         (op (js/Number a))))\n\n     (defmethod g/atan [js/BigInt ::v/real] [l r] (g/atan (js/Number l) r))\n     (defmethod g/atan [::v/real js/BigInt] [l r] (g/atan l (js/Number r)))\n     (defmethod g/atan [js/BigInt js/BigInt] [l r] (g/atan (js/Number l) (js/Number r)))\n\n     ;; Google Closure library's 64-bit Long:\n     (defmethod g/add [Long Long] [a b] (.add a b))\n     (defmethod g/mul [Long Long] [a b] (.multiply a b))\n     (defmethod g/sub [Long Long] [^Long a ^Long b] (.subtract a b))\n     (defmethod g/negate [Long] [^Long a] (.negate a))\n     (defmethod g/abs [Long] [^Long a] (if (.isNegative a) (.negate a) a))\n     (defmethod g/remainder [Long Long] [^Long a ^Long b] (.modulo a b))\n     (defmethod g/magnitude [Long] [^Long a] (if (.isNegative a) (.negate a) a))\n\n     ;; Implementation of exponent taken from Clojure's numeric tower's\n     ;; expt-int:\n     ;; https://github.com/clojure/math.numeric-tower/blob/master/src/main/clojure/clojure/math/numeric_tower.clj#L72\n     (letfn [(long-expt [base pow]\n               (loop [^Long n pow\n                      ^Long y (Long/getOne)\n                      ^Long z base]\n                 (let [t (not (.isOdd n))\n                       n ^Long (.shiftRight n 1)]\n                   (cond\n                     t (recur n y (.multiply z z))\n                     (.isZero n) (.multiply z y)\n                     :else (recur n (.multiply z y) (.multiply z z))))))]\n       (defmethod g/expt [Long Long] [a ^Long b]\n         (if (.isNegative b)\n           (g/invert (long-expt a (.negate b)))\n           (long-expt a b))))\n\n     ;; Compatibility between basic number type and the google numeric types.\n     ;; Any operation between a number and a Long or Integer will promote the\n     ;; number.\n     (doseq [op [g/add g/mul g/sub g/gcd g/lcm g/expt g/remainder g/quotient]]\n       (defmethod op [Long ::v/native-integral] [a b]\n         (op a (Long/fromNumber b)))\n\n       (defmethod op [::v/native-integral Long] [a b]\n         (op (Long/fromNumber a) b))\n\n       ;; If this type encounters a floating point type it should lose\n       ;; precision.\n       (defmethod op [Long ::v/floating-point] [a b]\n         (op (js/Number a) b))\n\n       (defmethod op [::v/floating-point Long] [a b]\n         (op a (js/Number b))))\n\n     ;; Google Closure's arbitrary-precision Integer:\n     (defmethod g/add [Integer Integer] [a b] (.add a b))\n     (defmethod g/mul [Integer Integer] [a b] (.multiply a b))\n     (defmethod g/sub [Integer Integer] [^Integer a ^Integer b] (.subtract a b))\n     (defmethod g/negate [Integer] [^Integer a] (.negate a))\n     (defmethod g/abs [Integer] [^Integer a] (if (.isNegative a) (.negate a) a))\n     (defmethod g/remainder [Integer Integer] [^Integer a ^Integer b] (.modulo a b))\n     (defmethod g/magnitude [Integer] [^Integer a] (if (.isNegative a) (.negate a) a))\n\n     (letfn [(int-expt [base pow]\n               (loop [^Integer n pow\n                      ^Integer y (.-ONE Integer)\n                      ^Integer z base]\n                 (let [t (not (.isOdd n))\n                       ^Integer n (.shiftRight n 1)]\n                   (cond\n                     t (recur n y (.multiply z z))\n                     (.isZero n) (.multiply z y)\n                     :else (recur n (.multiply z y) (.multiply z z))))))]\n       (defmethod g/expt [Integer Integer] [a ^Integer b]\n         (if (.isNegative b)\n           (g/invert (int-expt a (.negate b)))\n           (int-expt a b))))\n\n     ;; Compatibility between basic number type and the google numeric types.\n     ;; Any operation between a number and a Long or Integer will promote the\n     ;; number.\n     (doseq [op [g/add g/mul g/sub g/gcd g/lcm g/expt g/remainder g/quotient]]\n       (defmethod op [Integer ::v/native-integral] [a b]\n         (op a (Integer/fromNumber b)))\n\n       (defmethod op [::v/native-integral Integer] [a b]\n         (op (Integer/fromNumber a) b))\n\n       ;; If this type encounters a floating point type it should lose\n       ;; precision.\n       (defmethod op [Integer ::v/floating-point] [a b]\n         (op (js/Number a) b))\n\n       (defmethod op [::v/floating-point Integer] [a b]\n         (op a (js/Number b)))\n\n       ;; When they encounter each other in binary operations, Long is coerced\n       ;; to Integer.\n       (defmethod op [Integer Long] [a b]\n         (op a (Integer/fromNumber b)))\n\n       (defmethod op [Long Integer] [a b]\n         (op (Integer/fromNumber a) b)))\n\n     ;; These names are slightly different between the two types.\n     (defmethod g/quotient [Long Long] [^Long a ^Long b] (.div a b))\n     (defmethod g/quotient [Integer Integer] [^Integer a ^Integer b] (.divide a b))))\n"]}