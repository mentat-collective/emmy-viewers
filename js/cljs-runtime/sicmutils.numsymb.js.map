{"version":3,"sources":["sicmutils/numsymb.cljc"],"mappings":"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","names":["sicmutils.numsymb/*incremental-simplifier*","sicmutils.numsymb/operator","cljs.core/first","sicmutils.numsymb/operands","cljs.core/rest","sicmutils.numsymb/is-expression?","s","x","cljs.core/seq?","cljs.core._EQ_","sicmutils.numsymb/sum?","sicmutils.numsymb/product?","sicmutils.numsymb/sqrt?","sicmutils.numsymb/expt?","sicmutils.numsymb/quotient?","sicmutils.numsymb/arctan?","sicmutils.numsymb/derivative?","sicmutils.generic/derivative-symbol","sicmutils.numsymb/iterated-derivative?","expr","and__4251__auto__","cljs.core/second","sicmutils.numsymb/with-exactness-preserved","f","sym-or-fn","process","cljs.core/Symbol","cljs.core/List","sicmutils.value/number?","q","sicmutils.value/exact?","sicmutils.numsymb/mod-rem","a","b","sym","sicmutils.value/zero?","sicmutils.value/one?","sicmutils.numsymb/add","cljs.core.sequence","cljs.core/seq","cljs.core.concat","sicmutils.generic/add","sicmutils.numsymb/sub","sicmutils.generic/sub","sicmutils.numsymb/negate","sicmutils.numsymb/mul","sicmutils.generic/mul","sicmutils.numsymb/div","sicmutils.generic/div","sicmutils.util/arithmetic-ex","sicmutils.numsymb/invert","sicmutils.numsymb/modulo","sicmutils.numsymb/remainder","sicmutils.numsymb/floor","sicmutils.generic/floor","sicmutils.numsymb/ceiling","sicmutils.generic/ceiling","sicmutils.numsymb/integer-part","sicmutils.generic/integer-part","sicmutils.numsymb/fractional-part","sicmutils.generic/fractional-part","sicmutils.numsymb/pi","Math/PI","sicmutils.numsymb/pi-over-4","sicmutils.numsymb/two-pi","sicmutils.numsymb/pi-over-2","sicmutils.numsymb/n:zero-mod-pi?","sicmutils.value/almost-integral?","sicmutils.numsymb/n:pi-over-2-mod-2pi?","sicmutils.numsymb/n:-pi-over-2-mod-2pi?","sicmutils.numsymb/n:pi-mod-2pi?","sicmutils.numsymb/n:pi-over-2-mod-pi?","sicmutils.numsymb/n:zero-mod-2pi?","sicmutils.numsymb/n:-pi-over-4-mod-pi?","sicmutils.numsymb/n:pi-over-4-mod-pi?","sicmutils.numsymb/zero-mod-pi?","sicmutils.numsymb/pi-over-2-mod-2pi?","sicmutils.numsymb/-pi-over-2-mod-2pi?","sicmutils.numsymb/pi-mod-2pi?","sicmutils.numsymb/pi-over-2-mod-pi?","sicmutils.numsymb/zero-mod-2pi?","sicmutils.numsymb/-pi-over-4-mod-pi?","sicmutils.numsymb/pi-over-4-mod-pi?","sicmutils.numsymb/sin","Math/sin","sicmutils.numsymb/cos","Math/cos","sicmutils.numsymb/tan","sicmutils.util/illegal","Math/tan","sicmutils.numsymb/csc","sicmutils.generic/csc","sicmutils.numsymb/sec","sicmutils.generic/sec","sicmutils.numsymb/asin","sicmutils.generic/asin","sicmutils.numsymb/acos","sicmutils.generic/acos","var_args","G__82463","sicmutils.numsymb/atan","js/Error","y","sicmutils.generic/atan","sicmutils.numsymb.atan","sicmutils.value/exact-zero?","sicmutils.generic/negative?","sicmutils.util.logic.assume_BANG_","sicmutils.numsymb/cosh","sicmutils.generic/cosh","sicmutils.numsymb/sinh","sicmutils.generic/sinh","sicmutils.numsymb/tanh","sicmutils.numsymb/coth","sicmutils.numsymb/sech","sicmutils.numsymb/csch","sicmutils.numsymb/acot","sicmutils.numsymb/abs","sicmutils.generic/abs","sicmutils.numsymb/gcd","sicmutils.generic/gcd","sicmutils.numsymb/lcm","sicmutils.generic/lcm","sicmutils.numsymb/sqrt","sicmutils.generic/sqrt","sicmutils.numsymb/log","sicmutils.generic/log","sicmutils.numsymb/exp","sicmutils.generic/exp","sicmutils.numsymb/expt","e","sicmutils.generic/expt","cljs.core/integer?","cljs.core/even?","G__82488","G__82489","cljs.core/quot","G__82491","G__82492","G__82493","G__82494","sicmutils.numsymb/conjugate-transparent-operators","sicmutils.numsymb/make-rectangular","r","i","sicmutils.value/real?","sicmutils.generic/make-rectangular","sicmutils.complex/I","sicmutils.numsymb/make-polar","m","sicmutils.generic/make-polar","sicmutils.numsymb/conjugate","z","sicmutils.generic/conjugate","cljs.core/contains?","cljs.core/cons","cljs.core.map","sicmutils.numsymb/magnitude","sicmutils.generic/magnitude","sicmutils.numsymb/real-part","sicmutils.generic/real-part","sicmutils.numsymb/imag-part","sicmutils.generic/imag-part","sicmutils.complex.complex","sicmutils.numsymb/angle","sicmutils.generic/angle","sicmutils.numsymb/dot-product","z1","z2","sicmutils.generic/dot-product","sicmutils.numsymb/derivative","pow","cljs.core.nth","sicmutils.numsymb/sym:and","l","sicmutils.numsymb/sym:or","sicmutils.numsymb/sym:not","cljs.core/boolean?","sicmutils.numsymb/sym:bin=","num-l?","num-r?","sicmutils.value/=","G__82546","sicmutils.numsymb/sym:=","args-arr__4885__auto__","len__4864__auto__","i__4865__auto__","argseq__4886__auto__","cljs.core/IndexedSeq","seq82542","G__82544","cljs.core/next","G__82545","self__4851__auto__","_","more","xs","pairs","cljs.core.partition","cljs.core.reduce","p__82547","vec__82548","acc","temp__5751__auto__","eq","cljs.core/reduced","sicmutils.numsymb/sym:zero?","sicmutils.numsymb/sym:one?","p1__82556#","p1__82557#","sicmutils.numsymb/symbolic-operator-table","sicmutils.util.aggregate.monoid","cljs.core/false?","cljs.core/true?","sicmutils.util.aggregate.group","sicmutils.numsymb/symbolic-operator"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.numsymb\n  \"Implementations of the generic operations for numeric types that have\n  optimizations available, and for the general symbolic case.\"\n  (:refer-clojure :exclude [abs])\n  (:require [sicmutils.complex :as c]\n            [sicmutils.euclid]\n            [sicmutils.generic :as g]\n            [sicmutils.numbers]\n            [sicmutils.ratio]\n            [sicmutils.util :as u]\n            [sicmutils.util.aggregate :as ua]\n            [sicmutils.util.logic :as ul]\n            [sicmutils.value :as v]))\n\n(def ^{:dynamic true\n       :doc \"When bound to a simplifier (a function from symbolic expression =>\n  symbolic expression), this simplifier will be called after every operation\n  performed on `sicmutils.abstract.number` instances.\n\n  `nil` by default.\"}\n  *incremental-simplifier* nil)\n\n(def operator first)\n(def operands rest)\n\n(defn- is-expression?\n  \"Returns a function which will decide if its argument is a sequence commencing\n  with s.\"\n  [s]\n  (fn [x]\n    (and (seq? x)\n         (= (operator x) s))))\n\n(def sum? (is-expression? '+))\n(def product? (is-expression? '*))\n(def sqrt? (is-expression? 'sqrt))\n(def expt? (is-expression? 'expt))\n(def quotient? (is-expression? '/))\n(def arctan? (is-expression? 'atan))\n(def derivative? (is-expression? g/derivative-symbol))\n\n(defn iterated-derivative? [expr]\n  (and (seq? expr)\n       (expt? (operator expr))\n       (= g/derivative-symbol\n          (second\n           (operator expr)))))\n\n(defn- with-exactness-preserved\n  \"Returns a wrapper around f that attempts to preserve exactness if the input is\n  numerically exact, else passes through to f.\"\n  [f sym-or-fn]\n  (let [process (if (symbol? sym-or-fn)\n                  (fn [s] (list sym-or-fn s))\n                  sym-or-fn)]\n    (fn [s]\n      (if (v/number? s)\n        (let [q (f s)]\n          (if-not (v/exact? s)\n            q\n            (if (v/exact? q)\n              q\n              (process s))))\n        (process s)))))\n\n(defn- mod-rem\n  \"Modulo and remainder are very similar, so can benefit from a shared set of\n  simplifications.\"\n  [a b f sym]\n  (cond (and (v/number? a) (v/number? b)) (f a b)\n        (= a b) 0\n        (v/zero? a) 0\n        (v/one? b) a\n        :else (list sym a b)))\n\n;; these are without constructor simplifications!\n\n(defn- add [a b]\n  (cond (and (v/number? a) (v/number? b)) (g/add a b)\n        (v/number? a) (cond (v/zero? a) b\n                            (sum? b) `(~'+ ~a ~@(operands b))\n                            :else `(~'+ ~a ~b))\n        (v/number? b) (cond (v/zero? b) a\n                            (sum? a) `(~'+ ~@(operands a) ~b)\n                            :else `(~'+ ~a ~b))\n        (sum? a) (cond (sum? b) `(~'+ ~@(operands a) ~@(operands b))\n                       :else `(~'+ ~@(operands a) ~b))\n        (sum? b) `(~'+ ~a ~@(operands b))\n        :else `(~'+ ~a ~b)))\n\n(defn- sub [a b]\n  (cond (and (v/number? a) (v/number? b)) (g/sub a b)\n        (v/number? a) (if (v/zero? a) `(~'- ~b) `(~'- ~a ~b))\n        (v/number? b) (if (v/zero? b) a `(~'- ~a ~b))\n        (= a b) 0\n        :else `(~'- ~a ~b)))\n\n(defn- negate [x] (sub 0 x))\n\n(defn- mul [a b]\n  (cond (and (v/number? a) (v/number? b)) (g/mul a b)\n        (v/number? a) (cond (v/zero? a) a\n                            (v/one? a) b\n                            (product? b) `(~'* ~a ~@(operands b))\n                            :else `(~'* ~a ~b))\n        (v/number? b) (cond (v/zero? b) b\n                            (v/one? b) a\n                            (product? a) `(~'* ~@(operands a) ~b)\n                            :else `(~'* ~a ~b))\n        (product? a) (cond (product? b) `(~'* ~@(operands a) ~@(operands b))\n                           :else `(~'* ~@(operands a) ~b))\n        (product? b) `(~'* ~a ~@(operands b))\n        :else `(~'* ~a ~b)))\n\n(defn- div [a b]\n  (cond (and (v/number? a) (v/number? b)) (g/div a b)\n        (v/number? a) (if (v/zero? a) a `(~'/ ~a ~b))\n        (v/number? b) (cond (v/zero? b) (u/arithmetic-ex \"division by zero\")\n                            (v/one? b) a\n                            :else `(~'/ ~a ~b))\n        :else `(~'/ ~a ~b)))\n\n(defn- invert [x] (div 1 x))\n\n(defn- modulo [a b]\n  (mod-rem a b modulo 'modulo))\n\n(defn- remainder [a b]\n  (mod-rem a b remainder 'remainder))\n\n(defn- floor [a]\n  (if (v/number? a)\n    (g/floor a)\n    (list 'floor a)))\n\n(defn- ceiling [a]\n  (if (v/number? a)\n    (g/ceiling a)\n    (list 'ceiling a)))\n\n(defn- integer-part [a]\n  (if (v/number? a)\n    (g/integer-part a)\n    (list 'integer-part a)))\n\n(defn- fractional-part [a]\n  (if (v/number? a)\n    (g/fractional-part a)\n    (list 'fractional-part a)))\n\n;; ## Trig Functions\n\n(def ^:private pi Math/PI)\n(def ^:private pi-over-4 (/ pi 4))\n(def ^:private two-pi (* 2 pi))\n(def ^:private pi-over-2 (* 2 pi-over-4))\n\n(defn ^:private n:zero-mod-pi? [x]\n  (v/almost-integral? (/ x pi)))\n\n(defn ^:private n:pi-over-2-mod-2pi? [x]\n  (v/almost-integral? (/ (- x pi-over-2 two-pi))))\n\n(defn ^:private n:-pi-over-2-mod-2pi? [x]\n  (v/almost-integral? (/ (+ x pi-over-2) two-pi)))\n\n(defn ^:private n:pi-mod-2pi? [x]\n  (v/almost-integral? (/ (- x pi) two-pi)))\n\n(defn ^:private n:pi-over-2-mod-pi? [x]\n  (v/almost-integral? (/ (- x pi-over-2) pi)))\n\n(defn ^:private n:zero-mod-2pi? [x]\n  (v/almost-integral? (/ x two-pi)))\n\n(defn ^:private n:-pi-over-4-mod-pi? [x]\n  (v/almost-integral? (/ (+ x pi-over-4) pi)))\n\n(defn ^:private n:pi-over-4-mod-pi? [x]\n  (v/almost-integral? (/ (- x pi-over-4) pi)))\n\n(def ^:no-doc zero-mod-pi? #{'-pi 'pi '-two-pi 'two-pi})\n(def ^:no-doc pi-over-2-mod-2pi? #{'pi-over-2})\n(def ^:no-doc -pi-over-2-mod-2pi? #{'-pi-over-2})\n(def ^:no-doc pi-mod-2pi? #{'-pi 'pi})\n(def ^:no-doc pi-over-2-mod-pi? #{'-pi-over-2 'pi-over-2})\n(def ^:no-doc zero-mod-2pi? #{'-two-pi 'two-pi})\n(def ^:no-doc -pi-over-4-mod-pi? #{'-pi-over-4})\n(def ^:no-doc pi-over-4-mod-pi? #{'pi-over-4 '+pi-over-4})\n\n(defn- sin\n  \"Implementation of sine that attempts to apply optimizations at the call site.\n  If it's not possible to do this (if the expression is symbolic, say), returns\n  a symbolic form.\"\n  [x]\n  (cond (v/number? x) (if (v/exact? x)\n                        (if (v/zero? x) 0 (list 'sin x))\n                        (cond (n:zero-mod-pi? x) 0\n                              (n:pi-over-2-mod-2pi? x) 1\n                              (n:-pi-over-2-mod-2pi? x) -1\n                              :else (Math/sin x)))\n        (symbol? x) (cond (zero-mod-pi? x) 0\n                          (pi-over-2-mod-2pi? x) 1\n                          (-pi-over-2-mod-2pi? x) -1\n                          :else (list 'sin x))\n        :else (list 'sin x)))\n\n(defn- cos\n  \"Implementation of cosine that attempts to apply optimizations at the call site.\n  If it's not possible to do this (if the expression is symbolic, say), returns\n  a symbolic form.\"\n  [x]\n  (cond (v/number? x) (if (v/exact? x)\n                        (if (v/zero? x) 1 (list 'cos x))\n                        (cond (n:pi-over-2-mod-pi? x) 0\n                              (n:zero-mod-2pi? x) 1\n                              (n:pi-mod-2pi? x) -1\n                              :else (Math/cos x)))\n        (symbol? x) (cond (pi-over-2-mod-pi? x) 0\n                          (zero-mod-2pi? x) 1\n                          (pi-mod-2pi? x) -1\n                          :else (list 'cos x))\n        :else (list 'cos x)))\n\n(defn- tan\n  \"Implementation of tangent that attempts to apply optimizations at the call site.\n  If it's not possible to do this (if the expression is symbolic, say), returns\n  a symbolic form.\"\n  [x]\n  (cond (v/number? x) (if (v/exact? x)\n                        (if (v/zero? x) 0 (list 'tan x))\n                        (cond (n:zero-mod-pi? x) 0\n                              (n:pi-over-4-mod-pi? x) 1\n                              (n:-pi-over-4-mod-pi? x) -1\n                              (n:pi-over-2-mod-pi? x) (u/illegal \"Undefined: tan\")\n                              :else (Math/tan x)))\n        (symbol? x) (cond (zero-mod-pi? x) 0\n                          (pi-over-4-mod-pi? x) 1\n                          (-pi-over-4-mod-pi? x) -1\n                          (pi-over-2-mod-pi? x) (u/illegal \"Undefined: tan\")\n                          :else (list 'tan x))\n        :else (list 'tan x)))\n\n(defn- csc [x]\n  (if (v/number? x)\n    (if-not (v/exact? x)\n      (g/csc x)\n      (if (v/zero? x)\n        (u/illegal (str \"Zero argument -- g/csc\" x))\n        `(~'/ 1 ~(sin x))))\n    `(~'/ 1 ~(sin x))))\n\n(defn- sec [x]\n  (if (v/number? x)\n    (if-not (v/exact? x)\n      (g/sec x)\n      (if (v/zero? x)\n        1\n        `(~'/ 1 ~(cos x))))\n    `(~'/ 1 ~(cos x))))\n\n(defn- asin [x]\n  (if (v/number? x)\n    (if-not (v/exact? x)\n      (g/asin x)\n      (if (v/zero? x)\n        0\n        (list 'asin x)))\n    (list 'asin x)))\n\n(defn- acos [x]\n  (if (v/number? x)\n    (if-not (v/exact? x)\n      (g/acos x)\n      (if (v/one? x)\n        0\n        (list 'acos x)))\n    (list 'acos x)))\n\n(defn- atan\n  ([y]\n   (if (v/number? y)\n     (if-not (v/exact? y)\n       (g/atan y)\n       (if (v/zero? y)\n         0\n         (list 'atan y)))\n     (list 'atan y)))\n  ([y x]\n   (cond (v/one? x) (atan y)\n\n         (v/exact-zero? y)\n         (if (v/number? x)\n           (if (g/negative? x) 'pi 0)\n           (and (ul/assume! `(~'non-negative? ~x) 'numsymb-atan)\n                0))\n\n         (v/exact-zero? x)\n         (if (v/number? y)\n           (if (g/negative? y)\n             '(- (/ pi 2))\n             '(/ pi 2))\n           (and (ul/assume! `(~'non-negative? ~y) 'numsymb-atan)\n                '(/ pi 2)))\n\n         (and (v/number? x)\n              (v/number? y)\n              (or (not (v/exact? x))\n                  (not (v/exact? y))))\n         (g/atan y x)\n\n         :else (list 'atan y x))))\n\n(defn- cosh [x]\n  (if (v/number? x)\n    (if-not (v/exact? x)\n      (g/cosh x)\n      (if (v/zero? x)\n        1\n        (list 'cosh x)))\n    (list 'cosh x)))\n\n(defn- sinh [x]\n  (if (v/number? x)\n    (if-not (v/exact? x)\n      (g/sinh x)\n      (if (v/zero? x)\n        0\n        (list 'sinh x)))\n    (list 'sinh x)))\n\n(defn- tanh [x]\n  (div (sinh x)\n       (cosh x)))\n\n(defn- coth [x]\n  (div (cosh x)\n       (sinh x)))\n\n(defn- sech [x]\n  (div 1 (cosh x)))\n\n(defn- csch [x]\n  (div 1 (sinh x)))\n\n(defn- acot [x]\n  (sub '(/ pi 2) (atan x)))\n\n(defn- abs\n  \"Symbolic expression handler for abs.\"\n  [x]\n  (if (v/number? x)\n    (g/abs x)\n    (list 'abs x)))\n\n(defn- gcd [a b]\n  (cond (and (v/number? a) (v/number? b)) (g/gcd a b)\n        (v/number? a) (cond (v/zero? a) b\n                            (v/one? a) 1\n                            :else (list 'gcd a b))\n        (v/number? b) (cond (v/zero? b) a\n                            (v/one? b) 1\n                            :else (list 'gcd a b))\n        (= a b) a\n        :else (list 'gcd a b)))\n\n(defn- lcm [a b]\n  (cond (and (v/number? a) (v/number? b)) (g/lcm a b)\n        (v/number? a) (cond (v/zero? a) 0\n                            (v/one? a) b\n                            :else (list 'lcm a b))\n        (v/number? b) (cond (v/zero? b) 0\n                            (v/one? b) a\n                            :else (list 'lcm a b))\n        (= a b) a\n        :else (list 'lcm a b)))\n\n(def sqrt\n  \"Square root implementation that attempts to preserve exact numbers wherever\n  possible. If the incoming value is not exact, simply computes sqrt.\"\n  (with-exactness-preserved g/sqrt 'sqrt))\n\n(def ^:private log\n  \"Attempts to preserve exact precision if the argument is exact; else, evaluates\n  symbolically or numerically.\"\n  (with-exactness-preserved g/log 'log))\n\n(def ^:private exp\n  \"Attempts to preserve exact precision if the argument is exact; else, evaluates\n  symbolically or numerically.\"\n  (with-exactness-preserved g/exp 'exp))\n\n(defn- expt\n  \"Attempts to preserve exact precision if either argument is exact; else,\n  evaluates symbolically or numerically.\"\n  [b e]\n  (cond (and (v/number? b) (v/number? e)) (g/expt b e)\n        (v/number? b) (cond (v/one? b) 1\n                            :else `(~'expt ~b ~e))\n        (v/number? e) (cond (v/zero? e) 1\n                            (v/one? e) b\n                            (and (integer? e) (even? e) (sqrt? b))\n                            (expt (first (operands b)) (quot e 2))\n                            (and (expt? b)\n                                 (v/number? (second (operands b)))\n                                 (integer? (* (second (operands b)) e)))\n                            (expt (first (operands b))\n                                  (* (second (operands b)) e))\n                            (< e 0) (invert (expt b (- e)))\n                            :else `(~'expt ~b ~e))\n        :else `(~'expt ~b ~e)))\n\n;; ## Complex Operations\n\n(def ^:private conjugate-transparent-operators\n  #{'negate 'invert 'square 'cube\n    'sqrt\n    'exp 'exp2 'exp10\n    'log 'log2 'log10\n    'sin 'cos 'tan 'sec 'csc\n    'asin 'acos 'atan\n    'sinh 'cosh 'tanh 'sech 'csch\n    '+ '- '* '/ 'expt 'up 'down})\n\n(defn- make-rectangular [r i]\n  (cond (v/exact-zero? i) r\n\n        (and (v/real? r) (v/real? i))\n        (g/make-rectangular r i)\n\n        :else (add r (mul c/I i))))\n\n(defn- make-polar [m a]\n  (cond (v/exact-zero? m) m\n        (v/exact-zero? a) m\n        (and (v/real? m) (v/real? a)) (g/make-polar m a)\n        :else (mul m (add\n                      (cos a)\n                      (mul c/I (sin a))))))\n\n(defn- conjugate [z]\n  (cond (v/number? z) (g/conjugate z)\n        (and (seq? z)\n             (contains? conjugate-transparent-operators\n                        (operator z)))\n        (cons (operator z) (map conjugate (operands z)))\n        :else (list 'conjugate z)))\n\n(def ^:private magnitude\n  (with-exactness-preserved g/magnitude\n    (fn [a] (sqrt (mul (conjugate a) a)))))\n\n(defn- real-part [z]\n  (if (v/number? z)\n    (g/real-part z)\n    (mul (g/div 1 2)\n         (add z (conjugate z)))))\n\n(defn- imag-part [z]\n  (if (v/number? z)\n    (g/imag-part z)\n    (mul (g/div 1 2)\n         (mul (c/complex 0 -1)\n              (sub z (conjugate z))))))\n\n(def ^:private angle\n  (with-exactness-preserved g/angle\n    (fn [z]\n      (atan (imag-part z)\n            (real-part z)))))\n\n(defn dot-product\n  \"Returns the symbolic dot product of the two supplied numbers `z1` and `z2`.\n\n  If both are numbers, defers to [[sicmutils.generic/dot-product]]. Else,\n  returns\n\n  $$\\\\Re(z_1)\\\\Re(z_2) + \\\\Im(z_1)\\\\Im(z_2)$$\"\n  [z1 z2]\n  (cond (and (v/number? z1) (v/number? z2))\n        (g/dot-product z1 z2)\n\n        (v/real? z1) (mul z1 (real-part z2))\n        (v/real? z2) (mul (real-part z1) z2)\n        :else (add\n               (mul (real-part z1)\n                    (real-part z2))\n               (mul (imag-part z1)\n                    (imag-part z2)))))\n\n(defn ^:no-doc derivative\n  \"Returns the symbolic derivative of the expression `expr`, which should\n  represent a function like `f`.\n\n  If the expression is already a derivative like `(D f)` or `((expt D 2) f)`,\n  `derivative` will increase the power of the exponent.\n\n  For example:\n\n  ```clojure\n  (derivative 'f)              ;;=> (D f)\n  (derivative '(D f))          ;;=> ((expt D 2) f)\n  (derivative '((expt D 2) f)) ;;=> ((expt D 3) f)\n  ```\"\n  [expr]\n  (cond (derivative? expr)\n        (let [f (first (operands expr))]\n          (list (expt g/derivative-symbol 2)\n                f))\n\n        (iterated-derivative? expr)\n        (let [pow (nth (operator expr) 2)\n              f   (first (operands expr))]\n          (list (expt g/derivative-symbol (inc pow))\n                f))\n        :else\n        (list g/derivative-symbol expr)))\n\n;; ## Boolean Operations\n\n(defn- sym:and\n  \"For symbolic arguments, returns a symbolic expression representing the logical\n  conjuction of `l` and `r`.\n\n  If either side is `true?`, returns the other side. If either side is `false?`,\n  returns `false`.\"\n  [l r]\n  (cond (true? l)  r\n        (false? l) l\n        (true? r)  l\n        (false? r) r\n        (= l r)    r\n        :else (list 'and l r)))\n\n(defn- sym:or\n  \"For symbolic arguments, returns a symbolic expression representing the logical\n  disjunction of `l` and `r`.\n\n  If either side is `true?`, returns `true`. If either side is `false?`,\n  returns the other side.\"\n  [l r]\n  (cond (true? l)   l\n        (false? l)  r\n        (true?  r)  r\n        (false?  r) l\n        (= l r)     r\n        :else (list 'or l r)))\n\n(defn- sym:not\n  \"For symbolic `x`, returns a symbolic expression representing the logical\n  negation of `x`. For boolean `x`, returns the negation of `x`.\"\n  [x]\n  (if (boolean? x)\n    (not x)\n    (list 'not x)))\n\n(defn- sym:bin= [l r]\n  (let [num-l? (v/number? l)\n        num-r? (v/number? r)]\n    (cond (and num-l? num-r?) (v/= l r)\n          (or num-l? num-r?)  false\n          (= l r)             true\n          :else (list '= l r))))\n\n(defn- sym:=\n  ([] true)\n  ([_] true)\n  ([x y] (sym:bin= x y))\n  ([x y & more]\n   (let [xs    (cons x (cons y more))\n         pairs (partition 2 1 xs)]\n     (reduce (fn [acc [x y]]\n               (if-let [eq (sym:bin= x y)]\n                 (sym:and acc eq)\n                 (reduced false)))\n             true\n             pairs))))\n\n(defn- sym:zero? [x]\n  (if (v/number? x)\n    (v/zero? x)\n    (list '= 0 x)))\n\n(defn- sym:one? [x]\n  (if (v/number? x)\n    (v/one? x)\n    (list '= 1 x)))\n\n;; ## Table\n\n(def ^:private symbolic-operator-table\n  {'zero? sym:zero?\n   'one? sym:one?\n   'identity? sym:one?\n   '= sym:=\n   'not sym:not\n   'and (ua/monoid sym:and true false?)\n   'or (ua/monoid sym:or false true?)\n   'negate negate\n   'invert invert\n   '+ (ua/monoid add 0)\n   '- (ua/group sub add negate 0)\n   '* (ua/monoid mul 1 v/zero?)\n   '/ (ua/group div mul invert 1 v/zero?)\n   'modulo modulo\n   'remainder remainder\n   'gcd (ua/monoid gcd 0)\n   'lcm (ua/monoid lcm 1 v/zero?)\n   'floor floor\n   'ceiling ceiling\n   'integer-part integer-part\n   'fractional-part fractional-part\n   'sin sin\n   'cos cos\n   'tan tan\n   'sec sec\n   'csc csc\n   'asin asin\n   'acos acos\n   'acot acot\n   'atan atan\n   'sinh sinh\n   'cosh cosh\n   'tanh tanh\n   'coth coth\n   'sech sech\n   'csch csch\n   'cube #(expt % 3)\n   'square #(expt % 2)\n   'abs abs\n   'sqrt sqrt\n   'log log\n   'exp exp\n   'expt expt\n   'make-rectangular make-rectangular\n   'make-polar make-polar\n   'real-part real-part\n   'imag-part imag-part\n   'conjugate conjugate\n   'magnitude magnitude\n   'dot-product dot-product\n   'inner-product dot-product\n   'angle angle\n   'derivative derivative})\n\n(defn symbolic-operator\n  \"Given a symbol (like `'+`) returns an applicable operator if there is a\n  corresponding symbolic operator construction available.\"\n  [s]\n  (symbolic-operator-table s))\n"]}