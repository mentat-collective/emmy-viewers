{"version":3,"sources":["sicmutils/sr/frames.cljc"],"mappings":";AA0BA,0CAAA,1CAAMC,4FAAqBC,MAAMC;AAAjC,AAAA,GACS,AAACC,8BAAMD;AADhB;AAAA,AAAA,MAAA,KAAAH,MAAA;;;AAAA,GAES,yEAAA,zEAACK,6CAAE,AAACC,gBAAMH;AAFnB;AAAA,AAAA,MAAA,KAAAH,MAAA;;;wFAGMG,lDACA,6EAAA,gHAAA,7LAACI,6DAAUC,nGACX,OAACC,kOAASP;;AAEhB,4CAAA,5CAAMQ,gGAAiBC;AAAvB,AACE,OAAA,qKAAA,vBAAmB,AAACC,eAAKD;;AAE3B,8BAAA,9BAAME,oEAASF;AAAf,AACE,OAACG,oCACA,AAACC,qCAAeJ;;AAInB,4CAAA,qEAAAK,jHAAOI,gGACJC,eAAeC;AADlB,AAAA,IAAAL,cAAAD;IAAAC,kBAAA,AAAAC,4BAAAD;sBAAA,AAAAE,4CAAAF,gBAAA,9EAC4BM;SAD5B,AAAAJ,4CAAAF,gBAAA,jEAC4CO;aAD5C,AAAAL,4CAAAF,gBAAA,rEAC+CQ;AAD/C,AAAA,GAES,AAACpB,6CAAE,AAACU,qCAAeU,QAAQJ;AAFpC;AAAA,AAAA,MAAA,KAAArB,MAAA;;;AAGE,qEAAUW;AAAV,AAAA,oBACS,AAACD,0CAAgBC;AAD1B;AAAA,AAAA,MAAA,KAAAX,MAAA;;;AAEE,OAAC,AAAC0B,kCAAQL,gBACT,AAACpB,wCAAoBoB,eACA,AAACM,uDAAE,AAAC,AAACC,kCAAiBL,gBAAgBC,IAClCb,QACDc;;;AAE7B,4CAAA,8EAAAI,1HAAOE,gGACJV,eAAeW;AADlB,AAAA,IAAAF,cAAAD;IAAAC,kBAAA,AAAAZ,4BAAAY;sBAAA,AAAAX,4CAAAW,gBAAA,9EAEWP;SAFX,AAAAJ,4CAAAW,gBAAA,jEAE2BN;aAF3B,AAAAL,4CAAAW,gBAAA,rEAE8BL;AAF9B,AAAA,GAGS,AAACpB,6CAAE,AAACU,qCAAeU,QAAQJ;AAHpC;AAAA,AAAA,MAAA,KAAArB,MAAA;;;AAIE,qEAAUiC;AAAV,AAAA,oBACS,AAACC,sCAAUD;AADpB;AAAA,AAAA,MAAA,KAAAjC,MAAA;;;AAEE,IAAMW,SAAO,AAAC,AAACiB,kCAAiB,AAACO,kDAAEZ,iBAAiBC,IACtC,AAACW,kDAAE,AAAC,AAACC,kCAAQf,gBAAgBY,OAC1BR;AAFjB,AAGE,OAACxB,wCAAoB+B,WAAWrB;;;AAGtC,IAAM0B,cAAK,AAACC,qCAAelB,0CAAmBW;AAA9C,AACE,oCAAA,pCAAMQ,gFAAeC,KAAKnB,eAAeE,gBAAgBkB,SAAShB;AAAlE,AACE,uCAAA,2CAAA,4FAAA,yDAAA,hOAACY,YAAKG,KAAKnB,sIACaE,gEACbkB,kEACIhB;;AAInB,uCAAA,vCAAMiB,sFAAkBpB,EAAEU,WAAWV;AAArC,AAEE,kBAAKX;AAAL,AAAA,oBACS,AAACD,0CAAgBC;AAD1B;AAAA,AAAA,MAAA,KAAAX,MAAA;;;AAAA,GAES,AAACK,6CAAE2B,WAAW,AAACjB,qCAAeJ;AAFvC;AAAA,AAAA,MAAA,KAAAX,MAAA;;;AAGE,OAAC2C,oCAAchC;;;AAEnB,uCAAA,vCAAMiC,sFAAkBtB,EAAEU,WAAWV;AAArC,AACE,kBAAKW;AAAL,AAAA,oBACS,AAACC,sCAAUD;AADpB;AAAA,AAAA,MAAA,KAAAjC,MAAA;;;AAEE,OAACC,wCAAoB+B,WAAWC;;;AAEpC,AAAKY,uCACH,AAACP,qCAAeI,qCAAiBE;AAEnC,AAAKE,gCACH,qCAAA,AAAA,mEAAA,AAAA,xGAACD;AAEH,sCAAA,tCAAME,oFAAiB7C;AAAvB,AACE,OAAA,0GAAkB,AAAC8C,gCAAU9C;;AAE/B,gCAAA,hCAAM+C,wEAAK/C;AAAX,AACE,OAAA,8EAAK,AAAC8C,gCAAU9C;;AAElB,wCAAA,xCAAMgD,wFAAmBhD;AAAzB,AACE,OAAA,uFAAS,AAAC8C,gCAAU9C;;AAEtB,qCAAA,rCAAMiD,kFAAUC,WAAKC;AAArB,AACE,OAAAC,wDAAG,AAAC3B,uDAAEyB,WAAKC,YACR,uDAAA,vDAAC1B,2DAAI,AAAC4B,uDAAEH,WAAKC;;AAElB;;;qCAAA,rCAAMG,kFAEHC,GAAGC;AAFN,AAGE,OAAAJ,wDAAG,AAAC3B,uDAAE8B,GAAGC,IACN,uDAAA,vDAAC/B,2DAAI,AAAC4B,uDAAE,AAAAD,2DAAA,AAAA,HAAGG,uDACH,AAAAH,2DAAA,AAAA,HAAGI","names":["js/Error","sicmutils.sr.frames/make-SR-coordinates","frame","four-tuple","sicmutils.structure/up?","cljs.core._EQ_","cljs.core/count","cljs.core.vary_meta","cljs.core/assoc","sicmutils.calculus.frame/claim","sicmutils.sr.frames/SR-coordinates?","coords","cljs.core/meta","sicmutils.sr.frames/SR-name","sicmutils.calculus.frame/frame-name","sicmutils.calculus.frame/frame-owner","p__103663","map__103664","cljs.core/--destructure-map","cljs.core.get","sicmutils.sr.frames/coordinates->event","ancestor-frame","_","boost-direction","vc","origin","sicmutils.calculus.manifold/point","sicmutils.generic._PLUS_","sicmutils.sr.boost/general-boost2","p__103667","map__103668","sicmutils.sr.frames/event->coordinates","this-frame","event","sicmutils.calculus.frame/event?","sicmutils.generic._","sicmutils.calculus.manifold/chart","make","sicmutils.calculus.frame/frame-maker","sicmutils.sr.frames/make-SR-frame","name","v-over-c","sicmutils.sr.frames/base-frame-point","sicmutils.calculus.frame/make-event","sicmutils.sr.frames/base-frame-chart","sicmutils.sr.frames/base-frame-maker","sicmutils.sr.frames/the-ether","sicmutils.sr.frames/boost-direction","sicmutils.calculus.frame/params","sicmutils.sr.frames/v:c","sicmutils.sr.frames/coordinate-origin","sicmutils.sr.frames/add-v:cs","v1:c","v2:c","sicmutils.generic._SLASH_","sicmutils.generic._STAR_","sicmutils.sr.frames/add-velocities","v1","v2"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.sr.frames\n  (:refer-clojure :exclude [+ - * /])\n  (:require [sicmutils.calculus.frame :as cf]\n            [sicmutils.calculus.manifold :as m]\n            [sicmutils.generic :as g :refer [+ - * /]]\n            [sicmutils.sr.boost :as b]\n            [sicmutils.structure :as s]))\n\n;; ## Special-relativity frames\n;;\n;; A frame is defined by a Poincare transformation from a given background\n;; 4-space frame (the \"ancestor-frame\"). The transformation is specified by a\n;; boost magnitude and a unit-vector boost direction, relative to the ancestor\n;; frame, and the position of the origin of the frame being defined in the\n;; ancestor frame.\n\n;; The events are absolute, in that it is always possible to compare them to\n;; determine if two are the same. They will be represented with coordinates\n;; relative to some arbitrary absolute frame,\n;; \"the-ether\".\n;;\n;; To keep us from going nuts, an SR frame has a name, which it uses to label\n;; coordinates in its frame.\n\n(defn make-SR-coordinates [frame four-tuple]\n  {:pre [(s/up? four-tuple)\n         (= (count four-tuple) 4)]}\n  (-> four-tuple\n      (vary-meta assoc ::SR-coordinates? true)\n      (cf/claim frame)))\n\n(defn SR-coordinates? [coords]\n  (::SR-coordinates? (meta coords) false))\n\n(defn SR-name [coords]\n  (cf/frame-name\n   (cf/frame-owner coords)))\n\n;; ### SR frames\n\n(defn- coordinates->event\n  [ancestor-frame _ {:keys [boost-direction vc origin]}]\n  {:pre [(= (cf/frame-owner origin) ancestor-frame)]}\n  (fn c->e [coords]\n    {:pre [(SR-coordinates? coords)]}\n    ((m/point ancestor-frame)\n     (make-SR-coordinates ancestor-frame\n                          (+ ((b/general-boost2 boost-direction vc)\n                              coords)\n                             origin)))))\n\n(defn- event->coordinates\n  [ancestor-frame this-frame\n   {:keys [boost-direction vc origin]}]\n  {:pre [(= (cf/frame-owner origin) ancestor-frame)]}\n  (fn e->c [event]\n    {:pre [(cf/event? event)]}\n    (let [coords ((b/general-boost2 (- boost-direction) vc)\n                  (- ((m/chart ancestor-frame) event)\n                     origin))]\n      (make-SR-coordinates this-frame coords))))\n\n\n(let [make (cf/frame-maker coordinates->event event->coordinates)]\n  (defn make-SR-frame [name ancestor-frame boost-direction v-over-c origin]\n    (make name ancestor-frame\n          {:boost-direction boost-direction\n           :vc v-over-c\n           :origin origin})))\n\n;; ### The background frame\n\n(defn base-frame-point [_ this-frame _]\n  #_{:clj-kondo/ignore [:redundant-fn-wrapper]}\n  (fn [coords]\n    {:pre [(SR-coordinates? coords)\n           (= this-frame (cf/frame-owner coords))]}\n    (cf/make-event coords)))\n\n(defn base-frame-chart [_ this-frame _]\n  (fn [event]\n    {:pre [(cf/event? event)]}\n    (make-SR-coordinates this-frame event)))\n\n(def base-frame-maker\n  (cf/frame-maker base-frame-point base-frame-chart))\n\n(def the-ether\n  (base-frame-maker 'the-ether 'the-ether))\n\n(defn boost-direction [frame]\n  (:boost-direction (cf/params frame)))\n\n(defn v:c [frame]\n  (:vc (cf/params frame)))\n\n(defn coordinate-origin [frame]\n  (:origin (cf/params frame)))\n\n(defn add-v:cs [v1:c v2:c]\n  (/ (+ v1:c v2:c)\n     (+ 1 (* v1:c v2:c))))\n\n(defn add-velocities\n  \"velocities must be in meters/second, since we don't yet have units support.\"\n  [v1 v2]\n  (/ (+ v1 v2)\n     (+ 1 (* (/ v1 'C)\n             (/ v2 'C)))))\n"]}