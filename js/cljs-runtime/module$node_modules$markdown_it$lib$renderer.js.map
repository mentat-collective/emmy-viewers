{
"version":3,
"file":"module$node_modules$markdown_it$lib$renderer.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/renderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$renderer\"] = function(global,require,module,exports) {\n/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      langAttrs = '',\n      highlighted, i, arr, tmpAttrs, tmpToken;\n\n  if (info) {\n    arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    } else if (tokens[i].type === 'softbreak') {\n      result += '\\n';\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Renderer","rules","assign","default_rules","unescapeAll","escapeHtml","default_rules.code_inline","tokens","idx","options","env","slf","renderAttrs","token","content","default_rules.code_block","default_rules.fence","info","trim","langAttrs","langName","arr","split","slice","join","highlighted","highlight","indexOf","i","attrIndex","tmpAttrs","attrs","push","langPrefix","tmpToken","default_rules.image","renderInlineAsText","children","renderToken","default_rules.hardbreak","xhtmlOut","default_rules.softbreak","breaks","default_rules.text","default_rules.html_block","default_rules.html_inline","prototype","Renderer.prototype.renderAttrs","l","result","length","Renderer.prototype.renderToken","needLf","hidden","block","nesting","tag","nextToken","type","renderInline","Renderer.prototype.renderInline","len","Renderer.prototype.renderInlineAsText","render","Renderer.prototype.render"]
}
