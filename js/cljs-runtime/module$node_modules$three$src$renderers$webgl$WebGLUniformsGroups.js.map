{
"version":3,
"file":"module$node_modules$three$src$renderers$webgl$WebGLUniformsGroups.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/three/src/renderers/webgl/WebGLUniformsGroups.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$renderers$webgl$WebGLUniformsGroups\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLUniformsGroups = WebGLUniformsGroups;\n\nfunction WebGLUniformsGroups(gl, info, capabilities, state) {\n  let buffers = {};\n  let updateList = {};\n  let allocatedBindingPoints = [];\n  const maxBindingPoints = capabilities.isWebGL2 ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0; // binding points are global whereas block indices are per shader program\n\n  function bind(uniformsGroup, program) {\n    const webglProgram = program.program;\n    state.uniformBlockBinding(uniformsGroup, webglProgram);\n  }\n\n  function update(uniformsGroup, program) {\n    let buffer = buffers[uniformsGroup.id];\n\n    if (buffer === undefined) {\n      prepareUniformsGroup(uniformsGroup);\n      buffer = createBuffer(uniformsGroup);\n      buffers[uniformsGroup.id] = buffer;\n      uniformsGroup.addEventListener('dispose', onUniformsGroupsDispose);\n    } // ensure to update the binding points/block indices mapping for this program\n\n\n    const webglProgram = program.program;\n    state.updateUBOMapping(uniformsGroup, webglProgram); // update UBO once per frame\n\n    const frame = info.render.frame;\n\n    if (updateList[uniformsGroup.id] !== frame) {\n      updateBufferData(uniformsGroup);\n      updateList[uniformsGroup.id] = frame;\n    }\n  }\n\n  function createBuffer(uniformsGroup) {\n    // the setup of an UBO is independent of a particular shader program but global\n    const bindingPointIndex = allocateBindingPointIndex();\n    uniformsGroup.__bindingPointIndex = bindingPointIndex;\n    const buffer = gl.createBuffer();\n    const size = uniformsGroup.__size;\n    const usage = uniformsGroup.usage;\n    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n    gl.bufferData(gl.UNIFORM_BUFFER, size, usage);\n    gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n    gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);\n    return buffer;\n  }\n\n  function allocateBindingPointIndex() {\n    for (let i = 0; i < maxBindingPoints; i++) {\n      if (allocatedBindingPoints.indexOf(i) === -1) {\n        allocatedBindingPoints.push(i);\n        return i;\n      }\n    }\n\n    console.error('THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.');\n    return 0;\n  }\n\n  function updateBufferData(uniformsGroup) {\n    const buffer = buffers[uniformsGroup.id];\n    const uniforms = uniformsGroup.uniforms;\n    const cache = uniformsGroup.__cache;\n    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n\n    for (let i = 0, il = uniforms.length; i < il; i++) {\n      const uniform = uniforms[i]; // partly update the buffer if necessary\n\n      if (hasUniformChanged(uniform, i, cache) === true) {\n        const value = uniform.value;\n        const offset = uniform.__offset;\n\n        if (typeof value === 'number') {\n          uniform.__data[0] = value;\n          gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);\n        } else {\n          if (uniform.value.isMatrix3) {\n            // manually converting 3x3 to 3x4\n            uniform.__data[0] = uniform.value.elements[0];\n            uniform.__data[1] = uniform.value.elements[1];\n            uniform.__data[2] = uniform.value.elements[2];\n            uniform.__data[3] = uniform.value.elements[0];\n            uniform.__data[4] = uniform.value.elements[3];\n            uniform.__data[5] = uniform.value.elements[4];\n            uniform.__data[6] = uniform.value.elements[5];\n            uniform.__data[7] = uniform.value.elements[0];\n            uniform.__data[8] = uniform.value.elements[6];\n            uniform.__data[9] = uniform.value.elements[7];\n            uniform.__data[10] = uniform.value.elements[8];\n            uniform.__data[11] = uniform.value.elements[0];\n          } else {\n            value.toArray(uniform.__data);\n          }\n\n          gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);\n        }\n      }\n    }\n\n    gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n  }\n\n  function hasUniformChanged(uniform, index, cache) {\n    const value = uniform.value;\n\n    if (cache[index] === undefined) {\n      // cache entry does not exist so far\n      if (typeof value === 'number') {\n        cache[index] = value;\n      } else {\n        cache[index] = value.clone();\n      }\n\n      return true;\n    } else {\n      // compare current value with cached entry\n      if (typeof value === 'number') {\n        if (cache[index] !== value) {\n          cache[index] = value;\n          return true;\n        }\n      } else {\n        const cachedObject = cache[index];\n\n        if (cachedObject.equals(value) === false) {\n          cachedObject.copy(value);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function prepareUniformsGroup(uniformsGroup) {\n    // determine total buffer size according to the STD140 layout\n    // Hint: STD140 is the only supported layout in WebGL 2\n    const uniforms = uniformsGroup.uniforms;\n    let offset = 0; // global buffer offset in bytes\n\n    const chunkSize = 16; // size of a chunk in bytes\n\n    let chunkOffset = 0; // offset within a single chunk in bytes\n\n    for (let i = 0, l = uniforms.length; i < l; i++) {\n      const uniform = uniforms[i];\n      const info = getUniformSize(uniform); // the following two properties will be used for partial buffer updates\n\n      uniform.__data = new Float32Array(info.storage / Float32Array.BYTES_PER_ELEMENT);\n      uniform.__offset = offset; //\n\n      if (i > 0) {\n        chunkOffset = offset % chunkSize;\n        const remainingSizeInChunk = chunkSize - chunkOffset; // check for chunk overflow\n\n        if (chunkOffset !== 0 && remainingSizeInChunk - info.boundary < 0) {\n          // add padding and adjust offset\n          offset += chunkSize - chunkOffset;\n          uniform.__offset = offset;\n        }\n      }\n\n      offset += info.storage;\n    } // ensure correct final padding\n\n\n    chunkOffset = offset % chunkSize;\n    if (chunkOffset > 0) offset += chunkSize - chunkOffset; //\n\n    uniformsGroup.__size = offset;\n    uniformsGroup.__cache = {};\n    return this;\n  }\n\n  function getUniformSize(uniform) {\n    const value = uniform.value;\n    const info = {\n      boundary: 0,\n      // bytes\n      storage: 0 // bytes\n\n    }; // determine sizes according to STD140\n\n    if (typeof value === 'number') {\n      // float/int\n      info.boundary = 4;\n      info.storage = 4;\n    } else if (value.isVector2) {\n      // vec2\n      info.boundary = 8;\n      info.storage = 8;\n    } else if (value.isVector3 || value.isColor) {\n      // vec3\n      info.boundary = 16;\n      info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes\n    } else if (value.isVector4) {\n      // vec4\n      info.boundary = 16;\n      info.storage = 16;\n    } else if (value.isMatrix3) {\n      // mat3 (in STD140 a 3x3 matrix is represented as 3x4)\n      info.boundary = 48;\n      info.storage = 48;\n    } else if (value.isMatrix4) {\n      // mat4\n      info.boundary = 64;\n      info.storage = 64;\n    } else if (value.isTexture) {\n      console.warn('THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.');\n    } else {\n      console.warn('THREE.WebGLRenderer: Unsupported uniform value type.', value);\n    }\n\n    return info;\n  }\n\n  function onUniformsGroupsDispose(event) {\n    const uniformsGroup = event.target;\n    uniformsGroup.removeEventListener('dispose', onUniformsGroupsDispose);\n    const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);\n    allocatedBindingPoints.splice(index, 1);\n    gl.deleteBuffer(buffers[uniformsGroup.id]);\n    delete buffers[uniformsGroup.id];\n    delete updateList[uniformsGroup.id];\n  }\n\n  function dispose() {\n    for (const id in buffers) {\n      gl.deleteBuffer(buffers[id]);\n    }\n\n    allocatedBindingPoints = [];\n    buffers = {};\n    updateList = {};\n  }\n\n  return {\n    bind: bind,\n    update: update,\n    dispose: dispose\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebGLUniformsGroups","gl","info","capabilities","state","prepareUniformsGroup","uniformsGroup","uniforms","offset","i","l","length","uniform","boundary","storage","isVector2","isVector3","isColor","isVector4","isMatrix3","isMatrix4","isTexture","console","warn","__data","Float32Array","BYTES_PER_ELEMENT","__offset","chunkOffset","chunkSize","remainingSizeInChunk","__size","__cache","onUniformsGroupsDispose","event","target","removeEventListener","index","allocatedBindingPoints","indexOf","__bindingPointIndex","splice","deleteBuffer","buffers","id","updateList","maxBindingPoints","isWebGL2","getParameter","MAX_UNIFORM_BUFFER_BINDINGS","bind","program","uniformBlockBinding","update","buffer","undefined","push","error","bindingPointIndex","createBuffer","size","usage","bindBuffer","UNIFORM_BUFFER","bufferData","bindBufferBase","addEventListener","updateUBOMapping","frame","render","cache","il","clone","cachedObject","equals","copy","elements","toArray","bufferSubData","dispose"]
}
