{"version":3,"sources":["nextjournal/log.cljc"],"mappings":"","names":[],"sourcesContent":["(ns nextjournal.log\n  (:refer-clojure :exclude [case])\n  #?(:cljs (:require-macros [nextjournal.log]))\n  (:require [lambdaisland.glogi :as glogi]\n            #?(:clj [io.pedestal.log :as pedestal])))\n\n\n#?(:clj\n   (do\n\n     (defmacro case [& {:keys [cljs clj]}]\n       `(if (:ns ~'&env) ~cljs ~clj))\n\n     (defmacro finest [& keyvals] ;; goog.log\n       (case :clj  (#'pedestal/log-expr &form :trace keyvals)\n             :cljs (#'glogi/log-expr &form :finest keyvals)))\n\n     (defmacro finer [& keyvals] ;; goog.log\n       (case :clj  (#'pedestal/log-expr &form :trace keyvals)\n             :cljs (#'glogi/log-expr &form :finer keyvals)))\n\n     (defmacro trace [& keyvals]\n       (case :clj  (#'pedestal/log-expr &form :trace keyvals)\n             :cljs (#'glogi/log-expr &form :trace keyvals)))\n\n     (defmacro fine [& keyvals] ;; goog.log\n       (case :clj  (#'pedestal/log-expr &form :debug keyvals)\n             :cljs (#'glogi/log-expr &form :fine keyvals)))\n\n     (defmacro debug [& keyvals]\n       (case :clj  (#'pedestal/log-expr &form :debug keyvals)\n             :cljs (#'glogi/log-expr &form :debug keyvals)))\n\n     (defmacro config [& keyvals] ;; goog.log\n       (case :clj  (#'pedestal/log-expr &form :info keyvals)\n             :cljs (#'glogi/log-expr &form :config keyvals)))\n\n     (defmacro info [& keyvals]\n       (case :clj  (#'pedestal/log-expr &form :info keyvals)\n             :cljs (#'glogi/log-expr &form :info keyvals)))\n\n     (defmacro warn [& keyvals]\n       (case :clj  (#'pedestal/log-expr &form :warn keyvals)\n             :cljs (#'glogi/log-expr &form :warn keyvals)))\n\n     (defmacro error [& keyvals]\n       (case :clj  (#'pedestal/log-expr &form :error keyvals)\n             :cljs (#'glogi/log-expr &form :error keyvals)))\n\n     (defmacro spy [expr]\n       (case :clj `(pedestal/spy ~expr)\n             :cljs `(glogi/spy ~expr)))\n\n     (defmacro with-context [ctx-map & body]\n       `(pedestal/with-context ~ctx-map ~@body))\n\n     (def format-name pedestal/format-name)\n     (def counter pedestal/counter)\n     (def gauge pedestal/gauge)\n     (def histogram pedestal/histogram)\n     (def meter pedestal/meter)))\n"]}