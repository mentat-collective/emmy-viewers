{"version":3,"sources":["net/cgrand/macrovich.cljc"],"mappings":"","names":[],"sourcesContent":["(ns net.cgrand.macrovich\n  (:refer-clojure :exclude [case replace]))\n\n(defmacro deftime\n  \"This block will only be evaluated at the correct time for macro definition, at other times its content\n   are removed.\n   For Clojure it always behaves like a `do` block.\n   For Clojurescript/JVM the block is only visible to Clojure.\n   For self-hosted Clojurescript the block is only visible when defining macros in the pseudo-namespace.\"\n  [& body]\n  (when #?(:clj (not (:ns &env)) :cljs (re-matches #\".*\\$macros\" (name (ns-name *ns*))))\n    `(do ~@body)))\n\n(defmacro usetime\n  \"This block content is not included at macro definition time.\n   For Clojure it always behaves like a `do` block.\n   For Clojurescript/JVM the block is only visible to Clojurescript.\n   For self-hosted Clojurescript the block is invisible when defining macros in the pseudo-namespace.\"\n  [& body]\n  (when #?(:clj true :cljs (not (re-matches #\".*\\$macros\" (name (ns-name *ns*)))))\n    `(do ~@body)))\n\n(defmacro case [& {:keys [cljs clj]}]\n  (if (contains? &env '&env)\n    `(if (:ns ~'&env) ~cljs ~clj)\n    (if #?(:clj (:ns &env) :cljs true)\n      cljs\n      clj)))\n\n(defmacro replace [map-or-maps & body]\n  (let [smap (if (map? map-or-maps) map-or-maps (reduce into {} map-or-maps))\n        walk (fn walk [form]\n               (cond\n                 (contains? smap form) (smap form)\n                 (map? form) (with-meta\n                               (into (empty form)\n                                 (for [[k v] form]\n                                   [(walk k) (walk v)]))\n                               (meta form))\n                 (seq? form) (with-meta\n                                (map walk form)\n                                (meta form))\n                 (coll? form) (with-meta\n                                (into (empty form) (map walk) form)\n                                (meta form))\n                 :else form))]\n    `(do ~@(map walk body))))\n\n"]}