{"version":3,"sources":["sicmutils/expression/render.cljc"],"mappings":";AAeA,oDAAA,pDAAOA,gHAAuBC;AAA9B,AACE,IAAMC,IAAE,6CAAA,7CAACC;AAAT,AACE;AAAA,AAAO,OAACC,+CAKE,iBAAMC,SAAW,AAACC,mDAAMJ,EAAEK,rDACT,6EAAA,7EACA,4FAAA,IAAA;AAFjB,AAGE,oDAAKN,+CAAEI;;;;AAEvB;;;;AAGEG,kDACA,AAACC,yDACA,AAAAC,wBAAA,AAAAC,yDAAA,KAAAC,eAAA,KAAA,AAAA,yDAAA,KAAAA,eAAA,KAAA,KAAAA,eAAA,KAAA,KAAAA,eAAA,KAAA,AAAA,kDAAA,KAAAA,eAAA,KAAA,AAAA,iDAAA,KAAAA,eAAA,KAAA,iFAAA,AAAA,4DAAA,AAAA,6DAAA,AAAA,4EAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,OAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,IAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,8BAAA,WAAAC,lCAA8CO;AAA9C,AAAA,IAAAN,mBAAA,AAAAC,cAAA,mFAAA,AAAAA,cAAA,mFAAA,AAAA,yDAAA,iBAAAC,gBAAA,AAAA;AAAA,AAAA,QAAAA,8CAAAA,4CAAAH,aAAAG,wBAAAH;KAAA,aAAA,iBAAAI,gBAAA,AAAA;AAAA,AAAA,QAAAA,8CAAAA,4CAAAJ,aAAAI,wBAAAJ;;AAAA,AAAA,IAAAK,mBAAAJ;AAAA,AAAA,GAAAI;AAAAA;;AAAA,OAAAC,4BAAAL;;sDACA,qBAAA,rBAACO;AAEJ;;;;;AAIEC,+CACA,AAAAC,kHAAA,AAAAb,wBAAA,AAAAC,yDAAA,KAAAC,eAAA,KAAA,AAAA,kDAAA,KAAAA,eAAA,KAAA,KAAA,KAAAA,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,8BAAA,WAAAY,lCACWJ;AADX,AAAA,IAAAN,mBAAA,AAAAC,cAAA,mFAAA,AAAA,qDAAA,iBAAAU,gBAAA,AAAA;AAAA,AAAA,QAAAA,8CAAAA,4CAAAD,aAAAC,wBAAAD;;AAAA,AAAA,IAAAN,mBAAAJ;AAAA,AAAA,GAAAI;AAAAA;;AAAA,OAAAC,4BAAAL;;IAAA,AAAAJ,wBAAA,AAAAC,yDAAA,KAAAC,eAAA,KAAA,AAAA,kDAAA,KAAAA,eAAA,KAAA,KAAA,KAAAA,eAAA,KAAA,AAAA,wDAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,8BAAA,WAAAc,lCAEYN;AAFZ,AAAA,IAAAN,mBAAA,AAAAC,cAAA,mFAAA,AAAA,qDAAA,AAAAA,cAAA,AAAAY,+CAAA,mFAAA,AAAA,0DAAA,iBAAAC,gBAAA,AAAA;AAAA,AAAA,QAAAA,8CAAAA,4CAAAF,aAAAE,wBAAAF;;AAAA,AAAA,IAAAR,mBAAAJ;AAAA,AAAA,GAAAI;AAAAA;;AAAA,OAAAC,4BAAAL;;;AAIF;;;;;;;iDAAA,yDAAAe,1GAAOG;AAAP,AAAA,IAAAF,cAAAD;UAAA,AAAAE,4CAAAD,YAAA,IAAA,lEAMIG;YANJ,AAAAF,4CAAAD,YAAA,IAAA,pEAMQI;SANRJ,LAMkBK;AANlB,AAOE,IAAMC,IAAE,AAACC,gBAAMF;AAAf,AACE,GAAM,EAAK,+CAAA,/CAACG,6CAAEF,YAAK,AAACG,gCAAYN;AAC1B,QAAA,iDAAUA;;AADhB,GAGM,2DAAA,zDAAK,+CAAA,/CAACK,6CAAEF,cACH,AAACG,gCAAYN,UACb,AAACM,gCAAYL;AAClB,yDAAA,LAAKD,qDAAQC;;AANnB;;;;AAQJ,AAAA;;;;;;;;;;;;;;;;;;;;kDAAA,0DAAAM,5GAAOM;AAAP,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,2BAAA,AAAA;AAAA,AAAA,IAAAC,yBAAA;;AAAA,AAAA,GAAA,CAAAA,yBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,gBAAA,CAAAA,yBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,qFAAAF;;;AAAA,AAAA,CAAA,uFAAA,WAAAG,lGAAOD;AAAP,AAAA,IAAAE,cAAAD;IAAAC,kBAAA,AAAAC,4BAAAD;yBAAA,AAAAE,4CAAAF,gBAAA,kFAAA,nKAmBaM;uBAnBb,AAAAJ,4CAAAF,gBAAA,6EAAA,5JAmBgCO;mBAnBhC,AAAAL,4CAAAF,gBAAA,uDAAA,lIAmBiDQ;uBAnBjD,AAAAN,4CAAAF,gBAAA,/EAmBwDS;uBAnBxD,AAAAP,4CAAAF,gBAAA,6EAAA,5JAoBaU;mBApBb,AAAAR,4CAAAF,gBAAA,sEAAA,WAAAG,5JAoB8BQ;AApB9B,AAsByB,QAAA,gDAAAR,mBAAA;;qBAtBzB,AAAAD,4CAAAF,gBAAA,7EAoB2CY;2BApB3C,AAAAV,4CAAAF,gBAAA,oFAAA,vKAoB0Da;AApB1D,AA2BE,6BAAA,6DA+BiCgB;AA/BjC,AAgCU,IAAMC,SAAO,iBAAAC,YAAkB,AAACC,iBAAOH;AAA1B,AAAA,gKAAAE,oEAAAA,5NAACzD,6EAAAA,wFAAAA;;AAAd,AACE,GAAI,CAAYuD,QAAIC;AAClBD;;AACA,OAACI,oBAAUJ,IAAIC;;;wBAnC7B,wDA2C4Bd,GAAGoB;AA3C/B,AA4CU,IAAMd,IAAE,AAACJ,gBAAMkB;AAAf,AACE,IAAAC,YAAMrB;AAAN,AAAA,GAAA,AAAA1B,6CAAA,AAAA,mDAAA+C;AACQ,mDAAKf;;AADb,GAAA,AAAAhC,6CAAA,AAAA,kDAAA+C;AACQ,mDAAKf;;AADb,GAAA,AAAAhC,6CAAA,AAAA,qDAAA+C;AAEK,QAAA,iDAAUf;;AAFf,GAAA,AAAAhC,6CAAA,AAAA,oDAAA+C;AAGI,GAAI,AAAC9C,gCAAY+B;AACf,QAAA,iDAAUA;;AACV,QAAA,mDAAYA;;;AALlB,AAME,wDAAA,JAAKN,oDAAOM;;;;;;;iBAnD1B,iDAKqBN;;AALrB,AAMU,IAAA9C,mBAAI,CAAC0C,+CAAAA,mDAAAA,NAAeI,+BAAAA;AAApB,AAAA,oBAAA9C;AAAAA;;AACI,GAAM,AAAC+C,qBAAKD;AAKN,GAAM,EAAK,6CAAA,7CAAC1B,iDAAI,AAACD,gBAAM2B,UACZ,6CAAA,AAAA,7CAAC1B,sGAAQ,AAAC4B,gBAAMF;AAAM,gBAAO,AAACG,iBAAOH;;;;AADhD,GAEM,6CAAA,AAAA,7CAAC1B,4GAAW,AAAC4B,gBAAMF;AAAK,IAAAI,YAAA,AAAA;AAAA,AAAA,oGAAAA,sCAAAA,lIAACR,+CAAAA,0DAAAA;;AAF/B,AAGY,oGAAA,mFAAA,/KAACA,+CAAAA,uGAAAA;;;;;AARnB,GASM,eAAAS,dAASL;AAAI,oGAAA,mFAAA,/KAACJ,+CAAAA,uGAAAA;;AATpB,AAAA;;;;;;;;4BAPd,4DA4BgCgB;AA5BhC,AA6BU,IAAA1D,mBAAI,CAACwC,iDAAAA,oDAAAA,LAAiBkB,gCAAAA;AAAtB,AAAA,oBAAA1D;AAAAA;;AAAyB0D;;;iBA7BnC,iDAoDqBC;AApDrB,AAqDU,oBAAI,AAACS,0BAAUT;AAGb,IAAMc,SAAO,iBAAA,2BAAA,uBAAId,vBAAIe,3BAAuBC,jBAA2BC;IACjEC,UAAQ,iBAAOzB,IAAE,kBAAIqB,lBAAOK;;AAApB,AACE,IAAMC,iBAAG,AAAChB,oBAAUX,EAAE,AAAC4B,uCAAW5B;AAAlC,AACE,IAAAY,qBAAW,AAACc,kBAAQC;AAApB,AAAA,oBAAAf;AAAA,QAAAA,JAASiB;AAAT,AACE,gBAAOA;;;;AACP,OAACC,eAAKH;;;;;IAL1BV,cAMkB,AAACP,iBAAOe;IAN1BP,cAAA,AAAAzE,cAAAwE;IAAAE,gBAAA,AAAAvB,gBAAAsB;IAAAA,kBAAA,AAAAE,eAAAF;SAAAC,LAMOzB;WANPwB,PAMYJ;IACNiB,WAAS,iBAAAlB,oBAAK,AAACiB,eAAKL;AAAX,AAAA,oBAAAZ;AACK,wBAAA,qBAAIY,rBAAQO,jBAAWtB;;AAD5BG;;;AAPf,AASE,oBAAI,CAAC3B,6CAAAA,iDAAAA,NAAOQ,6BAAAA;AACV,OAACuC,gBACA,iBAAApB,oBAAK,CAAC3B,6CAAAA,uDAAAA,ZAAO6C,mCAAAA;AAAb,AAAA,oBAAAlB;AACK,IAAAA,wBAAK,AAACqB,mBAAaxC,GAAGqC;AAAtB,AAAA,oBAAAlB;AAaK,OAACV,cAAI,iBAAAvD,mBAAI,EAAK,gDAAA,AAAA,hDAACoB,6CAAE0B,2DAAO,sDAAA,AAAA,tDAAC1B,6CAAE+D;AAAtB,AAAA,GAAAnF;AAAAA;;AACI,OAACuF,kBAAYzC,GAAGoB;;;;AAd9BD;;;AADLA;;KAgBA,iBAAAjE,mBAAI,iBAAAiE,oBAAK,CAAC5B,iDAAAA,qDAAAA,NAAiBS,iCAAAA;AAAvB,AAAA,oBAAAmB;AACK,IAAAuB,gBAAC,CAACnD,iDAAAA,qDAAAA,NAAiBS,iCAAAA;AAAnB,AAAA,QAAA0C,8CAAAA,oDAAAA,RAAuBtB,gCAAAA;;AAD5BD;;;AAAJ,AAAA,oBAAAjE;AAAAA;;AAAA,IAAAA,uBAEI,iBAAAiE,oBAAK,mEAAA,nEAAC7C,6CAAE,AAACD,gBAAM+C;AAAf,AAAA,GAAAD;AACK,OAACwB,kBAAkB3C,GAAGoB;;AAD3BD;;;AAFJ,AAAA,oBAAAjE;AAAAA;;AAII,IAAM0F,MAAI,iBAAAC,YAAM7C;AAAN,AAAA,GAAA,AAAA1B,6CAAA,AAAA,kDAAAuE;AACI,IAAA3F,uBAAIoC;AAAJ,AAAA,oBAAApC;AAAAA;;AAAA;;;AADJ,GAAA,AAAAoB,6CAAA,AAAA,yDAAAuE;AAAA;;AAAA,AAGE,QAAA,oDAAA,JAAS7C;;;;;AAHrB,AAIE,IAAA8C,mBAAA,KAAAC;AAAA,AAAA,IAAAC,oDAAAC;IAAAC,+CAAAC;IAAAC,oDAAA;IAAAC,+CAAA,WAAAC;AAAA,AAAA,OAAAR,wBAAAQ;;AAAA,AAAA,CAAAL,sCAAAG;;AAAA,CAAAD,iCAAAE;;AAAA,IAAA,AACE,IAAO/C,WAAEc;;AAAT,AACE,AAACmC,uGAAM,4CAAK,AAACrD,gBAAMI;;AACnB,IAAAkD,4BAAc,AAAC9B,eAAKpB;AAApB,AAAA,GAAAkD;AAAA,AAAA,4BAAAA,xBAAWvB;AAAX,AACE,GAAA,GAAQ,EAAK,OAAS,AAAC/B,gBAAM+B,yCAAK,qGAAA,rGAAC3D,6CAAE,AAAC4B,gBAAM,AAACA,gBAAM+B;AACjD,AAACsB,uGAAMX;;AACP,uGAAA,vGAACW;;;AACH,gBAAOtB;;;;AAJT;;;UAHJ,AAAA,CAAAkB,iCAAAD;;AAAA,CAAAD,sCAAAD;;AAAA,mDAAAF;;;;;AAYP,OAACP,gBACA,iBAAApB,oBAAKkB;AAAL,AAAA,oBAAAlB;AAAA,IAAAA,wBACK,CAAC3B,6CAAAA,uDAAAA,ZAAO6C,mCAAAA;AADb,AAAA,oBAAAlB;AAEK,OAACqB,mBAAaxC,GAAGqC;;AAFtBlB;;;AAAAA;;KAGA,iBAAAjE,mBAAI,iBAAAiE,oBAAK,CAAC5B,iDAAAA,qDAAAA,NAAiBS,iCAAAA;AAAvB,AAAA,oBAAAmB;AACK,IAAAsC,gBAAC,CAAClE,iDAAAA,qDAAAA,NAAiBS,iCAAAA;AAAnB,AAAA,QAAAyD,8CAAAA,oDAAAA,RAAuBrC,gCAAAA;;AAD5BD;;;AAAJ,AAAA,oBAAAjE;AAAAA;;AAEI,oDAAK,AAACqF,gBAAgB,iBAAApB,oBAAK,AAACG,0BAAUK;AAAhB,AAAA,oBAAAR;AACK,sBAAA,fAACT,sEAAmB,AAACM,iBAAO,AAACc,iBAAOH;;AADzCR;;KAEA,AAACuC,sBAAsB,AAACxB,uCAAW,AAACJ,iBAAOC,yDAC5D,AAACQ,gBAAgB,iBAAArF,uBAAI,sBAAA,tBAACsF,mBAAaxC;AAAlB,AAAA,oBAAA9C;AAAAA;;AAAA,IAAAA,uBACI,yBAAA,xBAAG,AAACmB,gBAAM+C;AADd,AAAA,GAAAlE;AAAAA;;AAEI,OAACoE,0BAAU,AAACU,kBAAQL;;;KACxB,kDAAA,lDAACgC,uDAAYvC;;;;;AAG5C,IAAMhD,IAAE,AAAC4C,iBAAOH;AAAhB,AACE,IAAA3D,mBAAI,iBAAAiE,oBAAK1B;AAAL,AAAA,oBAAA0B;AAAsB,QAAC1B,iDAAAA,oDAAAA,LAAiBrB,gCAAAA;;AAAxC+C;;;AAAJ,AAAA,oBAAAjE;AAAAA;;AACIkB;;;;sBAxHlB,sDAyB0BmC,EAAEI;AAzB5B,AA0BU,oBAAIJ;AAAE,QAACZ,6CAAAA,gDAAAA,LAAagB,4BAAAA;;AAAGA;;;yBA1BjC,yDAsBuBL,EAAEC;AAtBzB,AAuBU,OAACE,cAAI,AAACC,eAAYJ,EAAEC;;iCAvB9B,iEAqCqCM;AArCrC,AAsCU,IAAAK,qBAAgB,iBAAAC,oBAAKtB;AAAL,AAAA,oBAAAsB;AACK,OAAC3E,gDACA,AAACwE,iBAAOH;;AAFdM;;;AAAhB,AAAA,oBAAAD;AAAA,aAAAA,TAASJ;AAAT,AAGE,OAACG,oBAAUJ,IAAIC;;AACfD;;;wBA1CZ,2DAAAf,HAAsBE;AAAtB,AAAA,IAAAD,cAAAD;UAAA,AAAA/B,4CAAAgC,YAAA,IAAA,lEAA0B9B;YAA1B,AAAAF,4CAAAgC,YAAA,IAAA,pEAA8B7B;AAA9B,AACU,mHAAA,1GAAK,6CAAA,AAAA,7CAACI,iGAAK0B,WACN,AAACzB,gCAAYN,UACb,EAAI,UAAA,TAAMC,oBACN,AAACK,gCAAYL;;qBAJhC,qDAmBsBoC,EAAEC;AAnBxB,AAoBU,QAAG,AAACC,WAAWF,KAAG,AAACE,WAAWD;;AApBxC,AAyHE,kBAAKqD;AAAL,AACE,IAAM9C,wCAAW,AAAC+C,uBAASD,3CACV,AAACE,XACD,AAAC5B;AAFlB,AAGE,GAAI,OAASpB;AACXA;;AACA,mDAAKA;;;;;AA1Jf,CAAA,0EAAA,1EAAOhC;;AAAP;AAAA,CAAA,oEAAA,WAAAM,/EAAON;AAAP,AAAA,IAAAO,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAtC,cAAAqC;;;AAAA,AA4JA,mDAAA,oFAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,xNAAe2E;AAGf,iDAAA,oFAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,tNAAeC;AAGf,gDAAA,hDAAeC;AAGf,kDAAA,lDAAeC;AAGf;;;;4CAAA,wCAAA,UAAA,KAAA,OAAA,UAAA,UAAA,MAAA,OAAA,QAAA,MAAA,MAAA,KAAA,MAAA,QAAA,SAAA,SAAA,SAAA,SAAA,SAAA,IAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,3SAGEC;AAeF;;;;8CAAA,wCAAA,QAAA,QAAA,QAAA,MAAA,MAAA,KAAA,QAAA,QAAA,UAAA,QAAA,OAAA,QAAA,MAAA,aAAA,QAAA,SAAA,WAAA,MAAA,KAAA,KAAA,WAAA,KAAA,QAAA,SAAA,MAAA,OAAA,MAAA,MAAA,QAAA,SAAA,QAAA,UAAA,KAAA,QAAA,QAAA,MAAA,OAAA,QAAA,KAAA,SAAA,MAAA,YAAA,MAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,pwBAGEC;AA2BF;;;;AAGEC,0CACA,6CAAA,7CAACC,gFAAQ,AAACC,4CAAI,WAAAC;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAzG,4CAAA0G,YAAA,IAAA,hEAAMC;AAAN,AAAA,0FACGA,EAAE,CAAA,iDAAUA;IACvBN;AAER;;;;;AAIEO,sCACA,iBAAMC,cACc,wBAAA,WAAAE,nCAACC;AAAD,AAAa,QAAA,iDAAAD;GADb,AAACD,uBAAeT;AAApC,AAEE,kKAAA,wCAAA,OAAA,MAAA,MAAA,OAAA,MAAA,IAAA,MAAA,MAAA,OAAA,MAAA,OAAA,OAAA,SAAA,SAAA,QAAA,QAAA,WAAA,QAAA,MAAA,QAAA,QAAA,SAAA,QAAA,WAAA,SAAA,9XAACY,uGAAMX,wCACAO;;AAeX,4CAAA,5CAAOK,gGACOC;AADd,AAGW,OAACC,SAAYD;;AAExB;;;;;2CAAA,3CAAOE,8FAIJhH,EAAEiH;AAJL,AAKE,OAACC,8CAAMC,cAAI,4CAAA,WAAAC,vDAACjB;AAAD,AAAM,IAAAkB,YAAA,0CAAAD,1CAAMP;AAAN,AAAA,sFAAAQ,+BAAAA,7GAAiBJ,wCAAAA,mDAAAA;GAClB,4CAAKjH;;AAEvB,8CAAA,sDAAAsH,pGAAeC;AAAf,AAA6B,gDAAAD,zCAACN,2DAAYpB;;AAC1C,gDAAA,wDAAA4B,xGAAeC;AAAf,AAA+B,gDAAAD,zCAACR,2DAAYrB;;AAE5C,AAAK+B,oDACH,AAACd,uGAAMb,0CACAC;AAET;;;;iDAAA,jDAAO2B,0GAGJpF;AAHH,AAIE,IAAAqF,YAAMrF;AAAN,AAAA,QAAAqF;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA;;;;AAKF;;;;AAEEC,yCACA,uIAAA,yEAAA,AAAA,goCAAA,uDAAA,AAAA,k/BAAA,kFAAA,IAAA,oFAAA,KAAA,6EAAA,2CAAA,AAAA,+EAAA,OAAA,AAAA,0EAAA,MAAA,AAAA,uDAAA,iBAAA,6EAAA,wCAAA,AAAA,oEAAA,AAAA,sDAAA,AAAA,4DAAA,AAAA,oDAAA,AAAA,yDAAA,AAAA,2DAAA,AAAA,+DAAA,AAAA,gEAAA,AAAA,h+GAACC,uhHAoBY,WAAAQ;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA3I,4CAAA4I,YAAA,IAAA,hEAAMhG;QAAN,AAAA5C,4CAAA4I,YAAA,IAAA,hEAAQF;AAAR,AAAY,uDAAA,HAAK9F,qDAAQ8F;GAC/B,WAAAG;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA7I,4CAAA8I,YAAA,IAAA,hEAAMlG;QAAN,AAAA5C,4CAAA8I,YAAA,IAAA,hEAAQJ;AAAR,AAAY,uDAAA,HAAK9F,0DAAQ8F;GAFtB,WAAAF;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAxI,4CAAAyI,YAAA,IAAA,hEAAM7F;QAAN,AAAA5C,4CAAAyI,YAAA,IAAA,hEAAQC;AAAR,AAAY,uDAAA,HAAK9F,uDAAU8F;kDAI7B,WAAAO,1DAMHhJ;AANG,AAAA,IAAAiJ,cAAAD;QAAA,AAAAjJ,4CAAAkJ,YAAA,IAAA,hEAAMtG;QAAN,AAAA5C,4CAAAkJ,YAAA,IAAA,hEAAQC;AAAR,AACE,oBAAM,iBAAA/F,oBAAK,AAACgG,yBAASD;AAAf,AAAA,GAAA/F;AAAkB,OAAC,AAACiG,qBAAWC,sBAAMH;;AAArC/F;;;AAAN,AACE,oDAAKR,+CAAE,AAACkF,8CAAeqB;;AADzB;;GAPD,WAAAf;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAApI,4CAAAqI,YAAA,IAAA,hEAAMzF;AAAN,AAAU,QAAA,wDAAA,HAASA;GASjB,WAAK2G;AAAL,AACE,GAAM,EAAK,iEAAA,jEAAChJ,6CAAE,AAACD,gBAAMiJ,cAAO,AAACH,yBAAS,AAACjH,gBAAMoH;AAA7C,AACE,QAAA,qDAAS,AAAC3B,4CAAa,AAACzF,gBAAMoH;;AADhC;;GATF,WAAAjB;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAtI,4CAAAuI,YAAA,IAAA,hEAAM3F;AAAN,AAAU,QAAA,wDAAA,HAASA;GAIvB,WAAAmG;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA/I,4CAAAgJ,YAAA,IAAA,hEAAMpG;QAAN,AAAA5C,4CAAAgJ,YAAA,IAAA,hEAAQN;AAAR,AAAY,uDAAA,HAAK9F,0DAAQ8F;KAtBhC,6EA+BC,wCAAOc;AAAP,AACE,IAAArK,mBAAI,AAAC6I,+CAAgBwB;AAArB,AAAA,oBAAArK;AAAAA;;AACI,IAAMsK,IAAE,4CAAKD;AAAb,AACE,IAAArK,uBAAI,CAAC4I,kFAAAA,qFAAAA,LAAmB0B,iEAAAA;AAAxB,AAAA,oBAAAtK;AAAAA;;AACI,IAAAuK,eAAOG;IAAPF,eAAeF;AAAf,AAAA,IAAAtG,qBAAA,CAAAuG,6CAAAA,2FAAAC,gBAAAD,uEAAAC,vIACExD,uFAAAA;AADF,AAAA,oBAAAhD;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,OAEM,WAAA2G;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA9J,4CAAA+J,YAAA,IAAA,hEAAMC;WAAN,AAAAhK,4CAAA+J,YAAA,IAAA,nEAAQE;kBAAR,AAAAjK,4CAAA+J,YAAA,IAAA,1EAAaG;AAAb,AACE,IAAA/G,yBAAW,qBAAA,rBAACgH,8BAAqBD;AAAjC,AAAA,oBAAA/G;AAAA,QAAAA,JAAS9C;AAAT,AACE,oDAAK,AAAC+D,8BAAE6F,mDAAM,AAACnC,8CAAezH;;AAC9B,yFAAA,rCAAK,AAAC+D,8BAAE6F,4DAAU,AAAC7F,8BAAE8F;;GAL/BN;;AAAA,IAAAzG,yBAAA,CAAAuG,6CAAAA,yFAAAC,gBAAAD,qEAAAC,nIAOEzD,qFAAAA;AAPF,AAAA,oBAAA/C;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,OAQM,WAAAiH;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAApK,4CAAAqK,YAAA,IAAA,hEAAML;WAAN,AAAAhK,4CAAAqK,YAAA,IAAA,nEAAQJ;gBAAR,AAAAjK,4CAAAqK,YAAA,IAAA,xEAAaC;AAAb,AACE,IAAAnH,yBAAW,qBAAA,rBAACgH,8BAAqBG;AAAjC,AAAA,oBAAAnH;AAAA,QAAAA,JAAS9C;AAAT,AACE,oDAAK,AAAC+D,8BAAE6F,mDAAM,AAACrC,4CAAavH;;AAC5B,yFAAA,rCAAK,AAAC+D,8BAAE6F,uDAAU,AAAC7F,8BAAEkG;;GAX/BV;;AAYEJ;;;;;;AAEjB;;;oCAAA,pCAAOe,gFAEJd;AAFH,AAGE,QAAA,mDAAA,HAASA;;AAEX;;;0CAAA,1CAAOe,4FAEJf;AAFH,AAGE,GAAI,EAAK,OAASA,oBAAG,gEAAA,hEAAClJ,6CAAE,AAACD,gBAAMmJ;AAC7BA;;AACA,OAACc,kCAAMd;;;AAEX;;;;;;+CAAA,/CAAOgB,sGAKJ7H;AALH,AAME,IAAA8H,YAAM9H;AAAN,AAAA,QAAA8H;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA;;;;AAKF;;;;mEAAA,nEAGEC;AAGF;;;;iEAAA,jEAGEC;AAEF,2CAAA,3CAAOC,8FAAcpB;AAArB,AACE,QAAA,iEAAA,HAAuBA;;AAEzB,AAAcqB,6CACZ,iBAAME,aAAW,WAAKC;AAAL,AACE,kBAAAC;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAlL,4CAAAmL,YAAA,IAAA,hEAAMnB;WAAN,AAAAhK,4CAAAmL,YAAA,IAAA,nEAAQlB;AAAR,AACE,QAAA,yDAAA,RAAUgB,wDAAW,AAACT,wCACA,CAACM,2EAAAA,iFAAAA,RAAOb,6DAAAA;;;IAC7CmB,MAAM,WAAA,XAACJ;IACPK,OAAM,WAAA,XAACL;IACPM,MAAM,WAAA,XAACN;IACPO,MAAM,WAAA,XAACP;IACPQ,MAAM,WAAA,XAACR;IACPS,QAAM,WAAA,XAACT;IACPU,QAAM,WAAAC;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA3L,4CAAA4L,YAAA,IAAA,hEAAM5B;WAAN,AAAAhK,4CAAA4L,YAAA,IAAA,nEAAQ3B;AAAR,AACE,IAAMrH,IAAE,AAAC4H,wCAAY,CAACM,2EAAAA,iFAAAA,RAAOb,6DAAAA;AAA7B,AACE,uDAAA,HAAKrH;;IACfiJ,aACA,WAAAC;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA9L,4CAAA+L,YAAA,IAAA,hEAAM/B;WAAN,AAAAhK,4CAAA+L,YAAA,IAAA,nEAAQ9B;AAAR,AACE,IAAMrH,IAAE,AAAC4H,wCAAY,CAACM,2EAAAA,iFAAAA,RAAOb,6DAAAA;AAA7B,AACE,uDAAA,HAAKrH;;mBAhBf,WAAAmI,1BAiBMnJ;AAjBN,AAkBO,QAAA,sDAAAmJ,mBAAA;;AAlBP,AAmBE,8IAAA,yEAAA,AAAA,goCAAA,mFAAA,uDAAA,AAAA,k/BAAA,kFAAA,MAAA,oFAAA,KAAA,6EAAA,wCAAA,AAAA,oEAAA,AAAA,sDAAA,AAAA,qDAAA,AAAA,qDAAA,AAAA,4DAAA,AAAA,oDAAA,AAAA,uDAAA,AAAA,qDAAA,AAAA,yDAAA,AAAA,+EAAA,AAAA,2DAAA,AAAA,+DAAA,AAAA,gEAAA,AAAA,0DAAA,AAAA,wDAAA,AAAA,uDAAA,AAAA,0EAAA,AAAA,vuHAAC5C,s5CAWcvG,w4EA0Bb,WAAAiL;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA7M,4CAAA8M,YAAA,IAAA,hEAAMlK;QAAN,AAAA5C,4CAAA8M,YAAA,IAAA,hEAAQpE;AAAR,AACE,gGAAA,5CAAK,AAAC8B,wCAAY5H,mEAAsB,AAAC4H,wCAAY9B;GAGvD,WAAAqE;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA/M,4CAAAgN,YAAA,IAAA,hEAAMpK;QAAN,AAAA5C,4CAAAgN,YAAA,IAAA,hEAAQtE;AAAR,AACE,uDAAA,HAAK9F,0DAAa8F;GAwBhB,WAAK9F;AAAL,AACE,IAAM6K,uEAAU,AAACjH,4CAAIqE,yCAAajI,rJAClB,kDAAA,lDAACgD;AADjB,AAEE,QAAA,wBAAA,LACK6H;GAtEf,WAAAzB;AAAA,AAmFO,yDAAA,UAAAA,5DAACpG;GAlDN,WAAA+G;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA3M,4CAAA4M,YAAA,IAAA,hEAAMhK;QAAN,AAAA5C,4CAAA4M,YAAA,IAAA,hEAAQlE;AAAR,AACE,gGAAA,5CAAK,AAAC8B,wCAAY5H,2DAAc,AAAC4H,wCAAY9B;GA0B5C,WAAKtI;AAAL,AACE,IAAMC,IAAE,AAACC,gBAAMF;AAAf,AACE,GAAM,+CAAA,/CAACG,6CAAEF;AACH,QAAA,SAAc,kCAAA,lCAACkK,uCAAS,AAACA,kCAAM,AAACpI,gBAAM/B;;AAD5C,GAEM,+CAAA,/CAACG,6CAAEF;AACH,QAAA,SAAc,AAACkK,kCAAM,AAACpI,gBAAM/B,KAAK,AAACmK,kCAAM,AAACnI,iBAAOhC;;AAHtD;;;GAbP,WAAA+M;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAnN,4CAAAoN,YAAA,IAAA,hEAAMxK;AAAN,AACE,QAAA,SAAc,AAAChB,aAAagB;GAlDhC,WAAAqJ;AAAA,AAkFO,yDAAA,UAAAA,5DAACrG;GA1BA,WAAA2H;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAvN,4CAAAwN,YAAA,IAAA,hEAAM5K;QAAN,AAAA5C,4CAAAwN,YAAA,IAAA,hEAAQrE;AAAR,AACE,gGAAA,5CAAK,AAACqB,wCAAY5H,oDAAO,AAAC4H,wCAAYrB;GA5B9C,WAAAsD;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAzM,4CAAA0M,YAAA,IAAA,hEAAM9J;AAAN,AACE,QAAA,kBAAuB,AAAChB,aAAagB;GAbvC,WAAAuJ;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAnM,4CAAAoM,YAAA,IAAA,hEAAMxJ;AAAN,AACE,QAAA,iEAAA,HAAuBA;GAyChB,WAAK2G;AAAL,AAAS,QAAA,yDAAkB,AAACiB,wCAAY,kDAAA,lDAAC5E,sDAAW2D;GAtC7D,WAAA8C;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAArM,4CAAAsM,YAAA,IAAA,hEAAM1J;AAAN,AACE,QAAA,gEAAA,HAAsBA;GAkDlB,WAAKA;AAAL,AACE,IAAMiC,MAAK,oFAAA,cAAA,hFAAI8F;IAGT8C,6DAAU,AAACjH,4CAAIqE,yCAAajI,3IAClB,AAACgD,kDAAOf;AAJxB,AAKE,QAAA,wBAAA,LACK4I;GA/EjB,WAAAvB;AAAA,AAiFS,QAAA,sDAAe,AAAC1B,wCAAY,gBAAA0B,hBAAC/J;GA5BpC,WAAAkL;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAArN,4CAAAsN,YAAA,IAAA,hEAAMnE;AAAN,AACE,QAAA,QAAa,AAACvH,aAAauH;GA7B7B,WAAAoD;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAvM,4CAAAwM,YAAA,IAAA,hEAAM5J;AAAN,AACE,QAAA,iBAAsB,AAAChB,aAAagB;GAmBtC,WAAAqK;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAjN,4CAAAkN,YAAA,IAAA,hEAAMtK;QAAN,AAAA5C,4CAAAkN,YAAA,IAAA,hEAAQxE;AAAR,AACE,uDAAA,HAAK9F,yDAAY8F;KA9CrB,6EAqFC,wCAAOc;AAAP,AACE,GAAI,AAACkE,6BAASlE;AACZ,QAAA,SAAc,AAACe,kCAAM,AAACoD,0BAAYnE,IAAI,AAACe,kCAAM,AAACqD,4BAAcpE;;AAC5D,IAAArK,mBAAI,AAACsL,6CAAcjB;AAAnB,AAAA,oBAAArK;AAAAA;;AACI,IAAMsK,IAAE,4CAAKD;AAAb,AACE,IAAArK,uBAAI,CAACyH,oEAAAA,uEAAAA,LAAQ6C,mDAAAA;AAAb,AAAA,oBAAAtK;AAAAA;;AACI,IAAA0O,eAAOhE;IAAPiE,eAAerE;AAAf,AAAA,IAAAtG,qBAAA,CAAA0K,6CAAAA,2FAAAC,gBAAAD,uEAAAC,vIACE3H,uFAAAA;AADF,AAAA,oBAAAhD;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,OAEM,WAAA4L;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA/O,4CAAAgP,YAAA,IAAA,hEAAMhF;WAAN,AAAAhK,4CAAAgP,YAAA,IAAA,nEAAQ/E;kBAAR,AAAAjK,4CAAAgP,YAAA,IAAA,1EAAa9E;AAAb,AACE,kIAAA,9EAAK,AAACM,wCAAY,AAACpG,8BAAE6F,wDACZ,AAACO,wCAAY,AAACpG,8BAAE8F;GAJjCN;;AAAA,IAAAzG,yBAAA,CAAA0K,6CAAAA,yFAAAC,gBAAAD,qEAAAC,nIAME5H,qFAAAA;AANF,AAAA,oBAAA/C;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,OAOM,WAAA8L;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAjP,4CAAAkP,YAAA,IAAA,hEAAMlF;WAAN,AAAAhK,4CAAAkP,YAAA,IAAA,nEAAQjF;gBAAR,AAAAjK,4CAAAkP,YAAA,IAAA,xEAAa5E;AAAb,AACE,kIAAA,9EAAK,AAACE,wCAAY,AAACpG,8BAAE6F,wDACZ,AAACO,wCAAY,AAACpG,8BAAEkG;GATjCV;;AAAA,IAAAzG,yBAAA,iBAAA4K,YAAA;IAAAC,YAAAF;AAAA,AAAA,QAAAD,6CAAAA,2CAAAE,UAAAC,aAAAH,uBAAAE,UAAAC;;AAAA,AAAA,oBAAA7K;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,YAAAyG,LAYqByB;;AAZrB,IAAAlI,yBAAA,iBAAA8K,YAAA;IAAAC,YAAAJ;AAAA,AAAA,QAAAD,6CAAAA,2CAAAI,UAAAC,aAAAL,uBAAAI,UAAAC;;AAAA,AAAA,oBAAA/K;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,WAAAyG,JAakBwB;;AAblB,IAAAjI,yBAAA,iBAAAgL,YAAA;IAAAC,YAAAN;AAAA,AAAA,QAAAD,6CAAAA,2CAAAM,UAAAC,aAAAP,uBAAAM,UAAAC;;AAAA,AAAA,oBAAAjL;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,WAAAyG,JAckB0B;;AAdlB,IAAAnI,yBAAA,iBAAAkL,YAAA;IAAAC,YAAAR;AAAA,AAAA,QAAAD,6CAAAA,2CAAAQ,UAAAC,aAAAT,uBAAAQ,UAAAC;;AAAA,AAAA,oBAAAnL;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,kBAAAyG,XAeyBiC;;AAfzB,IAAA1I,yBAAA,iBAAAoL,YAAA;IAAAC,YAAAV;AAAA,AAAA,QAAAD,6CAAAA,2CAAAU,UAAAC,aAAAX,uBAAAU,UAAAC;;AAAA,AAAA,oBAAArL;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,aAAAyG,NAgBoB8B;;AAhBpB,IAAAvI,yBAAA,iBAAAsL,YAAA;IAAAC,YAAAZ;AAAA,AAAA,QAAAD,6CAAAA,2CAAAY,UAAAC,aAAAb,uBAAAY,UAAAC;;AAAA,AAAA,oBAAAvL;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,WAAAyG,JAiBkB2B;;AAjBlB,IAAApI,yBAAA,iBAAAwL,YAAA;IAAAC,YAAAd;AAAA,AAAA,QAAAD,6CAAAA,2CAAAc,UAAAC,aAAAf,uBAAAc,UAAAC;;AAAA,AAAA,oBAAAzL;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,WAAAyG,JAkBkB4B;;AAlBlB,IAAArI,yBAAA,iBAAA0L,YAAA;IAAAC,YAAAhB;AAAA,AAAA,QAAAD,6CAAAA,2CAAAgB,UAAAC,aAAAjB,uBAAAgB,UAAAC;;AAAA,AAAA,oBAAA3L;AAAA,IAAAyG,kBAAAzG;AAAA,AAAA,aAAAyG,NAmBoB6B;;AAGlB,GAAI,uCAAA,rCAAK,cAAAnJ,bAASkH,sCACT,gBAAA,fAAG,EAAOC,uBACV,AAAC/G,cAAI,qBAAA,rBAACyH,mCAA0BV;AACvC,oBAAImB;AACF,QAAA,WAAgB,AAACL,kCAAMd;;AACvB,OAACc,kCAAMd;;;AACTD;;;;;;;;;;;;;;;;;AAEvB,AAAA;;;;;;;;;;;;;;;;;;;;;uCAAA,+CAAA/I,tFAAM0O;AAAN,AAAA,IAAAzO,qBAAA;AAAA,AAAA,IAAAC,2BAAA,AAAA;AAAA,AAAA,IAAAC,yBAAA;;AAAA,AAAA,GAAA,CAAAA,yBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,gBAAA,CAAAA,yBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAyO,0EAAA,CAAA,UAAA,MAAAtO;;;AAAA,AAAA,CAAA,4EAAA,gBAAAuO,5FAAMD,uFAoBHtJ;AApBH,AAAA,IAAAwJ,cAAAD;IAAAC,kBAAA,AAAAnO,4BAAAmO;eAAA,AAAAlO,4CAAAkO,gBAAA,vEAoBkBI;AApBlB,AAqBE,IAAMC,aAAW,CAAC5E,2EAAAA,iFAAAA,RAAOjF,6DAAAA;AAAzB,AACE,oBAAI4J;AACF,IAAME,QAAM,mJAAA,jJAAI,EAAK,OAASF,2BACT,AAACzQ,cAAIyQ,aACZ,CAAA,iEAAA,VAAgBA;AAF9B,AAIE,QAAA,oFAAA,9DACKE,kDAAMD;;AAEbA;;;;AA9BN,CAAA,+DAAA,/DAAMP;;AAAN;AAAA,CAAA,yDAAA,WAAAG,pEAAMH;AAAN,AAAA,IAAAI,YAAA,AAAApN,gBAAAmN;IAAAA,gBAAA,AAAA3L,eAAA2L;AAAA,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAAD,UAAAD;;;AAAA,AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBEM,8CACA,mCAAA,AAAA,lBAAME;qBAAN,WAAAD,5BAQME;AARN,AAQsB,QAAA,8EAAA,1EAAQ,kDAAA,KAAAF,vDAACjK;;IACzBoK,IAAE,uIAAA,yEAAA,AAAA,+zBAAA,uDAAA,AAAA,+bAAA,6EAAA,wCAAA,AAAA,yDAAA,AAAA,uDAAA,AAAA,wDAAA,AAAA,wDAAA,AAAA,uDAAA,AAAA,uDAAA,AAAA,qDAAA,AAAA,0DAAA,AAAA,yDAAA,AAAA,0DAAA,AAAA,wDAAA,AAAA,2DAAA,AAAA,4DAAA,AAAA,gEAAA,AAAA,wDAAA,AAAA,yDAAA,AAAA,uDAAA,AAAA,0EAAA,AAAA,4DAAA,AAAA,wDAAA,AAAA,8DAAA,YAAA,WAAA,WAAA,WAAA,WAAA,IAAA,WAAA,YAAA,WAAA,YAAA,YAAA,aAAA,aAAA,YAAA,YAAA,YAAA,WAAA,aAAA,aAAA,YAAA,eAAA,jjGAAC7H,8nGA0BkB,iBAAM8H,SAAO,WAAKrN;AAAL,AACE,QAAA,mDAAA,HAASA;;AADxB,AAAA,kDAAA,AAAA,oEAAA,AAAA,yEAAA,AAAA,xFAEOmN,yEACEA,2EACE,WAAAG;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAlQ,4CAAAmQ,YAAA,IAAA,hEAAM5N;QAAN,AAAAvC,4CAAAmQ,YAAA,IAAA,hEAAQ3N;AAAR,8BACM,gDAAA,HAAKD,qDAAQC,zGACb,AAACyN,DACD,wHAAA,kDAAWzN,jLACX,AAACyN,DACD,gMAAA,kDAAWzN,hQACX,OAACyN;GAVlB,AAAA,oEAWc,WAAAG;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAApQ,4CAAAqQ,YAAA,IAAA,hEAAM9N;QAAN,AAAAvC,4CAAAqQ,YAAA,IAAA,hEAAQ7N;AAAR,AACE,uDAAA,HAAKD,qDAAQC;GAZ7B,AAAA,sDAaQ,WAAA8N;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAtQ,4CAAAuQ,YAAA,IAAA,hEAAMhO;QAAN,AAAAvC,4CAAAuQ,YAAA,IAAA,hEAAQ/N;AAAR,AAAY,uDAAA,HAAKD,sDAASC;GAblC,AAAA,qDAcO,WAAAgO;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAxQ,4CAAAyQ,YAAA,IAAA,hEAAMlO;QAAN,AAAAvC,4CAAAyQ,YAAA,IAAA,hEAAQjO;AAAR,AAAY,uDAAA,HAAKD,sDAASC;GAdjC,AAAA,oDAeMvC;;AAlDjC,AAmDE;sCAAAyQ,FAAK9N;AAAL,AAAA,IAAA+N,cAAAD;IAAAC,kBAAA,AAAAzP,4BAAAyP;uBAAA,AAAAxP,4CAAAwP,gBAAA,/EAAiBC,2JAGc,kDAAA,lDAAC3S;sBAHhC,AAAAkD,4CAAAwP,gBAAA,9EACgBE,0JAGcE;2BAJ9B,AAAA5P,4CAAAwP,gBAAA,nFAEgBG;AAFhB,AAKE,IAAMlO,QAAO,AAACkD,uBAASlD;IAEjBoO,SAAO,AAACC,qDAAe,AAACC,kCAAetO,OAAGkN;IAC1CqB,iBAAe,EAAI,AAACC,oBAAIP,kBACP,CAACA,gDAAAA,wDAAAA,VAAgBG,oCAAAA,SACjBH;IACjBQ,WAAS,WAAKC,eAAeC;AAApB,AACE,IAAAC,qBAAA,AAAAxS,cAAkBuS;IAAlBE,uBAAA;IAAAC,uBAAA;IAAAC,mBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,mBAAAD;AAAA,IAAAE,qBAAA,AAAAH,0DAAAE;iBAAA,AAAA3R,4CAAA4R,mBAAA,IAAA,hFAASM;iBAAT,AAAAlS,4CAAA4R,mBAAA,IAAA,hFAAaO;AAAb,AAAA,AACE,uGAAA,vGAAC3M;;AACD,AAACA,uGAAM,yDAAA,ZAAK0M;;AACZ,AAAC1M,uGAAM,CAACwK,kCAAAA,8CAAAA,dAAEmC,0BAAAA;;AACV,uGAAA,vGAAC3M;;AAJH;AAAA,gBAAAgM;gBAAAC;gBAAAC;gBAAA,CAAAC,mBAAA;;;;;;;AAAA,IAAAlM,4BAAA,AAAAzG,cAAAwS;AAAA,AAAA,GAAA/L;AAAA,AAAA,IAAA+L,yBAAA/L;AAAA,AAAA,GAAA,AAAAoM,6BAAAL;AAAA,IAAAM,yBAAA,AAAAC,sBAAAP;AAAA,AAAA,gBAAA,AAAAQ,qBAAAR;gBAAAM;gBAAA,AAAAxR,gBAAAwR;gBAAA;;;;;;;AAAA,IAAAG,qBAAA,AAAA9P,gBAAAqP;iBAAA,AAAAxR,4CAAAiS,mBAAA,IAAA,hFAASC;iBAAT,AAAAlS,4CAAAiS,mBAAA,IAAA,hFAAaE;AAAb,AAAA,AACE,uGAAA,vGAAC3M;;AACD,AAACA,uGAAM,yDAAA,ZAAK0M;;AACZ,AAAC1M,uGAAM,CAACwK,kCAAAA,8CAAAA,dAAEmC,0BAAAA;;AACV,uGAAA,vGAAC3M;;AAJH;AAAA,gBAAA,AAAA7B,eAAA6N;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;AAKA,uGAAA,vGAAChM;;AACD,AAACA,uGAAM,CAACwK,kCAAAA,kDAAAA,lBAAEsB,8BAAAA;;AACV,8GAAA,vGAAC9L;;WAdlB,2CAAA,+FAAA,jJAeM4M,4HAAwBtB,iGACAF;AAhB9B,AAiBE,IAAA7L,mBAAA,KAAAC;AAAA,AAAA,IAAAqN,oDAAAnN;IAAAoN,+CAAAlN;IAAAmN,oDAAA;IAAAC,+CAAA,WAAAjN;AAAA,AAAA,OAAAR,wBAAAQ;;AAAA,AAAA,CAAAL,sCAAAqN;;AAAA,CAAAnN,iCAAAoN;;AAAA,IAAA,AACE,uGAAA,vGAAChN;;AACD,AAACA,uGAAM,kDAAA,lDAACI,uDAAYuL;;AACpB,uGAAA,vGAAC3L;;AACD,AAACiN,yFAAsC7P,MAAEyO,SAASe;UAJpD,AAAA,CAAAhN,iCAAAkN;;AAAA,CAAApN,sCAAAmN;;AAAA,mDAAAtN;;0BAtBCnC;IAAL8N;;;;EAAAA;;uCAAAA,FAAK9N;;;IAAAA;IAAL8N;6BAAAA,FAAK9N","names":["sicmutils.expression.render/make-symbol-generator","p","i","cljs.core.atom","cljs.core.symbol","suffix","cljs.core.swap_BANG_","cljs.core/inc","sicmutils.expression.render/rewrite-trig-powers","pattern.rule.choice","pattern.rule/rule*","pattern.rule.pattern_STAR_","cljs.core/List","G__102434","r__21102__auto__","cljs.core/seq","fexpr__102435","fexpr__102436","or__4253__auto__","pattern.consequence/succeed","pattern.rule/=>","pattern.rule/return","sicmutils.expression.render/rewrite-negation","pattern.rule.ruleset_STAR_","G__102437","fexpr__102438","G__102444","cljs.core.concat","fexpr__102446","p__102447","vec__102448","cljs.core.nth","sicmutils.expression.render/render-infix-ratio","num","denom","xs","n","cljs.core/count","cljs.core._EQ_","sicmutils.value/integral?","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.expression.render/make-infix-renderer","p__102458","map__102459","cljs.core/--destructure-map","cljs.core.get","p1__102452#","seq102457","self__4852__auto__","juxtapose-multiply","special-handlers","infix?","render-primitive","rename-functions","parenthesize","precedence-map","rewrite-trig-squares","p__102570","vec__102571","op","cljs.core/seq?","cljs.core/first","cljs.core/second","G__102549","cljs.core/Symbol","a","b","precedence","cljs.core/not","precedence>","x","f","loc","result","G__102546","clojure.zip/node","clojure.zip/replace","temp__5751__auto__","and__4251__auto__","args","G__102547","clojure.zip/branch?","vec__102550","seq__102551","first__102552","cljs.core/next","fn-loc","maybe-rewrite-negation","maybe-rewrite-trig-squares","clojure.zip/next","arg-loc","clojure.zip/right","a'","render-loc","r","clojure.zip/up","upper-op","clojure.zip/leftmost","parenthesize-if","precedence<=","ratio-expr?","fexpr__102555","render-unary-node","sep","G__102558","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__102560","cljs.core/*print-newline*","*print-fn*-orig-val__102561","cljs.core/*print-fn*","*print-newline*-temp-val__102562","*print-fn*-temp-val__102563","x__4796__auto__","cljs.core.print","temp__5753__auto__","fexpr__102567","maybe-rename-function","clojure.string.join","expr","sicmutils.value/freeze","clojure.zip/seq-zip","sicmutils.expression.render/decimal-superscripts","sicmutils.expression.render/decimal-subscripts","sicmutils.expression.render/subscript-pattern","sicmutils.expression.render/superscript-pattern","sicmutils.expression.render/non-TeX-greek","sicmutils.expression.render/sym->unicode","sicmutils.expression.render/TeX-letters","cljs.core.into","cljs.core.map","p__102581","vec__102582","k","sicmutils.expression.render/TeX-map","sym->tex","clojure.set/map-invert","p1__102585#","sicmutils.util/map-vals","cljs.core.merge","sicmutils.expression.render/digit->int","d","js/parseInt","sicmutils.expression.render/n->script","scripts","cljs.core.apply","cljs.core/str","p1__102589#","G__102590","p1__102591#","sicmutils.expression.render/n->subscript","p1__102592#","sicmutils.expression.render/n->superscript","sicmutils.expression.render/infix-sym->unicode","sicmutils.expression.render/infinity->infix","G__102594","sicmutils.expression.render/->infix","sicmutils.expression.render.make_infix_renderer","p__102617","vec__102618","p__102621","vec__102622","p__102609","vec__102610","y","p__102598","vec__102600","p__102603","vec__102604","p__102625","vec__102626","p__102613","vec__102614","e","cljs.core/integer?","cljs.core/complement","cljs.core/neg?","ds","v","s","pred__102629","expr__102630","p__4614__auto__","cljs.core/re-find","p__102633","vec__102635","_","stem","superscript","cljs.core/re-matches","p__102638","vec__102639","subscript","sicmutils.expression.render/brace","sicmutils.expression.render/maybe-brace","sicmutils.expression.render/infinity->tex","G__102643","sicmutils.expression.render/*TeX-vertical-down-tuples*","sicmutils.expression.render/*TeX-sans-serif-symbols*","sicmutils.expression.render/displaystyle","sicmutils.expression.render/->TeX*","p1__102648#","TeX-accent","accent","p__102656","vec__102657","dot","ddot","hat","bar","vec","tilde","prime","p__102662","vec__102663","primeprime","p__102666","vec__102667","p1__102653#","p1__102652#","p1__102651#","p__102695","vec__102696","p__102699","vec__102700","p__102707","vec__102708","p__102691","vec__102692","p__102679","vec__102680","p__102670","vec__102671","p__102675","vec__102676","p__102711","vec__102712","p__102683","vec__102684","p__102703","vec__102704","p__102687","vec__102688","body","sicmutils.ratio/ratio?","sicmutils.ratio/numerator","sicmutils.ratio/denominator","pred__102715","expr__102716","G__102726","G__102727","G__102728","G__102729","G__102730","G__102731","G__102732","G__102733","G__102734","G__102735","G__102736","G__102737","G__102738","G__102739","G__102740","G__102741","p__102718","vec__102719","p__102722","vec__102723","sicmutils.expression.render/->TeX","p__102744","map__102745","seq102742","G__102743","self__4851__auto__","equation","tex-string","label","sicmutils.expression.render/->JavaScript","p1__102746#","operators-known","make-js-vector","R","parens","p__102747","vec__102748","p__102752","vec__102753","p__102760","vec__102761","p__102764","vec__102765","p__102768","map__102769","symbol-generator","parameter-order","deterministic?","cljs.core/sort","params","clojure.set.difference","sicmutils.expression/variables-in","ordered-params","cljs.core/fn?","callback","new-expression","new-vars","seq__102770","chunk__102771","count__102772","i__102773","vec__102780","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__102788","var","val","opts","*print-newline*-orig-val__102796","*print-fn*-orig-val__102797","*print-newline*-temp-val__102798","*print-fn*-temp-val__102799","sicmutils.expression.compile.extract_common_subexpressions"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.expression.render\n  \"Functions and utilities for rendering symbolic expressions to various backends\n  like LaTeX, infix or Javascript.\"\n  (:require [clojure.set :as set]\n            [clojure.string :as s]\n            [clojure.zip :as z]\n            [pattern.rule :as R :refer [=>] :include-macros true]\n            [sicmutils.expression :as x]\n            [sicmutils.expression.compile :as compile]\n            [sicmutils.ratio :as r]\n            [sicmutils.util :as u]\n            [sicmutils.value :as v]))\n\n(defn- make-symbol-generator [p]\n  (let [i (atom 0)]\n    (fn [] (symbol\n           #?(:clj\n              (format \"%s%04x\" p (swap! i inc))\n\n              :cljs\n              (let [suffix (-> (swap! i inc)\n                               (.toString 16)\n                               (.padStart 4 \"0\"))]\n                (str p suffix)))))))\n\n(def ^{:private true\n       :doc \"Historical preference is to write `sin^2(x)` rather\n       than `(sin(x))^2`.\"}\n  rewrite-trig-powers\n  (R/choice\n   (R/rule (expt ((? f #{'sin 'cos 'tan}) ?x) 2) => ((expt (? f) 2) ?x))\n   (R/return nil)))\n\n(def ^{:private true\n       :doc \"The simplifier returns sums of products; for negative summands the\n  simplifier negates by wrapping with `(* -1 ...)`. For rendering, we prefer to\n  use a unary minus.\"}\n  rewrite-negation\n  (R/ruleset\n   (* -1 ?x) => (u- ?x)\n   (* -1 ??x) => (u- (* ??x))))\n\n(defn- render-infix-ratio\n  \"renders a pair of the form `[numerator denominator]` as a infix ratio of the\n  form `num/denom`.\n\n  If the pair contains only one entry `x`, it's coerced to `[1 x]` (and treated\n  as a denominator).\"\n  [[num denom :as xs]]\n  (let [n (count xs)]\n    (cond (and (= n 1) (v/integral? num))\n          (str \"1/\" num)\n\n          (and (= n 2)\n               (v/integral? num)\n               (v/integral? denom))\n          (str num \"/\" denom))))\n\n(defn- make-infix-renderer\n  \"Base function for infix renderers. This is meant to be specialized via\n  options for the treatment desired. Returns a rendering function. The options are:\n\n  - `precedence-map`: a map from (symbol or keyword) to numbers. Higher numbers\n    mean higher precedence. This guides parenthesization.\n  - `juxtapose-multiply`: a string that will be placed between factors in a\n    product. Defaults to `*`.\n  - `infix?` A function mapping symbols to boolean, used to decide if a function\n    application should be written as `x f y` or `f(x, y)`.\n  - `render-primitive` is a function used to render symbols, numeric constants\n    etc. into string form.\n  - `parenthesize` is a function used to wrap parens around objects when\n    needed. It defaults to the obvious thing.\n  - `special-handlers` is a map from symbol to a function of operator and\n    arguments, used to provide custom rendering for things like exponentiation\n    which might not be rendered either as infix or prefix.\n  - `rename-functions` is a map supplying replacement function names to be used\n    just before the expression is written.\"\n  [& {:keys [juxtapose-multiply special-handlers infix? render-primitive\n             rename-functions parenthesize precedence-map rewrite-trig-squares]\n      :or {special-handlers {}\n           parenthesize #(str \"(\" % \")\")\n           juxtapose-multiply \" * \"\n           rewrite-trig-squares false\n           rename-functions {}\n           infix? {}}}]\n  (letfn [(ratio-expr? [op [num denom]]\n            (and (= '/ op)\n                 (v/integral? num)\n                 (or (nil? denom)\n                     (v/integral? denom))))\n          (precedence [op]\n            (or (precedence-map op)\n                (cond (seq? op)\n                      ;; Some special cases:\n                      ;; - give (expt X n) the precedence of X\n                      ;; - give (partial ...) the precedence of D\n                      ;; - otherwise (...) has the precedence of application\n                      (cond (and (= 3 (count op))\n                                 (= 'expt (first op))) (recur (second op))\n                            (= 'partial (first op)) (precedence-map 'D)\n                            :else (precedence-map :apply))\n                      (symbol? op) (precedence-map :apply)\n                      :else 0)))\n\n          (precedence> [a b]\n            (> (precedence a) (precedence b)))\n\n          (precedence<= [a b]\n            (not (precedence> a b)))\n\n          (parenthesize-if [b x]\n            (if b (parenthesize x) x))\n\n          (maybe-rename-function [f]\n            (or (rename-functions f) f))\n\n          (maybe-rewrite-negation [loc]\n            (let [result (rewrite-negation (z/node loc))]\n              (if (identical? loc result)\n                loc\n                (z/replace loc result))))\n\n          (maybe-rewrite-trig-squares [loc]\n            (if-let [result (and rewrite-trig-squares\n                                 (rewrite-trig-powers\n                                  (z/node loc)))]\n              (z/replace loc result)\n              loc))\n          (render-unary-node [op args]\n            (let [a (first args)]\n              (case op\n                (+ *) (str a)\n                u- (str \"- \" a)\n                / (if (v/integral? a)\n                    (str \"1/\" a)\n                    (str \"1 / \" a))\n                (str op \" \" a))))\n          (render-loc [loc]\n            (if (z/branch? loc)\n              ;; then the first child is the function and the rest are the\n              ;; arguments.\n              (let [fn-loc (-> loc maybe-rewrite-negation maybe-rewrite-trig-squares z/next)\n                    arg-loc (loop [a (-> fn-loc z/right)]\n                              (let [a' (z/replace a (render-loc a))]\n                                (if-let [r (z/right a')]\n                                  (recur r)\n                                  (z/up a'))))\n                    [op & args] (z/node arg-loc)\n                    upper-op (and (z/up arg-loc)\n                                  (-> arg-loc z/leftmost z/node))]\n                (if (infix? op)\n                  (parenthesize-if\n                   (and (infix? upper-op)\n                        (and (precedence<= op upper-op)\n                             ;; respect precedence, except in the special cases\n                             ;; of ratios rendered as calls to `/`:\n                             ;;\n                             ;; (/ x), (/ x y)\n                             ;;\n                             ;; which should render as 1/x or x/y, or\n                             ;;\n                             ;; (- (* a b c...))\n                             ;;\n                             ;; which we would prefer to write as \"- a b c...\"\n                             ;; rather than \"- (a b c...)\" as strict precedence\n                             ;; rules would require.\n                             (not (or (and (= op '*) (= upper-op 'u-))\n                                      (ratio-expr? op args)))))\n                   (or (and (special-handlers op)\n                            ((special-handlers op) args))\n                       (and (= (count args) 1)\n                            (render-unary-node op args))\n                       (let [sep (case op\n                                   * (or juxtapose-multiply \" * \")\n                                   expt \"^\"\n                                   (str \" \" op \" \"))]\n                         (with-out-str\n                           (loop [a args]\n                             (print (str (first a)))\n                             (when-let [a' (next a)]\n                               (if-not (and (string? (first a')) (= (first (first a')) \\-))\n                                 (print sep)\n                                 (print \" \"))\n                               (recur a')))))))\n                  ;; case: op is not infix.\n                  ;; The _whole_ result may need to be parenthesized, though, if it\n                  ;; is part of an infix expression with an operator with very high\n                  ;; precedence (in practice, this means exponentiation)\n                  (parenthesize-if\n                   (and upper-op\n                        (infix? upper-op)\n                        (precedence<= op upper-op))\n                   (or (and (special-handlers op)\n                            ((special-handlers op) args))\n                       (str (parenthesize-if (and (z/branch? fn-loc)\n                                                  (precedence> :apply (z/node (z/next fn-loc))))\n                                             (maybe-rename-function (render-loc (z/next arg-loc))))\n                            (parenthesize-if (or (precedence<= op :apply)\n                                                 (> (count args) 1)\n                                                 (z/branch? (z/right fn-loc)))\n                                             (s/join \", \" args)))))))\n\n              ;; primitive case\n              (let [n (z/node loc)]\n                (or (and render-primitive (render-primitive n))\n                    n))))]\n    (fn [expr]\n      (let [result (-> (v/freeze expr)\n                       (z/seq-zip)\n                       (render-loc))]\n        (if (string? result)\n          result\n          (str result))))))\n\n(def ^:private decimal-superscripts\n  [\\\u2070 \\\u00b9 \\\u00b2 \\\u00b3 \\\u2074 \\\u2075 \\\u2076 \\\u2077 \\\u2078 \\\u2079])\n\n(def ^:private decimal-subscripts\n  [\\\u2080 \\\u2081 \\\u2082 \\\u2083 \\\u2084 \\\u2085 \\\u2086 \\\u2087 \\\u2088 \\\u2089])\n\n(def ^:private subscript-pattern\n  #\"(.+)_([0-9a-zA-Z\u03d6\u03b3\u03b7\u03a6\u03bd\u03a9\u03b4\u03c5\u03c3\u03b9\u0394\u03c1\u03f5\u03c9\u03f1\u03c2\u03c8\u03a0\u03c0\u03d1\u039e\u03ba\u03c6\u03c7\u03b6\u03a8\u03c4\u0393\u039b\u0398\u03a5\u03bc\u03b8\u03b1\u2113\u03b2\u03a3\u03be\u03bb\u03c6\u03b5]+)$\")\n\n(def ^:private superscript-pattern\n  #\"(.+)\u2191([0-9a-zA-Z\u03d6\u03b3\u03b7\u03a6\u03bd\u03a9\u03b4\u03c5\u03c3\u03b9\u0394\u03c1\u03f5\u03c9\u03f1\u03c2\u03c8\u03a0\u03c0\u03d1\u039e\u03ba\u03c6\u03c7\u03b6\u03a8\u03c4\u0393\u039b\u0398\u03a5\u03bc\u03b8\u03b1\u2113\u03b2\u03a3\u03be\u03bb\u03c6\u03b5]+)$\")\n\n(def ^{:private true\n       :doc \"Greek letter names we want to recognize that aren't supported by\n  TeX, mapped to their unicode characters.\"}\n  non-TeX-greek\n  {\"Alpha\" \"\u0391\"\n   \"Beta\" \"\u0392\"\n   \"Epsilon\" \"\u0395\"\n   \"Zeta\" \"\u0396\"\n   \"Eta\" \"\u0397\"\n   \"Iota\" \"\u0399\"\n   \"Kappa\" \"\u039a\"\n   \"Mu\" \"\u039c\"\n   \"Nu\" \"\u039d\"\n   \"omicron\" \"\u03bf\" \"Omicron\" \"O\"\n   \"Rho\" \"\u03a1\"\n   \"Tau\" \"\u03a4\"\n   \"Chi\" \"\u03a7\"})\n\n(def  ^{:private true\n        :doc \"Mapping of TeX-supported characters (Greek letter names and a few\n  others) to their corresponding unicode characters.\"}\n  sym->unicode\n  {\"alpha\" \"\u03b1\"\n   \"beta\" \"\u03b2\"\n   \"gamma\" \"\u03b3\" \"Gamma\" \"\u0393\"\n   \"delta\" \"\u03b4\" \"Delta\" \"\u0394\"\n   \"epsilon\" \"\u03b5\" \"varepsilon\" \"\u03f5\"\n   \"zeta\" \"\u03b6\"\n   \"eta\" \"\u03b7\"\n   \"theta\" \"\u03b8\" \"Theta\" \"\u0398\" \"vartheta\" \"\u03d1\"\n   \"iota\" \"\u03b9\"\n   \"kappa\" \"\u03ba\"\n   \"lambda\" \"\u03bb\" \"Lambda\" \"\u039b\"\n   \"mu\" \"\u03bc\"\n   \"nu\" \"\u03bd\"\n   \"xi\" \"\u03be\" \"Xi\" \"\u039e\"\n   \"pi\" \"\u03c0\" \"Pi\" \"\u03a0\" \"varpi\" \"\u03d6\"\n   \"rho\" \"\u03c1\" \"varrho\" \"\u03f1\"\n   \"sigma\" \"\u03c3\"  \"Sigma\" \"\u03a3\" \"varsigma\" \"\u03c2\"\n   \"tau\" \"\u03c4\"\n   \"upsilon\" \"\u03c5\" \"Upsilon\" \"\u03a5\"\n   \"phi\" \"\u03c6\" \"Phi\" \"\u03a6\" \"varphi\" \"\u03c6\"\n   \"chi\" \"\u03c7\"\n   \"psi\" \"\u03c8\" \"Psi\" \"\u03a8\"\n   \"omega\" \"\u03c9\" \"Omega\" \"\u03a9\"\n   \"ell\" \"\u2113\"\n   \"ldots\" \"...\"})\n\n(def ^{:private true\n       :doc \"Map of of TeX-compatible greek letter names to their \\\\-prefixed\n  LaTeX code versions. alpha -> \\\\alpha, for example.\"}\n  TeX-letters\n  (into {} (map (fn [[k]]\n                  [k (str \"\\\\\" k)]))\n        sym->unicode))\n\n(def ^{:private true\n       :doc \"Full mapping of special-cased TeX symbols to their TeX codes. This\n  includes all greek letters in both english ('alpha') and unicode ('\u03b1')\n  versions, plus a few more special-cased symbols.\"}\n  TeX-map\n  (let [sym->tex (->> (set/map-invert sym->unicode)\n                      (u/map-vals #(str \"\\\\\" %)))]\n    (merge TeX-letters\n           sym->tex\n           {\"sin\" \"\\\\sin\"\n            \"cos\" \"\\\\cos\"\n            \"tan\" \"\\\\tan\"\n            \"asin\" \"\\\\arcsin\"\n            \"acos\" \"\\\\arccos\"\n            \"atan\" \"\\\\arctan\"\n            \"sinh\" \"\\\\sinh\"\n            \"cosh\" \"\\\\sinh\"\n            \"tanh\" \"\\\\sinh\"\n            \"cot\" \"\\\\cot\"\n            \"sec\" \"\\\\sec\"\n            \"csc\" \"\\\\csc\"\n            \"_\" \"\\\\_\"})))\n\n(defn- digit->int\n  [^Character d]\n  #?(:clj (Character/digit d 10)\n     :cljs (js/parseInt d)))\n\n(defn- n->script\n  \"Given an integer, returns a string where each digit of the\n  integer is used as the index into the replacement map scripts,\n  which is expected to be indexable by integers in the range [0..9].\"\n  [n scripts]\n  (apply str (map #(-> % digit->int scripts)\n                  (str n))))\n\n(def ^:private n->subscript #(n->script % decimal-subscripts))\n(def ^:private n->superscript #(n->script % decimal-superscripts))\n\n(def infix-sym->unicode\n  (merge non-TeX-greek\n         sym->unicode))\n\n(defn- infinity->infix\n  \"Given some infinite value, returns a string representation of ##Inf or ##-Inf\n  appropriate for infix rendering, else returns `nil`.\"\n  [x]\n  (case x\n    ##Inf \"\u221e\"\n    ##-Inf \"-\u221e\"\n    nil))\n\n(def ^{:doc \"Converts an S-expression to printable infix form. Numeric exponents\n  are written as superscripts. Partial derivatives get subscripts.\"}\n  ->infix\n  (make-infix-renderer\n   :precedence-map '{D 9, partial 9,\n                     expt 8,\n                     :apply 7,\n                     u- 6,\n                     * 5, modulo 5, remainder 5, / 5,\n                     + 4, - 4, not 4,\n                     = 3, > 3, < 3, >= 3, <= 3,\n                     and 2, or 1}\n   :infix? '#{* + - / modulo remainder expt u- = > < >= <= and or}\n   :juxtapose-multiply \" \"\n   :rewrite-trig-squares true\n   :rename-functions\n   {'fractional-part \"frac\"\n    'integer-part \"int\"\n    'not \"\u00ac\"}\n   :special-handlers\n   {'floor (fn [[x]] (str \"\u230a\" x \"\u230b\"))\n    'ceiling (fn [[x]] (str \"\u2308\" x \"\u2309\"))\n    'modulo (fn [[x y]] (str x \" mod \" y))\n    'remainder (fn [[x y]] (str x \" % \" y))\n    'and (fn [[x y]] (str x \" \u2227 \" y))\n    'or  (fn [[x y]] (str x \" \u2228 \" y))\n    'expt (fn [[x e]]\n            (when (and (integer? e) ((complement neg?) e))\n              (str x (n->superscript e))))\n    'partial (fn [ds]\n               (when (and (= (count ds) 1) (integer? (first ds)))\n                 (str \"\u2202\" (n->subscript (first ds)))))\n    '/ render-infix-ratio}\n   :render-primitive\n   (fn r [v]\n     (or (infinity->infix v)\n         (let [s (str v)]\n           (or (infix-sym->unicode s)\n               (condp re-find s\n                 superscript-pattern\n                 :>> (fn [[_ stem superscript]]\n                       (if-let [n (re-matches #\"[0-9]+\" superscript)]\n                         (str (r stem) (n->superscript n))\n                         (str (r stem) \"\u2191\" (r superscript))))\n\n                 subscript-pattern\n                 :>> (fn [[_ stem subscript]]\n                       (if-let [n (re-matches #\"[0-9]+\" subscript)]\n                         (str (r stem) (n->subscript n))\n                         (str (r stem) \"_\" (r subscript))))\n                 v)))))))\n\n(defn- brace\n  \"Wrap the argument, as a string, in braces\"\n  [s]\n  (str \"{\" s \"}\"))\n\n(defn- maybe-brace\n  \"Wrap the argument in braces, as a string, unless it's just a single character\"\n  [s]\n  (if (and (string? s) (= (count s) 1))\n    s\n    (brace s)))\n\n(defn- infinity->tex\n  \"Given some infinite value, returns a (string) representation of the LaTeX\n  commands required to render ##Inf or ##-Inf.\n\n  Returns `nil` for all other inputs.\"\n  [x]\n  (case x\n    ##Inf \"\\\\infty\"\n    ##-Inf \"-\\\\infty\"\n    nil))\n\n(def ^{:dynamic true\n       :doc \"If true, [[->TeX]] will render down tuples as vertical matrices\n  with square braces. Defaults to false.\"}\n  *TeX-vertical-down-tuples*\n  false)\n\n(def ^{:dynamic true\n       :doc \"If true, [[->TeX]] will render symbols with more than 1 character\n  using a sans-serif typestyle via `\\\\mathsf`. Defaults to true.\"}\n  *TeX-sans-serif-symbols* true)\n\n(defn- displaystyle [s]\n  (str \"\\\\displaystyle{\" s \"}\"))\n\n(def ^:no-doc ->TeX*\n  (let [TeX-accent (fn [accent]\n                     (fn [[_ stem]]\n                       (str \"\\\\\" accent \" \" (maybe-brace\n                                             (->TeX* stem)))))\n        dot   (TeX-accent \"dot\")\n        ddot  (TeX-accent \"ddot\")\n        hat   (TeX-accent \"hat\")\n        bar   (TeX-accent \"bar\")\n        vec   (TeX-accent \"vec\")\n        tilde (TeX-accent \"tilde\")\n        prime (fn [[_ stem]]\n                (let [x (maybe-brace (->TeX* stem))]\n                  (str x \"^\\\\prime\")))\n        primeprime\n        (fn [[_ stem]]\n          (let [x (maybe-brace (->TeX* stem))]\n            (str x \"^{\\\\prime\\\\prime}\")))\n        parenthesize\n        #(str \"\\\\left(\" % \"\\\\right)\")]\n    (make-infix-renderer\n     ;; here we set / to a very low precedence because the fraction bar we will\n     ;; use in the rendering groups things very strongly.\n     :precedence-map '{D 9, partial 9,\n                       expt 8,\n                       :apply 7,\n                       u- 6,\n                       * 5, modulo 5, remainder 5,\n                       + 4, - 4,\n                       = 3, > 3, < 3, >= 3, <= 3,\n                       and 2, or 1, not 1, / 0}\n     :parenthesize parenthesize\n     :infix? '#{* + - / modulo remainder and or expt u- = > < >= <=}\n     :juxtapose-multiply \"\\\\,\"\n     :rewrite-trig-squares true\n     :special-handlers\n     {'floor\n      (fn [[x]]\n        (str \"\\\\left\\\\lfloor \" x \" \\\\right\\\\rfloor\"))\n\n      'ceiling\n      (fn [[x]]\n        (str \"\\\\left\\\\lceil \" x \" \\\\right\\\\rceil\"))\n\n      'integer-part\n      (fn [[x]]\n        (str \"\\\\mathsf{int} \" (parenthesize x)))\n\n      'fractional-part\n      (fn [[x]]\n        (str \"\\\\mathsf{frac} \" (parenthesize x)))\n\n      'modulo\n      (fn [[x y]]\n        (str (maybe-brace x) \" \\\\bmod \" (maybe-brace y)))\n\n      'remainder\n      (fn [[x y]]\n        (str (maybe-brace x) \" \\\\mathbin{\\\\%} \" (maybe-brace y)))\n\n      'and\n      (fn [[x y]]\n        (str x \" \\\\land \" y))\n\n      'or\n      (fn [[x y]]\n        (str x \" \\\\lor \" y))\n\n      'not\n      (fn [[x]]\n        (str \"\\\\lnot\" (parenthesize x)))\n\n      'exp\n      (fn [[e]]\n        (str \"\\\\exp\" (parenthesize e)))\n\n      'expt (fn [[x e]]\n              (str (maybe-brace x) \"^\" (maybe-brace e)))\n\n      'partial (fn [ds] (str \"\\\\partial_\" (maybe-brace (s/join \",\" ds))))\n      '/ (fn [xs]\n           (let [n (count xs)]\n             (cond (= n 1)\n                   (str \"\\\\frac\" (brace 1) (brace (first xs)))\n                   (= n 2)\n                   (str \"\\\\frac\" (brace (first xs)) (brace (second xs))))))\n      'up (fn [x]\n            (let [body (->> (map displaystyle x)\n                            (s/join \" \\\\cr \\\\cr \"))]\n              (str \"\\\\begin{pmatrix}\"\n                   body\n                   \"\\\\end{pmatrix}\")))\n      'down (fn [x]\n              (let [sep  (if *TeX-vertical-down-tuples*\n                           \" \\\\cr \\\\cr \"\n                           \"&\")\n                    body (->> (map displaystyle x)\n                              (s/join sep))]\n                (str \"\\\\begin{bmatrix}\"\n                     body\n                     \"\\\\end{bmatrix}\")))\n      'sqrt #(str \"\\\\sqrt \" (maybe-brace (first %)))\n      '<= #(s/join \" \\\\leq \" %)\n      '>= #(s/join \" \\\\geq \" %)}\n     :render-primitive\n     (fn r [v]\n       (if (r/ratio? v)\n         (str \"\\\\frac\" (brace (r/numerator v)) (brace (r/denominator v)))\n         (or (infinity->tex v)\n             (let [s (str v)]\n               (or (TeX-map s)\n                   (condp re-find s\n                     superscript-pattern\n                     :>> (fn [[_ stem superscript]]\n                           (str (maybe-brace (r stem))\n                                \"^\" (maybe-brace (r superscript))))\n\n                     subscript-pattern\n                     :>> (fn [[_ stem subscript]]\n                           (str (maybe-brace (r stem))\n                                \"_\" (maybe-brace (r subscript))))\n\n                     ;; KaTeX doesn't do \\dddot.\n                     #\"(.+)dotdot$\" :>> ddot\n                     #\"(.+)dot$\" :>> dot\n                     #\"(.+)hat$\" :>> hat\n                     #\"(.+)primeprime$\" :>> primeprime\n                     #\"(.+)prime$\" :>> prime\n                     #\"(.+)bar$\" :>> bar\n                     #\"(.+)vec$\" :>> vec\n                     #\"(.+)tilde$\" :>> tilde\n                     ;; wrap it if it's a multiletter variable... unless it looks\n                     ;; like a differential. (Too hacky?)\n                     (if (and (symbol? v)\n                              (> (count s) 1)\n                              (not (re-matches #\"^d[a-z\u03b1\u03c9\u03b8\u03c6]\" s)))\n                       (if *TeX-sans-serif-symbols*\n                         (str \"\\\\mathsf\" (brace s))\n                         (brace s))\n                       v))))))))))\n\n(defn ->TeX\n  \"Convert the given expression to TeX format, as a string.\n\n  If you set the `:equation` keyword argument to a truthy value, the result will\n  be wrapped in an equation environment. `:equation <string>` will insert a\n  `\\\\label{<string>}` entry inside the equation environment.\n\n  For example:\n\n  ```clojure\n  (let [expr (+ 'x 'xy)]\n    (println\n      (->TeX expr :equation \\\"label!\\\")))\n\n  \\\\begin{equation}\n  \\\\label{label!}\n  x + y\n  \\\\end{equation}\n  ```\n  \"\n  [expr & {:keys [equation]}]\n  (let [tex-string (->TeX* expr)]\n    (if equation\n      (let [label (if (and (string? equation)\n                           (seq equation))\n                    (str \"\\\\label{\" equation \"}\\n\")\n                    \"\")]\n        (str \"\\\\begin{equation}\\n\"\n             label tex-string\n             \"\\n\\\\end{equation}\"))\n      tex-string)))\n\n(def ^{:doc \"Convert the given expression to a string representation of a\n  JavaScript function.\n\n  Parameters to the function will be extracted from the symbols in the expression.\n  Common subexpression elimination will be performed and auxiliary variables\n  will be bound in the body of the function; the names of these symbols are\n  obtained from the nullary function option :symbol-generator, which defaults to\n  a function yielding `_1, ...`.\n\n  If `:parameter-order` is specified, it is used to determine function parameter\n  order in one of two ways:\n\n  If it is set to a function, that function will be called on the sequence of\n  parameters and is expected to return the parameters in the desired sequence.\n\n  Otherwise, it is interpreted as the sequence of parameters itself. If not\n  specified, the default behavior is `sort`.\n\n  If `:deterministic? true` is supplied, the function will assign variables by\n  sorting the string representations of each term before assignment. Otherwise,\n  the nondeterministic order of hash maps inside this function won't guarantee a\n  consistent variable naming convention in the returned function. For tests, set\n  `:deterministic? true`.\"}\n  ->JavaScript\n  (let [operators-known '#{+ - * /\n                           sin cos tan\n                           asin acos atan\n                           cosh sinh tanh\n                           asinh acosh atanh\n                           sqrt abs expt\n                           exp log\n                           up down}\n        make-js-vector #(str \\[ (s/join \", \" %) \\])\n        R (make-infix-renderer\n           :precedence-map '{not 9, D 8, :apply 8, * 5, / 5, - 3, + 3,\n                             = 2, > 2, < 2, >= 2, <= 2,\n                             and 1, or 1}\n           :infix? '#{* + - / u- =}\n           :rename-functions {'sin \"Math.sin\"\n                              'cos \"Math.cos\"\n                              'tan \"Math.tan\"\n                              'asin \"Math.asin\"\n                              'acos \"Math.acos\"\n                              'atan \"Math.atan\"\n                              'cosh \"Math.cosh\"\n                              'sinh \"Math.sinh\"\n                              'tanh \"Math.tanh\"\n                              'asinh \"Math.asinh\"\n                              'acosh \"Math.acosh\"\n                              'atanh \"Math.atanh\"\n                              'sqrt \"Math.sqrt\"\n                              'abs \"Math.abs\"\n                              'expt \"Math.pow\"\n                              'log \"Math.log\"\n                              'exp \"Math.exp\"\n                              'floor \"Math.floor\"\n                              'ceiling \"Math.ceil\"\n                              'integer-part \"Math.trunc\"\n                              'not \"!\"}\n           :special-handlers (let [parens (fn [x]\n                                            (str \"(\" x \")\"))]\n                               {'up make-js-vector\n                                'down make-js-vector\n                                'modulo (fn [[a b]]\n                                          (-> (str a \" % \" b)\n                                              (parens)\n                                              (str \" + \" b)\n                                              (parens)\n                                              (str \" % \" b)\n                                              (parens)))\n                                'remainder (fn [[a b]]\n                                             (str a \" % \" b))\n                                'and (fn [[a b]] (str a \" && \" b))\n                                'or (fn [[a b]] (str a \" || \" b))\n                                '/ render-infix-ratio}))]\n    (fn [x & {:keys [symbol-generator\n                    parameter-order\n                    deterministic?]\n             :or {symbol-generator (make-symbol-generator \"_\")\n                  parameter-order sort}}]\n      (let [x      (v/freeze x)\n            ;; TODO\n            params (set/difference (x/variables-in x) operators-known)\n            ordered-params (if (fn? parameter-order)\n                             (parameter-order params)\n                             parameter-order)\n            callback (fn [new-expression new-vars]\n                       (doseq [[var val] new-vars]\n                         (print \" let \")\n                         (print (str var \" = \"))\n                         (print (R val))\n                         (print \";\\n\"))\n                       (print \"  return \")\n                       (print (R new-expression))\n                       (print \";\\n}\"))\n            opts {:deterministic?   deterministic?\n                  :symbol-generator symbol-generator}]\n        (with-out-str\n          (print \"function(\")\n          (print (s/join \", \" ordered-params))\n          (print \") {\\n\")\n          (compile/extract-common-subexpressions x callback opts))))))\n"]}