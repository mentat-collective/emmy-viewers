{"version":3,"sources":["sci/impl/reify.cljc"],"mappings":";AAKA,AAAA,uBAAA,+BAAAA,tDAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,4DAAA,5DAAME,uEAAOQ,KAAKC,EAAEC,KAAOC;AAA3B,AACE,IAAAC,aAAmC,AAACS,mBAASC,wBAAQX;IAArDC,iBAAA,AAAAC,4BAAAD;cAAA,AAAAE,4CAAAF,eAAA,rEAAOO;eAAP,AAAAL,4CAAAF,eAAA,tEAAoBQ;IACdA,+FACa,AAACG,4CAAI,WAAAC,vIAKL,6CAAA,7CAACU;AALI,AAAA,IAAAT,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEAAME;aAAN,AAAAD,4CAAAD,WAAA,IAAA,pEAAWG;AAAX,AACE,IAAMD,WAAK,EAAI,AAACG,+BAAeH,OAClBA,KACA,AAACI,+CAAO,AAACC,eAAKL;AAF3B,AAAA,OAAAE,cAAA,AAAAd,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,2DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,cAAA,KAAA,IAAA,UAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,uEAAA,KAAA,IAAA,6EAAA,KAAA,IAAA,lXAGMS,mSAAW,AAACJ,4CAAIU,eAAKL;GALlC,AAACP,mBAASlB,gBAAMiB;AADnC,AAAA,OAAAL,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,8EAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,2DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,UAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,4BAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,kBAAA,KAAA,IAAA,zMAQ0BV,mHAAM,AAACqB,cAAIV,kDAAUC;;;AATjD,CAAA,+CAAA,/CAAMpB;;AAAN;AAAA,CAAA,yCAAA,WAAAC,pDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAG,SAAAC,SAAAL;;;AAAA,AAWA,6BAAA,7BAAMkC,kEAEMzB,KAAK0B,MAAMjB,QAAQC;AAF/B,AAcW,OAACiB,4BAAYlB,QAAQC,SAAQ,AAACkB,cAAInB","names":["var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sci.impl.reify/reify","seq91492","G__91493","cljs.core/first","cljs.core/next","G__91494","G__91495","self__4851__auto__","form","_","_ctx","args","map__91499","cljs.core/--destructure-map","cljs.core.get","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","classes","methods","cljs.core/group-by","cljs.core/symbol?","cljs.core.map","p__91500","vec__91501","cljs.core.nth","meth","bodies","cljs.core/vec","cljs.core/simple-symbol?","cljs.core.symbol","cljs.core/name","cljs.core/rest","cljs.core.into","sci.impl.reify/reify*","_form","sci.impl.types/->Reified","cljs.core/set"],"sourcesContent":["(ns sci.impl.reify\n  {:no-doc true}\n  (:refer-clojure :exclude [reify])\n  #?(:cljs (:require [sci.impl.types :as t])))\n\n(defn reify [form _ _ctx & args]\n  (let [{classes true methods false} (group-by symbol? args)\n        methods (->> (group-by first methods)\n                     (map (fn [[meth bodies]]\n                            (let [meth (if (simple-symbol? meth)\n                                         meth\n                                         (symbol (name meth)))]\n                              `['~meth (fn ~@(map rest bodies))])))\n                     (into {}))]\n    `(clojure.core/reify* '~form ~(vec classes) ~methods)))\n\n(defn reify*\n  #?(:clj [ctx form classes methods]\n     :cljs [_ctx _form classes methods])\n     #?(:clj (let [{interfaces true protocols false} (group-by class? classes)]\n            (if-let [factory (:reify-fn ctx)]\n              (with-meta (factory {:interfaces (set interfaces)\n                                   :methods methods\n                                   :protocols (set protocols)})\n                (meta form))\n              (throw (ex-info (str \"No reify factory for: \" interfaces)\n                              {:class class}))))\n     ;; NOTE: in CLJS everything is a protocol in reify, except Object\n     ;; So it's probably better if we dissoc-ed that from the set of classes\n     ;; However, we only use that set to test in satisfies?\n     :cljs (t/->Reified classes methods (set classes))))\n"]}