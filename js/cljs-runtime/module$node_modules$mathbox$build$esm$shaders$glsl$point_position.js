shadow$provide.module$node_modules$mathbox$build$esm$shaders$glsl$point_position=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;exports.default="uniform float pointDepth;\n\nuniform float pixelUnit;\nuniform float renderScale;\nuniform float renderScaleInv;\nuniform float focusDepth;\n\nuniform vec4 geometryClip;\nattribute vec4 position4;\nattribute vec2 sprite;\n\nvarying vec2 vSprite;\nvarying float vPixelSize;\n\nconst float pointScale \x3d POINT_SHAPE_SCALE;\n\n// External\nfloat getPointSize(vec4 xyzw);\nvec3 getPosition(vec4 xyzw, float canonical);\n\nvec3 getPointPosition() {\n  // Discard out-of-range points by generating degenerate face\n  if (\n    position4.x \x3e geometryClip.x ||\n    position4.y \x3e geometryClip.y ||\n    position4.z \x3e geometryClip.z ||\n    position4.w \x3e geometryClip.w\n  ) return vec3(0.0, 0.0, 0.0);\n  vec4 p \x3d position4;\n\n  vec3 center \x3d getPosition(p, 1.0);\n\n  // Depth blending\n  // TODO: orthographic camera\n  // Workaround: set depth \x3d 0\n  float z \x3d -center.z;\n  float depth \x3d mix(z, focusDepth, pointDepth);\n\n  // Match device/unit mapping\n  // Sprite goes from -1..1, width \x3d 2.\n  float pointSize \x3d getPointSize(p);\n  float size \x3d pointScale * pointSize * pixelUnit * .5;\n  float depthSize \x3d depth * size;\n\n  // Pad sprite by half a pixel to make the anti-aliasing straddle the pixel edge\n  // Note: pixelsize measures radius\n  float pixelSize \x3d .5 * (pointDepth \x3e 0.0 ? depthSize / z : size);\n  float paddedSize \x3d pixelSize + 0.5;\n  float padFactor \x3d paddedSize / pixelSize;\n\n  vPixelSize \x3d paddedSize;\n  vSprite    \x3d sprite;\n\n  return center + vec3(sprite * depthSize * renderScaleInv * padFactor, 0.0);\n}\n"}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$shaders$glsl$point_position.js.map
