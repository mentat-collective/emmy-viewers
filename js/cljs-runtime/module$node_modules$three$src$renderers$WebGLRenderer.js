shadow$provide.module$node_modules$three$src$renderers$WebGLRenderer=function(global,require,module,exports){function createCanvasElement(){const canvas=(0,_utils.createElementNS)("canvas");canvas.style.display="block";return canvas}function WebGLRenderer(parameters$jscomp$0={}){function getContext(contextNames,contextAttributes){for(let i=0;i<contextNames.length;i++){const context=_canvas.getContext(contextNames[i],contextAttributes);if(null!==context)return context}return null}function initGLContext(){extensions=
new _WebGLExtensions.WebGLExtensions(_gl);capabilities=new _WebGLCapabilities.WebGLCapabilities(_gl,extensions,parameters$jscomp$0);extensions.init(capabilities);utils=new _WebGLUtils.WebGLUtils(_gl,extensions,capabilities);state=new _WebGLState.WebGLState(_gl,extensions,capabilities);info=new _WebGLInfo.WebGLInfo(_gl);properties=new _WebGLProperties.WebGLProperties;textures=new _WebGLTextures.WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info);cubemaps=new _WebGLCubeMaps.WebGLCubeMaps(_this);
cubeuvmaps=new _WebGLCubeUVMaps.WebGLCubeUVMaps(_this);attributes=new _WebGLAttributes.WebGLAttributes(_gl,capabilities);bindingStates=new _WebGLBindingStates.WebGLBindingStates(_gl,extensions,attributes,capabilities);geometries=new _WebGLGeometries.WebGLGeometries(_gl,attributes,info,bindingStates);objects=new _WebGLObjects.WebGLObjects(_gl,geometries,attributes,info);morphtargets=new _WebGLMorphtargets.WebGLMorphtargets(_gl,capabilities,textures);clipping=new _WebGLClipping.WebGLClipping(properties);
programCache=new _WebGLPrograms.WebGLPrograms(_this,cubemaps,cubeuvmaps,extensions,capabilities,bindingStates,clipping);materials=new _WebGLMaterials.WebGLMaterials(properties);renderLists=new _WebGLRenderLists.WebGLRenderLists;renderStates=new _WebGLRenderStates.WebGLRenderStates(extensions,capabilities);background=new _WebGLBackground.WebGLBackground(_this,cubemaps,state,objects,_alpha,_premultipliedAlpha);shadowMap=new _WebGLShadowMap.WebGLShadowMap(_this,objects,capabilities);bufferRenderer=new _WebGLBufferRenderer.WebGLBufferRenderer(_gl,
extensions,info,capabilities);indexedBufferRenderer=new _WebGLIndexedBufferRenderer.WebGLIndexedBufferRenderer(_gl,extensions,info,capabilities);info.programs=programCache.programs;_this.capabilities=capabilities;_this.extensions=extensions;_this.properties=properties;_this.renderLists=renderLists;_this.shadowMap=shadowMap;_this.state=state;_this.info=info}function onContextLost(event){event.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");_isContextLost=!0}function onContextRestore(){console.log("THREE.WebGLRenderer: Context Restored.");
_isContextLost=!1;const infoAutoReset=info.autoReset,shadowMapEnabled=shadowMap.enabled,shadowMapAutoUpdate=shadowMap.autoUpdate,shadowMapNeedsUpdate=shadowMap.needsUpdate,shadowMapType=shadowMap.type;initGLContext();info.autoReset=infoAutoReset;shadowMap.enabled=shadowMapEnabled;shadowMap.autoUpdate=shadowMapAutoUpdate;shadowMap.needsUpdate=shadowMapNeedsUpdate;shadowMap.type=shadowMapType}function onMaterialDispose(event){event=event.target;event.removeEventListener("dispose",onMaterialDispose);
releaseMaterialProgramReferences(event);properties.remove(event)}function releaseMaterialProgramReferences(material){const programs=properties.get(material).programs;void 0!==programs&&(programs.forEach(function(program){programCache.releaseProgram(program)}),material.isShaderMaterial&&programCache.releaseShaderCache(material))}function onXRSessionStart(){animation.stop()}function onXRSessionEnd(){animation.start()}function projectObject(object,camera,groupOrder,sortObjects){if(!1!==object.visible){if(object.layers.test(camera.layers))if(object.isGroup)groupOrder=
object.renderOrder;else if(object.isLOD)!0===object.autoUpdate&&object.update(camera);else if(object.isLight)currentRenderState.pushLight(object),object.castShadow&&currentRenderState.pushShadow(object);else if(object.isSprite){if(!object.frustumCulled||_frustum.intersectsSprite(object)){sortObjects&&_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);var geometry=objects.update(object),material=object.material;material.visible&&currentRenderList$jscomp$0.push(object,
geometry,material,groupOrder,_vector3.z,null)}}else if(object.isMesh||object.isLine||object.isPoints)if(object.isSkinnedMesh&&object.skeleton.frame!==info.render.frame&&(object.skeleton.update(),object.skeleton.frame=info.render.frame),!object.frustumCulled||_frustum.intersectsObject(object))if(sortObjects&&_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix),geometry=objects.update(object),material=object.material,Array.isArray(material)){const groups=geometry.groups;
for(let i=0,l=groups.length;i<l;i++){const group=groups[i],groupMaterial=material[group.materialIndex];groupMaterial&&groupMaterial.visible&&currentRenderList$jscomp$0.push(object,geometry,groupMaterial,groupOrder,_vector3.z,group)}}else material.visible&&currentRenderList$jscomp$0.push(object,geometry,material,groupOrder,_vector3.z,null);object=object.children;for(let i=0,l=object.length;i<l;i++)projectObject(object[i],camera,groupOrder,sortObjects)}}function renderScene(currentRenderList,scene,
camera,viewport){const opaqueObjects=currentRenderList.opaque,transmissiveObjects=currentRenderList.transmissive;currentRenderList=currentRenderList.transparent;currentRenderState.setupLightsView(camera);if(0<transmissiveObjects.length){null===_transmissionRenderTarget&&(_transmissionRenderTarget=new (!0===_antialias&&!0===capabilities.isWebGL2?_WebGLMultisampleRenderTarget.WebGLMultisampleRenderTarget:_WebGLRenderTarget.WebGLRenderTarget)(1024,1024,{generateMipmaps:!0,type:null!==utils.convert(_constants.HalfFloatType)?
_constants.HalfFloatType:_constants.UnsignedByteType,minFilter:_constants.LinearMipmapLinearFilter,magFilter:_constants.NearestFilter,wrapS:_constants.ClampToEdgeWrapping,wrapT:_constants.ClampToEdgeWrapping,useRenderToTexture:extensions.has("WEBGL_multisampled_render_to_texture")}));const currentRenderTarget=_this.getRenderTarget();_this.setRenderTarget(_transmissionRenderTarget);_this.clear();const currentToneMapping=_this.toneMapping;_this.toneMapping=_constants.NoToneMapping;renderObjects(opaqueObjects,
scene,camera);_this.toneMapping=currentToneMapping;textures.updateMultisampleRenderTarget(_transmissionRenderTarget);textures.updateRenderTargetMipmap(_transmissionRenderTarget);_this.setRenderTarget(currentRenderTarget)}viewport&&state.viewport(_currentViewport.copy(viewport));0<opaqueObjects.length&&renderObjects(opaqueObjects,scene,camera);0<transmissiveObjects.length&&renderObjects(transmissiveObjects,scene,camera);0<currentRenderList.length&&renderObjects(currentRenderList,scene,camera)}function renderObjects(renderList,
scene,camera$jscomp$0){const overrideMaterial=!0===scene.isScene?scene.overrideMaterial:null;for(let i=0,l=renderList.length;i<l;i++){var renderItem=renderList[i],object=renderItem.object,geometry=renderItem.geometry,material=null===overrideMaterial?renderItem.material:overrideMaterial,group=renderItem.group;if(object.layers.test(camera$jscomp$0.layers)){renderItem=scene;var camera=camera$jscomp$0;object.onBeforeRender(_this,renderItem,camera,geometry,material,group);object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,
object.matrixWorld);object.normalMatrix.getNormalMatrix(object.modelViewMatrix);material.onBeforeRender(_this,renderItem,camera,geometry,object,group);!0===material.transparent&&material.side===_constants.DoubleSide?(material.side=_constants.BackSide,material.needsUpdate=!0,_this.renderBufferDirect(camera,renderItem,geometry,material,object,group),material.side=_constants.FrontSide,material.needsUpdate=!0,_this.renderBufferDirect(camera,renderItem,geometry,material,object,group),material.side=_constants.DoubleSide):
_this.renderBufferDirect(camera,renderItem,geometry,material,object,group);object.onAfterRender(_this,renderItem,camera,geometry,material,group)}}}function getProgram(material,scene,object){!0!==scene.isScene&&(scene=_emptyScene);const materialProperties=properties.get(material),lights=currentRenderState.state.lights,lightsStateVersion=lights.state.version,parameters=programCache.getParameters(material,lights.state,currentRenderState.state.shadowsArray,scene,object),programCacheKey=programCache.getProgramCacheKey(parameters);
let programs=materialProperties.programs;materialProperties.environment=material.isMeshStandardMaterial?scene.environment:null;materialProperties.fog=scene.fog;materialProperties.envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||materialProperties.environment);void 0===programs&&(material.addEventListener("dispose",onMaterialDispose),programs=new Map,materialProperties.programs=programs);scene=programs.get(programCacheKey);if(void 0!==scene){if(materialProperties.currentProgram===
scene&&materialProperties.lightsStateVersion===lightsStateVersion)return updateCommonMaterialProperties(material,parameters),scene}else parameters.uniforms=programCache.getUniforms(material),material.onBuild(object,parameters,_this),material.onBeforeCompile(parameters,_this),scene=programCache.acquireProgram(parameters,programCacheKey),programs.set(programCacheKey,scene),materialProperties.uniforms=parameters.uniforms;object=materialProperties.uniforms;if(!material.isShaderMaterial&&!material.isRawShaderMaterial||
!0===material.clipping)object.clippingPlanes=clipping.uniform;updateCommonMaterialProperties(material,parameters);materialProperties.needsLights=material.isMeshLambertMaterial||material.isMeshToonMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial||material.isShadowMaterial||material.isShaderMaterial&&!0===material.lights;materialProperties.lightsStateVersion=lightsStateVersion;materialProperties.needsLights&&(object.ambientLightColor.value=lights.state.ambient,object.lightProbe.value=
lights.state.probe,object.directionalLights.value=lights.state.directional,object.directionalLightShadows.value=lights.state.directionalShadow,object.spotLights.value=lights.state.spot,object.spotLightShadows.value=lights.state.spotShadow,object.rectAreaLights.value=lights.state.rectArea,object.ltc_1.value=lights.state.rectAreaLTC1,object.ltc_2.value=lights.state.rectAreaLTC2,object.pointLights.value=lights.state.point,object.pointLightShadows.value=lights.state.pointShadow,object.hemisphereLights.value=
lights.state.hemi,object.directionalShadowMap.value=lights.state.directionalShadowMap,object.directionalShadowMatrix.value=lights.state.directionalShadowMatrix,object.spotShadowMap.value=lights.state.spotShadowMap,object.spotShadowMatrix.value=lights.state.spotShadowMatrix,object.pointShadowMap.value=lights.state.pointShadowMap,object.pointShadowMatrix.value=lights.state.pointShadowMatrix);material=scene.getUniforms();material=_WebGLUniforms.WebGLUniforms.seqWithValue(material.seq,object);materialProperties.currentProgram=
scene;materialProperties.uniformsList=material;return scene}function updateCommonMaterialProperties(material,parameters){material=properties.get(material);material.outputEncoding=parameters.outputEncoding;material.instancing=parameters.instancing;material.skinning=parameters.skinning;material.morphTargets=parameters.morphTargets;material.morphNormals=parameters.morphNormals;material.morphTargetsCount=parameters.morphTargetsCount;material.numClippingPlanes=parameters.numClippingPlanes;material.numIntersection=
parameters.numClipIntersection;material.vertexAlphas=parameters.vertexAlphas;material.vertexTangents=parameters.vertexTangents;material.toneMapping=parameters.toneMapping}const _canvas=void 0!==parameters$jscomp$0.canvas?parameters$jscomp$0.canvas:createCanvasElement();var _context=void 0!==parameters$jscomp$0.context?parameters$jscomp$0.context:null;const _alpha=void 0!==parameters$jscomp$0.alpha?parameters$jscomp$0.alpha:!1;var _depth=void 0!==parameters$jscomp$0.depth?parameters$jscomp$0.depth:
!0;const _stencil=void 0!==parameters$jscomp$0.stencil?parameters$jscomp$0.stencil:!0,_antialias=void 0!==parameters$jscomp$0.antialias?parameters$jscomp$0.antialias:!1,_premultipliedAlpha=void 0!==parameters$jscomp$0.premultipliedAlpha?parameters$jscomp$0.premultipliedAlpha:!0,_preserveDrawingBuffer=void 0!==parameters$jscomp$0.preserveDrawingBuffer?parameters$jscomp$0.preserveDrawingBuffer:!1,_powerPreference=void 0!==parameters$jscomp$0.powerPreference?parameters$jscomp$0.powerPreference:"default",
_failIfMajorPerformanceCaveat=void 0!==parameters$jscomp$0.failIfMajorPerformanceCaveat?parameters$jscomp$0.failIfMajorPerformanceCaveat:!1;let currentRenderList$jscomp$0=null,currentRenderState=null;const renderListStack=[],renderStateStack=[];this.domElement=_canvas;this.debug={checkShaderErrors:!0};this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.clippingPlanes=[];this.localClippingEnabled=!1;this.outputEncoding=_constants.LinearEncoding;this.physicallyCorrectLights=
!1;this.toneMapping=_constants.NoToneMapping;this.toneMappingExposure=1;const _this=this;let _isContextLost=!1,_currentActiveCubeFace=0,_currentActiveMipmapLevel=0,_currentRenderTarget=null,_currentMaterialId=-1,_currentCamera=null;const _currentViewport=new _Vector2.Vector4,_currentScissor=new _Vector2.Vector4;let _currentScissorTest=null,_width=_canvas.width,_height=_canvas.height,_pixelRatio=1,_opaqueSort=null,_transparentSort=null;const _viewport=new _Vector2.Vector4(0,0,_width,_height),_scissor=
new _Vector2.Vector4(0,0,_width,_height);let _scissorTest=!1;const _frustum=new _Frustum.Frustum;let _clippingEnabled=!1,_localClippingEnabled=!1,_transmissionRenderTarget=null;const _projScreenMatrix=new _Matrix.Matrix4,_vector3=new _Vector.Vector3,_emptyScene={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let _gl=_context;try{_context={alpha:!0,depth:_depth,stencil:_stencil,antialias:_antialias,premultipliedAlpha:_premultipliedAlpha,preserveDrawingBuffer:_preserveDrawingBuffer,
powerPreference:_powerPreference,failIfMajorPerformanceCaveat:_failIfMajorPerformanceCaveat};"setAttribute"in _canvas&&_canvas.setAttribute("data-engine",`three.js r${_constants.REVISION}`);_canvas.addEventListener("webglcontextlost",onContextLost,!1);_canvas.addEventListener("webglcontextrestored",onContextRestore,!1);if(null===_gl&&(_depth=["webgl2","webgl","experimental-webgl"],!0===_this.isWebGL1Renderer&&_depth.shift(),_gl=getContext(_depth,_context),null===_gl)){if(getContext(_depth))throw Error("Error creating WebGL context with your selected attributes.");
throw Error("Error creating WebGL context.");}void 0===_gl.getShaderPrecisionFormat&&(_gl.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(error){throw console.error("THREE.WebGLRenderer: "+error.message),error;}let extensions,capabilities,state,info,properties,textures,cubemaps,cubeuvmaps,attributes,geometries,objects,programCache,materials,renderLists,renderStates,clipping,shadowMap,background,morphtargets,bufferRenderer,indexedBufferRenderer,utils,bindingStates;
initGLContext();const xr=new _WebXRManager.WebXRManager(_this,_gl);this.xr=xr;this.getContext=function(){return _gl};this.getContextAttributes=function(){return _gl.getContextAttributes()};this.forceContextLoss=function(){const extension=extensions.get("WEBGL_lose_context");extension&&extension.loseContext()};this.forceContextRestore=function(){const extension=extensions.get("WEBGL_lose_context");extension&&extension.restoreContext()};this.getPixelRatio=function(){return _pixelRatio};this.setPixelRatio=
function(value){void 0!==value&&(_pixelRatio=value,this.setSize(_width,_height,!1))};this.getSize=function(target){return target.set(_width,_height)};this.setSize=function(width,height,updateStyle){xr.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(_width=width,_height=height,_canvas.width=Math.floor(width*_pixelRatio),_canvas.height=Math.floor(height*_pixelRatio),!1!==updateStyle&&(_canvas.style.width=width+"px",_canvas.style.height=height+"px"),
this.setViewport(0,0,width,height))};this.getDrawingBufferSize=function(target){return target.set(_width*_pixelRatio,_height*_pixelRatio).floor()};this.setDrawingBufferSize=function(width,height,pixelRatio){_width=width;_height=height;_pixelRatio=pixelRatio;_canvas.width=Math.floor(width*pixelRatio);_canvas.height=Math.floor(height*pixelRatio);this.setViewport(0,0,width,height)};this.getCurrentViewport=function(target){return target.copy(_currentViewport)};this.getViewport=function(target){return target.copy(_viewport)};
this.setViewport=function(x,y,width,height){x.isVector4?_viewport.set(x.x,x.y,x.z,x.w):_viewport.set(x,y,width,height);state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor())};this.getScissor=function(target){return target.copy(_scissor)};this.setScissor=function(x,y,width,height){x.isVector4?_scissor.set(x.x,x.y,x.z,x.w):_scissor.set(x,y,width,height);state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor())};this.getScissorTest=function(){return _scissorTest};
this.setScissorTest=function(boolean){state.setScissorTest(_scissorTest=boolean)};this.setOpaqueSort=function(method){_opaqueSort=method};this.setTransparentSort=function(method){_transparentSort=method};this.getClearColor=function(target){return target.copy(background.getClearColor())};this.setClearColor=function(){background.setClearColor.apply(background,arguments)};this.getClearAlpha=function(){return background.getClearAlpha()};this.setClearAlpha=function(){background.setClearAlpha.apply(background,
arguments)};this.clear=function(color,depth,stencil){let bits=0;if(void 0===color||color)bits|=_gl.COLOR_BUFFER_BIT;if(void 0===depth||depth)bits|=_gl.DEPTH_BUFFER_BIT;if(void 0===stencil||stencil)bits|=_gl.STENCIL_BUFFER_BIT;_gl.clear(bits)};this.clearColor=function(){this.clear(!0,!1,!1)};this.clearDepth=function(){this.clear(!1,!0,!1)};this.clearStencil=function(){this.clear(!1,!1,!0)};this.dispose=function(){_canvas.removeEventListener("webglcontextlost",onContextLost,!1);_canvas.removeEventListener("webglcontextrestored",
onContextRestore,!1);renderLists.dispose();renderStates.dispose();properties.dispose();cubemaps.dispose();cubeuvmaps.dispose();objects.dispose();bindingStates.dispose();programCache.dispose();xr.dispose();xr.removeEventListener("sessionstart",onXRSessionStart);xr.removeEventListener("sessionend",onXRSessionEnd);_transmissionRenderTarget&&(_transmissionRenderTarget.dispose(),_transmissionRenderTarget=null);animation.stop()};this.renderBufferDirect=function(camera,scene,geometry,material,object,group){null===
scene&&(scene=_emptyScene);var frontFaceCW=object.isMesh&&0>object.matrixWorld.determinant();var JSCompiler_inline_result=scene;!0!==JSCompiler_inline_result.isScene&&(JSCompiler_inline_result=_emptyScene);textures.resetTextureUnits();scene=JSCompiler_inline_result.fog;var environment=material.isMeshStandardMaterial?JSCompiler_inline_result.environment:null,encoding=null===_currentRenderTarget?_this.outputEncoding:!0===_currentRenderTarget.isXRRenderTarget?_currentRenderTarget.texture.encoding:_constants.LinearEncoding,
envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||environment),vertexAlphas=!0===material.vertexColors&&!!geometry.attributes.color&&4===geometry.attributes.color.itemSize,vertexTangents=!!material.normalMap&&!!geometry.attributes.tangent;const morphTargets=!!geometry.morphAttributes.position,morphNormals=!!geometry.morphAttributes.normal,morphTargetsCount=geometry.morphAttributes.position?geometry.morphAttributes.position.length:0,toneMapping=material.toneMapped?_this.toneMapping:
_constants.NoToneMapping;environment=properties.get(material);const lights=currentRenderState.state.lights;!0!==_clippingEnabled||!0!==_localClippingEnabled&&camera===_currentCamera||clipping.setState(material,camera,camera===_currentCamera&&material.id===_currentMaterialId);var needsProgramChange=!1;material.version===environment.__version?environment.needsLights&&environment.lightsStateVersion!==lights.state.version?needsProgramChange=!0:environment.outputEncoding!==encoding?needsProgramChange=
!0:object.isInstancedMesh&&!1===environment.instancing?needsProgramChange=!0:object.isInstancedMesh||!0!==environment.instancing?object.isSkinnedMesh&&!1===environment.skinning?needsProgramChange=!0:object.isSkinnedMesh||!0!==environment.skinning?environment.envMap!==envMap?needsProgramChange=!0:material.fog&&environment.fog!==scene?needsProgramChange=!0:void 0===environment.numClippingPlanes||environment.numClippingPlanes===clipping.numPlanes&&environment.numIntersection===clipping.numIntersection?
environment.vertexAlphas!==vertexAlphas?needsProgramChange=!0:environment.vertexTangents!==vertexTangents?needsProgramChange=!0:environment.morphTargets!==morphTargets?needsProgramChange=!0:environment.morphNormals!==morphNormals?needsProgramChange=!0:environment.toneMapping!==toneMapping?needsProgramChange=!0:!0===capabilities.isWebGL2&&environment.morphTargetsCount!==morphTargetsCount&&(needsProgramChange=!0):needsProgramChange=!0:needsProgramChange=!0:needsProgramChange=!0:(needsProgramChange=
!0,environment.__version=material.version);encoding=environment.currentProgram;!0===needsProgramChange&&(encoding=getProgram(material,JSCompiler_inline_result,object));vertexAlphas=envMap=vertexTangents=!1;JSCompiler_inline_result=encoding.getUniforms();needsProgramChange=environment.uniforms;state.useProgram(encoding.program)&&(vertexAlphas=envMap=vertexTangents=!0);material.id!==_currentMaterialId&&(_currentMaterialId=material.id,envMap=!0);if(vertexTangents||_currentCamera!==camera){JSCompiler_inline_result.setValue(_gl,
"projectionMatrix",camera.projectionMatrix);capabilities.logarithmicDepthBuffer&&JSCompiler_inline_result.setValue(_gl,"logDepthBufFC",2/(Math.log(camera.far+1)/Math.LN2));_currentCamera!==camera&&(_currentCamera=camera,vertexAlphas=envMap=!0);if(material.isShaderMaterial||material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshStandardMaterial||material.envMap)vertexTangents=JSCompiler_inline_result.map.cameraPosition,void 0!==vertexTangents&&vertexTangents.setValue(_gl,_vector3.setFromMatrixPosition(camera.matrixWorld));
(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial)&&JSCompiler_inline_result.setValue(_gl,"isOrthographic",!0===camera.isOrthographicCamera);(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial||material.isShadowMaterial||object.isSkinnedMesh)&&
JSCompiler_inline_result.setValue(_gl,"viewMatrix",camera.matrixWorldInverse)}object.isSkinnedMesh&&(JSCompiler_inline_result.setOptional(_gl,object,"bindMatrix"),JSCompiler_inline_result.setOptional(_gl,object,"bindMatrixInverse"),camera=object.skeleton)&&(capabilities.floatVertexTextures?(null===camera.boneTexture&&camera.computeBoneTexture(),JSCompiler_inline_result.setValue(_gl,"boneTexture",camera.boneTexture,textures),JSCompiler_inline_result.setValue(_gl,"boneTextureSize",camera.boneTextureSize)):
JSCompiler_inline_result.setOptional(_gl,camera,"boneMatrices"));!geometry||void 0===geometry.morphAttributes.position&&void 0===geometry.morphAttributes.normal||morphtargets.update(object,geometry,material,encoding);if(envMap||environment.receiveShadow!==object.receiveShadow)environment.receiveShadow=object.receiveShadow,JSCompiler_inline_result.setValue(_gl,"receiveShadow",object.receiveShadow);envMap&&(JSCompiler_inline_result.setValue(_gl,"toneMappingExposure",_this.toneMappingExposure),environment.needsLights&&
(camera=vertexAlphas,needsProgramChange.ambientLightColor.needsUpdate=camera,needsProgramChange.lightProbe.needsUpdate=camera,needsProgramChange.directionalLights.needsUpdate=camera,needsProgramChange.directionalLightShadows.needsUpdate=camera,needsProgramChange.pointLights.needsUpdate=camera,needsProgramChange.pointLightShadows.needsUpdate=camera,needsProgramChange.spotLights.needsUpdate=camera,needsProgramChange.spotLightShadows.needsUpdate=camera,needsProgramChange.rectAreaLights.needsUpdate=camera,
needsProgramChange.hemisphereLights.needsUpdate=camera),scene&&material.fog&&materials.refreshFogUniforms(needsProgramChange,scene),materials.refreshMaterialUniforms(needsProgramChange,material,_pixelRatio,_height,_transmissionRenderTarget),_WebGLUniforms.WebGLUniforms.upload(_gl,environment.uniformsList,needsProgramChange,textures));material.isShaderMaterial&&!0===material.uniformsNeedUpdate&&(_WebGLUniforms.WebGLUniforms.upload(_gl,environment.uniformsList,needsProgramChange,textures),material.uniformsNeedUpdate=
!1);material.isSpriteMaterial&&JSCompiler_inline_result.setValue(_gl,"center",object.center);JSCompiler_inline_result.setValue(_gl,"modelViewMatrix",object.modelViewMatrix);JSCompiler_inline_result.setValue(_gl,"normalMatrix",object.normalMatrix);JSCompiler_inline_result.setValue(_gl,"modelMatrix",object.matrixWorld);JSCompiler_inline_result=encoding;state.setMaterial(material,frontFaceCW);scene=geometry.index;camera=geometry.attributes.position;if(null===scene){if(void 0===camera||0===camera.count)return}else if(0===
scene.count)return;environment=1;!0===material.wireframe&&(scene=geometries.getWireframeAttribute(geometry),environment=2);bindingStates.setup(object,material,JSCompiler_inline_result,geometry,scene);frontFaceCW=bufferRenderer;null!==scene&&(JSCompiler_inline_result=attributes.get(scene),frontFaceCW=indexedBufferRenderer,frontFaceCW.setIndex(JSCompiler_inline_result));encoding=geometry.drawRange.start*environment;needsProgramChange=null!==group?group.start*environment:0;JSCompiler_inline_result=Math.max(encoding,
needsProgramChange);group=Math.max(0,Math.min(null!==scene?scene.count:camera.count,encoding+geometry.drawRange.count*environment,needsProgramChange+(null!==group?group.count*environment:Infinity))-1-JSCompiler_inline_result+1);0!==group&&(object.isMesh?!0===material.wireframe?(state.setLineWidth(material.wireframeLinewidth*(null===_currentRenderTarget?_pixelRatio:1)),frontFaceCW.setMode(_gl.LINES)):frontFaceCW.setMode(_gl.TRIANGLES):object.isLine?(material=material.linewidth,void 0===material&&(material=
1),state.setLineWidth(material*(null===_currentRenderTarget?_pixelRatio:1)),object.isLineSegments?frontFaceCW.setMode(_gl.LINES):object.isLineLoop?frontFaceCW.setMode(_gl.LINE_LOOP):frontFaceCW.setMode(_gl.LINE_STRIP)):object.isPoints?frontFaceCW.setMode(_gl.POINTS):object.isSprite&&frontFaceCW.setMode(_gl.TRIANGLES),object.isInstancedMesh?frontFaceCW.renderInstances(JSCompiler_inline_result,group,object.count):geometry.isInstancedBufferGeometry?frontFaceCW.renderInstances(JSCompiler_inline_result,
group,Math.min(geometry.instanceCount,geometry._maxInstanceCount)):frontFaceCW.render(JSCompiler_inline_result,group))};this.compile=function(scene,camera){currentRenderState=renderStates.get(scene);currentRenderState.init();renderStateStack.push(currentRenderState);scene.traverseVisible(function(object){object.isLight&&object.layers.test(camera.layers)&&(currentRenderState.pushLight(object),object.castShadow&&currentRenderState.pushShadow(object))});currentRenderState.setupLights(_this.physicallyCorrectLights);
scene.traverse(function(object){const material=object.material;if(material)if(Array.isArray(material))for(let i=0;i<material.length;i++)getProgram(material[i],scene,object);else getProgram(material,scene,object)});renderStateStack.pop();currentRenderState=null};let onAnimationFrameCallback=null;const animation=new _WebGLAnimation.WebGLAnimation;animation.setAnimationLoop(function(time){onAnimationFrameCallback&&onAnimationFrameCallback(time)});"undefined"!==typeof window&&animation.setContext(window);
this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;xr.setAnimationLoop(callback);null===callback?animation.stop():animation.start()};xr.addEventListener("sessionstart",onXRSessionStart);xr.addEventListener("sessionend",onXRSessionEnd);this.render=function(scene,camera){if(void 0!==camera&&!0!==camera.isCamera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else if(!0!==_isContextLost){!0===scene.autoUpdate&&scene.updateMatrixWorld();
null===camera.parent&&camera.updateMatrixWorld();!0===xr.enabled&&!0===xr.isPresenting&&(!0===xr.cameraAutoUpdate&&xr.updateCamera(camera),camera=xr.getCamera());if(!0===scene.isScene)scene.onBeforeRender(_this,scene,camera,_currentRenderTarget);currentRenderState=renderStates.get(scene,renderStateStack.length);currentRenderState.init();renderStateStack.push(currentRenderState);_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum.setFromProjectionMatrix(_projScreenMatrix);
_localClippingEnabled=this.localClippingEnabled;_clippingEnabled=clipping.init(this.clippingPlanes,_localClippingEnabled,camera);currentRenderList$jscomp$0=renderLists.get(scene,renderListStack.length);currentRenderList$jscomp$0.init();renderListStack.push(currentRenderList$jscomp$0);projectObject(scene,camera,0,_this.sortObjects);currentRenderList$jscomp$0.finish();!0===_this.sortObjects&&currentRenderList$jscomp$0.sort(_opaqueSort,_transparentSort);!0===_clippingEnabled&&clipping.beginShadows();
shadowMap.render(currentRenderState.state.shadowsArray,scene,camera);!0===_clippingEnabled&&clipping.endShadows();!0===this.info.autoReset&&this.info.reset();background.render(currentRenderList$jscomp$0,scene);currentRenderState.setupLights(_this.physicallyCorrectLights);if(camera.isArrayCamera){const cameras=camera.cameras;for(let i=0,l=cameras.length;i<l;i++){const camera2=cameras[i];renderScene(currentRenderList$jscomp$0,scene,camera2,camera2.viewport)}}else renderScene(currentRenderList$jscomp$0,
scene,camera);null!==_currentRenderTarget&&(textures.updateMultisampleRenderTarget(_currentRenderTarget),textures.updateRenderTargetMipmap(_currentRenderTarget));if(!0===scene.isScene)scene.onAfterRender(_this,scene,camera);state.buffers.depth.setTest(!0);state.buffers.depth.setMask(!0);state.buffers.color.setMask(!0);state.setPolygonOffset(!1);bindingStates.resetDefaultState();_currentMaterialId=-1;_currentCamera=null;renderStateStack.pop();currentRenderState=0<renderStateStack.length?renderStateStack[renderStateStack.length-
1]:null;renderListStack.pop();currentRenderList$jscomp$0=0<renderListStack.length?renderListStack[renderListStack.length-1]:null}};this.getActiveCubeFace=function(){return _currentActiveCubeFace};this.getActiveMipmapLevel=function(){return _currentActiveMipmapLevel};this.getRenderTarget=function(){return _currentRenderTarget};this.setRenderTargetTextures=function(renderTarget,colorTexture,depthTexture){properties.get(renderTarget.texture).__webglTexture=colorTexture;properties.get(renderTarget.depthTexture).__webglTexture=
depthTexture;colorTexture=properties.get(renderTarget);colorTexture.__hasExternalTextures=!0;colorTexture.__hasExternalTextures&&(colorTexture.__autoAllocateDepthBuffer=void 0===depthTexture,!colorTexture.__autoAllocateDepthBuffer&&renderTarget.useRenderToTexture&&(console.warn("render-to-texture extension was disabled because an external texture was provided"),renderTarget.useRenderToTexture=!1,renderTarget.useRenderbuffer=!0))};this.setRenderTargetFramebuffer=function(renderTarget,defaultFramebuffer){renderTarget=
properties.get(renderTarget);renderTarget.__webglFramebuffer=defaultFramebuffer;renderTarget.__useDefaultFramebuffer=void 0===defaultFramebuffer};this.setRenderTarget=function(renderTarget,activeCubeFace=0,activeMipmapLevel=0){_currentRenderTarget=renderTarget;_currentActiveCubeFace=activeCubeFace;_currentActiveMipmapLevel=activeMipmapLevel;let useDefaultFramebuffer=!0;if(renderTarget){var renderTargetProperties=properties.get(renderTarget);void 0!==renderTargetProperties.__useDefaultFramebuffer?
(state.bindFramebuffer(_gl.FRAMEBUFFER,null),useDefaultFramebuffer=!1):void 0===renderTargetProperties.__webglFramebuffer?textures.setupRenderTarget(renderTarget):renderTargetProperties.__hasExternalTextures&&textures.rebindTextures(renderTarget,properties.get(renderTarget.texture).__webglTexture,properties.get(renderTarget.depthTexture).__webglTexture)}var framebuffer=null;let isRenderTarget3D=renderTargetProperties=!1;if(renderTarget){framebuffer=renderTarget.texture;if(framebuffer.isDataTexture3D||
framebuffer.isDataTexture2DArray)isRenderTarget3D=!0;framebuffer=properties.get(renderTarget).__webglFramebuffer;renderTarget.isWebGLCubeRenderTarget?(framebuffer=framebuffer[activeCubeFace],renderTargetProperties=!0):framebuffer=renderTarget.useRenderbuffer?properties.get(renderTarget).__webglMultisampledFramebuffer:framebuffer;_currentViewport.copy(renderTarget.viewport);_currentScissor.copy(renderTarget.scissor);_currentScissorTest=renderTarget.scissorTest}else _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor(),
_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor(),_currentScissorTest=_scissorTest;state.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer)&&capabilities.drawBuffers&&useDefaultFramebuffer&&state.drawBuffers(renderTarget,framebuffer);state.viewport(_currentViewport);state.scissor(_currentScissor);state.setScissorTest(_currentScissorTest);renderTargetProperties?(renderTarget=properties.get(renderTarget.texture),_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_CUBE_MAP_POSITIVE_X+
activeCubeFace,renderTarget.__webglTexture,activeMipmapLevel)):isRenderTarget3D&&(renderTarget=properties.get(renderTarget.texture),_gl.framebufferTextureLayer(_gl.FRAMEBUFFER,_gl.COLOR_ATTACHMENT0,renderTarget.__webglTexture,activeMipmapLevel||0,activeCubeFace||0));_currentMaterialId=-1};this.readRenderTargetPixels=function(renderTarget,x,y,width,height,buffer,activeCubeFaceIndex){if(renderTarget&&renderTarget.isWebGLRenderTarget){var framebuffer=properties.get(renderTarget).__webglFramebuffer;renderTarget.isWebGLCubeRenderTarget&&
void 0!==activeCubeFaceIndex&&(framebuffer=framebuffer[activeCubeFaceIndex]);if(framebuffer){state.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer);try{const texture=renderTarget.texture,textureFormat=texture.format,textureType=texture.type;if(textureFormat!==_constants.RGBAFormat&&utils.convert(textureFormat)!==_gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT))console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");else{var halfFloatSupportedByExt=
textureType===_constants.HalfFloatType&&(extensions.has("EXT_color_buffer_half_float")||capabilities.isWebGL2&&extensions.has("EXT_color_buffer_float"));textureType===_constants.UnsignedByteType||utils.convert(textureType)===_gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE)||textureType===_constants.FloatType&&(capabilities.isWebGL2||extensions.has("OES_texture_float")||extensions.has("WEBGL_color_buffer_float"))||halfFloatSupportedByExt?_gl.checkFramebufferStatus(_gl.FRAMEBUFFER)===_gl.FRAMEBUFFER_COMPLETE?
0<=x&&x<=renderTarget.width-width&&0<=y&&y<=renderTarget.height-height&&_gl.readPixels(x,y,width,height,utils.convert(textureFormat),utils.convert(textureType),buffer):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete."):console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.")}}finally{renderTarget=null!==_currentRenderTarget?properties.get(_currentRenderTarget).__webglFramebuffer:
null,state.bindFramebuffer(_gl.FRAMEBUFFER,renderTarget)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")};this.copyFramebufferToTexture=function(position,texture,level=0){if(!0!==texture.isFramebufferTexture)console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");else{var levelScale=Math.pow(2,-level),width=Math.floor(texture.image.width*levelScale);levelScale=Math.floor(texture.image.height*
levelScale);textures.setTexture2D(texture,0);_gl.copyTexSubImage2D(_gl.TEXTURE_2D,level,0,0,position.x,position.y,width,levelScale);state.unbindTexture()}};this.copyTextureToTexture=function(position,srcTexture,dstTexture,level=0){const width=srcTexture.image.width,height=srcTexture.image.height,glFormat=utils.convert(dstTexture.format),glType=utils.convert(dstTexture.type);textures.setTexture2D(dstTexture,0);_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,dstTexture.flipY);_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
dstTexture.premultiplyAlpha);_gl.pixelStorei(_gl.UNPACK_ALIGNMENT,dstTexture.unpackAlignment);srcTexture.isDataTexture?_gl.texSubImage2D(_gl.TEXTURE_2D,level,position.x,position.y,width,height,glFormat,glType,srcTexture.image.data):srcTexture.isCompressedTexture?_gl.compressedTexSubImage2D(_gl.TEXTURE_2D,level,position.x,position.y,srcTexture.mipmaps[0].width,srcTexture.mipmaps[0].height,glFormat,srcTexture.mipmaps[0].data):_gl.texSubImage2D(_gl.TEXTURE_2D,level,position.x,position.y,glFormat,glType,
srcTexture.image);0===level&&dstTexture.generateMipmaps&&_gl.generateMipmap(_gl.TEXTURE_2D);state.unbindTexture()};this.copyTextureToTexture3D=function(sourceBox,position,srcTexture,dstTexture,level=0){if(_this.isWebGL1Renderer)console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");else{var width=sourceBox.max.x-sourceBox.min.x+1,height=sourceBox.max.y-sourceBox.min.y+1,depth=sourceBox.max.z-sourceBox.min.z+1,glFormat=utils.convert(dstTexture.format),glType=utils.convert(dstTexture.type);
if(dstTexture.isDataTexture3D){textures.setTexture3D(dstTexture,0);var glTarget=_gl.TEXTURE_3D}else if(dstTexture.isDataTexture2DArray)textures.setTexture2DArray(dstTexture,0),glTarget=_gl.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,dstTexture.flipY);_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,dstTexture.premultiplyAlpha);_gl.pixelStorei(_gl.UNPACK_ALIGNMENT,
dstTexture.unpackAlignment);var unpackRowLen=_gl.getParameter(_gl.UNPACK_ROW_LENGTH),unpackImageHeight=_gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT),unpackSkipPixels=_gl.getParameter(_gl.UNPACK_SKIP_PIXELS),unpackSkipRows=_gl.getParameter(_gl.UNPACK_SKIP_ROWS),unpackSkipImages=_gl.getParameter(_gl.UNPACK_SKIP_IMAGES),image=srcTexture.isCompressedTexture?srcTexture.mipmaps[0]:srcTexture.image;_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH,image.width);_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT,image.height);_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS,
sourceBox.min.x);_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS,sourceBox.min.y);_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES,sourceBox.min.z);srcTexture.isDataTexture||srcTexture.isDataTexture3D?_gl.texSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,glType,image.data):srcTexture.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),_gl.compressedTexSubImage3D(glTarget,level,position.x,position.y,position.z,
width,height,depth,glFormat,image.data)):_gl.texSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,glType,image);_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH,unpackRowLen);_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT,unpackImageHeight);_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS,unpackSkipPixels);_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS,unpackSkipRows);_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES,unpackSkipImages);0===level&&dstTexture.generateMipmaps&&_gl.generateMipmap(glTarget);state.unbindTexture()}};
this.initTexture=function(texture){textures.setTexture2D(texture,0);state.unbindTexture()};this.resetState=function(){_currentActiveMipmapLevel=_currentActiveCubeFace=0;_currentRenderTarget=null;state.reset();bindingStates.reset()};"undefined"!==typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}Object.defineProperty(exports,"__esModule",{value:!0});exports.WebGLRenderer=WebGLRenderer;var _constants=require("module$node_modules$three$src$constants"),
_Frustum=require("module$node_modules$three$src$math$Frustum"),_Matrix=require("module$node_modules$three$src$math$Matrix4"),_Vector=require("module$node_modules$three$src$math$Vector3"),_Vector2=require("module$node_modules$three$src$math$Vector4"),_WebGLAnimation=require("module$node_modules$three$src$renderers$webgl$WebGLAnimation"),_WebGLAttributes=require("module$node_modules$three$src$renderers$webgl$WebGLAttributes"),_WebGLBackground=require("module$node_modules$three$src$renderers$webgl$WebGLBackground"),
_WebGLBindingStates=require("module$node_modules$three$src$renderers$webgl$WebGLBindingStates"),_WebGLBufferRenderer=require("module$node_modules$three$src$renderers$webgl$WebGLBufferRenderer"),_WebGLCapabilities=require("module$node_modules$three$src$renderers$webgl$WebGLCapabilities"),_WebGLClipping=require("module$node_modules$three$src$renderers$webgl$WebGLClipping"),_WebGLCubeMaps=require("module$node_modules$three$src$renderers$webgl$WebGLCubeMaps"),_WebGLCubeUVMaps=require("module$node_modules$three$src$renderers$webgl$WebGLCubeUVMaps"),
_WebGLExtensions=require("module$node_modules$three$src$renderers$webgl$WebGLExtensions"),_WebGLGeometries=require("module$node_modules$three$src$renderers$webgl$WebGLGeometries"),_WebGLIndexedBufferRenderer=require("module$node_modules$three$src$renderers$webgl$WebGLIndexedBufferRenderer"),_WebGLInfo=require("module$node_modules$three$src$renderers$webgl$WebGLInfo"),_WebGLMorphtargets=require("module$node_modules$three$src$renderers$webgl$WebGLMorphtargets"),_WebGLMultisampleRenderTarget=require("module$node_modules$three$src$renderers$WebGLMultisampleRenderTarget"),
_WebGLObjects=require("module$node_modules$three$src$renderers$webgl$WebGLObjects"),_WebGLPrograms=require("module$node_modules$three$src$renderers$webgl$WebGLPrograms"),_WebGLProperties=require("module$node_modules$three$src$renderers$webgl$WebGLProperties"),_WebGLRenderLists=require("module$node_modules$three$src$renderers$webgl$WebGLRenderLists"),_WebGLRenderStates=require("module$node_modules$three$src$renderers$webgl$WebGLRenderStates"),_WebGLRenderTarget=require("module$node_modules$three$src$renderers$WebGLRenderTarget"),
_WebGLShadowMap=require("module$node_modules$three$src$renderers$webgl$WebGLShadowMap"),_WebGLState=require("module$node_modules$three$src$renderers$webgl$WebGLState"),_WebGLTextures=require("module$node_modules$three$src$renderers$webgl$WebGLTextures"),_WebGLUniforms=require("module$node_modules$three$src$renderers$webgl$WebGLUniforms"),_WebGLUtils=require("module$node_modules$three$src$renderers$webgl$WebGLUtils"),_WebXRManager=require("module$node_modules$three$src$renderers$webxr$WebXRManager"),
_WebGLMaterials=require("module$node_modules$three$src$renderers$webgl$WebGLMaterials"),_utils=require("module$node_modules$three$src$utils");WebGLRenderer.prototype.isWebGLRenderer=!0}
//# sourceMappingURL=module$node_modules$three$src$renderers$WebGLRenderer.js.map
