shadow$provide.module$node_modules$mathbox$build$esm$primitives$types$text$format=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Format=void 0;var _constants=require("module$node_modules$three$src$constants");global=require("module$node_modules$mathbox$build$esm$primitives$types$operator$operator");class Format extends global.Operator{static initClass(){this.traits="node bind operator texture text format font".split(" ");this.defaults={minFilter:"linear",
magFilter:"linear"}}init(){super.init();this.atlas=this.buffer=this.used=this.time=null;return this.filled=!1}sourceShader(shader){return this.buffer.shader(shader)}textShader(shader){return this.atlas.shader(shader)}textIsSDF(){return 0<this.props.sdf}textHeight(){return this.props.detail}make(){this._helpers.bind.make([{to:"operator.source",trait:"raw"}]);let {minFilter,magFilter,type}=this.props;const {font,style,variant,weight,detail,sdf}=this.props;this.atlas=this._renderables.make("textAtlas",
{font,size:detail,style,variant,weight,outline:sdf,minFilter,magFilter,type});magFilter=minFilter=_constants.NearestFilter;type=_constants.FloatType;const dims=this.bind.source.getDimensions(),{items,width,height,depth}=dims;this.buffer=this._renderables.make("voxelBuffer",{width,height,depth,channels:4,items,minFilter,magFilter,type});const {atlas}=this,{emit}=this.buffer.streamer;this.buffer.streamer.emit=t=>atlas.map(t,emit);this.clockParent=this._inherit("clock");return this._listen("root","root.update",
this.update)}made(){super.made();return this.resize()}unmake(){super.unmake();this.buffer&&(this.buffer.dispose(),this.buffer=null);if(this.atlas)return this.atlas.dispose(),this.atlas=null}update(){if((!this.filled||this.props.live)&&this.through){this.time=this.clockParent.getTime();var {used}=this;this.atlas.begin();this.used=this.through();this.buffer.write(this.used);this.atlas.end();this.filled=!0;if(used!==this.used)return this.trigger({type:"source.resize"})}}change(changed,touched,init){if(touched.font)return this.rebuild();
if(changed["format.expr"]||changed["format.digits"]||changed["format.data"]||init){let {expr:expr$jscomp$0}=this.props;const {digits,data}=this.props;null==expr$jscomp$0&&(expr$jscomp$0=null!=data?(x,y,z,w,i)=>data[i]:x=>x);({length:changed}=expr$jscomp$0);null!=digits&&(expr$jscomp$0=(expr=>(x,y,z,w,i,j,k,l,t,d)=>+expr(x,y,z,w,i,j,k,l,t,d).toPrecision(digits))(expr$jscomp$0));changed=8<changed?(emit,x,y,z,w,i,j,k,l,_t,_d)=>emit(expr$jscomp$0(x,y,z,w,i,j,k,l,this.time.clock,this.time.step)):(emit,
x,y,z,w,i,j,k,l)=>emit(expr$jscomp$0(x,y,z,w,i,j,k,l));return this.through=this.bind.source.rawBuffer().through(changed,this.buffer)}}}exports.Format=Format;Format.initClass()}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$primitives$types$text$format.js.map
