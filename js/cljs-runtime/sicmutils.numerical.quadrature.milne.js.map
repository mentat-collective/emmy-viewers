{"version":3,"sources":["sicmutils/numerical/quadrature/milne.cljc"],"mappings":";AA6BA,AAAA;;;;;;;;;;;;;;;;;;;;;sDAAA,8DAAAA,pHAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oFAAA,pFAAMD,+FAoBFM,EAAEC,EAAEC;AApBR,AAoBW,+FAAA,2CAAA,8CAAA,jLAACC,kFAAeH,EAAEC,EAAEC;;;AApB/B,CAAA,oFAAA,iBAAAN,rGAAMF,+FAqBFM,EAAEC,EAAEC;AArBR,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAqBmCQ;QArBnC,AAAAN,4CAAAF,eAAA,8CAAA,7GAqBkBO;AArBlB,AAAA,GAsBU,OAASA;AAtBnB;AAAA,AAAA,MAAA,KAAAT,MAAA;;;uFAuBO,AAACW,wFAAqBN,EAAEC,EAAEC,EAAE,mDAAA,nDAACK,8CAAMF,mDAAQ,2DAAA,3DAACG,+DAAYJ,rVACxD,0VAAA,IAAA,IAAA,IAAA,/VAACK;;;AAxBR,CAAA,8EAAA,9EAAMf;;AAAN,AA0BA;;;;;;;;;;;;;AAAAgB,gDAAA,AAAAC,yDAYW,AAACC,6CAAKC,gBAAMnB,qDACbA","names":["var_args","G__90427","sicmutils.numerical.quadrature.milne/milne-sequence","js/Error","p__90429","map__90430","cljs.core/--destructure-map","cljs.core.get","f","a","b","sicmutils.numerical.quadrature.milne.milne_sequence","n","opts","sicmutils.numerical.quadrature.midpoint.midpoint_sequence","cljs.core.assoc","sicmutils.util.stream.powers","sicmutils.polynomial.richardson.richardson_column","sicmutils.numerical.quadrature.milne/integral","sicmutils.numerical.quadrature.common/make-integrator-fn","cljs.core.comp","cljs.core/first"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.numerical.quadrature.milne\n  (:require [sicmutils.numerical.quadrature.common :as qc :include-macros true]\n            [sicmutils.numerical.quadrature.midpoint :as qm]\n            [sicmutils.polynomial.richardson :as pr]\n            [sicmutils.util.stream :as us]))\n\n;; ## Milne's Rule\n;;\n;; This numerical integration method is an [open Newton-Cotes\n;; formula](https://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas#Open_Newton%E2%80%93Cotes_formulas);\n;; for each integral slice, Milne's rule samples three interior points (not the\n;; endpoints!) and combines them into an area estimate for this slice using the\n;; following formula:\n;;\n;; $${{4h} \\over 3} (2f_1 - f_2 + 2f_3)$$\n;;\n;; Given a window of $(a, b)$ and a \"step size\" of $h = {{b - a} \\over 3}$. The\n;; point $f_i$ is the point $i$ steps into the window.\n;;\n;; There is a simpler way to understand this! Milne's method is, in fact, just\n;; the midpoint method (see `midpoint.cljc`), subject to a single refinement\n;; of \"Richardson extrapolation\".\n;;\n;; The test namespace contains a symbolic proof that the Richardson-extrapolated\n;; Midpoint method is equivalent to using the formula above to calculate\n;; Milne's rule directly.\n\n(defn milne-sequence\n  \"Returns a (lazy) sequence of successively refined estimates of the integral of\n  `f` over the open interval $(a, b)$ using [Milne's\n  rule](https://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas#Open_Newton%E2%80%93Cotes_formulas).\n\n  Milne's rule is equivalent to the midpoint method subject to one refinement of\n  Richardson extrapolation.\n\n  Returns estimates with $n, 2n, 4n, ...$ slices, geometrically increasing by a\n  factor of 2 with each estimate.\n\n  ## Optional arguments:\n\n  If supplied, `:n` (default 1) specifies the initial number of slices to use.\n\n  NOTE: the Midpoint method is able to reuse function evaluations as its windows\n  narrow _only_ when increasing the number of integration slices by 3. Milne's\n  method increases the number of slices geometrically by a factor of 2 each\n  time, so it will never hit the incremental path. You may want to memoize your\n  function before calling [[milne-sequence]].\"\n  ([f a b] (milne-sequence f a b {:n 1}))\n  ([f a b {:keys [n] :or {n 1} :as opts}]\n   {:pre [(number? n)]}\n   (-> (qm/midpoint-sequence f a b (assoc opts :n (us/powers 2 n)))\n       (pr/richardson-column 1 2 2 2))))\n\n(qc/defintegrator integral\n  \"Returns an estimate of the integral of `f` over the open interval $(a, b)$\n  using [Milne's\n  rule](https://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas#Open_Newton%E2%80%93Cotes_formulas)\n  with $1, 2, 4 ... 2^n$ windows for each estimate.\n\n  Optionally accepts `opts`, a dict of optional arguments. All of these get\n  passed on to `us/seq-limit` to configure convergence checking.\n\n  See [[milne-sequence]] for more information about Milne's rule, caveats that\n  might apply when using this integration method and information on the optional\n  args in `opts` that customize this function's behavior.\"\n  :area-fn (comp first milne-sequence)\n  :seq-fn milne-sequence)\n"]}