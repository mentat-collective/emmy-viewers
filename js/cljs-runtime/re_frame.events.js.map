{"version":3,"sources":["re_frame/events.cljc"],"mappings":"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","names":["re-frame.events/kind","js/Error","re-frame.registry/kinds","re-frame.events/flatten-and-remove-nils","id","interceptors","p1__64670#","make-chain","cljs.core/flatten","cljs.core.remove","cljs.core/nil?","re-frame.interop/debug-enabled?","cljs.core/coll?","re_frame.loggers.console","chain","cljs.core/empty?","temp__5753__auto__","not-i","cljs.core/first","re-frame.interceptor/interceptor?","cljs.core/fn?","re-frame.events/register","registry","re-frame.registry/register-handler","re-frame.events/*handling*","p__64680","map__64681","cljs.core/--destructure-map","cljs.core.get","re-frame.events/handle","app-db","frame","event-v","event-id","re-frame.utils/first-in-vector","re-frame.registry/get-handler","*handling*-orig-val__64682","*handling*-temp-val__64683","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__64684","re-frame.trace/*current-trace*","*current-trace*-temp-val__64685","re-frame.trace/start-trace","end__64499__auto__","re-frame.interop/now","duration__64500__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","new-trace__64501__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core/deref","cljs.core.dissoc","re-frame.interceptor/execute"],"sourcesContent":["(ns re-frame.events\n  (:require [re-frame.utils :refer [first-in-vector]]\n            [re-frame.interop :refer [empty-queue debug-enabled?]]\n            [re-frame.registry :as reg]\n            [re-frame.loggers :refer [console]]\n            [re-frame.interceptor :as interceptor]\n            [re-frame.trace :as trace :include-macros true]))\n\n\n(def kind :event)\n(assert (re-frame.registry/kinds kind))\n\n(defn- flatten-and-remove-nils\n  \"`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages.\"\n  [id interceptors]\n  (let [make-chain  #(->> % flatten (remove nil?))]\n    (if-not debug-enabled?\n      (make-chain interceptors)\n      (do    ;; do a whole lot of development time checks\n        (when-not (coll? interceptors)\n          (console :error \"re-frame: when registering\" id \", expected a collection of interceptors, got:\" interceptors))\n        (let [chain (make-chain interceptors)]\n          (when (empty? chain)\n            (console :error \"re-frame: when registering\" id \", given an empty interceptor chain\"))\n          (when-let [not-i (first (remove interceptor/interceptor? chain))]\n            (if (fn? not-i)\n              (console :error \"re-frame: when registering\" id \", got a function instead of an interceptor. Did you provide old style middleware by mistake? Got:\" not-i)\n              (console :error \"re-frame: when registering\" id \", expected interceptors, but got:\" not-i)))\n          chain)))))\n\n\n(defn register\n  \"Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   Typically, an `event handler` will be at the end of the chain (wrapped\n   in an interceptor).\"\n  [registry id interceptors]\n  (reg/register-handler registry kind id (flatten-and-remove-nils id interceptors)))\n\n\n\n;; -- handle event --------------------------------------------------------------------------------\n\n(def ^:dynamic *handling* nil)    ;; remember what event we are currently handling\n\n(defn handle\n  \"Given an event vector `event-v`, look up the associated interceptor chain, and execute it.\"\n  [{:keys [registry app-db] :as frame} event-v]\n  (let [event-id (first-in-vector event-v)]\n    (when-let [interceptors (reg/get-handler registry kind event-id true)]\n      (if *handling*\n        (console :error \"re-frame: while handling\" *handling* \", dispatch-sync was called for\" event-v \". You can't call dispatch-sync within an event handler.\")\n        (binding [*handling* event-v]\n          (trace/with-trace {:operation event-id\n                             :op-type kind\n                             :tags {:event event-v}}\n            (trace/merge-trace! {:tags {:app-db-before @app-db}})\n            (interceptor/execute frame event-v interceptors)\n            (trace/merge-trace! {:tags {:app-db-after @app-db}})))))))\n"]}