{
"version":3,
"file":"module$node_modules$shadergraph$src$graph$outlet.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/shadergraph/src/graph/outlet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$shadergraph$src$graph$outlet\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Outlet = void 0;\n\nvar _graph = require(\"./graph\");\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS206: Consider reworking classes to avoid initClass\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\n/*\n  In/out outlet on node\n*/\nclass Outlet {\n  static initClass() {\n    this.index = 0;\n  }\n\n  static make(outlet, extra) {\n    if (extra == null) {\n      extra = {};\n    }\n\n    const meta = extra;\n\n    if (outlet.meta != null) {\n      for (const key in outlet.meta) {\n        const value = outlet.meta[key];\n        meta[key] = value;\n      }\n    }\n\n    return new Outlet(outlet.inout, outlet.name, outlet.hint, outlet.type, meta);\n  }\n\n  static id(name) {\n    return `_io_${++Outlet.index}_${name}`;\n  }\n\n  static hint(name) {\n    name = name.replace(/^_io_[0-9]+_/, \"\");\n    name = name.replace(/_i_o$/, \"\");\n    return name = name.replace(/(In|Out|Inout|InOut)$/, \"\");\n  }\n\n  constructor(inout, name, hint, type, meta, id) {\n    this.inout = inout;\n    this.name = name;\n    this.hint = hint;\n    this.type = type;\n\n    if (meta == null) {\n      meta = {};\n    }\n\n    this.meta = meta;\n    this.id = id;\n\n    if (this.hint == null) {\n      this.hint = Outlet.hint(this.name);\n    }\n\n    this.node = null;\n    this.input = null;\n    this.output = [];\n\n    if (this.id == null) {\n      this.id = Outlet.id(this.hint);\n    }\n  } // Change into given outlet without touching connections\n\n\n  morph(outlet) {\n    this.inout = outlet.inout;\n    this.name = outlet.name;\n    this.hint = outlet.hint;\n    this.type = outlet.type;\n    return this.meta = outlet.meta;\n  } // Copy with unique name and cloned metadata\n\n\n  dupe(name) {\n    if (name == null) {\n      name = this.id;\n    }\n\n    const outlet = Outlet.make(this);\n    outlet.name = name;\n    return outlet;\n  } // Connect to given outlet\n\n\n  connect(outlet) {\n    // Auto-reverse in/out to out/in\n    if (this.inout === _graph.Graph.IN && outlet.inout === _graph.Graph.OUT) {\n      return outlet.connect(this);\n    } // Disallow bad combinations\n\n\n    if (this.inout !== _graph.Graph.OUT || outlet.inout !== _graph.Graph.IN) {\n      throw new Error(\"Can only connect out to in.\");\n    } // Check for existing connection\n\n\n    if (outlet.input === this) {\n      return;\n    } // Disconnect existing connections\n\n\n    outlet.disconnect(); // Add new connection.\n\n    outlet.input = this;\n    return this.output.push(outlet);\n  } // Disconnect given outlet (or all)\n\n\n  disconnect(outlet) {\n    // Disconnect input from the other side.\n    if (this.input) {\n      this.input.disconnect(this);\n    }\n\n    if (this.output.length) {\n      if (outlet) {\n        // Remove one outgoing connection.\n        const index = this.output.indexOf(outlet);\n\n        if (index >= 0) {\n          this.output.splice(index, 1);\n          return outlet.input = null;\n        }\n      } else {\n        // Remove all outgoing connections.\n        for (outlet of Array.from(this.output)) {\n          outlet.input = null;\n        }\n\n        return this.output = [];\n      }\n    }\n  }\n\n}\n\nexports.Outlet = Outlet;\nOutlet.initClass();\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Outlet","_graph","initClass","index","make","outlet","extra","meta","key","inout","name","hint","type","id","replace","constructor","input","node","output","morph","dupe","connect","Graph","IN","OUT","Error","disconnect","push","length","indexOf","splice","Array","from"]
}
