{"version":3,"sources":["sicmutils/special/factorial.cljc"],"mappings":"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","names":["sicmutils.special.factorial/->bigint","x","cljs.core/int?","sicmutils.util/bigint","js/Error","sicmutils.special.factorial/factorial","n","sicmutils.value/native-integral?","elems","cljs.core.range","cljs.core.apply","cljs.core/*","cljs.core.transduce","cljs.core.map","sicmutils.generic/*","js/sicmutils","js/sicmutils.special","js/sicmutils.special.factorial","js/sicmutils.special.factorial.falling-factorial","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__97246","cljs.core/MultiFn","cljs.core.symbol","sicmutils.value/argument-kind","sicmutils.special.factorial/falling-factorial","cljs.core/Keyword","k__14627__auto__","fexpr__97247","sicmutils.special.factorial/factorial-power","denom","G__97250","G__97251","sicmutils.special.factorial/rising-factorial","sicmutils.generic/add","sicmutils.generic._","sicmutils.value/zero?","sicmutils.generic/invert","cljs.core.comp","p1__97249#","G__97256","G__97257","sicmutils.generic._SLASH_","js/sicmutils.special.factorial.rising-factorial","fexpr__97263","fexpr__97265","sicmutils.special.factorial/pochhammer","sicmutils.generic/sub","p1__97266#","sicmutils.special.factorial/multi-factorial","k","sicmutils.special.factorial/double-factorial","cljs.core/even?","sicmutils.generic/div","G__97272","sicmutils.special.factorial/subfactorial","nf-div-e","Math/E","sicmutils.generic/floor","mul","div","sicmutils.generic//","sicmutils.special.factorial/binomial-coefficient","G__97274","G__97275","G__97276","G__97277","n-k","G__97279","G__97280","G__97282","G__97283","x__4339__auto__","y__4340__auto__","G__97285","G__97286","add","sicmutils.generic/+","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.special.factorial/stirling-first-kind","p__97302","map__97304","cljs.core/--destructure-map","seq97297","G__97298","cljs.core/first","cljs.core/next","G__97299","self__4851__auto__","unsigned?","rec","rec*","n-1","factor","G__97307","G__97308","fexpr__97306","cljs.core/deref","G__97309","G__97310","G__97312","G__97313","fexpr__97311","G__97314","G__97315","fexpr__97316","cljs.core/reset!","cljs.core/memoize","fexpr__97317","sicmutils.special.factorial/stirling-second-kind","cljs.core._EQ_","G__97322","G__97323","G__97324","G__97325","fexpr__97326","G__97328","G__97329","fexpr__97327","fexpr__97330","sicmutils.special.factorial/bell","xform","p1__97294#","ks"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.special.factorial\n  \"Namespace holding implementations of variations on the factorial function.\"\n  (:require [sicmutils.generic :as g]\n            [sicmutils.numbers]\n            #?@(:cljs [[sicmutils.util :as u]])\n            [sicmutils.util.def :refer [defgeneric] :include-macros true]\n            [sicmutils.value :as v]))\n\n#?(:cljs\n   (defn ->bigint\n     \"If `x` is a fixed-precision integer, returns a [[sicmutils.util/bigint]]\n     version of `x`. Else, acts as identity.\n\n     This is useful in cases where you may want to multiply `x` by other large\n     numbers, but don't want to try and convert something that can't overflow,\n     like a symbol, into `bigint`.\"\n     [x]\n     (if (int? x)\n       (u/bigint x)\n       x)))\n\n(defn factorial\n  \"Returns the factorial of `n`, ie, the product of 1 to `n` (inclusive).\n\n  [[factorial]] will return a platform-specific [[sicmutils.util/bigint]] given\n  some `n` that causes integer overflow.\"\n  [n]\n  {:pre [(v/native-integral? n)\n         (>= n 0)]}\n  (let [elems (range 1 (inc n))]\n    #?(:clj\n       (apply *' elems)\n       :cljs\n       (if (<= n 20)\n         (apply * elems)\n         (transduce (map u/bigint) g/* elems)))))\n\n;; ## Falling and Rising Factorials\n\n(declare rising-factorial)\n\n(defgeneric falling-factorial 2\n  \"Returns the [falling\n  factorial](https://en.wikipedia.org/wiki/Falling_and_rising_factorials), of\n  `a` to the `b`, defined as the polynomial\n\n  $$(a)_b = a^{\\\\underline{b}} = a(a - 1)(a - 2) \\\\cdots (a - b - 1)$$\n\n  Given a negative `b`, `([[falling-factorial]] a b)` is equivalent\n  to `(invert ([[rising-factorial]] (inc a) (- b)))`, or `##Inf` if the\n  denominator evaluates to 0.\n\n  The coefficients that appear in the expansions of [[falling-factorial]] called\n  with a symbolic first argument and positive integral second argument are the\n  Stirling numbers of the first kind (see [[stirling-first-kind]]).\")\n\n(def ^{:doc \"Alias for [[falling-factorial]].\"}\n  factorial-power\n  falling-factorial)\n\n;; The default implementation uses generic operations throughout, and requires\n;; that `n` be a native integral.\n;; [Wikipedia](https://en.wikipedia.org/wiki/Falling_and_rising_factorials#Connection_coefficients_and_identities)\n;; states that \"the rising and falling factorials are well defined in any unital\n;; ring, and therefore x can be taken to be, for example, a complex number,\n;; including negative integers, or a polynomial with complex coefficients, or\n;; any complex-valued function.\" Implementing [[falling-factorial]] as a generic\n;; allows all of this (and more!) to work automatically.\n;;\n;; (A unital ring is an abelian group - a type with a `+`, `-` and a sensible\n;; zero - as well as a `*` operation that distributes over addition.\n;; The \"unital\" part means there is a sensible one, ie, a multiplicative\n;; identity.)\n\n(defmethod falling-factorial :default [x n]\n  {:pre [(v/native-integral? n)]}\n  (cond (zero? n) 1\n        (neg? n)\n        (let [denom (rising-factorial (g/add x 1) (g/- n))]\n          (if (v/zero? denom)\n            ##Inf\n            (g/invert denom)))\n\n        :else\n        (transduce (comp\n                    (map #(g/add x (g/- %)))\n                    #?(:cljs (map ->bigint)))\n                   g/*\n                   (range n))))\n\n;; Given a native integral input, we can be more efficient by using `range` to\n;; generate the product terms. This is PROBABLY a case of premature\n;; optimization, since how fast does [[falling-factorial]] need to be? But if\n;; you see a way to keep the speed while unifying these almost-the-same\n;; implementations, please let me know and open a PR!\n\n(defmethod falling-factorial [::v/native-integral ::v/native-integral] [x n]\n  (cond (zero? n) 1\n        (neg? n)\n        (let [denom (rising-factorial (inc x) (- n))]\n          (if (v/zero? denom)\n            ##Inf\n            (g// 1 denom)))\n\n        :else\n        (let [elems (range x (- x n) -1)]\n          #?(:clj\n             (apply *' elems)\n             :cljs\n             (transduce (map u/bigint) g/* elems)))))\n\n(defgeneric rising-factorial 2\n  \"Returns the [rising\n  factorial](https://en.wikipedia.org/wiki/Falling_and_rising_factorials), of\n  `a` to the `b`, defined as the polynomial\n\n  $$(a)^b = a^{\\\\overline{b}} = a(a + 1)(a + 2) \\\\cdots (a + b - 1)$$\n\n  Given a negative `b`, `([[rising-factorial]] a b)` is equivalent\n  to `(invert ([[falling-factorial]] (dec a) (- b)))`, or `##Inf` if the\n  denominator evaluates to 0.\")\n\n(def ^{:doc \"Alias for [[falling-factorial]].\"}\n  pochhammer\n  rising-factorial)\n\n(defmethod rising-factorial :default [x n]\n  {:pre [(v/native-integral? n)]}\n  (cond (zero? n) 1\n        (neg? n)\n        (let [denom (falling-factorial (g/sub x 1) (g/- n))]\n          (if (v/zero? denom)\n            ##Inf\n            (g/invert denom)))\n\n        :else\n        (transduce (comp\n                    (map #(g/add x %))\n                    #?(:cljs (map ->bigint)))\n                   g/*\n                   (range n))))\n\n(defmethod rising-factorial [::v/native-integral ::v/native-integral] [x n]\n  (cond (zero? n) 1\n        (neg? n)\n        (let [denom (falling-factorial (dec x) (- n))]\n          (if (v/zero? denom)\n            ##Inf\n            (g// 1 denom)))\n\n        :else\n        (let [elems (range x (+ x n))]\n          #?(:clj\n             (apply *' elems)\n             :cljs\n             (transduce (map u/bigint) g/* elems)))))\n\n;; I learned about the next group of functions from John D Cook's [Variations on\n;; Factorial](https://www.johndcook.com/blog/2010/09/21/variations-on-factorial/)\n;; and [Multifactorial](https://www.johndcook.com/blog/2021/10/14/multifactorial/)\n;; posts.\n\n;; https://en.wikipedia.org/wiki/Double_factorial#Generalizations\n\n(defn multi-factorial\n  \"Returns the product of the positive integers up to `n` that are congruent\n  to `(mod n k)`.\n\n  When `k` equals 1, equivalent to `([[factorial]] n)`.\n\n  See the [Wikipedia page on generalizations\n  of [[double-factorial]]](https://en.wikipedia.org/wiki/Double_factorial#Generalizations)\n  for more detail.\n\n  If you need to extend [[multi-factorial]] to negative `n` or `k`, that page\n  has suggestions for generalization.\"\n  [n k]\n  {:pre [(v/native-integral? n)\n         (v/native-integral? k)\n         (>= n 0), (> k 0)]}\n  (let [elems (range n 0 (- k))]\n    #?(:clj\n       (reduce *' elems)\n       :cljs\n       (transduce (map u/bigint) g/* elems))))\n\n(defn double-factorial\n  \"Returns the product of all integers from 1 up to `n` that have the same\n  parity (odd or even) as `n`.\n\n  `([[double-factorial]] 0)` is defined as an empty product and equal to 1.\n\n  [[double-factorial]] with argument `n` is equivalent to `([[multi-factorial]]\n  n 2)`, but slightly more general in that it can handle negative values of\n  `n`.\n\n  If `n` is negative and even, returns `##Inf`.\n\n  If `n` is negative and odd, returns `(/ (double-factorial (+ n 2)) (+ n 2))`.\n\n  For justification, see the [Wikipedia page on the extension of double\n  factorial to negative\n  arguments](https://en.wikipedia.org/wiki/Double_factorial#Negative_arguments).\"\n  [n]\n  {:pre [(v/native-integral? n)]}\n  (cond (zero? n) 1\n        (pos? n) (multi-factorial n 2)\n        (even? n) ##Inf\n        :else (g/div\n               (double-factorial (+ n 2))\n               (+ n 2))))\n\n(defn subfactorial\n  \"Returns the number of permutations of `n` objects in which no object appears in\n  its original position. (Each of these permutations is called\n  a ['derangement'](https://en.wikipedia.org/wiki/Derangement) of the set.)\n\n  ## References\n\n  - [Subfactorial page at Wolfram Mathworld](https://mathworld.wolfram.com/Subfactorial.html)\n  - John Cook, [Variations on Factorial](https://www.johndcook.com/blog/2010/09/21/variations-on-factorial/)\n  - John Cook, [Subfactorial](https://www.johndcook.com/blog/2010/04/06/subfactorial/)\n  - ['Derangement' on Wikipedia](https://en.wikipedia.org/wiki/Derangement)\"\n  [n]\n  (if (zero? n)\n    1\n    (let [nf-div-e (g/div (factorial n) Math/E)]\n      (g/floor\n       (g/add 0.5 nf-div-e)))))\n\n(let [mul #?(:clj * :cljs g/*)\n      div #?(:clj / :cljs g//)]\n  (defn binomial-coefficient\n    \"Returns the [binomial\n  coefficient](https://en.wikipedia.org/wiki/Binomial_coefficient), ie, the\n  coefficient of the $x^k$ term in the polynomial expansion of the binomial\n  power $(1 + x)^n$.\n\n  This quantity is sometimes pronounced \\\"n choose k\\\".\n\n  For negative `n` or `k`, [[binomial-coefficient]] matches the behavior\n  provided by Mathematica, described at [this\n  page](https://mathworld.wolfram.com/BinomialCoefficient.html). Given negative\n  `n`, returns\n\n  ```clj\n  ;; for k >= 0\n  (* (expt -1 k)\n     (binomial-coefficient (+ (- n) k -1) k))\n\n  ;; for k >= 0\n  (* (expt -1 (- n k))\n     (binomial-coefficient (+ (- k) -1) (- n k)))\n\n  ;; otherwise:\n  0\n  ```\"\n    [n k]\n    {:pre [(v/native-integral? n)\n           (v/native-integral? k)]}\n    (cond (zero? k) 1\n          (neg? n)\n          (cond (> k 0) (mul\n                         (if (even? k) 1 -1)\n                         (binomial-coefficient\n                          (+ (- n) k -1) k))\n\n                (<= k n) (let [n-k (- n k)]\n                           (mul\n                            (if (even? n-k) 1 -1)\n                            (binomial-coefficient\n                             (- (- k) 1) n-k)))\n                :else 0)\n          (neg? k) 0\n\n          (> k n) 0\n\n          :else\n          (let [k (min k (- n k))]\n            (div (falling-factorial n k)\n                 (factorial k))))))\n\n(let [add   #?(:clj +' :cljs g/+)\n      mul   #?(:clj *' :cljs g/*)]\n  (defn stirling-first-kind\n    \"Given `n` and `k`, returns the number of permutations of `n` elements which\n  contain exactly `k` [permutation\n  cycles](https://mathworld.wolfram.com/PermutationCycle.html). This is called\n  the [Stirling number s(n, k) of the first\n  kind](https://en.wikipedia.org/wiki/Stirling_numbers_of_the_first_kind).\n\n  By default, returns the [signed Stirling number of the first\n  kind](https://en.wikipedia.org/wiki/Stirling_numbers_of_the_first_kind#Signs).\n  Pass the `:unsigned? true` keyword option to retrieve the signed Stirling\n  number. (Or take the absolute value of the result...)\n\n  ```clj\n  (stirling-first-kind 13 2)\n  ;;=> -1486442880\n\n  (stirling-first-kind 13 2 :unsigned? true)\n  ;;=> 1486442880\n  ```\"\n    [n k & {:keys [unsigned?]}]\n    {:pre [(v/native-integral? n)\n           (v/native-integral? k)\n           (<= 0 k) (<= 0 n)]}\n    (let [rec  (atom nil)\n          rec* (fn [n k]\n                 (if (zero? n)\n                   (if (zero? k) 1 0)\n                   (let [n-1    (dec n)\n                         factor (if unsigned? n-1 (- n-1))]\n                     (if (zero? factor)\n                       (@rec n-1 (dec k))\n                       (add (@rec n-1 (dec k))\n                            (mul factor\n                                 #?(:cljs (u/bigint (@rec n-1 k))\n                                    :clj  (@rec n-1 k))))))))]\n      (reset! rec (memoize rec*))\n      (cond (zero? k) (if (zero? n) 1 0)\n            (> k n) 0\n            :else (@rec n k))))\n\n  (defn stirling-second-kind\n    \"Returns $S(n,k)$, the number of ways to partition a set of `n` objects into `k`\n  non-empty subsets.\n\n  This is called a [Stirling number of the second\n  kind](https://en.wikipedia.org/wiki/Stirling_numbers_of_the_second_kind).\"\n    [n k]\n    {:pre [(v/native-integral? n)\n           (v/native-integral? k)\n           (<= 0 k) (<= 0 n)]}\n    (let [rec (atom nil)\n          rec* (fn [n k]\n                 (cond (= k 1) 1\n\t                     (= n k) 1\n\t                     :else\n\t                     (let [n-1 (dec n)]\n\t\t                     (add\n                          (mul k #?(:cljs (u/bigint (@rec n-1 k))\n                                    :clj  (@rec n-1 k)))\n\t\t                      (@rec n-1 (dec k))))))]\n      (reset! rec (memoize rec*))\n      (cond (zero? k) (if (zero? n) 1 0)\n            (> k n) 0\n            :else (@rec n k))))\n\n  (defn bell\n    \"Returns the `n`th [Bell number](https://en.wikipedia.org/wiki/Bell_number), ie,\n  the number of ways a set of `n` elements can be partitioned into nonempty\n  subsets.\n\n  The `n`th Bell number is denoted $B_n$.\"\n    [n]\n    {:pre [(>= n 0)]}\n    (let [xform (map #(stirling-second-kind n %))\n          ks    (range (inc n))]\n      (transduce xform add ks))))\n"]}