{"version":3,"sources":["sicmutils/mechanics/hamilton.cljc"],"mappings":"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","names":["sicmutils.mechanics.hamilton/Hamiltonian","n","r__20948__auto__","cljs.core/seq","or__4253__auto__","pattern.consequence/succeed","sicmutils.mechanics.hamilton/->H-state","t","q","p","sicmutils.structure.up","sicmutils.mechanics.hamilton/H-state?","s","and__4251__auto__","sicmutils.structure/up?","cljs.core._EQ_","cljs.core/count","vec__82578","cljs.core.nth","v","sicmutils.value/numerical?","sicmutils.structure/down?","sicmutils.structure/dimension","sicmutils.mechanics.hamilton/compatible-H-state?","sicmutils.structure/transpose","js/Error","sicmutils.mechanics.hamilton/momentum","H-state","sicmutils.mechanics.hamilton/state->p","sicmutils.mechanics.hamilton/momenta","sicmutils.mechanics.hamilton/P","sicmutils.mechanics.hamilton/state->qp","sicmutils.mechanics.lagrange/coordinate","sicmutils.mechanics.hamilton/qp->H-state-path","sicmutils.mechanics.hamilton/literal-Hamiltonian-state","n-dof","cljs.core.gensym","sicmutils.structure/literal-up","sicmutils.structure/literal-down","sicmutils.mechanics.hamilton/L-state->H-state","L","Ls","sicmutils.mechanics.lagrange/time","fexpr__82593","fexpr__82594","sicmutils.calculus.derivative.partial","sicmutils.mechanics.hamilton/H-state->L-state","H","Hs","sicmutils.mechanics.lagrange/->L-state","fexpr__82606","fexpr__82607","sicmutils.mechanics.hamilton/H-state->matrix","sicmutils.matrix.s__GT_m","sicmutils.structure/compatible-shape","sicmutils.mechanics.hamilton/matrix->H-state","m","sicmutils.matrix/num-cols","cljs.core/odd?","sicmutils.matrix/num-rows","sicmutils.matrix/m->s","sicmutils.mechanics.hamilton/make-Hamiltonian","kinetic-energy","potential-energy","sicmutils.generic._PLUS_","sicmutils.mechanics.hamilton/Hamiltonian->state-derivative","fexpr__82609","fexpr__82610","sicmutils.generic._","fexpr__82612","fexpr__82613","sicmutils.mechanics.hamilton/phase-space-derivative","sicmutils.mechanics.hamilton/Hamilton-equations","Hamiltonian","H-state-path","dH","sicmutils.calculus.derivative/D","sicmutils.function$.compose","sicmutils.mechanics.hamilton/D-phase-space","fexpr__82619","fexpr__82620","fexpr__82622","fexpr__82623","sicmutils.mechanics.hamilton/H-rectangular","V","p__82628","vec__82629","_","sicmutils.generic._SLASH_","sicmutils.generic/square","sicmutils.generic._STAR_","cljs.core.apply","sicmutils.mechanics.hamilton/H-central","p__82633","vec__82635","G__82641","sicmutils.generic/abs","sicmutils.mechanics.hamilton/H-central-polar","p__82646","vec__82647","vec__82650","vec__82653","r","p_r","p_phi","sicmutils.mechanics.hamilton/H-harmonic","k","p__82661","vec__82662","sicmutils.mechanics.hamilton/*validate-Legendre-transform?*","sicmutils.mechanics.hamilton/Legendre-transform-procedure","F","w-of-v","Dw-of-v","w","z","sicmutils.structure/compatible-zero","M","b","sicmutils.value/zero?","sicmutils.generic/simplify","sicmutils.generic/determinant","cljs.core.ex_info","sicmutils.generic/solve-linear-left","Dpg","putative-G","thing","sicmutils.structure/typical-object","cljs.core/not","sicmutils.value/=","G__82671","sicmutils.mechanics.hamilton/Legendre-transform","sicmutils.operator.make_operator","sicmutils.mechanics.hamilton/Lagrangian->Hamiltonian-procedure","Lagrangian","p__82673","vec__82674","p1__82672#","G__82677","fexpr__82678","sicmutils.mechanics.hamilton/Lagrangian->Hamiltonian","sicmutils.mechanics.hamilton/Hamiltonian->Lagrangian-procedure","p__82679","vec__82680","qdot","G__82687","fexpr__82688","sicmutils.mechanics.hamilton/Hamiltonian->Lagrangian","sicmutils.mechanics.hamilton/Poisson-bracket","f","g","x","fx","gx","sicmutils.structure/structure?","sicmutils.structure.mapr","af","ag","fexpr__82691","G__82692","G__82693","cljs.core.comp","sicmutils.structure/component","sicmutils.structure/structure->access-chains","fexpr__82698","fexpr__82699","fexpr__82700","fexpr__82701","fexpr__82702","sicmutils.mechanics.hamilton/Lie-derivative","cljs.core/List","sicmutils.mechanics.hamilton/flow-derivative","fexpr__82703","sicmutils.generic/Lie-derivative","sicmutils.mechanics.hamilton/Lie-transform","sicmutils.generic/exp","cljs.core.sequence","cljs.core.concat","sicmutils.mechanics.hamilton/flow-transform","delta-t","sicmutils.mechanics.hamilton/standard-map","K","pv","sicmutils.value/principal-value","sicmutils.value/twopi","theta","I","cont","_fail","nI","Math/sin","G__82704","G__82705","sicmutils.mechanics.hamilton/standard-map-inverse","ntheta","G__82706","G__82707","sicmutils.mechanics.hamilton/iterated-map","lulz","cljs.core/constantly","y","continue","fail","i","temp__5751__auto__","vec__82708","x'","y'","cljs.core/vector","sicmutils.mechanics.hamilton/F->CH","p__82711","vec__82712","sicmutils.generic/solve-linear-right","fexpr__82716","fexpr__82717","sicmutils.mechanics.hamilton/F->CT","sicmutils.mechanics.hamilton/F->K","fexpr__82719","fexpr__82720","fexpr__82722","fexpr__82723","sicmutils.mechanics.hamilton/canonical?","C","Hprime","sicmutils.mechanics.hamilton/compositional-canonical?","sicmutils.mechanics.hamilton/J-func","DHs","sicmutils.mechanics.hamilton/T-func","sicmutils.value/zero-like","sicmutils.mechanics.lagrange/coordinates","sicmutils.mechanics.hamilton/canonical-H?","sicmutils.mechanics.hamilton/canonical-K?","sicmutils.mechanics.hamilton/linear-function->multiplier","argument","fexpr__82724","sicmutils.mechanics.hamilton/Phi","A","sicmutils.mechanics.hamilton/Phi*","sicmutils.mechanics.hamilton/time-independent-canonical?","G__82728","fexpr__82727","fexpr__82729","fexpr__82730","sicmutils.mechanics.hamilton/qp-canonical?","G__82732","fexpr__82731","fexpr__82733","fexpr__82735","G__82736","sicmutils.mechanics.hamilton/polar-canonical","alpha","p__82737","vec__82738","sicmutils.generic/sqrt","sicmutils.generic/sin","p_x","sicmutils.generic/cos","sicmutils.mechanics.hamilton/polar-canonical-inverse","p__82741","vec__82742","sicmutils.generic/atan","sicmutils.mechanics.hamilton/two-particle-center-of-mass","m0","m1","p__82745","vec__82746","vec__82749","x0","x1","G__82752","G__82753","sicmutils.mechanics.lagrange/coordinate-tuple","sicmutils.mechanics.hamilton/two-particle-center-of-mass-canonical","p__82754","vec__82755","vec__82758","vec__82761","p0","p1","G__82764","G__82765","G__82766","G__82767","sicmutils.mechanics.lagrange/momentum-tuple","sicmutils.mechanics.hamilton/transpose-function","sicmutils.mechanics.hamilton/multiplicative-transpose","sicmutils.mechanics.hamilton/symplectic-two-form","zeta1","zeta2","sicmutils.mechanics.hamilton/canonical-transform?","J","G__82769","fexpr__82768","DCs","fexpr__82770","DCsT","sicmutils.matrix.s_COLON_transpose","sicmutils.mechanics.hamilton/J-matrix","twon+1","sicmutils.matrix.generate","a","sicmutils.mechanics.hamilton/symplectic?","sicmutils.mechanics.lagrange/state->n-dof","DC","sicmutils.calculus.derivative/D-as-matrix","sicmutils.generic/transpose","sicmutils.mechanics.hamilton/symplectic-unit","twoN","sicmutils.mechanics.hamilton/symplectic-matrix?","two-n","sicmutils.matrix/dimension","cljs.core/even?","cljs.core/quot","sicmutils.mechanics.hamilton/qp-submatrix","sicmutils.matrix/without","sicmutils.mechanics.hamilton/symplectic-transform?"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.mechanics.hamilton\n  (:refer-clojure :exclude [+ - * /  partial])\n  (:require [clojure.core :as core]\n            [pattern.rule :as r :include-macros true]\n            [sicmutils.calculus.derivative :refer [D D-as-matrix partial]]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g :refer [sin cos + - * /]]\n            [sicmutils.matrix :as matrix]\n            [sicmutils.mechanics.lagrange :as l]\n            [sicmutils.operator :as o]\n            [sicmutils.structure :as s :refer [up]]\n            [sicmutils.value :as v]))\n\n;; Hamiltonian mechanics requires a phase space QxP, and a function H:RxQxP -->\n;; R\n;;\n;; A system has a dynamic state, which has the time, the configuration, and the\n;; momenta. Hamiltonian mechanics is formulated in terms of the dynamic state.\n\n(defn Hamiltonian\n  \"Returns function signature for a Hamiltonian with n degrees of freedom (or an\n  unrestricted number if n is not given).\n\n  Useful for constructing Hamiltonian literal functions.\"\n  [n]\n  (r/template\n   (-> (UP Real (UP* Real ~n) (DOWN* Real ~n)) Real)))\n\n(defn ->H-state\n  \"Given a time `t`, coordinate tuple (or scalar) `q` and momentum tuple (or\n  scalar) `p`, returns a 'Hamiltonian state tuple', ie, the state expected by a\n  Hamiltonian.\"\n  [t q p]\n  (up t q p))\n\n(defn H-state?\n  \"Returns true if the supplied state is\n\n  - of type [[sicmutils.structure/up]]\n\n  - contains three elements of `time`, `coordinate` and `momentum` of either of\n    the following type shapes:\n\n  ```\n  (up <number> <number> <number>)\n  (up <number> (up <number>*) (down <number>*))\n  ```\n\n  If structural, the dimension of the coordinate and momentum tuples must match.\"\n  [s]\n  (and (s/up? s)\n       (= (count s) 3)\n       (let [[t q v] s]\n         (and (v/numerical? t)\n              (or (and (v/numerical? q)\n                       (v/numerical? v))\n                  (and (s/up? q)\n                       (s/down? v)\n                       (= (s/dimension q)\n                          (s/dimension v))))))))\n\n(defn compatible-H-state?\n  \"Returns true if `s` is compatible for contraction with a proper H-state, false\n  otherwise.\"\n  [s]\n  (H-state?\n   (s/transpose s)))\n\n(defn momentum\n  \"Returns the momentum element of a local Hamiltonian state tuple (by convention,\n  the third element).\"\n  [H-state]\n  {:pre [(s/up? H-state) (> (count H-state) 2)]}\n  (nth H-state 2))\n\n(def ^{:doc \"Alias for [[momentum]].\"}\n  state->p momentum)\n\n(def ^{:doc \"Alias for [[momentum]].\"}\n  momenta momentum)\n\n(def ^{:doc \"Alias for [[momentum]].\"}\n  P momentum)\n\n(defn state->qp\n  \"Given a hamiltonian state, returns a [[sicmutils.structure/up]] containing the\n  coordinate and momentum components. \"\n  [s]\n  {:pre [(H-state? s)]}\n  (up (l/coordinate s)\n      (momentum s)))\n\n(defn qp->H-state-path [q p]\n  (fn [t]\n    (->H-state t (q t) (p t))))\n\n(defn literal-Hamiltonian-state [n-dof]\n  (->H-state\n   (gensym 't)\n   (s/literal-up (gensym 'x) n-dof)\n   (s/literal-down (gensym 'p) n-dof)))\n\n(defn L-state->H-state [L]\n  (fn [Ls]\n    (->H-state\n     (l/time Ls)\n     (l/coordinate Ls)\n     (((partial 2) L) Ls))))\n\n(defn H-state->L-state [H]\n  (fn [Hs]\n    (l/->L-state\n     (l/time Hs)\n     (l/coordinate Hs)\n     (((partial 2) H) Hs))))\n\n(defn H-state->matrix [s]\n  (matrix/s->m\n   (s/compatible-shape s) s 1))\n\n(defn matrix->H-state [m s]\n  {:pre [(= (matrix/num-cols m) 1)\n         (odd? (matrix/num-rows m))\n         (> (matrix/num-rows m) 2)]}\n  (matrix/m->s\n   (s/compatible-shape s) m 1))\n\n(defn make-Hamiltonian [kinetic-energy potential-energy]\n  (+ kinetic-energy potential-energy))\n\n(defn Hamiltonian->state-derivative [H]\n  (fn [H-state]\n    (->H-state 1\n               (((partial 2) H) H-state)\n               (- (((partial 1) H) H-state)))))\n\n(def ^{:doc \"Alias for [[Hamiltonian->state-derivative]], for compatibility with\n  1st edition of SICM.\"}\n  phase-space-derivative\n  Hamiltonian->state-derivative)\n\n(defn Hamilton-equations [Hamiltonian]\n  (fn [q p]\n    (let [H-state-path (qp->H-state-path q p)\n          dH (Hamiltonian->state-derivative Hamiltonian)]\n      (- (D H-state-path)\n         (f/compose dH H-state-path)))))\n\n(defn D-phase-space [H]\n  (fn [s]\n    (up 0\n        (((partial 2) H) s)\n        (- (((partial 1) H) s)))))\n\n;; If we express the energy in terms of t,Q,P we have the Hamiltonian. A\n;; Hamiltonian is an example of an H-function: an H-function takes 2 vector\n;; arguments and a scalar argument (t, Q, P). It produces a scalar result.\n\n(defn H-rectangular [m V]\n  (fn [[_ q p]]\n    (make-Hamiltonian\n     (/ (g/square p) (* 2 m))\n     (apply V q))))\n\n(defn H-central [m V]\n  (fn [[_ q p]]\n    (make-Hamiltonian\n     (/ (g/square p) (* 2 m))\n     (V (g/abs q)))))\n\n(defn H-central-polar [m V]\n  (fn [[_ [r _] [p_r p_phi]]]\n    (make-Hamiltonian\n     (/ (+ (g/square p_r)\n           (g/square (/ p_phi r)))\n        (* 2 m))\n     (V r))))\n\n(defn H-harmonic [m k]\n  (fn [[_ q p]]\n    (+ (/ (g/square p) (* 2 m))\n       (* (/ 1 2) k (g/square q)))))\n\n;; If we express the energy in terms of t,Q,P we have the Hamiltonian\n;;\n;;        H(t,Q,P) = P*Qdot - L(t, Q, Qdot(t, Q, P))\n;;\n;; To do this we need to invert P(t, Q, Qdot) to get Qdot(t, Q, P). This is easy\n;; when L is a quadratic form in Qdot:\n;;\n;;        L(t, Q, Qdot) = 1/2*Qdot*M*Qdot + B*Qdot - V\n;;\n;; Fortunately this is the case in almost all of Newtonian mechanics, otherwise\n;; the P(t,Q,Qdot) function would be much more difficult to invert to obtain\n;; Qdot(t,Q,P).\n\n;; Assume that F is quadratic in its arguments\n;;  F(u) = 1/2 A u u + b u + c\n;;  then v = A u + b, so u = A^(-1) (v - b)\n\n(def ^{:dynamic true\n       :doc \"If true, the state passed to the fn returned\n       by [[Legendre-transform]] is checked for correctness. If `false` errors\n       may occur. See the code body for more detail.\n\n       Defaults to `false`.\"}\n  *validate-Legendre-transform?*\n  false)\n\n(defn ^:no-doc Legendre-transform-procedure\n  \"Note from GJS: This ugly version tests for correctness of the result.\"\n  [F]\n  (let [w-of-v  (D F)\n        Dw-of-v (D w-of-v)]\n    (letfn [(putative-G [w]\n              (let [z (s/compatible-zero w)\n                    M (Dw-of-v z)\n                    b (w-of-v z)]\n                (if (and *validate-Legendre-transform?*\n                         (v/zero?\n                          (g/simplify\n                           (g/determinant M))))\n                  (throw\n                   (ex-info \"Legendre Transform Failure: determinant = 0\"\n                            {:F F :w w}))\n                  (let [v (g/solve-linear-left M (- w b))]\n                    (- (* w v) (F v))))))]\n      (let [Dpg (D putative-G)]\n        (fn G [w]\n          (if (and *validate-Legendre-transform?*\n                   (let [thing (s/typical-object w)]\n                     (not (v/= thing\n                               (g/simplify\n                                (w-of-v (Dpg thing)))))))\n            (throw\n             (ex-info \"Legendre Transform Failure: not quadratic\"\n                      {:F F :w w}))\n            (putative-G w)))))))\n\n(def Legendre-transform\n  (o/make-operator Legendre-transform-procedure\n                   'Legendre-transform))\n\n;; Notice that Lagrangians and Hamiltonians are symmetrical with\n;; respect to the Legendre transform.\n\n(defn ^:no-doc Lagrangian->Hamiltonian-procedure\n  [Lagrangian]\n  (fn [[t q p]]  ;; H-state\n    (let [L #(Lagrangian (up t q %))]\n      ((Legendre-transform L) p))))\n\n(def Lagrangian->Hamiltonian\n  (o/make-operator Lagrangian->Hamiltonian-procedure\n                   'Lagrangian->Hamiltonian))\n\n(defn ^:no-doc Hamiltonian->Lagrangian-procedure [Hamiltonian]\n  (fn [[t q qdot]]\n    (letfn [(H [p]\n              (Hamiltonian\n               (->H-state t q p)))]\n      ((Legendre-transform-procedure H) qdot))))\n\n(def Hamiltonian->Lagrangian\n  (o/make-operator Hamiltonian->Lagrangian-procedure\n                   'Hamiltonian->Lagrangian))\n\n(defn Poisson-bracket [f g]\n  (fn [x]\n    (let [fx (f x)\n          gx (g x)]\n      (if (or (s/structure? fx) (s/structure? gx))\n        (s/mapr (fn [af]\n                  (s/mapr (fn [ag]\n                            ((Poisson-bracket\n                              (comp (apply s/component af) f)\n                              (comp (apply s/component ag) g))\n                             x))\n                          (s/structure->access-chains gx)))\n                (s/structure->access-chains fx))\n        ((- (* ((partial 1) f) ((partial 2) g))\n            (* ((partial 2) f) ((partial 1) g)))\n         x)))))\n\n(defn ^:no-doc Lie-derivative\n  \"p. 428\n\n  We define the Lie derivative of F, as a derivative-like operator, relative to\n  the given Hamiltonian-like function, H. Generalization and redefinition in\n  calculus/Lie.scm\n  \"\n  [H]\n  (o/make-operator\n   (fn [F] (Poisson-bracket F H))\n   (list 'Lie-derivative H)))\n\n(defn flow-derivative\n  \"the flow derivative generalizes the Lie derivative to allow for time dependent\n  H and F --- computes the 'time' derivative of F along the flow specified by H\"\n  [H]\n  (-> (fn [F]\n        (+ ((partial 0) F)\n           (Poisson-bracket F H)))\n      (o/make-operator\n       (list 'flow-derivative H))))\n\n(defmethod g/Lie-derivative [::v/function] [f]\n  (Lie-derivative f))\n\n(defn Lie-transform\n  \"p. 428, the Lie transform is just the time-advance operator using the Lie\n  derivative (see Hamiltonian.scm).\"\n  [H t]\n  (-> (g/exp (* t (g/Lie-derivative H)))\n      (o/make-operator\n       `(~'Lie-transform ~H ~t))))\n\n(defn flow-transform\n  \"The generalization of Lie-transform to include time dependence.\"\n  [H delta-t]\n  (-> (g/exp (* delta-t (flow-derivative H)))\n      (o/make-operator\n       `(~'flow-transform ~H ~delta-t))))\n\n(defn standard-map [K]\n  (let [pv (v/principal-value v/twopi)]\n    (fn [theta I cont _fail]\n      (let [nI (pv (core/+ I (core/* K (Math/sin theta))))]\n        (cont\n         (pv (core/+ theta nI))\n         nI)))))\n\n(defn standard-map-inverse [K]\n  (let [pv (v/principal-value v/twopi)]\n    (fn [theta I cont _fail]\n      (let [ntheta (pv (core/- theta I))]\n        (cont ntheta\n              (pv (core/- I (core/*\n                             K (Math/sin ntheta)))))))))\n\n(defn iterated-map\n  \"f is a function of (x y continue fail), which calls continue with the values of\n  x' y' that follow x y in the mapping.\n\n  Returns a map of the same shape that iterates the iterated map n times before\n  invoking the continuation, or invokes the fail continuation if the inner map\n  fails.\"\n  [f n]\n  {:pre [(not (neg? n))]}\n  (let [lulz (constantly nil)]\n    (fn [x y continue fail]\n      (loop [x x\n             y y\n             i n]\n        (if (= i 0)\n          (continue x y)\n          (if-let [[x' y'] (f x y vector lulz)]\n            (recur x' y' (dec i))\n            (fail)))))))\n\n;; ## Point Transformations\n;;\n;; Makes a canonical point transformation from a time-invariant coordinate\n;; transformation T(q)\n\n(defn F->CH\n  \"A transformation of configuration coordinates F to a procedure implementing a\n  transformation of phase-space coordinates (p. 320)\"\n  [F]\n  (fn [[t _ p :as H-state]]\n    (up t\n        (F H-state)\n        (g/solve-linear-right\n         p\n         (((partial 1) F) H-state)))))\n\n(def ^{:doc \"Alias for [[F->CH]].\"}\n  F->CT F->CH)\n\n;; This is used in conjunction with a symplectic test for the C to establish\n;; that a time-dependent transformation is canonical.\n\n;; To compute the K (addition to the Hamiltonian) from a time-dependent\n;; coordinate transformation F.\n\n(defn F->K [F]\n  (fn [H-state]\n    (- (* (g/solve-linear-right\n           (momentum H-state)\n           (((partial 1) F) H-state))\n          (((partial 0) F) H-state)))))\n\n;; ## Canonical Transformations\n\n(defn canonical?\n  \"p.324\"\n  [C H Hprime]\n  (- (f/compose (Hamiltonian->state-derivative H) C)\n     (* (D C) (Hamiltonian->state-derivative Hprime))))\n\n(defn compositional-canonical?\n  \"p.324\"\n  [C H]\n  (canonical? C H (f/compose H C)))\n\n(defn J-func [DHs]\n  (up 0 (nth DHs 2) (- (nth DHs 1))))\n\n(defn T-func [s]\n  (up 1\n      (v/zero-like (l/coordinates s))\n      (v/zero-like (momenta s))))\n\n(defn canonical-H? [C H]\n  (- (f/compose (D-phase-space H) C)\n     (* (D C)\n        (D-phase-space (f/compose H C)))))\n\n(defn canonical-K? [C K]\n  (- (f/compose T-func C)\n     (* (D C)\n        (+ T-func (D-phase-space K)))))\n\n(defn linear-function->multiplier [F argument]\n  ((D F) argument))\n\n(defn Phi [A]\n  (fn [v]\n    (* A v)))\n\n(defn Phi* [A]\n  (fn [w]\n    (* w A)))\n\n(defn time-independent-canonical?\n  \"p.326\"\n  [C]\n  (fn [s]\n    ((- J-func\n        (f/compose (Phi ((D C) s))\n                   J-func\n                   (Phi* ((D C) s))))\n     (s/compatible-shape s))))\n\n;; Time-Varying code\n;;\n;; Originally from time-varying.scm.\n\n(defn qp-canonical?\n  \"Tests that K yields a canonical transformation if the C is symplectic. (The\n  qp-canonical? code is really a symplectic test without factoring out the\n  Hamiltonian.)\"\n  [C H]\n  (fn [s]\n    (- (J-func ((D H) (C s)))\n       (* ((D C) s)\n          (J-func\n           ((D (f/compose H C)) s))))))\n\n;; One particularly useful canonical transform is the Poincare transform, which\n;; is good for simplifying oscillators.\n\n(defn polar-canonical\n  \"p.327\"\n  [alpha]\n  (fn [[t theta I]]\n    (let [x (* (g/sqrt (/ (* 2 I) alpha)) (sin theta))\n          p_x (* (g/sqrt (* 2 alpha I)) (cos theta))]\n      (up t x p_x))))\n\n(defn polar-canonical-inverse [alpha]\n  (fn [[t x p]]\n    (let [I (/ (+ (* alpha (g/square x))\n                  (/ (g/square p) alpha))\n               2)\n          theta (g/atan (/ x (g/sqrt (/ (* 2 I) alpha)))\n                        (/ p (g/sqrt (* 2 I alpha))))]\n      (up t theta I))))\n\n(defn two-particle-center-of-mass [m0 m1]\n  (fn [[_ [x0 x1]]]\n    (l/coordinate-tuple\n     (/ (+ (* m0 x0) (* m1 x1)) (+ m0 m1))\n     (- x1 x0))))\n\n(defn two-particle-center-of-mass-canonical [m0 m1]\n  (fn [[t [x0 x1] [p0 p1]]]\n    (up t\n        (l/coordinate-tuple\n         (/ (+ (* m0 x0) (* m1 x1)) (+ m0 m1))\n         (- x1 x0))\n        (l/momentum-tuple\n         (+ p0 p1)\n         (/ (- (* m0 p1) (* m1 p0))\n            (+ m0 m1))))))\n\n(defn transpose-function [A]\n  (fn [p]\n    (* p A)))\n\n(defn multiplicative-transpose [s]\n  (fn [A]\n    (linear-function->multiplier\n     (transpose-function A) s)))\n\n;; Symplectic\n;;\n;; Originally from symplectic.scm.\n\n(defn symplectic-two-form [zeta1 zeta2]\n  (- (* (momenta zeta2) (l/coordinates zeta1))\n     (* (momenta zeta1) (l/coordinates zeta2))))\n\n;; Without matrices\n\n(defn canonical-transform? [C]\n  (fn [s]\n    (let [J ((D J-func) (s/compatible-shape s))\n          DCs ((D C) s)\n          DCsT (matrix/s:transpose DCs s)]\n      (- J (* DCs J DCsT)))))\n\n(defn J-matrix\n  \"n == degrees of freedom\"\n  [n]\n  (let [twon+1 (inc (* 2 n))]\n    (matrix/generate twon+1 twon+1\n                     (fn [a b]\n                       (cond (zero? a) 0\n                             (zero? b) 0\n                             (= (core/+ a n) b)  1\n                             (= (core/+ b n) a) -1\n                             :else 0)))))\n\n(defn symplectic?\n  \"Symplectic test in terms of matrices\"\n  [C]\n  (fn [s]\n    (let [J (J-matrix (l/state->n-dof s))\n          DC ((D-as-matrix C) s)]\n      (- J (* DC J (g/transpose DC))))))\n\n(defn symplectic-unit\n  \"p. 334 (used, but not defined there)\"\n  [n]\n  (let [twoN (* 2 n)]\n    (matrix/generate twoN twoN\n                     (fn [a b]\n                       (cond (= (+ a n) b) 1\n                             (= (+ b n) a) -1\n                             :else 0)))))\n\n(defn symplectic-matrix?\n  \"p. 334\"\n  [M]\n  (let [two-n (matrix/dimension M)]\n    (when-not (even? two-n)\n      (throw\n       (ex-info \"Wrong type -- symplectic-matrix?\"\n                {:M M})))\n    (let [J (symplectic-unit (quot two-n 2))]\n      (- J (* M J (g/transpose M))))))\n\n(defn qp-submatrix [m]\n  (matrix/without m 0 0))\n\n(defn symplectic-transform?\n  \"p. 334\"\n  [C]\n  (fn [s]\n    (symplectic-matrix?\n     (qp-submatrix\n      ((D-as-matrix C) s)))))\n"]}