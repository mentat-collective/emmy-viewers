{"version":3,"sources":["sicmutils/calculus/frame.cljc"],"mappings":"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","names":["sicmutils$calculus$frame$IFrame$coords__GT_event$dyn","x__4550__auto__","m__4551__auto__","sicmutils.calculus.frame/coords->event","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","sicmutils$calculus$frame$IFrame$event__GT_coords$dyn","sicmutils.calculus.frame/event->coords","sicmutils$calculus$frame$IFrame$ancestor_frame$dyn","sicmutils.calculus.frame/ancestor-frame","sicmutils$calculus$frame$IFrame$frame_name$dyn","sicmutils.calculus.frame/frame-name","sicmutils$calculus$frame$IFrame$params$dyn","sicmutils.calculus.frame/params","sicmutils.calculus.frame/IFrame","this","coords","event","_","sicmutils.calculus.frame/frame?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","sicmutils.calculus.frame/make-event","e","cljs.core.vary_meta","cljs.core/assoc","sicmutils.calculus.frame/event?","cljs.core/meta","sicmutils.calculus.frame/frame-owner","sicmutils.calculus.frame/claim","owner","temp__5751__auto__","other","cljs.core._EQ_","sicmutils.util/illegal","sicmutils.calculus.frame/frame-maker","c->e","e->c","call","name","sicmutils$calculus$frame$frame_maker_$_call","ancestor-frame","params","js/sicmutils","js/sicmutils.calculus","js/sicmutils.calculus.frame","js/sicmutils.calculus.frame.t_sicmutils$calculus$frame87040","sicmutils.calculus.frame/t_sicmutils$calculus$frame87040","_87042","meta87041","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sicmutils.calculus.frame/->t_sicmutils$calculus$frame87040","js/Error","fexpr__87051","fexpr__87055"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.calculus.frame\n  (:require [sicmutils.util :as u]))\n\n;; ## Reference Frames, from frame_maker.scm.\n;;\n;; Every frame has a name, and a frame that it is built on (which may be false).\n;; Every frame owns coordinates that it may coerce to an absolute event or that\n;; it may export as its representation of an absolute event.\n\n(defprotocol IFrame\n  (coords->event [this coords]\n    \"Accepts a coordinate representation `coords` of some `event` and returns a\n coordinate-free representation of the event.\n\n `coords` must be owned this this reference frame; [[coords->event]] will throw\n if not.\")\n\n  (event->coords [this event]\n    \"Accepts a reference frame and an `event`, and returns this reference\n    frame's coordinate representation of the supplied `event`.\")\n\n  (ancestor-frame [_]\n    \"Returns the ancestor [[IFrame]] instance of this frame, or nil if there is\n    no ancestor.\")\n\n  (frame-name [_]\n    \"Returns the symbolic name of the suppplied frame.\")\n\n  (params [_]\n    \"Returns the parameters registered with the supplied frame.\"))\n\n(defn frame?\n  \"Returns true if `x` implements [[IFrame]], false otherwise.\"\n  [x]\n  (satisfies? IFrame x))\n\n(defn make-event\n  \"Marks the input event `e` as an event via its metadata. The return value will\n  return `true` when passed to [[event?]].\"\n  [e]\n  (vary-meta e assoc ::event? true))\n\n(defn event?\n  \"Returns true if `e` is an event, false otherwise.\n\n  Make new events with [[make-event]].\"\n  [e]\n  (::event? (meta e) false))\n\n(defn frame-owner\n  \"Returns the owning [[IFrame]] instance of the supplied coordinates `coords`,\n  nil if there's no owner otherwise.\"\n  [coords]\n  (::owner (meta coords)))\n\n(defn claim\n  \"Marks (via metadata) the supplied set of `coords` as being owned by `owner`. If\n  `coords` already has an owner (that is not equal to `owner`), throws.\"\n  [coords owner]\n  (if-let [other (frame-owner coords)]\n    (if (= other owner)\n      coords\n      (u/illegal (str \"Someone else owns these coords: \" coords owner)))\n    (vary-meta coords assoc ::owner owner)))\n\n(defn frame-maker\n  \"Takes:\n\n  - `c->e`, a function mapping coordinates to events\n  - `e->c`, a function mapping events to coordinates\n\n  and returns a function that takes:\n\n  - a symbolic name\n  - an ancestor frame\n  - a dictionary of params\n\n  and returns instance of [[IFrame]].\n\n  Both `c->e` and `e->c` must accept three arguments:\n\n  - `ancestor-frame`\n  - the [[IFrame]] instance\n  - a map of parameters supplied to the returned function (possibly empty!).\"\n  [c->e e->c]\n  (fn call\n    ([name]\n     (call name nil {}))\n    ([name ancestor-frame]\n     (call name ancestor-frame {}))\n    ([name ancestor-frame params]\n     (reify IFrame\n       (ancestor-frame [_] ancestor-frame)\n       (frame-name [_] name)\n       (params [_] params)\n\n       (coords->event [this coords]\n         (assert (= (frame-owner coords) this))\n         (let [event ((c->e ancestor-frame this params) coords)]\n           (assert (event? event))\n           event))\n\n       (event->coords [this event]\n         (assert (event? event))\n         (let [coords ((e->c ancestor-frame this params) event)]\n           (assert (= (frame-owner coords) this))\n           coords))))))\n"]}