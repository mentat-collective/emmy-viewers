{"version":3,"sources":["stopwatch/impl.cljc"],"mappings":";AAMA,AASA,AAEU,6BAAA,7BAAMA;AAAN,AAAe,oDAAA,7CAACC,sDAAWC;;;AAE3B,sBAAA,tBAAMC,oDAAMC,EAAEC;AAAd,AACE,oBAAMD;AAAN,AAAQ,QAAMA,EAAEC;;AAAhB;;;;AAGF,AAAKC,qCAAgB,mCAAA,OAAA,xCAAM,QAAAC,yBAAoBA;;AAC/C,AAAKC,0CAAgB,EAAI,QAAAC,8BACEA,YACA,uDAAA,vDAACN,oBAAKG;;AAEjC,AAAKI,uCAAgB,iBAAAC,mBAAI,4DAAA,5DAACR,oBAAKK;AAAV,AAAA,oBAAAG;AAAAA;;AAAA,IAAAA,uBACI,4DAAA,5DAACR,oBAAKK;AADV,AAAA,oBAAAG;AAAAA;;AAAA,IAAAA,uBAEI,4DAAA,5DAACR,oBAAKK;AAFV,AAAA,oBAAAG;AAAAA;;AAAA,IAAAA,uBAGI,4DAAA,5DAACR,oBAAKK;AAHV,AAAA,oBAAAG;AAAAA;;AAII,mEAAA,5DAACR,oBAAKK;;;;;;;AAG/B,AAAKI,sCAAgB,gCAAA,QAAA,tCAAM,AAACZ,8BAAOa;;AACnC,AAAKC,qCAAgB,wDAAA,xDAACX,oBAAKS;;AAE3B,AAAKG,8CAAkB,AAACC,mBAAQN;;AAChC,AAAKO,yCAAkB,AAACD,mBAAQF;AAI1C","names":["stopwatch.impl/node?","cljs.core._EQ_","cljs.core/*target*","stopwatch.impl/oget","o","k","stopwatch.impl/+?window","js/window","stopwatch.impl/+?performance","js/performance","stopwatch.impl/+?perf-now","or__4253__auto__","stopwatch.impl/+?process","js/process","stopwatch.impl/+?hrtime","stopwatch.impl/+has-performance?","cljs.core/boolean","stopwatch.impl/+has-hrtime?"],"sourcesContent":["(ns stopwatch.impl\n  (:require [net.cgrand.macrovich :as macro])\n  #? (:cljs (:require-macros\n              [net.cgrand.macrovich :as macro]\n              [stopwatch.impl :refer [nano->ms ms->nano sec->nano ms->sec]])))\n\n(macro/deftime\n\n(defmacro nano->ms  [n] `(/ ~n 1000 1000))\n(defmacro ms->nano  [n] `(* ~n 1000 1000))\n(defmacro sec->nano [n] `(ms->nano (* ~n 1000)))\n(defmacro ms->sec   [n] `(/ ~n 1000))\n\n)\n\n(macro/usetime\n\n#? (:cljs (defn node? [] (= \"nodejs\" cljs.core/*target*)))\n\n#? (:cljs (defn oget [o k]\n            (when o (aget o k))))\n\n;; Browser - Performance.now\n#? (:cljs (def +?window        (when (exists? js/window) js/window)))\n#? (:cljs (def +?performance   (if (exists? js/performance)\n                                     js/performance\n                                     (oget +?window \"performance\"))))\n;;\n#? (:cljs (def +?perf-now      (or (oget +?performance \"now\")\n                                   (oget +?performance \"mozNow\")\n                                   (oget +?performance \"msNow\")\n                                   (oget +?performance \"oNow\")\n                                   (oget +?performance \"webkitNow\"))))\n\n;; Node - process.hrtime\n#? (:cljs (def +?process       (when (node?) js/process)))\n#? (:cljs (def +?hrtime        (oget +?process \"hrtime\")))\n\n#? (:cljs (def +has-performance? (boolean +?perf-now)))\n#? (:cljs (def +has-hrtime?      (boolean +?hrtime)))\n\n)\n\n(macro/deftime\n\n;; result = Now ms +-5u (elapsed since timing.navigationStart)\n(defmacro performance-now []\n  `(macro/case :cljs (.call +?perf-now +?performance)))\n\n;; result = [sec, nano] (relative to an arbitrary number in the past)\n(defmacro hrtime-now []\n  `(macro/case :cljs (+?hrtime)))\n\n(defmacro hrtime-since [v]\n  `(macro/case :cljs (+?hrtime ~v)))\n\n)\n"]}