shadow$provide.module$node_modules$three$src$renderers$webgl$WebGLTextures=function(global,require,module,exports){function _getRequireWildcardCache(nodeInterop$jscomp$0){if("function"!==typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop$jscomp$0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.WebGLTextures=function(_gl,extensions,
state,properties,capabilities,utils,info){function resizeImage(image,needsPowerOfTwo,needsNewCanvas,maxSize){var scale=1;if(image.width>maxSize||image.height>maxSize)scale=maxSize/Math.max(image.width,image.height);if(1>scale||!0===needsPowerOfTwo){if("undefined"!==typeof HTMLImageElement&&image instanceof HTMLImageElement||"undefined"!==typeof HTMLCanvasElement&&image instanceof HTMLCanvasElement||"undefined"!==typeof ImageBitmap&&image instanceof ImageBitmap)return maxSize=needsPowerOfTwo?MathUtils.floorPowerOfTwo:
Math.floor,needsPowerOfTwo=maxSize(scale*image.width),scale=maxSize(scale*image.height),void 0===_canvas&&(_canvas=useOffscreenCanvas?new OffscreenCanvas(needsPowerOfTwo,scale):(0,_utils.createElementNS)("canvas")),needsNewCanvas=needsNewCanvas?useOffscreenCanvas?new OffscreenCanvas(needsPowerOfTwo,scale):(0,_utils.createElementNS)("canvas"):_canvas,needsNewCanvas.width=needsPowerOfTwo,needsNewCanvas.height=scale,needsNewCanvas.getContext("2d").drawImage(image,0,0,needsPowerOfTwo,scale),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+
image.width+"x"+image.height+") to ("+needsPowerOfTwo+"x"+scale+")."),needsNewCanvas;"data"in image&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+image.width+"x"+image.height+").")}return image}function isPowerOfTwo(image){return MathUtils.isPowerOfTwo(image.width)&&MathUtils.isPowerOfTwo(image.height)}function textureNeedsGenerateMipmaps(texture,supportsMips){return texture.generateMipmaps&&supportsMips&&texture.minFilter!==_constants.NearestFilter&&texture.minFilter!==_constants.LinearFilter}
function getInternalFormat(internalFormatName,glFormat,glType,encoding,forceLinearEncoding=!1){if(!1===isWebGL2)return glFormat;if(null!==internalFormatName){if(void 0!==_gl[internalFormatName])return _gl[internalFormatName];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+internalFormatName+"'")}internalFormatName=glFormat;glFormat===_gl.RED&&(glType===_gl.FLOAT&&(internalFormatName=_gl.R32F),glType===_gl.HALF_FLOAT&&(internalFormatName=_gl.R16F),glType===_gl.UNSIGNED_BYTE&&
(internalFormatName=_gl.R8));glFormat===_gl.RG&&(glType===_gl.FLOAT&&(internalFormatName=_gl.RG32F),glType===_gl.HALF_FLOAT&&(internalFormatName=_gl.RG16F),glType===_gl.UNSIGNED_BYTE&&(internalFormatName=_gl.RG8));glFormat===_gl.RGBA&&(glType===_gl.FLOAT&&(internalFormatName=_gl.RGBA32F),glType===_gl.HALF_FLOAT&&(internalFormatName=_gl.RGBA16F),glType===_gl.UNSIGNED_BYTE&&(internalFormatName=encoding===_constants.sRGBEncoding&&!1===forceLinearEncoding?_gl.SRGB8_ALPHA8:_gl.RGBA8),glType===_gl.UNSIGNED_SHORT_4_4_4_4&&
(internalFormatName=_gl.RGBA4),glType===_gl.UNSIGNED_SHORT_5_5_5_1&&(internalFormatName=_gl.RGB5_A1));internalFormatName!==_gl.R16F&&internalFormatName!==_gl.R32F&&internalFormatName!==_gl.RG16F&&internalFormatName!==_gl.RG32F&&internalFormatName!==_gl.RGBA16F&&internalFormatName!==_gl.RGBA32F||extensions.get("EXT_color_buffer_float");return internalFormatName}function getMipLevels(texture,image,supportsMips){return!0===textureNeedsGenerateMipmaps(texture,supportsMips)||texture.isFramebufferTexture&&
texture.minFilter!==_constants.NearestFilter&&texture.minFilter!==_constants.LinearFilter?Math.log2(Math.max(image.width,image.height))+1:void 0!==texture.mipmaps&&0<texture.mipmaps.length?texture.mipmaps.length:texture.isCompressedTexture&&Array.isArray(texture.image)?image.mipmaps.length:1}function filterFallback(f){return f===_constants.NearestFilter||f===_constants.NearestMipmapNearestFilter||f===_constants.NearestMipmapLinearFilter?_gl.NEAREST:_gl.LINEAR}function onTextureDispose(event){event=
event.target;event.removeEventListener("dispose",onTextureDispose);var textureProperties=properties.get(event);if(void 0!==textureProperties.__webglInit){var source=event.source,webglTextures=_sources.get(source);webglTextures&&(textureProperties=webglTextures[textureProperties.__cacheKey],textureProperties.usedTimes--,0===textureProperties.usedTimes&&deleteTexture(event),0===Object.keys(webglTextures).length&&_sources.delete(source));properties.remove(event)}event.isVideoTexture&&_videoTextures.delete(event)}
function onRenderTargetDispose(event){event=event.target;event.removeEventListener("dispose",onRenderTargetDispose);const texture=event.texture;var renderTargetProperties=properties.get(event),textureProperties=properties.get(texture);void 0!==textureProperties.__webglTexture&&(_gl.deleteTexture(textureProperties.__webglTexture),info.memory.textures--);event.depthTexture&&event.depthTexture.dispose();if(event.isWebGLCubeRenderTarget)for(textureProperties=0;6>textureProperties;textureProperties++)_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[textureProperties]),
renderTargetProperties.__webglDepthbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[textureProperties]);else{_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);renderTargetProperties.__webglDepthbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);renderTargetProperties.__webglMultisampledFramebuffer&&_gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);if(renderTargetProperties.__webglColorRenderbuffer)for(textureProperties=
0;textureProperties<renderTargetProperties.__webglColorRenderbuffer.length;textureProperties++)renderTargetProperties.__webglColorRenderbuffer[textureProperties]&&_gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[textureProperties]);renderTargetProperties.__webglDepthRenderbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer)}if(event.isWebGLMultipleRenderTargets)for(let i=0,il=texture.length;i<il;i++)renderTargetProperties=properties.get(texture[i]),
renderTargetProperties.__webglTexture&&(_gl.deleteTexture(renderTargetProperties.__webglTexture),info.memory.textures--),properties.remove(texture[i]);properties.remove(texture);properties.remove(event)}function deleteTexture(texture){const textureProperties=properties.get(texture);_gl.deleteTexture(textureProperties.__webglTexture);delete _sources.get(texture.source)[textureProperties.__cacheKey];info.memory.textures--}function setTexture2D(texture,slot){const textureProperties=properties.get(texture);
if(texture.isVideoTexture){var frame=info.render.frame;_videoTextures.get(texture)!==frame&&(_videoTextures.set(texture,frame),texture.update())}if(!1===texture.isRenderTargetTexture&&0<texture.version&&textureProperties.__version!==texture.version)if(frame=texture.image,null===frame)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(!1===frame.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{uploadTexture(textureProperties,
texture,slot);return}state.bindTexture(_gl.TEXTURE_2D,textureProperties.__webglTexture,_gl.TEXTURE0+slot)}function setTextureParameters(textureType,texture,supportsMips){supportsMips?(_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_S,wrappingToGL[texture.wrapS]),_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_T,wrappingToGL[texture.wrapT]),textureType!==_gl.TEXTURE_3D&&textureType!==_gl.TEXTURE_2D_ARRAY||_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_R,wrappingToGL[texture.wrapR]),_gl.texParameteri(textureType,
_gl.TEXTURE_MAG_FILTER,filterToGL[texture.magFilter]),_gl.texParameteri(textureType,_gl.TEXTURE_MIN_FILTER,filterToGL[texture.minFilter])):(_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_S,_gl.CLAMP_TO_EDGE),_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_T,_gl.CLAMP_TO_EDGE),textureType!==_gl.TEXTURE_3D&&textureType!==_gl.TEXTURE_2D_ARRAY||_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_R,_gl.CLAMP_TO_EDGE),texture.wrapS===_constants.ClampToEdgeWrapping&&texture.wrapT===_constants.ClampToEdgeWrapping||
console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),_gl.texParameteri(textureType,_gl.TEXTURE_MAG_FILTER,filterFallback(texture.magFilter)),_gl.texParameteri(textureType,_gl.TEXTURE_MIN_FILTER,filterFallback(texture.minFilter)),texture.minFilter!==_constants.NearestFilter&&texture.minFilter!==_constants.LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
!0===extensions.has("EXT_texture_filter_anisotropic")&&(supportsMips=extensions.get("EXT_texture_filter_anisotropic"),texture.type===_constants.FloatType&&!1===extensions.has("OES_texture_float_linear")||!1===isWebGL2&&texture.type===_constants.HalfFloatType&&!1===extensions.has("OES_texture_half_float_linear")||!(1<texture.anisotropy||properties.get(texture).__currentAnisotropy)||(_gl.texParameterf(textureType,supportsMips.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropy,capabilities.getMaxAnisotropy())),
properties.get(texture).__currentAnisotropy=texture.anisotropy))}function initTexture(textureProperties,texture){let forceUpload=!1;void 0===textureProperties.__webglInit&&(textureProperties.__webglInit=!0,texture.addEventListener("dispose",onTextureDispose));var source=texture.source;let webglTextures=_sources.get(source);void 0===webglTextures&&(webglTextures={},_sources.set(source,webglTextures));source=[];source.push(texture.wrapS);source.push(texture.wrapT);source.push(texture.wrapR||0);source.push(texture.magFilter);
source.push(texture.minFilter);source.push(texture.anisotropy);source.push(texture.internalFormat);source.push(texture.format);source.push(texture.type);source.push(texture.generateMipmaps);source.push(texture.premultiplyAlpha);source.push(texture.flipY);source.push(texture.unpackAlignment);source.push(texture.encoding);source=source.join();if(source!==textureProperties.__cacheKey){void 0===webglTextures[source]&&(webglTextures[source]={texture:_gl.createTexture(),usedTimes:0},info.memory.textures++,
forceUpload=!0);webglTextures[source].usedTimes++;const webglTexture=webglTextures[textureProperties.__cacheKey];void 0!==webglTexture&&(webglTextures[textureProperties.__cacheKey].usedTimes--,0===webglTexture.usedTimes&&deleteTexture(texture));textureProperties.__cacheKey=source;textureProperties.__webglTexture=webglTextures[source].texture}return forceUpload}function uploadTexture(textureProperties,texture,slot){let textureType=_gl.TEXTURE_2D;if(texture.isDataArrayTexture||texture.isCompressedArrayTexture)textureType=
_gl.TEXTURE_2D_ARRAY;texture.isData3DTexture&&(textureType=_gl.TEXTURE_3D);var forceUpload=initTexture(textureProperties,texture);const source=texture.source;state.bindTexture(textureType,textureProperties.__webglTexture,_gl.TEXTURE0+slot);const sourceProperties=properties.get(source);if(source.version!==sourceProperties.__version||!0===forceUpload){state.activeTexture(_gl.TEXTURE0+slot);_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,texture.flipY);_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,texture.premultiplyAlpha);
_gl.pixelStorei(_gl.UNPACK_ALIGNMENT,texture.unpackAlignment);_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,_gl.NONE);slot=isWebGL2?!1:texture.wrapS!==_constants.ClampToEdgeWrapping||texture.wrapT!==_constants.ClampToEdgeWrapping||texture.minFilter!==_constants.NearestFilter&&texture.minFilter!==_constants.LinearFilter;slot=slot&&!1===isPowerOfTwo(texture.image);var image=resizeImage(texture.image,slot,!1,maxTextureSize);image=verifyColorSpace(texture,image);slot=isPowerOfTwo(image)||isWebGL2;
const glFormat=utils.convert(texture.format,texture.encoding);let glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding,texture.isVideoTexture);setTextureParameters(textureType,texture,slot);var mipmaps=texture.mipmaps,useTexStorage=isWebGL2&&!0!==texture.isVideoTexture;const allocateMemory=void 0===sourceProperties.__version||!0===forceUpload;forceUpload=getMipLevels(texture,image,slot);if(texture.isDepthTexture)glInternalFormat=
_gl.DEPTH_COMPONENT,isWebGL2?glInternalFormat=texture.type===_constants.FloatType?_gl.DEPTH_COMPONENT32F:texture.type===_constants.UnsignedIntType?_gl.DEPTH_COMPONENT24:texture.type===_constants.UnsignedInt248Type?_gl.DEPTH24_STENCIL8:_gl.DEPTH_COMPONENT16:texture.type===_constants.FloatType&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),texture.format===_constants.DepthFormat&&glInternalFormat===_gl.DEPTH_COMPONENT&&texture.type!==_constants.UnsignedShortType&&texture.type!==
_constants.UnsignedIntType&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),texture.type=_constants.UnsignedIntType,glType=utils.convert(texture.type)),texture.format===_constants.DepthStencilFormat&&glInternalFormat===_gl.DEPTH_COMPONENT&&(glInternalFormat=_gl.DEPTH_STENCIL,texture.type!==_constants.UnsignedInt248Type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),texture.type=_constants.UnsignedInt248Type,
glType=utils.convert(texture.type))),allocateMemory&&(useTexStorage?state.texStorage2D(_gl.TEXTURE_2D,1,glInternalFormat,image.width,image.height):state.texImage2D(_gl.TEXTURE_2D,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null));else if(texture.isDataTexture)if(0<mipmaps.length&&slot){useTexStorage&&allocateMemory&&state.texStorage2D(_gl.TEXTURE_2D,forceUpload,glInternalFormat,mipmaps[0].width,mipmaps[0].height);for(let i=0,il=mipmaps.length;i<il;i++)forceUpload=mipmaps[i],useTexStorage?
state.texSubImage2D(_gl.TEXTURE_2D,i,0,0,forceUpload.width,forceUpload.height,glFormat,glType,forceUpload.data):state.texImage2D(_gl.TEXTURE_2D,i,glInternalFormat,forceUpload.width,forceUpload.height,0,glFormat,glType,forceUpload.data);texture.generateMipmaps=!1}else useTexStorage?(allocateMemory&&state.texStorage2D(_gl.TEXTURE_2D,forceUpload,glInternalFormat,image.width,image.height),state.texSubImage2D(_gl.TEXTURE_2D,0,0,0,image.width,image.height,glFormat,glType,image.data)):state.texImage2D(_gl.TEXTURE_2D,
0,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data);else if(texture.isCompressedTexture)if(texture.isCompressedArrayTexture){useTexStorage&&allocateMemory&&state.texStorage3D(_gl.TEXTURE_2D_ARRAY,forceUpload,glInternalFormat,mipmaps[0].width,mipmaps[0].height,image.depth);for(let i=0,il=mipmaps.length;i<il;i++)forceUpload=mipmaps[i],texture.format!==_constants.RGBAFormat?null!==glFormat?useTexStorage?state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY,i,0,0,0,forceUpload.width,
forceUpload.height,image.depth,glFormat,forceUpload.data,0,0):state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY,i,glInternalFormat,forceUpload.width,forceUpload.height,image.depth,0,forceUpload.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):useTexStorage?state.texSubImage3D(_gl.TEXTURE_2D_ARRAY,i,0,0,0,forceUpload.width,forceUpload.height,image.depth,glFormat,glType,forceUpload.data):state.texImage3D(_gl.TEXTURE_2D_ARRAY,i,glInternalFormat,
forceUpload.width,forceUpload.height,image.depth,0,glFormat,glType,forceUpload.data)}else{useTexStorage&&allocateMemory&&state.texStorage2D(_gl.TEXTURE_2D,forceUpload,glInternalFormat,mipmaps[0].width,mipmaps[0].height);for(let i=0,il=mipmaps.length;i<il;i++)forceUpload=mipmaps[i],texture.format!==_constants.RGBAFormat?null!==glFormat?useTexStorage?state.compressedTexSubImage2D(_gl.TEXTURE_2D,i,0,0,forceUpload.width,forceUpload.height,glFormat,forceUpload.data):state.compressedTexImage2D(_gl.TEXTURE_2D,
i,glInternalFormat,forceUpload.width,forceUpload.height,0,forceUpload.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):useTexStorage?state.texSubImage2D(_gl.TEXTURE_2D,i,0,0,forceUpload.width,forceUpload.height,glFormat,glType,forceUpload.data):state.texImage2D(_gl.TEXTURE_2D,i,glInternalFormat,forceUpload.width,forceUpload.height,0,glFormat,glType,forceUpload.data)}else if(texture.isDataArrayTexture)useTexStorage?(allocateMemory&&
state.texStorage3D(_gl.TEXTURE_2D_ARRAY,forceUpload,glInternalFormat,image.width,image.height,image.depth),state.texSubImage3D(_gl.TEXTURE_2D_ARRAY,0,0,0,0,image.width,image.height,image.depth,glFormat,glType,image.data)):state.texImage3D(_gl.TEXTURE_2D_ARRAY,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);else if(texture.isData3DTexture)useTexStorage?(allocateMemory&&state.texStorage3D(_gl.TEXTURE_3D,forceUpload,glInternalFormat,image.width,image.height,image.depth),
state.texSubImage3D(_gl.TEXTURE_3D,0,0,0,0,image.width,image.height,image.depth,glFormat,glType,image.data)):state.texImage3D(_gl.TEXTURE_3D,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);else if(texture.isFramebufferTexture){if(allocateMemory)if(useTexStorage)state.texStorage2D(_gl.TEXTURE_2D,forceUpload,glInternalFormat,image.width,image.height);else for(mipmaps=image.width,image=image.height,useTexStorage=0;useTexStorage<forceUpload;useTexStorage++)state.texImage2D(_gl.TEXTURE_2D,
useTexStorage,glInternalFormat,mipmaps,image,0,glFormat,glType,null),mipmaps>>=1,image>>=1}else if(0<mipmaps.length&&slot){useTexStorage&&allocateMemory&&state.texStorage2D(_gl.TEXTURE_2D,forceUpload,glInternalFormat,mipmaps[0].width,mipmaps[0].height);for(let i=0,il=mipmaps.length;i<il;i++)forceUpload=mipmaps[i],useTexStorage?state.texSubImage2D(_gl.TEXTURE_2D,i,0,0,glFormat,glType,forceUpload):state.texImage2D(_gl.TEXTURE_2D,i,glInternalFormat,glFormat,glType,forceUpload);texture.generateMipmaps=
!1}else useTexStorage?(allocateMemory&&state.texStorage2D(_gl.TEXTURE_2D,forceUpload,glInternalFormat,image.width,image.height),state.texSubImage2D(_gl.TEXTURE_2D,0,0,0,glFormat,glType,image)):state.texImage2D(_gl.TEXTURE_2D,0,glInternalFormat,glFormat,glType,image);textureNeedsGenerateMipmaps(texture,slot)&&_gl.generateMipmap(textureType);sourceProperties.__version=source.version;if(texture.onUpdate)texture.onUpdate(texture)}textureProperties.__version=texture.version}function setupFrameBufferTexture(framebuffer,
renderTarget,texture,attachment,textureTarget){const glFormat=utils.convert(texture.format,texture.encoding),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);properties.get(renderTarget).__hasExternalTextures||(textureTarget===_gl.TEXTURE_3D||textureTarget===_gl.TEXTURE_2D_ARRAY?state.texImage3D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,renderTarget.depth,0,glFormat,glType,null):state.texImage2D(textureTarget,
0,glInternalFormat,renderTarget.width,renderTarget.height,0,glFormat,glType,null));state.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer);useMultisampledRTT(renderTarget)?multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER,attachment,textureTarget,properties.get(texture).__webglTexture,0,getRenderTargetSamples(renderTarget)):(textureTarget===_gl.TEXTURE_2D||textureTarget>=_gl.TEXTURE_CUBE_MAP_POSITIVE_X&&textureTarget<=_gl.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&_gl.framebufferTexture2D(_gl.FRAMEBUFFER,
attachment,textureTarget,properties.get(texture).__webglTexture,0);state.bindFramebuffer(_gl.FRAMEBUFFER,null)}function setupRenderBufferStorage(renderbuffer,renderTarget,isMultisample){_gl.bindRenderbuffer(_gl.RENDERBUFFER,renderbuffer);if(renderTarget.depthBuffer&&!renderTarget.stencilBuffer){var glInternalFormat=_gl.DEPTH_COMPONENT16;isMultisample||useMultisampledRTT(renderTarget)?((isMultisample=renderTarget.depthTexture)&&isMultisample.isDepthTexture&&(isMultisample.type===_constants.FloatType?
glInternalFormat=_gl.DEPTH_COMPONENT32F:isMultisample.type===_constants.UnsignedIntType&&(glInternalFormat=_gl.DEPTH_COMPONENT24)),isMultisample=getRenderTargetSamples(renderTarget),useMultisampledRTT(renderTarget)?multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER,isMultisample,glInternalFormat,renderTarget.width,renderTarget.height):_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER,isMultisample,glInternalFormat,renderTarget.width,renderTarget.height)):_gl.renderbufferStorage(_gl.RENDERBUFFER,
glInternalFormat,renderTarget.width,renderTarget.height);_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.DEPTH_ATTACHMENT,_gl.RENDERBUFFER,renderbuffer)}else if(renderTarget.depthBuffer&&renderTarget.stencilBuffer)glInternalFormat=getRenderTargetSamples(renderTarget),isMultisample&&!1===useMultisampledRTT(renderTarget)?_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER,glInternalFormat,_gl.DEPTH24_STENCIL8,renderTarget.width,renderTarget.height):useMultisampledRTT(renderTarget)?multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER,
glInternalFormat,_gl.DEPTH24_STENCIL8,renderTarget.width,renderTarget.height):_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.DEPTH_STENCIL,renderTarget.width,renderTarget.height),_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.RENDERBUFFER,renderbuffer);else for(renderbuffer=!0===renderTarget.isWebGLMultipleRenderTargets?renderTarget.texture:[renderTarget.texture],glInternalFormat=0;glInternalFormat<renderbuffer.length;glInternalFormat++){var texture=renderbuffer[glInternalFormat],
glFormat=utils.convert(texture.format,texture.encoding);const glType=utils.convert(texture.type);texture=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);glFormat=getRenderTargetSamples(renderTarget);isMultisample&&!1===useMultisampledRTT(renderTarget)?_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER,glFormat,texture,renderTarget.width,renderTarget.height):useMultisampledRTT(renderTarget)?multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER,glFormat,texture,
renderTarget.width,renderTarget.height):_gl.renderbufferStorage(_gl.RENDERBUFFER,texture,renderTarget.width,renderTarget.height)}_gl.bindRenderbuffer(_gl.RENDERBUFFER,null)}function setupDepthRenderbuffer(renderTarget){var renderTargetProperties=properties.get(renderTarget),isCube=!0===renderTarget.isWebGLCubeRenderTarget;if(renderTarget.depthTexture&&!renderTargetProperties.__autoAllocateDepthBuffer){if(isCube)throw Error("target.depthTexture not supported in Cube render targets");if(renderTarget&&
renderTarget.isWebGLCubeRenderTarget)throw Error("Depth Texture with cube render targets is not supported");state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer);if(!renderTarget.depthTexture||!renderTarget.depthTexture.isDepthTexture)throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");properties.get(renderTarget.depthTexture).__webglTexture&&renderTarget.depthTexture.image.width===renderTarget.width&&renderTarget.depthTexture.image.height===
renderTarget.height||(renderTarget.depthTexture.image.width=renderTarget.width,renderTarget.depthTexture.image.height=renderTarget.height,renderTarget.depthTexture.needsUpdate=!0);setTexture2D(renderTarget.depthTexture,0);renderTargetProperties=properties.get(renderTarget.depthTexture).__webglTexture;isCube=getRenderTargetSamples(renderTarget);if(renderTarget.depthTexture.format===_constants.DepthFormat)useMultisampledRTT(renderTarget)?multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER,
_gl.DEPTH_ATTACHMENT,_gl.TEXTURE_2D,renderTargetProperties,0,isCube):_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.DEPTH_ATTACHMENT,_gl.TEXTURE_2D,renderTargetProperties,0);else if(renderTarget.depthTexture.format===_constants.DepthStencilFormat)useMultisampledRTT(renderTarget)?multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.TEXTURE_2D,renderTargetProperties,0,isCube):_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.TEXTURE_2D,
renderTargetProperties,0);else throw Error("Unknown depthTexture format");}else if(isCube)for(renderTargetProperties.__webglDepthbuffer=[],isCube=0;6>isCube;isCube++)state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer[isCube]),renderTargetProperties.__webglDepthbuffer[isCube]=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[isCube],renderTarget,!1);else state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer),
renderTargetProperties.__webglDepthbuffer=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer,renderTarget,!1);state.bindFramebuffer(_gl.FRAMEBUFFER,null)}function getRenderTargetSamples(renderTarget){return Math.min(maxSamples,renderTarget.samples)}function useMultisampledRTT(renderTarget){const renderTargetProperties=properties.get(renderTarget);return isWebGL2&&0<renderTarget.samples&&!0===extensions.has("WEBGL_multisampled_render_to_texture")&&!1!==renderTargetProperties.__useRenderToTexture}
function verifyColorSpace(texture,image){const encoding=texture.encoding,format=texture.format,type=texture.type;if(!0===texture.isCompressedTexture||!0===texture.isVideoTexture||texture.format===_constants._SRGBAFormat)return image;encoding!==_constants.LinearEncoding&&(encoding===_constants.sRGBEncoding?!1===isWebGL2?!0===extensions.has("EXT_sRGB")&&format===_constants.RGBAFormat?(texture.format=_constants._SRGBAFormat,texture.minFilter=_constants.LinearFilter,texture.generateMipmaps=!1):image=
_ImageUtils.ImageUtils.sRGBToLinear(image):format===_constants.RGBAFormat&&type===_constants.UnsignedByteType||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",encoding));return image}const isWebGL2=capabilities.isWebGL2,maxTextures=capabilities.maxTextures,maxCubemapSize=capabilities.maxCubemapSize,maxTextureSize=capabilities.maxTextureSize,maxSamples=capabilities.maxSamples,
multisampledRTTExt=extensions.has("WEBGL_multisampled_render_to_texture")?extensions.get("WEBGL_multisampled_render_to_texture"):null,supportsInvalidateFramebuffer=/OculusBrowser/g.test("undefined"===typeof navigator?"":navigator.userAgent),_videoTextures=new WeakMap;let _canvas;const _sources=new WeakMap;let useOffscreenCanvas=!1;try{useOffscreenCanvas="undefined"!==typeof OffscreenCanvas&&null!==(new OffscreenCanvas(1,1)).getContext("2d")}catch(err){}let textureUnits=0;const wrappingToGL={[_constants.RepeatWrapping]:_gl.REPEAT,
[_constants.ClampToEdgeWrapping]:_gl.CLAMP_TO_EDGE,[_constants.MirroredRepeatWrapping]:_gl.MIRRORED_REPEAT},filterToGL={[_constants.NearestFilter]:_gl.NEAREST,[_constants.NearestMipmapNearestFilter]:_gl.NEAREST_MIPMAP_NEAREST,[_constants.NearestMipmapLinearFilter]:_gl.NEAREST_MIPMAP_LINEAR,[_constants.LinearFilter]:_gl.LINEAR,[_constants.LinearMipmapNearestFilter]:_gl.LINEAR_MIPMAP_NEAREST,[_constants.LinearMipmapLinearFilter]:_gl.LINEAR_MIPMAP_LINEAR};this.allocateTextureUnit=function(){const textureUnit=
textureUnits;textureUnit>=maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+textureUnit+" texture units while this GPU supports only "+maxTextures);textureUnits+=1;return textureUnit};this.resetTextureUnits=function(){textureUnits=0};this.setTexture2D=setTexture2D;this.setTexture2DArray=function(texture,slot){const textureProperties=properties.get(texture);0<texture.version&&textureProperties.__version!==texture.version?uploadTexture(textureProperties,texture,slot):state.bindTexture(_gl.TEXTURE_2D_ARRAY,
textureProperties.__webglTexture,_gl.TEXTURE0+slot)};this.setTexture3D=function(texture,slot){const textureProperties=properties.get(texture);0<texture.version&&textureProperties.__version!==texture.version?uploadTexture(textureProperties,texture,slot):state.bindTexture(_gl.TEXTURE_3D,textureProperties.__webglTexture,_gl.TEXTURE0+slot)};this.setTextureCube=function(texture,slot){const textureProperties=properties.get(texture);if(0<texture.version&&textureProperties.__version!==texture.version){if(6===
texture.image.length){var forceUpload=initTexture(textureProperties,texture),source=texture.source;state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__webglTexture,_gl.TEXTURE0+slot);var sourceProperties=properties.get(source);if(source.version!==sourceProperties.__version||!0===forceUpload){state.activeTexture(_gl.TEXTURE0+slot);_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,texture.flipY);_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,texture.premultiplyAlpha);_gl.pixelStorei(_gl.UNPACK_ALIGNMENT,
texture.unpackAlignment);_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,_gl.NONE);var isCompressed=texture.isCompressedTexture||texture.image[0].isCompressedTexture,isDataTexture=texture.image[0]&&texture.image[0].isDataTexture;slot=[];for(var i=0;6>i;i++)slot[i]=isCompressed||isDataTexture?isDataTexture?texture.image[i].image:texture.image[i]:resizeImage(texture.image[i],!1,!0,maxCubemapSize),slot[i]=verifyColorSpace(texture,slot[i]);var image=slot[0];i=isPowerOfTwo(image)||isWebGL2;const glFormat=
utils.convert(texture.format,texture.encoding),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding),useTexStorage=isWebGL2&&!0!==texture.isVideoTexture;forceUpload=void 0===sourceProperties.__version||!0===forceUpload;var levels=getMipLevels(texture,image,i);setTextureParameters(_gl.TEXTURE_CUBE_MAP,texture,i);if(isCompressed)for(useTexStorage&&forceUpload&&state.texStorage2D(_gl.TEXTURE_CUBE_MAP,levels,glInternalFormat,image.width,
image.height),isDataTexture=0;6>isDataTexture;isDataTexture++)for(isCompressed=slot[isDataTexture].mipmaps,forceUpload=0;forceUpload<isCompressed.length;forceUpload++)image=isCompressed[forceUpload],texture.format!==_constants.RGBAFormat?null!==glFormat?useTexStorage?state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+isDataTexture,forceUpload,0,0,image.width,image.height,glFormat,image.data):state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+isDataTexture,forceUpload,glInternalFormat,
image.width,image.height,0,image.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):useTexStorage?state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+isDataTexture,forceUpload,0,0,image.width,image.height,glFormat,glType,image.data):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+isDataTexture,forceUpload,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data);else for(isCompressed=texture.mipmaps,useTexStorage&&forceUpload&&
(0<isCompressed.length&&levels++,state.texStorage2D(_gl.TEXTURE_CUBE_MAP,levels,glInternalFormat,slot[0].width,slot[0].height)),forceUpload=0;6>forceUpload;forceUpload++)if(isDataTexture)for(useTexStorage?state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+forceUpload,0,0,0,slot[forceUpload].width,slot[forceUpload].height,glFormat,glType,slot[forceUpload].data):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+forceUpload,0,glInternalFormat,slot[forceUpload].width,slot[forceUpload].height,0,glFormat,
glType,slot[forceUpload].data),image=0;image<isCompressed.length;image++)levels=isCompressed[image].image[forceUpload].image,useTexStorage?state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+forceUpload,image+1,0,0,levels.width,levels.height,glFormat,glType,levels.data):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+forceUpload,image+1,glInternalFormat,levels.width,levels.height,0,glFormat,glType,levels.data);else for(useTexStorage?state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+forceUpload,
0,0,0,glFormat,glType,slot[forceUpload]):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+forceUpload,0,glInternalFormat,glFormat,glType,slot[forceUpload]),image=0;image<isCompressed.length;image++)levels=isCompressed[image],useTexStorage?state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+forceUpload,image+1,0,0,glFormat,glType,levels.image[forceUpload]):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+forceUpload,image+1,glInternalFormat,glFormat,glType,levels.image[forceUpload]);textureNeedsGenerateMipmaps(texture,
i)&&_gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);sourceProperties.__version=source.version;if(texture.onUpdate)texture.onUpdate(texture)}textureProperties.__version=texture.version}}else state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__webglTexture,_gl.TEXTURE0+slot)};this.rebindTextures=function(renderTarget,colorTexture,depthTexture){const renderTargetProperties=properties.get(renderTarget);void 0!==colorTexture&&setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,
renderTarget.texture,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_2D);void 0!==depthTexture&&setupDepthRenderbuffer(renderTarget)};this.setupRenderTarget=function(renderTarget){var texture=renderTarget.texture;const renderTargetProperties=properties.get(renderTarget);var textureProperties=properties.get(texture);renderTarget.addEventListener("dispose",onRenderTargetDispose);!0!==renderTarget.isWebGLMultipleRenderTargets&&(void 0===textureProperties.__webglTexture&&(textureProperties.__webglTexture=_gl.createTexture()),
textureProperties.__version=texture.version,info.memory.textures++);var isCube=!0===renderTarget.isWebGLCubeRenderTarget;const isMultipleRenderTargets=!0===renderTarget.isWebGLMultipleRenderTargets,supportsMips=isPowerOfTwo(renderTarget)||isWebGL2;if(isCube){renderTargetProperties.__webglFramebuffer=[];for(var i$jscomp$0=0;6>i$jscomp$0;i$jscomp$0++)renderTargetProperties.__webglFramebuffer[i$jscomp$0]=_gl.createFramebuffer()}else{renderTargetProperties.__webglFramebuffer=_gl.createFramebuffer();if(isMultipleRenderTargets)if(capabilities.drawBuffers){i$jscomp$0=
renderTarget.texture;for(let i=0,il=i$jscomp$0.length;i<il;i++){var attachmentProperties=properties.get(i$jscomp$0[i]);void 0===attachmentProperties.__webglTexture&&(attachmentProperties.__webglTexture=_gl.createTexture(),info.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(isWebGL2&&0<renderTarget.samples&&!1===useMultisampledRTT(renderTarget)){i$jscomp$0=isMultipleRenderTargets?texture:[texture];
renderTargetProperties.__webglMultisampledFramebuffer=_gl.createFramebuffer();renderTargetProperties.__webglColorRenderbuffer=[];state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglMultisampledFramebuffer);for(attachmentProperties=0;attachmentProperties<i$jscomp$0.length;attachmentProperties++){var texture$jscomp$0=i$jscomp$0[attachmentProperties];renderTargetProperties.__webglColorRenderbuffer[attachmentProperties]=_gl.createRenderbuffer();_gl.bindRenderbuffer(_gl.RENDERBUFFER,renderTargetProperties.__webglColorRenderbuffer[attachmentProperties]);
var glFormat=utils.convert(texture$jscomp$0.format,texture$jscomp$0.encoding);const glType=utils.convert(texture$jscomp$0.type);texture$jscomp$0=getInternalFormat(texture$jscomp$0.internalFormat,glFormat,glType,texture$jscomp$0.encoding,!0===renderTarget.isXRRenderTarget);glFormat=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER,glFormat,texture$jscomp$0,renderTarget.width,renderTarget.height);_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.COLOR_ATTACHMENT0+
attachmentProperties,_gl.RENDERBUFFER,renderTargetProperties.__webglColorRenderbuffer[attachmentProperties])}_gl.bindRenderbuffer(_gl.RENDERBUFFER,null);renderTarget.depthBuffer&&(renderTargetProperties.__webglDepthRenderbuffer=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer,renderTarget,!0));state.bindFramebuffer(_gl.FRAMEBUFFER,null)}}if(isCube){state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__webglTexture);setTextureParameters(_gl.TEXTURE_CUBE_MAP,
texture,supportsMips);for(textureProperties=0;6>textureProperties;textureProperties++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[textureProperties],renderTarget,texture,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_CUBE_MAP_POSITIVE_X+textureProperties);textureNeedsGenerateMipmaps(texture,supportsMips)&&_gl.generateMipmap(_gl.TEXTURE_CUBE_MAP)}else if(isMultipleRenderTargets){texture=renderTarget.texture;for(let i=0,il=texture.length;i<il;i++)textureProperties=texture[i],isCube=properties.get(textureProperties),
state.bindTexture(_gl.TEXTURE_2D,isCube.__webglTexture),setTextureParameters(_gl.TEXTURE_2D,textureProperties,supportsMips),setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,textureProperties,_gl.COLOR_ATTACHMENT0+i,_gl.TEXTURE_2D),textureNeedsGenerateMipmaps(textureProperties,supportsMips)&&_gl.generateMipmap(_gl.TEXTURE_2D)}else{isCube=_gl.TEXTURE_2D;if(renderTarget.isWebGL3DRenderTarget||renderTarget.isWebGLArrayRenderTarget)isWebGL2?isCube=renderTarget.isWebGL3DRenderTarget?
_gl.TEXTURE_3D:_gl.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.");state.bindTexture(isCube,textureProperties.__webglTexture);setTextureParameters(isCube,texture,supportsMips);setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,texture,_gl.COLOR_ATTACHMENT0,isCube);textureNeedsGenerateMipmaps(texture,supportsMips)&&_gl.generateMipmap(isCube)}state.unbindTexture();renderTarget.depthBuffer&&
setupDepthRenderbuffer(renderTarget)};this.updateRenderTargetMipmap=function(renderTarget){const supportsMips=isPowerOfTwo(renderTarget)||isWebGL2,textures=!0===renderTarget.isWebGLMultipleRenderTargets?renderTarget.texture:[renderTarget.texture];for(let i=0,il=textures.length;i<il;i++){var texture=textures[i];if(textureNeedsGenerateMipmaps(texture,supportsMips)){const target=renderTarget.isWebGLCubeRenderTarget?_gl.TEXTURE_CUBE_MAP:_gl.TEXTURE_2D;texture=properties.get(texture).__webglTexture;state.bindTexture(target,
texture);_gl.generateMipmap(target);state.unbindTexture()}}};this.updateMultisampleRenderTarget=function(renderTarget){if(isWebGL2&&0<renderTarget.samples&&!1===useMultisampledRTT(renderTarget)){const textures=renderTarget.isWebGLMultipleRenderTargets?renderTarget.texture:[renderTarget.texture];var width=renderTarget.width;const height=renderTarget.height;let mask=_gl.COLOR_BUFFER_BIT;const invalidationArray=[],depthStyle=renderTarget.stencilBuffer?_gl.DEPTH_STENCIL_ATTACHMENT:_gl.DEPTH_ATTACHMENT,
renderTargetProperties=properties.get(renderTarget),isMultipleRenderTargets=!0===renderTarget.isWebGLMultipleRenderTargets;if(isMultipleRenderTargets)for(var i=0;i<textures.length;i++)state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglMultisampledFramebuffer),_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.COLOR_ATTACHMENT0+i,_gl.RENDERBUFFER,null),state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer),_gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER,_gl.COLOR_ATTACHMENT0+
i,_gl.TEXTURE_2D,null,0);state.bindFramebuffer(_gl.READ_FRAMEBUFFER,renderTargetProperties.__webglMultisampledFramebuffer);state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER,renderTargetProperties.__webglFramebuffer);for(i=0;i<textures.length;i++){invalidationArray.push(_gl.COLOR_ATTACHMENT0+i);renderTarget.depthBuffer&&invalidationArray.push(depthStyle);var ignoreDepthValues=void 0!==renderTargetProperties.__ignoreDepthValues?renderTargetProperties.__ignoreDepthValues:!1;!1===ignoreDepthValues&&(renderTarget.depthBuffer&&
(mask|=_gl.DEPTH_BUFFER_BIT),renderTarget.stencilBuffer&&(mask|=_gl.STENCIL_BUFFER_BIT));isMultipleRenderTargets&&_gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER,_gl.COLOR_ATTACHMENT0,_gl.RENDERBUFFER,renderTargetProperties.__webglColorRenderbuffer[i]);!0===ignoreDepthValues&&(_gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER,[depthStyle]),_gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER,[depthStyle]));isMultipleRenderTargets&&(ignoreDepthValues=properties.get(textures[i]).__webglTexture,_gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER,
_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_2D,ignoreDepthValues,0));_gl.blitFramebuffer(0,0,width,height,0,0,width,height,mask,_gl.NEAREST);supportsInvalidateFramebuffer&&_gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER,invalidationArray)}state.bindFramebuffer(_gl.READ_FRAMEBUFFER,null);state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER,null);if(isMultipleRenderTargets)for(renderTarget=0;renderTarget<textures.length;renderTarget++)state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglMultisampledFramebuffer),
_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.COLOR_ATTACHMENT0+renderTarget,_gl.RENDERBUFFER,renderTargetProperties.__webglColorRenderbuffer[renderTarget]),width=properties.get(textures[renderTarget]).__webglTexture,state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer),_gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER,_gl.COLOR_ATTACHMENT0+renderTarget,_gl.TEXTURE_2D,width,0);state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER,renderTargetProperties.__webglMultisampledFramebuffer)}};
this.setupDepthRenderbuffer=setupDepthRenderbuffer;this.setupFrameBufferTexture=setupFrameBufferTexture;this.useMultisampledRTT=useMultisampledRTT};var _constants=require("module$node_modules$three$src$constants"),MathUtils=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!==typeof obj&&"function"!==typeof obj)return{default:obj};if((nodeInterop=_getRequireWildcardCache(nodeInterop))&&nodeInterop.has(obj))return nodeInterop.get(obj);var newObj={},hasPropertyDescriptor=
Object.defineProperty&&Object.getOwnPropertyDescriptor,key;for(key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj;nodeInterop&&nodeInterop.set(obj,newObj);return newObj}(require("module$node_modules$three$src$math$MathUtils")),_ImageUtils=require("module$node_modules$three$src$extras$ImageUtils"),
_utils=require("module$node_modules$three$src$utils")}
//# sourceMappingURL=module$node_modules$three$src$renderers$webgl$WebGLTextures.js.map
