shadow$provide.module$node_modules$three$src$renderers$webgl$WebGLTextures=function(global,require,module,exports){function _getRequireWildcardCache(nodeInterop$jscomp$0){if("function"!==typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop$jscomp$0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.WebGLTextures=function(_gl,extensions,
state,properties,capabilities,utils,info){function resizeImage(image,needsPowerOfTwo,needsNewCanvas,maxSize){var scale=1;if(image.width>maxSize||image.height>maxSize)scale=maxSize/Math.max(image.width,image.height);if(1>scale||!0===needsPowerOfTwo){if("undefined"!==typeof HTMLImageElement&&image instanceof HTMLImageElement||"undefined"!==typeof HTMLCanvasElement&&image instanceof HTMLCanvasElement||"undefined"!==typeof ImageBitmap&&image instanceof ImageBitmap)return maxSize=needsPowerOfTwo?MathUtils.floorPowerOfTwo:
Math.floor,needsPowerOfTwo=maxSize(scale*image.width),scale=maxSize(scale*image.height),void 0===_canvas&&(_canvas=useOffscreenCanvas?new OffscreenCanvas(needsPowerOfTwo,scale):(0,_utils.createElementNS)("canvas")),needsNewCanvas=needsNewCanvas?useOffscreenCanvas?new OffscreenCanvas(needsPowerOfTwo,scale):(0,_utils.createElementNS)("canvas"):_canvas,needsNewCanvas.width=needsPowerOfTwo,needsNewCanvas.height=scale,needsNewCanvas.getContext("2d").drawImage(image,0,0,needsPowerOfTwo,scale),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+
image.width+"x"+image.height+") to ("+needsPowerOfTwo+"x"+scale+")."),needsNewCanvas;"data"in image&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+image.width+"x"+image.height+").")}return image}function isPowerOfTwo(image){return MathUtils.isPowerOfTwo(image.width)&&MathUtils.isPowerOfTwo(image.height)}function textureNeedsGenerateMipmaps(texture,supportsMips){return texture.generateMipmaps&&supportsMips&&texture.minFilter!==_constants.NearestFilter&&texture.minFilter!==_constants.LinearFilter}
function getInternalFormat(internalFormatName,glFormat,glType,encoding,isVideoTexture=!1){if(!1===isWebGL2)return glFormat;if(null!==internalFormatName){if(void 0!==_gl[internalFormatName])return _gl[internalFormatName];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+internalFormatName+"'")}internalFormatName=glFormat;glFormat===_gl.RED&&(glType===_gl.FLOAT&&(internalFormatName=_gl.R32F),glType===_gl.HALF_FLOAT&&(internalFormatName=_gl.R16F),glType===_gl.UNSIGNED_BYTE&&
(internalFormatName=_gl.R8));glFormat===_gl.RG&&(glType===_gl.FLOAT&&(internalFormatName=_gl.RG32F),glType===_gl.HALF_FLOAT&&(internalFormatName=_gl.RG16F),glType===_gl.UNSIGNED_BYTE&&(internalFormatName=_gl.RG8));glFormat===_gl.RGBA&&(glType===_gl.FLOAT&&(internalFormatName=_gl.RGBA32F),glType===_gl.HALF_FLOAT&&(internalFormatName=_gl.RGBA16F),glType===_gl.UNSIGNED_BYTE&&(internalFormatName=encoding===_constants.sRGBEncoding&&!1===isVideoTexture?_gl.SRGB8_ALPHA8:_gl.RGBA8),glType===_gl.UNSIGNED_SHORT_4_4_4_4&&
(internalFormatName=_gl.RGBA4),glType===_gl.UNSIGNED_SHORT_5_5_5_1&&(internalFormatName=_gl.RGB5_A1));internalFormatName!==_gl.R16F&&internalFormatName!==_gl.R32F&&internalFormatName!==_gl.RG16F&&internalFormatName!==_gl.RG32F&&internalFormatName!==_gl.RGBA16F&&internalFormatName!==_gl.RGBA32F||extensions.get("EXT_color_buffer_float");return internalFormatName}function getMipLevels(texture,image,supportsMips){return!0===textureNeedsGenerateMipmaps(texture,supportsMips)||texture.isFramebufferTexture&&
texture.minFilter!==_constants.NearestFilter&&texture.minFilter!==_constants.LinearFilter?Math.log2(Math.max(image.width,image.height))+1:void 0!==texture.mipmaps&&0<texture.mipmaps.length?texture.mipmaps.length:texture.isCompressedTexture&&Array.isArray(texture.image)?image.mipmaps.length:1}function filterFallback(f){return f===_constants.NearestFilter||f===_constants.NearestMipmapNearestFilter||f===_constants.NearestMipmapLinearFilter?_gl.NEAREST:_gl.LINEAR}function onTextureDispose(event){event=
event.target;event.removeEventListener("dispose",onTextureDispose);{const textureProperties=properties.get(event);void 0!==textureProperties.__webglInit&&(_gl.deleteTexture(textureProperties.__webglTexture),properties.remove(event))}event.isVideoTexture&&_videoTextures.delete(event);info.memory.textures--}function onRenderTargetDispose(event){event=event.target;event.removeEventListener("dispose",onRenderTargetDispose);{const texture=event.texture;var renderTargetProperties=properties.get(event),
textureProperties=properties.get(texture);if(event){void 0!==textureProperties.__webglTexture&&(_gl.deleteTexture(textureProperties.__webglTexture),info.memory.textures--);event.depthTexture&&event.depthTexture.dispose();if(event.isWebGLCubeRenderTarget)for(textureProperties=0;6>textureProperties;textureProperties++)_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[textureProperties]),renderTargetProperties.__webglDepthbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[textureProperties]);
else _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer),renderTargetProperties.__webglDepthbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer),renderTargetProperties.__webglMultisampledFramebuffer&&_gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer),renderTargetProperties.__webglColorRenderbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer),renderTargetProperties.__webglDepthRenderbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
if(event.isWebGLMultipleRenderTargets)for(let i=0,il=texture.length;i<il;i++)renderTargetProperties=properties.get(texture[i]),renderTargetProperties.__webglTexture&&(_gl.deleteTexture(renderTargetProperties.__webglTexture),info.memory.textures--),properties.remove(texture[i]);properties.remove(texture);properties.remove(event)}}}function setTexture2D(texture,slot){const textureProperties=properties.get(texture);if(texture.isVideoTexture){var frame=info.render.frame;_videoTextures.get(texture)!==
frame&&(_videoTextures.set(texture,frame),texture.update())}if(0<texture.version&&textureProperties.__version!==texture.version)if(frame=texture.image,void 0===frame)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if(!1===frame.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{uploadTexture(textureProperties,texture,slot);return}state.activeTexture(_gl.TEXTURE0+slot);state.bindTexture(_gl.TEXTURE_2D,textureProperties.__webglTexture)}
function setTextureCube(texture,slot){const textureProperties=properties.get(texture);if(0<texture.version&&textureProperties.__version!==texture.version){if(6===texture.image.length){initTexture(textureProperties,texture);state.activeTexture(_gl.TEXTURE0+slot);state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__webglTexture);_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,texture.flipY);_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,texture.premultiplyAlpha);_gl.pixelStorei(_gl.UNPACK_ALIGNMENT,
texture.unpackAlignment);_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,_gl.NONE);var isCompressed=texture&&(texture.isCompressedTexture||texture.image[0].isCompressedTexture),isDataTexture=texture.image[0]&&texture.image[0].isDataTexture;slot=[];for(var i=0;6>i;i++)slot[i]=isCompressed||isDataTexture?isDataTexture?texture.image[i].image:texture.image[i]:resizeImage(texture.image[i],!1,!0,maxCubemapSize),slot[i]=verifyColorSpace(texture,slot[i]);var image=slot[0];i=isPowerOfTwo(image)||isWebGL2;
var glFormat=utils.convert(texture.format,texture.encoding),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding),useTexStorage=isWebGL2&&!0!==texture.isVideoTexture,allocateMemory=void 0===textureProperties.__version,levels=getMipLevels(texture,image,i);setTextureParameters(_gl.TEXTURE_CUBE_MAP,texture,i);if(isCompressed)for(useTexStorage&&allocateMemory&&state.texStorage2D(_gl.TEXTURE_CUBE_MAP,levels,glInternalFormat,image.width,
image.height),isDataTexture=0;6>isDataTexture;isDataTexture++)for(isCompressed=slot[isDataTexture].mipmaps,allocateMemory=0;allocateMemory<isCompressed.length;allocateMemory++)levels=isCompressed[allocateMemory],texture.format!==_constants.RGBAFormat?null!==glFormat?useTexStorage?state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+isDataTexture,allocateMemory,0,0,levels.width,levels.height,glFormat,levels.data):state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+isDataTexture,allocateMemory,
glInternalFormat,levels.width,levels.height,0,levels.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):useTexStorage?state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+isDataTexture,allocateMemory,0,0,levels.width,levels.height,glFormat,glType,levels.data):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+isDataTexture,allocateMemory,glInternalFormat,levels.width,levels.height,0,glFormat,glType,levels.data);else for(isCompressed=
texture.mipmaps,useTexStorage&&allocateMemory&&(0<isCompressed.length&&levels++,state.texStorage2D(_gl.TEXTURE_CUBE_MAP,levels,glInternalFormat,slot[0].width,slot[0].height)),allocateMemory=0;6>allocateMemory;allocateMemory++)if(isDataTexture)for(useTexStorage?state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+allocateMemory,0,0,0,slot[allocateMemory].width,slot[allocateMemory].height,glFormat,glType,slot[allocateMemory].data):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+allocateMemory,0,glInternalFormat,
slot[allocateMemory].width,slot[allocateMemory].height,0,glFormat,glType,slot[allocateMemory].data),levels=0;levels<isCompressed.length;levels++)image=isCompressed[levels].image[allocateMemory].image,useTexStorage?state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+allocateMemory,levels+1,0,0,image.width,image.height,glFormat,glType,image.data):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+allocateMemory,levels+1,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data);else for(useTexStorage?
state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+allocateMemory,0,0,0,glFormat,glType,slot[allocateMemory]):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+allocateMemory,0,glInternalFormat,glFormat,glType,slot[allocateMemory]),levels=0;levels<isCompressed.length;levels++)image=isCompressed[levels],useTexStorage?state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+allocateMemory,levels+1,0,0,glFormat,glType,image.image[allocateMemory]):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+allocateMemory,
levels+1,glInternalFormat,glFormat,glType,image.image[allocateMemory]);textureNeedsGenerateMipmaps(texture,i)&&_gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture)}}else state.activeTexture(_gl.TEXTURE0+slot),state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__webglTexture)}function setTextureParameters(textureType,texture,supportsMips){supportsMips?(_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_S,wrappingToGL[texture.wrapS]),
_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_T,wrappingToGL[texture.wrapT]),textureType!==_gl.TEXTURE_3D&&textureType!==_gl.TEXTURE_2D_ARRAY||_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_R,wrappingToGL[texture.wrapR]),_gl.texParameteri(textureType,_gl.TEXTURE_MAG_FILTER,filterToGL[texture.magFilter]),_gl.texParameteri(textureType,_gl.TEXTURE_MIN_FILTER,filterToGL[texture.minFilter])):(_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_S,_gl.CLAMP_TO_EDGE),_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_T,
_gl.CLAMP_TO_EDGE),textureType!==_gl.TEXTURE_3D&&textureType!==_gl.TEXTURE_2D_ARRAY||_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_R,_gl.CLAMP_TO_EDGE),texture.wrapS===_constants.ClampToEdgeWrapping&&texture.wrapT===_constants.ClampToEdgeWrapping||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),_gl.texParameteri(textureType,_gl.TEXTURE_MAG_FILTER,filterFallback(texture.magFilter)),_gl.texParameteri(textureType,
_gl.TEXTURE_MIN_FILTER,filterFallback(texture.minFilter)),texture.minFilter!==_constants.NearestFilter&&texture.minFilter!==_constants.LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));!0===extensions.has("EXT_texture_filter_anisotropic")&&(supportsMips=extensions.get("EXT_texture_filter_anisotropic"),texture.type===_constants.FloatType&&!1===extensions.has("OES_texture_float_linear")||!1===
isWebGL2&&texture.type===_constants.HalfFloatType&&!1===extensions.has("OES_texture_half_float_linear")||!(1<texture.anisotropy||properties.get(texture).__currentAnisotropy)||(_gl.texParameterf(textureType,supportsMips.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropy,capabilities.getMaxAnisotropy())),properties.get(texture).__currentAnisotropy=texture.anisotropy))}function initTexture(textureProperties,texture){void 0===textureProperties.__webglInit&&(textureProperties.__webglInit=!0,texture.addEventListener("dispose",
onTextureDispose),textureProperties.__webglTexture=_gl.createTexture(),info.memory.textures++)}function uploadTexture(textureProperties,texture,slot){let textureType=_gl.TEXTURE_2D;texture.isDataTexture2DArray&&(textureType=_gl.TEXTURE_2D_ARRAY);texture.isDataTexture3D&&(textureType=_gl.TEXTURE_3D);initTexture(textureProperties,texture);state.activeTexture(_gl.TEXTURE0+slot);state.bindTexture(textureType,textureProperties.__webglTexture);_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,texture.flipY);_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
texture.premultiplyAlpha);_gl.pixelStorei(_gl.UNPACK_ALIGNMENT,texture.unpackAlignment);_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,_gl.NONE);slot=isWebGL2?!1:texture.wrapS!==_constants.ClampToEdgeWrapping||texture.wrapT!==_constants.ClampToEdgeWrapping||texture.minFilter!==_constants.NearestFilter&&texture.minFilter!==_constants.LinearFilter;slot=slot&&!1===isPowerOfTwo(texture.image);var image=resizeImage(texture.image,slot,!1,maxTextureSize);image=verifyColorSpace(texture,image);slot=
isPowerOfTwo(image)||isWebGL2;const glFormat=utils.convert(texture.format,texture.encoding);let glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding,texture.isVideoTexture);setTextureParameters(textureType,texture,slot);const mipmaps=texture.mipmaps,useTexStorage=isWebGL2&&!0!==texture.isVideoTexture,allocateMemory=void 0===textureProperties.__version,levels=getMipLevels(texture,image,slot);if(texture.isDepthTexture)glInternalFormat=
_gl.DEPTH_COMPONENT,isWebGL2?glInternalFormat=texture.type===_constants.FloatType?_gl.DEPTH_COMPONENT32F:texture.type===_constants.UnsignedIntType?_gl.DEPTH_COMPONENT24:texture.type===_constants.UnsignedInt248Type?_gl.DEPTH24_STENCIL8:_gl.DEPTH_COMPONENT16:texture.type===_constants.FloatType&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),texture.format===_constants.DepthFormat&&glInternalFormat===_gl.DEPTH_COMPONENT&&texture.type!==_constants.UnsignedShortType&&texture.type!==
_constants.UnsignedIntType&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),texture.type=_constants.UnsignedShortType,glType=utils.convert(texture.type)),texture.format===_constants.DepthStencilFormat&&glInternalFormat===_gl.DEPTH_COMPONENT&&(glInternalFormat=_gl.DEPTH_STENCIL,texture.type!==_constants.UnsignedInt248Type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),texture.type=_constants.UnsignedInt248Type,
glType=utils.convert(texture.type))),useTexStorage&&allocateMemory?state.texStorage2D(_gl.TEXTURE_2D,1,glInternalFormat,image.width,image.height):state.texImage2D(_gl.TEXTURE_2D,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null);else if(texture.isDataTexture)if(0<mipmaps.length&&slot){useTexStorage&&allocateMemory&&state.texStorage2D(_gl.TEXTURE_2D,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);for(let i=0,il=mipmaps.length;i<il;i++)image=mipmaps[i],useTexStorage?state.texSubImage2D(_gl.TEXTURE_2D,
0,0,0,image.width,image.height,glFormat,glType,image.data):state.texImage2D(_gl.TEXTURE_2D,i,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data);texture.generateMipmaps=!1}else useTexStorage?(allocateMemory&&state.texStorage2D(_gl.TEXTURE_2D,levels,glInternalFormat,image.width,image.height),state.texSubImage2D(_gl.TEXTURE_2D,0,0,0,image.width,image.height,glFormat,glType,image.data)):state.texImage2D(_gl.TEXTURE_2D,0,glInternalFormat,image.width,image.height,0,glFormat,glType,
image.data);else if(texture.isCompressedTexture){useTexStorage&&allocateMemory&&state.texStorage2D(_gl.TEXTURE_2D,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);for(let i=0,il=mipmaps.length;i<il;i++)image=mipmaps[i],texture.format!==_constants.RGBAFormat?null!==glFormat?useTexStorage?state.compressedTexSubImage2D(_gl.TEXTURE_2D,i,0,0,image.width,image.height,glFormat,image.data):state.compressedTexImage2D(_gl.TEXTURE_2D,i,glInternalFormat,image.width,image.height,0,image.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):
useTexStorage?state.texSubImage2D(_gl.TEXTURE_2D,i,0,0,image.width,image.height,glFormat,glType,image.data):state.texImage2D(_gl.TEXTURE_2D,i,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data)}else if(texture.isDataTexture2DArray)useTexStorage?(allocateMemory&&state.texStorage3D(_gl.TEXTURE_2D_ARRAY,levels,glInternalFormat,image.width,image.height,image.depth),state.texSubImage3D(_gl.TEXTURE_2D_ARRAY,0,0,0,0,image.width,image.height,image.depth,glFormat,glType,image.data)):state.texImage3D(_gl.TEXTURE_2D_ARRAY,
0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);else if(texture.isDataTexture3D)useTexStorage?(allocateMemory&&state.texStorage3D(_gl.TEXTURE_3D,levels,glInternalFormat,image.width,image.height,image.depth),state.texSubImage3D(_gl.TEXTURE_3D,0,0,0,0,image.width,image.height,image.depth,glFormat,glType,image.data)):state.texImage3D(_gl.TEXTURE_3D,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);else if(texture.isFramebufferTexture)useTexStorage&&
allocateMemory?state.texStorage2D(_gl.TEXTURE_2D,levels,glInternalFormat,image.width,image.height):state.texImage2D(_gl.TEXTURE_2D,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null);else if(0<mipmaps.length&&slot){useTexStorage&&allocateMemory&&state.texStorage2D(_gl.TEXTURE_2D,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);for(let i=0,il=mipmaps.length;i<il;i++)image=mipmaps[i],useTexStorage?state.texSubImage2D(_gl.TEXTURE_2D,i,0,0,glFormat,glType,image):state.texImage2D(_gl.TEXTURE_2D,
i,glInternalFormat,glFormat,glType,image);texture.generateMipmaps=!1}else useTexStorage?(allocateMemory&&state.texStorage2D(_gl.TEXTURE_2D,levels,glInternalFormat,image.width,image.height),state.texSubImage2D(_gl.TEXTURE_2D,0,0,0,glFormat,glType,image)):state.texImage2D(_gl.TEXTURE_2D,0,glInternalFormat,glFormat,glType,image);textureNeedsGenerateMipmaps(texture,slot)&&_gl.generateMipmap(textureType);textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture)}function setupFrameBufferTexture(framebuffer,
renderTarget,texture,attachment,textureTarget){const glFormat=utils.convert(texture.format,texture.encoding),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);properties.get(renderTarget).__hasExternalTextures||(textureTarget===_gl.TEXTURE_3D||textureTarget===_gl.TEXTURE_2D_ARRAY?state.texImage3D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,renderTarget.depth,0,glFormat,glType,null):state.texImage2D(textureTarget,
0,glInternalFormat,renderTarget.width,renderTarget.height,0,glFormat,glType,null));state.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer);renderTarget.useRenderToTexture?MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER,attachment,textureTarget,properties.get(texture).__webglTexture,0,getRenderTargetSamples(renderTarget)):_gl.framebufferTexture2D(_gl.FRAMEBUFFER,attachment,textureTarget,properties.get(texture).__webglTexture,0);state.bindFramebuffer(_gl.FRAMEBUFFER,
null)}function setupRenderBufferStorage(renderbuffer,renderTarget,isMultisample){_gl.bindRenderbuffer(_gl.RENDERBUFFER,renderbuffer);if(renderTarget.depthBuffer&&!renderTarget.stencilBuffer){var glInternalFormat=_gl.DEPTH_COMPONENT16;isMultisample||renderTarget.useRenderToTexture?((isMultisample=renderTarget.depthTexture)&&isMultisample.isDepthTexture&&(isMultisample.type===_constants.FloatType?glInternalFormat=_gl.DEPTH_COMPONENT32F:isMultisample.type===_constants.UnsignedIntType&&(glInternalFormat=
_gl.DEPTH_COMPONENT24)),isMultisample=getRenderTargetSamples(renderTarget),renderTarget.useRenderToTexture?MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER,isMultisample,glInternalFormat,renderTarget.width,renderTarget.height):_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER,isMultisample,glInternalFormat,renderTarget.width,renderTarget.height)):_gl.renderbufferStorage(_gl.RENDERBUFFER,glInternalFormat,renderTarget.width,renderTarget.height);_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,
_gl.DEPTH_ATTACHMENT,_gl.RENDERBUFFER,renderbuffer)}else if(renderTarget.depthBuffer&&renderTarget.stencilBuffer)glInternalFormat=getRenderTargetSamples(renderTarget),isMultisample&&renderTarget.useRenderbuffer?_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER,glInternalFormat,_gl.DEPTH24_STENCIL8,renderTarget.width,renderTarget.height):renderTarget.useRenderToTexture?MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER,glInternalFormat,_gl.DEPTH24_STENCIL8,renderTarget.width,
renderTarget.height):_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.DEPTH_STENCIL,renderTarget.width,renderTarget.height),_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.RENDERBUFFER,renderbuffer);else{renderbuffer=!0===renderTarget.isWebGLMultipleRenderTargets?renderTarget.texture[0]:renderTarget.texture;glInternalFormat=utils.convert(renderbuffer.format,renderbuffer.encoding);const glType=utils.convert(renderbuffer.type);renderbuffer=getInternalFormat(renderbuffer.internalFormat,
glInternalFormat,glType,renderbuffer.encoding);glInternalFormat=getRenderTargetSamples(renderTarget);isMultisample&&renderTarget.useRenderbuffer?_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER,glInternalFormat,renderbuffer,renderTarget.width,renderTarget.height):renderTarget.useRenderToTexture?MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER,glInternalFormat,renderbuffer,renderTarget.width,renderTarget.height):_gl.renderbufferStorage(_gl.RENDERBUFFER,renderbuffer,
renderTarget.width,renderTarget.height)}_gl.bindRenderbuffer(_gl.RENDERBUFFER,null)}function setupDepthRenderbuffer(renderTarget){var renderTargetProperties=properties.get(renderTarget),isCube=!0===renderTarget.isWebGLCubeRenderTarget;if(renderTarget.depthTexture&&!renderTargetProperties.__autoAllocateDepthBuffer){if(isCube)throw Error("target.depthTexture not supported in Cube render targets");if(renderTarget&&renderTarget.isWebGLCubeRenderTarget)throw Error("Depth Texture with cube render targets is not supported");
state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer);if(!renderTarget.depthTexture||!renderTarget.depthTexture.isDepthTexture)throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");properties.get(renderTarget.depthTexture).__webglTexture&&renderTarget.depthTexture.image.width===renderTarget.width&&renderTarget.depthTexture.image.height===renderTarget.height||(renderTarget.depthTexture.image.width=renderTarget.width,renderTarget.depthTexture.image.height=
renderTarget.height,renderTarget.depthTexture.needsUpdate=!0);setTexture2D(renderTarget.depthTexture,0);renderTargetProperties=properties.get(renderTarget.depthTexture).__webglTexture;isCube=getRenderTargetSamples(renderTarget);if(renderTarget.depthTexture.format===_constants.DepthFormat)renderTarget.useRenderToTexture?MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER,_gl.DEPTH_ATTACHMENT,_gl.TEXTURE_2D,renderTargetProperties,0,isCube):_gl.framebufferTexture2D(_gl.FRAMEBUFFER,
_gl.DEPTH_ATTACHMENT,_gl.TEXTURE_2D,renderTargetProperties,0);else if(renderTarget.depthTexture.format===_constants.DepthStencilFormat)renderTarget.useRenderToTexture?MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.TEXTURE_2D,renderTargetProperties,0,isCube):_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.TEXTURE_2D,renderTargetProperties,0);else throw Error("Unknown depthTexture format");}else if(isCube)for(renderTargetProperties.__webglDepthbuffer=
[],isCube=0;6>isCube;isCube++)state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer[isCube]),renderTargetProperties.__webglDepthbuffer[isCube]=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[isCube],renderTarget,!1);else state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer),renderTargetProperties.__webglDepthbuffer=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer,
renderTarget,!1);state.bindFramebuffer(_gl.FRAMEBUFFER,null)}function getRenderTargetSamples(renderTarget){return isWebGL2&&(renderTarget.useRenderbuffer||renderTarget.useRenderToTexture)?Math.min(maxSamples,renderTarget.samples):0}function verifyColorSpace(texture,image){const encoding=texture.encoding,format=texture.format,type=texture.type;if(!0===texture.isCompressedTexture||!0===texture.isVideoTexture||texture.format===_constants._SRGBAFormat)return image;encoding!==_constants.LinearEncoding&&
(encoding===_constants.sRGBEncoding?!1===isWebGL2?!0===extensions.has("EXT_sRGB")&&format===_constants.RGBAFormat?(texture.format=_constants._SRGBAFormat,texture.minFilter=_constants.LinearFilter,texture.generateMipmaps=!1):image=_ImageUtils.ImageUtils.sRGBToLinear(image):format===_constants.RGBAFormat&&type===_constants.UnsignedByteType||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",
encoding));return image}const isWebGL2=capabilities.isWebGL2,maxTextures=capabilities.maxTextures,maxCubemapSize=capabilities.maxCubemapSize,maxTextureSize=capabilities.maxTextureSize,maxSamples=capabilities.maxSamples,MultisampledRenderToTextureExtension=extensions.has("WEBGL_multisampled_render_to_texture")?extensions.get("WEBGL_multisampled_render_to_texture"):void 0,_videoTextures=new WeakMap;let _canvas,useOffscreenCanvas=!1;try{useOffscreenCanvas="undefined"!==typeof OffscreenCanvas&&null!==
(new OffscreenCanvas(1,1)).getContext("2d")}catch(err){}let textureUnits=0;const wrappingToGL={[_constants.RepeatWrapping]:_gl.REPEAT,[_constants.ClampToEdgeWrapping]:_gl.CLAMP_TO_EDGE,[_constants.MirroredRepeatWrapping]:_gl.MIRRORED_REPEAT},filterToGL={[_constants.NearestFilter]:_gl.NEAREST,[_constants.NearestMipmapNearestFilter]:_gl.NEAREST_MIPMAP_NEAREST,[_constants.NearestMipmapLinearFilter]:_gl.NEAREST_MIPMAP_LINEAR,[_constants.LinearFilter]:_gl.LINEAR,[_constants.LinearMipmapNearestFilter]:_gl.LINEAR_MIPMAP_NEAREST,
[_constants.LinearMipmapLinearFilter]:_gl.LINEAR_MIPMAP_LINEAR};let warnedTexture2D=!1,warnedTextureCube=!1;this.allocateTextureUnit=function(){const textureUnit=textureUnits;textureUnit>=maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+textureUnit+" texture units while this GPU supports only "+maxTextures);textureUnits+=1;return textureUnit};this.resetTextureUnits=function(){textureUnits=0};this.setTexture2D=setTexture2D;this.setTexture2DArray=function(texture,slot){const textureProperties=
properties.get(texture);0<texture.version&&textureProperties.__version!==texture.version?uploadTexture(textureProperties,texture,slot):(state.activeTexture(_gl.TEXTURE0+slot),state.bindTexture(_gl.TEXTURE_2D_ARRAY,textureProperties.__webglTexture))};this.setTexture3D=function(texture,slot){const textureProperties=properties.get(texture);0<texture.version&&textureProperties.__version!==texture.version?uploadTexture(textureProperties,texture,slot):(state.activeTexture(_gl.TEXTURE0+slot),state.bindTexture(_gl.TEXTURE_3D,
textureProperties.__webglTexture))};this.setTextureCube=setTextureCube;this.rebindTextures=function(renderTarget,colorTexture,depthTexture){const renderTargetProperties=properties.get(renderTarget);void 0!==colorTexture&&setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,renderTarget.texture,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_2D);void 0!==depthTexture&&setupDepthRenderbuffer(renderTarget)};this.setupRenderTarget=function(renderTarget){var texture=renderTarget.texture;const renderTargetProperties=
properties.get(renderTarget);var textureProperties=properties.get(texture);renderTarget.addEventListener("dispose",onRenderTargetDispose);!0!==renderTarget.isWebGLMultipleRenderTargets&&(void 0===textureProperties.__webglTexture&&(textureProperties.__webglTexture=_gl.createTexture()),textureProperties.__version=texture.version,info.memory.textures++);var isCube=!0===renderTarget.isWebGLCubeRenderTarget;const isMultipleRenderTargets=!0===renderTarget.isWebGLMultipleRenderTargets;var isRenderTarget3D=
texture.isDataTexture3D||texture.isDataTexture2DArray;const supportsMips=isPowerOfTwo(renderTarget)||isWebGL2;if(isCube){renderTargetProperties.__webglFramebuffer=[];for(var i$jscomp$0=0;6>i$jscomp$0;i$jscomp$0++)renderTargetProperties.__webglFramebuffer[i$jscomp$0]=_gl.createFramebuffer()}else if(renderTargetProperties.__webglFramebuffer=_gl.createFramebuffer(),isMultipleRenderTargets)if(capabilities.drawBuffers){i$jscomp$0=renderTarget.texture;for(let i=0,il=i$jscomp$0.length;i<il;i++){var attachmentProperties=
properties.get(i$jscomp$0[i]);void 0===attachmentProperties.__webglTexture&&(attachmentProperties.__webglTexture=_gl.createTexture(),info.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else renderTarget.useRenderbuffer&&(isWebGL2?(renderTargetProperties.__webglMultisampledFramebuffer=_gl.createFramebuffer(),renderTargetProperties.__webglColorRenderbuffer=_gl.createRenderbuffer(),_gl.bindRenderbuffer(_gl.RENDERBUFFER,
renderTargetProperties.__webglColorRenderbuffer),i$jscomp$0=utils.convert(texture.format,texture.encoding),attachmentProperties=utils.convert(texture.type),i$jscomp$0=getInternalFormat(texture.internalFormat,i$jscomp$0,attachmentProperties,texture.encoding),attachmentProperties=getRenderTargetSamples(renderTarget),_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER,attachmentProperties,i$jscomp$0,renderTarget.width,renderTarget.height),state.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglMultisampledFramebuffer),
_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.COLOR_ATTACHMENT0,_gl.RENDERBUFFER,renderTargetProperties.__webglColorRenderbuffer),_gl.bindRenderbuffer(_gl.RENDERBUFFER,null),renderTarget.depthBuffer&&(renderTargetProperties.__webglDepthRenderbuffer=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer,renderTarget,!0)),state.bindFramebuffer(_gl.FRAMEBUFFER,null)):console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2."));
if(isCube){state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__webglTexture);setTextureParameters(_gl.TEXTURE_CUBE_MAP,texture,supportsMips);for(textureProperties=0;6>textureProperties;textureProperties++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[textureProperties],renderTarget,texture,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_CUBE_MAP_POSITIVE_X+textureProperties);textureNeedsGenerateMipmaps(texture,supportsMips)&&_gl.generateMipmap(_gl.TEXTURE_CUBE_MAP)}else if(isMultipleRenderTargets){texture=
renderTarget.texture;for(let i=0,il=texture.length;i<il;i++)textureProperties=texture[i],isRenderTarget3D=properties.get(textureProperties),state.bindTexture(_gl.TEXTURE_2D,isRenderTarget3D.__webglTexture),setTextureParameters(_gl.TEXTURE_2D,textureProperties,supportsMips),setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,textureProperties,_gl.COLOR_ATTACHMENT0+i,_gl.TEXTURE_2D),textureNeedsGenerateMipmaps(textureProperties,supportsMips)&&_gl.generateMipmap(_gl.TEXTURE_2D)}else isCube=
_gl.TEXTURE_2D,isRenderTarget3D&&(isWebGL2?isCube=texture.isDataTexture3D?_gl.TEXTURE_3D:_gl.TEXTURE_2D_ARRAY:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),state.bindTexture(isCube,textureProperties.__webglTexture),setTextureParameters(isCube,texture,supportsMips),setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,texture,_gl.COLOR_ATTACHMENT0,isCube),textureNeedsGenerateMipmaps(texture,supportsMips)&&_gl.generateMipmap(isCube);
state.unbindTexture();renderTarget.depthBuffer&&setupDepthRenderbuffer(renderTarget)};this.updateRenderTargetMipmap=function(renderTarget){const supportsMips=isPowerOfTwo(renderTarget)||isWebGL2,textures=!0===renderTarget.isWebGLMultipleRenderTargets?renderTarget.texture:[renderTarget.texture];for(let i=0,il=textures.length;i<il;i++){var texture=textures[i];if(textureNeedsGenerateMipmaps(texture,supportsMips)){const target=renderTarget.isWebGLCubeRenderTarget?_gl.TEXTURE_CUBE_MAP:_gl.TEXTURE_2D;texture=
properties.get(texture).__webglTexture;state.bindTexture(target,texture);_gl.generateMipmap(target);state.unbindTexture()}}};this.updateMultisampleRenderTarget=function(renderTarget){if(renderTarget.useRenderbuffer)if(isWebGL2){const width=renderTarget.width,height=renderTarget.height;let mask=_gl.COLOR_BUFFER_BIT;const invalidationArray=[_gl.COLOR_ATTACHMENT0],depthStyle=renderTarget.stencilBuffer?_gl.DEPTH_STENCIL_ATTACHMENT:_gl.DEPTH_ATTACHMENT;renderTarget.depthBuffer&&invalidationArray.push(depthStyle);
renderTarget.ignoreDepthForMultisampleCopy||(renderTarget.depthBuffer&&(mask|=_gl.DEPTH_BUFFER_BIT),renderTarget.stencilBuffer&&(mask|=_gl.STENCIL_BUFFER_BIT));const renderTargetProperties=properties.get(renderTarget);state.bindFramebuffer(_gl.READ_FRAMEBUFFER,renderTargetProperties.__webglMultisampledFramebuffer);state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER,renderTargetProperties.__webglFramebuffer);renderTarget.ignoreDepthForMultisampleCopy&&(_gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER,[depthStyle]),
_gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER,[depthStyle]));_gl.blitFramebuffer(0,0,width,height,0,0,width,height,mask,_gl.NEAREST);_gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER,invalidationArray);state.bindFramebuffer(_gl.READ_FRAMEBUFFER,null);state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER,renderTargetProperties.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")};this.setupDepthRenderbuffer=setupDepthRenderbuffer;this.setupFrameBufferTexture=
setupFrameBufferTexture;this.safeSetTexture2D=function(texture,slot){texture&&texture.isWebGLRenderTarget&&(!1===warnedTexture2D&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),warnedTexture2D=!0),texture=texture.texture);setTexture2D(texture,slot)};this.safeSetTextureCube=function(texture,slot){texture&&texture.isWebGLCubeRenderTarget&&(!1===warnedTextureCube&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),
warnedTextureCube=!0),texture=texture.texture);setTextureCube(texture,slot)}};var _constants=require("module$node_modules$three$src$constants"),MathUtils=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!==typeof obj&&"function"!==typeof obj)return{default:obj};if((nodeInterop=_getRequireWildcardCache(nodeInterop))&&nodeInterop.has(obj))return nodeInterop.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor,
key;for(key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj;nodeInterop&&nodeInterop.set(obj,newObj);return newObj}(require("module$node_modules$three$src$math$MathUtils")),_ImageUtils=require("module$node_modules$three$src$extras$ImageUtils"),_utils=require("module$node_modules$three$src$utils")}
//# sourceMappingURL=module$node_modules$three$src$renderers$webgl$WebGLTextures.js.map
