shadow$provide.module$node_modules$three$src$math$ColorManagement=function(global,require,module,exports){function SRGBToLinear(c){return.04045>c?.0773993808*c:Math.pow(.9478672986*c+.0521327014,2.4)}function LinearToSRGB(c){return.0031308>c?12.92*c:1.055*Math.pow(c,.41666)-.055}Object.defineProperty(exports,"__esModule",{value:!0});exports.SRGBToLinear=SRGBToLinear;exports.LinearToSRGB=LinearToSRGB;exports.ColorManagement=void 0;var _constants=require("module$node_modules$three$src$constants");const FN=
{[_constants.SRGBColorSpace]:{[_constants.LinearSRGBColorSpace]:SRGBToLinear},[_constants.LinearSRGBColorSpace]:{[_constants.SRGBColorSpace]:LinearToSRGB}};exports.ColorManagement={legacyMode:!0,get workingColorSpace(){return _constants.LinearSRGBColorSpace},set workingColorSpace(colorSpace){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(color,sourceColorSpace,targetColorSpace){if(this.legacyMode||sourceColorSpace===targetColorSpace||!sourceColorSpace||!targetColorSpace)return color;
if(FN[sourceColorSpace]&&void 0!==FN[sourceColorSpace][targetColorSpace])return sourceColorSpace=FN[sourceColorSpace][targetColorSpace],color.r=sourceColorSpace(color.r),color.g=sourceColorSpace(color.g),color.b=sourceColorSpace(color.b),color;throw Error("Unsupported color space conversion.");},fromWorkingColorSpace:function(color,targetColorSpace){return this.convert(color,this.workingColorSpace,targetColorSpace)},toWorkingColorSpace:function(color,sourceColorSpace){return this.convert(color,sourceColorSpace,
this.workingColorSpace)}}}
//# sourceMappingURL=module$node_modules$three$src$math$ColorManagement.js.map
