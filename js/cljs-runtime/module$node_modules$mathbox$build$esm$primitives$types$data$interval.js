shadow$provide.module$node_modules$mathbox$build$esm$primitives$types$data$interval=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Interval=void 0;global=require("module$node_modules$mathbox$build$esm$primitives$types$data$array");class Interval extends global.Array_{static initClass(){this.traits="node buffer active data source index texture array span interval sampler raw".split(" ")}updateSpan(){var dimension=this.props.axis;({width:inverse}=
this.props);const {centered}=this.props,pad=this.props.padding;dimension=this._helpers.span.get("",dimension);inverse+=2*pad;this.a=dimension.x;dimension=dimension.y-dimension.x;if(centered){var inverse=1/Math.max(1,inverse);this.a+=dimension*inverse/2}else inverse=1/Math.max(1,inverse-1);this.b=dimension*inverse;return this.a+=pad*this.b}callback(callback){this.updateSpan();if(this.last===callback)return this._callback;this.last=callback;return 3>=callback.length?this._callback=(emit,i)=>callback(emit,
this.a+this.b*i,i):this._callback=(emit,i)=>callback(emit,this.a+this.b*i,i,this.bufferClock,this.bufferStep)}make(){super.make();this._helpers.span.make();return this._listen(this,"span.range",this.updateSpan)}unmake(){super.unmake();return this._helpers.span.unmake()}change(changed,touched,init){super.change(changed,touched,init);touched.span&&this.updateSpan()}}exports.Interval=Interval;Interval.initClass()}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$primitives$types$data$interval.js.map
