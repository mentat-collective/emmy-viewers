{"version":3,"sources":["nextjournal/clojure_mode/extensions/eval_region.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.extensions.eval-region/uppermost-edge-here","pos","node","or__4253__auto__","cljs.core/iterate","nextjournal.clojure-mode.node/up","cljs.core.take_while","p1__88876#","cljs.core.every_pred","cljs.core/complement","nextjournal.clojure-mode.node/top?","cljs.core._EQ_","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/start","cljs.core/last","nextjournal.clojure-mode.extensions.eval-region/main-selection","state","parent__83650__auto__","f__83651__auto__","obj88883","obj88882","js/undefined","var_args","G__88897","nextjournal.clojure-mode.extensions.eval-region/node-at-cursor","js/Error","nextjournal.clojure_mode.extensions.eval_region.node_at_cursor","obj88903","from","G__88912","nextjournal.clojure-mode.node/nearest-touching","p1__88888#","nextjournal.clojure-mode.node/terminal-type?","nextjournal.clojure-mode.node/type","G__88922","nextjournal.clojure_mode.node.children","cljs.core/first","nextjournal.clojure_mode.node.balanced_range","nextjournal.clojure-mode.extensions.eval-region/top-level-node","obj88947","cljs.core/identity","js/nextjournal","js/nextjournal.clojure-mode","js/nextjournal.clojure-mode.extensions","js/nextjournal.clojure-mode.extensions.eval-region","js/nextjournal.clojure-mode.extensions.eval-region.modifier-effect","nextjournal.clojure-mode.extensions.eval-region/modifier-effect","js/module$node_modules$$codemirror$state$dist$index_cjs.StateEffect","js/nextjournal.clojure-mode.extensions.eval-region.modifier-field","nextjournal.clojure-mode.extensions.eval-region/modifier-field","js/module$node_modules$$codemirror$state$dist$index_cjs.StateField","cljs.core/constantly","value","tr","G__88959","p1__88955#","cljs.core.filter","obj88962","nextjournal.clojure-mode.extensions.eval-region/get-modifier-field","p__88963","map__88964","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj88967","obj88968","nextjournal.clojure-mode.extensions.eval-region/set-modifier-field!","view","dispatch","G__88969","p__88970","map__88972","obj88976","obj88978","nextjournal.clojure-mode.extensions.eval-region/mark","spec","to","js/module$node_modules$$codemirror$view$dist$index_cjs.Decoration","nextjournal.clojure-mode.extensions.eval-region/single-mark","range","js/nextjournal.clojure-mode.extensions.eval-region.mark-spec","nextjournal.clojure-mode.extensions.eval-region/mark-spec","js/nextjournal.clojure-mode.extensions.eval-region.mark-spec-highlight","nextjournal.clojure-mode.extensions.eval-region/mark-spec-highlight","nextjournal.clojure-mode.extensions.eval-region/cursor-range","js/nextjournal.clojure-mode.extensions.eval-region.region-field","nextjournal.clojure-mode.extensions.eval-region/region-field","p__88986","map__88988","obj88994","_value","map__88997","cljs.core/--destructure-map","cljs.core.get","Alt","Shift","Enter","temp__5751__auto__","and__4251__auto__","p1__88984#","nextjournal.clojure-mode.util/guard","cljs.core/not","obj89000","nextjournal.clojure-mode.extensions.eval-region/get-region-field","nextjournal.clojure-mode.extensions.eval-region/current-range","G__89007","obj__83643__auto__","f__83644__auto__","p1__89004#","obj89008","nextjournal.clojure-mode.extensions.eval-region/modifier-extension","modifier","handle-enter","p__89014","map__89017","obj89024","cljs.core.assoc","handle-key-event","p__89028","p__89029","map__89033","obj89062","obj89066","obj89071","obj89074","obj89078","map__89034","obj89083","event","altKey","shiftKey","metaKey","controlKey","type","prev","next","G__89089","js/module$node_modules$w3c_keyname$index_cjs.keyName","cljs.core.not_EQ_","handle-backspace","p__89094","map__89095","obj89101","obj89102","map__89105","obj89134","obj89141","G__89144","nextjournal.clojure-mode.util/user-event-annotation","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","js/module$node_modules$$codemirror$view$dist$index_cjs.EditorView","p__89153","map__89154","nextjournal.clojure-mode.extensions.eval-region/extension","nextjournal.clojure-mode.extensions.eval-region/cursor-node-string","G__89155","nextjournal.clojure-mode.util/range-str","clojure.string/blank?","nextjournal.clojure-mode.extensions.eval-region/top-level-string","G__89156"],"sourcesContent":["(ns nextjournal.clojure-mode.extensions.eval-region\n  (:require\n   [\"@codemirror/state\" :as state :refer [StateEffect StateField]]\n   [\"@codemirror/view\" :as view :refer [EditorView Decoration keymap]]\n   [\"w3c-keyname\" :refer [keyName]]\n   [applied-science.js-interop :as j]\n   [nextjournal.clojure-mode.util :as u]\n   [nextjournal.clojure-mode.node :as n]\n   [clojure.string :as str]))\n\n(defn uppermost-edge-here\n  \"Returns node or its highest ancestor that starts or ends at the cursor position.\"\n  [pos node]\n  (or (->> (iterate n/up node)\n           (take-while (every-pred (complement n/top?)\n                                   #(or (= pos (n/end %) (n/end node))\n                                        (= pos (n/start %) (n/start node)))))\n           (last))\n      node))\n\n(defn main-selection [state]\n  (-> (j/call-in state [:selection :asSingle])\n      (j/get-in [:ranges 0])))\n\n(defn node-at-cursor\n  ([state] (node-at-cursor state (j/get (main-selection state) :from)))\n  ([^js state from]\n   (some->> (n/nearest-touching state from -1)\n            (#(when (or (n/terminal-type? (n/type %))\n                        (<= (n/start %) from)\n                        (<= (n/end %) from))\n                (cond-> %\n                  (or (n/top? %)\n                      (and (not (n/terminal-type? (n/type %)))\n                           (< (n/start %) from (n/end %))))\n                  (-> (n/children from -1) first))))\n            (uppermost-edge-here from)\n            (n/balanced-range state))))\n\n(defn top-level-node [state]\n  (->> (n/nearest-touching state (j/get (main-selection state) :from) -1)\n       (iterate n/up)\n       (take-while (every-pred identity (complement n/top?)))\n       last))\n\n;; Modifier field\n(defonce modifier-effect (.define StateEffect))\n(defonce modifier-field\n         (.define StateField\n                  (j/lit {:create (constantly {})\n                          :update (fn [value ^js tr]\n                                    (or (some-> (first (filter #(.is ^js % modifier-effect) (.-effects tr)))\n                                                (j/get :value))\n                                        value))})))\n\n(defn get-modifier-field [^js state] (.field state modifier-field))\n\n(j/defn set-modifier-field! [^:js {:as view :keys [dispatch state]} value]\n  (dispatch #js{:effects (.of modifier-effect value)}))\n\n(j/defn mark [spec ^:js {:keys [from to]}]\n  (-> (.mark Decoration spec)\n      (.range from to)))\n\n(defn single-mark [spec range]\n  (.set Decoration #js[(mark spec range)]))\n\n(defonce mark-spec (j/lit {:attributes {:style \"background-color: rgba(0, 243, 255, 0.14);\"}}))\n(defonce mark-spec-highlight (j/lit {:attributes {:style \"background-color: rgba(0, 243, 255, 0.35);\"}}))\n\n(defn cursor-range [^js state]\n  (if (.. state -selection -main -empty)\n    (node-at-cursor state)\n    (.. state -selection -main)))\n\n(defonce region-field\n  (.define StateField\n           (j/lit\n            {:create  (constantly (.-none Decoration))\n             :update  (j/fn [_value ^:js {:keys [state]}]\n                        (let [{:strs [Alt Shift Enter]} (get-modifier-field state)\n                              spec (if Enter mark-spec-highlight mark-spec)]\n                          (if-let [range (cond (and Alt Shift) (top-level-node state)\n                                               Alt (or (u/guard (main-selection state)\n                                                                #(not (j/get % :empty)))\n                                                       (cursor-range state)))]\n                            (single-mark spec range)\n                            (.-none Decoration))))})))\n\n\n(defn get-region-field [^js state] (.field state region-field))\n\n(defn current-range [^js state]\n  (or (some-> (get-region-field state)\n              (j/call :iter)\n              (u/guard #(j/get % :value)))\n      (.. state -selection -main)))\n\n(defn modifier-extension\n  \"Maintains modifier-state-field, containing a map of {<modifier> true}, including Enter.\"\n  [modifier]\n  (let [handle-enter (j/fn handle-enter [^:js {:as view :keys [state]}]\n                       (set-modifier-field! view (assoc (get-modifier-field state) \"Enter\" true))\n                       nil)\n        handle-key-event (j/fn [^:js {:as event :keys [altKey shiftKey metaKey controlKey type]}\n                                ^:js {:as view :keys [state]}]\n                           (let [prev (get-modifier-field state)\n                                 next (cond-> {}\n                                        altKey (assoc \"Alt\" true)\n                                        shiftKey (assoc \"Shift\" true)\n                                        metaKey (assoc \"Meta\" true)\n                                        controlKey (assoc \"Control\" true)\n                                        (and (= \"keydown\" type)\n                                             (= \"Enter\" (keyName event)))\n                                        (assoc \"Enter\" true))]\n                             (when (not= prev next)\n                               (set-modifier-field! view next))))\n        handle-backspace (j/fn [^:js {:as view :keys [state dispatch]}]\n                           (j/let [^:js {:keys [from to]} (current-range state)]\n                             (when (not= from to)\n                               (dispatch (j/lit {:changes {:from from :to to :insert \"\"}\n                                                 :annotations (u/user-event-annotation \"delete\")})))\n                             true))]\n    #js[modifier-field\n        (.of keymap\n             (j/lit [{:key   (str modifier \"-Enter\")\n                      :shift handle-enter\n                      :run   handle-enter}\n                     {:key (str modifier \"-Backspace\")\n                      :run handle-backspace\n                      :shift handle-backspace}]))\n        (.domEventHandlers view/EditorView\n                           #js{:keydown handle-key-event\n                               :keyup   handle-key-event})]))\n\n(defn extension [{:keys [modifier]\n                  :or   {modifier \"Alt\"}}]\n  #js[(modifier-extension modifier)\n      region-field\n      (.. EditorView -decorations (from region-field))])\n\n(defn cursor-node-string [^js state]\n  (u/guard (some->> (node-at-cursor state)\n                    (u/range-str state))\n           (complement str/blank?)))\n\n(defn top-level-string [^js state]\n  (u/guard (some->> (top-level-node state)\n                    (u/range-str state))\n           (complement str/blank?)))\n"]}