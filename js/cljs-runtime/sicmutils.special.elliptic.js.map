{"version":3,"sources":["sicmutils/special/elliptic.cljc"],"mappings":"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","names":["sicmutils.special.elliptic/carlson-rf","x","y","z","errtol","tiny","big","third","c1","c2","c3","c4","x__4339__auto__","y__4340__auto__","x__4336__auto__","y__4337__auto__","sicmutils.util/illegal","xt","yt","zt","sqrtx","Math/sqrt","sqrty","sqrtz","alamb","xt'","yt'","zt'","ave","delx","dely","delz","Math/abs","e2","e3","sicmutils.special.elliptic/carlson-rd","eps","C1","C2","C3","C4","C5","C6","sum","fac","sump","facp","xp","yp","zp","ea","eb","ec","ed","ee","sicmutils.special.elliptic/carlson-rc","sqrtny","tnbg","comp1","comp2","cljs.core._EQ_","vec__90829","cljs.core.nth","w","s","sicmutils.special.elliptic/carlson-rj","p","C7","C8","vec__90854","pt","a","b","rcx","rho","tau","alpha","Math/pow","beta","pp","delp","rj","sicmutils.special.elliptic/elliptic-f","phi","k","Math/sin","sk","Math/cos","sicmutils.special.elliptic/elliptic-k","Math/PI","var_args","G__90877","sicmutils.special.elliptic/elliptic-e","js/Error","sicmutils.special.elliptic.elliptic_e","c","cc","q","sicmutils.special.elliptic/elliptic-integrals","continue","d","powers-2","sicmutils.value/machine-epsilon","first-elliptic-integral","G__90883","G__90884","sicmutils.special.elliptic/k-and-deriv","Kk","Ek","DKk","cont","G__90886","sicmutils.special.elliptic/elliptic-pi","n","sicmutils.special.elliptic.elliptic_pi","nss","sicmutils.special.elliptic/emc-u-d","emc","u","bo","G__90890","sicmutils.special.elliptic/jacobi-elliptic-functions","sicmutils.special.elliptic.jacobi_elliptic_functions","cljs.core/vector","sicmutils.value/sqrt-machine-epsilon","cn","Math/cosh","G__90897","G__90898","G__90899","Math/tanh","vec__90900","i","em","en","cljs.core/cons","vec__90982","sn","dn","cljs.core/seq","vec__90997","cljs.core/first","cljs.core/rest","vec__91005","a'","G__91011","G__91012","G__91013"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.special.elliptic\n  \"This namespace contains function to compute various [elliptic\n  integrals](https://en.wikipedia.org/wiki/Elliptic_integral) in [Carlson\n  symmetric form](https://en.wikipedia.org/wiki/Carlson_symmetric_form), as well\n  as the [Jacobi elliptic\n  functions](https://en.wikipedia.org/wiki/Jacobi_elliptic_functions).\"\n  (:require [sicmutils.util :as u]\n            [sicmutils.value :as v]))\n\n;; ## Carlson symmetric forms of elliptic integrals\n\n(defn carlson-rf\n  \"From W.H. Press, Numerical Recipes in C++, 2ed. NR::rf from section 6.11\n\n  Here's the reference for what's going on here:\n  http://phys.uri.edu/nigh/NumRec/bookfpdf/f6-11.pdf\n\n  Comment from Press, page 257:\n\n  'Computes Carlson\u2019s elliptic integral of the first kind, RF (x, y, z). x, y,\n  and z must be nonnegative, and at most one can be zero. TINY must be at least\n  5 times the machine underflow limit, BIG at most one fifth the machine\n  overflow limit.'\n\n  A value of 0.08 for the error tolerance parameter is adequate for single\n  precision (7 significant digits). Since the error scales as 6 n, we see that\n  0.0025 will yield double precision (16 significant digits) and require at most\n  two or three more iterations.'\n\n  This is called `Carlson-elliptic-1` in scmutils.\"\n  [x y z]\n  (let [errtol 0.0025\n        tiny 1.5e-38\n        big 3.0e37\n        third (/ 1.0 3.0)\n        c1 (/ 1 24.0)\n        c2 0.1\n        c3 (/ 3.0 44.0)\n        c4 (/ 1.0 14.0)]\n    (when (or (< (min x y z) 0)\n              (< (min (+ x y) (+ x z) (+ y z)) tiny)\n              (> (max x y z) big))\n      (u/illegal \"Carlson R_F\"))\n    (loop [xt x\n           yt y\n           zt z]\n      (let [sqrtx (Math/sqrt xt)\n            sqrty (Math/sqrt yt)\n            sqrtz (Math/sqrt zt)\n            alamb (+ (* sqrtx (+ sqrty sqrtz))\n                     (* sqrty sqrtz))\n            xt' (* 0.25 (+ xt alamb))\n            yt' (* 0.25 (+ yt alamb))\n            zt' (* 0.25 (+ zt alamb))\n            ave (* third (+ xt' yt' zt'))\n            delx (/ (- ave xt') ave)\n            dely (/ (- ave yt') ave)\n            delz (/ (- ave zt') ave)]\n        (if (> (max (Math/abs delx)\n                    (Math/abs dely)\n                    (Math/abs delz))\n               errtol)\n          (recur xt' yt' zt')\n          (let [e2 (- (* delx dely) (* delz delz))\n                e3 (* delx dely delz)]\n            (/ (+ 1.0\n                  (* (- (* c1 e2)\n                        c2\n                        (* c3 e3))\n                     e2)\n                  (* c4 e3))\n               (Math/sqrt ave))))))))\n\n(defn carlson-rd\n  \"Comment from Press, section 6.11, page 257:\n\n  'Computes Carlson\u2019s elliptic integral of the second kind, RD(x, y, z). x and y must be\n  nonnegative, and at most one can be zero. z must be positive. TINY must be at least twice\n  the negative 2/3 power of the machine overflow limit. BIG must be at most 0.1 \u00d7 ERRTOL\n  times the negative 2/3 power of the machine underflow limit.'\n\n  This is called `Carlson-elliptic-2` in scmutils.\"\n  [x y z]\n  (let [eps 0.0015\n        tiny 1.0e-25\n        big  4.5e21\n        C1   (/ 3.0 14.0)\n        C2   (/ 1.0 6.0)\n        C3   (/ 9.0 22.0)\n        C4   (/ 3.0 26.0)\n        C5   (* 0.25 C3)\n        C6   (* 1.5 C4)]\n    (when (or (< (min x y) 0)\n              (< (min (+ x y) z) tiny)\n              (> (max x y z) big))\n      (u/illegal \"Carlson R_D\"))\n    (loop [x x\n           y y\n           z z\n           sum 0.0\n           fac 1.0]\n      (let [sqrtx (Math/sqrt x)\n            sqrty (Math/sqrt y)\n            sqrtz (Math/sqrt z)\n            alamb (+ (* sqrtx (+ sqrty sqrtz))\n                     (* sqrty sqrtz))\n            sump  (+ sum (/ fac (* sqrtz (+ z alamb))))\n            facp  (* 0.25 fac)\n            xp    (* 0.25 (+ x alamb))\n            yp    (* 0.25 (+ y alamb))\n            zp    (* 0.25 (+ z alamb))\n            ave   (* 0.2 (+ xp yp (* 3.0 zp)))\n            delx  (/ (- ave xp) ave)\n            dely  (/ (- ave yp) ave)\n            delz  (/ (- ave zp) ave)]\n        (if (> (max (Math/abs delx)\n                    (Math/abs dely)\n                    (Math/abs delz))\n               eps)\n          (recur xp yp zp sump facp)\n          (let [ea (* delx dely)\n                eb (* delz delz)\n                ec (- ea eb)\n                ed (- ea (* 6.0 eb))\n                ee (+ ed ec ec)]\n            (+ (* 3.0 sump)\n               (/ (* facp\n                     (+ 1.0\n                        (* ed (- (* C5 ed) (* C6 delz ee) C1))\n                        (* delz (+ (* C2 ee)\n                                   (* delz (- (* C3 ec)\n                                              (* delz C4 ea)))))))\n                  (* ave (Math/sqrt ave))))))))))\n\n(defn carlson-rc\n  \"Computes Carlson\u2019s degenerate elliptic integral, $R_C(x, y)$. `x` must be\n  nonnegative and `y` must be nonzero. If `y < 0`, the Cauchy principal value is\n  returned.\n\n  Internal details:\n\n  - `tiny` must be at least 5 times the machine underflow limit\n  - `big` at most one fifth the machine maximum overflow limit.\"\n  [x y]\n  (let [errtol 0.0012\n        tiny   1.69e-38\n        sqrtny 1.3e-19\n        big    3.0e37\n        tnbg   (* tiny big)\n        comp1  (/ 2.236 sqrtny)\n        comp2  (/ (* tnbg tnbg) 25)\n        third (/ 1 3.0)\n        C1 0.3\n        C2 (/ 1.0 7.0)\n        C3 0.375\n        C4 (/ 9.0 22.0)]\n    (when (or (< x 0)\n              (= y 0)\n              (< (+ x (Math/abs y)) tiny)\n              (> (+ x (Math/abs y)) big)\n              (and (< y (- comp1))\n                   (> x 0)\n                   (< x comp2)))\n      (u/illegal \"Carlson R_C\"))\n    (let [[xt yt w] (if (> y 0)\n                      [x y 1]\n                      (let [xt (- x y)\n                            yt (- y)\n                            w  (/ (Math/sqrt x)\n                                  (Math/sqrt xt))]\n                        [xt yt w]))]\n      (loop [xt xt\n             yt yt]\n        (let [sqrtx (Math/sqrt xt)\n              sqrty (Math/sqrt yt)\n              alamb (+ (* 2 sqrtx sqrty)\n                       yt)\n              xp    (* 0.25 (+ xt alamb))\n              yp    (* 0.25 (+ yt alamb))\n              ave   (* third (+ xp yp yp))\n              s     (/ (- yp ave) ave)]\n          (if (> (Math/abs s) errtol)\n            (recur xp yp)\n            (* w (/ (+ 1.0 (* s s (+ C1 (* s (+ C2 (* s (+ C3 (* s C4))))))))\n                    (Math/sqrt ave)))))))))\n\n(defn carlson-rj\n  \"Computes\n  [Carlson\u2019s elliptic\n  integral](https://en.wikipedia.org/wiki/Carlson_symmetric_form) of the third\n  kind, `RJ(x, y, z, p)`.\n\n  `x`, `y`, and `z` must be nonnegative, and at most one can be zero. `p` must\n  be nonzero.\n\n  If `p < 0`, the Cauchy principal value is returned. `tiny` internally must be\n  at least twice the cube root of the machine underflow limit, `big` at most one\n  fifth the cube root of the machine overflow limit.\"\n  [x y z p]\n  (let [errtol 0.0015\n        tiny 2.5e-13\n        big 9.0e11\n        C1 (/ 3.0 14.0)\n        C2 (/ 1.0 3.0)\n        C3 (/ 3.0 22.0)\n        C4 (/ 3.0 26.0)\n        C5 (* 0.75 C3)\n        C6 (* 1.5 C4)\n        C7 (* 0.5 C2)\n        C8 (+ C3 C3)]\n    (when (or (< (min x y z) 0)\n              (< (min (+ x y)\n                      (+ x z)\n                      (+ y z)\n                      (Math/abs p)) tiny)\n              (> (max x y z (Math/abs p)) big))\n      (u/illegal \"Carlson R_J\"))\n    (let [[xt yt zt pt a b rcx]\n          (if (> p 0)\n            [x y z p]\n            (let [xt  (min x y z)\n                  zt  (max x y z)\n                  yt  (- (+ x y z)\n                         xt zt)\n                  a   (/ 1.0 (- yt p))\n                  b   (* a (- zt yt) (- yt xt))\n                  pt  (+ yt b)\n                  rho (/ (* xt zt) yt)\n                  tau (/ (* p pt) yt)\n                  rcx (carlson-rc rho tau)]\n              [xt yt zt pt a b rcx]))]\n      (loop [xt xt\n             yt yt\n             zt zt\n             pt pt\n             sum 0.0\n             fac 1.0]\n        (let [sqrtx (Math/sqrt xt)\n              sqrty (Math/sqrt yt)\n              sqrtz (Math/sqrt zt)\n              alamb (+ (* sqrtx (+ sqrty sqrtz))\n                       (* sqrty sqrtz))\n              alpha (-> (+ (* pt (+ sqrtx sqrty sqrtz))\n                           (* sqrtx sqrty sqrtz))\n                        (Math/pow 2))\n              beta  (* pt (Math/pow (+ pt alamb) 2))\n              sump  (+ sum (* fac (carlson-rc alpha beta)))\n              facp  (* 0.25 fac)\n              xp    (* 0.25 (+ xt alamb))\n              yp    (* 0.25 (+ yt alamb))\n              zp    (* 0.25 (+ zt alamb))\n              pp    (* 0.25 (+ pt alamb))\n              ave   (* 0.2 (+ xp yp zp pp pp))\n              delx  (/ (- ave xp) ave)\n              dely  (/ (- ave yp) ave)\n              delz  (/ (- ave zp) ave)\n              delp  (/ (- ave pp) ave)]\n          (if (> (max (Math/abs delx)\n                      (Math/abs dely)\n                      (Math/abs delz)\n                      (Math/abs delp))\n                 errtol)\n            (recur xp yp zp pp sump facp)\n            (let [ea (+ (* delx (+ dely delz))\n                        (* dely delz))\n                  eb (* delx dely delz)\n                  ec (* delp delp)\n                  ed (- ea (* 3.0 ec))\n                  ee (+ eb (* 2.0 delp (- ea ec)))\n                  rj (+ (* 3.0 sump)\n                        (/ (* facp\n                              (+ 1.0\n                                 (* ed (- (* C5 ed)\n                                          (* C6 ee)\n                                          C1))\n                                 (* eb (+ C7 (* delp (- (* delp C4) C8))))\n                                 (* delp ea (- C2 (* delp C3)))\n                                 (- (* C2 delp ec))))\n                           (* ave (Math/sqrt ave))))]\n              (if (<= p 0)\n                (* a (+ (* b rj)\n                        (* 3.0 (- rcx (carlson-rf xp yp zp)))))\n                rj))))))))\n\n;; ## Legendre Forms of elliptic integrals\n\n(defn elliptic-f\n  \"Legendre elliptic integral of the first kind F(\u03c6, k).\n   See W.H. Press, Numerical Recipes in C++, 2ed. eq. 6.11.19\n\n  See [page 260](http://phys.uri.edu/nigh/NumRec/bookfpdf/f6-11.pdf).\"\n  [phi k]\n  (let [s  (Math/sin phi)\n        sk (* s k)]\n    (* s (carlson-rf (Math/pow (Math/cos phi) 2)\n                     (* (- 1 sk)\n                        (+ 1 sk))\n                     1))))\n\n(defn elliptic-k\n  \"Complete elliptic integral of the first kind - see Press, 6.11.18.\"\n  [k]\n  (elliptic-f (/ Math/PI 2) k))\n\n(defn elliptic-e\n  \"Passing `k` returns the complete elliptic integral of the second kind - see\n  Press, 6.11.20.\n\n  The two-arity version returns the Legendre elliptic integral of the second\n  kind E(\u03c6, k). See W.H. Press, Numerical Recipes in C++, 2ed. eq. 6.11.20.\n\n  See [page 260](http://phys.uri.edu/nigh/NumRec/bookfpdf/f6-11.pdf).\"\n  ([k] (elliptic-e (/ Math/PI 2) k))\n  ([phi k]\n   (let [s  (Math/sin phi)\n         c  (Math/cos phi)\n         cc (* c c)\n         sk (* s k)\n         q  (* (- 1 sk)\n               (+ 1 sk))]\n     (* s (- (carlson-rf cc q 1.0)\n             (* (* sk sk)\n                (/ (carlson-rd cc q 1.0) 3.0)))))))\n\n;; Note from `scmutils` to accompany the following port: \"older definition of\n;; the complete elliptic integrals, probably from A&Stegun\"\n\n(defn elliptic-integrals\n  \"Computes the first and second complete elliptic integrals at once, and passes\n  them to the supplied continuation as args `K` and `E`.\"\n  [k continue]\n  (if (= k 1)\n    (continue ##Inf 1.0)\n    (loop [a        1.0\n           b        (Math/sqrt (- 1.0 (* k k)))\n           c        k\n           d        0.0\n           powers-2 1.0]\n      (if (< (Math/abs c) v/machine-epsilon)\n        (let [first-elliptic-integral (/ (/ Math/PI 2) a)]\n          (continue first-elliptic-integral\n                    (* first-elliptic-integral\n                       (- 1.0 (/ d 2.0)))))\n        (recur (/ (+ a b) 2.0)\n               (Math/sqrt (* a b))\n               (/ (- a b) 2.0)\n               (+ d (* (* c c) powers-2))\n               (* powers-2 2.0))))))\n\n(defn k-and-deriv\n  \"Returns a pair of:\n\n  - the elliptic integral of the first kind, `K`\n  - the derivative `dK/dk`\n\n  evaluated at `k`.\"\n  [k]\n  (if (= k 0.0)\n    [(/ Math/PI 2) 0.0]\n    (letfn [(cont [Kk Ek]\n              (let [DKk (/ (- (/ Ek (- 1 (* k k))) Kk)\n                           k)]\n                [Kk DKk]))]\n      (elliptic-integrals k cont))))\n\n(defn elliptic-pi\n  \"The two-arity call returns the complete elliptic integral of the third kind -\n  see\n  https://en.wikipedia.org/wiki/Carlson_symmetric_form#Complete_elliptic_integrals\n  for reference.\n\n  The three-arity call returns the Legendre elliptic integral of the third kind\n  \u03a0(\u03c6, k). See W.H. Press, Numerical Recipes in C++, 2ed. eq. 6.11.21; Note that\n  our sign convention for `n` is opposite theirs.\n\n  See [page 260](http://phys.uri.edu/nigh/NumRec/bookfpdf/f6-11.pdf).\"\n  ([n k] (elliptic-pi (/ Math/PI 2) n k))\n  ([phi n k]\n   (let [s   (Math/sin phi)\n         c   (Math/cos phi)\n         nss (* n s s)\n         cc  (* c c)\n         sk  (* s k)\n         q   (* (- 1 sk)\n                (+ 1 sk))]\n     (* s (+ (carlson-rf cc q 1.0)\n             (* nss (/ (carlson-rj cc q 1.0 (- 1.0 nss)) 3.0)))))))\n\n;; ## Jacobi Elliptic Functions\n\n(defn- emc-u-d\n  \"Internal helper to set constants for [[Jacobi-elliptic-functions]].\n  \"[emc u d]\n  (let [bo (< emc 0.0)]\n    (if bo\n      (let [d (- 1. emc)\n            emc (- (/ emc d))\n            d (Math/sqrt d)\n            u (* u d)]\n        [bo emc u d])\n      [bo emc u d])))\n\n(defn jacobi-elliptic-functions\n  \"Direct Clojure translation (via the Scheme translation in scmutils) of W.H.\n  Press, Numerical Recipes, subroutine `sncndn`.\n\n  Calls the supplied continuation `cont` with `sn`, `cn` and `dn` as defined\n  below.\n\n  If no `cont` is supplied, returns a three-vector of `sn`, `cn` and `dn`.\n\n  Comments from Press, page 261:\n\n  The Jacobian elliptic function sn is defined as follows: instead of\n  considering the elliptic integral\n\n  $$u(y, k) \\\\equiv u=F(\\\\phi, k)$$\n\n  Consider the _inverse_ function:\n\n  ```\n  $$y = \\\\sin \\\\phi = \\\\mathrm{sn}(u, k)$$\n  ```\n\n  Equivalently,\n\n  ```\n  $$u=\\\\int_{0}^{\\\\mathrm{sn}} \\\\frac{d y}{\\\\sqrt{\\\\left(1-y^{2}\\\\right)\\\\left(1-k^{2} y^{2}\\\\right)}}$$\n  ```\n\n  When $k = 0$, $sn$ is just $\\\\sin$. The functions $cn$ and $dn$ are defined by\n  the relations\n\n  ```\n  $$\\\\mathrm{sn}^{2}+\\\\mathrm{cn}^{2}=1, \\\\quad k^{2} \\\\mathrm{sn}^{2}+\\\\mathrm{dn}^{2}=1$$\n  ```\n\n  The function calls the continuation with all three functions $sn$, $cn$, and\n  $dn$ since computing all three is no harder than computing any one of them.\"\n  ([u k]\n   (jacobi-elliptic-functions u k vector))\n  ([u k cont]\n   (let [eps v/sqrt-machine-epsilon\n         emc (- 1. (* k k))]\n     (if (= emc 0.0)\n       (let [cn (/ 1.0 (Math/cosh u))]\n         (cont (Math/tanh u) cn cn))\n       (let [[bo emc u d] (emc-u-d emc u 1.0)]\n         (loop [a   1.0\n                emc emc\n                i   1\n                em  []\n                en  []]\n           (let [emc (Math/sqrt emc)\n                 c   (* 0.5 (+ a emc))]\n             (if (and (> (Math/abs (- a emc))\n                         (* eps a))\n                      (< i 13))\n               (recur c (* a emc)\n                      (+ i 1)\n                      (cons a em)\n                      (cons emc en))\n               ;; label 1\n               (let [u (* c u)\n                     sn (Math/sin u)\n                     cn (Math/cos u)\n                     [a sn cn dn] (if (= sn 0.0)\n                                    [a sn cn 1.0]\n                                    (loop [em em\n                                           en en\n                                           a  (/ cn sn)\n                                           c  (* a c)\n                                           dn 1.0]\n                                      (if (and (seq em)\n                                               (seq en))\n                                        (let [b (first em)\n                                              [a c dn] (let [a  (* c a)\n                                                             c  (* dn c)\n                                                             dn (/ (+ (first en) a) (+ a b))\n                                                             a  (/ c b)]\n                                                         [a c dn])]\n                                          (recur (rest em) (rest en) a c dn))\n                                        (let [a' (/ 1.0 (Math/sqrt (+ 1. (* c c))))\n                                              [sn cn] (let [sn (if (< sn 0.0) (- a') a')\n                                                            cn (* c sn)]\n                                                        [sn cn])]\n                                          [a sn cn dn]))))]\n\n                 (if bo\n                   (cont (/ sn d) a cn)\n                   (cont sn cn dn)))))))))))\n"]}