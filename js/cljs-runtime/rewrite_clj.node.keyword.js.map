{"version":3,"sources":["rewrite_clj/node/keyword.cljc"],"mappings":";;AAOA,4CAAA,5CAAOA,gGAAkBC,cAAcC;AAAvC,AACE,GAAM,AAACC,cAAI,iBAAAC,oBAAKH;AAAL,AAAA,oBAAAG;AAAmB,oDAAA,7CAACC,iDAAM,AAAA,uFAASH;;AAAnCE;;;AAAX,AACE,IAAAE,mBAAIJ;AAAJ,AAAA,oBAAAI;AAAAA;;AAAiBL;;;AADnB;;;AAGF,wCAAA,xCAAMM,wFAAcC,EAAEC;AAAtB,AACE,oBAAM,iBAAAH,mBAAIG;AAAJ,AAAA,oBAAAH;AAAAA;;AAAmB,OAACI,oBAAUF;;;AAApC,AAAA,kDAAA,+FAAA,rBACmBC,8EACR,AAACC,oBAAUF;;AAFtB;;;AAIF,yCAAA,0FAAAG,nIAAMI,0FAAeC,GAAGC,wBAAkBhB;AAA1C,AAAA,IAAAW,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;mBAAA,AAAAE,4CAAAF,eAAA,1EAAgEM;AAAhE,AACE,IAAMC,IAAE,AAACnB,0CAAiBC,cAAc,AAACM,sCAAaS,GAAGC;AAAzD,AACE,OAACG,gDAAQ,iBAAAC,WAAQ,kBAAI,AAAA,wGAAiBF,IACnB,iBAAAG,WACC,iBAAAhB,mBAAI,iBAAAmB,WAAQ,AAAA,uFAASN;AAAjB,AAAA,GAAA,CAAAM,YAAA;AAAA;;AAAA,sDAAAA,/CAAoBC;;;AAAxB,AAAA,oBAAApB;AAAAA;;AAAA;;;IADDiB,eAAC,iBAAAjB,mBAAIY;AAAJ,AAAA,oBAAAZ;AAAAA;;AAAiBkB;;;AAAlB,AAAA,QAAAD,6CAAAA,2CAAAD,YAAAC,uBAAAD;KAGA,AAAA,uFAASH;AAJnB,AAAA,GAAA,CAAAE,YAAA;AAAA;;AAAA,mDAAAA;;KAMA,AAACM,eAAKX;;AAEnB,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,0DAAA,1DAAW+E;;AAAX,AAAA,WAAA,PAyBaiB;AAzBb,AA0BI,OAAaA;;;AA1BjB,CAAA,AAAA,mFAAA,WAAApF,mBAAAC,jHAAWkE;;AAAX,AAAA,IAAAnE,yBAAA;AAAA,AAAA,OAAAA,8DAAAC,gBAAA;;;AAAA,CAAA,AAAA,mFAAA,WAAAC,mBAAAC,OAAAC,xHAAW+D;;AAAX,AAAA,IAAAjE,yBAAA;AAAA,AAAA,IAAAG,WAAAF;IAAAE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAAzB;;;KAAA;AAAAC;;;KAAA;AAAAR;;;;AAAA,OAAAa,4CAAAqB,gBAAAJ,OAAAC;;;;;AAAA,CAAA,AAAA,wFAAA,WAAAI,mBAAAC,gBAAAC,tIAAWyD;;AAAX,AAAA,IAAA3D,yBAAA;AAAA,AAAA,OAAAG,+CAAA,WAAAC,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,kBAAA,AAAAC,4CAAAF,WAAA,IAAA;IAAAG,kBAAA,AAAAD,4CAAAF,WAAA,IAAA;AAAA,AAAA,QAAAL,gDAAAA,8CAAAG,kBAAAG,gBAAAE,mBAAAR,0BAAAG,kBAAAG,gBAAAE;GAAAP,mBAAAF;;;AAAA,CAAA,AAAA,4FAAAU,5FAAWiD;;AAAX,CAAA,AAAA,qHAAA,rHAAWA,gIAmBWiB,KAAK/G;;AAnB3B,AAAA,eAAA,XAmBsB+G;AAnBtB,AAoBI,8DAAA,vDAAC3B,8CAAM2B,iFAAoB/G;;;AApB/B,CAAA,AAAA,qHAAA,rHAAW8F,gIAqBWiB;;AArBtB,AAAA,eAAA,XAqBsBA;AArBtB,AAsBI,8DAAA,wEAAA,/HAAC3B,8CAAM2B;;;AAtBX,CAAA,AAAA,+FAAA,WAAAjE,mBAAAC,qBAAAC,lJAAW8C;;AAAX,AAAA,IAAAhD,yBAAA;AAAA,AAAA,IAAAG,wBAAA,WAAAC;AAAA,AAAA,OAAAC,+BAAAJ,qBAAA,oBAAA,GAAA,IAAA,GAAAC,mBAAAE;;AAAA,AAAA,OAAAC,+BAAAJ,qBAAAE,sBAAA,yCAAA,KAAA,IAAAD,mBAAA,AAAAI,+CAAA,mFAAA,KAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,gDAAA9C,UAAA,OAAA,KAAA8C,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,0EAAA7C,6BAAA,OAAA,KAAA6C,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,wEAAArD,sBAAA,eAAAkC;;;AAAA,CAAA,AAAA,uFAAA,WAAAoB,lGAAWwC;;AAAX,AAAA,IAAAxC,eAAA;AAAA,AAAA,YAAAC,qBAAA,IAAAD,aAAA,EAAA,mFAAA,gDAAA,0EAAA,gFAAA,kBAAApB,iBAAA,AAAAsB,oBAAAtB,iBAAA,AAAAuB;;;AAAA,CAAA,AAAA,+EAAA,WAAAC,1FAAWoC;;AAAX,AAAA,IAAApC,yBAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,qFAAA,WAAAC,hGAAWkC;;AAAX,AAAA,IAAAlC,yBAAA;AAAA,AAAA,iDAAArD,SAAAC,4BAAAR,qBAAA2D,cAAAzB,gBAAA2B,7HAAWiC;;;AAAX,CAAA,AAAA,mFAAA,WAAAhC,9FAAWgC;;AAAX,AAAA,IAAAhC,yBAAA;AAAA,AAAA,QAAA,IAAA,AAAAC,gBAAA7B;;;AAAA,CAAA,AAAA,+EAAA,WAAA8B,1FAAW8B;;AAAX,AAAA,IAAA9B,yBAAA;AAAA,AAAA,IAAAC,kBAAAJ;AAAA,AAAA,GAAA,GAAA,CAAAI,mBAAA;AAAAA;;AAAA,IAAAA,sBAAA,AAAA,WAAAC;AAAA,AAAA,QAAA,cAAA,AAAAC,8BAAAD;GAAAF;AAAA,AAAA,CAAAH,gBAAAI;;AAAAA;;;;AAAA,CAAA,AAAA,iFAAA,WAAAG,UAAAC,tGAAWyB;;AAAX,AAAA,IAAA1B,gBAAA;AAAA,AAAA,SAAA,GAAA,CAAAC,cAAA,aAAA,EAAA,CAAA,AAAAD,8BAAA,AAAAC,6BAAA,EAAA,AAAAjE,6CAAA,AAAAgE,gBAAA,AAAAC,mBAAA,EAAA,AAAAjE,6CAAA,AAAAgE,mCAAA,AAAAC,sCAAA,EAAA,AAAAjE,6CAAA,AAAAgE,4BAAA,AAAAC,+BAAA,AAAAjE,6CAAA,AAAAgE,uBAAA,AAAAC;;;AAAA,CAAA,AAAA,kFAAAxB,lFAAWiD;;AAAX,CAAA,AAAA,6FAAA,7FAAWA,wGAEHW;;AAFR,AAAA,gBAAA,ZAEQA;AAFR,AAAA;;;AAAA,CAAA,AAAA,mGAAA,nGAAWX,8GAGGW;;AAHd,AAAA,gBAAA,ZAGcA;AAHd,AAAA;;;AAAA,CAAA,AAAA,+GAAA,/GAAWX,0HAISW;;AAJpB,AAAA,gBAAA,ZAIoBA;AAJpB,AAAA;;;AAAA,CAAA,AAAA,qGAAA,rGAAWX,gHAKAW,MAAMC;;AALjB,AAAA,gBAAA,ZAKWD;AALX,AAMI,OAAC3F,uCAAcP,SAAEC,4BAAeR,qBAAc0G;;;AANlD,CAAA,AAAA,gGAAA,hGAAWZ,2GAOAW;;AAPX,AAAA,gBAAA,ZAOWA;AAPX,AAQI,IAAME,IAAE,uCAAA,tCAAK,EAAO,AAACjF,eAAKnB;AAA1B,AACE,oBAAIC;AACF,YAAA,JAAKmG;;AACL,IAAAC,qBAAgB,AAACnG,oBAAUF;AAA3B,AAAA,oBAAAqG;AAAA,aAAAA,TAASC;AAAT,AACE,QAAA,CAAA,MAAKF,KAAE,EAAOE;;AACdF;;;;;AAbV,CAAA,AAAA,gGAAA,hGAAWb,2GAcAW;;AAdX,AAAA,gBAAA,ZAcWA;AAdX,AAeI,QAAK,+CAAA,AAAA,IAAA,jCAAMjG,uCACN,AAACsG,wGAAOvG;;;AAhBjB,CAAA,AAAA,gFAAA,WAAA+D,mBAAAC,9GAAWuB;;AAAX,AAAA,IAAAxB,yBAAA;AAAA,AAAA,GAAA,AAAAE,0BAAA,iFAAA,+EAAA,6EAAA,oEAAAD;AAAA,OAAAE,+CAAA,AAAAC,qBAAA,AAAAC,6CAAA,mCAAAL,wBAAAX,eAAAY;;AAAA,iDAAAhE,SAAAC,4BAAAR,qBAAA2D,cAAA,AAAAiB,oBAAA,AAAAH,+CAAAvC,gBAAAqC,kBAAA,lNAAWuB;;;;AAAX,CAAA,AAAA,qGAAA,WAAAjB,mBAAA/C,nIAAWgE;;AAAX,AAAA,IAAAjB,yBAAA;AAAA,AAAA,IAAAC,WAAAhD;IAAAgD,eAAA,EAAA,CAAAA,oBAAA7C,oBAAA,AAAA6C,aAAA;AAAA,AAAA,QAAAA;KAAA;KAAA;KAAA;AAAA;;;;AAAA,OAAAN,0BAAAtC,gBAAAJ;;;;;AAAA,CAAA,AAAA,uFAAA,WAAAiD,mBAAAC,gBAAA1B,rIAAWwC;;AAAX,AAAA,IAAAf,yBAAA;AAAA,AAAA,IAAAE,cAAAC;IAAAC,cAAAH;AAAA,AAAA,oBAAA,CAAAC,4CAAAA,0CAAA,gDAAAE,eAAAF,sBAAA,gDAAAE;AAAA,iDAAA7B,SAAA9C,4BAAAR,qBAAA2D,cAAAzB,gBAAA,7HAAW4D;;AAAX,oBAAA,CAAAb,4CAAAA,0CAAA,0EAAAE,eAAAF,sBAAA,0EAAAE;AAAA,iDAAA5E,SAAA+C,SAAAtD,qBAAA2D,cAAAzB,gBAAA,1GAAW4D;;AAAX,oBAAA,CAAAb,4CAAAA,0CAAA,wEAAAE,eAAAF,sBAAA,wEAAAE;AAAA,iDAAA5E,SAAAC,4BAAA8C,SAAAK,cAAAzB,gBAAA,jHAAW4D;;AAAX,iDAAAvF,SAAAC,4BAAAR,qBAAA2D,cAAA,AAAAyB,8CAAAlD,gBAAA8C,gBAAA1B,UAAA,rMAAWwC;;;;;;AAAX,CAAA,AAAA,iFAAA,WAAAT,5FAAWS;;AAAX,AAAA,IAAAT,yBAAA;AAAA,AAAA,OAAAC,cAAA,AAAAlC,+CAAA,mFAAA,KAAAmC,mBAAA,gDAAAhF,SAAA,OAAA,KAAAgF,mBAAA,0EAAA/E,4BAAA,OAAA,KAAA+E,mBAAA,wEAAAvF,qBAAA,eAAAkC;;;AAAA,CAAA,AAAA,wFAAA,WAAAsD,mBAAAlC,tHAAWwC;;AAAX,AAAA,IAAAN,yBAAA;AAAA,AAAA,iDAAAjF,SAAAC,4BAAAR,qBAAAsD,SAAApB,gBAAA2B,xHAAWiC;;;AAAX,CAAA,AAAA,qFAAA,WAAAL,mBAAAC,nHAAWI;;AAAX,AAAA,IAAAL,yBAAA;AAAA,AAAA,GAAA,AAAAE,wBAAAD;AAAA,OAAAD,kEAAA,AAAAG,eAAAF,oBAAA,KAAA,AAAAE,eAAAF,oBAAA;;AAAA,OAAApD,+CAAAuD,gBAAAJ,uBAAAC;;;;AAAA,CAAA,AAAAI,gDAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,sDAAA;;AAAA,CAAA,AAAAA,2DAAA,WAAAC;AAAA,AAAA,YAAAC,eAAA,KAAA,uCAAA,KAAA,IAAA;;;AAAA,CAAA,AAAAF,8DAAA,WAAAC,mBAAAE;AAAA,AAAA,OAAAC,iBAAAD,qBAAA;;;AAAA;;;4CAAA,5CAAWM,gGAAahG,EAAEC,qBAAeR;AAAzC,AAAA,YAAA8F,0EAAA,KAAA,KAAA,/CAAwBvF,EAAEC,qBAAeR;;;AAAzC;;;+CAAA,uDAAAmG,tGAAWK;AAAX,AAAA,IAAAJ,uBAAA,iBAAAC,WAAA,AAAA5B,sDAAA0B,SAAA,kGAAA,0EAAA;AAAA,AAAA,GAAA,AAAAG,wBAAAH;AAAA,OAAAxB,6CAAA,mCAAA0B;;AAAAA;;;AAAA,AAAA,YAAAP,qCAAA,AAAA,8EAAAK,UAAA,AAAA,wGAAAA,UAAA,AAAA,sGAAAA,UAAA,KAAA,AAAAvB,oBAAAwB,sBAAA;;;AAAAN,AA4BA,AAACkB,gDAAqBlB;AAEtB;;;+CAAA,/CAAMmB,sGAEHC;AAFH,AAGE,oDAAA,7CAAC9G,uGAAW,AAAC+G,qCAAeD;;AAI9B,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCAAA,gDAAAE,xFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sEAAA,tEAAMD,iFA4BF/G,EAAEC;AA5BN,AAAA,GA6BU,cAAAyB,bAAU1B;AA7BpB;AAAA,AAAA,MAAA,KAAAgH,MAAA;;;AA8BG,wEAAA,jEAAChB,0CAAchG,EAAEC;;;AA9BpB,CAAA,sEAAA,tEAAM8G,iFA+BF/G;AA/BJ,AA+BO,6EAAA,tEAACiH,oEAAajH;;;AA/BrB,CAAA,gEAAA,hEAAM+G;;AAAN","names":["rewrite-clj.node.keyword/choose-qualifier","map-qualifier","kw-qualifier","cljs.core/not","and__5043__auto__","cljs.core._EQ_","or__5045__auto__","rewrite-clj.node.keyword/kw-qualifier","k","auto-resolved?","cljs.core/namespace","p__74339","map__74341","cljs.core/--destructure-map","cljs.core.get","rewrite-clj.node.keyword/keyword-sexpr","kw","kw-auto-resolved?","auto-resolve","q","cljs.core.keyword","G__74342","G__74345","fexpr__74344","rewrite-clj.node.protocols/default-auto-resolve","G__74346","cljs.core.symbol","cljs.core/name","this__5343__auto__","k__5344__auto__","this__5345__auto__","k74348","else__5346__auto__","G__74352","cljs.core/Keyword","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__74353","vec__74354","k__5367__auto__","cljs.core.nth","v__5368__auto__","cljs.core/PROTOCOL_SENTINEL","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__74347","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this74349","other74350","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__74364","this__5351__auto__","k__5352__auto__","pred__74366","cljs.core/keyword-identical?","expr__74367","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.keyword/KeywordNode","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__74351","extmap__5385__auto__","G__74387","cljs.core/record?","rewrite-clj.node.keyword/->KeywordNode","rewrite-clj.node.keyword/map->KeywordNode","_node","opts","c","temp__5751__auto__","nspace","cljs.core.pr_str","node","rewrite-clj.node.protocols/make-printable!","rewrite-clj.node.keyword/keyword-node?","n","rewrite-clj.node.protocols/node-type","var_args","G__74389","rewrite-clj.node.keyword/keyword-node","js/Error","rewrite_clj.node.keyword.keyword_node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.keyword\n  (:require [rewrite-clj.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defn- choose-qualifier [map-qualifier kw-qualifier]\n  (when (not (and map-qualifier (= \"_\" (:prefix kw-qualifier))))\n    (or kw-qualifier map-qualifier)))\n\n(defn kw-qualifier [k auto-resolved?]\n  (when (or auto-resolved? (namespace k))\n    {:auto-resolved? auto-resolved?\n     :prefix (namespace k)}))\n\n(defn keyword-sexpr [kw kw-auto-resolved? map-qualifier {:keys [auto-resolve]}]\n  (let [q (choose-qualifier map-qualifier (kw-qualifier kw kw-auto-resolved?))]\n    (keyword (some-> (if (:auto-resolved? q)\n                       ((or auto-resolve node/default-auto-resolve)\n                        (or (some-> (:prefix q) symbol)\n                            :current))\n                       (:prefix q))\n                     str)\n             (name kw))))\n\n(defrecord KeywordNode [k auto-resolved? map-qualifier]\n  node/Node\n  (tag [_node] :token)\n  (node-type [_node] :keyword)\n  (printable-only? [_node] false)\n  (sexpr* [_node opts]\n    (keyword-sexpr k auto-resolved? map-qualifier opts))\n  (length [_node]\n    (let [c (inc (count (name k)))]\n      (if auto-resolved?\n        (inc c)\n        (if-let [nspace (namespace k)]\n          (+ 1 c (count nspace))\n          c))))\n  (string [_node]\n    (str (when auto-resolved? \":\")\n         (pr-str k)))\n\n  node/MapQualifiable\n  (map-context-apply [node map-qualifier]\n    (assoc node :map-qualifier map-qualifier))\n  (map-context-clear [node]\n    (assoc node :map-qualifier nil))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! KeywordNode)\n\n(defn keyword-node?\n  \"Returns true if `n` is a node representing a keyword.\"\n  [n]\n  (= :keyword (node/node-type n)))\n\n;; ## Constructor\n\n(defn keyword-node\n  \"Create a node representing a keyword `k`.\n\n   Optionally include `auto-resolved?`, which defaults to `false`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   ;; unqualified keyword\n   (-> (n/keyword-node :kw)\n       n/string)\n   ;; => \\\":kw\\\"\n\n   ;; qualified keyword\n   (-> (n/keyword-node :my-prefix/kw)\n       n/string)\n   ;; => \\\":my-prefix/kw\\\"\n\n   ;; keyword auto-resolved to current ns\n   (-> (n/keyword-node :kw true)\n       n/string)\n   ;; => \\\"::kw\\\"\n\n   ;; keyword auto-resolved to a namespace with given alias\n   (-> (n/keyword-node :ns-alias/kw true)\n       n/string)\n   ;; => \\\"::ns-alias/kw\\\"\n   ```\"\n  ([k auto-resolved?]\n   {:pre [(keyword? k)]}\n   (->KeywordNode k auto-resolved? nil))\n  ([k] (keyword-node k false)))\n"]}