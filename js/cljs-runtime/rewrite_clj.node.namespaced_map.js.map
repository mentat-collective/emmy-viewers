{"version":3,"sources":["rewrite_clj/node/namespaced_map.cljc"],"mappings":"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","names":["this__5343__auto__","k__5344__auto__","this__5345__auto__","k74375","else__5346__auto__","G__74380","cljs.core/Keyword","auto-resolved?","prefix","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__74381","vec__74382","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__74374","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this74376","other74377","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__74390","this__5351__auto__","k__5352__auto__","pred__74392","cljs.core/keyword-identical?","expr__74393","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.namespaced-map/MapQualifierNode","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__74378","extmap__5385__auto__","G__74412","cljs.core/record?","rewrite-clj.node.namespaced-map/->MapQualifierNode","rewrite-clj.node.namespaced-map/map->MapQualifierNode","_node","opts","G__74386","fexpr__74385","or__5045__auto__","rewrite-clj.node.protocols/default-auto-resolve","cljs.core.symbol","node","rewrite-clj.node.namespaced-map/edit-map-children","children","f","r","last-key","new-children","temp__5751__auto__","n","cljs.core/first","rewrite-clj.node.protocols/printable-only?","cljs.core/rest","cljs.core.conj","rewrite-clj.node.namespaced-map/apply-context-to-map","m-node","q-node","rewrite-clj.node.protocols/replace-children","rewrite-clj.node.protocols/children","is-map-key?","cljs.core/native-satisfies?","rewrite-clj.node.protocols/MapQualifiable","rewrite-clj.node.protocols/map-context-apply","rewrite-clj.node.protocols/map-context-clear","rewrite-clj.node.namespaced-map/apply-context","cljs.core/last","cljs.core.drop_last","rewrite-clj.node.namespaced-map/reapply-namespaced-map-context","rewrite-clj.node.protocols/tag","rewrite-clj.node.namespaced-map/namespaced-map-sexpr","rewrite_clj.node.protocols.sexpr","k74445","G__74454","p__74462","vec__74463","G__74444","this74446","other74447","G__74481","pred__74482","expr__74483","rewrite-clj.node.namespaced-map/NamespacedMapNode","G__74450","G__74497","rewrite-clj.node.namespaced-map/->NamespacedMapNode","rewrite-clj.node.namespaced-map/map->NamespacedMapNode","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","children'","rewrite-clj.node.protocols/make-printable!","rewrite-clj.node.namespaced-map/map-qualifier-node","rewrite-clj.node.namespaced-map/namespaced-map-node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.namespaced-map\n  (:require [rewrite-clj.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defrecord MapQualifierNode [auto-resolved? prefix]\n  node/Node\n  (tag [_node] :map-qualifier)\n  (node-type [_node] :map-qualifier)\n  (printable-only? [_node] false)\n  (sexpr* [_node opts]\n    (if auto-resolved?\n      ((or (:auto-resolve opts) node/default-auto-resolve)\n       (if prefix (symbol prefix) :current))\n      (symbol prefix)))\n  (length [_node]\n    (+ 1 ;; for first :\n       (if auto-resolved? 1 0) ;; for extra :\n       (count prefix)))\n  (string [_node]\n    (str \":\"\n         (when auto-resolved? \":\")\n         prefix))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(defn- edit-map-children\n  \"A map node's children are a list of nodes that can contain non-sexpr-able elements (ex. whitespace).\n\n  Returns `children` with `f` applied sexpressable children.\n\n  `f` is called with\n  - `n` - node\n  - `is-map-key?` true if the node is in keyword position\n  and should return `n` or a new version of `n`.\"\n  [children f]\n  (loop [r children\n         last-key nil\n         new-children []]\n    (if-let [n (first r)]\n      (if (node/printable-only? n)\n        (recur (rest r)\n               last-key\n               (conj new-children n))\n        (if last-key\n          (recur (rest r)\n                 nil\n                 (conj new-children (f n false)))\n          (recur (rest r)\n                 n\n                 (conj new-children (f n true)))))\n      new-children)))\n\n(defn- apply-context-to-map\n  \"Apply the context of the qualified map to the keyword keys in the map.\n\n  Strips context from keyword-nodes not in keyword position and adds context to keyword nodes in keyword position.\"\n  [m-node q-node]\n  (node/replace-children m-node\n                         (edit-map-children (node/children m-node)\n                                            (fn [n is-map-key?]\n                                              (if (satisfies? node/MapQualifiable n)\n                                                (if is-map-key?\n                                                  (node/map-context-apply n q-node)\n                                                  (node/map-context-clear n))\n                                                n)))))\n\n(defn- apply-context [children]\n  (let [q-node (first children)\n        m-node (last children)]\n    (concat (drop-last children)\n            [(apply-context-to-map m-node q-node)])))\n\n(defn reapply-namespaced-map-context\n  \"Namespaced map qualifier context is automatically applied to keyword children of contained map automatically on:\n  - [[node/namespaced-map-node]] creation (i.e. at parse time)\n  - [[node/replace-children]]\n\n  If you make changes outside these techniques, call this function to reapply the qualifier context.\n\n  This is only necessary if you need `sexpr` on map keywords to reflect the namespaced map qualifier.\n\n  Returns `n` if not a namespaced map node.\"\n  [n]\n  (if (= :namespaced-map (node/tag n))\n    (node/replace-children n (apply-context (node/children n)))\n    n))\n\n(defn- namespaced-map-sexpr\n  \"Assumes that appropriate qualifier context has been applied to contained map.\"\n  [children opts]\n  (node/sexpr (last children) opts))\n\n(defrecord NamespacedMapNode [children]\n  node/Node\n  (tag [_node] :namespaced-map)\n  (node-type [_node] :namespaced-map)\n  (printable-only? [_node] false)\n  (sexpr* [_node opts]\n    (namespaced-map-sexpr children opts))\n  (length [_node]\n    (+ 1 ;; for leading #\n       (node/sum-lengths children)))\n  (string [_node]\n    (str \"#\" (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_node] true)\n  (children [_node] children)\n  (replace-children [node children']\n    (assoc node :children (apply-context children')))\n  (leader-length [_node]\n    (dec 2))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! MapQualifierNode)\n(node/make-printable! NamespacedMapNode)\n\n;; ## Constructors\n\n(defn map-qualifier-node\n  \"Create a map qualifier node.\n   The map qualifier node is a child node of [[namespaced-map-node]].\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   ;; qualified\n   (-> (n/map-qualifier-node false \\\"my-prefix\\\")\n       n/string)\n   ;; => \\\":my-prefix\\\"\n\n   ;; auto-resolved to current ns\n   (-> (n/map-qualifier-node true nil)\n       n/string)\n   ;; => \\\"::\\\"\n\n   ;; auto-resolve to namespace with alias\n   (-> (n/map-qualifier-node true \\\"my-ns-alias\\\")\n       n/string)\n   ;; => \\\"::my-ns-alias\\\"\n   ```\"\n  [auto-resolved? prefix]\n  (->MapQualifierNode auto-resolved? prefix))\n\n(defn namespaced-map-node\n  \"Create a namespaced map node with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/namespaced-map-node [(n/map-qualifier-node true \\\"my-ns-alias\\\")\n                               (n/spaces 1)\n                               (n/map-node [(n/keyword-node :a)\n                                            (n/spaces 1)\n                                            (n/token-node 1)])])\n       n/string)\n   ;; => \\\"#::my-ns-alias {:a 1}\\\"\n   ```\n\n   Map qualifier context is automatically applied to map keys for sexpr support.\n\n   See also [[map-qualifier-node]] and [[map-node]].\"\n  [children]\n  (->NamespacedMapNode (apply-context children)))\n"]}