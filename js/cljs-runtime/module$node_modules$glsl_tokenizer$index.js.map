{
"version":3,
"file":"module$node_modules$glsl_tokenizer$index.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/glsl-tokenizer/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$glsl_tokenizer$index\"] = function(global,require,module,exports) {\nmodule.exports = tokenize\r\n\r\nvar literals100 = require('./lib/literals')\r\n  , operators = require('./lib/operators')\r\n  , builtins100 = require('./lib/builtins')\r\n  , literals300es = require('./lib/literals-300es')\r\n  , builtins300es = require('./lib/builtins-300es')\r\n\r\nvar NORMAL = 999          // <-- never emitted\r\n  , TOKEN = 9999          // <-- never emitted\r\n  , BLOCK_COMMENT = 0\r\n  , LINE_COMMENT = 1\r\n  , PREPROCESSOR = 2\r\n  , OPERATOR = 3\r\n  , INTEGER = 4\r\n  , FLOAT = 5\r\n  , IDENT = 6\r\n  , BUILTIN = 7\r\n  , KEYWORD = 8\r\n  , WHITESPACE = 9\r\n  , EOF = 10\r\n  , HEX = 11\r\n\r\nvar map = [\r\n    'block-comment'\r\n  , 'line-comment'\r\n  , 'preprocessor'\r\n  , 'operator'\r\n  , 'integer'\r\n  , 'float'\r\n  , 'ident'\r\n  , 'builtin'\r\n  , 'keyword'\r\n  , 'whitespace'\r\n  , 'eof'\r\n  , 'integer'\r\n]\r\n\r\nfunction tokenize(opt) {\r\n  var i = 0\r\n    , total = 0\r\n    , mode = NORMAL\r\n    , c\r\n    , last\r\n    , content = []\r\n    , tokens = []\r\n    , token_idx = 0\r\n    , token_offs = 0\r\n    , line = 1\r\n    , col = 0\r\n    , start = 0\r\n    , isnum = false\r\n    , isoperator = false\r\n    , input = ''\r\n    , len\r\n\r\n  opt = opt || {}\r\n  var allBuiltins = builtins100\r\n  var allLiterals = literals100\r\n  if (opt.version === '300 es') {\r\n    allBuiltins = builtins300es\r\n    allLiterals = literals300es\r\n  }\r\n\r\n  // cache by name\r\n  var builtinsDict = {}, literalsDict = {}\r\n  for (var i = 0; i < allBuiltins.length; i++) {\r\n    builtinsDict[allBuiltins[i]] = true\r\n  }\r\n  for (var i = 0; i < allLiterals.length; i++) {\r\n    literalsDict[allLiterals[i]] = true\r\n  }\r\n\r\n  return function(data) {\r\n    tokens = []\r\n    if (data !== null) return write(data)\r\n    return end()\r\n  }\r\n\r\n  function token(data) {\r\n    if (data.length) {\r\n      tokens.push({\r\n        type: map[mode]\r\n      , data: data\r\n      , position: start\r\n      , line: line\r\n      , column: col\r\n      })\r\n    }\r\n  }\r\n\r\n  function write(chunk) {\r\n    i = 0\r\n\r\n    if (chunk.toString) chunk = chunk.toString()\r\n\r\n    input += chunk.replace(/\\r\\n/g, '\\n')\r\n    len = input.length\r\n\r\n\r\n    var last\r\n\r\n    while(c = input[i], i < len) {\r\n      last = i\r\n\r\n      switch(mode) {\r\n        case BLOCK_COMMENT: i = block_comment(); break\r\n        case LINE_COMMENT: i = line_comment(); break\r\n        case PREPROCESSOR: i = preprocessor(); break\r\n        case OPERATOR: i = operator(); break\r\n        case INTEGER: i = integer(); break\r\n        case HEX: i = hex(); break\r\n        case FLOAT: i = decimal(); break\r\n        case TOKEN: i = readtoken(); break\r\n        case WHITESPACE: i = whitespace(); break\r\n        case NORMAL: i = normal(); break\r\n      }\r\n\r\n      if(last !== i) {\r\n        switch(input[last]) {\r\n          case '\\n': col = 0; ++line; break\r\n          default: ++col; break\r\n        }\r\n      }\r\n    }\r\n\r\n    total += i\r\n    input = input.slice(i)\r\n    return tokens\r\n  }\r\n\r\n  function end(chunk) {\r\n    if(content.length) {\r\n      token(content.join(''))\r\n    }\r\n\r\n    mode = EOF\r\n    token('(eof)')\r\n    return tokens\r\n  }\r\n\r\n  function normal() {\r\n    content = content.length ? [] : content\r\n\r\n    if(last === '/' && c === '*') {\r\n      start = total + i - 1\r\n      mode = BLOCK_COMMENT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(last === '/' && c === '/') {\r\n      start = total + i - 1\r\n      mode = LINE_COMMENT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(c === '#') {\r\n      mode = PREPROCESSOR\r\n      start = total + i\r\n      return i\r\n    }\r\n\r\n    if(/\\s/.test(c)) {\r\n      mode = WHITESPACE\r\n      start = total + i\r\n      return i\r\n    }\r\n\r\n    isnum = /\\d/.test(c)\r\n    isoperator = /[^\\w_]/.test(c)\r\n\r\n    start = total + i\r\n    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN\r\n    return i\r\n  }\r\n\r\n  function whitespace() {\r\n    if(/[^\\s]/g.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function preprocessor() {\r\n    if((c === '\\r' || c === '\\n') && last !== '\\\\') {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function line_comment() {\r\n    return preprocessor()\r\n  }\r\n\r\n  function block_comment() {\r\n    if(c === '/' && last === '*') {\r\n      content.push(c)\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i + 1\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function operator() {\r\n    if(last === '.' && /\\d/.test(c)) {\r\n      mode = FLOAT\r\n      return i\r\n    }\r\n\r\n    if(last === '/' && c === '*') {\r\n      mode = BLOCK_COMMENT\r\n      return i\r\n    }\r\n\r\n    if(last === '/' && c === '/') {\r\n      mode = LINE_COMMENT\r\n      return i\r\n    }\r\n\r\n    if(c === '.' && content.length) {\r\n      while(determine_operator(content));\r\n\r\n      mode = FLOAT\r\n      return i\r\n    }\r\n\r\n    if(c === ';' || c === ')' || c === '(') {\r\n      if(content.length) while(determine_operator(content));\r\n      token(c)\r\n      mode = NORMAL\r\n      return i + 1\r\n    }\r\n\r\n    var is_composite_operator = content.length === 2 && c !== '='\r\n    if(/[\\w_\\d\\s]/.test(c) || is_composite_operator) {\r\n      while(determine_operator(content));\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function determine_operator(buf) {\r\n    var j = 0\r\n      , idx\r\n      , res\r\n\r\n    do {\r\n      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''))\r\n      res = operators[idx]\r\n\r\n      if(idx === -1) {\r\n        if(j-- + buf.length > 0) continue\r\n        res = buf.slice(0, 1).join('')\r\n      }\r\n\r\n      token(res)\r\n\r\n      start += res.length\r\n      content = content.slice(res.length)\r\n      return content.length\r\n    } while(1)\r\n  }\r\n\r\n  function hex() {\r\n    if(/[^a-fA-F0-9]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function integer() {\r\n    if(c === '.') {\r\n      content.push(c)\r\n      mode = FLOAT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[eE]/.test(c)) {\r\n      content.push(c)\r\n      mode = FLOAT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(c === 'x' && content.length === 1 && content[0] === '0') {\r\n      mode = HEX\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[^\\d]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function decimal() {\r\n    if(c === 'f') {\r\n      content.push(c)\r\n      last = c\r\n      i += 1\r\n    }\r\n\r\n    if(/[eE]/.test(c)) {\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if ((c === '-' || c === '+') && /[eE]/.test(last)) {\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[^\\d]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function readtoken() {\r\n    if(/[^\\d\\w_]/.test(c)) {\r\n      var contentstr = content.join('')\r\n      if(literalsDict[contentstr]) {\r\n        mode = KEYWORD\r\n      } else if(builtinsDict[contentstr]) {\r\n        mode = BUILTIN\r\n      } else {\r\n        mode = IDENT\r\n      }\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n}\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","tokenize","opt","token","data","length","tokens","push","type","map","mode","position","start","line","column","col","normal","content","last","c","total","i","BLOCK_COMMENT","LINE_COMMENT","PREPROCESSOR","test","WHITESPACE","isnum","isoperator","INTEGER","OPERATOR","TOKEN","preprocessor","join","NORMAL","operator","FLOAT","determine_operator","is_composite_operator","buf","j","idx","operators","indexOf","slice","res","integer","HEX","decimal","input","len","allBuiltins","builtins100","allLiterals","literals100","version","builtins300es","literals300es","builtinsDict","literalsDict","chunk","toString","replace","contentstr","KEYWORD","BUILTIN","IDENT","EOF"]
}
