{"version":3,"sources":["sicmutils/calculus/basis.cljc"],"mappings":"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","names":["sicmutils.calculus.basis/coordinate-system->basis","coordinate-system","vector-basis","sicmutils.calculus.vector-field/coordinate-system->vector-basis","oneform-basis","sicmutils.calculus.form-field/coordinate-system->oneform-basis","sicmutils.calculus.manifold/manifold","sicmutils.calculus.basis/coordinate-basis?","x","cljs.core.isa_QMARK_","sicmutils.value/kind","cljs.core.derive","js/Error","sicmutils.calculus.basis/basis->coordinate-system","b","sicmutils.calculus.basis/make-basis","dual-basis","d","cljs.core/count","cljs.core/flatten","cljs.core._EQ_","sicmutils.calculus.basis/basis?","sicmutils.calculus.basis/basis->oneform-basis","sicmutils.calculus.basis/basis->vector-basis","sicmutils.calculus.basis/basis->dimension","sicmutils.calculus.basis/contract","f","basis","sicmutils.structure.sumr","sicmutils.calculus.basis/vector-basis->dual","prototype","sicmutils.calculus.manifold/coordinate-prototype","vector-basis-coefficient-functions","p1__87751#","sicmutils.structure.mapr","sicmutils.calculus.vector-field/vector-field->components","guts","coords","p1__87752#","p1__87753#","shape","sicmutils.structure/compatible-shape","invert","sicmutils.matrix.s_COLON_inverse","transpose","sicmutils.matrix.s_COLON_transpose","p1__87754#","oneform-basis-coefficient-functions","p1__87755#","sicmutils.calculus.manifold/c:generate","cljs.core.comp","sicmutils.structure.component","p1__87757#","sicmutils.calculus.form_field.components__GT_oneform_field","sicmutils.calculus.basis/make-constant-vector-field","m0","v","sicmutils.generic._STAR_","onefb","_","fexpr__87763","sicmutils.calculus.basis/Jacobian","to-basis","from-basis"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.calculus.basis\n  (:require [sicmutils.calculus.form-field :as ff]\n            [sicmutils.calculus.manifold :as m]\n            [sicmutils.calculus.vector-field :as vf]\n            [sicmutils.generic :as g]\n            [sicmutils.matrix :as matrix]\n            [sicmutils.structure :as s]\n            [sicmutils.value :as v]))\n\n(defn coordinate-system->basis\n  \"Returns the standard basis object for `coordinate-system`.\"\n  [coordinate-system]\n  (let [vector-basis  (vf/coordinate-system->vector-basis coordinate-system)\n        oneform-basis (ff/coordinate-system->oneform-basis coordinate-system)]\n    {:type ::coordinate-basis\n     :dimension (:dimension (m/manifold coordinate-system))\n     :vector-basis vector-basis\n     :oneform-basis oneform-basis\n     :coordinate-system coordinate-system}))\n\n(defn coordinate-basis?\n  \"Returns true if `x` is a coordinate basis, false otherwise.\"\n  [x]\n  (isa? (v/kind x) ::coordinate-basis))\n\n(derive ::coordinate-basis ::basis)\n\n(defn basis->coordinate-system [b]\n  {:pre [(coordinate-basis? b)]}\n  (:coordinate-system b))\n\n(defn make-basis\n  \"Make a basis object out of a vector and dual basis.\n\n  The dimensions of `vector-basis` and `dual-basis` must agree.\"\n  [vector-basis dual-basis]\n  (let [d (count (flatten vector-basis))]\n    (assert (= (count (flatten dual-basis)) d))\n    {:type ::basis\n     :dimension d\n     :vector-basis vector-basis\n     :oneform-basis dual-basis}))\n\n(defn basis?\n  \"Returns true if `x` is a basis, false otherwise.\"\n  [x]\n  (isa? (v/kind x) ::basis))\n\n(defn basis->oneform-basis\n  \"Extract the dual basis from the given basis object `b`.\"\n  [b]\n  {:pre [(basis? b)]}\n  (:oneform-basis b))\n\n(defn basis->vector-basis\n  \"Extract the vector basis from the given basis object `b`.\"\n  [b]\n  {:pre [(basis? b)]}\n  (:vector-basis b))\n\n(defn basis->dimension\n  \"Extract the dimension from the given basis object `b`.\"\n  [b]\n  {:pre [(basis? b)]}\n  (:dimension b))\n\n(defn contract [f basis]\n  (let [vector-basis  (basis->vector-basis basis)\n        oneform-basis (basis->oneform-basis basis)]\n    (s/sumr f vector-basis oneform-basis)))\n\n(defn vector-basis->dual [vector-basis coordinate-system]\n  (let [prototype (m/coordinate-prototype coordinate-system)\n\n        vector-basis-coefficient-functions\n        (s/mapr #(vf/vector-field->components % coordinate-system)\n                vector-basis)\n\n        guts (fn [coords]\n               (let [shape (s/compatible-shape prototype)\n                     invert #(matrix/s:inverse shape % prototype)\n                     transpose #(matrix/s:transpose shape % prototype)]\n                 (-> (s/mapr #(% coords) vector-basis-coefficient-functions)\n                     (invert)\n                     (transpose))))\n        oneform-basis-coefficient-functions (m/c:generate\n                                             (:dimension\n                                              (m/manifold coordinate-system))\n                                             ::s/up\n                                             #(comp (s/component %) guts))\n        oneform-basis (s/mapr #(ff/components->oneform-field % coordinate-system)\n                              oneform-basis-coefficient-functions)]\n    oneform-basis))\n\n(defn make-constant-vector-field [basis m0]\n  (fn [v]\n    (fn [f]\n      (let [vector-basis  (basis->vector-basis basis)\n            oneform-basis (basis->oneform-basis basis)]\n        (g/* (vector-basis f)\n             (s/mapr (fn [onefb] (fn [_] ((onefb v) m0)))\n                     oneform-basis))))))\n\n(defn Jacobian\n  \"Returns the Jacobian of transition from `from-basis` to `to-basis`.\n\n  The Jacobian is a structure of manifold functions. The outer index is the\n  from-basis index, so this structure can be multiplied by tuple of component\n  functions of a vector field relative to `from-basis` to get component\n  functions for a vector field in `to-basis`.\"\n  [to-basis from-basis]\n  (s/mapr (basis->oneform-basis to-basis)\n          (basis->vector-basis from-basis)))\n"]}