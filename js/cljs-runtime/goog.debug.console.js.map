{
"version":3,
"file":"goog.debug.console.js",
"lineCount":86,
"mappings":"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",
"sources":["goog/debug/console.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Simple logger that logs to the window console if available.\n *\n * Has an autoInstall option which can be put into initialization code, which\n * will start logging if \"Debug=true\" is in document.location.href\n */\n\ngoog.provide('goog.debug.Console');\n\ngoog.require('goog.debug.TextFormatter');\ngoog.require('goog.log');\ngoog.requireType('goog.log.LogRecord');\n\n\n/**\n * Create and install a log handler that logs to window.console if available\n * @constructor\n */\ngoog.debug.Console = function() {\n  'use strict';\n  this.publishHandler_ = goog.bind(this.addLogRecord, this);\n\n  /**\n   * Formatter for formatted output.\n   * @type {!goog.debug.TextFormatter}\n   * @private\n   */\n  this.formatter_ = new goog.debug.TextFormatter();\n  this.formatter_.showAbsoluteTime = false;\n  this.formatter_.showExceptionText = false;\n  // The console logging methods automatically append a newline.\n  this.formatter_.appendNewline = false;\n\n  this.isCapturing_ = false;\n  this.logBuffer_ = '';\n\n  /**\n   * Loggers that we shouldn't output.\n   * @type {!Object<boolean>}\n   * @private\n   */\n  this.filteredLoggers_ = {};\n};\n\n\n/**\n * Returns the text formatter used by this console\n * @return {!goog.debug.TextFormatter} The text formatter.\n */\ngoog.debug.Console.prototype.getFormatter = function() {\n  'use strict';\n  return this.formatter_;\n};\n\n\n/**\n * Sets whether we are currently capturing logger output.\n * @param {boolean} capturing Whether to capture logger output.\n */\ngoog.debug.Console.prototype.setCapturing = function(capturing) {\n  'use strict';\n  if (capturing == this.isCapturing_) {\n    return;\n  }\n\n  // attach or detach handler from the root logger\n  var rootLogger = goog.log.getRootLogger();\n  if (capturing) {\n    goog.log.addHandler(rootLogger, this.publishHandler_);\n  } else {\n    goog.log.removeHandler(rootLogger, this.publishHandler_);\n  }\n  this.isCapturing_ = capturing;\n};\n\n\n/**\n * Adds a log record.\n * @param {?goog.log.LogRecord} logRecord The log entry.\n */\ngoog.debug.Console.prototype.addLogRecord = function(logRecord) {\n  'use strict';\n  // Check to see if the log record is filtered or not.\n  if (this.filteredLoggers_[logRecord.getLoggerName()]) {\n    return;\n  }\n\n  /**\n   * @param {?goog.log.Level} level\n   * @return {string}\n   */\n  function getConsoleMethodName_(level) {\n    if (level) {\n      if (level.value >= goog.log.Level.SEVERE.value) {\n        // SEVERE == 1000, SHOUT == 1200\n        return 'error';\n      }\n      if (level.value >= goog.log.Level.WARNING.value) {\n        return 'warn';\n      }\n      // NOTE(martone): there's a goog.log.Level.INFO - that we should\n      // presumably map to console.info. However, the current mapping is INFO ->\n      // console.log. Let's keep the status quo for now, but we should\n      // reevaluate if we tweak the goog.log API.\n      if (level.value >= goog.log.Level.CONFIG.value) {\n        return 'log';\n      }\n    }\n    return 'debug';\n  }\n\n  var record = this.formatter_.formatRecord(logRecord);\n  var console = goog.debug.Console.console_;\n  if (console) {\n    // TODO(user): Make getLevel() non-null and update\n    // getConsoleMethodName_ parameters.\n    var logMethod = getConsoleMethodName_(logRecord.getLevel());\n    goog.debug.Console.logToConsole_(\n        console, logMethod, record, logRecord.getException());\n  } else {\n    this.logBuffer_ += record;\n  }\n};\n\n\n/**\n * Adds a logger name to be filtered.\n * @param {string} loggerName the logger name to add.\n */\ngoog.debug.Console.prototype.addFilter = function(loggerName) {\n  'use strict';\n  this.filteredLoggers_[loggerName] = true;\n};\n\n\n/**\n * Removes a logger name to be filtered.\n * @param {string} loggerName the logger name to remove.\n */\ngoog.debug.Console.prototype.removeFilter = function(loggerName) {\n  'use strict';\n  delete this.filteredLoggers_[loggerName];\n};\n\n\n/**\n * Global console logger instance\n * @type {?goog.debug.Console}\n */\ngoog.debug.Console.instance = null;\n\n\n/**\n * The console to which to log.  This is a property so it can be mocked out in\n * this unit test for goog.debug.Console. Using goog.global, as console might be\n * used in window-less contexts.\n * @type {{log:!Function}}\n * @private\n */\ngoog.debug.Console.console_ = goog.global['console'];\n\n\n/**\n * Sets the console to which to log.\n * @param {!Object} console The console to which to log.\n */\ngoog.debug.Console.setConsole = function(console) {\n  'use strict';\n  goog.debug.Console.console_ = /** @type {{log:!Function}} */ (console);\n};\n\n\n/**\n * Install the console and start capturing if \"Debug=true\" is in the page URL\n */\ngoog.debug.Console.autoInstall = function() {\n  'use strict';\n  if (!goog.debug.Console.instance) {\n    goog.debug.Console.instance = new goog.debug.Console();\n  }\n\n  if (goog.global.location &&\n      goog.global.location.href.indexOf('Debug=true') != -1) {\n    goog.debug.Console.instance.setCapturing(true);\n  }\n};\n\n\n/**\n * Show an alert with all of the captured debug information.\n * Information is only captured if console is not available\n */\ngoog.debug.Console.show = function() {\n  'use strict';\n  alert(goog.debug.Console.instance.logBuffer_);\n};\n\n\n/**\n * Logs the record to the console using the given function.  If the function is\n * not available on the console object, the log function is used instead.\n * @param {{log:!Function}} console The console object.\n * @param {string} fnName The name of the function to use.\n * @param {string} record The record to log.\n * @param {*} exception An additional exception to log.\n * @private\n */\ngoog.debug.Console.logToConsole_ = function(\n    console, fnName, record, exception) {\n  'use strict';\n  if (console[fnName]) {\n    console[fnName](record, exception === undefined ? '' : exception);\n  } else {\n    console.log(record, exception === undefined ? '' : exception);\n  }\n};\n"],
"names":["goog","provide","require","requireType","debug","Console","goog.debug.Console","publishHandler_","bind","addLogRecord","formatter_","TextFormatter","showAbsoluteTime","showExceptionText","appendNewline","isCapturing_","logBuffer_","filteredLoggers_","prototype","getFormatter","goog.debug.Console.prototype.getFormatter","setCapturing","goog.debug.Console.prototype.setCapturing","capturing","rootLogger","log","getRootLogger","addHandler","removeHandler","goog.debug.Console.prototype.addLogRecord","logRecord","getLoggerName","getConsoleMethodName_","level","value","Level","SEVERE","WARNING","CONFIG","record","formatRecord","console","console_","logMethod","getLevel","logToConsole_","getException","addFilter","goog.debug.Console.prototype.addFilter","loggerName","removeFilter","goog.debug.Console.prototype.removeFilter","instance","global","setConsole","goog.debug.Console.setConsole","autoInstall","goog.debug.Console.autoInstall","location","href","indexOf","show","goog.debug.Console.show","alert","goog.debug.Console.logToConsole_","fnName","exception","undefined"]
}
