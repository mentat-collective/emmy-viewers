{"version":3,"sources":["sci/impl/deftype.cljc"],"mappings":";AAmBA,4BAAA,5BAAMA,gEAAUC;AAAhB,AAEW,sCAAA,/BAAW,AAACC,eAAKD;;AAE5B,GAAA,QAAAE,gCAAAC,qCAAAC,6CAAAC;AAAA;AAAA,AAAA,6BAAA,iBAAAC,6BAAA,AAAAC,6CAAA,xHAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,mBAAA,sCAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,9LAAoBO;;;AACpB,AAAAD,uEAAA,4DAAA,WAA+BhB;AAA/B,AACE,IAAMkB,IAAE,AAACD,yBAAgBjB;AAAzB,AACE,+BAAA,sBAAA,7CAAK,AAACmB,oBAAUD,OAAO,AAACE,eAAKF,mDACxB,AAACnB,0BAASC;;AAEnB,+BAAA,/BAAMqB,sEAAaC;AAAnB,AAEE,IAAMC,IAAE,AAACN,yBAAgBK;AAAzB,AACE,QAAA,0DAAA,gFAAA,+GAAA,lMAAgBC,qDAAQ,AAACxB,0BAASuB,sDAAS,AAACN,yDAAUM;;AAE1D,AAAA;AAAA;;;kCAAA,lCAAaS;;AAAb,IAAAP,8DAAA,WACsBQ,EAAEC;AADxB,AAAA,IAAAR,kBAAA,EAAA,MAAA,OAAA,ZACsBO,iBAAAA;IADtBN,kBAAA,CAAAC,mCAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,qDAAAA,PACsBM,iCAAAA,/BAAEC,iCAAAA;;AADxB,IAAAJ,kBAAA,CAAAF,mCAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,qDAAAA,PACsBG,iCAAAA,/BAAEC,iCAAAA;;AADxB,MAAA,AAAAH,2BAAA,mCACsBE;;;;AADtB,AAAA,qCAAA,rCACGL,kFAAmBK,EAAEC;AADxB,AAAA,GAAA,EAAA,GAAA,MAAA,aAAA,GAAA,CAAA,+DAAA,rFACsBD,sBAAAA;AADtB,OACsBA,4DAAAA,EAAEC;;AADxB,OAAAT,4DACsBQ,EAAEC;;;;AADxB,AAGA,AAAA;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,8CAAA,9CAAsBM;;AAAtB,AAAA,YAAA,RAMavC;AANb,AAOI,OAACgB,yDAAUhB;;;AAPf,CAAA,AAAA,qEAAAkC,rEAAsBK;;AAAtB,CAAA,AAAA,sFAAA,tFAAsBA,iGAURM;;AAVd,AAAA,YAAA,RAUcA;AAVd,AAWIH;;;AAXJ,CAAA,AAAA,oFAAA,pFAAsBH,+FAYVM,EAAEC,EAAExB;;AAZhB,AAAA,YAAA,RAYYuB;AAZZ,AAaI,CAAMD,iBAAQ,AAACG,8CAAMH,eAAQE,EAAExB;;AAC/BA;;;AAdJ,CAAA,AAAA,mFAAA,nFAAsBiB,8FAyBIvC,MAAKiC,EAAEe;;AAzBjC,AAAA,gBAAA,ZAyB0BhD;AAzB1B,AA0ByB,IAAAiD,qBAAYN;AAAZ,AAAA,oBAAAM;AAAA,SAAAA,LAASC;AAAT,AACE,IAAMC,IAAE,AAACC,eAAKF;AAAd,AACE,IAAAD,yBAAY,AAAA,iHAAwBE;AAApC,AAAA,oBAAAF;AAAA,SAAAA,LAASI;AAAT,AACE,QAACA,mCAAAA,qDAAAA,pBAAGrD,iCAAAA,vBAAKiC,iCAAAA,/BAAEe,iCAAAA;;AACX,OAACM,yDAAUrB,oDAAE,AAACZ,6BAAYrB;;;AAC9B,OAACsD,yDAAUrB,oDAAE,AAACZ,6BAAYrB;;;;AA/BrD,CAAA,AAAA,0DAAAkC,1DAAsBK;;AAAtB,CAAA,AAAA,wEAAA,xEAAsBA,mFAkCXM;;AAlCX,AAAA,YAAA,RAkCWA;AAlCX,AAkCcD;;;AAlCd,CAAA,oCAAA,pCAAsBL;AAAtB,AAAA,AAAA;;;AAAA,CAAA,0CAAA,1CAAsBA;;AAAtB,CAAA,6CAAA,7CAAsBA;;AAAtB,CAAA,kDAAA,WAAAJ,mBAAAC,qBAAAC,rGAAsBE;AAAtB,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;gCAAA,hCAAsBI,wEACjBC,SACAC,KACAC,KACuBC;AAJ5B,AAAA,YAAAL,yBACKE,SACAC,KACAC,KACuBC;;;AAJNL,AAoCtB,kCAAA,lCAAMgB,4EAAad,SAASC,KAAKC,KAAIQ;AAArC,AACE,YAAAZ,yBAAUE,SAASC,KAAKC,KAAIQ;;AAM9B,AAAA,2BAAA,mCAAAK,9DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,gEAAA,WAAAG,3EAAMD,oFAA+BjB,EAAEkC,IAAIC,YAAYC,OAASC;AAAhE,AAAA,IAAAlB,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;aAAAE,TAAgBU;YAAhBZ,RAAyBpB;WAAzBmB,PAA+Bc;AAA/B,AACE,oBAAI,AAAA,sHAA0BC;AAC5B,sBAAA,AAAA,fAACI,sGAA2B,AAACC,eAAKN;;AAClC,IAAMW,iBAAe,CAAA,iDAAUT;IACzBU,iBAAe,AAAC3E,+CAAO0E;IACvBE,WAAS,AAAC5E,+CAAO,gGAAA,nDAAK,AAAC6E,gBAAM,AAACC,uCAA4B,4CAAKb;IAC/Dc,iBAAe,AAACC,0BAAiBC,wBAAQd;IACzCe,YAAU,AAACC,cAAIjB;IACfa,qBACA,AAACK,sDACA,WAAAC,SAAgDM;AAAhD,AAAA,IAAAL,aAAAD;IAAAE,aAAA,AAAApC,cAAAmC;IAAAE,eAAA,AAAAnC,gBAAAkC;IAAAA,iBAAA,AAAAjC,eAAAiC;oBAAAC,hBAAMC;YAANF,RAAsBG;AAAtB,AACE,IAAMA,YAAM,AAACG,mBAASxC,gBAAMqC;IACtBI,WAAS,iBAAAC,WAA2B/B;IAA3BgC,WAA+B,AAAA,2FAAWhC;IAA1CiC,WAA+CR;IAA/CS,eAAA,AAAAC,gBAAEC;AAAF,AAAA,QAAAF,6CAAAA,2CAAAH,SAAAC,SAAAC,YAAAC,uBAAAH,SAAAC,SAAAC;;IAEEH,eAAS,iBAAAO,mBAAIP;AAAJ,AAAA,oBAAAO;AAAAA;;AAAA,IAAAA,uBACI,0HAAA,AAAA,wFAAA,hNAAM,6CAAA,AAAA,7CAACC,wGAAUb;AADrB,AAAA,oBAAAY;AAAAA;;AAGI,GAAM,6CAAA,AAAA,7CAACC,+HAAoBb;AAA3B,AAAA;;AAAA;;;;;IAExB3D,QAAE,gCAAA,KAAA,nBAAUgE,mBACR,AAACS,uEACA,CAAA,mEAA4Bd,yBAC5BE;IAELG,eAAS,2CAAA,AAAAK,zCAAI,AAACK,0BAAWV,+BAAWA,cAASA;IAC7CW,eAAa,AAAA,iFAAMX;IACnBhE,QAAE,gCAAA,4ZAAA,1aAAM2E,cAEJ,kJAAA,lJAACC,kEAAoBD,aAAaE,kIACb,4DAAA,5DAACC,6CAAKC,kDAAU,AAAC7G,+CAAO,4CAAK4E;IACtDkC,cAAY,AAAA,8EAAKhB;IACjBiB,MAAI,gHAAA,sJAAA,mBAAA,vQAAMD,aAAY,4CAAK,AAACE,uBAAcF,gBAChC,6CAAA,7CAACR,qIAAiCR;mBArBlD,WAAAF,1BAsBMqB;AAtBN,AAsBoB,GAAI,+BAAArB,/BAACsB;AACH,OAAClH,+CAAO+G,IAAI,4CAAAnB;;AADdA;;;AAtBpB,AAyBE,OAACuB,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;kBAAA,AAAAE,4CAAAD,WAAA,IAAA,zEAAME;aAAN,AAAAD,4CAAAD,WAAA,IAAA,pEAAkBG;AAAlB,AACE,GAAa,EAAK,mCAAA,nCAACC,gJAAsC3B,mBACvC,6CAAA,AAAA,7CAACQ,kHAAciB;AADjC,OAAAjD,iDAAA,AAAAnB,cAAA,AAAAoB,sDAAA,KAAAC,eAAA,KAAA,AAAA,uFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,+CAAA,KAAAC,eAAA,KAAA,AAAA,sDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,iBAAA,KAAA,IAAA,UAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAA,2EAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,mFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,+CAAA,KAAAC,eAAA,KAAA,AAAA,uEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,6CAAA,KAAA,IAAA,UAAA,KAAA,IAAA,rqBAIyBP,imBAC4B,AAACI,eAAK,AAAChB,gBAAMmE;;AAEhE,IAAMA,aAAO,AAACL,4CAAI9C,eAAKmD;IACjBA,aAAO,AAACE,6CAAK,WAAKC;AAAL,AACE,IAAMC,OAAK,AAACvE,gBAAMsE;IACZE,OAAK,AAACxD,eAAKsD;IACXG,QAAM,AAACC,kCAAyBH,KAAKC;IACrCD,WAAK,AAAA,sFAASE;IACdD,WAAK,AAAA,oFAAOC;IACZE,gBAAc,AAAC3E,gBAAMuE;IACrBK,YAAU,AAAC5D,eAAKuD;IAEhBM,WAAS,AAAA,AAAA;;IAGTN,WAAK,AAACnD,cAAI,AAACL,eAAK8D,SAASD;IACzBE,kBAAgB,AAACC;eAZvB,XAaMC,8FAAUF,gBAAgB,KAAA3D,eAAA,KAAA,AAAA,qGAAA,KAAAA,eAAA,cAAA,KAAA,IAAA,OAAA,IAAA,7BAAoC0D;IAC9DG,eAAS,AAAC9D,+CAAO8D,SACA,AAACjD,sDAAO,WAAKkD;AAAL,AAAA,0FAKGA,MAAM,KAAA9D,eAAA,KAAA,AAAA,uDAAA,KAAAA,eAAA,qBAAA,KAAAA,eAAA,mJAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,tNAAW2D,yCAAgB,KAAA3D,eAAA,KAAA,AAAA,2DAAA,KAAAA,eAAA,WAAA,KAAA,IAAA,OAAA,IAAA,1BAAa8D;qDACjD,AAACC,+CAAOC,eAAKtD,UAAU0C;IAChDS,eAAS,4DAAA,5DAAC9D,+CAAO8D,gGAAUL,cAAcE;IACzCG,eAAS,AAAC5D,cAAI4D;AAvBpB,AAAA,OAAA/D,iDAAA,AAAAnB,cAAA,AAAAoB,+CAAA,KAAAC,eAAA,cAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,sDAAA,KAAAC,eAAA,KAAA,AAAA,wEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,kBAAA,KAAA,IAAA,0EAAA,KAAA,IAAA,1ZAyBKoD,iTACKS,+EACFR;GAASL;AA7BtC,AA8BE,IAAAiB,WAAgB,yDAAA,qIAAA,9LAACzG,qDAAMgC,6EACgBkB,qIACA,AAAC2D,iBAAO3D,UACA,AAACiC,4CAAI,WAAKmB;AAAL,AACE,kBAAKrJ,MAAKsB;AAAV,AACE,OAACuI,uBAAc7J,MAAKqJ,MAAM/H;;GAC9B2E;IANpDwD,WAAA,AAAApE,iDAAA,AAAAnB,cAAA,AAAAoB,sDAAA,KAAAC,eAAA,KAAA,AAAA,oFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,+BAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,cAAA,KAAA,IAAA,vIAOc,AAACyC,aAAaM,wGAAc3C,yBAAW4C;IAPrDmB,eAAA,AAAAxC,gBAAEyC;AAAF,AAAA,QAAAD,6CAAAA,2CAAAF,SAAAC,YAAAC,uBAAAF,SAAAC;;GAQNhD;qDACTX,eACAZ;AAjFP,AAAA,OAAAG,iDAAA,AAAAnB,cAAA,AAAAoB,sDAAA,KAAAC,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,sDAAA,KAAAC,eAAA,KAAA,AAAA,gFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,iBAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,oBAAA,KAAA,IAAA,eAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,sDAAA,KAAAC,eAAA,KAAA,AAAA,sDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,wJAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,+CAAA,KAAAC,eAAA,KAAA,AAAA,yGAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,2CAAA,gOAAA,6EAAA,oOAAA,0NAAA,KAAA,IAAA,UAAA,KAAA,IAAA,eAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,sDAAA,KAAAC,eAAA,KAAA,AAAA,2EAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,oBAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAC,cAAA,AAAAH,iDAAA,AAAAnB,cAAA,AAAAoB,+CAAA,KAAAC,eAAA,KAAA,AAAA,oDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,uFAAA,KAAA,IAAA,WAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,sDAAA,KAAAC,eAAA,KAAA,AAAA,uGAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,+CAAA,KAAAC,eAAA,KAAA,AAAA,2DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,cAAA,KAAA,IAAA,UAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,cAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,+CAAA,KAAAC,eAAA,KAAA,AAAA,sDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,iBAAA,KAAA,IAAA,UAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAF,iDAAA,AAAAnB,cAAA,AAAAoB,sDAAA,KAAAC,eAAA,KAAA,AAAA,+EAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,oJAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAA,uFAAA,KAAA,IAAA,eAAA,KAAA,IAAA,eAAA,KAAA,IAAA,eAAA,KAAA,IAAA,0BAAA,KAAAA,eAAA,iBAAA,KAAA,IAAA,zvIAmFeP,uGAAaU,+WACjB,gCAAA,2CAAA,0DAAA,rIAACoE,oBAAU9E,6mBAGQ,KAAAO,eAAA,KAAA,AAAA,2DAAA,KAAAA,eAAA,cAAA,KAAA,IAAA,OAAA,IAAA,7BAAaI,wGAClBA,2FACO,KAAAJ,eAAA,KAAA,AAAA,sDAAA,KAAAA,eAAA,oBAAA,KAAA,IAAA,OAAA,IAAA,nCAAWG,6GACnB,KAAAH,eAAA,KAAA,AAAA,sDAAA,KAAAA,eAAA,iBAAA,KAAA,IAAA,OAAA,IAAA,hCAAWP,qYACvBU,y/BAC2BC,uHAAUA,wRAAeX,8UAAsB,KAAAO,eAAA,KAAA,AAAA,2DAAA,KAAAA,eAAA,YAAA,KAAA,IAAA,OAAA,IAAA,3BAAaN,4SAC5Fa,4CACDd;;;;AAjGV,CAAA,mDAAA,nDAAMlB;;AAAN;AAAA,CAAA,6CAAA,WAAAQ,xDAAMR;AAAN,AAAA,IAAAS,WAAA,AAAAH,gBAAAE;IAAAA,eAAA,AAAAD,eAAAC;IAAAE,WAAA,AAAAJ,gBAAAE;IAAAA,eAAA,AAAAD,eAAAC;IAAAG,WAAA,AAAAL,gBAAAE;IAAAA,eAAA,AAAAD,eAAAC;IAAAI,WAAA,AAAAN,gBAAAE;IAAAA,eAAA,AAAAD,eAAAC;IAAAK,WAAA,AAAAP,gBAAAE;IAAAA,eAAA,AAAAD,eAAAC;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAC,SAAAC,SAAAC,SAAAC,SAAAL;;;AAAA","names":["sci.impl.deftype/hex-hash","this","cljs.core/hash","js/sci","js/sci.impl","js/sci.impl.deftype","js/sci.impl.deftype.to-string","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__89932","cljs.core/MultiFn","cljs.core.symbol","sci.impl.deftype/to-string","sci.impl.types/type-impl","t","cljs.core/namespace","cljs.core/name","sci.impl.deftype/clojure-str","v","n","sci$impl$deftype$SciPrintMethod$_sci_print_method$dyn","x__4550__auto__","m__4551__auto__","sci.impl.deftype/-sci-print-method","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","sci.impl.deftype/SciPrintMethod","x","w","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sci.impl.deftype/SciType","sci.impl.deftype/->SciType","rec-name","type","var","ext-map","_","k","cljs.core.assoc","opts","temp__5751__auto__","rv","m","cljs.core/meta","pm","cljs.core.write_all","sci.impl.deftype/->type-impl","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sci.impl.deftype/deftype","p__89952","vec__89953","seq__89954","cljs.core/seq","first__89955","cljs.core/first","cljs.core/next","seq89946","G__89947","G__89948","G__89949","G__89950","G__89951","self__4851__auto__","_fname","form","ctx","record-name","fields","raw-protocol-impls","cljs.core/cons","cljs.core/rest","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","factory-fn-str","factory-fn-sym","rec-type","cljs.core/munge","sci.impl.utils/current-ns-name","protocol-impls","sci.impl.utils/split-when","cljs.core/symbol?","field-set","cljs.core/set","cljs.core.mapcat","p__89956","vec__89957","seq__89958","first__89959","protocol-name","impls","expr","p1__89944#","cljs.core/group-by","protocol","G__89961","G__89962","G__89963","fexpr__89960","cljs.core/deref","sci.impl.utils/eval-resolve-state","or__4253__auto__","cljs.core._EQ_","sci.impl.utils.throw_error_with_location","sci.impl.utils/var?","protocol-var","sci.impl.vars.alter_var_root","cljs.core/update","cljs.core.fnil","cljs.core/conj","protocol-ns","pns","sci.impl.types/getName","fq-meth-name","cljs.core/simple-symbol?","cljs.core.map","p__89964","vec__89965","cljs.core.nth","method-name","bodies","cljs.core/keyword-identical?","cljs.core.mapv","impl","args","body","destr","sci.impl.utils/maybe-destructured","orig-this-sym","rest-args","this-sym","ext-map-binding","cljs.core.gensym","bindings","field","cljs.core.reduce","cljs.core/disj","G__89969","G__89970","fexpr__89968","sci.impl.utils/analyze","cljs.core/zipmap","sci.impl.types/-mutate","cljs.core/with-meta"],"sourcesContent":["(ns sci.impl.deftype\n  {:no-doc true}\n  (:refer-clojure :exclude [deftype])\n  (:require\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars]\n   [sci.lang]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n#?(:clj\n   (defn assert-no-jvm-interface [protocol protocol-name expr]\n     (when (and (class? protocol)\n                (not (= Object protocol)))\n       (utils/throw-error-with-location\n        (str \"defrecord/deftype currently only support protocol implementations, found: \" protocol-name)\n        expr))))\n\n(defn hex-hash [this]\n  #?(:clj (Integer/toHexString (hash this))\n     :cljs (.toString (hash this) 16)))\n\n(defmulti to-string types/type-impl)\n(defmethod to-string :default [this]\n  (let [t (types/type-impl this)]\n    (str (namespace t) \".\" (name t) \"@\"\n         (hex-hash this))))\n\n(defn clojure-str [v]\n  ;; #object[user.Foo 0x743e63ce \"user.Foo@743e63ce\"]\n  (let [n (types/type-impl v)]\n    (str \"#object[\" n \" 0x\" (hex-hash v) \" \\\"\" (to-string v) \"\\\"]\")))\n\n(defprotocol SciPrintMethod\n  (-sci-print-method [x w]))\n\n(clojure.core/deftype SciType\n    [rec-name\n     type\n     var #?(:clj ^:volatile-mutable ext-map\n            :cljs ^:mutable ext-map)]\n  Object\n  (toString [this]\n    (to-string this))\n\n  sci.impl.types/SciTypeInstance\n  (-get-type [_]\n    type)\n  (-mutate [_ k v]\n    (set! ext-map (assoc ext-map k v))\n    v)\n\n  #?@(:clj [SciPrintMethod\n            (-sci-print-method [this w]\n                               (if-let [rv var]\n                                 (let [m (meta rv)]\n                                   (if-let [pm (:sci.impl/print-method m)]\n                                     (pm this w)\n                                     (.write ^java.io.Writer w ^String (clojure-str this))))\n                                 (.write ^java.io.Writer w ^String (clojure-str this))))]\n      :cljs [IPrintWithWriter\n             (-pr-writer [this w opts]\n                         (if-let [rv var]\n                           (let [m (meta rv)]\n                             (if-let [pm (:sci.impl/print-method m)]\n                               (pm this w opts)\n                               (write-all w (clojure-str this))))\n                           (write-all w (clojure-str this))))])\n\n  types/IBox\n  (getVal [_] ext-map))\n\n(defn ->type-impl [rec-name type var m]\n  (SciType. rec-name type var m))\n\n#?(:clj\n   (defmethod print-method SciType [v w]\n     (-sci-print-method v w)))\n\n(defn deftype [[_fname & _ :as form] _ ctx record-name fields & raw-protocol-impls]\n  (if (:sci.impl/macroexpanding ctx)\n    (cons 'clojure.core/deftype (rest form))\n    (let [factory-fn-str (str \"->\" record-name)\n          factory-fn-sym (symbol factory-fn-str)\n          rec-type (symbol (str (munge (utils/current-ns-name)) \".\" (str record-name)))\n          protocol-impls (utils/split-when symbol? raw-protocol-impls)\n          field-set (set fields)\n          protocol-impls\n          (mapcat\n           (fn [[protocol-name & impls] #?(:clj expr :cljs expr)]\n             (let [impls (group-by first impls)\n                   protocol (@utils/eval-resolve-state ctx (:bindings ctx) protocol-name)\n                   ;; _ (prn :protocol protocol)\n                   #?@(:cljs [protocol (or protocol\n                                           (when (= 'Object protocol-name)\n                                             ::object)\n                                           (when (= 'IPrintWithWriter protocol-name)\n                                             ::IPrintWithWriter))])\n                   _ (when-not protocol\n                       (utils/throw-error-with-location\n                        (str \"Protocol not found: \" protocol-name)\n                        expr))\n                   #?@(:clj [_ (assert-no-jvm-interface protocol protocol-name expr)])\n                   protocol (if (utils/var? protocol) @protocol protocol)\n                   protocol-var (:var protocol)\n                   _ (when protocol-var\n                       ;; TODO: not all externally defined protocols might have the :var already\n                       (vars/alter-var-root protocol-var update :satisfies\n                                            (fnil conj #{}) (symbol (str rec-type))))\n                   protocol-ns (:ns protocol)\n                   pns (cond protocol-ns (str (types/getName protocol-ns))\n                             (= #?(:clj Object :cljs ::object) protocol) \"sci.impl.records\")\n                   fq-meth-name #(if (simple-symbol? %)\n                                   (symbol pns (str %))\n                                   %)]\n               (map (fn [[method-name bodies]]\n                      (if #?(:cljs (and (keyword-identical? ::IPrintWithWriter protocol)\n                                        (= '-pr-writer method-name))\n                             :clj false)\n                        #?(:cljs\n                           `(alter-meta! (var ~record-name)\n                                         assoc :sci.impl/print-method (fn ~(rest (first bodies))))\n                           :clj nil)\n                        (let [bodies (map rest bodies)\n                              bodies (mapv (fn [impl]\n                                             (let [args (first impl)\n                                                   body (rest impl)\n                                                   destr (utils/maybe-destructured args body)\n                                                   args (:params destr)\n                                                   body (:body destr)\n                                                   orig-this-sym (first args)\n                                                   rest-args (rest args)\n                                                   ;; shadows-this? (some #(= orig-this-sym %) rest-args)\n                                                   this-sym (if true #_shadows-this?\n                                                                '__sci_this\n                                                                orig-this-sym)\n                                                   args (vec (cons this-sym rest-args))\n                                                   ext-map-binding (gensym)\n                                                   bindings [ext-map-binding (list 'sci.impl.deftype/-inner-impl this-sym)]\n                                                   bindings (concat bindings\n                                                                    (mapcat (fn [field]\n                                                                              ;; TODO: the premature get is only necessary for immutable bindings\n                                                                              ;; We could however delay the getting of these values for both immutable and mutable fields.\n                                                                              ;; Currently a mutable binding is retrieved from the ext-map directly, since it can be mutated in the body we're analyzing here\n                                                                              ;; See resolve.cljc. We could apply the same trick to records.\n                                                                              [field (list 'get ext-map-binding (list 'quote field))])\n                                                                            (reduce disj field-set args)))\n                                                   bindings (concat bindings [orig-this-sym this-sym])\n                                                   bindings (vec bindings)]\n                                               ;; (prn :bindings bindings)\n                                               `(~args\n                                                 (let ~bindings\n                                                   ~@body)))) bodies)]\n                          (@utils/analyze (assoc ctx\n                                                 :deftype-fields field-set\n                                                 :local->mutator (zipmap field-set\n                                                                         (map (fn [field]\n                                                                                (fn [this v]\n                                                                                  (types/-mutate this field v)))\n                                                                              field-set)))\n                           `(defmethod ~(fq-meth-name method-name) ~rec-type ~@bodies)))))\n                    impls)))\n           protocol-impls\n           raw-protocol-impls)]\n      `(do\n         (declare ~record-name ~factory-fn-sym)\n         (def ~(with-meta record-name\n                 {:sci/type true})\n           (sci.impl.deftype/-create-type\n            ~{:sci.impl/type-name (list 'quote rec-type)\n              :sci.impl/type rec-type\n              :sci.impl/constructor (list 'var factory-fn-sym)\n              :sci.impl/var (list 'var record-name)}))\n         (defn ~factory-fn-sym [& args#]\n           (sci.impl.deftype/->type-impl '~rec-type ~rec-type (var ~record-name) (zipmap ~(list 'quote fields) args#)))\n         ~@protocol-impls\n         ~record-name))))\n"]}