{"version":3,"sources":["rewrite_clj/parser/whitespace.cljc"],"mappings":";;AAMA;;;;iDAAA,jDAAMA,0GAGkBC;AAHxB,AAIE,IAAMC,IAAE,AAACC,wBAAYF;AAArB,AACE,GAAM,AAACG,oCAAkBF;AACnB,OAACG,yCACC,AAACC,4DAAkBL,OAAOG;;AAFlC,GAIM,AAACG,gCAAcL;AACf,OAACM,uCACC,AAACF,4DAAkBL,OAAOM;;AANlC,AASM,OAACE,4CACC,AAACH,4DAAkBL,OAAOS","names":["rewrite-clj.parser.whitespace/parse-whitespace","reader","c","rewrite-clj.reader/peek","rewrite-clj.reader/linebreak?","rewrite-clj.node.whitespace/newline-node","rewrite_clj.reader.read_while","rewrite-clj.reader/comma?","rewrite-clj.node.whitespace/comma-node","rewrite-clj.node.whitespace/whitespace-node","rewrite-clj.reader/space?"],"sourcesContent":["(ns ^:no-doc rewrite-clj.parser.whitespace\n  (:require [rewrite-clj.node.whitespace :as nwhitespace]\n            [rewrite-clj.reader :as reader]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn parse-whitespace\n  \"Parse as much whitespace as possible. The created node can either contain\n   only linebreaks or only space/tabs.\"\n  [#?(:cljs ^not-native reader :default reader)]\n  (let [c (reader/peek reader)]\n    (cond (reader/linebreak? c)\n          (nwhitespace/newline-node\n            (reader/read-while reader reader/linebreak?))\n\n          (reader/comma? c)\n          (nwhitespace/comma-node\n            (reader/read-while reader reader/comma?))\n\n          :else\n          (nwhitespace/whitespace-node\n            (reader/read-while reader reader/space?)))))\n"]}