{"version":3,"sources":["sicmutils/ratio.cljc"],"mappings":"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","names":["sicmutils.ratio/ratiotype","js/module$node_modules$fraction_DOT_js$bigfraction","cljs.core.derive","sicmutils.ratio/ratio?","r","sicmutils$ratio$IRational$numerator$dyn","x__4550__auto__","m__4551__auto__","sicmutils.ratio/numerator","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","sicmutils$ratio$IRational$denominator$dyn","sicmutils.ratio/denominator","sicmutils.ratio/IRational","_","cljs.core/PROTOCOL_SENTINEL","x","sicmutils.ratio.goog$module$goog$object.get","sicmutils.ratio/promote","sicmutils.value/one?","var_args","G__78053","sicmutils.ratio/rationalize","js/Error","sicmutils.value/integral?","n","d","sicmutils.ratio/ratio-pattern","sicmutils.ratio/matches?","pattern","s","vec__78064","cljs.core.nth","match","cljs.core/re-find","sicmutils.ratio/match-ratio","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","m","cljs.core/vec","numerator","denominator","cljs.core.subs","sicmutils.ratio/parse-ratio","sicmutils.value/number?","cljs.reader.read_string","sicmutils.util/illegal","ZERO","ONE","c","sicmutils.value/freeze","this","other","and__4251__auto__","sicmutils.value/=","o-value","sicmutils.value/real?","sicmutils.ratio.goog$module$goog$array.defaultCompare","vec__78090","writer","opts","cljs.core/-pr-writer","cljs.core.write_all","sicmutils.ratio/pow","sicmutils.ratio.rationalize","sicmutils.generic/expt","sicmutils.generic/negate","l","cljs.core._EQ_","sicmutils.generic/add","a","b","sicmutils.generic/sub","sicmutils.generic/mul","sicmutils.generic/div","sicmutils.generic/exact-divide","sicmutils.generic/negative?","sicmutils.generic/infinite?","sicmutils.generic/invert","sicmutils.generic/square","sicmutils.generic/cube","sicmutils.generic/abs","sicmutils.generic/magnitude","sicmutils.generic/gcd","sicmutils.generic/lcm","sicmutils.generic/sqrt","sicmutils.complex.complex","sicmutils.util/double","sicmutils.generic/modulo","sicmutils.generic/quotient","sicmutils.generic/remainder","sicmutils.ratio/downcast-fraction","op","G__78115","G__78116","G__78117","G__78118","sicmutils.ratio/upcast-number","G__78119","G__78120","G__78121","G__78122","seq__78123","chunk__78124","count__78125","i__78126","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.ratio\n  \"This namespace provides a number of functions and constructors for working\n  with ratios in Clojure and Clojurescript.\n\n  [[clojure.lang.Ratio]] is native in Clojure. The Clojurescript implementation\n  uses [Fraction.js](https://github.com/infusion/Fraction.js/).\n\n  For other numeric extensions, see [[sicmutils.numbers]]\n  and [[sicmutils.complex]].\"\n  (:refer-clojure :exclude [ratio? numerator denominator rationalize])\n  (:require #?(:clj [clojure.core :as core])\n            #?(:clj [clojure.edn] :cljs [cljs.reader])\n            #?(:cljs [goog.array :as garray])\n            #?(:cljs [goog.object :as obj])\n            #?(:cljs [sicmutils.complex :as c])\n            [sicmutils.generic :as g]\n            [sicmutils.util :as u]\n            [sicmutils.value :as v]\n            #?(:cljs [\"fraction.js/bigfraction.js\" :as Fraction]))\n  #?(:clj (:import (clojure.lang Ratio))))\n\n(def ^:no-doc ratiotype\n  #?(:clj Ratio :cljs Fraction))\n\n(derive ratiotype ::v/real)\n\n(def ratio?\n  #?(:clj core/ratio?\n     :cljs (fn [r] (instance? Fraction r))))\n\n(defprotocol IRational\n  (numerator [_])\n  (denominator [_]))\n\n(extend-protocol IRational\n  #?(:clj Object :cljs default)\n  (numerator [x] x)\n  (denominator [_] 1)\n\n  #?@(:clj\n      [Ratio\n       (numerator [r] (core/numerator r))\n       (denominator [r] (core/denominator r))]\n\n      :cljs\n      [Fraction\n       (numerator\n        [x]\n        (if (pos? (obj/get x \"s\"))\n          (obj/get x \"n\")\n          (- (obj/get x \"n\"))))\n       (denominator\n        [x]\n        (obj/get x \"d\"))]))\n\n#?(:cljs\n   (defn- promote [x]\n     (if (v/one? (denominator x))\n       (numerator x)\n       x)))\n\n(defn rationalize\n  \"Construct a ratio.\"\n  ([x]\n   #?(:cljs (if (v/integral? x)\n              x\n              (Fraction. x))\n      :clj (core/rationalize x)))\n  ([n d]\n   #?(:cljs (if (v/one? d)\n              n\n              (promote (Fraction. n d)))\n      :clj (core/rationalize (/ n d)))))\n\n(def ^:private ratio-pattern #\"([-+]?[0-9]+)/([0-9]+)\")\n\n(defn matches? [pattern s]\n  (let [[match] (re-find pattern s)]\n    (identical? match s)))\n\n(defn ^:private match-ratio\n  [s]\n  (let [m (vec (re-find ratio-pattern s))\n        numerator   (m 1)\n        denominator (m 2)\n        numerator (if (re-find #\"^\\+\" numerator)\n                    (subs numerator 1)\n                    numerator)]\n    `(rationalize\n      (u/bigint ~numerator)\n      (u/bigint ~denominator))))\n\n(defn parse-ratio\n  \"Parser for the `#sicm/ratio` literal.\"\n  [x]\n  (cond #?@(:clj\n            [(ratio? x)\n             `(rationalize\n               (u/bigint ~(str (numerator x)))\n               (u/bigint ~(str (denominator x))))])\n\n        (v/number? x) `(sicmutils.ratio/rationalize ~x)\n        (string? x)    (if (matches? ratio-pattern x)\n                         (match-ratio x)\n                         (recur\n                          #?(:clj  (clojure.edn/read-string x)\n                             :cljs (cljs.reader/read-string x))))\n        :else (u/illegal (str \"Invalid ratio: \" x))))\n\n#?(:clj\n   (extend-type Ratio\n     v/Numerical\n     (numerical? [_] true)\n\n     v/Value\n     (zero? [c] (zero? c))\n     (one? [c] (= 1 c))\n     (identity? [c] (= 1 c))\n     (zero-like [_] 0)\n     (one-like [_] 1)\n     (identity-like [_] 1)\n     (freeze [x] (let [n (numerator x)\n                       d (denominator x)]\n                   (if (v/one? d)\n                     n\n                     `(~'/ ~n ~d))))\n     (exact? [_] true)\n     (kind [_] Ratio))\n\n   :cljs\n   (let [ZERO (Fraction. 0)\n         ONE  (Fraction. 1)]\n     (extend-type Fraction\n       v/Numerical\n       (numerical? [_] true)\n\n       v/Value\n       (zero? [c] (.equals c ZERO))\n       (one? [c] (.equals c ONE))\n       (identity? [c] (.equals c ONE))\n       (zero-like [_] 0)\n       (one-like [_] 1)\n       (identity-like [_] 1)\n       (freeze [x] (let [n (numerator x)\n                         d (denominator x)]\n                     (if (v/one? d)\n                       (v/freeze n)\n                       `(~'/\n                         ~(v/freeze n)\n                         ~(v/freeze d)))))\n       (exact? [_] true)\n       (kind [_] Fraction)\n\n       IEquiv\n       (-equiv [this other]\n         (cond (ratio? other) (.equals this other)\n               (v/integral? other)\n               (and (v/one? (denominator this))\n                    (v/= (numerator this) other))\n\n               ;; Enabling this would work, but would take us away from\n               ;; Clojure's behavior.\n               #_(v/number? other)\n               #_(.equals this (rationalize other))\n\n               :else false))\n\n       IComparable\n       (-compare [this other]\n         (if (ratio? other)\n           (.compare this other)\n           (let [o-value (.valueOf other)]\n             (if (v/real? o-value)\n               (garray/defaultCompare this o-value)\n               (throw (js/Error. (str \"Cannot compare \" this \" to \" other)))))))\n\n       Object\n       (toString [r]\n         (let [x (v/freeze r)]\n           (if (number? x)\n             x\n             (let [[_ n d] x]\n               (str n \"/\" d)))))\n\n       IPrintWithWriter\n       (-pr-writer [x writer opts]\n         (let [n (numerator x)\n               d (denominator x)]\n           (if (v/one? d)\n             (-pr-writer n writer opts)\n             (write-all writer \"#sicm/ratio \\\"\"\n                        (str n) \"/\" (str d)\n                        \"\\\"\")))))))\n\n#?(:clj\n   (do\n     (defmethod g/gcd [Ratio ::v/integral] [a b]\n       (g/div (.gcd (core/numerator a)\n                    (biginteger b))\n              (core/denominator a)))\n\n     (defmethod g/gcd [::v/integral Ratio] [a b]\n       (g/div (.gcd (biginteger a)\n                    (core/numerator b))\n              (core/denominator b)))\n\n     (defmethod g/gcd [Ratio Ratio] [a b]\n       (g/div (.gcd (core/numerator a)\n                    (core/numerator b))\n              (g/lcm (core/denominator a)\n                     (core/denominator b))))\n\n     (defmethod g/infinite? [Ratio] [_] false)\n\n     (doseq [[op f] [[g/exact-divide /]\n                     [g/quotient quot]\n                     [g/remainder rem]\n                     [g/modulo mod]]]\n       (defmethod op [Ratio Ratio] [a b] (f a b))\n       (defmethod op [Ratio ::v/integral] [a b] (f a b))\n       (defmethod op [::v/integral Ratio] [a b] (f a b))))\n\n   :cljs\n   (do\n     (defn- pow [r m]\n       (let [n (numerator r)\n             d (denominator r)]\n         (if (neg? m)\n           (rationalize (g/expt d (g/negate m))\n                        (g/expt n (g/negate m)))\n           (rationalize (g/expt n m)\n                        (g/expt d m)))))\n\n     ;; The -equiv implementation handles equality with any number, so flip the\n     ;; arguments around and invoke equiv.\n     (defmethod v/= [::v/real Fraction] [l r] (= r l))\n\n     (defmethod g/add [Fraction Fraction] [a b] (promote (.add ^js a b)))\n     (defmethod g/sub [Fraction Fraction] [a b] (promote (.sub ^js a b)))\n\n     (defmethod g/mul [Fraction Fraction] [a b]\n       (promote (.mul ^js a b)))\n\n     (defmethod g/div [Fraction Fraction] [a b]\n       (promote (.div ^js a b)))\n\n     (defmethod g/exact-divide [Fraction Fraction] [a b]\n       (promote (.div ^js a b)))\n\n     (defmethod g/negate [Fraction] [a] (promote (.neg ^js a)))\n     (defmethod g/negative? [Fraction] [a] (neg? (obj/get a \"s\")))\n     (defmethod g/infinite? [Fraction] [_] false)\n     (defmethod g/invert [Fraction] [a] (promote (.inverse ^js a)))\n     (defmethod g/square [Fraction] [a] (promote (.mul ^js a a)))\n     (defmethod g/cube [Fraction] [a] (promote (.pow ^js a 3)))\n     (defmethod g/abs [Fraction] [a] (promote (.abs ^js a)))\n     (defmethod g/magnitude [Fraction] [a] (promote (.abs ^js a)))\n\n     (defmethod g/gcd [Fraction Fraction] [a b]\n       (promote (.gcd ^js a b)))\n\n     (defmethod g/lcm [Fraction Fraction] [a b]\n       (promote (.lcm ^js a b)))\n\n     (defmethod g/expt [Fraction ::v/integral] [a b] (pow a b))\n     (defmethod g/sqrt [Fraction] [a]\n       (if (neg? a)\n         (g/sqrt (c/complex (.valueOf a)))\n         (g/div (g/sqrt (u/double (numerator a)))\n                (g/sqrt (u/double (denominator a))))))\n\n     (defmethod g/modulo [Fraction Fraction] [a b]\n       (promote\n        (.mod (.add (.mod ^js a b) b) b)))\n\n     ;; Only integral ratios let us stay exact. If a ratio appears in the\n     ;; exponent, convert the base to a number and call g/expt again.\n     (defmethod g/expt [Fraction Fraction] [a b]\n       (if (v/one? (denominator b))\n         (promote (.pow ^js a (numerator b)))\n         (g/expt (.valueOf a)\n                 (.valueOf b))))\n\n     (defmethod g/quotient [Fraction Fraction] [a b]\n       (promote\n        (let [x (.div ^js a b)]\n          (if (pos? (obj/get x \"s\"))\n            (.floor ^js x)\n            (.ceil ^js x)))))\n\n     (defmethod g/remainder [Fraction Fraction] [a b]\n       (promote (.mod ^js a b)))\n\n     ;; Cross-compatibility with numbers in CLJS.\n     (defn- downcast-fraction\n       \"Anything that `upcast-number` doesn't catch will hit this and pull a floating\n  point value out of the ratio.\"\n       [op]\n       (defmethod op [Fraction ::v/real] [a b]\n         (op (.valueOf ^js a) b))\n\n       (defmethod op [::v/real Fraction] [a b]\n         (op a (.valueOf ^js b))))\n\n     (defn- upcast-number\n       \"Integrals can stay exact, so they become ratios before op.\"\n       [op]\n       (defmethod op [Fraction ::v/integral] [a b]\n         (op a (Fraction. b 1)))\n\n       (defmethod op [::v/integral Fraction] [a b]\n         (op (Fraction. a 1) b)))\n\n     ;; An exact number should become a ratio rather than erroring out, if one\n     ;; side of the calculation is already rational (but not if neither side\n     ;; is).\n     (upcast-number g/exact-divide)\n\n     ;; We handle the cases above where the exponent connects with integrals and\n     ;; stays exact.\n     (downcast-fraction g/expt)\n\n     (doseq [op [g/add g/mul g/sub g/gcd g/lcm\n                 g/modulo g/remainder\n                 g/quotient g/div]]\n       (upcast-number op)\n       (downcast-fraction op))))\n"]}