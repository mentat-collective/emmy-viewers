{"version":3,"sources":["nextjournal/viewer/notebook.cljs"],"mappings":"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","names":["nextjournal.viewer.notebook/notebook","xs","nextjournal.viewer/html","cljs.core.into","p1__95193#","cljs.core.map","map__95196","cljs.core/--destructure-map","cljs.core.get","ks","viewer","width","nextjournal.viewer/meta","cljs.core/Keyword","cljs.core/name","cljs.core._EQ_","G__95197","or__4253__auto__","G__95198","G__95199","nextjournal.viewer/inspect","cljs.core.vary_meta","cljs.core/assoc","nextjournal.viewer.notebook/var","x","js/nextjournal","js/nextjournal.viewer","js/nextjournal.viewer.notebook","js/nextjournal.viewer.notebook.state","nextjournal.viewer.notebook/state","reagent.ratom.atom","cljs.core/deref","nextjournal.viewer.notebook/root","nextjournal.viewer.notebook/read-string","cljs.core.partial","cljs.reader/read-string","cljs.core/identity","nextjournal.viewer.notebook/mount","el","reagent.dom.render","nextjournal.viewer.notebook/reset-state","new-state","cljs.core/reset!","nextjournal.viewer.notebook/opts->query","opts","p1__95202#","cljs.core.update","clojure.string/join","clojure.string.join","nextjournal.viewer.notebook/describe","result","G__95206","nextjournal.viewer/value-type","cljs.core/meta","cljs.core/counted?","cljs.core.assoc","cljs.core/count","p__95207","map__95208","nextjournal.viewer.notebook/paginate","start","n","lambdaisland.glogi.log","cljs.core/map?","cljs.core/set?","cljs.core/with-meta","cljs.core.drop","cljs.core.take","cljs.core.doall","cljs.core.merge","re_frame.context.reg_sub","p__95210","vec__95211","cljs.core.nth","db","blob-key","id","v","cljs.core.get_in","p__95217","map__95218","nextjournal.viewer.notebook/fetch!","!result","js/fetch","cljs.core/seq","p1__95214#","p1__95215#","p1__95216#","p__95225","map__95226","nextjournal.viewer.notebook/in-process-fetch!","js/Promise","resolve","_reject","G__95227","re_frame.context.subscribe","p1__95221#","p1__95222#","G__95228","p1__95223#","p__95229","map__95230","nextjournal.viewer.notebook/get-fetch-opts","type-key","count","cljs.core/contains?","cljs.core/not","fexpr__95235","nextjournal.viewer/!viewers","nextjournal.viewer/increase-items","nextjournal.viewer.notebook/blob","blob","with-let95237","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__85826__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init95238","res95239","reagent.core.atom","fetch!","_","G__95251","map__95252","value","error","loading?","nextjournal.viewer/view-as","nextjournal.view.context/provide","nextjournal.viewer/register-viewers!","nextjournal.devcards/register-devcard*","p__95266","vec__95267","blob-id","cljs.core/PersistentHashMap","cljs.core/random-uuid","cljs.core/vec","cljs.core.range","cljs.core/zipmap","nextjournal.viewer.notebook/sci-viewer-namespace","nextjournal.viewer/register-viewer!","nextjournal.viewer/with-viewer","nextjournal.viewer/with-viewers","js/nextjournal.viewer.notebook.ctx","nextjournal.viewer.notebook/ctx","sci.core/init","goog/global","reagent.ratom/atom","nextjournal.markdown/parse","nextjournal.markdown/->hiccup","nextjournal.viewer.notebook/eval-form","f","sci.core/eval-form","nextjournal.viewer/*eval-form*","cljs.core/shuffle"],"sourcesContent":["(ns nextjournal.viewer.notebook\n  \"Entrypoint for Clerk notebook viewer.\"\n  (:require [cljs.reader]\n            [clojure.string :as str]\n            [nextjournal.devcards :as dc]\n            [nextjournal.log :as log]\n            [nextjournal.viewer :as v]\n            [nextjournal.viewer.table]\n            [reagent.core :as r]\n            [reagent.ratom :as ratom]\n            [reagent.dom :as rdom]\n            [nextjournal.view.context :as context]\n            [re-frame.context :as rf]\n            [sci.core :as sci]))\n\n(defn notebook [xs]\n  (v/html\n    (into [:div.flex.flex-col.items-center.viewer-notebook]\n          (map #(v/html\n                  (let [{:as ks :nextjournal/keys [viewer width]} (v/meta %)]\n                    [:div {:class [\"viewer\"\n                                   (when (keyword? viewer)\n                                     (str \"viewer-\" (name viewer)))\n                                   (when (= viewer :code)\n                                     \"not-prose\")\n                                   (case (or width (case viewer\n                                                     :code :wide\n                                                     :prose))\n                                     :wide \"w-full max-w-wide px-8\"\n                                     :full \"w-full\"\n                                     \"w-full max-w-prose px-8 overflow-x-auto\")]}\n                     (cond-> [v/inspect %] (:blob/id %) (vary-meta assoc :key (:blob/id %)))])))\n          xs)))\n\n(defn var [x]\n  (v/html [:span.inspected-value\n           [:span.syntax-tag \"#'\" (str x)]]))\n\n(defonce state (ratom/atom nil))\n(defn root []\n  [v/inspect @state])\n\n(def ^:export read-string\n  (partial cljs.reader/read-string {:default identity}))\n\n(defn ^:export mount [el]\n  (rdom/render [root] el))\n\n(defn ^:export reset-state [new-state]\n  (reset! state new-state))\n\n(defn opts->query [opts]\n  (->> opts\n       (map #(update % 0 name))\n       (map (partial str/join \"=\"))\n       (str/join \"&\")))\n\n#_(opts->query {:s 10 :num 42})\n\n\n(defn describe [result]\n  (cond-> {:nextjournal/type-key (v/value-type result) :blob/id (-> result meta :blob/id)}\n    (counted? result)\n    (assoc :count (count result))))\n\n#_(describe (vec (range 100)))\n\n(defn paginate [result {:as opts :keys [start n] :or {start 0}}]\n  (log/info :paginate {:start start :n n :result result})\n  (if (and (number? n)\n           (pos? n)\n           (not (or (map? result)\n                    (set? result)))\n           (counted? result))\n    (with-meta (->> result (drop start) (take n) doall) (merge opts (describe result)))\n    result))\n\n#_(meta (paginate (vec (range 10)) {:n 20}))\n#_(meta (paginate (vec (range 100)) {:n 20}))\n#_(meta (paginate (zipmap (range 100) (range 100)) {:n 20}))\n#_(paginate #{1 2 3} {:n 20})\n\n(rf/reg-sub\n ::blobs\n (fn [db [blob-key id :as v]]\n   (if id\n     (get-in db v)\n     (get db blob-key))))\n\n(defn fetch! [!result {:blob/keys [id]} opts]\n  (log/trace :fetch! opts)\n  (-> (js/fetch (str \"_blob/\" id (when (seq opts)\n                                   (str \"?\" (opts->query opts)))))\n      (.then #(.text %))\n      (.then #(reset! !result {:value (read-string %)}))\n      (.catch #(reset! !result {:error %}))))\n\n(defn in-process-fetch! [!result {:blob/keys [id]} opts]\n  (log/trace :in-process-fetch! opts :id id)\n  (-> (js/Promise. (fn [resolve _reject]\n                     (resolve @(rf/subscribe [::blobs id]))))\n      (.then #(paginate % opts))\n      (.then #(reset! !result {:value (doto % (log/info :in-process-fetch!/value))}))\n      (.catch #(reset! !result {:error %}))))\n\n(defn get-fetch-opts [{:keys [nextjournal/type-key count]}]\n  (cond\n    (and (number? count)\n         (pos? count)\n         (contains? #{:list :vector} type-key)\n         (not (@v/!viewers type-key))) {:n v/increase-items}))\n\n#_(get-fetch-opts {})\n#_(get-fetch-opts {:type-key :vector :count 1000})\n\n(defn blob [blob]\n  (r/with-let [!result (r/atom {:loading? true})\n               fetch! (partial (:blob/fetch! blob fetch!) !result blob)\n               _ (fetch! (get-fetch-opts blob))]\n    (let [{:keys [value error loading?]} @!result]\n      (cond value (v/view-as :reagent [context/provide {:fetch! fetch!}\n                                       [v/inspect value]])\n            error (v/html [:span.red \"error\" (str error)])\n            loading? (v/html \"loading\u2026\")))))\n\n(v/register-viewers! {:clerk/notebook notebook\n                      :clerk/var var\n                      :clerk/blob blob})\n\n\n\n(dc/defcard blob-in-process-fetch\n  \"Dev affordance that performs fetch in-process.\"\n  (into [:div]\n        (map (fn [[blob-id v]] [:div [v/inspect (v/view-as :clerk/blob (assoc (describe (with-meta v {:blob/id blob-id})) :blob/fetch! in-process-fetch!))]]))\n        @(rf/subscribe [::blobs]))\n  {:blobs (hash-map (random-uuid) (vec (drop 500 (range 1000)))\n                    (random-uuid) (range 1000)\n                    (random-uuid) (zipmap (range 1000) (range 1000)))})\n\n\n(def sci-viewer-namespace\n  {'html nextjournal.viewer/html\n   'view-as nextjournal.viewer/view-as\n   'inspect nextjournal.viewer/inspect\n   'register-viewer! nextjournal.viewer/register-viewer!\n   'register-viewers! nextjournal.viewer/register-viewers!\n   'with-viewer nextjournal.viewer/with-viewer\n   'with-viewers nextjournal.viewer/with-viewers})\n\n\n(defonce ctx\n  (sci/init {:async? true\n             :disable-arity-checks true\n             :classes {'js goog/global\n                       :allow :all}\n             :bindings {'atom ratom/atom}\n             :namespaces {'nextjournal.viewer sci-viewer-namespace\n                          'v sci-viewer-namespace\n                          'nextjournal.markdown {'parse nextjournal.markdown/parse\n                                                 '->hiccup nextjournal.markdown/->hiccup}}}))\n\n\n(defn eval-form [f]\n  (sci/eval-form ctx f))\n\n(set! v/*eval-form* eval-form)\n\n(dc/defcard eval-viewer\n  \"Viewers that are lists are evaluated using sci.\"\n  [v/inspect (v/with-viewer \"Hans\" '(fn [x] (v/with-viewer [:h3 \"Ohai, \" x \"! \ud83d\udc4b\"] :hiccup)))])\n\n(dc/defcard test\n  \"foo\"\n  []\n  [:h1 \"hi\"])\n\n(dc/defcard notebook\n  \"Shows how to display a notebook document\"\n  [v/inspect (v/view-as :clerk/notebook\n                        [(v/view-as :markdown \"# Hello Markdown\n## Paragraphs\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum velit nulla,\nsodales eu lorem ut, [tincidunt consectetur](https://nextjournal.com/) diam. Donec in scelerisque risus.\nSuspendisse potenti. Nunc non hendrerit[^1] odio, at malesuada erat. Aenean rutrum quam\n**sed velit mollis** imperdiet. Sed lacinia quam eget tempor tempus. Mauris et leo ac\nodio[^longnote] condimentum facilisis eu sed nibh. _Morbi sed est sit amet_ risus blandit\nullam corper. Pellentesque nisi metus, ~~feugiat sed velit ut~~, dignissim finibus urna.\n\n[^1]: Here is a sidenote.\n\n[^1]: Here\u2019s a sidenote.\n[^longnote]: And here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they belong to the previous footnote.\n\n    ```\n      {:x [1 6 3 1]\n       :y [4 1 2 5]}\n    ```\n\n## Lists\n\n* List Item 1\n  * List Item 1.1\n  * List Item 1.2\n* List Item 2\n  * List Item 2.1\n  * List Item 2.2\n* List Item 3\n\n1. List Item 1\n2. List Item 2\n3. List Item 3\n\n* [x] Todo checked that is really long and should be wrapping into a new line let\u2019s see what this does.\n  * [x] Todos can be nested too!\n* [ ] Todo unchecked\n\n## Tables\n\n| Spalte 1     | Spalte 2            | Spalte 3 |\n| ------------ |:-------------------:| --------:|\n| Spalte 1 ist | links ausgerichtet  |   1600 \u20ac |\n| Spalte 2 ist | zentriert           |     12 \u20ac |\n| Spalte 3 ist | rechts ausgerichtet |      1 \u20ac |\n\n## Blockquotes\n\n> Hello, is it me you\u2019re looking for?\n>\n>\u2014Lionel Richie\")\n                         [1 2 3 4]\n                         (v/view-as :code \"(shuffle (range 10))\")\n                         {:hello [0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9]}\n                         (v/view-as :markdown \"# And some more\\n And some more [markdown](https://daringfireball.net/projects/markdown/).\")\n                         (v/view-as :code \"(shuffle (range 10))\")\n                         (v/view-as :markdown \"## Some math \\n This is a formula.\")\n                         (v/view-as :latex\n                                    \"G_{\\\\mu\\\\nu}\\\\equiv R_{\\\\mu\\\\nu} - {\\\\textstyle 1 \\\\over 2}R\\\\,g_{\\\\mu\\\\nu} = {8 \\\\pi G \\\\over c^4} T_{\\\\mu\\\\nu}\")\n                         (v/view-as :plotly\n                                    {:data [{:y (shuffle (range 10)) :name \"The Federation\" }\n                                            {:y (shuffle (range 10)) :name \"The Empire\"}]})])]\n  {::dc/class \"p-0\"})\n"]}