{"version":3,"sources":["sicmutils/euclid.cljc"],"mappings":";AAQA;;;;;;;;;gCAAA,hCAAMA,wEAQHC,EAAEC;AARL,AASE,GAAM,AAACC,4BAAQF;AAAf,iJAAA,IAAA,3DAAmB,AAACG,oDAAMF;;AAA1B,GACM,AAACC,4BAAQD;AADf,iJAAA,IAAA,3DACmB,AAACE,oDAAMH;;AAD1B,AAEY,QAAA,JAAOI;SAAP,LAAWC;QAAX,JAAgBC;SAAhB,LAAoBC;IAAKC,IAAE,AAACL,oDAAMF;IAAGQ,KAAG,AAACN,oDAAMH;;AAA/C,AACE,GAAI,AAACE,4BAAQM;AAAb,0FACGC,GAAGJ,GAAGE;;AACP,IAAMG,IAAE,AAACC,yDAAWF,GAAGD;AAAvB,AACE,eAAO,AAACI,kDAAIP,GAAG,AAACQ,uDAAIH,EAAEN;eAAIA;eACnB,AAACQ,kDAAIL,GAAG,AAACM,uDAAIH,EAAEJ;eAAIA;eACnB,AAACM,kDAAIH,GAAG,AAACI,uDAAIH,EAAEF;eAAIA;;;;;;;;;;;;;;;AAE9C;;;;;uBAAA,vBAAMM,sDAIHd,EAAEC;AAJL,AAKE,GAAM,AAACC,4BAAQF;AAAG,OAACG,oDAAMF;;AAAzB,GACM,AAACC,4BAAQD;AAAG,OAACE,oDAAMH;;AADzB,oBAGM,iBAAAe,mBAAI,AAACC,mDAAIhB,EAAEC;AAAX,AAAA,oBAAAc;AAAAA;;AAAc,OAACC,mDAAIhB,EAAE,AAACiB,uDAAShB;;;AAC/B,OAACE,oDAAMH;;AAJb,GAMM,GAAK,EAAK,AAACkB,gCAAYlB,QAAG,AAACkB,gCAAYjB;AAN7C;;AAAA,AAOY,IAAOD,QAAE,AAACG,oDAAMH;IAAGC,QAAE,AAACE,oDAAMF;;AAA5B,AACE,GAAI,AAACC,4BAAQD;AACXD;;AACA,eAAOC;eAAE,AAACkB,0DAAYnB,MAAEC;;;;;;;;;;;;;AAI1C,AAAAmB,kEAAA,4DAAA,WAA2BpB,EAAEC;AAA7B,AACE,OAACa,qBAAId,EAAEC","names":["sicmutils.euclid/extended-gcd","a","b","sicmutils.value/zero?","sicmutils.generic/abs","s","s0","t","t0","r","r0","q","sicmutils.generic/quotient","sicmutils.generic._","sicmutils.generic._STAR_","sicmutils.euclid/gcd","or__4253__auto__","sicmutils.value/=","sicmutils.generic/negate","sicmutils.value/integral?","sicmutils.generic/remainder","sicmutils.generic/gcd"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.euclid\n  \"Implementations of various [greatest common\n  divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) algorithms.\"\n  (:require [sicmutils.generic :as g]\n            [sicmutils.value :as v]))\n\n(defn extended-gcd\n  \"Returns a vector containing the [greatest common\n  divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) and\n  the [B\u00e9zout coefficients](https://en.wikipedia.org/wiki/B\u00e9zout%27s_identity)\n  corresponding to the inputs `a` and `b`.\n\n  For more info, see the Wikipedia article on the [Extended Euclidean\n  algorithm](http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm).\"\n  [a b]\n  (cond (v/zero? a) [(g/abs b) 0 1]\n        (v/zero? b) [(g/abs a) 1 0]\n        :else (loop [s 0 s0 1 t 1 t0 0 r (g/abs b) r0 (g/abs a)]\n                (if (v/zero? r)\n                  [r0 s0 t0]\n                  (let [q (g/quotient r0 r)]\n                    (recur (g/- s0 (g/* q s)) s\n                           (g/- t0 (g/* q t)) t\n                           (g/- r0 (g/* q r)) r))))))\n\n(defn gcd\n  \"Returns the [greatest common\n  divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) of the two\n  inputs `a` and `b`.\"\n  [a b]\n  (cond (v/zero? a) (g/abs b)\n        (v/zero? b) (g/abs a)\n\n        (or (v/= a b) (v/= a (g/negate b)))\n        (g/abs a)\n\n        (not (and (v/integral? a) (v/integral? b))) 1\n        :else (loop [a (g/abs a) b (g/abs b)]\n                (if (v/zero? b)\n                  a\n                  (recur b (g/remainder a b))))))\n\n;; multimethod implementation for basic numeric types.\n\n(defmethod g/gcd :default [a b]\n  (gcd a b))\n"]}