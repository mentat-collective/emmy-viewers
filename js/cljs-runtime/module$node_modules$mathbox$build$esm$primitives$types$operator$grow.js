shadow$provide.module$node_modules$mathbox$build$esm$primitives$types$operator$grow=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Grow=void 0;global=require("module$node_modules$mathbox$build$esm$primitives$types$operator$operator");class Grow extends global.Operator{static initClass(){this.traits="node bind operator source index grow".split(" ")}sourceShader(shader){return shader.pipe(this.operator)}make(){super.make();if(null!=this.bind.source){var uniforms=
{growScale:this.node.attributes["grow.scale"],growMask:this._attributes.make(this._types.vec4()),growAnchor:this._attributes.make(this._types.vec4())};this.growMask=uniforms.growMask.value;this.growAnchor=uniforms.growAnchor.value;var transform=this._shaders.shader();transform.require(this.bind.source.sourceShader(this._shaders.shader()));transform.pipe("grow.position",uniforms);return this.operator=transform}}unmake(){return super.unmake()}resize(){this.update();return super.resize()}update(){const dims=
this.bind.source.getFutureDimensions(),order=["width","height","depth","items"];return(()=>{const result=[];for(let i=0;i<order.length;i++){const key=order[i],anchor=this.props[key];this.growMask.setComponent(i,+(null==anchor));result.push(this.growAnchor.setComponent(i,null!=anchor?((dims[key]||1)-1)*(.5-.5*anchor):0))}return result})()}change(changed,touched,_init){if(touched.operator)return this.rebuild();if(touched.grow)return this.update()}}exports.Grow=Grow;Grow.initClass()}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$primitives$types$operator$grow.js.map
