{"version":3,"sources":["sicmutils/mechanics/lagrange.cljc"],"mappings":";AAgBA,AAAKA,gDAAiBC;AACtB,AAAKC,8CAAeD;AACpB,AAAKE,kDAAmBF;AACxB,AAAKG,8CAAeC;AAgBpB,AAAA;;;;;;0CAAA,kDAAAC,5FAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,sEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wEAAA,xEAAMD;AAAN,AAAA,AAAA;;;AAAA,CAAA,wEAAA,xEAAMA,mFAMFE;AANJ,AAOG,IAAAC,mBAAA,AAAAC,cAAA,mFAAA,AAAA,sDAAA,AAAAA,cAAA,mFAAA,AAAA,sDAAA,AAAA,wDAAA,AAAAA,cAAA,mFAAA,AAAA,sDAAA,AAAA,mEAAA,AAAAA,cAAA,mFAAA,AAAA,sDAAA,AAAA,4EAAA,AAAA,9OACyBF,0NAAcA;AADvC,AAAA,IAAAG,mBAAAF;AAAA,AAAA,GAAAE;AAAAA;;AAAA,OAAAC,4BAAAH;;;;AAPH,CAAA,kEAAA,lEAAMH;;AAAN,AAUA,AAAA;;;;;4CAAA,oDAAAF,hGAAMc;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,+EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,iFAAA,jFAAME,4FAIHQ,EAAEC,EAAEC,KAAOC;AAJd,AAKE,OAACC,8CAAM/B,uBAAG2B,EAAEC,EAAEC,KAAKC;;;AALrB,CAAA,oEAAA,pEAAMX;;AAAN;AAAA,CAAA,8DAAA,WAAAC,zEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAG,SAAAC,SAAAL;;;AAAA,AAOA;;;AACEY,0CAAQb;AAEV;;;AACEc,0CAAQd;AAIV;;;;;oCAAA,pCAAMe,gFAIHC;AAJH,AAAA,GAKS,AAACC,8BAAID;AALd;AAAA,AAAA,MAAA,KAAA3B,MAAA;;;AAAA,GAKqB,0BAAA,zBAAG,AAAC6B,gBAAMF;AAL/B;AAAA,AAAA,MAAA,KAAA3B,MAAA;;;AAME,yDAAA,lDAAC8B,4CAAIH;;AAEP;;;;;;;;;;;;;0CAAA,1CAAMI,4FAYHJ;AAZH,AAAA,GAaS,AAACC,8BAAID;AAbd;AAAA,AAAA,MAAA,KAAA3B,MAAA;;;AAAA,GAaqB,0BAAA,zBAAG,AAAC6B,gBAAMF;AAb/B;AAAA,AAAA,MAAA,KAAA3B,MAAA;;;AAcE,yDAAA,lDAAC8B,4CAAIH;;AAEP;;;;;;wCAAA,xCAAMK,wFAKHL;AALH,AAAA,GAMS,AAACC,8BAAID;AANd;AAAA,AAAA,MAAA,KAAA3B,MAAA;;;AAAA,GAMqB,0BAAA,zBAAG,AAAC6B,gBAAMF;AAN/B;AAAA,AAAA,MAAA,KAAA3B,MAAA;;;AAOE,yDAAA,lDAAC8B,4CAAIH;;AAEP;;;;;;4CAAA,5CAAMM,gGAKHN;AALH,AAAA,GAMS,AAACC,8BAAID;AANd;AAAA,AAAA,MAAA,KAAA3B,MAAA;;;AAAA,GAMqB,0BAAA,zBAAG,AAAC6B,gBAAMF;AAN/B;AAAA,AAAA,MAAA,KAAA3B,MAAA;;;AAOE,yDAAA,lDAAC8B,4CAAIH;;AAEP,+CAAA,/CAAMO,sGAAcC;AAApB,AAAA,GACS,AAACC,qCAAaD;AADvB;AAAA,AAAA,MAAA,KAAAnC,MAAA;;;AAEE,IAAMoB,IAAE,kDAAA,lDAACU,4CAAIK;AAAb,AACE,GAAI,AAACP,8BAAIR;AACP,OAACS,gBAAMT;;AADT;;;AAMJ;;;AACEiB,2CAASX;AAEX;;;AACEY,2CAASP;AAEX;;;AACEQ,8CAAYP;AAEd;;;AACEQ,+CAAaP;AAEf;;;AACEQ,2CAAYV;AAEd;;;AACEW,0CAAWV;AAEb;;;AACEW,6CAAcV;AAEhB;;;AACEW,iCAAEb;AAEJ;;;AACEc,oCAAKb;AAEP;;;AACEc,uCAAQb;AAEV,wDAAA,xDAAMc,wHAA0BC;AAAhC,AACE,OAACC,8GAAG,+CAAA,AAAA,/CAACC,kGACD,AAACC,+BAAa,+CAAA,AAAA,/CAACD,mGAAWF,OAC1B,AAACG,+BAAa,+CAAA,AAAA,/CAACD,mGAAWF;;AAShC,AAAA;;;;qCAAA,6CAAAnD,lFAAMwD;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAArD,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAMqD,8EAGFjC;AAHJ,AAIG,IAAMkC,KAAG,CAACC,gEAAAA,mEAAAA,LAAEnC,+CAAAA;AAAZ,oEACM,WAAKD,/EAEL,OAACqC;AAFD,AACE,OAACP,8GAAG9B,EAAE,CAACC,kCAAAA,qCAAAA,LAAED,iBAAAA,IAAG,CAACmC,mCAAAA,sCAAAA,LAAGnC,kBAAAA;GAClB,mFAAA,2DAAA;;;AAPT,CAAA,mEAAA,nEAAMkC,8EAQFjC,EAAEnB;AARN,AAAA,GASU,KAAA,JAAGA;AATb;AAAA,AAAA,MAAA,KAAAD,MAAA;;;AAUG,IAAMyD,MAAM,AAACC,6CAAK,KAAA,JAAKzD,SAAG,AAAC0D,kBAAQJ,gCAAEnC;IAC/BO,QAAM,AAACiC,6CAAK,AAACX,8GAAGY,yBAAUJ;AADhC,oEAEM,WAAKtC,/EACL,OAACqC;AADD,AAAQ,QAAC7B,sCAAAA,yCAAAA,LAAMR,qBAAAA;GACf,mFAAA,2DAAA;;;AAbT,CAAA,6DAAA,7DAAMkC;;AAAN,AAeA,AAAKS,mDAAiBT;AAQtB,+CAAA,/CAAMU,sGAAiBC,eAAeC;AAAtC,AACE,OAACC,kDAAEF,eAAeC;;AAMpB;;;;;;+CAAA,/CAAME,sGAKHC;AALH,AAME,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAvC,4CAAAwC,WAAA,IAAA,/DAAMC;YAAN,AAAAzC,4CAAAwC,WAAA,IAAA,nEAAQC;QAAR,AAAAzC,4CAAAwC,WAAA,IAAA,/DAAUE;AAAV,AACE,OAACC,8DAAE,AAAAC,wDAAA,IAAA,KAAQN,uDAAK,AAACO,uDAASH;;;AAE9B;;;6CAAA,7CAAMI,kGAEHC,EAAEC;AAFL,AAGE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAjD,4CAAAkD,WAAA,IAAA,/DAAMT;IAANU,aAAA,AAAAnD,4CAAAkD,WAAA,IAAA;SAAA,AAAAlD,4CAAAmD,WAAA,IAAA,hEAASC;SAAT,AAAApD,4CAAAmD,WAAA,IAAA,hEAAYE;WAAZ,AAAArD,4CAAAkD,WAAA,IAAA,lEAAgB3D;AAAhB,AACE,OAAC6C,kDAAE,AAACO,8DAAE,AAAAC,wDAAA,IAAA,KAAQG,oDAAE,AAACF,uDAAStD,YACvB,CAACyD,kCAAAA,yCAAAA,TAAEI,qBAAAA,lBAAGC,qBAAAA;;;AAEb;;;;;;0CAAA,1CAAMC,4FAKHP,EAAEQ;AALL,AAME,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAxD,4CAAAyD,WAAA,IAAA,/DAAMhB;QAAN,AAAAzC,4CAAAyD,WAAA,IAAA,/DAAQnE;QAAR,AAAAU,4CAAAyD,WAAA,IAAA,/DAAUf;AAAV,AACE,OAACN,kDAAE,AAACO,8DAAE,AAAAC,wDAAA,IAAA,KAAQG,oDAAE,AAACF,uDAASH,SAAI,AAACC,8DAAE,AAAAC,wDAAA,IAAA,KAAQW,oDAAE,AAACV,uDAASvD;;;AAEzD;;;;sDAAA,tDAAMoE,oHAGHX,EAAEY;AAHL,AAIE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA5D,4CAAA6D,WAAA,IAAA,/DAAMpB;IAANqB,aAAA,AAAA9D,4CAAA6D,WAAA,IAAA;YAAA,AAAA7D,4CAAA8D,WAAA,IAAA,nEAASrB;QAAT,AAAAzC,4CAAA8D,WAAA,IAAA,/DAAWC;QAAX,AAAA/D,4CAAA6D,WAAA,IAAA,/DAAcnB;AAAd,AACE,OAACN,kDAAE,AAACO,8DAAE,AAAAC,wDAAA,IAAA,KAAQG,oDAAE,AAACF,uDAASH,SAAI,AAACC,8DAAEI,EAAEY,oDAAEI;;;AAEzC,qDAAA,rDAAMC,kHAAuBjB,EAAEkB;AAA/B,AACE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAlE,4CAAAmE,WAAA,IAAA,/DAAM1B;QAAN,AAAAzC,4CAAAmE,WAAA,IAAA,/DAAQ7E;QAAR,AAAAU,4CAAAmE,WAAA,IAAA,/DAAUzB;AAAV,AACE,OAACN,kDAAE,AAACO,8DAAE,AAAAC,wDAAA,IAAA,KAAQG,oDAAE,AAACF,uDAASH,SACvB,iBAAA0B,WAAG,AAACC,oDAAM/E;AAAV,AAAA,0EAAA8E,wBAAAA,1FAACH,kCAAAA,4CAAAA;;;;AAER;;;;+CAAA,/CAAMK,sGAGHvB,EAAEkB;AAHL,AAIE,kBAAAM;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAvE,4CAAAwE,WAAA,IAAA,/DAAM/B;IAANgC,aAAA,AAAAzE,4CAAAwE,WAAA,IAAA;QAAA,AAAAxE,4CAAAyE,WAAA,IAAA,/DAASE;IAATD,aAAA,AAAA1E,4CAAAwE,WAAA,IAAA;WAAA,AAAAxE,4CAAA0E,WAAA,IAAA,lEAAaE;WAAb,AAAA5E,4CAAA0E,WAAA,IAAA,lEAAkBG;AAAlB,AACE,OAACzC,kDAAE,AAACO,8DAAE,AAAAC,wDAAA,IAAA,KAAQG,oDACR,AAAC+B,uDAAE,AAACjC,uDAAS+B,MACV,AAAC/B,uDAAS,AAACF,uDAAEgC,EAAEE,cACrB,CAACZ,kCAAAA,qCAAAA,LAAEU,iBAAAA;;;AAEV,8CAAA,9CAAMI,oGAAgBC,GAAGjC;AAAzB,AACE,kBAAAkC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAjF,4CAAAkF,WAAA,IAAA,/DAAMzC;IAAN0C,aAAA,AAAAnF,4CAAAkF,WAAA,IAAA;QAAA,AAAAlF,4CAAAmF,WAAA,IAAA,/DAASR;IAATS,aAAA,AAAApF,4CAAAkF,WAAA,IAAA;WAAA,AAAAlF,4CAAAoF,WAAA,IAAA,lEAAaR;aAAb,AAAA5E,4CAAAoF,WAAA,IAAA,pEAAkBC;AAAlB,AACE,OAACP,uDAAE,AAACnC,8DAAE,AAAAC,wDAAA,IAAA,KAAQG,oDACR,AAAC+B,uDAAE,AAACjC,uDAAS+B,MACV,AAAC/B,uDAAS,AAACF,uDAAEgC,EAAEU,gBACrB,AAAAzC,wDAAG,AAACD,uDAAEqC,GAAGjC,GAAG4B;;;AAEnB,kDAAA,lDAAMW,4GAAoBC,EAAEC,EAAEC;AAA9B,AACE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA1F,4CAAA2F,WAAA,IAAA,/DAAMlD;IAANmD,aAAA,AAAA5F,4CAAA2F,WAAA,IAAA;YAAA,AAAA3F,4CAAA4F,WAAA,IAAA,nEAASE;IAATD,aAAA,AAAA7F,4CAAA2F,WAAA,IAAA;eAAA,AAAA3F,4CAAA6F,WAAA,IAAA,tEAAiBE;aAAjB,AAAA/F,4CAAA6F,WAAA,IAAA,pEAA0BR;aAA1B,AAAArF,4CAAA6F,WAAA,IAAA,pEAAiCG;AAAjC,AACE,OAAClB,8DAAE,AAACnC,8DAAE,AAAAC,wDAAA,IAAA,KAAQ2C,oDACR,AAACT,uDAAE,AAACjC,uDAASkD,UACV,AAAClD,uDAAS,AAACF,uDAAE0C,OAAO,AAACY,oDAAIH,gBAC/B,AAACnD,8DAAE,AAAAC,wDAAA,IAAA,KAAQ4C,oDACR,AAAC3C,uDAAS,AAACiC,uDAAEkB,OAAO,AAACrD,uDAAE0C,OAAO,AAACa,oDAAIJ,kEACtC,8DAAA,9DAACnD,mEAAK8C,sDAAI,AAACS,oDAAIJ;;;AAItB,kDAAA,lDAAMK,4GAAoBpD,EAAEQ;AAA5B,AACE,kBAAA6C;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAApG,4CAAAqG,WAAA,IAAA,/DAAM5D;QAAN,AAAAzC,4CAAAqG,WAAA,IAAA,/DAAQ/G;WAAR,AAAAU,4CAAAqG,WAAA,IAAA,lEAAU9G;AAAV,AACE,OAAC6C,kDAAE,AAACO,8DAAE,AAAAC,wDAAA,IAAA,KAAQrD,uDAAKwD,EAAExD,WAClB,AAACoD,8DAAE,AAAAC,wDAAA,IAAA,KAAQtD,oDAAEiE,EAAEjE;;;AAEtB,8CAAA,9CAAegH,oGAAgBC;AAA/B,AACE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAxG,4CAAAyG,WAAA,IAAA,/DAAMhE;IAANiE,aAAA,AAAA1G,4CAAAyG,WAAA,IAAA;QAAA,AAAAzG,4CAAA0G,WAAA,IAAA,/DAASC;YAAT,AAAA3G,4CAAA0G,WAAA,IAAA,nEAAWZ;AAAX,AACE,OAAC3E,8GAAG,gHAAA,hHAACA,8GAAGwF,YACJ,AAACxF,8GAAG,AAAC2D,uDAAE6B,EAAE,AAAChE,uDAAE4D,EAAE,AAACN,oDAAIH,SACf,8DAAA,9DAACnD,mEAAK4D,oDAAE,AAACL,oDAAIJ;;;AAEzB,wCAAA,xCAAec,wFAAUC,GAAGC,GAAGnD;AAA/B,AACE,kBAAAoD;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA/G,4CAAAgH,WAAA,IAAA,/DAAMvE;IAANwE,aAAA,AAAAjH,4CAAAgH,WAAA,IAAA;IAAAE,aAAA,AAAAlH,4CAAAiH,WAAA,IAAA;YAAA,AAAAjH,4CAAAkH,WAAA,IAAA,nEAAUzE;SAAV,AAAAzC,4CAAAkH,WAAA,IAAA,hEAAYG;IAAZF,aAAA,AAAAnH,4CAAAiH,WAAA,IAAA;YAAA,AAAAjH,4CAAAmH,WAAA,IAAA,nEAAiB1E;SAAjB,AAAAzC,4CAAAmH,WAAA,IAAA,hEAAmBG;IAAnBF,aAAA,AAAApH,4CAAAgH,WAAA,IAAA;SAAA,AAAAhH,4CAAAoH,WAAA,IAAA,hEAAyBG;SAAzB,AAAAvH,4CAAAoH,WAAA,IAAA,hEAA4BI;AAA5B,AACE,OAACpF,kDAAE,AAACO,uDAAE,AAAAC,wDAAA,IAAA,KACA,AAACkC,uDAAE,AAACnC,uDAAEkE,GAAG,AAAChE,uDAAS0E,KAChB,AAAC5E,uDAAEmE,GAAG,AAACjE,uDAAS2E,OACtB,AAAC7E,uDAAEgB,EAAE,AAACmB,uDAAE,AAACnC,uDAAEkE,GAAGQ,IACN,AAAC1E,uDAAEmE,GAAGQ;;;AAErB,AAAA,AAEA;;;;8CAAA,9CAAMG,oGAGHZ,GAAGC,GAAGP,EAAE5C;AAHX,AAIE,OAAC+D,mHAAQ,AAACd,sCAASC,GAAGC,GAAGnD,GAChB,iBAAAgE,WAAM,AAACrB,4CAAeC;AAAtB,AAAA,gJAAAoB,2DAAAA,nMAACC,qEAAAA,+EAAAA;;;AAIZ,0CAAA,1CAAMC,4FAAYlE,EAAEZ,EAAEwD;AAAtB,AACE,kBAAAuB;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA9H,4CAAA+H,WAAA,IAAA,/DAAMtF;YAAN,AAAAzC,4CAAA+H,WAAA,IAAA,nEAAQjC;eAAR,AAAA9F,4CAAA+H,WAAA,IAAA,tEAAchC;AAAd,AACE,OAACjB,uDAAE,AAACnC,8DAAE,AAAAC,wDAAA,IAAA,KAAQG,oDAAE,AAACF,uDAAS,AAACF,uDAAE4D,EAAER,iBAC5B,AAACpD,8DAAEgB,EAAEZ,oDAAEwD,EAAE,AAACL,oDAAIJ;;;AAErB,oDAAA,pDAAMkC,gHAAsBzE;AAA5B,AACE,kBAAA0E;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAjI,4CAAAkI,WAAA,IAAA,/DAAMzF;YAAN,AAAAzC,4CAAAkI,WAAA,IAAA,nEAAQzF;WAAR,AAAAzC,4CAAAkI,WAAA,IAAA,lEAAU3I;AAAV,AACE,OAACoD,8DAAEpD,KAAKgE,oDAAEhE;;;AAEd,8CAAA,9CAAM4I,oGAAgBtB,GAAGC,GAAG9D;AAA5B,AACE,kBAAAoF;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAApI,4CAAAqI,WAAA,IAAA,/DAAM5F;IAAN6F,aAAA,AAAAtI,4CAAAqI,WAAA,IAAA;SAAA,AAAArI,4CAAAsI,WAAA,IAAA,hEAASE;SAAT,AAAAxI,4CAAAsI,WAAA,IAAA,hEAAYG;IAAZF,aAAA,AAAAvI,4CAAAqI,WAAA,IAAA;SAAA,AAAArI,4CAAAuI,WAAA,IAAA,hEAAiBhB;SAAjB,AAAAvH,4CAAAuI,WAAA,IAAA,hEAAoBf;AAApB,AACE,OAACpF,kDAAE,AAAC0C,uDAAE,AAACnC,8DAAE,AAAAC,wDAAA,IAAA,KAAQiE,qDAAG,AAAChE,uDAAS0E,UACxB,AAAC5E,8DAAE,AAAAC,wDAAA,IAAA,KAAQkE,qDAAG,AAACjE,uDAAS2E,WAC3B,CAACxE,kCAAAA,yCAAAA,TAAEwF,qBAAAA,lBAAGC,qBAAAA;;;AAIb,AAAA,kDAAA,0DAAA1K,5GAAM4K;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAzK,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gFAAA,hFAAMyK,2FACFC;AADJ,AAEG,uFAAA,hFAACC,8EAAmBD;;;AAFvB,CAAA,gFAAA,hFAAMD,2FAGFC,EAAEE;AAHN,AAIG,kBAAKxJ;AAAL,AACE,IAAMyJ,aAAW,AAACC,iEAAM1J;AAAxB,AACE,OAAC8C,yDAAE,iBAAA6G,WAAG,AAACvB,mHAAQ,iBAAAwB,eAAC,6HAAA,7HAACC;AAAF,AAAA,QAAAD,6CAAAA,gDAAAA,LAAaN,4BAAAA;KAAGG;AAA5B,AAAA,sIAAAE,sDAAAA,pLAACxH,gEAAAA,0EAAAA;KACD,AAACiG,mHAAQ,iBAAA0B,eAAC,6HAAA,7HAACD;AAAF,AAAA,QAAAC,6CAAAA,gDAAAA,LAAaR,4BAAAA;KAAGG,mEACzB,kBAAID,gBACF,AAAC1G,kDAAE,AAACsF,mHAAQ,iBAAA2B,eAAC,6HAAA,7HAACF;AAAF,AAAA,QAAAE,6CAAAA,6DAAAA,lBAAaP,yCAAAA;uBAD3B,lBAC2CC;;;;AATrD,CAAA,0EAAA,1EAAMJ;;AAAN,AAYA,AAAA,2DAAA,mEAAA5K,9HAAMwL;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAArL,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yFAAA,zFAAMqL,oGACFX;AADJ,AAEG,gGAAA,zFAACY,uFAAyBZ;;;AAF7B,CAAA,yFAAA,zFAAMW,oGAGFX,EAAEE;AAHN,AAIG,IAAMW,IAAE,iBAAAC,eAAC,6HAAA,7HAACP;AAAF,AAAA,QAAAO,6CAAAA,gDAAAA,LAAad,4BAAAA;;IACfe,IAAE,iBAAAC,eAAC,6HAAA,7HAACT;AAAF,AAAA,QAAAS,6CAAAA,gDAAAA,LAAahB,4BAAAA;;AADrB,AAEE,OAACiB,oCACA,iBAAAC,eAAC,6HAAA,7HAACX;AAAF,AAAA,QAAAW,6CAAAA,gDAAAA,LAAaL,4BAAAA;KACb,AAACrH,yDAAEuH,EACA,kBAAIb,gBACF,iBAAAiB,eAAC,6HAAA,7HAACZ;AAAF,AAAA,QAAAY,6CAAAA,6DAAAA,lBAAajB,yCAAAA;KADf,uDAGA,AAAChE,uDAAE,iBAAAkF,eAAC,6HAAA,7HAACb;AAAF,AAAA,QAAAa,6CAAAA,gDAAAA,LAAaP,4BAAAA;KACb,AAAC9G,uDAAE,iBAAAsH,eAAC,6HAAA,7HAACd;AAAF,AAAA,QAAAc,6CAAAA,gDAAAA,LAAaR,4BAAAA;KAAGvJ;;;AAb/B,CAAA,mFAAA,nFAAMqJ;;AAAN,AAiBA,iDAAA,jDAAMW,0GAAgB5K,EAAEoD;AAAxB,AACE,kBAAKrD;AAAL,AACE,IAAA8K,WAAS9K;IAAT+K,WAAW,CAAC9K,kCAAAA,qCAAAA,LAAED,iBAAAA;IAAdgL,WAAiB,CAAC3H,kCAAAA,qCAAAA,LAAErD,iBAAAA;AAApB,AAAA,sJAAA8K,SAAAC,SAAAC,8DAAAF,SAAAC,SAAAC,hPAAC3K,wEAAAA,oGAAAA;;;AAEL,AAAA;;;+DAAA,uEAAA3B,tIAAMwM;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2FAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2FAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAArM,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6FAAA,7FAAMqM,wGAEF3B;AAFJ,AAGG,oGAAA,7FAAC4B,2FAA6B5B;;;AAHjC,CAAA,6FAAA,7FAAM2B,wGAIF3B,EAAEE;AAJN,AAKG,IAAM2B,eAAa,AAACjB,uFAAyBZ,EAAEE;AAA/C,AACE,kBAAKzI;AAAL,AACE,qHAAA,9GAACc,kHACG,AAACjB,sCAASG,OACV,CAACoK,6CAAAA,oDAAAA,TAAapK,gCAAAA;;;;AATzB,CAAA,uFAAA,vFAAMkK;;AAAN,AAWA;;;;;;;sDAAA,tDAAMG,oHAMH9B;AANH,AAOE,oGAAA,7FAAC4B,2FAA6B5B;;AAEhC,8DAAA,9DAAM+B,oIAAgC/B;AAAtC,AACE,kBAAKtJ,EAAEoD;AAAP,AACE,IAAMqG,aAAW,AAACmB,+CAAe5K,EAAEoD;AAAnC,AACE,OAACN,kDAAE,CAACX,gEAAAA,4EAAAA,dAAEsH,wDAAAA,aACH,AAACrB,mHAAQ,AAAC8C,2FAA6B5B,GAC9BG;;;AAElB;;;AACE6B,oDACAD;AAIF,qDAAA,rDAAME,kHAAoBjC;AAA1B,AACE,IAAMa,IAAE,iBAAAqB,eAAC,6HAAA,7HAAC3B;AAAF,AAAA,QAAA2B,6CAAAA,gDAAAA,LAAalC,4BAAAA;;AAArB,AACE,OAACxG,kDAAE,AAACO,uDAAE8G,EAAEvJ,uCAAU0I;;AAKtB,yDAAA,zDAAMmC,0HAAwBnC;AAA9B,AACE,kBAAKtJ;AAAL,AACE,IAAA0L,WAAG,AAACtD,mHACA,AAACmD,mDAAmBjC,GACpB,AAACI,iEAAM1J;AAFX,AAAA,sIAAA0L,sDAAAA,pLAACvJ,gEAAAA,0EAAAA;;;AAIL,4CAAA,5CAAMwJ,gGAAclI;AAApB,AACE,kBAAAmI;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAlL,4CAAAmL,WAAA,IAAA,/DAAM1I;IAAN2I,aAAA,AAAApL,4CAAAmL,WAAA,IAAA;QAAA,AAAAnL,4CAAAoL,WAAA,IAAA,/DAASzG;YAAT,AAAA3E,4CAAAoL,WAAA,IAAA,nEAAWtF;IAAXuF,aAAA,AAAArL,4CAAAmL,WAAA,IAAA;WAAA,AAAAnL,4CAAAqL,WAAA,IAAA,lEAAmBzG;eAAnB,AAAA5E,4CAAAqL,WAAA,IAAA,tEAAwBtF;aAAxB,AAAA/F,4CAAAqL,WAAA,IAAA,pEAAiChG;AAAjC,AACE,OAAC1C,8DAAE,AAAAC,wDAAA,IAAA,KAAQG,oDACR,AAAC+B,8DAAE,AAACjC,uDAAS+B,MACV,AAAC/B,uDAAS,AAACF,uDAAEgC,EAAEoB,6DACf,AAAClD,uDAAS,AAACF,8DAAEgC,EAAE,AAACsB,oDAAIH,yDAAOT;;;AAErC,0CAAA,1CAAMiG,4FAAYvI,EAAEwI;AAApB,AACE,SAAA,uDAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAxL,4CAAAyL,WAAA,IAAA,/DAAchJ;IAAdiJ,aAAA,AAAA1L,4CAAAyL,WAAA,IAAA;QAAA,AAAAzL,4CAAA0L,WAAA,IAAA,/DAAiB/G;AAAjB,AACU,QAAC4G,mCAAAA,sCAAAA,LAAG5G,kBAAAA;;AADd,AAEE,OAACvC,kDAAE,AAAC6I,0CAAalI,GAAG4I;;AAExB,AAAA,iDAAA,yDAAA5N,1GAAM8N;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA3N,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+EAAA,/EAAM2N,0FACFjD,EAAEtJ,EAAEwM,GAAGC;AADX,AAEG,8FAAA,vFAACC,6EAAkBpD,EAAEtJ,EAAEwM,GAAGC;;;AAF7B,CAAA,+EAAA,/EAAMF,0FAGFjD,EAAEtJ,EAAEwM,GAAGC,GAAGE;AAHd,AAIG,OAACC,+EACC,AAACxE,mHAAQkB,EAAE,AAACI,iEAAM1J,SAAIwM,GAAGC,GAAGE;;;AALjC,CAAA,yEAAA,zEAAMJ;;AAAN,AAOA,mDAAA,nDAAMM,8GAAqBC,GAAG5D,GAAGrK;AAAjC,AACE,IAAMkO,WAAI,KAAA,JAAKlO;IACTmO,KAAI,AAAA1J,wDAAG,AAACR,kDAAEoG,GAAG4D,IAAIC;AADvB,AAEE,IAAAE,qBAAA,yEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAArO,cAAAmO;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAkjE+C,AAAA4G,sBAAAhH;IAljE/CK,qBAAA,AAAA9M,gBAAA6M;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,QAAA,AAAAI,eAAAL,gBAAAI,nCAAMS;AAAN,AAAA,AAAA,AAAAP,uBAAAJ,SACE,AAAChI,uDAAEsH,GAAG,AAACzJ,uDAAE8K,EAAEnB;;AADb,eAAA,CAAAU,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,+DAAA,AAAAC,qBAAAd;;AAAA,OAAAW,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAA9N,gBAAAwN,pBAAMiB;AAAN,AAAA,OAAAF,uIAAA,AAAAF,+DAAA,AAAAG,eAAAhB,tMACE,AAAC1H,uDAAEsH,GAAG,AAACzJ,uDAAE8K,EAAEnB;;;AADb;;;;GAAA,KAAA;;AAAA,AAAA,OAAAC,mBAAQ,8CAAA,9CAACmB,kDAAQrB;;AAGrB;;;;;;;;+DAAA,/DAAMsB,sIAOHC,GAAGC;AAPN,AAQE,OAACC,iCACA,AAACC,4CAAIC,iBAAOH,GAAGD;;AAElB;;;yCAAA,zCAAMK,0FAEHC,GAAG9K,GAAG0I,GAAGzI,GAAG8K;AAFf,AAGE,IAAMhQ,IAAE,AAAC4B,gBAAMoO;IACTC,KAAG,AAACjC,iDAAoB+B,GAAGpC,GAAG3N;AADpC,AAEE,oEAAA,AAAAkQ,cAAA,AAAAC,iDAAA,AAAAjQ,cAAA,AAAAkQ,sDAAA,KAAAC,eAAA,QAAA,KAAA,IAAA,4DAAA,KAAAA,eAAA,QAAA,KAAA,IAAA,gBAAA,AAAAH,cAAA,AAAAC,iDAAA,AAAAjQ,cAAA,AAAAkQ,sDAAA,KAAAC,eAAA,QAAA,KAAA,IAAA,4DAAA,KAAAA,eAAA,QAAA,KAAA,IAAA,/lBAACb,yNACGvK,mBAAK+K,8EAAI9K,wLACT6K,mBAAKE,8EAAItC;;AAEjB;;;sDAAA,tDAAM2C,oHAEHC,WAAWR,GAAG9K,GAAG0I,GAAGzI;AAFvB,AAGE,kBAAK8K;AAAL,AACE,IAAMQ,OAAK,AAACV,uCAAUC,GAAG9K,GAAG0I,GAAGzI,GAAG8K;AAAlC,AACE,0GAAA,2CAAA,6DAAA,3MAACnC,6EACA0C,WAAWC,KAAKT,GAAGpC;;;AAG1B,AAAA;;;;yCAAA,iDAAA/N,1FAAM6Q;AAAN,AAAA,IAAApQ,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAoQ,4EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAjQ;;;AAAA,AAAA,CAAA,8EAAA,oCAAAkQ,lHAAMD,yFAGHF,WAAWR,GAAG9K,GAAG0I,GAAGzI,GAAGlF;AAH1B,AAAA,IAAA2Q,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAA,AAAAE,4CAAAF,eAAA,rEAGsCU;AAHtC,AAIE,IAAMC,aAAc,AAACtD,iDAAoB/I,GAAGC,GAAGlF;IACzCuR,gBAAc,qOAAA,rOAACC,4FACA,AAAClB,oDAAuBC,WAAWR,GAAG9K,GAAG0I,GAAGzI,IAC5CoM,0HACUD;AAJ/B,AAKE,OAACvB,uCAAUC,GAAG9K,GAAG0I,GAAGzI,GAAGqM;;;AAT3B,CAAA,iEAAA,jEAAMd;;AAAN;AAAA,CAAA,2DAAA,WAAAK,tEAAML;AAAN,AAAA,IAAAM,WAAA,AAAAlQ,gBAAAiQ;IAAAA,eAAA,AAAAhQ,eAAAgQ;IAAAE,WAAA,AAAAnQ,gBAAAiQ;IAAAA,eAAA,AAAAhQ,eAAAgQ;IAAAG,WAAA,AAAApQ,gBAAAiQ;IAAAA,eAAA,AAAAhQ,eAAAgQ;IAAAI,WAAA,AAAArQ,gBAAAiQ;IAAAA,eAAA,AAAAhQ,eAAAgQ;IAAAK,WAAA,AAAAtQ,gBAAAiQ;IAAAA,eAAA,AAAAhQ,eAAAgQ;IAAAM,WAAA,AAAAvQ,gBAAAiQ;IAAAA,eAAA,AAAAhQ,eAAAgQ;AAAA,AAAA,IAAA7P,qBAAA;AAAA,AAAA,OAAAA,wDAAA8P,SAAAC,SAAAC,SAAAC,SAAAC,SAAAC,SAAAN;;;AAAA,AAcA;;;;;;;+CAAA,/CAAMW,sGAMHC;AANH,AAOE,IAAAC,aAAcD;SAAd,AAAA7P,4CAAA8P,WAAA,IAAA,hEAAO5B;SAAP,AAAAlO,4CAAA8P,WAAA,IAAA,hEAAU1M;IACJG,IAAE,AAACxD,gBAAM8P;AADf,AAEE,kBAAKxQ;AAAL,AACE,IAAM0Q,KAAG,AAAC3N,kDAAE/C,EAAE6O;AAAd,AACE,QAAA,JAAO/P;IAAI6R,MAAI5M;IAAG6M,gCAASF;;AAA3B,AACE,GAAI,AAACG,6CAAE/R,EAAEoF;AACPyM;;AACA,eAAO,KAAA,JAAK7R;eACL,AAAC2G,uDAAEkL,IAAI,AAACrN,uDAAE,AAAC3C,4CAAI6P,OAAO1R,GAAG8R;eACzB,AAAArN,wDAAG,AAACD,uDAAEsN,8BAASF,IAAI5R;;;;;;;;;;AAEtC,yCAAA,zCAAMgS,0FAAWC;AAAjB,AACE,kBAAKvQ;AAAL,AACE,IAAAwQ,WAA6B,AAACrR,gBAAMa;IAApCyQ,eAAC,iBAAAC,WAAG,AAACX,6CAAgB/P;AAApB,AAAA,0EAAA0Q,wBAAAA,1FAACH,kCAAAA,4CAAAA;;AAAF,AAAA,QAAAE,6CAAAA,2CAAAD,YAAAC,uBAAAD;;;AAIJ,4CAAA,5CAAMG,gGAAc7G;AAApB,AACE,iEAAStJ;AAAT,AACE,IAAMlC,IAAE,AAAC4B,gBAAMM;AAAf,AACE,iBAAA,uEAAqBf;AAArB,AACU,IAAAmR,WAAG,AAAC/I,mHAAUiC,EAAE,AAACX,iEAAM1J,EAAE,KAAA,JAAKnB;AAA9B,AAAA,sIAAAsS,sDAAAA,pLAAChP,gEAAAA,0EAAAA;;AADX,AAEE,OAAC,AAAC0O,uCAAUO,YAAYrQ;;;AAEhC,AAAKsQ,kCAAG,yGAAA,AAAA,zGAACC,+DAAgBJ;AAEzB,kDAAA,lDAAOK,4GAAoBhR;AAA3B,AACE,OAACiR,6BAAM,AAACC,cAAI,AAACC,yCAAoBnR;;AAEnC,uDAAA,vDAAMoR,sHAAyBrI;AAA/B,AACE,OAACxG,kDAAE,iBAAA8O,WAAI,iBAAAC,eAAC,6HAAA,7HAAChI;AAAF,AAAA,QAAAgI,6CAAAA,gDAAAA,LAAavI,4BAAAA;;AAAjB,AAAA,sIAAAsI,sDAAAA,pLAACP,gEAAAA,0EAAAA;KACD,AAACjJ,mHAAQ,iBAAA0J,eAAC,6HAAA,7HAACjI;AAAF,AAAA,QAAAiI,6CAAAA,gDAAAA,LAAaxI,4BAAAA;KAAGiI;;AAE9B;;;AACEQ,kCACAJ;AAEF;;;AACEK,2DACAL;AAEF,8CAAA,9CAAMM,oGAAgB7C;AAAtB,AACE,kBAAKrO;AAAL,AACE,IAAM0C,IAAE,AAAChD,gBAAMM;AAAf,AACE,GAAQ,EAAK,KAAA,JAAG0C,cAAK,AAACyO,sBAAMzO;AAA5B;AAAA,AAAA,MAAA,KAAA7E,MAAA,CAAA,kBAAA,8CAAA,KAAA;;;AAEA,SAAA,2DAAauP,EAAEpN;AAAf,AACU,GAAI,OAAA,NAAOoN;AAAX;;AAEE,OAACrL,kDAAE,iBAAAqP,eAAC,iBAAAC,WACC,iBAAAG,eAAC,AAAC1I,6HAAQsE;AAAV,AAAA,QAAAoE,6CAAAA,yDAAAA,dAAanD,qCAAAA;;IADdiD,eAAC,AAACC,qDAAOjB,gCAAG,KAAA,JAAKlD;AAAjB,AAAA,QAAAkE,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAAD,AAAA,QAAAD,6CAAAA,wDAAAA,bAECpR,oCAAAA;KACD,AAACyR,iDAAG,KAAA,JAAKrE,SAAG,AAACoD,gDAAmBxQ;;;AAN/C,AAOE,OAACyR,GAAG,iBAAA,jBAACC,eAAKhP,OAAK1C;;;AAIvB;;;;;;;uCAAA,vCAAMuH,sFAMH+B;AANH,AAOE,0DAAO9J;AAAP,AACE,IAAM1B,IAAE,AAAC4B,gBAAMF;IACTmS,QAAM,WAAKC;AAAL,AACE,IAAM3S,IAAE,AAACoI,mHAAQiC,EAAE,AAACX,iEAAMiJ;AAA1B,AACE,OAACjJ,iEAAM1J,EAAEnB;;AAHzB,AAIE,OAAC,AAACgS,uCAAU6B,OAAOnS;;;AAIzB,qDAAA,6DAAAqS,lHAAME;AAAN,AAAA,IAAAD,aAAAD;QAAA,AAAAlS,4CAAAmS,WAAA,IAAA,/DAA2BxL;QAA3B,AAAA3G,4CAAAmS,WAAA,IAAA,/DAA6BpO;AAA7B,AACE,IAAMY,IAAE,AAAC0N,qDACA,AAACvN,uDAAE,AAACjC,uDAAS8D,GACV,AAAC9D,uDAASkB;IAChBuO,MAAI,AAACC,qDAAOxO,EAAE4C;AAHpB,AAIE,OAACxF,8GAAGwD,EAAE2N;;AAEV,uCAAA,vCAAME,sFAAMC;AAAZ,AACE,OAACL,mDACA,AAACnS,wCAAWwS;;AAEf,qDAAA,6DAAAC,lHAAME;AAAN,AAAA,IAAAD,aAAAD;QAAA,AAAA1S,4CAAA2S,WAAA,IAAA,/DAA2BhO;UAA3B,AAAA3E,4CAAA2S,WAAA,IAAA,jEAA6BL;AAA7B,AACE,IAAM3L,IAAE,AAAChE,uDAAEgC,EAAE,AAACuB,oDAAIoM;IACZvO,IAAE,AAACpB,uDAAEgC,EAAE,AAACsB,oDAAIqM;AADlB,AAEE,OAACnR,8GAAGwF,EAAE5C;;AAEV;;;uCAAA,vCAAM8O,sFAEHJ;AAFH,AAGE,OAACG,mDACA,AAAC3S,wCAAWwS;;AAIf,yDAAA,iEAAAK,1HAAME;AAAN,AAAA,IAAAD,aAAAD;QAAA,AAAA9S,4CAAA+S,WAAA,IAAA,/DAA+BpO;YAA/B,AAAA3E,4CAAA+S,WAAA,IAAA,nEAAiCjN;UAAjC,AAAA9F,4CAAA+S,WAAA,IAAA,jEAAuCT;AAAvC,AACE,IAAM3L,IAAE,AAAChE,8DAAEgC,EAAE,AAACsB,oDAAIH,yDAAO,AAACI,oDAAIoM;IACxBvO,IAAE,AAACpB,8DAAEgC,EAAE,AAACsB,oDAAIH,yDAAO,AAACG,oDAAIqM;IACxBW,IAAE,AAACtQ,uDAAEgC,EAAE,AAACuB,oDAAIJ;AAFlB,AAGE,QAACrI,8EAAAA,qFAAAA,TAAiBkJ,iEAAAA,/DAAE5C,iEAAAA,/DAAEkP,iEAAAA;;AAE1B;;;uCAAA,vCAAMC,sFAEHrT;AAFH,AAGE,OAACmT,uDACA,AAAC/S,wCAAWJ;;AAEf,yDAAA,iEAAAsT,1HAAME;AAAN,AAAA,IAAAD,aAAAD;QAAA,AAAAnT,4CAAAoT,WAAA,IAAA,/DAA+BzM;QAA/B,AAAA3G,4CAAAoT,WAAA,IAAA,/DAAiCrP;QAAjC,AAAA/D,4CAAAoT,WAAA,IAAA,/DAAmCH;AAAnC,AACE,IAAMtO,IAAE,AAAC0N,qDAAO,AAACvN,8DAAE,AAACjC,uDAAS8D,GACV,AAAC9D,uDAASkB,qDACV,AAAClB,uDAASoQ;IACvBnN,QAAM,AAACwN,qDAAO,AAAA1Q,wDAAGqQ,EAAEtO;IACnB2N,MAAI,AAACC,qDAAOxO,EAAE4C;AAJpB,AAKE,QAAClJ,8EAAAA,2FAAAA,fAAiBkH,uEAAAA,rEAAEmB,uEAAAA,jEAAMwM,uEAAAA;;AAE9B,uCAAA,vCAAMiB,sFAAM1T;AAAZ,AACE,OAACwT,uDACA,AAACpT,wCAAWJ","names":["sicmutils.mechanics.lagrange/coordinate-tuple","sicmutils.structure/up","sicmutils.mechanics.lagrange/velocity-tuple","sicmutils.mechanics.lagrange/acceleration-tuple","sicmutils.mechanics.lagrange/momentum-tuple","sicmutils.structure/down","var_args","G__82268","sicmutils.mechanics.lagrange/Lagrangian","js/Error","n","r__20948__auto__","cljs.core/seq","or__4253__auto__","pattern.consequence/succeed","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.mechanics.lagrange/->L-state","seq82269","G__82270","cljs.core/first","cljs.core/next","G__82271","G__82272","self__4851__auto__","t","q","qdot","derivs","cljs.core.apply","sicmutils.mechanics.lagrange/->local","sicmutils.mechanics.lagrange/->state","sicmutils.mechanics.lagrange/time","local","sicmutils.structure/up?","cljs.core/count","cljs.core.nth","sicmutils.mechanics.lagrange/coordinate","sicmutils.mechanics.lagrange/velocity","sicmutils.mechanics.lagrange/acceleration","sicmutils.mechanics.lagrange/state->n-dof","state","sicmutils.structure/structure?","sicmutils.mechanics.lagrange/state->t","sicmutils.mechanics.lagrange/state->q","sicmutils.mechanics.lagrange/state->qdot","sicmutils.mechanics.lagrange/state->qddot","sicmutils.mechanics.lagrange/coordinates","sicmutils.mechanics.lagrange/velocities","sicmutils.mechanics.lagrange/accelerations","sicmutils.mechanics.lagrange/Q","sicmutils.mechanics.lagrange/Qdot","sicmutils.mechanics.lagrange/Qdotdot","sicmutils.mechanics.lagrange/literal-Lagrangian-state","n-dof","sicmutils.structure.up","cljs.core.gensym","sicmutils.structure/literal-up","G__82288","sicmutils.mechanics.lagrange/Gamma","Dq","sicmutils.calculus.derivative/D","sicmutils.function$.with_arity","Dqs","cljs.core.take","cljs.core/iterate","cljs.core.into","cljs.core/identity","sicmutils.mechanics.lagrange/path->state-path","sicmutils.mechanics.lagrange/make-Lagrangian","kinetic-energy","potential-energy","sicmutils.generic._","sicmutils.mechanics.lagrange/L-free-particle","mass","p__82295","vec__82296","_","v","sicmutils.generic._STAR_","sicmutils.generic._SLASH_","sicmutils.generic/square","sicmutils.mechanics.lagrange/L-rectangular","m","V","p__82302","vec__82303","vec__82306","q0","q1","sicmutils.mechanics.lagrange/L-harmonic","k","p__82311","vec__82312","sicmutils.mechanics.lagrange/L-uniform-acceleration","g","p__82316","vec__82318","vec__82321","y","sicmutils.mechanics.lagrange/L-central-rectangular","U","p__82326","vec__82328","G__82334","sicmutils.generic/abs","sicmutils.mechanics.lagrange/L-central-polar","p__82336","vec__82338","vec__82341","vec__82344","r","rdot","\u03c6dot","sicmutils.generic._PLUS_","sicmutils.mechanics.lagrange/L-Kepler-polar","GM","p__82347","vec__82348","vec__82351","vec__82354","phidot","sicmutils.mechanics.lagrange/L-axisymmetric-top","A","C","gMR","p__82365","vec__82366","vec__82369","vec__82372","theta","thetadot","psidot","sicmutils.generic/sin","sicmutils.generic/cos","sicmutils.mechanics.lagrange/L-coupled-harmonic","p__82393","vec__82394","sicmutils.mechanics.lagrange/F-sliding-pend","l","p__82401","vec__82403","vec__82406","x","sicmutils.mechanics.lagrange/two-free","m1","m2","p__82414","vec__82415","vec__82418","vec__82421","vec__82424","vec__82427","h1","h2","v1","v2","sicmutils.mechanics.lagrange/L-sliding-pend","sicmutils.function$.compose","G__82434","sicmutils.mechanics.lagrange/F->C","sicmutils.mechanics.lagrange/L-pendulum","p__82435","vec__82436","sicmutils.mechanics.lagrange/Rayleigh-dissipation","p__82440","vec__82442","sicmutils.mechanics.lagrange/L-two-particle","p__82445","vec__82446","vec__82449","vec__82452","x1","x2","G__82458","sicmutils.mechanics.lagrange/Lagrange-equations","L","sicmutils.mechanics.lagrange.Lagrange_equations","dissipation-fn","state-path","sicmutils.mechanics.lagrange.Gamma","G__82462","fexpr__82463","sicmutils.calculus.derivative.partial","fexpr__82464","fexpr__82465","G__82467","sicmutils.mechanics.lagrange/Lagrangian->acceleration","sicmutils.mechanics.lagrange.Lagrangian__GT_acceleration","P","fexpr__82469","F","fexpr__82470","sicmutils.generic/solve-linear-left","fexpr__82471","fexpr__82472","fexpr__82473","fexpr__82475","sicmutils.mechanics.lagrange/qv->local-path","G__82476","G__82477","G__82478","G__82480","sicmutils.mechanics.lagrange/Lagrangian->state-derivative","sicmutils.mechanics.lagrange.Lagrangian__GT_state_derivative","acceleration","sicmutils.mechanics.lagrange/local-state-derivative","sicmutils.mechanics.lagrange/Lagrange-equations-first-order","sicmutils.mechanics.lagrange/Lagrange-equations-1","sicmutils.mechanics.lagrange/Lagrangian->energy","fexpr__82481","sicmutils.mechanics.lagrange/Lagrangian->power-loss","G__82482","sicmutils.mechanics.lagrange/T3-spherical","p__82483","vec__82484","vec__82487","vec__82490","sicmutils.mechanics.lagrange/L3-central","Vr","p__82500","vec__82501","vec__82504","Vs","G__82508","sicmutils.mechanics.lagrange/Lagrangian-action","t1","t2","sicmutils.mechanics.lagrange.Lagrangian_action","integration-opts","sicmutils.numerical.quadrature.definite_integral","sicmutils.mechanics.lagrange/linear-interpolants","x0","n+1","dx","iter__4652__auto__","s__82510","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__82512","cljs.core/chunk-buffer","i__82511","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__82509","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","i","cljs.core.range","sicmutils.mechanics.lagrange/Lagrange-interpolation-function","ys","xs","sicmutils.polynomial/from-points","cljs.core.map","cljs.core/vector","sicmutils.mechanics.lagrange/make-path","t0","qs","ts","cljs.core/vec","cljs.core.sequence","cljs.core.concat","cljs.core/List","sicmutils.mechanics.lagrange/parametric-path-action","Lagrangian","path","sicmutils.mechanics.lagrange/find-path","p__82520","map__82521","cljs.core/--destructure-map","cljs.core.get","seq82513","G__82514","G__82515","G__82516","G__82517","G__82518","G__82519","observe","initial-qs","minimizing-qs","sicmutils.numerical.minimize.multidimensional_minimize","sicmutils.mechanics.lagrange/osculating-path","state0","vec__82522","dt","sum","dt**n:n!","cljs.core._EQ_","sicmutils.mechanics.lagrange/Gamma-bar","f","G__82527","fexpr__82526","G__82528","sicmutils.mechanics.lagrange/Dt-procedure","G__82530","DF-on-path","sicmutils.mechanics.lagrange/Dt","sicmutils.operator.make_operator","sicmutils.mechanics.lagrange/trim-last-argument","sicmutils.structure/up*","cljs.core/pop","sicmutils.structure/structure->vector","sicmutils.mechanics.lagrange/Euler-Lagrange-operator","G__82531","fexpr__82532","fexpr__82533","sicmutils.mechanics.lagrange/LE","sicmutils.mechanics.lagrange/Lagrange-equations-operator","sicmutils.mechanics.lagrange/generalized-LE","cljs.core/even?","fexpr__82544","G__82546","fexpr__82545","sicmutils.generic/expt","fexpr__82547","lp","cljs.core/quot","f-bar","q-prime","p__82548","vec__82549","sicmutils.mechanics.lagrange/rectangular->polar","sicmutils.generic/sqrt","phi","sicmutils.generic/atan","sicmutils.mechanics.lagrange/r->p","tqv","p__82552","vec__82553","sicmutils.mechanics.lagrange/polar->rectangular","sicmutils.mechanics.lagrange/p->r","p__82556","vec__82557","sicmutils.mechanics.lagrange/spherical->rectangular","z","sicmutils.mechanics.lagrange/s->r","p__82560","vec__82561","sicmutils.mechanics.lagrange/rectangular->spherical","sicmutils.generic/acos","sicmutils.mechanics.lagrange/r->s","cljs.core/chunk-first"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.mechanics.lagrange\n  (:refer-clojure :exclude [+ - * / partial time])\n  (:require [pattern.rule :as r :include-macros true]\n            [sicmutils.calculus.derivative :refer [D partial]]\n            [sicmutils.function :as f :refer [compose]]\n            [sicmutils.generic :as g :refer [cos sin + - * /]]\n            [sicmutils.numerical.minimize :as m]\n            [sicmutils.numerical.quadrature :as q]\n            [sicmutils.operator :as o]\n            [sicmutils.polynomial :as p]\n            [sicmutils.structure :as s :refer [down up up?]]))\n\n;; ## Variational Mechanics\n\n(def coordinate-tuple up)\n(def velocity-tuple up)\n(def acceleration-tuple up)\n(def momentum-tuple down)\n\n;; Lagrangian mechanics requires a configuration space Q, and a function\n;;   L:RxQxQ' --> R\n;;\n;; Mechanical systems have state at each instant. The state is the information\n;; required, along with the equations of motion, to determine the future of the\n;; system.\n;;\n;; At every instant a system has a kinematic state, which has the time, the\n;; configuration, and the rate of change of the configuration. Lagrangian\n;; mechanics is formulated in terms of the kinematic state.\n;;\n;; Kinematic states and their derivatives are represented as Scheme vectors,\n;; with components time, configuration, and derivatives.\n\n(defn Lagrangian\n  \"Returns a function signature for a Lagrangian with n degrees of freedom (or an\n  unrestricted number if n is not given).\n\n  Useful for constructing Lagrangian literal functions.\"\n  ([] '(-> (UP Real (UP* Real) (UP* Real)) Real))\n  ([n]\n   (r/template\n    (-> (UP Real (UP* Real ~n) (UP* Real ~n)) Real))))\n\n(defn ->L-state\n  \"Given a time `t`, coordinate tuple (or scalar) `q`, velocity tuple (or scalar)\n  `qdot` and any number of additional higher-order derivative tuples (or\n  scalars), returns a 'Local tuple', ie, the state expected by a Lagrangian.\"\n  [t q qdot & derivs]\n  (apply up t q qdot derivs))\n\n(def ^{:doc \"Alias for [[->L-state]].\"}\n  ->local ->L-state)\n\n(def ^{:doc \"Alias for [[->L-state]].\"}\n  ->state ->L-state)\n\n;; ### Local Tuple Selectors\n\n(defn time\n  \"Extract the time slot from a state tuple.\n\n  See [[coordinate]] for more detail.\"\n  [local]\n  {:pre [(up? local) (> (count local) 0)]}\n  (nth local 0))\n\n(defn coordinate\n  \"A convenience function on local tuples. A local tuple describes\n  the state of a system at a particular time:\n\n  ```\n  [t, q, D q, D^2 q]\n  ```\n\n  representing time, position, velocity (and optionally acceleration etc.)\n\n  [[coordinate]] returns the `q` element, which is expected to be a mapping from\n  time to a structure of coordinates.\"\n  [local]\n  {:pre [(up? local) (> (count local) 1)]}\n  (nth local 1))\n\n(defn velocity\n  \"Returns the velocity element of a local tuple (by convention, the third\n  element).\n\n  See [[coordinate]] for more detail.\"\n  [local]\n  {:pre [(up? local) (> (count local) 2)]}\n  (nth local 2))\n\n(defn acceleration\n  \"Returns the acceleration element of a local tuple (by convention, the fourth\n  element).\n\n  See [[coordinate]] for more detail.\"\n  [local]\n  {:pre [(up? local) (> (count local) 3)]}\n  (nth local 3))\n\n(defn state->n-dof [state]\n  {:pre [(s/structure? state)]}\n  (let [q (nth state 1)]\n    (if (up? q)\n      (count q)\n      1)))\n\n;; Aliases for the selectors above, included for parity with scmutils:\n\n(def ^{:doc \"Alias for [[time]].\"}\n  state->t time)\n\n(def ^{:doc \"Alias for [[coordinate]].\"}\n  state->q coordinate)\n\n(def ^{:doc \"Alias for [[velocity]].\"}\n  state->qdot velocity)\n\n(def ^{:doc \"Alias for [[acceleration]].\"}\n  state->qddot acceleration)\n\n(def ^{:doc \"Alias for [[coordinate]].\"}\n  coordinates coordinate)\n\n(def ^{:doc \"Alias for [[velocity]].\"}\n  velocities velocity)\n\n(def ^{:doc \"Alias for [[acceleration]].\"}\n  accelerations acceleration)\n\n(def ^{:doc \"Alias for [[coordinate]].\"}\n  Q coordinate)\n\n(def ^{:doc \"Alias for [[velocity]].\"}\n  Qdot velocity)\n\n(def ^{:doc \"Alias for [[acceleration]].\"}\n  Qdotdot acceleration)\n\n(defn literal-Lagrangian-state [n-dof]\n  (up (gensym 't)\n      (s/literal-up (gensym 'x) n-dof)\n      (s/literal-up (gensym 'v) n-dof)))\n\n;; ## Chapter 1\n;;\n;; Paths in the configuration manifold are functions that give a configuration\n;; for each time. From such a path we can construct a path in the kinematic\n;; state space. If such a path is described in terms of generalized coordinates,\n;; we have\n\n(defn Gamma\n  \"Gamma takes a path function (from time to coordinates) to a state\n  function (from time to local tuple).\"\n  ([q]\n   (let [Dq (D q)]\n     (-> (fn [t]\n           (up t (q t) (Dq t)))\n         (f/with-arity [:exactly 1]))))\n  ([q n]\n   {:pre [(> n 1)]}\n   (let [Dqs   (take (dec n) (iterate D q))\n         local (into (up identity) Dqs)]\n     (-> (fn [t] (local t))\n         (f/with-arity [:exactly 1])))))\n\n(def path->state-path Gamma)\n\n;; ### Lagrangians\n;;\n;; A Lagrangian is an example of an L-function.\n;; An L-function takes  a scalar argument and 2 vector arguments\n;; (t, q, q-dot).  An L-function produces a scalar result.\n\n(defn make-Lagrangian [kinetic-energy potential-energy]\n  (- kinetic-energy potential-energy))\n\n;; ## Library of Lagrangians\n;;\n;; These should arguably live in their own place.\n\n(defn L-free-particle\n  \"The lagrangian of a free particle of mass m. The Lagrangian\n  returned is a function of the local tuple. Since the particle\n  is free, there is no potential energy, so the Lagrangian is\n  just the kinetic energy.\"\n  [mass]\n  (fn [[_ _ v]]\n    (* (/ 1 2) mass (g/square v))))\n\n(defn L-rectangular\n  \"Lagrangian for a point mass on with the potential energy V(x, y)\"\n  [m V]\n  (fn [[_ [q0 q1] qdot]]\n    (- (* (/ 1 2) m (g/square qdot))\n       (V q0 q1))))\n\n(defn L-harmonic\n  \"The Lagrangian of a simple harmonic oscillator (mass-spring\n  system). m is the mass and k is the spring constant used in\n  Hooke's law. The resulting Lagrangian is a function of the\n  local tuple of the system.\"\n  [m k]\n  (fn [[_ q v]]\n    (- (* (/ 1 2) m (g/square v)) (* (/ 1 2) k (g/square q)))))\n\n(defn L-uniform-acceleration\n  \"The Lagrangian of an object experiencing uniform acceleration\n  in the negative y direction, i.e. the acceleration due to gravity\"\n  [m g]\n  (fn [[_ [_ y] v]]\n    (- (* (/ 1 2) m (g/square v)) (* m g y))))\n\n(defn L-central-rectangular [m U]\n  (fn [[_ q v]]\n    (- (* (/ 1 2) m (g/square v))\n       (U (g/abs q)))))\n\n(defn L-central-polar\n  \"Consider planar motion in a central force field, with an arbitrary potential,\n  `U`, depending only on the radius. The generalized coordinates are polar.\"\n  [m U]\n  (fn [[_ [r] [rdot \u03c6dot]]]\n    (- (* (/ 1 2) m\n          (+ (g/square rdot)\n             (g/square (* r \u03c6dot))))\n       (U r))))\n\n(defn L-Kepler-polar [GM m]\n  (fn [[_ [r] [rdot phidot]]]\n    (+ (* (/ 1 2) m\n          (+ (g/square rdot)\n             (g/square (* r phidot))) )\n       (/ (* GM m) r))))\n\n(defn L-axisymmetric-top [A C gMR]\n  (fn [[_ [theta] [thetadot phidot psidot]]]\n    (+ (* (/ 1 2) A\n          (+ (g/square thetadot)\n             (g/square (* phidot (sin theta)))))\n       (* (/ 1 2) C\n          (g/square (+ psidot (* phidot (cos theta)))))\n       (* -1 gMR (cos theta)))))\n\n;; Coupled harmonic oscillators.\n\n(defn L-coupled-harmonic [m k]\n  (fn [[_ q qdot]]\n    (- (* (/ 1 2) qdot m qdot)\n       (* (/ 1 2) q k q))))\n\n(defn ^:no-doc F-sliding-pend [l]\n  (fn [[_ [x theta]]]\n    (up (up x 0)\n        (up (+ x (* l (sin theta)))\n            (* -1 l (cos theta))))))\n\n(defn ^:no-doc two-free [m1 m2 g]\n  (fn [[_ [[_ h1] [_ h2]] [v1 v2]]]\n    (- (* (/ 1 2)\n          (+ (* m1 (g/square v1))\n             (* m2 (g/square v2))))\n       (* g (+ (* m1 h1)\n               (* m2 h2))))))\n\n(declare F->C)\n\n(defn L-sliding-pend\n  \"Pendulum of mass m2 and length b, hanging from a support of mass m1 that is\n  free to move horizontally (from Groesberg, Advanced Mechanics, p. 72)\"\n  [m1 m2 l g]\n  (compose (two-free m1 m2 g)\n           (F->C (F-sliding-pend l))))\n\n;; Consider a simple pendulum with Rayleigh dissipation:\n\n(defn L-pendulum [g m l]\n  (fn [[_ theta thetadot]]\n    (+ (* (/ 1 2) m (g/square (* l thetadot)))\n       (* g m l (cos theta)))))\n\n(defn Rayleigh-dissipation [k]\n  (fn [[_ _ qdot]]\n    (* qdot k qdot)))\n\n(defn L-two-particle [m1 m2 V]\n  (fn [[_ [x1 x2] [v1 v2]]]\n    (- (+ (* (/ 1 2) m1 (g/square v1))\n          (* (/ 1 2) m2 (g/square v2)))\n       (V x1 x2))))\n\n;; Given a Lagrangian, we can obtain Lagrange's equations of motion.\n\n(defn Lagrange-equations\n  ([L]\n   (Lagrange-equations L nil))\n  ([L dissipation-fn]\n   (fn [q]\n     (let [state-path (Gamma q)]\n       (- (D (compose ((partial 2) L) state-path))\n          (compose ((partial 1) L) state-path)\n          (if dissipation-fn\n            (- (compose ((partial 2) dissipation-fn) state-path))\n            0))))))\n\n(defn Lagrangian->acceleration\n  ([L]\n   (Lagrangian->acceleration L nil))\n  ([L dissipation-fn]\n   (let [P ((partial 2) L)\n         F ((partial 1) L)]\n     (g/solve-linear-left\n      ((partial 2) P)\n      (- F\n         (if dissipation-fn\n           ((partial 2) dissipation-fn)\n           0)\n         (+ ((partial 0) P)\n            (* ((partial 1) P) velocity)))))))\n\n;; ### Lagrange equations in first-order form\n\n(defn qv->local-path [q v]\n  (fn [t]\n    (->local t (q t) (v t))))\n\n(defn Lagrangian->state-derivative\n  \"Optionally takes a dissipation function.\"\n  ([L]\n   (Lagrangian->state-derivative L nil))\n  ([L dissipation-fn]\n   (let [acceleration (Lagrangian->acceleration L dissipation-fn)]\n     (fn [state]\n       (up 1\n           (velocity state)\n           (acceleration state))))))\n\n(defn local-state-derivative\n  \"The state derivative of a Lagrangian is a function carrying a state tuple to\n  its time derivative.\n\n  Alias for the non-dissipative, single-arity version\n  of [[Lagrangian->state-derivative]].\"\n  [L]\n  (Lagrangian->state-derivative L nil))\n\n(defn Lagrange-equations-first-order [L]\n  (fn [q v]\n    (let [state-path (qv->local-path q v)]\n      (- (D state-path)\n         (compose (Lagrangian->state-derivative L)\n                  state-path)))))\n\n(def ^{:doc \"Alias for [[Lagrange-equations-first-order]].\"}\n  Lagrange-equations-1\n  Lagrange-equations-first-order)\n\n;; Given a Lagrangian, we can make an energy function on (t, Q, Qdot).\n\n(defn Lagrangian->energy [L]\n  (let [P ((partial 2) L)]\n    (- (* P velocity) L)))\n\n;; On a trajectory there may be power lost (if dissipation) The following\n;;  produces the power lost.\n\n(defn Lagrangian->power-loss [L]\n  (fn [q]\n    (D (compose\n        (Lagrangian->energy L)\n        (Gamma q)))))\n\n(defn T3-spherical [m]\n  (fn [[_ [r theta] [rdot thetadot phidot]]]\n    (* (/ 1 2) m\n       (+ (g/square rdot)\n          (g/square (* r thetadot))\n          (g/square (* r (sin theta) phidot))))))\n\n(defn L3-central [m Vr]\n  (letfn [(Vs [[_ [r]]]\n            (Vr r))]\n    (- (T3-spherical m) Vs)))\n\n(defn Lagrangian-action\n  ([L q t1 t2]\n   (Lagrangian-action L q t1 t2 {}))\n  ([L q t1 t2 integration-opts]\n   (q/definite-integral\n     (compose L (Gamma q)) t1 t2 integration-opts)))\n\n(defn linear-interpolants [x0 x1 n]\n  (let [n+1 (inc n)\n        dx  (/ (- x1 x0) n+1)]\n    (for [i (range 1 n+1)]\n      (+ x0 (* i dx)))))\n\n(defn Lagrange-interpolation-function\n  \"Given `ys` (a sequence of function values) and `xs` (an equal-length sequence\n  of function inputs), returns a [[sicmutils.polynomial/Polynomial]] instance\n  guaranteed to pass through all supplied `xs` and `ys`.\n\n  The contract for inputs is that `(map vector xs ys)` should return a sequence\n  of pairs of points.\"\n  [ys xs]\n  (p/from-points\n   (map vector xs ys)))\n\n(defn make-path\n  \"SICM p. 23n\"\n  [t0 q0 t1 q1 qs]\n  (let [n (count qs)\n        ts (linear-interpolants t0 t1 n)]\n    (Lagrange-interpolation-function\n     `[~q0 ~@qs ~q1]\n     `[~t0 ~@ts ~t1])))\n\n(defn parametric-path-action\n  \"SICM p. 23\"\n  [Lagrangian t0 q0 t1 q1]\n  (fn [qs]\n    (let [path (make-path t0 q0 t1 q1 qs)]\n      (Lagrangian-action\n       Lagrangian path t0 t1\n       {:compile? false}))))\n\n(defn find-path\n  \"SICM p. 23. The optional parameter values is a callback which will report\n  intermediate points of the minimization.\"\n  [Lagrangian t0 q0 t1 q1 n & {:keys [observe]}]\n  (let [initial-qs    (linear-interpolants q0 q1 n)\n        minimizing-qs (m/multidimensional-minimize\n                       (parametric-path-action Lagrangian t0 q0 t1 q1)\n                       initial-qs\n                       :callback observe)]\n    (make-path t0 q0 t1 q1 minimizing-qs)))\n\n;; An alternative method allows taking derivatives in the construction of the\n;; Lagrangian.\n\n(defn osculating-path\n  \"Given a state tuple (of finite length), reconstitutes the initial segment of\n  the Taylor series corresponding to the state tuple data as a function of t.\n\n  Time is measured beginning at the point of time specified in the input state\n  tuple.\"\n  [state0]\n  (let [[t0 q0] state0\n        k (count state0)]\n    (fn [t]\n      (let [dt (- t t0)]\n        (loop [n 2 sum q0 dt**n:n! dt]\n          (if (= n k)\n            sum\n            (recur (inc n)\n                   (+ sum (* (nth state0 n) dt**n:n!))\n                   (/ (* dt**n:n! dt) n))))))))\n\n(defn Gamma-bar [f]\n  (fn [local]\n    ((f (osculating-path local)) (first local))))\n\n;; ### \"Total Time Derivative\"\n\n(defn Dt-procedure [F]\n  (fn DtF [state]\n    (let [n (count state)]\n      (letfn [(DF-on-path [q]\n                (D (f/compose F (Gamma q (dec n)))))]\n        ((Gamma-bar DF-on-path) state)))))\n\n(def Dt (o/make-operator Dt-procedure 'Dt))\n\n(defn- trim-last-argument [local]\n  (s/up* (pop (s/structure->vector local))))\n\n(defn Euler-Lagrange-operator [L]\n  (- (Dt ((partial 2) L))\n     (compose ((partial 1) L) trim-last-argument)))\n\n(def ^{:doc \"Alias for [[Euler-lagrange-operator]].\"}\n  LE\n  Euler-Lagrange-operator)\n\n(def ^{:doc \"Alias for [[Euler-lagrange-operator]].\"}\n  Lagrange-equations-operator\n  Euler-Lagrange-operator)\n\n(defn generalized-LE [Lagrangian]\n  (fn [state]\n    (let [m (count state)]\n      (assert (and (> m 3) (even? m))\n              \"Incorrect state size for Lagrange Equations\")\n      (letfn [(lp [i state]\n                (if (zero? i)\n                  0\n                  (- (((g/expt Dt (dec i))\n                       ((partial i) Lagrangian))\n                      state)\n                     (lp (dec i) (trim-last-argument state)))))]\n        (lp (quot m 2) state)))))\n\n;; ### Coordinate Transformation to State Transformation\n\n(defn F->C\n  \"Accepts a coordinate transformation `F` from a local tuple to a new coordinate\n  structure, and returns a function from `local -> local` that applies the\n  transformation directly.\n\n  [[F->C]] handles local tuples of arbitrary length.\"\n  [F]\n  (fn C [local]\n    (let [n (count local)\n          f-bar (fn [q-prime]\n                  (let [q (compose F (Gamma q-prime))]\n                    (Gamma q n)))]\n      ((Gamma-bar f-bar) local))))\n\n;; The following transformations are applicable to configuration coordinates.\n\n(defn rectangular->polar [[x y]]\n  (let [r (g/sqrt\n           (+ (g/square x)\n              (g/square y)))\n        phi (g/atan y x)]\n    (up r phi)))\n\n(defn r->p [tqv]\n  (rectangular->polar\n   (coordinate tqv)))\n\n(defn polar->rectangular [[r phi]]\n  (let [x (* r (cos phi))\n        y (* r (sin phi))]\n    (up x y)))\n\n(defn p->r\n  \"SICM p. 47. Polar to rectangular coordinates of state.\"\n  [tqv]\n  (polar->rectangular\n   (coordinate tqv)))\n\n;; ### Spherical Coordinates (radius, colatitude, longitude)\n\n(defn spherical->rectangular [[r theta phi]]\n  (let [x (* r (sin theta) (cos phi))\n        y (* r (sin theta) (sin phi))\n        z (* r (cos theta))]\n    (coordinate-tuple x y z)))\n\n(defn s->r\n  \"SICM p. 83\"\n  [local]\n  (spherical->rectangular\n   (coordinate local)))\n\n(defn rectangular->spherical [[x y z]]\n  (let [r (g/sqrt (+ (g/square x)\n                     (g/square y)\n                     (g/square z)))\n        theta (g/acos (/ z r))\n        phi (g/atan y x)]\n    (coordinate-tuple r theta phi)))\n\n(defn r->s [local]\n  (rectangular->spherical\n   (coordinate local)))\n"]}