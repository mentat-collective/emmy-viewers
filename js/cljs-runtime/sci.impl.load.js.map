{"version":3,"sources":["sci/impl/load.cljc"],"mappings":"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","names":["sci.impl.load/handle-refer-all","the-current-ns","the-loaded-ns","include-sym?","rename-sym","only","referred","cljs.core/set","cljs.core.reduce","p__89575","vec__89576","cljs.core.nth","ns","k","v","and__4251__auto__","cljs.core/Symbol","cljs.core/not","cljs.core/contains?","cljs.core.assoc","p__89579","map__89580","cljs.core/--destructure-map","as","cljs.core.get","refer","rename","exclude","use","sci.impl.load/handle-require-libspec-env","_ctx","env","current-ns","lib-name","_parsed-libspec","cljs.core.get_in","cljs.core/assoc-in","sym","or__4253__auto__","cljs.core/identity","excludes","cljs.core/constantly","cljs.core/keyword-identical?","cljs.core/sequential?","temp__5751__auto__","vec__89581","_k","cljs.core/find","js/Error","temp__5753__auto__","on-loaded","G__89591","cljs.core/meta","G__89592","sci.impl.load/add-loaded-lib","lib","cljs.core.swap_BANG_","cljs.core/update","loaded-libs","cljs.core.conj","sci.impl.load/handle-require-libspec","ctx","opts","cljs.core/deref","env*","cnn","sci.impl.utils/current-ns-name","as-alias","cljs.core/reset!","map__89612","reload","reload-all","namespaces","reload*","loading","cljs.core/nat-int?","sci.impl.utils.throw_error_with_location","lib-emphasized","cljs.core.replace","clojure.string.join","load-fn","curr-ns","sci.impl.utils/current-ns","map__89620","file","source","handled","G__89619","sci.impl.types/getName","cljs.core.update","e89621","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.impl.utils/current-file","fexpr__89622","sci.impl.utils/eval-string*","e","cljs.core/dissoc","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sci.impl.load/load-lib","seq89627","G__89628","cljs.core/first","cljs.core/next","G__89629","G__89630","self__4851__auto__","prefix","options","cljs.core/name","cljs.core.symbol","cljs.core.apply","cljs.core/hash-map","sci.impl.load/prependss","x","coll","cljs.core/cons","cljs.core.concat","sci.impl.load/libspec?","cljs.core/vector?","cljs.core/second","cljs.core/Keyword","sci.impl.load/load-libs","kw","args","args*","flags","cljs.core.filter","cljs.core/keyword?","cljs.core.interleave","cljs.core.repeat","cljs.core/complement","supported","unsupported","cljs.core/seq","cljs.core.remove","cljs.core/str","cljs.core.interpose","seq__89631","chunk__89632","count__89633","i__89634","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","arg","vec__89649","seq__89650","first__89651","vec__89668","seq__89669","first__89670","seq__89652","chunk__89653","count__89654","i__89655","seq__89671","chunk__89672","count__89673","i__89674","sci.impl.load/eval-require","seq89685","G__89686","cljs.core/vreset!","sci.impl.utils/eval-require-state","sci.impl.load/eval-use","seq89690","G__89691","sci.impl.utils/eval-use-state","sci.impl.load/eval-refer-clojure","exprs","ns-sym","vec__89695","G__89698","cljs.core.update_in","cljs.core.fnil","cljs.core/into","other-ns","other-vars","cljs.core/select-keys","cljs.core/merge","p__89711","vec__89712","acc","original-name","new-name","cljs.core/conj","cljs.core/nnext","sci.impl.load/eval-refer*","filters","fs","public-keys","cljs.core/symbol?","cljs.core/keys","to-do","cljs.core._EQ_","_","sci.impl.load/eval-refer","seq89726","G__89727","G__89728","sci.impl.utils/eval-refer-state"],"sourcesContent":["(ns sci.impl.load\n  {:no-doc true}\n  (:require\n   [clojure.string :as str]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils :refer [kw-identical? throw-error-with-location]]\n   [sci.impl.vars :as vars]))\n\n(defn handle-refer-all [the-current-ns the-loaded-ns include-sym? rename-sym only]\n  (let [referred (:refers the-current-ns)\n        only (when only (set only))\n        referred (reduce (fn [ns [k v]]\n                           (if (and (symbol? k) (include-sym? k)\n                                    (or (not only)\n                                        (contains? only k)))\n                             (assoc ns (rename-sym k) v)\n                             ns))\n                         referred\n                         the-loaded-ns)]\n    (assoc the-current-ns :refers referred)))\n\n(defn handle-require-libspec-env\n  [_ctx env current-ns the-loaded-ns lib-name\n   {:keys [:as :refer :rename :exclude :only :use] :as _parsed-libspec}]\n  (let [the-current-ns (get-in env [:namespaces current-ns]) ;; = ns-data?\n        the-current-ns (if as (assoc-in the-current-ns [:aliases as] lib-name)\n                           the-current-ns)\n        rename-sym (if rename (fn [sym] (or (rename sym) sym))\n                       identity)\n        include-sym? (if exclude\n                       (let [excludes (set exclude)]\n                         (fn [sym]\n                           (not (contains? excludes sym))))\n                       (constantly true))\n        the-current-ns\n        (cond refer\n              (cond (or (kw-identical? :all refer)\n                        use)\n                    (handle-refer-all the-current-ns the-loaded-ns include-sym? rename-sym nil)\n                    (sequential? refer)\n                    (let [referred (:refers the-current-ns)\n                          referred (reduce (fn [ns sym]\n                                             (if (include-sym? sym)\n                                               (assoc ns (rename-sym sym)\n                                                      (if-let [[_k v] (find the-loaded-ns sym)]\n                                                        v\n                                                        (throw (new #?(:clj Exception :cljs js/Error)\n                                                                    (str sym \" does not exist\")))))\n                                               ns))\n                                           referred\n                                           refer)]\n                      (assoc the-current-ns :refers referred))\n                    :else (throw (new #?(:clj Exception :cljs js/Error)\n                                      (str \":refer value must be a sequential collection of symbols\"))))\n              use (handle-refer-all the-current-ns the-loaded-ns include-sym? rename-sym only)\n              :else the-current-ns)\n        env (assoc-in env [:namespaces current-ns] the-current-ns)]\n    (when-let [on-loaded (some-> the-loaded-ns :obj meta :sci.impl/required-fn)]\n      (on-loaded {}))\n    env))\n\n(defn add-loaded-lib [env lib]\n  (swap! env update :loaded-libs (fn [loaded-libs]\n                                   (if (nil? loaded-libs)\n                                     #{lib}\n                                     (conj loaded-libs lib))))\n  nil)\n\n(defn handle-require-libspec\n  [ctx lib opts]\n  (let [env* (:env ctx)\n        env @env* ;; NOTE: loading namespaces is not (yet) thread-safe\n        cnn (utils/current-ns-name)\n        lib (get (:ns-aliases env) lib lib)]\n    (if-let [as-alias (:as-alias opts)]\n      (reset! env* (handle-require-libspec-env ctx env cnn nil lib {:as as-alias}))\n      (let [{:keys [:reload :reload-all]} opts\n            namespaces (get env :namespaces)\n            reload* (or reload reload-all (:reload-all ctx))]\n        (if-let [the-loaded-ns (when-not reload* (get namespaces lib))]\n          (let [loading (:loading ctx)]\n            (if (and loading\n                     (not (contains? (:loaded-libs env) lib))\n                     (nat-int? #?(:clj (.indexOf ^clojure.lang.PersistentVector loading lib)\n                                  :cljs (.indexOf loading lib))))\n              (throw-error-with-location\n               (let [lib-emphasized (str \"[ \" lib \" ]\")\n                     loading (conj loading lib)\n                     loading (replace {lib lib-emphasized} loading)]\n                 (str \"Cyclic load dependency: \" (str/join \"->\" loading)))\n               lib)\n              (reset! env* (handle-require-libspec-env ctx env cnn the-loaded-ns lib opts))))\n          (if-let [load-fn (:load-fn env)]\n            (let [curr-ns @utils/current-ns]\n              (if-let [{:keys [file source handled]}\n                       (load-fn {:namespace lib ;; old name\n                                 :libname lib\n                                 :ctx ctx\n                                 :opts opts\n                                 :ns (types/getName curr-ns)\n                                 :reload (or reload reload-all)})]\n                (do\n                  ;; (.println System/err \"source\")\n                  ;; (.println System/err source)\n                  (let [ctx (-> ctx\n                                (assoc :bindings {})\n                                (assoc :reload-all reload-all)\n                                (update :loading (fn [loading]\n                                                   (if (nil? loading)\n                                                     [lib]\n                                                     (conj loading lib)))))]\n                    (when source\n                      (try (vars/with-bindings\n                             {utils/current-ns curr-ns\n                              utils/current-file file}\n                             (@utils/eval-string* ctx source))\n                           (catch #?(:clj Exception :cljs js/Error) e\n                             (swap! env* update :namespaces dissoc lib)\n                             (throw e)))))\n                  (when-not handled\n                    (swap! env* (fn [env]\n                                  (let [namespaces (get env :namespaces)\n                                        the-loaded-ns (get namespaces lib)]\n                                    (handle-require-libspec-env ctx env cnn\n                                                                the-loaded-ns\n                                                                lib opts))))))\n                (or (when reload*\n                      (when-let [the-loaded-ns (get namespaces lib)]\n                        (reset! env* (handle-require-libspec-env ctx env cnn the-loaded-ns lib opts))))\n                    (throw (new #?(:clj Exception :cljs js/Error)\n                                (str \"Could not find namespace: \" lib \".\"))))))\n            (throw (new #?(:clj Exception :cljs js/Error)\n\n                        (str \"Could not find namespace \" lib \".\")))))\n        (add-loaded-lib env* lib)\n        nil))))\n\n(defn load-lib [ctx prefix lib & options]\n  (when (and prefix (pos? (.indexOf (name lib) #?(:clj (int \\.)\n                                                  :cljs \\.))))\n    (throw-error-with-location (str \"Found lib name '\" (name lib) \"' containing period with prefix '\"\n                                    prefix \"'.  lib names inside prefix lists must not contain periods\")\n                               lib))\n  (let [lib (if prefix (symbol (str prefix \\. lib)) lib)\n        opts (apply hash-map options)]\n    (handle-require-libspec ctx lib opts)))\n\n(defn- prependss\n  \"Prepends a symbol or a seq to coll\"\n  [x coll]\n  (if (symbol? x)\n    (cons x coll)\n    (concat x coll)))\n\n(defn- libspec?\n  \"Returns true if x is a libspec\"\n  [x]\n  (or (symbol? x)\n      (and (vector? x)\n           (or\n            (nil? (second x))\n            (keyword? (second x))))))\n\n(defn- load-libs\n  \"Loads libs, evaling libspecs, prefix lists, and flags for\n  forwarding to load-lib\"\n  [ctx kw args]\n  (let [args* (cons kw args)\n        flags (filter keyword? args*)\n        opts (interleave flags (repeat true))\n        args* (filter (complement keyword?) args*)]\n    ;; check for unsupported options\n    (let [supported #{:as :reload :reload-all :require :use :verbose :refer}\n          unsupported (seq (remove supported flags))]\n      (when unsupported\n        (throw-error-with-location (apply str \"Unsupported option(s) supplied: \"\n                                          (interpose \\, unsupported))\n                                   ;; best effort location\n                                   args)))\n    ;; check a load target was specified\n    (when-not (seq args*)\n      (throw-error-with-location \"Nothing specified to load\"\n                                 args))\n    (doseq [arg args*]\n      (if (libspec? arg)\n        (apply load-lib ctx nil (prependss arg opts))\n        (let [[prefix & args*] arg]\n          (when (nil? prefix)\n            (throw-error-with-location \"prefix cannot be nil\"\n                                       args))\n          (doseq [arg args*]\n            (apply load-lib ctx prefix (prependss arg opts))))))))\n\n(defn eval-require\n  [ctx & args]\n  (load-libs ctx :require args))\n\n(vreset! utils/eval-require-state eval-require)\n\n(defn eval-use\n  [ctx & args]\n  (load-libs ctx :use args))\n\n(vreset! utils/eval-use-state eval-use)\n\n(defn eval-refer-clojure [ctx exprs]\n  (let [ns-sym 'clojure.core]\n    (loop [exprs exprs]\n      (when exprs\n        (let [[k v] exprs]\n          (case k\n            :exclude\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (utils/current-ns-name)]\n                       (update-in env [:namespaces cnn :refer ns-sym :exclude]\n                                  (fnil into #{}) v))))\n            :only\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (utils/current-ns-name)\n                           other-ns (get-in env [:namespaces ns-sym])\n                           other-vars (select-keys other-ns v)]\n                       ;; TODO: this is wrong, don't merge these vars into the current namespace\n                       (update-in env [:namespaces cnn]\n                                  merge other-vars))))\n            :rename\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (utils/current-ns-name)\n                           namespaces (:namespaces env)\n                           the-current-ns (get namespaces cnn)\n                           other-ns (get-in env [:namespaces ns-sym])\n                           the-current-ns\n                           (reduce (fn [acc [original-name new-name]]\n                                     (-> acc\n                                         (assoc-in [:refers new-name] (get other-ns original-name))\n                                         (update-in [:refer ns-sym :exclude] (fnil conj #{}) original-name)))\n                                   the-current-ns\n                                   v)]\n                       (assoc-in env [:namespaces cnn] the-current-ns)))))\n          (recur (nnext exprs)))))))\n\n(defn eval-refer* [env ns-sym filters]\n  env\n  (let [cnn (utils/current-ns-name)\n        namespaces (:namespaces env)\n        ns (or (get namespaces ns-sym)\n               (throw (new #?(:clj Exception :cljs js/Error)\n                           (str \"No namespace: \" ns-sym))))\n        fs (apply hash-map filters)\n        public-keys (filter symbol? (keys ns))\n        rename (or (:rename fs) {})\n        exclude (set (:exclude fs))\n        to-do (if (= :all (:refer fs))\n                public-keys\n                (or (:refer fs) (:only fs) public-keys))\n        _ (when (and to-do (not (sequential? to-do)))\n            (throw (new #?(:clj Exception :cljs js/Error)\n                        \":only/:refer value must be a sequential collection of symbols\")))\n        the-current-ns (get namespaces cnn)\n        referred (:refers the-current-ns)\n        referred (reduce (fn [referred sym]\n                           (if-not (exclude sym)\n                             (let [v (get ns sym)]\n                               (when-not v\n                                 (throw (new #?(:clj java.lang.IllegalAccessError\n                                                :cljs js/Error)\n                                             ;; TODO: handle private vars\n                                             (if false ;; (get (ns-interns ns) sym)\n                                               (str sym \" is not public\")\n                                               (str sym \" does not exist\")))))\n                               (assoc referred (or (rename sym) sym) v ))\n                             referred))\n                         referred\n                         to-do)\n        the-current-ns (assoc the-current-ns :refers referred)\n        namespaces (assoc namespaces cnn the-current-ns)\n        env (assoc env :namespaces namespaces)]\n    env))\n\n(defn eval-refer\n  \"The function equivalent of :refer is handled differently than what we\n  did before (this is more like what Clojure itself does.) For\n  referring clojure.core we still use the old code.\"\n  [ctx ns-sym & filters]\n  (if (= 'clojure.core ns-sym)\n    (eval-refer-clojure ctx filters)\n    (swap! (:env ctx) eval-refer* ns-sym filters))\n  nil)\n\n(vreset! utils/eval-refer-state eval-refer)\n"]}