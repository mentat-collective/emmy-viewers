{"version":3,"sources":["sci/impl/evaluator.cljc"],"mappings":"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","names":["sci.impl.evaluator/macros","sci.impl.evaluator/eval-def","ctx","bindings","var-name","init","m","sci.impl.types/eval","cnn","sci.impl.types/getName","assoc-in-env","env","the-current-ns","cljs.core.get","prev","sci.impl.utils/var?","sci.lang/Var","cljs.core.symbol","cljs.core/meta","v","sci.impl.utils/var-unbound","G__91087","cljs.core.alter_meta_BANG_","cljs.core/merge","sci.impl.vars/bindRoot","cljs.core.assoc","cljs.core/assoc-in","cljs.core.swap_BANG_","var_args","G__91092","sci.impl.evaluator/eval-case","js/Error","case-map","case-val","temp__5751__auto__","vec__91095","cljs.core.nth","_","found","cljs.core/find","case-default","vec__91099","sci.impl.evaluator/eval-try","body","catches","finally","sci-error","e91105","*in-try*-orig-val__91112","*in-try*-temp-val__91113","sci.impl.utils/*in-try*","or__4253__auto__","cljs.core/not","cljs.core/seq","e","vec__91108","r","cljs.core.reduce","c","clazz","cljs.core/keyword-identical?","sci.impl.types/NodeR","c__4284__auto__","x__4285__auto__","cljs.core/reduced","sci.impl.utils.rethrow_with_location_of_node","sci.impl.evaluator/eval-static-method-invocation","expr","sci.impl.interop/invoke-static-method","cljs.core/first","p1__91114#","cljs.core.map","cljs.core/rest","sci.impl.evaluator/eval-instance-method-invocation","instance-expr","method-str","field-access","args","allowed","instance-meta","tag-class","instance-expr*","sci.impl.records/SciRecord","cljs.core.keyword","sci.impl.deftype/SciType","cljs.core/deref","instance-class","cljs.core/type","class->opts","allowed?","instance-class-name","instance-class-symbol","target-class","temp__5753__auto__","f","sci.impl.utils.throw_error_with_location","sci.impl.interop/invoke-instance-field","p1__91119#","sci.impl.interop/invoke-instance-method","G__91136","sci.impl.evaluator/eval-resolve","sym","sci.impl.evaluator.eval_resolve","cljs.core/contains?","res","cljs.core/second","fexpr__91137","sci.impl.utils/lookup","cljs.core/vreset!","sci.impl.utils/eval-resolve-state","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sci.impl.evaluator/eval-import","seq91269","G__91270","cljs.core/next","self__4851__auto__","import-symbols-or-lists","specs","p1__91264#","cljs.core/seq?","cljs.core._EQ_","spec","vec__91279","package","classes","cljs.core/Symbol","s","last-dot","clojure.string.last_index_of","package+class-name","cljs.core.subs","p","cs","class","fq-class-name","sci.impl.interop/resolve-class","sci.impl.utils/current-ns-name","rec-var","rec-ns","sci.impl.utils/demunge","cljs.core.get_in","cljs.core.mapv","p1__28454#","cljs.core.apply","cljs.core/count","sci.impl.evaluator/fn-call","G__91476","arg91286","arg91287","arg91288","arg91289","arg91290","arg91291","arg91292","arg91293","arg91294","arg91295","arg91296","arg91297","arg91298","arg91299","arg91300","arg91301","arg91302","arg91303","arg91304","arg91305","arg91306","arg91307","arg91308","arg91309","arg91310","arg91311","arg91312","arg91313","arg91314","arg91315","arg91316","arg91317","arg91318","arg91319","arg91320","arg91321","arg91322","arg91323","arg91324","arg91325","arg91326","arg91327","arg91328","arg91329","arg91330","arg91331","arg91332","arg91333","arg91334","arg91335","arg91336","arg91337","arg91338","arg91339","arg91340","arg91341","arg91342","arg91343","arg91344","arg91345","arg91346","arg91347","arg91348","arg91349","arg91350","arg91351","arg91352","arg91353","arg91354","arg91355","arg91356","arg91357","arg91358","arg91359","arg91360","arg91361","arg91362","arg91363","arg91364","arg91365","arg91366","arg91367","arg91368","arg91369","arg91370","arg91371","arg91372","arg91373","arg91374","arg91375","arg91376","arg91377","arg91378","arg91379","arg91380","arg91381","arg91382","arg91383","arg91384","arg91385","arg91386","arg91387","arg91388","arg91389","arg91390","arg91391","arg91392","arg91393","arg91394","arg91395","arg91396","arg91397","arg91398","arg91399","arg91400","arg91401","arg91402","arg91403","arg91404","arg91405","arg91406","arg91407","arg91408","arg91409","arg91410","arg91411","arg91412","arg91413","arg91414","arg91415","arg91416","arg91417","arg91418","arg91419","arg91420","arg91421","arg91422","arg91423","arg91424","arg91425","arg91426","arg91427","arg91428","arg91429","arg91430","arg91431","arg91432","arg91433","arg91434","arg91435","arg91436","arg91437","arg91438","arg91439","arg91440","arg91441","arg91442","arg91443","arg91444","arg91445","arg91446","arg91447","arg91448","arg91449","arg91450","arg91451","arg91452","arg91453","arg91454","arg91455","arg91456","arg91457","arg91458","arg91459","arg91460","arg91461","arg91462","arg91463","arg91464","arg91465","arg91466","arg91467","arg91468","arg91469","arg91470","arg91471","arg91472","arg91473","arg91474","arg91475"],"sourcesContent":["(ns sci.impl.evaluator\n  {:no-doc true}\n  (:refer-clojure :exclude [eval])\n  (:require\n   [clojure.string :as str]\n   [sci.impl.deftype]\n   [sci.impl.interop :as interop]\n   [sci.impl.macros :as macros]\n   [sci.impl.records]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils :refer [#?(:cljs kw-identical?)\n                                     rethrow-with-location-of-node\n                                     throw-error-with-location]]\n   [sci.impl.vars :as vars])\n  #?(:cljs (:require-macros [sci.impl.evaluator :refer [def-fn-call resolve-symbol]])))\n\n(declare fn-call)\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def #?(:clj ^:const macros :cljs macros)\n  '#{do fn def defn\n     syntax-quote})\n\n(defn eval-def\n  [ctx bindings var-name init m]\n  (let [init (types/eval init ctx bindings)\n        m (types/eval m ctx bindings)\n        cnn (types/getName (:ns m))\n        assoc-in-env\n        (fn [env]\n          (let [the-current-ns (get (get env :namespaces) cnn)\n                prev (get the-current-ns var-name)\n                prev (if-not (utils/var? prev)\n                       (sci.lang.Var. prev (symbol (str cnn) (str var-name))\n                                      (meta prev)\n                                      false\n                                      false)\n                       prev)\n                v (if (identical? utils/var-unbound init)\n                    (doto prev\n                      (alter-meta! merge m))\n                    (do (vars/bindRoot prev init)\n                        (alter-meta! prev merge m)\n                        prev))\n                the-current-ns (assoc the-current-ns var-name v)]\n            (assoc-in env [:namespaces cnn] the-current-ns)))\n        env (swap! (:env ctx) assoc-in-env)]\n    ;; return var\n    (get (get (get env :namespaces) cnn) var-name)))\n\n(defmacro resolve-symbol [bindings sym]\n  `(.get ~(with-meta bindings\n            {:tag 'java.util.Map}) ~sym))\n\n(declare eval-string*)\n\n(defn eval-case\n  ([ctx bindings case-map case-val]\n   (let [v (types/eval case-val ctx bindings)]\n     (if-let [[_ found] (find case-map v)]\n       (types/eval found ctx bindings)\n       (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                   (str \"No matching clause: \" v))))))\n  ([ctx bindings case-map case-val case-default]\n   (let [v (types/eval case-val ctx bindings)]\n     (if-let [[_ found] (find case-map v)]\n       (types/eval found ctx bindings)\n       (types/eval case-default ctx bindings)))))\n\n(defn eval-try\n  [ctx bindings body catches finally sci-error]\n  (try\n    (binding [utils/*in-try* (or (and (not sci-error)\n                                      ;; try/finally without catch\n                                      (seq catches)\n                                      )\n                                 utils/*in-try*)]\n      (types/eval body ctx bindings))\n    (catch #?(:clj Throwable :cljs :default) e\n      (if-let\n          [[_ r]\n           (reduce (fn [_ c]\n                     (let [clazz (:class c)]\n                       (when #?(:cljs\n                                (or (kw-identical? :default clazz)\n                                    (if (instance? sci.impl.types/NodeR clazz)\n                                      (instance? (types/eval clazz ctx bindings) e)\n                                      (instance? clazz e)))\n                                :clj (instance? clazz e))\n                         (reduced\n                          [::try-result\n                           (do (aset ^objects bindings (:ex-idx c) e)\n                               (types/eval (:body c) ctx bindings))]))))\n                   nil\n                   catches)]\n        r\n        (rethrow-with-location-of-node ctx bindings e body)))\n    (finally\n      (types/eval finally ctx bindings))))\n\n;;;; Interop\n\n(defn eval-static-method-invocation [ctx bindings expr]\n  (interop/invoke-static-method (first expr)\n                                ;; eval args!\n                                (map #(types/eval % ctx bindings) (rest expr))))\n\n#?(:clj\n   (defn super-symbols [clazz]\n     ;; (prn clazz '-> (map #(symbol (.getName ^Class %)) (supers clazz)))\n     (map #(symbol (.getName ^Class %)) (supers clazz))))\n\n(defn eval-instance-method-invocation\n  [ctx bindings instance-expr method-str field-access args #?(:cljs allowed)]\n  (let [instance-meta (meta instance-expr)\n        tag-class (:tag-class instance-meta)\n        instance-expr* (types/eval instance-expr ctx bindings)]\n    ;; (prn (type instance-expr*))\n    (if (instance? sci.impl.records.SciRecord instance-expr*)\n      (get instance-expr* (keyword\n                           ;; TODO: strip leading dash in analyzer\n                           method-str))\n      (if (instance? sci.impl.deftype.SciType instance-expr*)\n        (get (types/getVal instance-expr*)\n             (symbol\n              ;; TODO: strip leading dash in analyzer\n              method-str))\n        (let [instance-class (or tag-class (#?(:clj class :cljs type) instance-expr*))\n              env @(:env ctx)\n              class->opts (:class->opts env)\n              allowed? (or\n                        #?(:cljs allowed)\n                        (get class->opts :allow)\n                        (let [instance-class-name #?(:clj (.getName ^Class instance-class)\n                                                     :cljs (.-name instance-class))\n                              instance-class-symbol (symbol instance-class-name)]\n                          (get class->opts instance-class-symbol)))\n              ^Class target-class (if allowed? instance-class\n                                      (when-let [f (:public-class env)]\n                                        (f instance-expr*)))]\n          ;; we have to check options at run time, since we don't know what the class\n          ;; of instance-expr is at analysis time\n          (when-not #?(:clj target-class\n                       :cljs allowed?)\n            (throw-error-with-location (str \"Method \" method-str \" on \" instance-class \" not allowed!\") instance-expr))\n          (if field-access\n            (interop/invoke-instance-field instance-expr* target-class method-str)\n            (let [args (map #(types/eval % ctx bindings) args)] ;; eval args!\n              (interop/invoke-instance-method instance-expr* target-class method-str args))))))))\n\n;;;; End interop\n\n;;;; Namespaces\n\n(declare eval-form)\n\n(defn eval-resolve\n  ([ctx bindings sym]\n   (eval-resolve ctx bindings nil sym))\n  ([ctx bindings env sym]\n   (when (or (not env)\n             (not (contains? env sym)))\n     (let [sym (types/eval sym ctx bindings)\n           res (second (@utils/lookup ctx sym false))]\n       (when-not #?(:cljs (instance? sci.impl.types/NodeR res)\n                    :clj (instance? sci.impl.types.Eval res))\n         res)))))\n\n(vreset! utils/eval-resolve-state eval-resolve)\n\n;;;; End namespaces\n\n;;;; Import\n\n(defn eval-import [ctx & import-symbols-or-lists]\n  ;;(prn import-symbols-or-lists)\n  (let [specs (map #(if (and (seq? %) (= 'quote (first %))) (second %) %)\n                   import-symbols-or-lists)\n        env (:env ctx)]\n    (reduce (fn [_ spec]\n              (let [[package classes]\n                    (if (symbol? spec)\n                      (let [s (str spec)\n                            last-dot (str/last-index-of s \".\")\n                            package+class-name\n                            (if last-dot\n                              [(symbol (subs s 0 last-dot))\n                               [(symbol (subs s (inc last-dot) (count s)))]]\n                              [nil [spec]])]\n                        package+class-name)\n                      (let [p (first spec)\n                            cs (rest spec)]\n                        [p cs]))]\n                (reduce (fn [_ class]\n                          (let [fq-class-name (symbol (if package (str package \".\" class)\n                                                          class))]\n                            (if-let [clazz (interop/resolve-class ctx fq-class-name)]\n                              (let [cnn (utils/current-ns-name)]\n                                (swap! env assoc-in [:namespaces cnn :imports class] fq-class-name)\n                                clazz)\n                              (if-let [rec-var\n                                       (let [rec-ns (symbol (utils/demunge (str package)))\n                                             rec-var (get-in @env [:namespaces rec-ns class])]\n                                         rec-var)]\n                                (let [cnn (utils/current-ns-name)]\n                                  (swap! env assoc-in [:namespaces cnn :refers class] rec-var)\n                                  @rec-var)\n                                (throw (new #?(:clj Exception :cljs js/Error)\n                                            (str \"Unable to resolve classname: \" fq-class-name)))))))\n                        nil\n                        classes)))\n            nil\n            specs)))\n\n;;;; End import\n\n(declare eval-string)\n\n(macros/deftime\n  ;; This macro generates a function of the following form for 20 arities:\n  #_(defn fn-call [ctx bindings f args]\n      (case (count args)\n        0 (f)\n        1 (let [arg (eval ctx bindings (first args))]\n            (f arg))\n        2 (let [arg1 (eval ctx bindings (first args))\n                args (rest args)\n                arg2 (eval ctx bindings (first args))]\n            (f arg1 arg2))\n        ,,,\n        (let [args (mapv #(eval ctx bindings %) args)]\n          (apply f args))))\n  (defmacro def-fn-call []\n    (let [cases\n          (mapcat (fn [i]\n                    [i (let [arg-syms (map (fn [_] (gensym \"arg\")) (range i))\n                             args-sym 'args ;; (gensym \"args\")\n                             let-syms (interleave arg-syms (repeat args-sym))\n                             let-vals (interleave (repeat `(types/eval (first ~args-sym) ~'ctx ~'bindings))\n                                                  (repeat `(rest ~args-sym)))\n                             let-bindings (vec (interleave let-syms let-vals))]\n                         `(let ~let-bindings\n                            (~'f ~@arg-syms)))]) (range 20))\n          cases (concat cases ['(let [args (mapv #(types/eval % ctx bindings) args)]\n                                  (apply f args))])]\n      ;; Normal apply:\n      #_`(defn ~'fn-call ~'[ctx f args]\n           (apply ~'f (map #(eval ~'ctx %) ~'args)))\n      `(defn ~'fn-call ~'[ctx bindings f args]\n         ;; TODO: can we prevent hitting this at all, by analyzing more efficiently?\n         ;; (prn :count ~'f ~'(count args) ~'args)\n         (case ~'(count args)\n           ~@cases)))))\n\n(def-fn-call)\n\n;; The following types cannot be treated as constants in the analyzer\n#?(:clj (extend-protocol types/Eval\n          java.lang.Class\n          (eval [expr _ _]\n            expr)\n          clojure.lang.PersistentArrayMap\n          (eval [expr _ _]\n            expr)\n          clojure.lang.PersistentVector\n          (eval [expr _ _]\n            expr)\n          clojure.lang.Symbol\n          (eval [expr _ _]\n            expr)\n          sci.lang.Namespace\n          (eval [expr _ _]\n            expr)\n          sci.lang.Var\n          (eval [expr _ _]\n            expr)\n          clojure.lang.MultiFn\n          (eval [expr _ _]\n            expr)\n          Object\n          (eval [expr _ _]\n            expr)\n          ;; literal nils are treated like constants, but nil might also happen\n          ;; as a result of analysis\n          nil (eval [_ _ _] nil)))\n"]}