{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_inline$text.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAclHC,QAASA,iBAAgB,CAACC,EAAD,CAAK,CAC5B,OAAQA,EAAR,EACE,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,GAAL,CACA,KAAK,GAAL,CACA,KAAK,GAAL,CACE,MAAO,CAAA,CACT,SACE,MAAO,CAAA,CA1BX,CAD4B,CA+B9BH,MAAOC,CAAAA,OAAP,CAAiBG,QAAa,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAG5C,IAFA,IAAIC,IAAMF,KAAME,CAAAA,GAEhB,CAAOA,GAAP,CAAaF,KAAMG,CAAAA,MAAnB,EAA6B,CAACN,gBAAA,CAAiBG,KAAMI,CAAAA,GAAIC,CAAAA,UAAV,CAAqBH,GAArB,CAAjB,CAA9B,CAAA,CACEA,GAAA,EAGF,IAAIA,GAAJ;AAAYF,KAAME,CAAAA,GAAlB,CAAyB,MAAO,CAAA,CAE3BD,OAAL,GAAeD,KAAMM,CAAAA,OAArB,EAAgCN,KAAMI,CAAAA,GAAIG,CAAAA,KAAV,CAAgBP,KAAME,CAAAA,GAAtB,CAA2BA,GAA3B,CAAhC,CAEAF,MAAME,CAAAA,GAAN,CAAYA,GAEZ,OAAO,CAAA,CAbqC,CA7CoE;",
"sources":["node_modules/markdown-it/lib/rules_inline/text.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_inline$text\"] = function(global,require,module,exports) {\n// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n\n};"],
"names":["shadow$provide","global","require","module","exports","isTerminatorChar","ch","module.exports","state","silent","pos","posMax","src","charCodeAt","pending","slice"]
}
