shadow$provide.module$node_modules$three$src$renderers$webgl$WebGLMorphtargets=function(global,require,module,exports){function numericalSort(a,b){return a[0]-b[0]}function absNumericalSort(a,b){return Math.abs(b[1])-Math.abs(a[1])}Object.defineProperty(exports,"__esModule",{value:!0});exports.WebGLMorphtargets=function(gl,capabilities,textures){const influencesList={},morphInfluences=new Float32Array(8),morphTextures=new WeakMap,morph=new _Vector.Vector4,workInfluences=[];for(let i=0;8>i;i++)workInfluences[i]=
[i,0];return{update:function(object,geometry,material,program){object=object.morphTargetInfluences;if(!0===capabilities.isWebGL2){material=geometry.morphAttributes.position||geometry.morphAttributes.normal||geometry.morphAttributes.color;material=void 0!==material?material.length:0;var entry=morphTextures.get(geometry);if(void 0===entry||entry.count!==material){void 0!==entry&&entry.texture.dispose();entry=void 0!==geometry.morphAttributes.position;var hasMorphNormals=void 0!==geometry.morphAttributes.normal,
hasMorphColors=void 0!==geometry.morphAttributes.color,morphTargets=geometry.morphAttributes.position||[];const morphNormals=geometry.morphAttributes.normal||[],morphColors=geometry.morphAttributes.color||[];var vertexDataCount=0;!0===entry&&(vertexDataCount=1);!0===hasMorphNormals&&(vertexDataCount=2);!0===hasMorphColors&&(vertexDataCount=3);let width=geometry.attributes.position.count*vertexDataCount,height=1;width>capabilities.maxTextureSize&&(height=Math.ceil(width/capabilities.maxTextureSize),
width=capabilities.maxTextureSize);const buffer=new Float32Array(width*height*4*material),texture=new _DataArrayTexture.DataArrayTexture(buffer,width,height,material);texture.type=_constants.FloatType;texture.needsUpdate=!0;vertexDataCount*=4;for(let i=0;i<material;i++){const morphTarget=morphTargets[i],morphNormal=morphNormals[i],morphColor=morphColors[i],offset=width*height*4*i;for(let j=0;j<morphTarget.count;j++){const stride=j*vertexDataCount;!0===entry&&(morph.fromBufferAttribute(morphTarget,
j),buffer[offset+stride+0]=morph.x,buffer[offset+stride+1]=morph.y,buffer[offset+stride+2]=morph.z,buffer[offset+stride+3]=0);!0===hasMorphNormals&&(morph.fromBufferAttribute(morphNormal,j),buffer[offset+stride+4]=morph.x,buffer[offset+stride+5]=morph.y,buffer[offset+stride+6]=morph.z,buffer[offset+stride+7]=0);!0===hasMorphColors&&(morph.fromBufferAttribute(morphColor,j),buffer[offset+stride+8]=morph.x,buffer[offset+stride+9]=morph.y,buffer[offset+stride+10]=morph.z,buffer[offset+stride+11]=4===
morphColor.itemSize?morph.w:1)}}entry={count:material,texture,size:new _Vector2.Vector2(width,height)};morphTextures.set(geometry,entry);function disposeTexture(){texture.dispose();morphTextures.delete(geometry);geometry.removeEventListener("dispose",disposeTexture)}geometry.addEventListener("dispose",disposeTexture)}material=0;for(hasMorphNormals=0;hasMorphNormals<object.length;hasMorphNormals++)material+=object[hasMorphNormals];material=geometry.morphTargetsRelative?1:1-material;program.getUniforms().setValue(gl,
"morphTargetBaseInfluence",material);program.getUniforms().setValue(gl,"morphTargetInfluences",object);program.getUniforms().setValue(gl,"morphTargetsTexture",entry.texture,textures);program.getUniforms().setValue(gl,"morphTargetsTextureSize",entry.size)}else{material=void 0===object?0:object.length;entry=influencesList[geometry.id];if(void 0===entry||entry.length!==material){entry=[];for(hasMorphNormals=0;hasMorphNormals<material;hasMorphNormals++)entry[hasMorphNormals]=[hasMorphNormals,0];influencesList[geometry.id]=
entry}for(hasMorphNormals=0;hasMorphNormals<material;hasMorphNormals++)hasMorphColors=entry[hasMorphNormals],hasMorphColors[0]=hasMorphNormals,hasMorphColors[1]=object[hasMorphNormals];entry.sort(absNumericalSort);for(object=0;8>object;object++)object<material&&entry[object][1]?(workInfluences[object][0]=entry[object][0],workInfluences[object][1]=entry[object][1]):(workInfluences[object][0]=Number.MAX_SAFE_INTEGER,workInfluences[object][1]=0);workInfluences.sort(numericalSort);object=geometry.morphAttributes.position;
material=geometry.morphAttributes.normal;entry=0;for(hasMorphNormals=0;8>hasMorphNormals;hasMorphNormals++)morphTargets=workInfluences[hasMorphNormals],hasMorphColors=morphTargets[0],morphTargets=morphTargets[1],hasMorphColors!==Number.MAX_SAFE_INTEGER&&morphTargets?(object&&geometry.getAttribute("morphTarget"+hasMorphNormals)!==object[hasMorphColors]&&geometry.setAttribute("morphTarget"+hasMorphNormals,object[hasMorphColors]),material&&geometry.getAttribute("morphNormal"+hasMorphNormals)!==material[hasMorphColors]&&
geometry.setAttribute("morphNormal"+hasMorphNormals,material[hasMorphColors]),morphInfluences[hasMorphNormals]=morphTargets,entry+=morphTargets):(object&&!0===geometry.hasAttribute("morphTarget"+hasMorphNormals)&&geometry.deleteAttribute("morphTarget"+hasMorphNormals),material&&!0===geometry.hasAttribute("morphNormal"+hasMorphNormals)&&geometry.deleteAttribute("morphNormal"+hasMorphNormals),morphInfluences[hasMorphNormals]=0);object=geometry.morphTargetsRelative?1:1-entry;program.getUniforms().setValue(gl,
"morphTargetBaseInfluence",object);program.getUniforms().setValue(gl,"morphTargetInfluences",morphInfluences)}}}};var _constants=require("module$node_modules$three$src$constants"),_DataArrayTexture=require("module$node_modules$three$src$textures$DataArrayTexture"),_Vector=require("module$node_modules$three$src$math$Vector4"),_Vector2=require("module$node_modules$three$src$math$Vector2")}
//# sourceMappingURL=module$node_modules$three$src$renderers$webgl$WebGLMorphtargets.js.map
