shadow$provide.module$node_modules$three$src$renderers$webgl$WebGLMorphtargets=function(global,require,module,exports){function numericalSort(a,b){return a[0]-b[0]}function absNumericalSort(a,b){return Math.abs(b[1])-Math.abs(a[1])}function denormalize(morph,attribute){let denominator=1;attribute=attribute.isInterleavedBufferAttribute?attribute.data.array:attribute.array;attribute instanceof Int8Array?denominator=127:attribute instanceof Int16Array?denominator=32767:attribute instanceof Int32Array?
denominator=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",attribute);morph.divideScalar(denominator)}Object.defineProperty(exports,"__esModule",{value:!0});exports.WebGLMorphtargets=function(gl,capabilities,textures){const influencesList={},morphInfluences=new Float32Array(8),morphTextures=new WeakMap,morph=new _Vector.Vector3,workInfluences=[];for(let i=0;8>i;i++)workInfluences[i]=[i,0];return{update:function(object,geometry,material,program){object=
object.morphTargetInfluences;if(!0===capabilities.isWebGL2){material=geometry.morphAttributes.position.length;var entry=morphTextures.get(geometry);if(void 0===entry||entry.count!==material){void 0!==entry&&entry.texture.dispose();entry=void 0!==geometry.morphAttributes.normal;var morphTargets=geometry.morphAttributes.position,morphNormals=geometry.morphAttributes.normal||[],numberOfVertexData=!0===entry?2:1,width=geometry.attributes.position.count*numberOfVertexData;let height=1;width>capabilities.maxTextureSize&&
(height=Math.ceil(width/capabilities.maxTextureSize),width=capabilities.maxTextureSize);const buffer=new Float32Array(width*height*4*material),texture=new _DataTexture2DArray.DataTexture2DArray(buffer,width,height,material);texture.format=_constants.RGBAFormat;texture.type=_constants.FloatType;texture.needsUpdate=!0;numberOfVertexData*=4;for(let i=0;i<material;i++){const morphTarget=morphTargets[i],morphNormal=morphNormals[i],offset=width*height*4*i;for(let j=0;j<morphTarget.count;j++){morph.fromBufferAttribute(morphTarget,
j);!0===morphTarget.normalized&&denormalize(morph,morphTarget);const stride=j*numberOfVertexData;buffer[offset+stride+0]=morph.x;buffer[offset+stride+1]=morph.y;buffer[offset+stride+2]=morph.z;buffer[offset+stride+3]=0;!0===entry&&(morph.fromBufferAttribute(morphNormal,j),!0===morphNormal.normalized&&denormalize(morph,morphNormal),buffer[offset+stride+4]=morph.x,buffer[offset+stride+5]=morph.y,buffer[offset+stride+6]=morph.z,buffer[offset+stride+7]=0)}}entry={count:material,texture,size:new _Vector2.Vector2(width,
height)};morphTextures.set(geometry,entry);function disposeTexture(){texture.dispose();morphTextures.delete(geometry);geometry.removeEventListener("dispose",disposeTexture)}geometry.addEventListener("dispose",disposeTexture)}material=0;for(morphTargets=0;morphTargets<object.length;morphTargets++)material+=object[morphTargets];material=geometry.morphTargetsRelative?1:1-material;program.getUniforms().setValue(gl,"morphTargetBaseInfluence",material);program.getUniforms().setValue(gl,"morphTargetInfluences",
object);program.getUniforms().setValue(gl,"morphTargetsTexture",entry.texture,textures);program.getUniforms().setValue(gl,"morphTargetsTextureSize",entry.size)}else{material=void 0===object?0:object.length;entry=influencesList[geometry.id];if(void 0===entry||entry.length!==material){entry=[];for(morphTargets=0;morphTargets<material;morphTargets++)entry[morphTargets]=[morphTargets,0];influencesList[geometry.id]=entry}for(morphTargets=0;morphTargets<material;morphTargets++)morphNormals=entry[morphTargets],
morphNormals[0]=morphTargets,morphNormals[1]=object[morphTargets];entry.sort(absNumericalSort);for(object=0;8>object;object++)object<material&&entry[object][1]?(workInfluences[object][0]=entry[object][0],workInfluences[object][1]=entry[object][1]):(workInfluences[object][0]=Number.MAX_SAFE_INTEGER,workInfluences[object][1]=0);workInfluences.sort(numericalSort);object=geometry.morphAttributes.position;material=geometry.morphAttributes.normal;entry=0;for(morphTargets=0;8>morphTargets;morphTargets++)width=
workInfluences[morphTargets],morphNormals=width[0],width=width[1],morphNormals!==Number.MAX_SAFE_INTEGER&&width?(object&&geometry.getAttribute("morphTarget"+morphTargets)!==object[morphNormals]&&geometry.setAttribute("morphTarget"+morphTargets,object[morphNormals]),material&&geometry.getAttribute("morphNormal"+morphTargets)!==material[morphNormals]&&geometry.setAttribute("morphNormal"+morphTargets,material[morphNormals]),morphInfluences[morphTargets]=width,entry+=width):(object&&!0===geometry.hasAttribute("morphTarget"+
morphTargets)&&geometry.deleteAttribute("morphTarget"+morphTargets),material&&!0===geometry.hasAttribute("morphNormal"+morphTargets)&&geometry.deleteAttribute("morphNormal"+morphTargets),morphInfluences[morphTargets]=0);object=geometry.morphTargetsRelative?1:1-entry;program.getUniforms().setValue(gl,"morphTargetBaseInfluence",object);program.getUniforms().setValue(gl,"morphTargetInfluences",morphInfluences)}}}};var _constants=require("module$node_modules$three$src$constants"),_DataTexture2DArray=
require("module$node_modules$three$src$textures$DataTexture2DArray"),_Vector=require("module$node_modules$three$src$math$Vector3"),_Vector2=require("module$node_modules$three$src$math$Vector2")}
//# sourceMappingURL=module$node_modules$three$src$renderers$webgl$WebGLMorphtargets.js.map
