{"version":3,"sources":["applied_science/js_interop/destructure.cljc"],"mappings":"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","names":["applied-science.js-interop.destructure/dequote","x","cljs.core/list?","cljs.core._EQ_","cljs.core/first","cljs.core/second","applied-science.js-interop.destructure/dot-access?","cljs.core/Symbol","clojure.string/starts-with?","cljs.core/name","applied-science.js-interop.destructure/dot-access","s","cljs.core.symbol","clojure.string/replace-first","applied-science.js-interop.destructure/*js?*","applied-science.js-interop.destructure/destructure","bindings","bents","cljs.core.partition","pb","bvec","b","v","b-meta","cljs.core/meta","js?","cljs.core/boolean","or__4253__auto__","*js?*-orig-val__89795","*js?*-temp-val__89796","pvec","gvec","cljs.core.gensym","gvec?","gseq","gfirst","has-rest","cljs.core/some","clj-rest?","and__4251__auto__","get-nth","n","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","get-rest","cljs.core/with-meta","ret","G__89804","cljs.core.conj","bs","seen-rest?","firstb","cljs.core/nnext","js/Error","cljs.core/next","pmap","gmap","defaults","bes","transforms","cljs.core.reduce","mk","cljs.core/Keyword","mkns","cljs.core/namespace","mkn","p1__89783#","cljs.core.assoc","cljs.core.keyword","p1__89784#","cljs.core/str","cljs.core/keys","entry","p1__89786#","p2__89787#","fexpr__89898","cljs.core/val","cljs.core.dissoc","cljs.core/key","fexpr__89900","bb","bk","k","getf","local","cljs.core/PROTOCOL_SENTINEL","bv","cljs.core/contains?","cljs.core/vector?","cljs.core/map?","process-entry","cljs.core/every?","cljs.core/symbol?","cljs.core.map","temp__5751__auto__","kwbs","p1__89789#","cljs.core.filter","cljs.core/ffirst","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/and-spec-impl","cljs.spec.alpha.spec_impl","cljs.core/identity","cljs.core/vec","cljs.spec.alpha/rep-impl","cljs.core/any?","cljs.spec.alpha/alt-impl","cljs.spec.alpha/rep+impl","p1__89938#","cljs.spec.alpha/maybe-impl","applied-science.js-interop.destructure/spec-reform","spec","args","update-conf","cljs.spec.alpha/conform","G__89978","cljs.spec.alpha/unform","p__89980","map__89981","cljs.core/--destructure-map","vec__89982","cljs.core.get","cljs.core.nth","applied-science.js-interop.destructure/update-argv+body","update-fn","arity","conf","update-pair","vec__89985","body-path","G__89988","params","body","G__89990","cljs.core.get_in","cljs.core/assoc-in","G__89998","cljs.core.update_in","p1__89979#","cljs.core.mapv","p__90031","vec__90032","applied-science.js-interop.destructure/maybe-destructured","new-params","lets","gparam","applied-science.js-interop.destructure/destructure-fn-args","p1__90115#"],"sourcesContent":["(ns applied-science.js-interop.destructure\n  (:refer-clojure :exclude [destructure])\n  (:require [clojure.string :as str]\n            [clojure.core :as c]\n            [clojure.spec.alpha :as s]))\n\n(defn- dequote [x]\n  (if (and (list? x) (= 'quote (first x)))\n    (second x)\n    x))\n\n(defn- dot-access? [x]\n  (and (symbol? x) (str/starts-with? (name x) \".-\")))\n\n(defn- dot-access [s]\n  (symbol (str/replace-first (name s) #\"^(?:\\.\\-)?\" \".-\")))\n\n(def ^:dynamic *js?* false)\n\n(c/defn destructure\n  \"Destructure with direct array and object access.\n\n  Invoked via ^:js metadata on binding form:\n\n  (let [^:js {:keys [a]} obj] ...)\n\n  Keywords compile to static keys, symbols to renamable keys,\n  and array access to `aget`.\"\n  [bindings]\n  ;; modified from cljs.core/destructure\n  (c/let [bents (partition 2 bindings)\n          pb (c/fn pb [bvec b v]\n               (let [b-meta (meta b)\n                     js? (boolean (cond (:clj b-meta) false\n                                        (= 'clj (:tag b-meta)) false\n                                        *js?* true\n                                        :else (or (:js b-meta)\n                                                  (:js/shallow b-meta)\n                                                  (= 'js (:tag b-meta)))))]\n                 (binding [*js?* (if (:js/shallow b-meta)\n                                   false\n                                   js?)]\n                   (c/let [pvec\n                           (c/fn [bvec b v]\n                             (c/let [gvec (gensym \"vec__\")\n                                     gvec? (gensym \"some_vec__\")\n                                     gseq (gensym \"seq__\")\n                                     gfirst (gensym \"first__\")\n                                     has-rest (some #{'&} b)\n                                     clj-rest? (and has-rest (not js?))\n                                     get-nth (fn [n]\n                                               (if js?\n                                                 `(when ~gvec? (aget ~gvec ~n))\n                                                 `(nth ~gvec ~n nil)))\n                                     get-rest (fn [n]\n                                                (if js?\n                                                  `(some->\n                                                     ~(with-meta gvec {:tag 'array})\n                                                     (.slice ~n))\n                                                  gseq))]\n                               (c/loop [ret (c/let [ret (cond-> (conj bvec gvec v)\n                                                                js? (conj gvec? `(some? ~gvec)))]\n                                              (if clj-rest?\n                                                (conj ret gseq (c/list `seq gvec))\n                                                ret))\n                                        n 0\n                                        bs b\n                                        seen-rest? false]\n                                 (if (seq bs)\n                                   (c/let [firstb (first bs)]\n                                     (c/cond\n                                       (= firstb '&) (recur (pb ret (second bs) (get-rest n))\n                                                            n\n                                                            (nnext bs)\n                                                            true)\n                                       (= firstb :as) (pb ret (second bs) gvec)\n                                       :else (if seen-rest?\n                                               (throw #?(:clj  (new Exception \"Unsupported binding form, only :as can follow & parameter\")\n                                                         :cljs (new js/Error \"Unsupported binding form, only :as can follow & parameter\")))\n                                               (recur (pb (if clj-rest?\n                                                            (conj ret\n                                                                  gfirst `(first ~gseq)\n                                                                  gseq `(next ~gseq))\n                                                            ret)\n                                                          firstb\n                                                          (if clj-rest?\n                                                            gfirst\n                                                            (get-nth n)))\n                                                      (c/inc n)\n                                                      (next bs)\n                                                      seen-rest?))))\n                                   ret))))\n                           pmap\n                           (c/fn [bvec b v]\n                             (c/let [gmap (gensym \"map__\")\n                                     defaults (:or b)]\n                               (c/loop [ret (c/-> bvec (conj gmap) (conj v)\n                                                  (conj gmap) (conj `(if (~'cljs.core/implements? c/ISeq ~gmap) (apply cljs.core/hash-map ~gmap) ~gmap))\n                                                  ((c/fn [ret]\n                                                     (if (:as b)\n                                                       (conj ret (:as b) gmap)\n                                                       ret))))\n                                        bes (c/let [transforms\n                                                    (reduce\n                                                      (c/fn [transforms mk]\n                                                        (if (c/keyword? mk)\n                                                          (c/let [mkns (namespace mk)\n                                                                  mkn (name mk)]\n                                                            (c/cond (= mkn \"keys\") (assoc transforms mk #(keyword (c/or mkns (namespace %)) (name %)))\n                                                                    (= mkn \"syms\") (assoc transforms mk #(c/list `quote (symbol (c/or mkns (namespace %)) (name %))))\n                                                                    (= mkn \"strs\") (assoc transforms mk c/str)\n                                                                    :else transforms))\n                                                          transforms))\n                                                      {}\n                                                      (keys b))]\n                                              (reduce\n                                                (c/fn [bes entry]\n                                                  (reduce #(assoc %1 %2 ((val entry) %2))\n                                                          (dissoc bes (key entry))\n                                                          ((key entry) bes)))\n                                                (dissoc b :as :or)\n                                                transforms))]\n                                 (if (seq bes)\n                                   (c/let [bb (key (first bes))\n                                           bk (val (first bes))\n\n                                           ;; convert renamable keys to .-dotFormat\n                                           bk (let [k (dequote bk)]\n                                                (if (and js? (symbol? k))\n                                                  (dot-access k)\n                                                  bk))\n                                           ;; use js-interop for ^js-tagged bindings & other renamable keys\n                                           getf (if js?\n                                                  'applied-science.js-interop/get\n                                                  'cljs.core/get)\n\n                                           local (if #?(:clj  (c/instance? clojure.lang.Named bb)\n                                                        :cljs (cljs.core/implements? INamed bb))\n                                                   (with-meta (symbol nil (name bb)) (meta bb))\n                                                   bb)\n                                           bv (if (contains? defaults local)\n                                                (c/list getf gmap bk (defaults local))\n                                                (c/list getf gmap bk))]\n                                     (recur\n                                       (if (c/or (c/keyword? bb) (c/symbol? bb)) ;(ident? bb)\n                                         (c/-> ret (conj local bv))\n                                         (pb ret bb bv))\n                                       (next bes)))\n                                   ret))))]\n                     (c/cond\n                       (c/symbol? b) (c/-> bvec (conj (if (namespace b) (symbol (name b)) b)) (conj v))\n                       (c/keyword? b) (c/-> bvec (conj (symbol (name b))) (conj v))\n                       (vector? b) (pvec bvec b v)\n                       (map? b) (pmap bvec b v)\n                       :else (throw\n                               #?(:clj  (new Exception (c/str \"Unsupported binding form: \" b))\n                                  :cljs (new js/Error (c/str \"Unsupported binding form: \" b)))))))))\n          process-entry (c/fn [bvec b] (pb bvec (first b) (second b)))]\n    (if (every? c/symbol? (map first bents))\n      bindings\n      (c/if-let [kwbs (seq (filter #(c/keyword? (first %)) bents))]\n        (throw\n          #?(:clj  (new Exception (c/str \"Unsupported binding key: \" (ffirst kwbs)))\n             :cljs (new js/Error (c/str \"Unsupported binding key: \" (ffirst kwbs)))))\n        (reduce process-entry [] bents)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Function argument parsing\n\n(s/def ::argv+body\n  (s/cat :params (s/and\n                   vector?\n                   (s/conformer identity vec)\n                   (s/cat :params (s/* any?)))\n         :body (s/alt :prepost+body (s/cat :prepost map?\n                                           :body (s/+ any?))\n                      :body (s/* any?))))\n\n(s/def ::function-args\n  (s/cat :fn-prelude (s/* #(and (not (vector? %)) (not (list? %))))\n         :fn-tail (s/alt :arity-1 ::argv+body\n                         :arity-n (s/cat :bodies (s/+ (s/spec ::argv+body))\n                                         :attr-map (s/? map?)))))\n\n(c/defn- spec-reform [spec args update-conf]\n  (->> (s/conform spec args)\n       (update-conf)\n       (s/unform spec)))\n\n(c/defn- update-argv+body [update-fn {[arity] :fn-tail :as conf}]\n  (let [update-pair\n        (fn [conf]\n          (let [body-path (cond-> [:body 1]\n                                  (= :prepost+body (first (:body conf))) (conj :body))\n                [params body] (update-fn [(get-in conf [:params :params])\n                                          (get-in conf body-path)])]\n            (-> conf\n                (assoc-in [:params :params] params)\n                (assoc-in body-path body))))]\n    (case arity\n      :arity-1 (update-in conf [:fn-tail 1] update-pair)\n      :arity-n (update-in conf [:fn-tail 1 :bodies] #(mapv update-pair %)))))\n\n(c/defn- maybe-destructured\n  [[params body]]\n  (if (every? symbol? params)\n    [params body]\n    (loop [params params\n           new-params (with-meta [] (meta params))\n           lets []]\n      (if params\n        (if (symbol? (first params))\n          (recur (next params) (conj new-params (first params)) lets)\n          (c/let [gparam (gensym \"p__\")]\n            (recur (next params) (conj new-params gparam)\n                   (conj lets (first params) gparam))))\n        [new-params\n         `[(~'applied-science.js-interop/let ~lets\n             ~@body)]]))))\n\n(c/defn destructure-fn-args [args]\n  (spec-reform ::function-args args #(update-argv+body maybe-destructured %)))\n"]}