{"version":3,"sources":["flatland/ordered/map.cljs"],"mappings":";AAEA,AAAA,AAEA,yCAAA,zCAAMA,0FAAmBC,OAAOC,IAAIC,GAAGC;AAAvC,AACE,OAACC,+BACAJ,OACA,WAAKK,EAAEC,EAAEH;AAAT,AACE,mBAAA,nBAACI,iBAAOD;;AACR,AAACC,iBAAOD,EAAE,AAACE,wGAAOH;;AAClB,mBAAA,nBAACE,iBAAOD;;AACR,AAACC,iBAAOD,EAAE,AAACE,wGAAO,AAACC,4CAAIR,IAAII;;AAC3B,0BAAA,nBAACE,iBAAOD;GAPX,IAAA,IAAA,IASCH,KACAD;;AAEH,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,6DAAAQ,7DAASU;;AAAT,CAAA,AAAA,0EAAA,1EAASA,qFAuFCE,MAAKjB;;AAvFf,AAAA,gBAAA,ZAuFUiB;AAvFV,AAwFI,OAACsD,gBAAM3E,WAAII;;;AAxFf,CAAA,AAAA,sDAAA,tDAASe;;AAAT,AAAA,YAAA,RAoBcE;AApBd,AAoBoB,OAACgC,mBAAS,AAACE,4CAAIF,mBAASrD;;;AApB5C,CAAA,AAAA,oDAAA,pDAASmB;;6BAWQU;;AAXjB,AAAA,YAAA,RAWYR;AAXZ,AAYI,IAAAS,aAAA,AAAAH,cAAU1B;IAAV8B,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,QAAA,AAAAD,kDAAAE,tDAAQ7B;AAAR,AAAA,AACE,IAAAsC,iBAAGtC;IAAHuC,iBAAK,AAACnC,4CAAIR,WAAII;IAAdwC,iBAAiBvB;AAAjB,AAAA,mEAAAqB,eAAAC,eAAAC,8BAAAF,eAAAC,eAAAC,5JAACf,kCAAAA,gFAAAA;;AADH;AAAA,eAAAC;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAC,qBAAA,AAAAP,cAAAG;AAAA,AAAA,GAAAI;AAAA,AAAA,IAAAJ,iBAAAI;AAAA,AAAA,GAAA,AAAAC,6BAAAL;AAAA,IAAAM,kBAAA,AAAAC,sBAAAP;AAAA,AAAA,eAAA,AAAAQ,qBAAAR;eAAAM;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,QAAA,AAAAI,gBAAAV,pBAAQ1B;AAAR,AAAA,AACE,IAAAyC,iBAAGzC;IAAH0C,iBAAK,AAACtC,4CAAIR,WAAII;IAAd2C,iBAAiB1B;AAAjB,AAAA,mEAAAwB,eAAAC,eAAAC,8BAAAF,eAAAC,eAAAC,5JAAClB,kCAAAA,gFAAAA;;AADH;AAAA,eAAA,AAAAY,eAAAX;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;6BAEaD,EAAEmB;;AAdnB,AAAA,YAAA,RAcY3B;AAdZ,AAeI,IAAA4B,aAAA,AAAAtB,cAAU1B;IAAViD,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,QAAA,AAAAD,kDAAAE,tDAAQhD;AAAR,AAAA,AACE,AAAOyB,OAAEmB,YAAY5C,EAAE,AAACI,4CAAIR,WAAII,GAAGiB;;AADrC;AAAA,eAAA4B;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAlB,qBAAA,AAAAP,cAAAsB;AAAA,AAAA,GAAAf;AAAA,AAAA,IAAAe,iBAAAf;AAAA,AAAA,GAAA,AAAAC,6BAAAc;AAAA,IAAAb,kBAAA,AAAAC,sBAAAY;AAAA,AAAA,eAAA,AAAAX,qBAAAW;eAAAb;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,QAAA,AAAAI,gBAAAS,pBAAQ7C;AAAR,AAAA,AACE,AAAOyB,OAAEmB,YAAY5C,EAAE,AAACI,4CAAIR,WAAII,GAAGiB;;AADrC;AAAA,eAAA,AAAAoB,eAAAQ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;oBADapB,EAAEmB;;;6BAAFnB;;6BAAAA,EAAEmB;;;;;;;;;;AAdnB,CAAA,AAAA,gDAAA,hDAAS7B,2DAUIf;;AAVb,AAAA,YAAA,RAUQiB;AAVR,AAUgB,OAAMrB,eAAII;;;AAV1B,CAAA,AAAA,oDAAA,pDAASe;;AAAT,AAAA,YAAA,RAmBcE;AAnBd,AAmBoB,OAACgC,mBAAS,AAACC,eAAKtD;;;AAnBpC,CAAA,AAAA,oDAAA,pDAASmB;;AAAT,AAAA,YAAA,RAOYE;AAPZ,AAOkB,OAACK,+BAAqB,AAACC,cAAI3B;;;AAP7C,CAAA,AAAA,sDAAA,tDAASmB;;AAAT,AAAA,YAAA,RAqBcE;AArBd,AAqBoB,OAACgC,mBAAS,AAACE,4CAAIC,cAAIxD;;;AArBvC,CAAA,AAAA,qDAAA,rDAASmB;;AAAT,AAAA,YAAA,RAEaE;AAFb,AAEmB,OAACC,uBAAQD;;;AAF5B,CAAA,AAAA,iDAAA,jDAASF;;AAAT,AAAA,YAAA,RAMSE;AANT,AAMe,OAACI,uBAAaxB;;;AAN7B,CAAA,AAAA,mDAAA,nDAASkB;;AAAT,AAAA,YAAA,RAQWE;AARX,AAQiB,OAACI,uBAAa,AAACG,eAAK5B;;;AARrC,CAAA,AAAA,kDAAA,lDAASmB,6DAGMI;;AAHf,AAAA,YAAA,RAGUF;AAHV,AAGqB,QAACG,gEAAAA,iFAAAA,nBAAWxB,6DAAAA,lDAAIuB,6DAAAA;;;AAHrC,CAAA,AAAA,gDAAA,hDAASJ,2DASIf;;AATb,AAAA,YAAA,RASQiB;AATR,AASgB,UAAK,sBAAA,rBAAM,AAAMrB,eAAII;;;AATrC,CAAA,AAAA,8EAAA,9EAASe,yFA2EGE,MAAKyD;;AA3EjB,AAAA,gBAAA,ZA2EYzD;AA3EZ,AA2EiC,OAAC0D,kBAAQ/E,WAAI8E;;;AA3E9C,CAAA,AAAA,8EAAA,9EAAS3D,yFA4EGE,MAAKyD,KAAKE;;AA5EtB,AAAA,gBAAA,ZA4EY3D;AA5EZ,AA4EiC,OAAC0D,kBAAQ/E,WAAI8E,KAAKE;;;AA5EnD,CAAA,AAAA,mFAAA,nFAAS7D,8FAiGM0C,KAAKhC,EAAEuD;;AAjGtB,AAAA,eAAA,XAiGevB;AAjGf,AAkGI,OAACwB,+CACA,WAAKC,IAAIlF;AAAT,AACE,IAAAmF,WAAGD;IAAHE,WAAOpF;IAAPqF,WAAS,AAACjF,4CAAIR,WAAII;AAAlB,AAAA,0EAAAmF,SAAAC,SAAAC,wBAAAF,SAAAC,SAAAC,9HAAC5D,kCAAAA,8DAAAA;GACHuD,KACAnF;;;AAtGL,CAAA,AAAA,0FAAA,1FAASkB,qGA6GMsC,EAAE1D,OAAOG;;AA7GxB,AAAA,YAAA,RA6GeuD;AA7Gf,AA8GI,wBAAA,xBAACnD,iBAAOP;;AACR,OAACD,uCAAkBC,OAAOC,WAAIC,UAAGC;;;AA/GrC,CAAA,AAAA,0EAAA,1EAASiB,qFAoCCE;;AApCV,AAAA,gBAAA,ZAoCUA;AApCV,AAoCgB,OAACsC,eAAK3D;;;AApCtB,CAAA,AAAA,gFAAA,hFAASmB,2FAwBEsC;;AAxBX,AAAA,YAAA,RAwBWA;AAxBX,AAwBc,YAAAtC,gCAAanB,WAAIC;;;AAxB/B,CAAA,AAAA,8EAAA,9EAASkB,yFAwEEE;;AAxEX,AAAA,gBAAA,ZAwEWA;AAxEX,AAwEiB,OAACkB,gBAAMvC;;;AAxExB,CAAA,AAAA,gFAAA,hFAASmB,2FAmECE;;AAnEV,AAAA,gBAAA,ZAmEUA;AAnEV,AAoEI,GAAM,AAACM,cAAI1B;AAAX,AACE,mDAAA,WAAA2E,vDAACrB;AAAD,AAAM,kCAAAqB,3BAACD,gBAAM3E;GAAO,AAAC6E,eAAK5E;;AAD5B;;;;AApEJ,CAAA,AAAA,0EAAA,1EAASkB,qFA2DCsC;;AA3DV,AAAA,YAAA,RA2DUA;AA3DV,AA2Da,OAACgB,eAAKzE;;;AA3DnB,CAAA,AAAA,4EAAA,5EAASmB,uFAwDEE,MAAKE;;AAxDhB,AAAA,gBAAA,ZAwDWF;AAxDX,AAwDsB,QAACG,gEAAAA,iFAAAA,nBAAWxB,6DAAAA,lDAAIuB,6DAAAA;;;AAxDtC,CAAA,AAAA,0FAAA,1FAASJ,qGAkDEE;;AAlDX,AAAA,gBAAA,ZAkDWA;AAlDX,AAmDI,GAAI,AAACM,cAAI1B;AACP,YAAAkB,6DAAA,7BAAa,AAACqD,iBAAOxE;;AACrBqB;;;;AArDN,CAAA,AAAA,2EAAA,3EAASF,sFA2FGE,MAAKjB;;AA3FjB,AAAA,gBAAA,ZA2FYiB;AA3FZ,AA4FI,GAAI,AAAC4C,0BAAUjE,WAAII;AACjB,YAAAe,gCAAa,AAACgE,+CAAOnF,WAAII,GAAG,6CAAA,7CAAC+D,8EAAQ,+CAAA,/CAACI,8FAASnE,KAAIH;;AACnDoB;;;;AA9FN,CAAA,AAAA,kFAAA,lFAASF,6FA+EE0C,KAAKzD,EAAE6E;;AA/ElB,AAAA,eAAA,XA+EWpB;AA/EX,AAgFI,YAAA1C,gCAAa,AAAC+D,8CAAMlF,WAAII,EAAE6E,GAAG,EAAI,AAAChB,0BAAUjE,WAAII,IACjBH,UACA,AAAC+D,6CAAK/D,UAAGG;;;AAlF5C,CAAA,AAAA,gGAAA,hGAASe,2GAmFUE,MAAKjB;;AAnFxB,AAAA,gBAAA,ZAmFmBiB;AAnFnB,AAoFI,OAAC4C,0BAAUjE,WAAII;;;AApFnB,CAAA,AAAA,4EAAA,5EAASe,uFA8DAE;;AA9DT,AAAA,gBAAA,ZA8DSA;AA9DT,AA+DI,GAAM,AAACM,cAAI1B;AAAX,AACE,mDAAA,WAAAyE,vDAACnB;AAAD,AAAM,kCAAAmB,3BAACC,gBAAM3E;GAAOC;;AADtB;;;;AA/DJ,CAAA,AAAA,mFAAA,nFAASkB,8FA8BME,MAAKqC;;AA9BpB,AAAA,gBAAA,ZA8BerC;AA9Bf,AA+BI,GAAI,CAAY,AAACsC,eAAK3D,gBAAK0D;AACzBrC;;AACA,YAAAF,gCAAa,AAACyC,oBAAU5D,WAAI0D,UAAUzD;;;;AAjC5C,CAAA,AAAA,gFAAA,hFAASkB,2FAuCC0C,KAAKC;;AAvCf,AAAA,eAAA,XAuCUD;AAvCV,AAwCI,GAAI,AAACE,wBAAQD;AACX,YAAA3C,gCAAa,AAAC6C,6CAAKhE,WAAI8D,OAAO,EAAI,AAACG,0BAAUjE,WAAI,qBAAA,rBAACkE,eAAKJ,aACvB7D,UACA,AAAC+D,6CAAK/D,UAAG,qBAAA,rBAACiE,eAAKJ;;AAC/C,YAAA3C,gCAAa,AAAC6C,6CAAKhE,WAAI8D,OAAO,AAACK,6CAAKlE,UACA,AAACmE,6CAAK,4CAAA,WAAAC,vDAACd;AAAD,AAAM,sBAAAc,iBAAA,hCAACH;IACP,+CAAA,WAAAI,1DAACC;AAAD,AAAS,4CAAAD,rCAACL,0BAAUjE;KAC1B8D;;;;AA/C1C,CAAA,AAAA,iDAAA,WAAApD,5DAASS;;AAAT,AAAA,IAAAR,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD,qCAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,kDAAA,WAAAF,OAAAG,pEAASK;;AAAT,AAAA,IAAAR,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,0EAAA,1EAASK,qFAyGQf;;AAzGjB,AAAA,YAAA,RAyGYiB;AAzGZ,AAyGoB,QAACrB,2CAAAA,8CAAAA,LAAII,0BAAAA;;;AAzGzB,CAAA,AAAA,0EAAA,1EAASe,qFA0GQf,EAAE4E;;AA1GnB,AAAA,YAAA,RA0GY3D;AA1GZ,AA0G8B,QAACrB,2CAAAA,wDAAAA,fAAII,oCAAAA,lCAAE4E,oCAAAA;;;AA1GrC,CAAA,2CAAA,3CAAS7D;AAAT,AAAA,AAAA;;;AAAA,CAAA,iDAAA,jDAASA;;AAAT,CAAA,oDAAA,pDAASA;;AAAT,CAAA,yDAAA,WAAAH,mBAAAC,qBAAAC,5GAASC;AAAT,AAAA,OAAAb,iBAAAW,qBAAA;;;AAAA;;;uCAAA,vCAASG,sFAAYpB,IAAIC;AAAzB,AAAA,YAAAkB,gCAAqBnB,IAAIC;;;AAAhBkB,AAiHT,kCAAA,lCAAMK,4EAAYxB,IAAIuB;AAAtB,AACE,OAACmE,6CAAE1F,IAAI,EAAI,iBAAWmB,hBAAWI,kDACxB,AAAOA,SACPA;;AAEX,AAAeoE,yCAAkB,KAAAxE,gCAAA,mCAAA;AAEjC,AAAA,mCAAA,2CAAAyE,9EAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,+DAAA,CAAA,UAAA;;;;AAAA,IAAAC,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,KAAAC,qBAAA,AAAAJ,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAAD,sEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAI;;;;;AAAA,CAAA,iEAAA,jEAAMJ;AAAN,AAEGH;;;AAFH,CAAA,iEAAA,jEAAMG,4EAGFjC;AAHJ,AAIG,OAACM,6CAAKwB,uCAAkB9B;;;AAJ3B,AAAA,CAAA,wEAAA,xEAAMiC,mFAKF1F,EAAE6E,EAAIjF;AALV,AAMG,OAACwG,8CAAMC,gBAAMd,uCAAkBvF,EAAE6E,EAAEjF;;;AANtC;AAAA,CAAA,qDAAA,WAAAoG,hEAAMN;AAAN,AAAA,IAAAO,WAAA,AAAA7D,gBAAA4D;IAAAA,eAAA,AAAA3D,eAAA2D;IAAAE,WAAA,AAAA9D,gBAAA4D;IAAAA,eAAA,AAAA3D,eAAA2D;AAAA,AAAA,IAAAG,qBAAA;AAAA,AAAA,OAAAA,wDAAAF,SAAAC,SAAAF;;;AAAA,CAAA,2DAAA,3DAAMN;;AAAN,AAQA","names":["flatland.ordered.map/print-ordered-map","writer","kvs","ks","opts","cljs.core/pr-sequential-writer","k","w","cljs.core/-write","cljs.core.pr_str","cljs.core.get","cljs.core/PROTOCOL_SENTINEL","unused__43702__auto__","self__","G__86079","js/Error","args86013","cljs.core/aclone","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","flatland.ordered.map/OrderedMap","flatland.ordered.map/->OrderedMap","this","cljs.core/pr-str*","that","flatland.ordered.map/equiv-impl","cljs.core/es6-iterator","cljs.core/es6-entries-iterator","cljs.core/seq","cljs.core/vals","f","seq__86016","chunk__86017","count__86018","i__86019","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","G__86030","G__86031","G__86032","G__86037","G__86038","G__86039","use-as-this","seq__86040","chunk__86041","count__86042","i__86043","cljs.core/to-array","cljs.core/keys","cljs.core.map","cljs.core/val","_","new-meta","cljs.core/meta","cljs.core/with-meta","coll","entry","cljs.core/vector?","cljs.core.conj","cljs.core/contains?","cljs.core/-nth","cljs.core.into","cljs.core.comp","p1__86009#","p1__86010#","cljs.core.remove","cljs.core/-empty","cljs.core/hash","p1__86011#","cljs.core/-find","p1__86012#","cljs.core/rseq","attr","cljs.core/-lookup","not-found","v","cljs.core.assoc","cljs.core.dissoc","init","cljs.core.reduce","acc","G__86063","G__86064","G__86065","cljs.core._EQ_","flatland.ordered.map/empty-ordered-map","var_args","G__86090","flatland.ordered.map/ordered-map","args-arr__4885__auto__","len__4864__auto__","i__4865__auto__","argseq__4886__auto__","cljs.core/IndexedSeq","seq86086","G__86087","G__86088","self__4851__auto__","cljs.core.apply","cljs.core/assoc"],"sourcesContent":["(ns flatland.ordered.map)\n\n(declare equiv-impl)\n\n(defn print-ordered-map [writer kvs ks opts]\n  (pr-sequential-writer\n   writer\n   (fn [k w opts]\n     (-write w \\[)\n     (-write w (pr-str k))\n     (-write w \\space)\n     (-write w (pr-str (get kvs k)))\n     (-write w \\]))\n   \"(\" \" \" \")\"\n   opts\n   ks))\n\n(deftype OrderedMap [kvs ks]\n  Object\n  (toString [this] (pr-str* this))\n  (equiv [this that] (equiv-impl kvs that))\n\n  ;; js/map interface\n  (keys [this] (es6-iterator ks))\n  (entries [this] (es6-entries-iterator (seq kvs)))\n  (values [this] (es6-iterator (vals kvs)))\n  (has [this k] (not (nil? (.get kvs k))))\n  (get [this k] (.get kvs k))\n  (forEach [this f]\n    (doseq [k ks]\n      (f k (get kvs k) this)))\n  (forEach [this f use-as-this]\n    (doseq [k ks]\n      (.call f use-as-this k (get kvs k) this)))\n\n  ;; js fallbacks\n  (key_set   [this] (to-array (keys kvs)))\n  (entry_set [this] (to-array (map to-array kvs)))\n  (value_set [this] (to-array (map val kvs)))\n\n  ICloneable\n  (-clone [_] (OrderedMap. kvs ks))\n\n  ;; IIterable\n  ;; (-iterator [_] )\n\n  IWithMeta\n  (-with-meta [this new-meta]\n    (if (identical? (meta kvs) new-meta)\n      this\n      (OrderedMap. (with-meta kvs new-meta) ks)))\n\n  IMeta\n  (-meta [this] (meta kvs))\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (OrderedMap. (conj kvs entry) (if (contains? kvs (-nth entry 0))\n                                      ks\n                                      (conj ks (-nth entry 0))))\n      (OrderedMap. (conj kvs entry) (into ks\n                                          (comp (map #(-nth % 0))\n                                                (remove #(contains? kvs %)))\n                                          entry))))\n\n  IEmptyableCollection\n  (-empty [this]\n    (if (seq ks)\n      (OrderedMap. (-empty kvs) [])\n      this))\n\n  IEquiv\n  (-equiv [this that] (equiv-impl kvs that))\n\n  IHash\n  (-hash [_] (hash kvs))\n\n  ISeqable\n  (-seq [this]\n    (when (seq ks)\n      (map #(-find kvs %) ks)))\n\n  IReversible\n  (-rseq [this]\n    (when (seq ks)\n      (map #(-find kvs %) (rseq ks))))\n\n  ICounted\n  (-count [this] (count kvs))\n\n  ILookup\n  (-lookup [this attr]           (-lookup kvs attr))\n  (-lookup [this attr not-found] (-lookup kvs attr not-found))\n\n  IAssociative\n  (-assoc [coll k v]\n    (OrderedMap. (assoc kvs k v) (if (contains? kvs k)\n                                   ks\n                                   (conj ks k))))\n  (-contains-key? [this k]\n    (contains? kvs k))\n\n  IFind\n  (-find [this k]\n    (-find kvs k))\n\n  IMap\n  (-dissoc [this k]\n    (if (contains? kvs k)\n      (OrderedMap. (dissoc kvs k) (into [] (remove #{k}) ks))\n      this))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (reduce\n     (fn [acc k]\n       (f acc k (get kvs k)))\n     init\n     ks))\n\n  IFn\n  (-invoke [this k] (kvs k))\n  (-invoke [this k not-found] (kvs k not-found))\n\n  IPrintWithWriter\n  (-pr-writer [_ writer opts]\n    (-write writer \"#ordered/map \")\n    (print-ordered-map writer kvs ks opts)))\n\n(defn equiv-impl [kvs that]\n  (= kvs (if (instance? OrderedMap that)\n           (.-kvs that)\n           that)))\n\n(def ^:private empty-ordered-map (OrderedMap. {} []))\n\n(defn ordered-map\n  ([]\n   empty-ordered-map)\n  ([coll]\n   (into empty-ordered-map coll))\n  ([k v & kvs]\n   (apply assoc empty-ordered-map k v kvs)))\n\n(comment\n  (ordered-map :foo 123 :bar 456)\n  ;; => #ordered/map [:foo 123, :bar 456]\n\n  (conj (ordered-map :foo 123 :bar 456) [:baz 123])\n  ;; => #ordered/map [:foo 123, :bar 456, :baz 123]\n\n  (assoc (ordered-map :foo 123 :bar 456)\n         :baz 123\n         :baq 999)\n  ;; => #ordered/map [:foo 123, :bar 456, :baz 123, :baq 999]\n\n  (merge (ordered-map :foo 123 :bar 456)\n         {:baz 123\n          :baq 999})\n  ;; => #ordered/map [:foo 123, :bar 456, :baz 123, :baq 999]\n\n  (= (ordered-map :foo 123 :bar 456 :baz 123)\n     {:foo 123 :bar 456 :baz 123})\n  ;; => true\n\n  (= {:foo 123 :bar 456 :baz 123}\n     (ordered-map :foo 123 :bar 456 :baz 123))\n  ;; => true\n\n  (map? (ordered-map :foo 123 :bar 456 :baz 123))\n  ;; => true\n\n  (empty (ordered-map :foo 123 :bar 456 :baz 123))\n  ;; => #ordered/map []\n\n  (ordered-map)\n  ;; => #ordered/map []\n\n  (seq (ordered-map))\n  ;; => nil\n\n  (reduce conj [] (ordered-map :foo 123 :bar 456 :baz 123))\n  ;; => [[:foo 123] [:bar 456] [:baz 123]]\n\n  (keys (ordered-map :foo 123 :bar 456 :baz 123))\n  ;; => (:foo :bar :baz)\n\n  (vals (ordered-map :foo 123 :bar 456 :baz 789))\n  ;; => (123 456 789)\n\n  (meta (with-meta (ordered-map) {:foo :bar}))\n  ;; => {:foo :bar}\n\n  (-> (ordered-map)\n      (assoc-in [:foo :bar] 1)\n      (assoc-in [:foo :baz] 2))\n\n  (into (ordered-map) [[:foo 1] [:bar 2] [:foo 3]])\n  ;; #ordered/map [:foo 3, :bar 2]\n\n  )\n"]}