{"version":3,"sources":["sicmutils/calculus/manifold.cljc"],"mappings":";AAsGA,AAAA;;;;;;;;;;mDAAA,2DAAAA,9GAAME;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,+EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iFAAA,jFAAMD,4FASFE;AATJ,AAUG,kGAAA,AAAA,3FAACC,+EAAqBD;;;AAVzB,CAAA,iFAAA,jFAAMF,4FAWFE,YAAYE;AAXhB,AAAA,GAYU,0BAAA,iFAAA,AAAA,6DAAA,AAAA,oEAAA,AAAA,5OAACC,sUAAwCD;AAZnD;AAAA,AAAA,MAAA,KAAAH,MAAA;;;AAAA,kDAAA,yDAAA,+EAAA,0EAAA,mCAAA,qDAAA,tPAaUG,wEACOF;;;AAdjB,CAAA,2EAAA,3EAAMF;;AAAN,AAkBA;;;;qDAAA,rDAAMM,kHAGHC;AAHH,AAIE,4EAAA,rEAACC,6CAAE,AAACC,qBAAOF;;AAEb,AAAA;;;;;;;;;;;;4CAAA,oDAAAT,hGAAMa;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAV,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0EAAA,1EAAMU,qFAWFC,OAAOC;AAXX,AAYG,OAACC,wEAAcF,OAAOC,EAAEA;;;AAZ3B,CAAA,0EAAA,1EAAMF,qFAaFC,OAAOC,EAAEE;AAbb,AAAA,GAcU,AAACC,yBAASH;AAdpB;AAAA,AAAA,MAAA,KAAAZ,MAAA;;;AAAA,GAeU,KAAA,JAAGY;AAfb;AAAA,AAAA,MAAA,KAAAZ,MAAA;;;AAAA,GAgBU,CAAIc,uBAAoBF;AAhBlC;AAAA,AAAA,MAAA,KAAAZ,MAAA;;;AAAA,kDAAA,iEAAA,oLAAA,gEAAA,uGAAA,qDAAA,vZAiBYW,4DACF,AAACK,mBAAO,AAAA,iGAAcL,QAAQC,iEACzBA,qFACUE;;;AApBzB,CAAA,oEAAA,pEAAMJ;;AAAN,AAuBA;;;;8CAAA,9CAAMO,oGAGHX;AAHH,AAIE,4EAAA,rEAACC,6CAAE,AAACC,qBAAOF;;AAEb;;;;4CAAA,5CAAMY,gGAGHC;AAHH,AAIE,+DAAA,mFAAA,0DAAA,rMAACC,+CAAOD;;AAEV;;;;;uCAAA,vCAAME,sFAIHf;AAJH,AAKE,GAAI,AAACW,4CAAUX;AACbA;;AACA,OAAA,iJAAY,AAACgB,eAAKhB;;;AAItB;;;yCAAA,zCAAOiB,0FAEJC;AAFH,AAAA,kDAAA,0DAAA,iFAAA,tFAGSA;;AAGT;;;;;;;2CAAA,3CAAMC,8FAMHd,OAAOe;AANV,AAOE,IAAMC,QAAM,AAACJ,uCAAWG;AAAxB,AACE,iCAAA,mFAAA,7GAACE,mBAASjB,oKAAyBe,mBAAYC;;AAEnD;;;0CAAA,1CAAME,4FAEHV;AAFH,AAGE,OAACW,sBACA,wDAAA,mFAAA,0DAAA,rMAACV,+CAAOD;;AAEX;;;;;;;;;;;;wCAAA,xCAAMY,wFAWHZ,SAASO;AAXZ,AAYE,IAAAM,qBAAa,wDAAA,mFAAA,0DAAA,rMAACZ,+CAAOD,gOAAmCO;AAAxD,AAAA,oBAAAM;AAAA,UAAAA,NAASC;AAAT,AACE,yDAAA,lDAACC,8CAAMD,kEAAcd;;AACrB,MACC,gDAAA,iBAAA,2CAAA,6EAAA,zLAACgB,8KACqBT,yEACFP;;;AAQzB;;;;;uDAAA,vDAAMiB,sHAIHzB,OAAO0B,uBAAuBX,WAAWY;AAJ5C,AAKE,SAAA,mFAAA,qFAAA,7KAAMC,kKAAqBb,4FACGW;IACxBG,IAAGF;AAFT,AAGE,OAACV,mBAASjB,OAAO4B,GAAGC;;AAExB;;;;sDAAA,tDAAMC,oHAGHd;AAHH,AAIE,OAACG,sBACA,AAAA,+GAAqBH;;AAExB;;;;;;oDAAA,pDAAOe,gHAKJf,MAAMgB;AALT,AAME,IAAAC,mBAAI,qDAAA,mFAAA,xIAACxB,+CAAOO,0KAA2BgB;AAAvC,AAAA,oBAAAC;AAAAA;;AACI,MACC,gDAAA,6BAAA,2CAAA,sGAAA,9NAACT,kNACiCQ,kEACjBhB;;;AAExB;;;;mDAAA,nDAAMkB,8GAGH1B,SAASkB,uBAAuBX;AAHnC,AAIE,IAAMC,QAAM,AAACI,sCAAUZ,SAASO;IAC1BoB,OAAM,AAACJ,kDAAsBf,MAAMU;AADzC,AAEE,QAACS,qCAAAA,+CAAAA,ZAAK3B,2BAAAA;;AAOV,AAAA,AAEA,AAAA;;;;;;;;;;;;kDAAA,0DAAAtB,5GAAOmD;AAAP,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAhD,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gFAAA,hFAAOgD,2FAWHC,KAAK9B;AAXT,AAAA,kDAAA,qDAAA,8HAAA,yDAAA,uEAAA,5EAaU8B,mEACI9B,0GACkB,6CAAA,7CAAC+B;;;AAfjC,CAAA,gFAAA,hFAAOF,2FAgBHC,KAAK9B,SAASgC,kBAAkBC;AAhBpC,AAiBG,IAAMC,QAAM,AAACC,8EAAoBL,KAAK9B;IAChCoC,OAAM,AAAA,+HAA6BF;AADzC,AAEE,AAACG,mDAAMD,KAAKE,gBAAM,CAACC,iEAAAA,oFAAAA,rBAAKP,gEAAAA,oBAAmBC;;AAC3CC;;;AApBL,CAAA,0EAAA,1EAAOL;;AAAP,AAsBA;;;;4DAAA,5DAAMW,gIAGHN;AAHH,AAIE,OAAA,kFAAOA;;AAET;;;iDAAA,jDAAMO,0GAEHP;AAFH,AAGE,OAAA,4FAAWA;;AAEb;;;oDAAA,pDAAMQ,gHAEHC;AAFH,AAGE,4EAAA,rEAACvD,6CAAE,AAACC,qBAAOsD;;AAEb;;;;uDAAA,vDAAOC,sHAGJV,MAAMlC;AAHT,AAIE,SAAK,AAAC0C,kDAAgBR,YACjB,AAAC9C,6CAAE,AAACqD,+CAAgBP,OACjBlC;;AAEV;;;;;;8CAAA,9CAAM6C,oGAKHC,eAAed,kBAAkBe;AALpC,AAME,IAAMX,OAAK,AAAA,+HAA6BU;IAClCE,cAAY,CAACT,iEAAAA,oFAAAA,rBAAKP,gEAAAA;AADxB,AAEE,IAAAP,mBAAI,iBAAAwB,gBAAA,AAAAC,gBAAEd;AAAF,AAAA,QAAAa,8CAAAA,2DAAAA,fAAOD,uCAAAA;;AAAX,AAAA,oBAAAvB;AAAAA;;AACI,IAAM0B,MAAI,AAACC,8DAAOC,2GAA8B,CAACN,sCAAAA,wCAAAA;AAAjD,AACE,AAACV,mDAAMD,KAAKE,gBAAMU,YAAYG;;AAC9BA;;;AAIV,AAAA;AAAA;;;gDAAA,hDAAaiB;;AAAb,IAAAd,6EAAA,WACsBe,MAAKC;AAD3B,AAAA,IAAAf,kBAAA,EAAA,UAAA,OAAA,hBACsBc,qBAAAA;IADtBb,kBAAA,CAAAC,8CAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,8DAAAA,hBACsBa,0CAAAA,pCAAKC,0CAAAA;;AAD3B,IAAAX,kBAAA,CAAAF,8CAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,8DAAAA,hBACsBU,0CAAAA,pCAAKC,0CAAAA;;AAD3B,MAAA,AAAAV,2BAAA,sCACsBS;;;;AADtB,AAAA;;;;gDAAA,hDACGZ,wGAAmBY,MAAKC;AAD3B,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,iFAAA,3GACsBD,0BAAAA;AADtB,OACsBA,8EAAAA,MAAKC;;AAD3B,OAAAhB,2EACsBe,MAAKC;;;;AAD3B,IAAAT,uEAAA,WAKgBQ,MAAKnC;AALrB,AAAA,IAAAqB,kBAAA,EAAA,UAAA,OAAA,hBAKgBc,qBAAAA;IALhBb,kBAAA,CAAAM,wCAAA,AAAAJ,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,6DAAAA,fAKgBa,yCAAAA,nCAAKnC,yCAAAA;;AALrB,IAAAyB,kBAAA,CAAAG,wCAAA;AAAA,AAAA,GAAA,GAAA,CAAAH,mBAAA;AAAA,QAAAA,gDAAAA,6DAAAA,fAKgBU,yCAAAA,nCAAKnC,yCAAAA;;AALrB,MAAA,AAAA0B,2BAAA,gCAKgBS;;;;AALhB,AAAA;;;;0CAAA,1CAKGP,4FAAaO,MAAKnC;AALrB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,2EAAA,rGAKgBmC,0BAAAA;AALhB,OAKgBA,wEAAAA,MAAKnC;;AALrB,OAAA2B,qEAKgBQ,MAAKnC;;;;AALrB,IAAA6B,4EAAA,WASkBM,MAAKC;AATvB,AAAA,IAAAf,kBAAA,EAAA,UAAA,OAAA,hBASkBc,qBAAAA;IATlBb,kBAAA,CAAAQ,6CAAA,AAAAN,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,8DAAAA,hBASkBa,0CAAAA,pCAAKC,0CAAAA;;AATvB,IAAAX,kBAAA,CAAAK,6CAAA;AAAA,AAAA,GAAA,GAAA,CAAAL,mBAAA;AAAA,QAAAA,gDAAAA,8DAAAA,hBASkBU,0CAAAA,pCAAKC,0CAAAA;;AATvB,MAAA,AAAAV,2BAAA,kCASkBS;;;;AATlB,AAAA;;;;+CAAA,/CASGL,sGAAeK,MAAKC;AATvB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,gFAAA,1GASkBD,0BAAAA;AATlB,OASkBA,6EAAAA,MAAKC;;AATvB,OAAAP,0EASkBM,MAAKC;;;;AATvB,IAAAL,4EAAA,WAakBI,MAAKnC;AAbvB,AAAA,IAAAqB,kBAAA,EAAA,UAAA,OAAA,hBAakBc,qBAAAA;IAblBb,kBAAA,CAAAU,6CAAA,AAAAR,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,6DAAAA,fAakBa,yCAAAA,nCAAKnC,yCAAAA;;AAbvB,IAAAyB,kBAAA,CAAAO,6CAAA;AAAA,AAAA,GAAA,GAAA,CAAAP,mBAAA;AAAA,QAAAA,gDAAAA,6DAAAA,fAakBU,yCAAAA,nCAAKnC,yCAAAA;;AAbvB,MAAA,AAAA0B,2BAAA,kCAakBS;;;;AAblB,AAAA;;;;+CAAA,/CAaGH,sGAAeG,MAAKnC;AAbvB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,gFAAA,1GAakBmC,0BAAAA;AAblB,OAakBA,6EAAAA,MAAKnC;;AAbvB,OAAA+B,0EAakBI,MAAKnC;;;;AAbvB,IAAAiC,gEAAA,WAiBSE;AAjBT,AAAA,IAAAd,kBAAA,EAAA,UAAA,OAAA,hBAiBSc,qBAAAA;IAjBTb,kBAAA,CAAAjB,iCAAA,AAAAmB,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAiBSa,mCAAAA;;AAjBT,IAAAV,kBAAA,CAAApB,iCAAA;AAAA,AAAA,GAAA,GAAA,CAAAoB,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAiBSU,mCAAAA;;AAjBT,MAAA,AAAAT,2BAAA,yBAiBSS;;;;AAjBT,AAAA;;;;;;;mCAAA,nCAiBG9B,8EAAM8B;AAjBT,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,oEAAA,9FAiBSA,0BAAAA;AAjBT,OAiBSA,iEAAAA;;AAjBT,OAAAF,8DAiBSE;;;;AAjBT,AAwBA;;;uDAAA,vDAAME,sHAEHC;AAFH,AAGE,GAAA,GAAA,MAAA,LAA8BA;AAA9B,GAAA,EAAA,WAAA,CAAAC,gCAAA,AAA8BD;AAA9B;;AAAA,GAAA,EAAA,AAA8BA;AAA9B,OAAAE,kCAAYN,8CAAkBI;;AAA9B;;;;AAAA,OAAAE,kCAAYN,8CAAkBI;;;AAEhC;;;;;;;mDAAA,nDAAMG,8GAMHC;AANH,AAOE,OAAA,8JAAmB,AAACzE,eAAKyE;;AAE3B;;;wDAAA,xDAAMC,wHAEHD,SAASE;AAFZ,AAGE,IAAMC,gBAAc,AAACJ,iDAAqBC;AAA1C,AACE,GAAI,AAACxF,6CAAE2F,cAAcD;AACnBF;;AACA,kFAAA,3EAACI,kDAAUJ,SAAStC,gJAAwBwC;;;AAElD;;;;;oCAAA,pCAAMG,gFAIHjD;AAJH,AAKE,GAAI,AAACkD,sCAAUlD;AACb,kBAAKmD;AAAL,AACE,OAACC,0CAAiBpD,kBAAkBmD;;;AACtC,kBAAKjD;AAAL,AACE,OAACgC,6CAAclC,kBAAkBE;;;;AAEvC;;;;;oCAAA,pCAAMmD,gFAIHrD;AAJH,AAKE,GAAI,AAACkD,sCAAUlD;AACb,kBAAKsC;AAAL,AACE,OAACgB,0CAAiBtD,kBAAkBsC;;;AACtC,kBAAKA;AAAL,AACE,OAACN,6CAAchC,kBAAkBsC;;;;AAEvC;;;;;;;;;;6CAAA,7CAAMiB,kGASHvD;AATH,AAUE,OAACoB,8DAAOoC,mEAAO,AAACb,iDAAqB3C;;AAEvC;;;;;;4CAAA,5CAAMyD,gGAKHzD;AALH,AAME,IAAMsC,SAAO,AAACiB,2CAAevD;AAA7B,AACE,OAACgC,6CAAchC,kBAAkBsC;;AAErC;;;;;;;;;;;6CAAA,7CAAMoB,kGAUHC,SAASC;AAVZ,AAWE,IAAMC,aAAY,AAAC3F,qCAASyF;IACtBG,cAAY,AAAC5F,qCAAS0F;AAD5B,AAEE,GAAQ,AAACxG,6CAAE,AAAA,iHAAsByG,YACtB,AAAA,iHAAsBC;AADjC;AAAA,AAAA,MAAA,KAAAjH,MAAA;;;AAEA,kBAAKqD;AAAL,AACE,GAAQ,AAAC9C,6CAAEyG,WAAW,AAACpD,+CAAgBP;AAAvC;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACsD,8EACA,AAACK,0DAA8BN,OAC/B4D;;;AAEP;;;;;;;;uDAAA,vDAAMC,sHAOHzB;AAPH,AAQE,OAAClB,8DAAO,WAAKoB;AAAL,AACE,OAACwB,+CAAO,CAAA,iDAAUxB;qDACpBF;;AAEV;;;;;;wDAAA,xDAAM2B,wHAKHC,IAAIlE;AALP,AAME,IAAMvC,IAAE,AAAA,4FAAY,AAACS,qCAAS8B;IACxBmE,SAAO,AAACC,6BAAM,iDAAA,jDAACC,+CAAO5G;YAD5B,RAEM6G;AAFN,AAGE,6VAAA,oEAAA,oJAAA,qDAAA,nmBAACtB,yDACA,AAACuB,mHAAU,AAACC,6EAAoBN,IAAIC,OAAOG,OAChC,AAACrB,kCAAMjD,yBAClBM,qEACMmE,+FACazE;;AAGxB;;;;AAEE0E,mDACAT;AAEF;;;qDAAA,rDAAMU,kHAEHzE;AAFH,AAAA,GAGS,AAACQ,kDAAgBR;AAH1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AAAA;;AAMA;;;oDAAA,pDAAM+H,gHAEH1E;AAFH,AAAA,GAGS,AAACQ,kDAAgBR;AAH1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AAAA;;AAMA;;;;yDAAA,zDAAMgI,0HAGHC;AAHH,AAIE,kBAAK5E;AAAL,AAAA,GACS,AAACQ,kDAAgBR;AAD1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AAEEiI;;;AAMJ;;;;;;;;+CAAA,/CAAMC,sGAOHtH,EAAEuH,YAAYC;AAPjB,AAQE,GAAI,+CAAA,/CAAC7H,6CAAEK;AACL,0EAAA,mBAAA,rFAACwH,kCAAAA,uCAAAA;;AACD,OAACC,6BAAWzH,EAAEuH,YAAYC;;;AAE9B;;;;2DAAA,3DAAOE,8HAGJnH;AAHH,AAIE,IAAMoH,IAAE,AAAA,4FAAYpH;AAApB,AACE,sDAAA,/CAAC+G,6CACAK,yFAAS,WAAKC;AAAL,AAAQ,OAACrB,+CAAO,CAAA,gDAASqB;;;AAEvC,AAAA;;;;;;;+CAAA,uDAAA3I,tGAAO6I;AAAP,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1I,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6EAAA,7EAAO0I,wFAMHvH;AANJ,AAOG,IAAMwH,QAAM,AAACL,yDAA6BnH;AAA1C,AACE,OAACyH,2EAAczH,SAASwH;;;AAR7B,CAAA,6EAAA,7EAAOD,wFASHvH,SAAS0H;AATb,AAUG,IAAMC,KAAG,AAACC;AAAV,2BACM,3BAuBA,OAACe;AAvBD,GAAA,QAAAd,sCAAAC,+CAAAC,wDAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,mHAAA,WAAAC,QAAAC;;AAAA,AAAA,IAAAD,cAAA;4EAFLlI,gBAAS0H,4BACJC,xHACA,AAAA,YAAAM,sHAAAE;;;AAAA,CAAA,AAAA,AAAAF,0GAAA,WAAAC;;AAAA,AAAA,IAAAA,cAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,2HAAAxD;;AAAA,CAAA,AAAA,AAAAwD,oJAAA,WACsBQ,EAAEnE;;AADxB,AAAA,YAAA,RACsBmE;AADtB,AAEI,OAACrJ,6CAAE,AAACsJ,8BAAYpE,QACb,AAAA,4FAAYtE;;;AAHnB,CAAA,AAAA,AAAAiI,8IAAA,WAKgBQ,EAAEvG;;AALlB,AAAA,YAAA,RAKgBuG;AALhB,AAMI,OAAC7F,qDAAmBV,MAAMlC;;;AAN9B,CAAA,AAAA,AAAAiI,mJAAA,WAQkB5D,MAAKC;;AARvB,AAAA,gBAAA,ZAQkBD;AARlB,AASI,oBAAQ,AAAmBA,uFAAKC;AAAhC;AAAA,AAAA,MAAA,KAAAzF,MAAA;;;AACA,OAACsD,8EAAoBmC,OAAOtE,gBAASqE,UAAKC;;;AAV9C,CAAA,AAAA,AAAA2D,mJAAA,WAYkB5D,MAAKnC;;AAZvB,AAAA,gBAAA,ZAYkBmC;AAZlB,AAaI,oBAAQ,AAAaA,iFAAKnC;AAA1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACgE,4CACAX,MAAMmC,UACN;AAAA,AACE,IAAMlB,MAAI,AAACX,0DAA8BN;AAAzC,AACE,GAAQ,AAAC9C,6CAAE,AAACsJ,8BAAYvF,KACb,AAAA,iHAAsBnD;AADjC;AAAA,AAAA,MAAA,KAAAnB,MAAA;;;AAEAsE;;;;AApBT,CAAA,AAAA,AAAA8E,uIAAA,WAsBSQ;;AAtBT,AAAA,YAAA,RAsBSA;AAtBT,AAsBYd;;;AAtBZ,CAAA,AAAAM,2EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iFAAA;;AAAA,CAAA,AAAAA,oFAAA;;AAAA,CAAA,AAAAA,yFAAA,WAAAG,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;sJAFLrI,aAAS0H,yBACJC,5LACAa,uEAAA,4HAAAL;4EAFLnI,aAAS0H,yBACJC,lHACA,AAAA,YAAAM,6GAAAE;;;AAAAF;;4EAFLjI,SAAS0H,qBACJC,1GACA,YAAAM,iGAAA;;CAuBA,2CAAA,qJAAA,rBAA8BP,wIACP1H;;;AAnChC,CAAA,uEAAA,vEAAOuH;;AAAP,AAqCA,AAAA;;;;;;;;oDAAA,4DAAA7I,hHAAOmK;AAAP,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAhK,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,kFAAA,lFAAOgK,6FAOH7I;AAPJ,AAQG,IAAMwH,QAAM,AAACL,yDAA6BnH;AAA1C,AACE,OAAC8I,gFAAmB9I,SAASwH;;;AATlC,CAAA,kFAAA,lFAAOqB,6FAUH7I,SAAS0H;AAVb,AAWG,IAAMC,KAAG,AAACC;AAAV,2BACM,3BAyCA,OAACe;AAzCD,GAAA,QAAAd,sCAAAC,+CAAAC,wDAAAgB;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,mHAAA,WAAAC,QAAAC;;AAAA,AAAA,IAAAD,cAAA;4EAFLjJ,gBAAS0H,4BACJC,xHACA,AAAA,YAAAqB,sHAAAE;;;AAAA,CAAA,AAAA,AAAAF,0GAAA,WAAAC;;AAAA,AAAA,IAAAA,cAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,2HAAAvE;;AAAA,CAAA,AAAA,AAAAuE,oJAAA,WACsBP,EAAEnE;;AADxB,AAAA,YAAA,RACsBmE;AADtB,AAEI,IAAAW,oBAAK,AAACC,8BAAM/E;AAAZ,AAAA,GAAA8E;AAAA,IAAAA,wBACK,AAAChK,6CAAE,AAACsJ,8BAAYpE,QACb,AAAA,4FAAYtE;AAFpB,AAAA,GAAAoJ;AAAA,IAAAA,wBAGK,yCAAA,xCAAG,AAACV,8BAAYpE;AAHrB,AAAA,GAAA8E;AAIK,IAAME,KAAG,mDAAA,nDAACC,4CAAIjF;AAAd,AACE,SAAI,GAAK,AAACkF,8BAAUF,WAChB,OAAA,NAAIA;;AANfF;;;AAAAA;;;AAAAA;;;;AAFJ,CAAA,AAAA,AAAAJ,8IAAA,WAUgBP,EAAEvG;;AAVlB,AAAA,YAAA,RAUgBuG;AAVhB,AAWI,OAAC7F,qDAAmBV,MAAMlC;;;AAX9B,CAAA,AAAA,AAAAgJ,mJAAA,WAakB3E,MAAKC;;AAbvB,AAAA,gBAAA,ZAakBD;AAblB,AAcI,oBAAQ,AAAmBA,uFAAKC;AAAhC;AAAA,AAAA,MAAA,KAAAzF,MAAA;;;AACA,IAAA4K,cAAgBnF;QAAhB,AAAAiF,4CAAAE,YAAA,IAAA,hEAAOC;YAAP,AAAAH,4CAAAE,YAAA,IAAA,pEAASE;AAAT,iLACMrF,9CACA,qDAAA,rDAACvD,yDAAQ,AAAC6I,uDAAIF,EAAE,AAACG,oDAAMF,pNACvB,6NAAA,7NAAC5I,iOAAQ,AAAC6I,uDAAIF,EAAE,AAACI,oDAAMH,naACvB,OAACxH,qaAAoBnC,gBAASqE,UAAKC;;;AAnB7C,CAAA,AAAA,AAAA0E,mJAAA,WAqBkB3E,MAAKnC;;AArBvB,AAAA,gBAAA,ZAqBkBmC;AArBlB,AAsBI,oBAAQ,AAAaA,iFAAKnC;AAA1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACgE,4CACAX,MAAMmC,UACN;AAAA,AACE,IAAMlB,MAAI,AAACX,0DAA8BN;AAAzC,AACE,GAAU,EAAK,AAACmH,8BAAMlG,UACP,AAAC/D,6CAAE,AAACsJ,8BAAYvF,KACb,AAAA,iHAAsBnD;AAFxC;AAAA,AAGE,uBAAA,vBAAC+J;;;AACH,IAAAC,cAAY7G;QAAZ,AAAAoG,4CAAAS,YAAA,IAAA,hEAAOxF;QAAP,AAAA+E,4CAAAS,YAAA,IAAA,hEAASC;IACHC,MAAI,AAACC,uDAAI,AAACC,uDAAS5F,GACV,AAAC4F,uDAASH;AAFzB,AAGE,GAAM,AAACI,4BAAQH;AAAf,AACE,6BAAA,7BAACI;;AADH;;mGAEInH,9CACA,kDAAA,lDAACpC,sDAAQ,AAACwJ,qDAAOL,hKACjB,sKAAA,/JAACnJ,mKAAQ,AAACyJ,qDAAOP,EAAEzF;;;;AAtClC,CAAA,AAAA,AAAAwE,uIAAA,WAwCSP;;AAxCT,AAAA,YAAA,RAwCSA;AAxCT,AAwCYd;;;AAxCZ,CAAA,AAAAqB,2EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iFAAA;;AAAA,CAAA,AAAAA,oFAAA;;AAAA,CAAA,AAAAA,yFAAA,WAAAZ,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;sJAFLrI,aAAS0H,yBACJC,5LACAwB,uEAAA,4HAAAD;4EAFLlJ,aAAS0H,yBACJC,lHACA,AAAA,YAAAqB,6GAAAE;;;AAAAF;;4EAFLhJ,SAAS0H,qBACJC,1GACA,YAAAqB,iGAAA;;CAyCA,2CAAA,qJAAA,rBAA8BtB,wIACP1H;;;AAtDhC,CAAA,4EAAA,5EAAO6I;;AAAP,AAwDA,AAAA;;;;;;;;;;;wDAAA,gEAAAnK,xHAAOgM;AAAP,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA7L,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sFAAA,tFAAO6L,iGAUH1K;AAVJ,AAWG,IAAMwH,QAAM,AAACL,yDAA6BnH;AAA1C,AACE,OAAC2K,oFAAuB3K,SAASwH;;;AAZtC,CAAA,sFAAA,tFAAOkD,iGAaH1K,SAAS0H;AAbb,AAcG,IAAMC,KAAG,AAACC;AAAV,2BACM,3BA2CA,OAACe;AA3CD,GAAA,QAAAd,sCAAAC,+CAAAC,wDAAA6C;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,mHAAA,WAAAC,QAAAC;;AAAA,AAAA,IAAAD,cAAA;4EAFL9K,gBAAS0H,4BACJC,xHACA,AAAA,YAAAkD,sHAAAE;;;AAAA,CAAA,AAAA,AAAAF,0GAAA,WAAAC;;AAAA,AAAA,IAAAA,cAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,2HAAApG;;AAAA,CAAA,AAAA,AAAAoG,oJAAA,WACsBpC,EAAEnE;;AADxB,AAAA,YAAA,RACsBmE;AADtB,AAEI,oDAAA,3CAAK,AAACY,8BAAM/E,eACP,AAAClF,6CAAE,AAAC6L,0DAAY3G,QACb,AAAA,4FAAYtE,uBACf,EAAI,GAAK,AAACwJ,8BAAUlF,eAChB,4DAAA,3DAAI,mDAAA,nDAACiF,4CAAIjF;;;AANtB,CAAA,AAAA,AAAAuG,8IAAA,WAQgBpC,EAAEvG;;AARlB,AAAA,YAAA,RAQgBuG;AARhB,AASI,OAAC7F,qDAAmBV,MAAMlC;;;AAT9B,CAAA,AAAA,AAAA6K,mJAAA,WAWkBxG,MAAKC;;AAXvB,AAAA,gBAAA,ZAWkBD;AAXlB,AAYI,oBAAQ,AAAmBA,uFAAKC;AAAhC;AAAA,AAAA,MAAA,KAAAzF,MAAA;;;AACA,IAAAqM,cAAoB5G;QAApB,AAAAiF,4CAAA2B,YAAA,IAAA,hEAAOxB;YAAP,AAAAH,4CAAA2B,YAAA,IAAA,pEAASvB;UAAT,AAAAJ,4CAAA2B,YAAA,IAAA,lEAAeC;AAAf,+NACM7G,9CACA,qDAAA,rDAACvD,yDAAQ,AAAC6I,8DAAIF,EAAE,AAACI,oDAAMH,yDAAO,AAACE,oDAAMsB,xUACrC,oVAAA,pVAACpK,wVAAQ,AAAC6I,8DAAIF,EAAE,AAACI,oDAAMH,yDAAO,AAACG,oDAAMqB,vmBACrC,mnBAAA,nnBAACpK,unBAAQ,AAAC6I,uDAAIF,EAAE,AAACG,oDAAMF,zzBACvB,OAACxH,2zBAAoBnC,gBAASqE,UAAKC;;;AAlB7C,CAAA,AAAA,AAAAuG,mJAAA,WAoBkBxG,MAAKnC;;AApBvB,AAAA,gBAAA,ZAoBkBmC;AApBlB,AAqBI,oBAAQ,AAAaA,iFAAKnC;AAA1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACgE,4CACAX,MAAMmC,UACN;AAAA,AACE,IAAMlB,MAAI,AAACX,0DAA8BN;AAAzC,AACE,GAAU,EAAK,AAACmH,8BAAMlG,UACP,AAAC/D,6CAAE,AAAC6L,0DAAY9H,KACb,AAAA,iHAAsBnD;AAFxC;AAAA,AAGE,uBAAA,vBAAC+J;;;AACH,IAAAqB,cAAcjI;QAAd,AAAAoG,4CAAA6B,YAAA,IAAA,hEAAO5G;QAAP,AAAA+E,4CAAA6B,YAAA,IAAA,hEAASnB;QAAT,AAAAV,4CAAA6B,YAAA,IAAA,hEAAWC;IACL3B,IAAE,AAACa,qDACA,AAACJ,8DAAI,AAACC,uDAAS5F,GACV,AAAC4F,uDAASH,qDACV,AAACG,uDAASiB;AAJxB,AAKE,GAAM,AAAChB,4BAAQX;AAAf,AACE,6BAAA,7BAACY;;AADH;;iJAEInH,9CACA,kDAAA,lDAACpC,sDAAQ2I,pGACT,uGAAA,vGAAC3I,2GAAQ,AAACuK,qDAAO,CAACC,yDAAAA,8DAAAA,PAASF,0CAAAA,xCAAE3B,0CAAAA,lXAC7B,wXAAA,jXAAC3I,qXAAQ,AAACyJ,qDAAOP,EAAEzF;;;;AAxClC,CAAA,AAAA,AAAAqG,uIAAA,WA0CSpC;;AA1CT,AAAA,YAAA,RA0CSA;AA1CT,AA0CYd;;;AA1CZ,CAAA,AAAAkD,2EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iFAAA;;AAAA,CAAA,AAAAA,oFAAA;;AAAA,CAAA,AAAAA,yFAAA,WAAAzC,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;sJAFLrI,aAAS0H,yBACJC,5LACAqD,uEAAA,4HAAAD;4EAFL/K,aAAS0H,yBACJC,lHACA,AAAA,YAAAkD,6GAAAE;;;AAAAF;;4EAFL7K,SAAS0H,qBACJC,1GACA,YAAAkD,iGAAA;;CA2CA,2CAAA,qJAAA,rBAA8BnD,wIACP1H;;;AA3DhC,CAAA,gFAAA,hFAAO0K;;AAAP,AA6DA,AAAA;;;;;;;;;sDAAA,8DAAAhM,pHAAO+M;AAAP,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA5M,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oFAAA,pFAAO4M,+FAQHzL;AARJ,AASG,IAAMwH,QAAM,AAACL,yDAA6BnH;AAA1C,AACE,OAAC0L,kFAAqB1L,SAASwH;;;AAVpC,CAAA,oFAAA,pFAAOiE,+FAWHzL,SAAS0H;AAXb,AAYG,IAAMC,KAAG,AAACC;AAAV,2BACM,3BA8CA,OAACe;AA9CD,GAAA,QAAAd,sCAAAC,+CAAAC,wDAAA4D;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,mHAAA,WAAAC,QAAAC;;AAAA,AAAA,IAAAD,cAAA;4EAFL7L,gBAAS0H,4BACJC,xHACA,AAAA,YAAAiE,sHAAAE;;;AAAA,CAAA,AAAA,AAAAF,0GAAA,WAAAC;;AAAA,AAAA,IAAAA,cAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,2HAAAnH;;AAAA,CAAA,AAAA,AAAAmH,oJAAA,WACsBnD,EAAEnE;;AADxB,AAAA,YAAA,RACsBmE;AADtB,AAEI,SAAK,AAACY,8BAAM/E,aACP,+GAAA,/GAAClF,6CAAE,AAAC6L,0DAAY3G;;;AAHzB,CAAA,AAAA,AAAAsH,8IAAA,WAKgBnD,EAAEvG;;AALlB,AAAA,YAAA,RAKgBuG;AALhB,AAMI,OAAC7F,qDAAmBV,MAAMlC;;;AAN9B,CAAA,AAAA,AAAA4L,mJAAA,WAQkBvH,MAAKC;;AARvB,AAAA,gBAAA,ZAQkBD;AARlB,AASI,oBAAQ,AAAmBA,uFAAKC;AAAhC;AAAA,AAAA,MAAA,KAAAzF,MAAA;;;AACA,IAAAmN,cAAsB1H;QAAtB,AAAAiF,4CAAAyC,YAAA,IAAA,hEAAOC;QAAP,AAAA1C,4CAAAyC,YAAA,IAAA,hEAAStC;YAAT,AAAAH,4CAAAyC,YAAA,IAAA,pEAAWrC;UAAX,AAAAJ,4CAAAyC,YAAA,IAAA,lEAAiBb;AAAjB,AACE,OAAChJ,8EACA,AAAC+J,8GAAKD,EACA,AAACrC,8DAAIF,EAAE,AAACI,oDAAMH,yDAAO,AAACE,oDAAMsB,WAC5B,AAACvB,8DAAIF,EAAE,AAACI,oDAAMH,yDAAO,AAACG,oDAAMqB,WAC5B,AAACvB,uDAAIF,EAAE,AAACG,oDAAMF,cACpB3J,gBAASqE,UAAKC;;;AAhBrB,CAAA,AAAA,AAAAsH,mJAAA,WAkBkBvH,MAAKnC;;AAlBvB,AAAA,gBAAA,ZAkBkBmC;AAlBlB,AAmBI,oBAAQ,AAAaA,iFAAKnC;AAA1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACgE,4CACAX,MAAMmC,UACN;AAAA,AACE,IAAMlB,MAAI,AAACX,0DAA8BN;AAAzC,AACE,GAAA,AAAAiK,cAAQ,AAAmB9H,uFAAKlB;AAC9B,MACC,gDAAA,mCAAA,2CAAA,6DAAA,3LAACnC,qLACgBkB,sFACYmC;;AAC9B,IAAA+H,cAAgBjJ;QAAhB,AAAAoG,4CAAA6C,YAAA,IAAA,hEAAOH;QAAP,AAAA1C,4CAAA6C,YAAA,IAAA,hEAAS5H;QAAT,AAAA+E,4CAAA6C,YAAA,IAAA,hEAAWnC;QAAX,AAAAV,4CAAA6C,YAAA,IAAA,hEAAaf;IACP3B,IAAE,AAACa,qDACA,AAACJ,8DAAI,AAACC,uDAAS5F,GACV,AAAC4F,uDAASH,qDACV,AAACG,uDAASiB;AAJxB,AAKE,GAAM,EAAK,AAAC7B,8BAAUE,QACX,AAACW,4BAAQX;AADpB,AAEE,MACC,gDAAA,kCAAA,2CAAA,6DAAA,1LAAC1I,oLACgBkB,sFACYmC;;AALhC;;AAMA,OAAC6H,8GAAKD,EACAvC,EACA,AAAC4B,qDAAO,AAACe,wDAAIhB,EAAE3B,IACf,AAACc,qDAAOP,EAAEzF;;;;;AA3C7B,CAAA,AAAA,AAAAoH,uIAAA,WA6CSnD;;AA7CT,AAAA,YAAA,RA6CSA;AA7CT,AA6CYd;;;AA7CZ,CAAA,AAAAiE,2EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iFAAA;;AAAA,CAAA,AAAAA,oFAAA;;AAAA,CAAA,AAAAA,yFAAA,WAAAxD,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;sJAFLrI,aAAS0H,yBACJC,5LACAoE,uEAAA,4HAAAD;4EAFL9L,aAAS0H,yBACJC,lHACA,AAAA,YAAAiE,6GAAAE;;;AAAAF;;4EAFL5L,SAAS0H,qBACJC,1GACA,YAAAiE,iGAAA;;CA8CA,2CAAA,qJAAA,rBAA8BlE,wIACP1H;;;AA5DhC,CAAA,8EAAA,9EAAOyL;;AAAP,AA8DA;;;;;;;;;;;;;kDAAA,lDAAOa,4GAYHtF;AAZJ,AAaG,IAAMuF,sBAAoB,AAACC,uDAASxF;AAApC,AACE;;2EACIhH;AADJ,AAEG,IAAMwH,QAAM,AAACL,yDAA6BnH;AAA1C,AACE,OAACyM,qFAAKzM,SAASwH;;2EAChBxH,SAAS0H;AAJb,AAKG,IAAMC,KAAG,AAACC;AAAV,2BACM,3BAmCA,OAACe;AAnCD,GAAA,QAAAd,sCAAAC,+CAAAC,wDAAA2E;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,mHAAA,WAAAC,QAAAC;;AAAA,AAAA,IAAAD,cAAA;4EARV5F,mBACKuF,2BACA5K,YAIA3B,gBAAS0H,4BACJC,lLACA,AAAA,YAAAgF,gLAAAE;;;AAAA,CAAA,AAAA,AAAAF,0GAAA,WAAAC;;AAAA,AAAA,IAAAA,cAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,2HAAAlI;;AAAA,CAAA,AAAA,AAAAkI,oJAAA,WACsBlE,EAAEnE;;AADxB,AAAA,YAAA,RACsBmE;AADtB,AAEI,oDAAA,3CAAK,AAACY,8BAAM/E,eACP,+GAAA,/GAAClF,6CAAE,AAAC6L,0DAAY3G,kBAChB,EAAI,GAAK,AAACkF,8BAAUlF,eAChB,4DAAA,3DAAI,mDAAA,nDAACiF,4CAAIjF;;;AALtB,CAAA,AAAA,AAAAqI,8IAAA,WAOgBlE,EAAEvG;;AAPlB,AAAA,YAAA,RAOgBuG;AAPhB,AAQI,OAAC7F,qDAAmBV,MAAMlC;;;AAR9B,CAAA,AAAA,AAAA2M,mJAAA,WAUkBtI,MAAKC;;AAVvB,AAAA,gBAAA,ZAUkBD;AAVlB,AAWI,oBAAQ,AAAmBA,uFAAKC;AAAhC;AAAA,AAAA,MAAA,KAAAzF,MAAA;;;AACA,IAAAkO,cAA6BzI;iBAA7B,AAAAiF,4CAAAwD,YAAA,IAAA,zEAAOC;gBAAP,AAAAzD,4CAAAwD,YAAA,IAAA,xEAAkBE;AAAlB,AACE,OAAC9K,8EACA,AAACyH,uDAAI5C,mBACA,AAACkF,8GAAK,AAACtC,uDAAI,AAACE,oDAAMkD,YAAY,AAACnD,oDAAMoD,YAC/B,AAACrD,uDAAI,AAACE,oDAAMkD,YAAY,AAAClD,oDAAMmD,YAC/B,AAACpD,oDAAMmD,mBAClBhN,gBAASqE,UAAKC;;;AAlBrB,CAAA,AAAA,AAAAqI,mJAAA,WAoBkBtI,MAAKnC;;AApBvB,AAAA,gBAAA,ZAoBkBmC;AApBlB,AAqBI,oBAAQ,AAAaA,iFAAKnC;AAA1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACgE,4CACAX,MAAMmC,UACN;AAAA,AACE,IAAMlB,MAAI,AAACyG,uDAAI2C,2BACA,AAAC/J,0DAA8BN;AAD9C,AAEE,GAAI,EAAK,AAACmH,8BAAMlG,UACP,AAAC/D,6CAAE,AAAC6L,0DAAY9H,KACb,AAAA,iHAAsBnD;AAChC,IAAAkN,cAAc/J;QAAd,AAAAoG,4CAAA2D,YAAA,IAAA,hEAAO1I;QAAP,AAAA+E,4CAAA2D,YAAA,IAAA,hEAASjD;QAAT,AAAAV,4CAAA2D,YAAA,IAAA,hEAAW7B;AAAX,AACE,OAACa,8GAAK,AAACZ,qDAAOD,GAAG,AAACb,qDAAOP,EAAEzF;;AAC7B,8BAAA,vBAACuF;;;;;AAhCZ,CAAA,AAAA,AAAA4C,uIAAA,WAkCSlE;;AAlCT,AAAA,YAAA,RAkCSA;AAlCT,AAkCYd;;;AAlCZ,CAAA,AAAAgF,2EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iFAAA;;AAAA,CAAA,AAAAA,oFAAA;;AAAA,CAAA,AAAAA,yFAAA,WAAAvE,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;mLARVrB,gBACKuF,wBACA5K,SAIA3B,aAAS0H,yBACJC,1QACAmF,uEAAA,0MAAAD;4EARV7F,gBACKuF,wBACA5K,SAIA3B,aAAS0H,yBACJC,nKACA,AAAA,YAAAgF,8JAAAE;;;AAAAF;;4EARV3F,YACKuF,oBACA5K,uDAIA3B,SAAS0H,qBACJC,jMACA,YAAAgF,wLAAA;;CAmCA,2CAAA,qJAAA,rBAA8BjF,wIACP1H;;kEAtC5BA,SAAS0H;;;2EAAT1H;;2EAAAA,SAAS0H;;;;;;;;;AAwClB;;;;;;;;;;;;;;;kDAAA,lDAAOyF,4GAcJC;AAdH,AAeE,kBAAA,wEAAsBE;AAAtB,AACU,OAAAC,+CAAA,KAAAC,kBAAA,KAAA;AAAA,AAAU,OAACC,eAAKH;GAAhB,KAAA,OAAA,KAAAE,kBAAA,KAAA;AAAA,AAAA,0FAAoB,AAACE,gBAAMJ;GAA3B,KAAA;;AADV,AAEE;;2EACItN;AADJ,AAEG,IAAMwH,QAAM,AAACL,yDAA6BnH;AAA1C,AACE,OAAC2N,qFAAK3N,SAASwH;;2EAChBxH,SAAS0H;AAJb,AAKG,IAAMjI,IAAE,AAAA,4FAAYO;IACd4N,qBAAmB,iBAAAC,YAAsB,KAAA,JAAGpO;AAAzB,AAAA,gHAAAoO,4CAAAA,pJAACT,qDAAAA,gEAAAA;;IACpBU,6BAA2B,AAACtB,uDAASoB;IACrCjG,KAAG,AAACC;AAHV,2BAIM,3BA2EA,OAACe;AA3ED,GAAA,QAAAd,sCAAAC,+CAAAC,wDAAAgG;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,mHAAA,WAAAC,QAAAC;;AAAA,AAAA,IAAAD,cAAA;2GAZVb,/BACQC,mBAEH1L,iDAIA3B,sFAAS0H,/FACJjI,qEACAmO,lCACAE,VACAnG,hKACA,AAAA,YAAAqG,sPAAAE;;;AAAA,CAAA,AAAA,AAAAF,0GAAA,WAAAC;;AAAA,AAAA,IAAAA,cAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,2HAAAvJ;;AAAA,CAAA,AAAA,AAAAuJ,oJAAA,WACsBvF,EAAEnE;;AADxB,AAAA,YAAA,RACsBmE;AADtB,AAEI,IAAM2F,MAAI,AAACnD,0DAAY3G;AAAvB,AACE,SAAI,EAAK,sDAAA,tDAAClF,6CAAEK,mBACH,iDAAA,jDAACL,6CAAEgP,gBACR,6CAAA,3CAAK,AAAC/E,8BAAM/E,eACP,AAAClF,6CAAEgP,IAAI3O,eAGP,AAAC4O,uBAAO,AAACC,oDACA,WAAKjH,EAAEkH;AAAP,AACE,+EAAA,tEAAI,AAACnP,6CAAE,KAAA,JAAKiI,SAAG5H,iBACX,GAAK,AAAC+J,8BAAU+E,cAChB,AAACpC,cAAI,AAACqC,gEAAYD;IACzBjK;;;AAdvB,CAAA,AAAA,AAAA0J,8IAAA,WAgBgBvF,EAAEvG;;AAhBlB,AAAA,YAAA,RAgBgBuG;AAhBhB,AAiBI,OAAC7F,qDAAmBV,MAAMlC;;;AAjB9B,CAAA,AAAA,AAAAgO,mJAAA,WAmBkB3J,MAAKC;;AAnBvB,AAAA,gBAAA,ZAmBkBD;AAnBlB,AAoBI,oBAAQ,AAAmBA,uFAAKC;AAAhC;AAAA,AAAA,MAAA,KAAAzF,MAAA;;;AACA,GAAI,sDAAA,tDAACO,6CAAEK;AACL,IAAMgP,KAAG,AAACvC,8GAAK,AAACrC,oDAAMvF,QACP,AAACwF,oDAAMxF;AADtB,AAEE,OAACnC,8EACA,AAACyH,uDAAIgE,0BAAmBa,IACxBzO,gBAASqE,UAAKC;;AACjB,IAAMoK,QAAM,AAACC,4CAAI7E,sBAAMxF;IACjBsK,UAAQ,AAACD,4CAAI9E,sBAAMvF;IACnBmK,KAAG,AAACrI,6BACA,iBAAAyI,YACC,AAACF,4CAAI,WAAKtH;AAAL,AACE,GAAI,AAACjI,6CAAEiI,EAAE5H;AACP,OAACqP,8CAAMC,yBAAIL;;AACX,OAACI,8CAAMC,yBAAI,AAACC,eAAK,AAACzF,4CAAIqF,QAAQvH,GACb,AAAC4H,6CAAK5H,EAAEqH;;GAC7B,AAACQ,8CAAM,YAAA,XAAKzP;AANlB,AAAA,4GAAAoP,0CAAAA,9IAACxB,mDAAAA,8DAAAA;;AAHX,AAWE,OAAClL,8EACA,AAACyH,uDAAIgE,0BAAmBa,IACxBzO,gBAASqE,UAAKC;;;;AAxCvB,CAAA,AAAA,AAAA0J,mJAAA,WA0CkB3J,MAAKnC;;AA1CvB,AAAA,gBAAA,ZA0CkBmC;AA1ClB,AA2CI,oBAAQ,AAAaA,iFAAKnC;AAA1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACgE,4CACAX,MAAMmC,UACN;AAAA,AACE,gBAAA,6EAAoB4F,EAAEzF;AAAtB,AACU,GAAM,6BAAA,6BAAA,xDAAK,OAASyF,sBAAG,OAASzF,sBACrB,AAAC6F,4BAAQJ,QAAG,AAACI,4BAAQ7F;AADhC,AAEE,AAAA2K,0DAAAC,mCAAA,qDAAA,8BAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,UAAA;;AAFF;;AAGA,OAAC7E,qDAAOP,EAAEzF;;AAJpB,AAKE,IAAMiK,KAAG,iBAAAa,YACC,AAACC,kBACA,AAAC3F,uDAAIkE,kCACA,AAACtL,0DAA8BN;AAHtC,AAAA,4GAAAoN,0CAAAA,9IAACjC,mDAAAA,8DAAAA;;AAAV,AAIE,GAAI,sDAAA,tDAACjO,6CAAEK;AACL,OAAC+P,UAAU,+CAAA,/CAACjG,4CAAIkF,QAAM,+CAAA,/CAAClF,4CAAIkF;;AAC3B,IAAO/E,IAAK,AAACgE,gBAAMe;IACZgB,OAAK,AAAChC,eAAKgB;UADlB,NAEOiB,yFAAM,AAACF,UAAU,AAAC9B,gBAAMe,IAAI,AAACkB,iBAAOlB;;AAF3C,AAOE,GAAA,AAAAtC,cAAQ,AAACyD,eAAKH;AACZ,OAACrJ,6BAAMsJ;;AACP,IAAMG,iBAAG,AAACtF,qDAAO,AAACJ,uDAAI,AAACC,uDAAS,AAACsD,gBAAM+B,OACjB,AAACrF,uDAASV;AADhC,AAEE,gBAAOmG;gBACA,AAACpC,eAAKgC;gBACN,AAACT,eAAK,AAACQ,UAAUK,eAAG,AAACF,iBAAOF,OACtBC;;;;;;;;;;;;AAxEhC,CAAA,AAAA,AAAA1B,uIAAA,WA0ESvF;;AA1ET,AAAA,YAAA,RA0ESA;AA1ET,AA0EYd;;;AA1EZ,CAAA,AAAAqG,2EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iFAAA;;AAAA,CAAA,AAAAA,oFAAA;;AAAA,CAAA,AAAAA,yFAAA,WAAA5F,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;4MAZV+E,zBACQC,gBAEH1L,wCAIA3B,0EAAS0H,hFACJjI,yDACAmO,/BACAE,PACAnG,xPACAwG,uEAAA,uQAAAD;qGAZVd,zBACQC,gBAEH1L,wCAIA3B,0EAAS0H,hFACJjI,yDACAmO,/BACAE,PACAnG,jJACA,AAAA,YAAAqG,2NAAAE;;;AAAAF;;+IAZVZ,nEACQC,YAEH1L,8EAIA3B,0DAAS0H,5DACJjI,yCACAmO,3BACAE,HACAnG,/KACA,YAAAqG,yOAAA;;CA2EA,2CAAA,qJAAA,rBAA8BtG,wIACP1H;;kEAjF5BA,SAAS0H;;;2EAAT1H;;2EAAAA,SAAS0H;;;;;;;;;AAmFjB;;;;;;;;;;;;;;;;;;;;;;;;;;oDAAA,pDAAOoI,gHAyBJ1C;AAzBH,AA0BE;;6EACIpN;AADJ,AAEG,IAAMwH,QAAM,AAACL,yDAA6BnH;AAA1C,AACE,OAAC+P,uFAAK/P,SAASwH;;6EAChBxH,SAAS0H;AAJb,AAKG,IAAMjI,IAAE,AAAA,4FAAYO;IACd4N,qBAAmB,iBAAAoC,YAAsB,KAAA,JAAGvQ;AAAzB,AAAA,gHAAAuQ,4CAAAA,pJAAC5C,qDAAAA,gEAAAA;;IACpBU,6BAA2B,AAACtB,uDAASoB;IACrCjG,KAAG,AAACC;AAHV,2BAIM,3BA0CA,OAACe;AA1CD,GAAA,QAAAd,sCAAAC,+CAAAC,wDAAAkI;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,mHAAA,WAAAC,QAAAC;;AAAA,AAAA,IAAAD,cAAA;4EAVR/C,4BACGzL,YAIA3B,gBAAS0H,4BACJjI,SACAmO,0BACAE,kCACAnG,rOACA,AAAA,YAAAuI,mOAAAE;;;AAAA,CAAA,AAAA,AAAAF,0GAAA,WAAAC;;AAAA,AAAA,IAAAA,cAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,2HAAAzL;;AAAA,CAAA,AAAA,AAAAyL,oJAAA,WACsBzH,EAAEnE;;AADxB,AAAA,YAAA,RACsBmE;AADtB,AAEI,SAAI,EAAK,sDAAA,tDAACrJ,6CAAEK,mBAAK,+GAAA,/GAACL,6CAAE,AAAC6L,0DAAY3G,oBAC7B,EAAK,AAAC+E,8BAAM/E,aAAQ,AAAClF,6CAAE,AAAC6L,0DAAY3G,QAAQ7E;;;AAHpD,CAAA,AAAA,AAAAyQ,8IAAA,WAKgBzH,EAAEvG;;AALlB,AAAA,YAAA,RAKgBuG;AALhB,AAMI,OAAC7F,qDAAmBV,MAAMlC;;;AAN9B,CAAA,AAAA,AAAAkQ,mJAAA,WAQkB7L,MAAKC;;AARvB,AAAA,gBAAA,ZAQkBD;AARlB,AASI,oBAAQ,AAAmBA,uFAAKC;AAAhC;AAAA,AAAA,MAAA,KAAAzF,MAAA;;;AACA,IAAMyR,sBAAQ,EAAI,sDAAA,tDAAClR,6CAAEK,eAAK,AAACyM,8GAAK5H,aAAQA;IAClCiM,QAAO,AAACC,4DAAcF,oBAAQA;IAC9BG,KAAG,iBAAAC,YAAU,wDAAA,xDAACE,kDAAIL;IAAfI,YACU,uDAAA,vDAACxG,2DAAMoG;AADjB,AAAA,wHAAAG,UAAAC,gDAAAD,UAAAC,pLAACpF,yDAAAA,8EAAAA;;IAEJkD,KAAG,8CAAA,uFAAA,WAAAoC,hJAAC3J,6BAAW,YAAA,XAAGzH;AAAf,AAEa,GAAI,6CAAAoR,7CAACzR,+DAAIK;AAAGgR;;AACR,IAAAK,YAAU,uDAAA,vDAAClH,2DAAM,gEAAAiH,hEAACtH,4CAAI+G;IAAtBS,YACU,uDAAA,vDAAC5G,2DAAMoG;AADjB,AAAA,wHAAAO,UAAAC,gDAAAD,UAAAC,pLAACxF,yDAAAA,8EAAAA;;;AAP3B,AASE,OAACpJ,8EACA,AAACyH,uDAAIgE,0BAAmBa,IACxBzO,gBAASqE,UAAKC;;;AArBrB,CAAA,AAAA,AAAA4L,mJAAA,WAuBkB7L,MAAKnC;;AAvBvB,AAAA,gBAAA,ZAuBkBmC;AAvBlB,AAwBI,oBAAQ,AAAaA,iFAAKnC;AAA1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACgE,4CACAX,MAAMmC,UACN;AAAA,AACE,IAAMoK,KAAG,AAAC7E,uDAAIkE,kCACA,AAACtL,0DAA8BN;AAD7C,AAEE,GAAM,EAAK,AAACsH,8BAAU,AAACD,4CAAIkF,GAAGhP,gBACnB,sGAAA,tGAACL,6CAAE,AAACmK,4CAAIkF,GAAGhP;AADtB,AAEE,6BAAA,7BAAC6K;;AAFH;;AAGA,IAAMhG,SAAO,sCAAA,uFAAA,WAAA0M,xIAAC9J,6BACAzH;AADD,AAEE,IAAAwR,YAAU,+CAAAD,/CAACzH,4CAAIkF;IAAfyC,YACU,kDAAA,lDAACN,sDAAM,AAACrH,4CAAIkF,GAAGhP;AADzB,AAAA,wHAAAwR,UAAAC,gDAAAD,UAAAC,pLAAC3F,yDAAAA,8EAAAA;;AAFhB,AAIE,GAAI,sDAAA,tDAACnM,6CAAEK;AACL,OAACiO,gBAAMpJ;;AACPA;;;;;AAvCb,CAAA,AAAA,AAAA4L,uIAAA,WAyCSzH;;AAzCT,AAAA,YAAA,RAyCSA;AAzCT,AAyCYd;;;AAzCZ,CAAA,AAAAuI,2EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iFAAA;;AAAA,CAAA,AAAAA,oFAAA;;AAAA,CAAA,AAAAA,yFAAA,WAAA9H,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;qLAVR+E,yBACGzL,SAIA3B,aAAS0H,yBACJjI,MACAmO,uBACAE,+BACAnG,zTACA0I,uEAAA,yPAAAD;4EAVRhD,yBACGzL,SAIA3B,aAAS0H,yBACJjI,MACAmO,uBACAE,+BACAnG,hNACA,AAAA,YAAAuI,2MAAAE;;;AAAAF;;4EAVR9C,qBACGzL,yDAIA3B,SAAS0H,qBACJjI,EACAmO,mBACAE,2BACAnG,xOACA,YAAAuI,+NAAA;;CA0CA,2CAAA,qJAAA,rBAA8BxI,wIACP1H;;oEAhD5BA,SAAS0H;;;6EAAT1H;;6EAAAA,SAAS0H;;;;;;;;;AAkDf;;;;;;;;;;;;;;;;;;;;;;;;+CAAA,/CAAOyJ,sGAuBJ/D;AAvBH,AAwBE;;wEACIpN;AADJ,AAEG,IAAMwH,QAAM,AAACL,yDAA6BnH;AAA1C,AACE,OAACoR,kFAAKpR,SAASwH;;wEAChBxH,SAAS0H;AAJb,AAKG,IAAMjI,IAAE,AAAA,4FAAYO;IACd4N,qBAAmB,iBAAAyD,YAAsB,KAAA,JAAG5R;AAAzB,AAAA,gHAAA4R,4CAAAA,pJAACjE,qDAAAA,gEAAAA;;IACpBU,6BAA2B,AAACtB,uDAASoB;IACrCjG,KAAG,AAACC;AAHV,2BAIM,3BAoDA,OAACe;AApDD,GAAA,QAAAd,sCAAAC,+CAAAC,wDAAAuJ;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,mHAAA,WAAAC,QAAAC;;AAAA,AAAA,IAAAD,cAAA;4EAVRpE,4BACGzL,YAIA3B,gBAAS0H,4BACJjI,SACAmO,0BACAE,kCACAnG,rOACA,AAAA,YAAA4J,mOAAAE;;;AAAA,CAAA,AAAA,AAAAF,0GAAA,WAAAC;;AAAA,AAAA,IAAAA,cAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,2HAAA9M;;AAAA,CAAA,AAAA,AAAA8M,oJAAA,WACsB9I,EAAEnE;;AADxB,AAAA,YAAA,RACsBmE;AADtB,AAEI,SAAI,EAAK,sDAAA,tDAACrJ,6CAAEK,mBACH,+GAAA,/GAACL,6CAAE,AAAC6L,0DAAY3G,oBACrB,EAAK,AAAC+E,8BAAM/E,aACP,AAAClF,6CAAE,AAAC6L,0DAAY3G,QAAQ7E;;;AALrC,CAAA,AAAA,AAAA8R,8IAAA,WAOgB9I,EAAEvG;;AAPlB,AAAA,YAAA,RAOgBuG;AAPhB,AAQI,OAAC7F,qDAAmBV,MAAMlC;;;AAR9B,CAAA,AAAA,AAAAuR,mJAAA,WAUkBlN,MAAKC;;AAVvB,AAAA,gBAAA,ZAUkBD;AAVlB,AAWI,oBAAQ,AAAmBA,uFAAKC;AAAhC;AAAA,AAAA,MAAA,KAAAzF,MAAA;;;AACA,IAAMyF,aAAO,EAAI,sDAAA,tDAAClF,6CAAEK,eACL,AAACyM,8GAAK5H,aACNA;IACTiM,QAAM,AAACC,4DAAclM,WAAOA;IAC5BqN,IAAM,AAACpH,qDAAO,uDAAA,vDAACJ,2DAAMoG;IACrBE,KAAM,wDAAA,xDAACpE,4DAAMsF;IACblD,KAAM,kGAAA,lGAACvH,6BACA,gEAAA,hEAACiD,uDAAI1K,qGACL,WAAK4H;AAAL,AACE,GAAI,AAACjI,6CAAEiI,EAAE5H;AACPgR;;AACA,OAACpE,wDAAI,AAAC9C,4CAAIjF,WAAO+C,GAAGsK;;;AAXrC,AAYE,OAACxP,8EACA,AAACyH,uDAAIgE,0BAAmBa,IACxBzO,gBAASqE,UAAKC;;;AA1BrB,CAAA,AAAA,AAAAiN,mJAAA,WA4BkBlN,MAAKnC;;AA5BvB,AAAA,gBAAA,ZA4BkBmC;AA5BlB,AA6BI,oBAAQ,AAAaA,iFAAKnC;AAA1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACgE,4CACAX,MAAMmC,UACN;AAAA,AACE,IAAMoK,KAAG,AAAC7E,uDAAIkE,kCACA,AAACtL,0DAA8BN;IACvC0P,cAAY,AAACrI,4CAAIkF,GAAGhP;AAF1B,AAGE,oBAAM,iBAAA2J,oBAAK,AAACI,8BAAUoI;AAAhB,AAAA,GAAAxI;AACK,IAAA3H,mBAAI,AAAC+M,gEAAYoD;AAAjB,AAAA,oBAAAnQ;AAAAA;;AACI,OAAC4I,4BAAQuH;;;AAFlBxI;;;AAAN,AAGE,MACC,gDAAA,oDAAA,2CAAA,6DAAA,5MAACpI,sMACgBkB,sFACYmC;;AANhC;;AAOA,IAAMC,SAAO,sCAAA,tCAAC4C,6BACAzH,gGACA,WAAK4H;AAAL,AACE,OAACgF,wDAAI,AAAC9C,4CAAIkF,GAAGpH,GAAGuK;;AAHhC,AAIE,GAAI,sDAAA,tDAACxS,6CAAEK;AACL,0DAAA,nDAAC8J,4CAAIjF;;AACLA;;;;;AAjDb,CAAA,AAAA,AAAAiN,uIAAA,WAmDS9I;;AAnDT,AAAA,YAAA,RAmDSA;AAnDT,AAmDYd;;;AAnDZ,CAAA,AAAA4J,2EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iFAAA;;AAAA,CAAA,AAAAA,oFAAA;;AAAA,CAAA,AAAAA,yFAAA,WAAAnJ,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;gLAVR+E,yBACGzL,SAIA3B,aAAS0H,yBACJjI,MACAmO,uBACAE,+BACAnG,pTACA+J,uEAAA,oPAAAD;4EAVRrE,yBACGzL,SAIA3B,aAAS0H,yBACJjI,MACAmO,uBACAE,+BACAnG,hNACA,AAAA,YAAA4J,2MAAAE;;;AAAAF;;4EAVRnE,qBACGzL,oDAIA3B,SAAS0H,qBACJjI,EACAmO,mBACAE,2BACAnG,nOACA,YAAA4J,0NAAA;;CAoDA,2CAAA,qJAAA,rBAA8B7J,wIACP1H;;+DA1D5BA,SAAS0H;;;wEAAT1H;;wEAAAA,SAAS0H;;;;;;;;;AA6Df,AAAA;;;;;+CAAA,uDAAAhJ,tGAAOoT;AAAP,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjT,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6EAAA,7EAAOiT,wFAIH9R;AAJJ,AAKG,IAAMwH,QAAM,AAACL,yDAA6BnH;AAA1C,AACE,OAAC+R,2EAAc/R,SAASwH;;;AAN7B,CAAA,6EAAA,7EAAOsK,wFAOH9R,SAAS0H;AAPb,AAQG,IAAMjI,IAAE,AAAA,4FAAYO;IACd2H,KAAG,AAACC;AADV,2BAEM,3BAoCA,OAACe;AApCD,GAAA,QAAAd,sCAAAC,+CAAAC,wDAAAiK;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,mHAAA,WAAAC,QAAAC;;AAAA,AAAA,IAAAD,cAAA;4EAHLlS,gBAAS0H,4BACJjI,SACAkI,jIACA,AAAA,YAAAsK,+HAAAE;;;AAAA,CAAA,AAAA,AAAAF,0GAAA,WAAAC;;AAAA,AAAA,IAAAA,cAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,2HAAAxN;;AAAA,CAAA,AAAA,AAAAwN,oJAAA,WACsBxJ,EAAEnE;;AADxB,AAAA,YAAA,RACsBmE;AADtB,AAEI,IAAAW,oBAAK,AAACC,8BAAM/E;AAAZ,AAAA,GAAA8E;AAAA,IAAAA,wBACK,AAAChK,6CAAE,AAAC6L,0DAAY3G,QAAQ7E;AAD7B,AAAA,GAAA2J;AAEK,IAAME,KAAG,mDAAA,nDAACC,4CAAIjF;AAAd,AACE,SAAI,GAAK,AAACkF,8BAAUF,WAChB,GAAK,AAACe,4BAAQf;;AAJzBF;;;AAAAA;;;;AAFJ,CAAA,AAAA,AAAA6I,8IAAA,WAQgBxJ,EAAEvG;;AARlB,AAAA,YAAA,RAQgBuG;AARhB,AASI,OAAC7F,qDAAmBV,MAAMlC;;;AAT9B,CAAA,AAAA,AAAAiS,mJAAA,WAWkB5N,MAAKC;;AAXvB,AAAA,gBAAA,ZAWkBD;AAXlB,AAYI,oBAAQ,AAAmBA,uFAAKC;AAAhC;AAAA,AAAA,MAAA,KAAAzF,MAAA;;;AACA,IAAAwT,cAAsB/N;YAAtB,AAAAiF,4CAAA8I,YAAA,IAAA,pEAAO1I;UAAP,AAAAJ,4CAAA8I,YAAA,IAAA,lEAAalH;UAAb,AAAA5B,4CAAA8I,YAAA,IAAA,lEAAiBC;IAGXC,WAAS,AAACC,6CAAgB7I;IAC1B8I,SAAO,AAACC,6CAAgBvH;IACxBwH,SAAO,AAACD,6CAAgBJ;IACxBM,IAAE,AAAChJ,8DAAI6I,OAAOF,2DAASI;AAN7B,AAOE,OAACxQ,8EAAoByQ,EAAE5S,gBAASqE,UAAKC;;;AApB3C,CAAA,AAAA,AAAA2N,mJAAA,WAsBkB5N,MAAKnC;;AAtBvB,AAAA,gBAAA,ZAsBkBmC;AAtBlB,AAuBI,oBAAQ,AAAaA,iFAAKnC;AAA1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACgE,4CACAX,MAAMmC,UACN;AAAA,AACE,IAAMuO,IAAE,AAACpQ,0DAA8BN;IACjCyH,QAAM,AAAC2B,qDAAO,iDAAA,mFAAA,IAAA,xIAACrL,+CAAO2S;IACtBzH,MAAI,AAACX,qDAAO,iDAAA,mFAAA,IAAA,xIAACvK,+CAAO2S,sGACR,AAACC,uDAAS,iDAAA,mFAAA,IAAA,xIAAC5S,+CAAO2S;IAC9BN,MAAI,AAAC9H,qDAAO,iDAAA,mFAAA,IAAA,xIAACvK,+CAAO2S,sGACR,iDAAA,mFAAA,IAAA,xIAAC3S,+CAAO2S;AAL1B,AAME,OAAC1G,8GAAKvC,MAAMwB,IAAImH;;;;AAjCzB,CAAA,AAAA,AAAAL,uIAAA,WAmCSxJ;;AAnCT,AAAA,YAAA,RAmCSA;AAnCT,AAmCYd;;;AAnCZ,CAAA,AAAAsK,2EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iFAAA;;AAAA,CAAA,AAAAA,oFAAA;;AAAA,CAAA,AAAAA,yFAAA,WAAA7J,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;sJAHLrI,aAAS0H,yBACJjI,MACAkI,lMACAyK,uEAAA,kIAAAD;4EAHLnS,aAAS0H,yBACJjI,MACAkI,xHACA,AAAA,YAAAsK,mHAAAE;;;AAAAF;;4EAHLjS,SAAS0H,qBACJjI,EACAkI,5GACA,YAAAsK,mGAAA;;CAoCA,2CAAA,qJAAA,rBAA8BvK,wIACP1H;;;AA/ChC,CAAA,uEAAA,vEAAO8R;;AAAP,AAiDA,AAAA;;;;;;mDAAA,2DAAApT,9GAAOqU;AAAP,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,+EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAlU,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iFAAA,jFAAOkU,4FAKH/S;AALJ,AAMG,IAAMwH,QAAM,AAACL,yDAA6BnH;AAA1C,AACE,OAACgT,+EAAkBhT,SAASwH;;;AAPjC,CAAA,iFAAA,jFAAOuL,4FAQH/S,SAAS0H;AARb,AASG,IAAMjI,IAAE,AAAA,4FAAYO;IACd2H,KAAG,AAACC;AADV,2BAEM,3BAqCA,OAACe;AArCD,GAAA,QAAAd,sCAAAC,+CAAAC,wDAAAkL;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,mHAAA,WAAAC,QAAAC;;AAAA,AAAA,IAAAD,cAAA;4EAHLnT,gBAAS0H,4BACJjI,SACAkI,jIACA,AAAA,YAAAuL,+HAAAE;;;AAAA,CAAA,AAAA,AAAAF,0GAAA,WAAAC;;AAAA,AAAA,IAAAA,cAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,2HAAAzO;;AAAA,CAAA,AAAA,AAAAyO,oJAAA,WACsBzK,EAAEnE;;AADxB,AAAA,YAAA,RACsBmE;AADtB,AAEI,oDAAA,3CAAK,AAACY,8BAAM/E,eACP,AAAClF,6CAAE,AAAC6L,0DAAY3G,QAAQ7E,eACxB,EAAI,GAAK,AAAC+J,8BAAU,mDAAA,nDAACD,4CAAIjF,oBACrB,EAAA,kFAAA,jFAAG,WAAA,VAAGgP,kBACH,mDAAA,YAAA,mDAAA,lHAAC/J,+DAAAA,nBAAIjF,+DAAAA,cACL,WAAA,VAAGgP;;;AAPnB,CAAA,AAAA,AAAAJ,8IAAA,WASgBzK,EAAEvG;;AATlB,AAAA,YAAA,RASgBuG;AAThB,AAUI,OAAC7F,qDAAmBV,MAAMlC;;;AAV9B,CAAA,AAAA,AAAAkT,mJAAA,WAYkB7O,MAAKC;;AAZvB,AAAA,gBAAA,ZAYkBD;AAZlB,AAaI,oBAAQ,AAAmBA,uFAAKC;AAAhC;AAAA,AAAA,MAAA,KAAAzF,MAAA;;;AACA,IAAA0U,cAAsBjP;YAAtB,AAAAiF,4CAAAgK,YAAA,IAAA,pEAAO5J;UAAP,AAAAJ,4CAAAgK,YAAA,IAAA,lEAAapI;UAAb,AAAA5B,4CAAAgK,YAAA,IAAA,lEAAiBjB;IAGXC,WAAS,AAACC,6CAAgB7I;IAC1B8I,SAAO,AAACC,6CAAgBvH;IACxBqI,SAAO,AAACC,6CAAgBnB;IACxB7D,KAAG,AAAC7E,8DAAI6I,OAAOF,2DAASiB;AAN9B,AAOE,OAACrR,8EAAoBsM,GAAGzO,gBAASqE,UAAKC;;;AArB5C,CAAA,AAAA,AAAA4O,mJAAA,WAuBkB7O,MAAKnC;;AAvBvB,AAAA,gBAAA,ZAuBkBmC;AAvBlB,AAwBI,oBAAQ,AAAaA,iFAAKnC;AAA1B;AAAA,AAAA,MAAA,KAAArD,MAAA;;;AACA,OAACgE,4CACAX,MAAMmC,UACN;AAAA,AACE,IAAMuO,IAAE,AAACpQ,0DAA8BN;IACjCyH,QAAM,AAAC+J,qDAAO,iDAAA,mFAAA,IAAA,xIAACzT,+CAAO2S;IACtBzH,MAAI,AAACX,qDAAO,AAACqI,uDAAS,iDAAA,mFAAA,IAAA,xIAAC5S,+CAAO2S,uGAClB,iDAAA,mFAAA,IAAA,xIAAC3S,+CAAO2S;IACpBN,MAAI,AAAC9H,qDAAO,AAACqI,uDAAS,iDAAA,mFAAA,IAAA,xIAAC5S,+CAAO2S,uGAClB,iDAAA,mFAAA,IAAA,xIAAC3S,+CAAO2S;AAL1B,AAME,OAAC1G,8GAAKvC,MAAMwB,IAAImH;;;;AAlCzB,CAAA,AAAA,AAAAY,uIAAA,WAoCSzK;;AApCT,AAAA,YAAA,RAoCSA;AApCT,AAoCYd;;;AApCZ,CAAA,AAAAuL,2EAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iFAAA;;AAAA,CAAA,AAAAA,oFAAA;;AAAA,CAAA,AAAAA,yFAAA,WAAA9K,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;sJAHLrI,aAAS0H,yBACJjI,MACAkI,lMACA0L,uEAAA,kIAAAD;4EAHLpT,aAAS0H,yBACJjI,MACAkI,xHACA,AAAA,YAAAuL,mHAAAE;;;AAAAF;;4EAHLlT,SAAS0H,qBACJjI,EACAkI,5GACA,YAAAuL,mGAAA;;CAqCA,2CAAA,qJAAA,rBAA8BxL,wIACP1H;;;AAjDhC,CAAA,2EAAA,3EAAO+S;;AAAP,AAwDA,AAAKY,yOAEC,+EAAA,/EAAC5U,zCACD,iIAAA,jIAACuB,rDACD,gPAAA,kEAAA,lTAACW,2WAA8CsG,haAC/C,8cAAA,+EAAA,7hBAACtG,slBAAoD4H,3oBACrD,8rBAAA,wFAAA,txBAAC5H,+0BAAwDyJ;AAE/D,AAAKkJ,iCAAG,uGAAA,vGAAClU,wEAAciU;AACvB,AAAKE,sCAAQ,gFAAA,kEAAA,lJAACnS,iDAAqBkS;AACnC,AAAKE,4CAAcD;AAEnB,AAAKE,iCAAG,uGAAA,vGAACrU,wEAAciU;AACvB,AAAKK,sCAAQ,gFAAA,kEAAA,lJAACtS,iDAAqBqS;AACnC,AAAKE,uCAAS,gFAAA,+EAAA,/JAACvS,iDAAqBqS;AAEpC,AAAKG,iCAAG,uGAAA,vGAACxU,wEAAciU;AACvB,AAAKQ,sCAAQ,gFAAA,kEAAA,lJAACzS,iDAAqBwS;AACnC,AAAKE,qCAAO,gFAAA,+EAAA,/JAAC1S,iDAAqBwS;AAClC,AAAKG,2CAAa,gFAAA,wFAAA,xKAAC3S,iDAAqBwS;AAExC,AAAKI,iCAAG,uGAAA,vGAAC5U,wEAAciU;AACvB,AAAKY,sCAAQ,gFAAA,kEAAA,lJAAC7S,iDAAqB4S;AACnC,AAAKE,qCAAO,gFAAA,+EAAA,/JAAC9S,iDAAqB4S;AAElC,AAAKG,qKACCd,rDACA,oFAAA,mFAAA,vKAAC1S,gOAAsDwK,xSACvD,6VAAA,7VAAC/L;AAEP,AAAKgV,6CACH,uFAAA,kEAAA,zJAAChT,iDAAqB+S;AAExB,AAAKE,+CACH,uFAAA,mFAAA,1KAACjT,iDAAqB+S;AAQxB,AAAKG,ohBAEC,+EAAA,/EAAC7V,zCACD,8HAAA,9HAACuB,zCACD,0OAAA,1OAACA,zCACD,qVAAA,rVAACA,rDACD,qcAAA,8DAAA,ngBAACW,qkBACyB,AAACqL,gDACA,AAACuI,gHAAO,8GAAA,IAAA,IAAA,tHAAC3I,gIACD,8GAAA,IAAA,IAAA,tHAACA,gIACD,8GAAA,IAAA,IAAA,tHAACA,1hCACpC,kqCAAA,8DAAA,huCAACjL,0xCACyB,AAACqL,gDACA,AAACuI,gHAAO,8GAAA,IAAA,IAAA,tHAAC3I,gIACD,8GAAA,IAAA,IAAA,tHAACA,gIACD,8GAAA,IAAA,KAAA,vHAACA,/uDACpC,w3DAAA,8DAAA,t7DAACjL,u/DACyB,AAACqL,gDACA,AAACuI,gHAAO,8GAAA,IAAA,IAAA,tHAAC3I,gIACD,8GAAA,IAAA,IAAA,tHAACA,gIACD,8GAAA,IAAA,IAAA,tHAACA,58EACpC,qlFAAA,wEAAA,7pFAACjL,+tFACyB,AAAC6O,kDAAmBgF,t0FAC9C,21FAAA,wEAAA,n6FAAC7T,o+FACyB,AAAC6O,kDACA,WAAKrQ,tlGAShC,AAACwB,rDAGD,AAACA;AAZ0B,AAEE,OAAC8T,wDACAtV,EAAEA,EACF,WAAK4H,EAAE2N;AAAP,AACE,GAAI,AAAC5V,6CAAEiI,EAAE2N;AACP,GAAI,AAAC5V,6CAAE4V,EAAEvV;AAAT;;AAAA;;;AADF;;;KAIhC,8DAAA,kEAC0B,AAAC0R,6CAAc2D,qBAEzC,8DAAA,iEAC0B,AAAC3D,6CACA,WAAK1R;AAAL,AAEE,OAACsV,wDACAtV,EAAEA,EACF,WAAK4H,EAAE2N;AAAP,AACE,GAAI,AAAC5V,6CAAEiI,EAAE2N;AACP,GAAI,AAAC5V,6CAAE4V,EAAEvV;AAAT;;AAAA;;;AADF;;;;AAItC,AAAKwV,iCAAG,4GAAA,IAAA,hHAACvV,wEAAckV;AACvB,AAAKM,2CAAa,gFAAA,8DAAA,9IAACxT,iDAAqBuT;AAExC;;;;AAEEE,wCACA,gFAAA,8DAAA,9IAACzT,iDAAqBuT;AAExB,AAAKG,+CAAiB,gFAAA,wEAAA,xJAAC1T,iDAAqBuT;AAC5C,AAAKI,yCAAWD;AAChB,AAAKE,0CAAY,gFAAA,8DAAA,9IAAC5T,iDAAqBuT;AAEvC,AAAKM,+gBACC,+EAAA,/EAACxW,zCACD,iIAAA,jIAACuB,zCACD,6OAAA,7OAACA,zCACD,wVAAA,xVAACA,rDACD,wcAAA,8DAAA,tgBAACW,wkBAAgD,AAACkM,gDAAiB2H,7qBACnE,ksBAAA,8DAAA,hwBAAC7T,i0BACyB,AAACkM,gDACA,WAAK1N,j7BAShC,AAACwB,rDAcD,AAACA,rDACD,AAACA,rDAWD,AAACA,rDACD,AAACA;AApC0B,AAEE,OAAC8T,wDACAtV,EAAEA,EACF,WAAK4H,EAAE2N;AAAP,AACE,GAAI,AAAC5V,6CAAEiI,EAAE2N;AACP,GAAI,AAAC5V,6CAAE4V,EAAEvV;AAAT;;AAAA;;;AADF;;;KAIhC,8DAAA,0DAC0B,AAAC0N,gDACA,WAAK1N;AAAL,AACE,sCAAA,/BAACyH,6BACAzH,6FACA,WAAK+V;AAAL,AACE,sCAAA,/BAACtO,6BACAzH,yFACA,WAAKgW;AAAL,AACE,GAAM,EAAK,AAACrW,6CAAEqW,IAAI,KAAA,JAAGhW,eAAM,AAACL,6CAAEoW,IAAI,KAAA,JAAG/V;AAArC;;AAAA,GACM,EAAK,AAACL,6CAAEqW,IAAI,KAAA,JAAGhW,eAAM,AAACL,6CAAEoW,IAAI,KAAA,JAAG/V;AADrC;;AAAA,GAEM,EAAK,AAACL,6CAAEqW,IAAID,UAAK,CAAGC,MAAI,KAAA,JAAGhW;AAFjC;;AAAA,AAAA;;;;;;;KAKnC,8DAAA,kEAAgD,AAAC0R,6CAAc2D,qBAC/D,8DAAA,iEAC0B,AAAC3D,6CACA,WAAK1R;AAAL,AAEE,OAACsV,wDACAtV,EAAEA,EACF,WAAK4H,EAAE2N;AAAP,AACE,GAAI,AAAC5V,6CAAEiI,EAAE2N;AACP,GAAI,AAAC5V,6CAAE4V,EAAEvV;AAAT;;AAAA;;;AADF;;;KAIhC,wEAAA,kEAAqD,AAACqQ,kDAAmBgF,qBACzE,wEAAA,iEAC0B,AAAChF,kDACA,WAAKrQ;AAAL,AAEE,OAACsV,wDACAtV,EAAEA,EACF,WAAK4H,EAAE2N;AAAP,AACE,GAAI,AAAC5V,6CAAEiI,EAAE2N;AACP,GAAI,AAAC5V,6CAAE4V,EAAEvV;AAAT;;AAAA;;;AADF;;;;AAItC,AAAKiW,iCAAG,uGAAA,vGAAChW,wEAAc6V;AACvB,AAAKI,0CAAY,gFAAA,8DAAA,9IAACjU,iDAAqBgU;AACvC,AAAKE,wCAAU,gFAAA,8DAAA,9IAAClU,iDAAqBgU;AACrC,AAAKG,uCAAS,gFAAA,wEAAA,xJAACnU,iDAAqBgU;AACpC,AAAKI,0CAAY,gFAAA,8DAAA,9IAACpU,iDAAqBgU;AAEvC,AAAKK,kCAAI,uGAAA,vGAACrW,wEAAc6V;AACxB,AAAKS,4CAAc,iFAAA,8DAAA,/IAACtU,iDAAqBqU;AACzC,AAAKE,yCAAW,iFAAA,8DAAA,/IAACvU,iDAAqBqU;AACtC,AAAKG,gDAAkB,iFAAA,wEAAA,zJAACxU,iDAAqBqU;AAC7C,AAAKI,0CAAYD;AACjB,AAAKE,2CAAa,iFAAA,8DAAA,/IAAC1U,iDAAqBqU;AAExC,AAAKM,iCAAG,uGAAA,vGAAC3W,wEAAc6V;AACvB,AAAKe,2CAAa,gFAAA,8DAAA,9IAAC5U,iDAAqB2U;AACxC,AAAKE,wCAAU,gFAAA,8DAAA,9IAAC7U,iDAAqB2U;AACrC,AAAKG,0CAAY,gFAAA,8DAAA,9IAAC9U,iDAAqB2U;AAGvC,AAAKI,+CAAiB,gFAAA,wEAAA,xJAAC/U,iDAAqB2U;AAS5C,AAAKK,mOACC,+EAAA,/EAAC3X,zCACD,+HAAA,/HAACuB,zCACD,4OAAA,5OAACA,rDACD,6WAAA,uDAAA,paAACW,ueAA6C6Q,5hBAC9C,0kBAAA,+DAAA,zoBAAC7Q,otBAAqD8R;AAE5D,AAAK4D,kCACH,6GAAA,7GAACjX,wEAAcgX;AAEjB,AAAKE,2CACH,iFAAA,uDAAA,xIAAClV,iDAAqBiV;AAExB,AAAKE,+CACH,iFAAA,+DAAA,hJAACnV,iDAAqBiV","names":["var_args","G__101307","sicmutils.calculus.manifold/make-manifold-family","js/Error","name-format","sicmutils.calculus.manifold.make_manifold_family","over","cljs.core/contains?","sicmutils.calculus.manifold/manifold-family?","m","cljs.core._EQ_","sicmutils.value/kind","G__101316","sicmutils.calculus.manifold/make-manifold","family","n","sicmutils.calculus.manifold.make_manifold","embedding-dimension","cljs.core/integer?","goog.string/format","sicmutils.calculus.manifold/manifold?","sicmutils.calculus.manifold/manifold-type","manifold","cljs.core.get_in","sicmutils.calculus.manifold/manifold","cljs.core/meta","sicmutils.calculus.manifold/make-patch","name","sicmutils.calculus.manifold/attach-patch","patch-name","patch","cljs.core/assoc-in","sicmutils.calculus.manifold/patch-names","sicmutils.util/keyset","sicmutils.calculus.manifold/get-patch","temp__5751__auto__","gen","cljs.core.assoc","cljs.core.ex_info","sicmutils.calculus.manifold/attach-coordinate-system","coordinate-system-name","coordinate-system-ctor","ks","v","sicmutils.calculus.manifold/coordinate-system-names","sicmutils.calculus.manifold/get-coordinate-system","system-name","or__4253__auto__","sicmutils.calculus.manifold/coordinate-system-at","ctor","G__101318","sicmutils.calculus.manifold/make-manifold-point","spec","cljs.core.atom","coordinate-system","coordinate-rep","point","sicmutils.calculus.manifold.make_manifold_point","reps","cljs.core.swap_BANG_","cljs.core/assoc","sicmutils.calculus.manifold/uuid","sicmutils.calculus.manifold/manifold-point-representation","sicmutils.calculus.manifold/point->manifold","sicmutils.calculus.manifold/manifold-point?","p","sicmutils.calculus.manifold/my-manifold-point?","sicmutils.calculus.manifold/get-coordinates","manifold-point","thunk","coordsys-id","fexpr__101320","cljs.core/deref","rep","sicmutils.structure.mapr","sicmutils.abstract.number/simplify-numerical-expression","sicmutils$calculus$manifold$ICoordinateSystem$check_coordinates$dyn","x__4550__auto__","m__4551__auto__","sicmutils.calculus.manifold/check-coordinates","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","sicmutils$calculus$manifold$ICoordinateSystem$check_point$dyn","sicmutils.calculus.manifold/check-point","sicmutils$calculus$manifold$ICoordinateSystem$coords__GT_point$dyn","sicmutils.calculus.manifold/coords->point","sicmutils$calculus$manifold$ICoordinateSystem$point__GT_coords$dyn","sicmutils.calculus.manifold/point->coords","sicmutils$calculus$manifold$ICoordinateSystem$uuid$dyn","sicmutils.calculus.manifold/ICoordinateSystem","this","coords","sicmutils.calculus.manifold/coordinate-system?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","sicmutils.calculus.manifold/coordinate-prototype","coordsys","sicmutils.calculus.manifold/with-coordinate-prototype","prototype","current-proto","cljs.core.vary_meta","sicmutils.calculus.manifold/chart","sicmutils.calculus.frame/frame?","event","sicmutils.calculus.frame/event->coords","sicmutils.calculus.manifold/point","sicmutils.calculus.frame/coords->event","sicmutils.calculus.manifold/typical-coords","cljs.core/gensym","sicmutils.calculus.manifold/typical-point","sicmutils.calculus.manifold/transfer-point","embedded","embedding","embedded-m","embedding-m","sicmutils.calculus.manifold/corresponding-velocities","cljs.core.symbol","sicmutils.calculus.manifold/literal-manifold-function","sym","domain","sicmutils.structure/up*","cljs.core.repeat","range","sicmutils.function$.compose","sicmutils.abstract$.function$.literal_function","cljs.core/name","sicmutils.calculus.manifold/literal-scalar-field","sicmutils.calculus.manifold/zero-manifold-function","sicmutils.calculus.manifold/one-manifold-function","sicmutils.calculus.manifold/constant-manifold-function","c","sicmutils.calculus.manifold/c:generate","orientation","f","sicmutils.structure/generate","sicmutils.calculus.manifold/default-coordinate-prototype","k","i","G__101343","sicmutils.calculus.manifold/->Rectangular","proto","sicmutils.calculus.manifold.__GT_Rectangular","coordinate-prototype","id","sicmutils.util/uuid","js/sicmutils","js/sicmutils.calculus","js/sicmutils.calculus.manifold","js/sicmutils.calculus.manifold.t_sicmutils$calculus$manifold101344","sicmutils.calculus.manifold/t_sicmutils$calculus$manifold101344","_101346","meta101345","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sicmutils.calculus.manifold/->t_sicmutils$calculus$manifold101344","_","sicmutils.structure/dimension","cljs.core/with-meta","G__101348","sicmutils.calculus.manifold/->PolarCylindrical","sicmutils.calculus.manifold.__GT_PolarCylindrical","js/sicmutils.calculus.manifold.t_sicmutils$calculus$manifold101349","sicmutils.calculus.manifold/t_sicmutils$calculus$manifold101349","_101351","meta101350","sicmutils.calculus.manifold/->t_sicmutils$calculus$manifold101349","and__4251__auto__","sicmutils.structure/up?","c0","cljs.core.nth","sicmutils.value/number?","vec__101352","r","theta","sicmutils.generic._STAR_","sicmutils.generic/cos","sicmutils.generic/sin","sicmutils.util/illegal","vec__101355","y","rsq","sicmutils.generic._PLUS_","sicmutils.generic/square","sicmutils.value/zero?","sicmutils.util/illegal-state","sicmutils.generic/sqrt","sicmutils.generic/atan","G__101359","sicmutils.calculus.manifold/->SphericalCylindrical","sicmutils.calculus.manifold.__GT_SphericalCylindrical","js/sicmutils.calculus.manifold.t_sicmutils$calculus$manifold101360","sicmutils.calculus.manifold/t_sicmutils$calculus$manifold101360","_101362","meta101361","sicmutils.calculus.manifold/->t_sicmutils$calculus$manifold101360","sicmutils.generic/dimension","vec__101363","phi","vec__101366","z","sicmutils.generic/acos","sicmutils.generic/divide","G__101370","sicmutils.calculus.manifold/->SpacetimeSpherical","sicmutils.calculus.manifold.__GT_SpacetimeSpherical","js/sicmutils.calculus.manifold.t_sicmutils$calculus$manifold101371","sicmutils.calculus.manifold/t_sicmutils$calculus$manifold101371","_101373","meta101372","sicmutils.calculus.manifold/->t_sicmutils$calculus$manifold101371","vec__101374","t","sicmutils.structure.up","cljs.core/not","vec__101377","sicmutils.generic._SLASH_","sicmutils.calculus.manifold/->S2-coordinates","inverse-orientation","sicmutils.generic/invert","sicmutils$calculus$manifold$__GT_S2_coordinates_$_ctor","js/sicmutils.calculus.manifold.t_sicmutils$calculus$manifold101380","sicmutils.calculus.manifold/t_sicmutils$calculus$manifold101380","_101382","meta101381","sicmutils.calculus.manifold/->t_sicmutils$calculus$manifold101380","vec__101383","colatitude","longitude","vec__101386","sicmutils.calculus.manifold/->Sn-coordinates","orientation-function","rotate-left","l","cljs.core.concat","cljs.core/LazySeq","cljs.core/rest","cljs.core/first","sicmutils$calculus$manifold$__GT_Sn_coordinates_$_ctor","orientation-matrix","G__101389","orientation-inverse-matrix","js/sicmutils.calculus.manifold.t_sicmutils$calculus$manifold101390","sicmutils.calculus.manifold/t_sicmutils$calculus$manifold101390","_101392","meta101391","sicmutils.calculus.manifold/->t_sicmutils$calculus$manifold101390","dim","cljs.core/every?","cljs.core.map_indexed","coord","sicmutils.generic/negative?","pt","sines","cljs.core.map","cosines","G__101393","cljs.core.apply","sicmutils.generic/*","cljs.core/cons","cljs.core.take","cljs.core.range","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","G__101394","cljs.core/reverse","safe-atan","more","ans","cljs.core/second","cljs.core/next","r'","sicmutils.calculus.manifold/->Sn-stereographic","sicmutils$calculus$manifold$__GT_Sn_stereographic_$_ctor","G__101397","js/sicmutils.calculus.manifold.t_sicmutils$calculus$manifold101398","sicmutils.calculus.manifold/t_sicmutils$calculus$manifold101398","_101400","meta101399","sicmutils.calculus.manifold/->t_sicmutils$calculus$manifold101398","coords'","delta","sicmutils.generic/dot-product","xn","G__101401","G__101402","sicmutils.generic._","p1__101395#","G__101403","G__101404","p1__101396#","G__101405","G__101406","sicmutils.calculus.manifold/->Sn-gnomonic","sicmutils$calculus$manifold$__GT_Sn_gnomonic_$_ctor","G__101407","js/sicmutils.calculus.manifold.t_sicmutils$calculus$manifold101408","sicmutils.calculus.manifold/t_sicmutils$calculus$manifold101408","_101410","meta101409","sicmutils.calculus.manifold/->t_sicmutils$calculus$manifold101408","d","final-coord","G__101412","sicmutils.calculus.manifold/->Euler-chart","sicmutils.calculus.manifold.__GT_Euler_chart","js/sicmutils.calculus.manifold.t_sicmutils$calculus$manifold101413","sicmutils.calculus.manifold/t_sicmutils$calculus$manifold101413","_101415","meta101414","sicmutils.calculus.manifold/->t_sicmutils$calculus$manifold101413","vec__101416","psi","Mx-theta","sicmutils.mechanics.rotation/rotate-x-matrix","Mz-phi","sicmutils.mechanics.rotation/rotate-z-matrix","Mz-psi","M","sicmutils.generic/negate","G__101420","sicmutils.calculus.manifold/->Alternate-chart","sicmutils.calculus.manifold.__GT_Alternate_chart","js/sicmutils.calculus.manifold.t_sicmutils$calculus$manifold101421","sicmutils.calculus.manifold/t_sicmutils$calculus$manifold101421","_101423","meta101422","sicmutils.calculus.manifold/->t_sicmutils$calculus$manifold101421","Math/PI","vec__101424","My-psi","sicmutils.mechanics.rotation/rotate-y-matrix","sicmutils.generic/asin","sicmutils.calculus.manifold/Rn","sicmutils.calculus.manifold/R1","sicmutils.calculus.manifold/R1-rect","sicmutils.calculus.manifold/the-real-line","sicmutils.calculus.manifold/R2","sicmutils.calculus.manifold/R2-rect","sicmutils.calculus.manifold/R2-polar","sicmutils.calculus.manifold/R3","sicmutils.calculus.manifold/R3-rect","sicmutils.calculus.manifold/R3-cyl","sicmutils.calculus.manifold/R3-spherical","sicmutils.calculus.manifold/R4","sicmutils.calculus.manifold/R4-rect","sicmutils.calculus.manifold/R4-cyl","sicmutils.calculus.manifold/spacetime","sicmutils.calculus.manifold/spacetime-rect","sicmutils.calculus.manifold/spacetime-sphere","sicmutils.calculus.manifold/S2-type","sicmutils.structure.down","sicmutils.matrix/I","sicmutils.matrix.generate","j","sicmutils.calculus.manifold/S2","sicmutils.calculus.manifold/S2-spherical","sicmutils.calculus.manifold/S2-tilted","sicmutils.calculus.manifold/S2-stereographic","sicmutils.calculus.manifold/S2-Riemann","sicmutils.calculus.manifold/S2-gnomonic","sicmutils.calculus.manifold/Sn","col","row","sicmutils.calculus.manifold/S1","sicmutils.calculus.manifold/S1-circular","sicmutils.calculus.manifold/S1-tilted","sicmutils.calculus.manifold/S1-slope","sicmutils.calculus.manifold/S1-gnomonic","sicmutils.calculus.manifold/S2p","sicmutils.calculus.manifold/S2p-spherical","sicmutils.calculus.manifold/S2p-tilted","sicmutils.calculus.manifold/S2p-stereographic","sicmutils.calculus.manifold/S2p-Riemann","sicmutils.calculus.manifold/S2p-gnomonic","sicmutils.calculus.manifold/S3","sicmutils.calculus.manifold/S3-spherical","sicmutils.calculus.manifold/S3-tilted","sicmutils.calculus.manifold/S3-gnomonic","sicmutils.calculus.manifold/S3-stereographic","sicmutils.calculus.manifold/SO3-type","sicmutils.calculus.manifold/SO3","sicmutils.calculus.manifold/Euler-angles","sicmutils.calculus.manifold/alternate-angles"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.calculus.manifold\n  \"This namespace defines a functional API for:\n\n  - differentiable manifolds (both manifold families like [[Rn]] and manifolds\n    specialized to a concrete dimension)\n  - manifold points\n  - coordinate patches\n\n  As well as a whole bunch of defined manifolds and coordinate systems for\n  exploration and fun!\"\n  (:refer-clojure :exclude [uuid])\n  (:require #?(:cljs [goog.string :refer [format]])\n            [sicmutils.abstract.function :as af]\n            [sicmutils.abstract.number :refer [simplify-numerical-expression]]\n            [sicmutils.calculus.frame :as cf]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g]\n            [sicmutils.matrix :as matrix]\n            [sicmutils.mechanics.rotation\n             :refer [rotate-x-matrix rotate-y-matrix rotate-z-matrix]]\n            [sicmutils.structure :as s]\n            [sicmutils.util :as u]\n            [sicmutils.value :as v]\n            [taoensso.timbre :as log]))\n\n;; # Disclaimer (from @sritchie)\n;;\n;; I'm convinced that the scmutils code used to implement the ideas\n;; in \"Functional Differential Geometry\" doesn't have the final say on the best\n;; API for differential geometry. I'm going to leave notes throughout the\n;; namespace suggesting ways that we might make it better; please take these as\n;; challenges and erase the notes as you make improvements!\n;;\n;; Big TODO items:\n;;\n;; - `manifold` and `patch` should be protocols, so that manifolds, patches and\n;;   coordinate systems can report their manifold, and patches and coordinate\n;;   systems can report their patch. `point` can report its manifold too. Once\n;;   this change is made, `transfer-point` should use the `manifold` protocol to\n;;   simplify its implementation. (NOTE that `manifold` now works on coordsys\n;;   and manifolds, but not yet on patches.)\n;;\n;; - `patch`, `manifold` and `point` should be defrecords, so that they can\n;;   implement the protocols above in different ways. We can also implement\n;;   `dimension` correctly.\n;;\n;; - `make-patch` should return a patch template; only when you specialize the\n;;   manifold, or retrieve the patch FROM the specialized manifold with\n;;   `get-patch` should you actually build the defrecord.\n;;\n;; - the original codebase assigns a UUID to each manifold specialized off a\n;;   family. Is this a good idea?\n;;\n;; - coordinate systems now use a UUID in the protocol; this feels like a code\n;;   smell. This exists so that coordinate prototypes can live in metadata, and\n;;   can be changed without affecting equality of coordinate systems. BUT\n;;   reconsider this design!\n;;\n;; - coordinate systems have many more functions like `access-chains`,\n;;  `dual-chains`, `coordinate-basis` and friends. These are missing, and SHOULD\n;;  go into `coordinate.cljc.` Basically caching functions that can do these\n;;  transformations for a coordinate system should live in one spot.\n;;\n;; - it feels like `ICoordinateSystem` WANTS to live in `coordinate.cljc`... but\n;;   maybe not. I have a sense that we're a bit tangled.\n;;\n;; - keeping caches inside the points feels wrong. Can we just cache the\n;;   function itself?\n;;\n;; - There is a huge amount of repetition between the different coordinate\n;;   system definitions! There is clearly a smaller protocol that would work,\n;;   like `point->coords` and `coords->point`, plus maybe the validator.\n;;   `my-manifold-point?` does all the work for point checking, and we can\n;;   compose with a coordinate system defrecord to return `manifold`, `patch`\n;;   and `prototype.`\n;;\n;;  If we do this it'll make it easier to memoize just these smaller functions,\n;;  and keep an outer `point->coords` that can memoize the internal thing.\n;;\n;; - TODO: document all of the coordinate systems at the bottom of the page!\n;;\n;; - TODO: more tests of all of the new accessor functions. See Codecov for what\n;; - to do here.\n;;\n;; Okay, on to the business.\n;;\n;;\n;; ## Manifold Families\n;;\n;; Manifolds like R1, R2, S1, S2 etc are specialized versions of \"manifold\n;; templates\" like Rn and Sn. We call these \"manifold families\", while scmutils\n;; calls these \"manifold types\".\n;;\n;; NOTE: rather than taking a `name-format` string, `make-manifold-family`\n;; should take a function of the single dimension argument.\n;;\n;; NOTE: the original scmutils codebase keeps a `:distinguished-points` list\n;; inside the manifold family. This isn't used anywhere in the book or codebase.\n;; Keep an eye out and either implement or delete this note.\n\n(defn make-manifold-family\n  \"Generates a manifold family (a template for building manifolds) from the\n  supplied `name-format`.\n\n  Generated manifolds locally resemble Euclidean space (Rn) by default. You can\n  optionally pass `'Complex` or `'Quaternion` to `over` to customize the field\n  of the vector space that the manifold locally resembles at each point.\n\n  NOTE: only `'Real` does anything as of 3.15.2021.\"\n  ([name-format]\n   (make-manifold-family name-format 'Real))\n  ([name-format over]\n   {:pre [(contains? #{'Real 'Complex 'Quaternion} over)]}\n   {:over over\n    :name-format name-format\n    :patch-templates {}\n    :type ::manifold-family}))\n\n(defn manifold-family?\n  \"Returns `true` if `m` is a dictionary representing a manifold family, false\n  otherwise.\"\n  [m]\n  (= (v/kind m) ::manifold-family))\n\n(defn make-manifold\n  \"Returns a concrete manifold generated by specializing the supplied manifold\n  `family` into a concrete manifold of dimension `n`. `n` must be a positive\n  integer.\n\n  Optionally takes an `embedding-dimension`; this must be >= the value of `n`.\n  Use this in cases like an n-sphere embedded in a euclidean space of dimension\n  n+1.\n\n  A [manifold](https://en.wikipedia.org/wiki/Manifold) is a topological space\n  that locally resembles Euclidean space near each point.\"\n  ([family n]\n   (make-manifold family n n))\n  ([family n embedding-dimension]\n   {:pre [(integer? n)\n          (> n 0)\n          (>= embedding-dimension n)]}\n   {:family family\n    :name (format (:name-format family) n)\n    :dimension n\n    :embedding-dimension embedding-dimension\n    :type ::manifold}))\n\n(defn manifold?\n  \"Returns `true` if `m` is a dictionary representing a manifold, false\n  otherwise.\"\n  [m]\n  (= (v/kind m) ::manifold))\n\n(defn manifold-type\n  \"The supplied manifold `m` locally resembles some vector space; this function\n  returns the field over which that vector space was specified.\"\n  [manifold]\n  (get-in manifold [:family :over]))\n\n(defn manifold\n  \"If `m` is a manifold, acts as identity. Else, if given some structure\n  associated with a manifold (like a coordinate system), returns the associated\n  manifold.\"\n  [m]\n  (if (manifold? m)\n    m\n    (::manifold (meta m))))\n\n;; ## Coordinate Patches\n\n(defn- make-patch\n  \"Returns a bare `patch` with no manifold attached.\"\n  [name]\n  {:name name\n   :coordinate-systems {}})\n\n(defn attach-patch\n  \"Takes a manifold `family` and attaches a patch template with the supplied\n  `patch-name`. Returns a new manifold family.\n\n  All manifolds generated from the returned family will have this coordinate\n  patch attached.\"\n  [family patch-name]\n  (let [patch (make-patch patch-name)]\n    (assoc-in family [:patch-templates patch-name] patch)))\n\n(defn patch-names\n  \"Returns a set of patch names registered in the supplied manifold.\"\n  [manifold]\n  (u/keyset\n   (get-in manifold [:family :patch-templates])))\n\n(defn get-patch\n  \"Returns the patch named by `patch-name` within the supplied `manifold` if\n  registered. Throws otherwise.\n\n  NOTE that the returned patch will keep a reference to the supplied `manifold`\n  under a `:manifold` key.\n\n  A coordinate patch is a simply-connected open set around a point in the\n  manifold. A manifold might have many patches. Coordinate systems are defined\n  on patches; these allow the parameterization of any point on the patch in\n  terms of a tuple of real numbers (the coordinates).\"\n  [manifold patch-name]\n  (if-let [gen (get-in manifold [:family :patch-templates patch-name])]\n    (assoc gen :manifold manifold)\n    (throw\n     (ex-info \"Unknown patch.\"\n              {:patch-name patch-name\n               :manifold manifold}))))\n\n;; ## Coordinate Systems\n;;\n;; Coordinate systems are added to coordinate patches. A coordinate system is an\n;; invertible map from the space to R^n (or C^n or H^n, depending on the field\n;; over which the manifold's defined!)\n\n(defn attach-coordinate-system\n  \"Returns a new manifold family generated by attaching the supplied coordinate\n  system constructor to `family`, indexed by the supplied patch and coordinate\n  system names.\"\n  [family coordinate-system-name patch-name coordinate-system-ctor]\n  (let [ks [:patch-templates patch-name\n            :coordinate-systems coordinate-system-name]\n        v  coordinate-system-ctor]\n    (assoc-in family ks v)))\n\n(defn coordinate-system-names\n  \"Returns a set of names of all coordinate system constructors registered in the\n  supplied patch.\"\n  [patch]\n  (u/keyset\n   (:coordinate-systems patch)))\n\n(defn- get-coordinate-system\n  \"If a coordinate system constructor registered at `system-name` exists in the\n  supplied `patch`, return it. Else, error.\n\n  NOTE for FDG-goers: This is called `coordinate-system` in scmutils.\"\n  [patch system-name]\n  (or (get-in patch [:coordinate-systems system-name])\n      (throw\n       (ex-info \"Unknown coordinate system.\"\n                {:coordinate-system-name system-name\n                 :patch patch}))))\n\n(defn coordinate-system-at\n  \"Returns an [[ICoordinateSystem]] instance specialized to the patch named\n  `patch-name` on `manifold`.\"\n  [manifold coordinate-system-name patch-name]\n  (let [patch (get-patch manifold patch-name)\n        ctor  (get-coordinate-system patch coordinate-system-name)]\n    (ctor manifold)))\n\n;; ## Manifold Points\n;;\n;; This section defines constructors and accessors for\n;; non-coordinate-constrained points on some manifold.\n\n(declare uuid)\n\n(defn- make-manifold-point\n  \"Returns a point in `manifold` specified by its Euclidean coordinates `spec`.\n\n  Mathematically, a point is defined in the manifold in a coordinate-free way.\n  To compute with the point, you'll need to get it into a coordinate\n  representation using `((chart coord-system) point)`.\n\n  Optionally, you can pass a `coordinate-system` and a\n  representation (`coordinate-rep`) of the point in that coordinate system. The\n  returned point keeps a mutable cache of its coordinate representations, keyed\n  by `:coordinate-representations`; passing these values will seed the cache.\"\n  ([spec manifold]\n   {:type ::manifold-point\n    :spec spec\n    :manifold manifold\n    :coordinate-representations (atom {})})\n  ([spec manifold coordinate-system coordinate-rep]\n   (let [point (make-manifold-point spec manifold)\n         reps  (:coordinate-representations point)]\n     (swap! reps assoc (uuid coordinate-system) coordinate-rep)\n     point)))\n\n(defn manifold-point-representation\n  \"Returns the backing Euclidean space representation of the supplied manifold\n  point.\"\n  [point]\n  (:spec point))\n\n(defn point->manifold\n  \"Return the manifold upon which this `point` was defined.\"\n  [point]\n  (:manifold point))\n\n(defn manifold-point?\n  \"Returns true if `p` is a manifold point, false otherwise.\"\n  [p]\n  (= (v/kind p) ::manifold-point))\n\n(defn- my-manifold-point?\n  \"Returns true if `point` was created under the aegis of `manifold`, false\n  otherwise.\"\n  [point manifold]\n  (and (manifold-point? point)\n       (= (point->manifold point)\n          manifold)))\n\n(defn get-coordinates\n  \"Returns the representation of `manifold-point` in `coordinate-system`.\n\n  If an entry for the given `coordinate-system` is not found, `thunk` is called\n  to produce the representation. The representation is cached in the point.\"\n  [manifold-point coordinate-system thunk]\n  (let [reps (:coordinate-representations manifold-point)\n        coordsys-id (uuid coordinate-system)]\n    (or (@reps coordsys-id)\n        (let [rep (s/mapr simplify-numerical-expression (thunk))]\n          (swap! reps assoc coordsys-id rep)\n          rep))))\n\n;; ## Coordinate System Protocol\n\n(defprotocol ICoordinateSystem\n  (check-coordinates [this coords]\n    \"Returns true if the supplied coordinates `coords` can be converted into a\n    point by this [[ICoordinateSystem]], false otherwise.\")\n\n  (check-point [this point]\n    \"Returns true if the supplied `point` can be converted into coordinates by\n    this [[ICoordinateSystem]], false otherwise.\")\n\n  (coords->point [this coords]\n    \"Returns the manifold point on this [[ICoordinateSystem]]'s manifold\n    corresponding to the supplied `coords`.\" )\n\n  (point->coords [this point]\n    \"Returns a coordinate representation of the supplied manifold point `point`,\n    as specified by this [[ICoordinateSystem]].\")\n\n  (uuid [this]\n    \"Returns a unique identifier for this instance of [[ICoordinateSystem]].\n\n    (This is an internal implementation detail to allow us to attach coordinate\n    prototypes and other items as metadata to an [[ICoordinateSystem]] without\n    affecting equality.)\"))\n\n(defn coordinate-system?\n  \"Returns true if `x` implements [[ICoordinateSystem]], false otherwise.\"\n  [x]\n  (satisfies? ICoordinateSystem x))\n\n(defn coordinate-prototype\n  \"Returns the symbolic coordinate prototype associated with `coordsys`. This is\n   a structure of the correct dimension for this coordinate system, with all\n   symbolic entries.\n\n  Returns nil for non-valid inputs.\"\n  [coordsys]\n  (::coord-prototype (meta coordsys)))\n\n(defn with-coordinate-prototype\n  \"Returns an identical `coordsys` with the new `coordinate-prototype` installed.\"\n  [coordsys prototype]\n  (let [current-proto (coordinate-prototype coordsys)]\n    (if (= current-proto prototype)\n      coordsys\n      (vary-meta coordsys assoc ::coord-prototype prototype))))\n\n(defn chart\n  \"Given an [[ICoordinateSystem]], returns a function from a point on the\n  coordinate system's manifold to the coordinate representation specified by the\n  supplied `coordinate-system`.\"\n  [coordinate-system]\n  (if (cf/frame? coordinate-system)\n    (fn [event]\n      (cf/event->coords coordinate-system event))\n    (fn [point]\n      (point->coords coordinate-system point))))\n\n(defn point\n  \"Given an [[ICoordinateSystem]], returns a function from coordinates in\n  `coordinate-system`'s repesentation to the matching point on the manifold\n  associated with `coordinate-system`.\"\n  [coordinate-system]\n  (if (cf/frame? coordinate-system)\n    (fn [coords]\n      (cf/coords->event coordinate-system coords))\n    (fn [coords]\n      (coords->point coordinate-system coords))))\n\n(defn typical-coords\n  \"Given an [[ICoordinateSystem]], returns a structure that matches\n  the [[coordinate-prototype]] of `coordinate-system`, with all unique,\n  gensym-ed entries.\n\n  Use [[typical-coords]] if you require a unique symbolic coordinate\n  representation compatible with `coordinate-system`.\n\n  See [[typical-point]] for a coordinate-free version of this function.\"\n  [coordinate-system]\n  (s/mapr gensym (coordinate-prototype coordinate-system)))\n\n(defn typical-point\n  \"Given an [[ICoordinateSystem]], returns a unique, symbolically-represented\n  point on the manifold associated with `coordinate-system`.\n\n  See [[typical-coords]] for a coordinate-based version of this function.\"\n  [coordinate-system]\n  (let [coords (typical-coords coordinate-system)]\n    (coords->point coordinate-system coords)))\n\n(defn transfer-point\n  \"Returns a function that takes a single manifold `point` embedded in the\n  manifold `embedded` and transfers the point to the supplied `embedding`\n  manifold.\n\n  The embedding dimension must be the same for both manifolds.\n\n  NOTE that `embedded` and `embedding` can be either manifolds, or instances\n  of [[ICoordinateSystem]]. In the latter case `embedded` and `embedding` will\n  bind to the manifold associated with the supplied [[ICoordinateSystem]].\"\n  [embedded embedding]\n  (let [embedded-m  (manifold embedded)\n        embedding-m (manifold embedding)]\n    (assert (= (:embedding-dimension embedded-m)\n               (:embedding-dimension embedding-m)))\n    (fn [point]\n      (assert (= embedded-m (point->manifold point)))\n      (make-manifold-point\n       (manifold-point-representation point)\n       embedding-m))))\n\n(defn corresponding-velocities\n  \"Takes a coordinate representation `coords` of a manifold point with all\n  symbolic entries, and returns a structure of the same shape with `v:`\n  prepended to all symbols.\n\n  This structure is appropriate for representing the velocities associated with\n  each coordinate.\"\n  [coords]\n  (s/mapr (fn [x]\n            (symbol (str \"v:\" x)))\n          coords))\n\n(defn literal-manifold-function\n  \"Given a symbolic name `sym` and an [[ICoordinateSystem]], returns a literal\n  function that maps coordinate-free manifold points to a scalar output.\n\n  Also aliased as [[literal-manifold-function]].\"\n  [sym coordinate-system]\n  (let [n (:dimension (manifold coordinate-system))\n        domain (s/up* (repeat n 0))\n        range  0]\n    (vary-meta\n     (f/compose (af/literal-function sym domain range)\n                (chart coordinate-system))\n     assoc\n     :name name\n     :coordinate-system coordinate-system\n     :type ::manifold-function)))\n\n(def ^{:doc \"Alias for [[literal-manifold-function]], present for scmutils\ncodebase compatibility.\"}\n  literal-scalar-field\n  literal-manifold-function)\n\n(defn zero-manifold-function\n  \"Manifold function that maps every input manifold `point` to the scalar value 0.\"\n  [point]\n  {:pre [(manifold-point? point)]}\n  0)\n\n(defn one-manifold-function\n  \"Manifold function that maps every input manifold `point` to the scalar value 1.\"\n  [point]\n  {:pre [(manifold-point? point)]}\n  1)\n\n(defn constant-manifold-function\n  \"Takes some constant `c` and returns a manifold function that maps every input\n  manifold `point` to `c.`\"\n  [c]\n  (fn [point]\n    {:pre [(manifold-point? point)]}\n    c))\n\n;; ## Explicit Coordinate Systems\n;;\n;; This section defines many instances of [[ICoordinateSystem]].\n\n(defn c:generate\n  \"Generates a coordinate structure of the supplied dimension `n`, and\n  `orientation` using the supplied function `f` for entries. See the very\n  similar [[sicmutils.structure/generate]] for more details.\n\n  NOTE from GJS: this is a kludge introduced only to allow a coordinate of\n  dimension 1 to automatically unwrap itself.\"\n  [n orientation f]\n  (if (= n 1)\n    (f 0)\n    (s/generate n orientation f)))\n\n(defn- default-coordinate-prototype\n  \"Takes a `manifold` and returns a [[sicmutils.structure/up]] instance of the\n  same dimension as `manifold`, with symbolic entries in each position. \"\n  [manifold]\n  (let [k (:dimension manifold)]\n    (c:generate\n     k ::s/up (fn [i] (symbol (str \"x\" i))))))\n\n(defn- ->Rectangular\n  \"Returns an [[ICoordinateSystem]] instance that converts between `manifold`\n  points in Rn (where `n` is the dimension of `manifold`) to an explicit Rn\n  structure.\n\n  This is as close to an identity coordinate transformation as the system gets!\"\n  ([manifold]\n   (let [proto (default-coordinate-prototype manifold)]\n     (->Rectangular manifold proto)))\n  ([manifold coordinate-prototype]\n   (let [id (u/uuid)]\n     (-> (reify ICoordinateSystem\n           (check-coordinates [_ coords]\n             (= (s/dimension coords)\n                (:dimension manifold)))\n\n           (check-point [_ point]\n             (my-manifold-point? point manifold))\n\n           (coords->point [this coords]\n             (assert (check-coordinates this coords))\n             (make-manifold-point coords manifold this coords))\n\n           (point->coords [this point]\n             (assert (check-point this point))\n             (get-coordinates\n              point this\n              (fn []\n                (let [rep (manifold-point-representation point)]\n                  (assert (= (s/dimension rep)\n                             (:embedding-dimension manifold)))\n                  rep))))\n\n           (uuid [_] id))\n         (with-meta {::coord-prototype coordinate-prototype\n                     ::manifold manifold})))))\n\n(defn- ->PolarCylindrical\n  \"Returns an [[ICoordinateSystem]] instance that converts between `manifold`\n  points in Rn (where `n` is the dimension of `manifold`) to [cylindrical\n  coordinates](https://en.wikipedia.org/wiki/Cylindrical_coordinate_system).\n\n  The first two Rn coordinates in the manifold point become `r` and `theta`, and\n  all other points are untouched.\"\n  ([manifold]\n   (let [proto (default-coordinate-prototype manifold)]\n     (->PolarCylindrical manifold proto)))\n  ([manifold coordinate-prototype]\n   (let [id (u/uuid)]\n     (-> (reify ICoordinateSystem\n           (check-coordinates [_ coords]\n             (and (s/up? coords)\n                  (= (s/dimension coords)\n                     (:dimension manifold))\n                  (> (s/dimension coords) 1)\n                  (let [c0 (nth coords 0)]\n                    (or (not (v/number? c0))\n                        (>= c0 0)))))\n\n           (check-point [_ point]\n             (my-manifold-point? point manifold))\n\n           (coords->point [this coords]\n             (assert (check-coordinates this coords))\n             (let [[r theta] coords]\n               (-> coords\n                   (assoc 0 (g/* r (g/cos theta)))\n                   (assoc 1 (g/* r (g/sin theta)))\n                   (make-manifold-point manifold this coords))))\n\n           (point->coords [this point]\n             (assert (check-point this point))\n             (get-coordinates\n              point this\n              (fn []\n                (let [rep (manifold-point-representation point)]\n                  (when-not (and (s/up? rep)\n                                 (= (s/dimension rep)\n                                    (:embedding-dimension manifold)))\n                    (u/illegal \"PolarCylindrical bad point\"))\n                  (let [[x y] rep\n                        rsq (g/+ (g/square x)\n                                 (g/square y))]\n                    (when (v/zero? rsq)\n                      (u/illegal-state \"PolarCylindrical singular\"))\n                    (-> rep\n                        (assoc 0 (g/sqrt rsq))\n                        (assoc 1 (g/atan y x))))))))\n\n           (uuid [_] id))\n         (with-meta {::coord-prototype coordinate-prototype\n                     ::manifold manifold})))))\n\n(defn- ->SphericalCylindrical\n  \"Returns an [[ICoordinateSystem]] instance that converts between `manifold`\n  points in Rn (where `n` is the dimension of `manifold`) to\n  generalized [spherical\n  coordinates](https://en.wikipedia.org/wiki/Spherical_coordinate_system).\n\n  The first three Rn coordinates in the manifold point become `r` and `theta`,\n  `phi` (radius, colatitude and longitude) and all other points are untouched.\n  This last bit allows us to use spherical coordinates for manifolds with higher\n  than three dimensions.\"\n  ([manifold]\n   (let [proto (default-coordinate-prototype manifold)]\n     (->SphericalCylindrical manifold proto)))\n  ([manifold coordinate-prototype]\n   (let [id (u/uuid)]\n     (-> (reify ICoordinateSystem\n           (check-coordinates [_ coords]\n             (and (s/up? coords)\n                  (= (g/dimension coords)\n                     (:dimension manifold))\n                  (or (not (v/number? coords))\n                      (>= (nth coords 0) 0))))\n\n           (check-point [_ point]\n             (my-manifold-point? point manifold))\n\n           (coords->point [this coords]\n             (assert (check-coordinates this coords))\n             (let [[r theta phi] coords]\n               (-> coords\n                   (assoc 0 (g/* r (g/sin theta) (g/cos phi)))\n                   (assoc 1 (g/* r (g/sin theta) (g/sin phi)))\n                   (assoc 2 (g/* r (g/cos theta)))\n                   (make-manifold-point manifold this coords))))\n\n           (point->coords [this point]\n             (assert (check-point this point))\n             (get-coordinates\n              point this\n              (fn []\n                (let [rep (manifold-point-representation point)]\n                  (when-not (and (s/up? rep)\n                                 (= (g/dimension rep)\n                                    (:embedding-dimension manifold)))\n                    (u/illegal \"SphericalCylindrical bad point\"))\n                  (let [[x y z] rep\n                        r (g/sqrt\n                           (g/+ (g/square x)\n                                (g/square y)\n                                (g/square z)))]\n                    (when (v/zero? r)\n                      (u/illegal-state \"SphericalCylindrical singular\"))\n                    (-> rep\n                        (assoc 0 r)\n                        (assoc 1 (g/acos (g/divide z r)))\n                        (assoc 2 (g/atan y x))))))))\n\n           (uuid [_] id))\n         (with-meta {::coord-prototype coordinate-prototype\n                     ::manifold manifold})))))\n\n(defn- ->SpacetimeSpherical\n  \"Returns an [[ICoordinateSystem]] instance that converts between `manifold`\n  points in R4 to 'spacetime spherical coordinates'. The first coordinate is\n  time, and the remaining three coordinates are [spherical spatial\n  coordinates](https://en.wikipedia.org/wiki/Spherical_coordinate_system).\n\n  The spatial coordinates are `r` and `theta`, `phi` (radius, colatitude and\n  longitude).\"\n  ([manifold]\n   (let [proto (default-coordinate-prototype manifold)]\n     (->SpacetimeSpherical manifold proto)))\n  ([manifold coordinate-prototype]\n   (let [id (u/uuid)]\n     (-> (reify ICoordinateSystem\n           (check-coordinates [_ coords]\n             (and (s/up? coords)\n                  (= (g/dimension coords) 4)))\n\n           (check-point [_ point]\n             (my-manifold-point? point manifold))\n\n           (coords->point [this coords]\n             (assert (check-coordinates this coords))\n             (let [[t r theta phi] coords]\n               (make-manifold-point\n                (s/up t\n                      (g/* r (g/sin theta) (g/cos phi))\n                      (g/* r (g/sin theta) (g/sin phi))\n                      (g/* r (g/cos theta)))\n                manifold this coords)))\n\n           (point->coords [this point]\n             (assert (check-point this point))\n             (get-coordinates\n              point this\n              (fn []\n                (let [rep (manifold-point-representation point)]\n                  (if-not (check-coordinates this rep)\n                    (throw\n                     (ex-info \"bad ->SpacetimeSpherical point: \"\n                              {:point point\n                               :coordinate-system this}))\n                    (let [[t x y z] rep\n                          r (g/sqrt\n                             (g/+ (g/square x)\n                                  (g/square y)\n                                  (g/square z)))]\n                      (when (and (v/number? r)\n                                 (v/zero? r))\n                        (throw\n                         (ex-info \"->SpacetimeSpherical singular: \"\n                                  {:point point\n                                   :coordinate-system this})))\n                      (s/up t\n                            r\n                            (g/acos (g// z r))\n                            (g/atan y x))))))))\n\n           (uuid [_] id))\n         (with-meta {::coord-prototype coordinate-prototype\n                     ::manifold manifold})))))\n\n(defn- ->S2-coordinates\n  \"Returns an [[ICoordinateSystem]] instance that converts between `manifold`\n  points and colatitude-longitude coordinates for the surface of the sphere\n  S(2).\n\n  Also accepts a unitary `orientation` matrix (2-tensor, technically, a down of\n  ups, dimension 3 each, since S(2) is embedded in 3-space) used to reposition\n  the north pole of the spherical coordinate system.\n\n  See [n-sphere: Spherical\n  Coordinates](https://en.wikipedia.org/wiki/N-sphere#Spherical_coordinates) for\n  notes about the generalized versions of these coordinates, for S(n).\"\n  ([orientation]\n   (let [inverse-orientation (g/invert orientation)]\n     (fn ctor\n       ([manifold]\n        (let [proto (default-coordinate-prototype manifold)]\n          (ctor manifold proto)))\n       ([manifold coordinate-prototype]\n        (let [id (u/uuid)]\n          (-> (reify ICoordinateSystem\n                (check-coordinates [_ coords]\n                  (and (s/up? coords)\n                       (= (g/dimension coords) 2)\n                       (or (not (v/number? coords))\n                           (>= (nth coords 0) 0))))\n\n                (check-point [_ point]\n                  (my-manifold-point? point manifold))\n\n                (coords->point [this coords]\n                  (assert (check-coordinates this coords))\n                  (let [[colatitude longitude] coords]\n                    (make-manifold-point\n                     (g/* orientation\n                          (s/up (g/* (g/sin colatitude) (g/cos longitude))\n                                (g/* (g/sin colatitude) (g/sin longitude))\n                                (g/cos colatitude)))\n                     manifold this coords)))\n\n                (point->coords [this point]\n                  (assert (check-point this point))\n                  (get-coordinates\n                   point this\n                   (fn []\n                     (let [rep (g/* inverse-orientation\n                                    (manifold-point-representation point))]\n                       (if (and (s/up? rep)\n                                (= (g/dimension rep)\n                                   (:embedding-dimension manifold)))\n                         (let [[x y z] rep]\n                           (s/up (g/acos z) (g/atan y x)))\n                         (u/illegal \"S2-coordinates bad point\"))))))\n\n                (uuid [_] id))\n              (with-meta {::coord-prototype coordinate-prototype\n                          ::manifold manifold}))))))))\n\n(defn- ->Sn-coordinates\n  \"Returns an [[ICoordinateSystem]] instance that converts between `manifold`\n  points and spherical on the\n  unit [n-sphere](https://en.wikipedia.org/wiki/N-sphere#Spherical_coordinates),\n  ie, S(n). The sphere is embedded in a space of dimension n+1.\n\n  Also accepts an `orientation-function` from dimension `(+ n 1)` to a unitary\n  `orientation` matrix (2-tensor, technically, a down of ups, dimension `n+1`\n  each, since S(n) is embedded in n+1 dimensional-space). This 2-tensor is used\n  to reposition the north pole of the spherical coordinate system.\n\n  See [n-sphere: Spherical\n  Coordinates](https://en.wikipedia.org/wiki/N-sphere#Spherical_coordinates) for\n  notes about these coordinates.\"\n  [orientation-function]\n  (letfn [(rotate-left [l]\n            (lazy-cat (rest l) [(first l)]))]\n    (fn ctor\n      ([manifold]\n       (let [proto (default-coordinate-prototype manifold)]\n         (ctor manifold proto)))\n      ([manifold coordinate-prototype]\n       (let [n (:dimension manifold)\n             orientation-matrix (orientation-function (+ n 1))\n             orientation-inverse-matrix (g/invert orientation-matrix)\n             id (u/uuid)]\n         (-> (reify ICoordinateSystem\n               (check-coordinates [_ coords]\n                 (let [dim (g/dimension coords)]\n                   (or (and (= n 1)\n                            (= dim 1))\n                       (and (s/up? coords)\n                            (= dim n)\n                            ;; check that every coordinate but the final one is\n                            ;; positive, if it's a number.\n                            (every? (map-indexed\n                                     (fn [i coord]\n                                       (or (= (inc i) n)\n                                           (not (v/number? coord))\n                                           (not (g/negative? coord)))))\n                                    coords)))))\n\n               (check-point [_ point]\n                 (my-manifold-point? point manifold))\n\n               (coords->point [this coords]\n                 (assert (check-coordinates this coords))\n                 (if (= n 1)\n                   (let [pt (s/up (g/cos coords)\n                                  (g/sin coords))]\n                     (make-manifold-point\n                      (g/* orientation-matrix pt)\n                      manifold this coords))\n                   (let [sines (map g/sin coords)\n                         cosines (map g/cos coords)\n                         pt (s/up*\n                             (rotate-left\n                              (map (fn [i]\n                                     (if (= i n)\n                                       (apply g/* sines)\n                                       (apply g/* (cons (nth cosines i)\n                                                        (take i sines)))))\n                                   (range (inc n)))))]\n\n                     (make-manifold-point\n                      (g/* orientation-matrix pt)\n                      manifold this coords))))\n\n               (point->coords [this point]\n                 (assert (check-point this point))\n                 (get-coordinates\n                  point this\n                  (fn []\n                    (letfn [(safe-atan [y x]\n                              (when (and (number? y) (number? x)\n                                         (v/zero? y) (v/zero? x))\n                                (log/warn \"Sn-coordinates singular!\"))\n                              (g/atan y x))]\n                      (let [pt (rotate-left\n                                (reverse\n                                 (g/* orientation-inverse-matrix\n                                      (manifold-point-representation point))))]\n                        (if (= n 1)\n                          (safe-atan (nth pt 1) (nth pt 0))\n                          (loop [r    (first pt)\n                                 more (rest pt)\n                                 ans  [(safe-atan (first pt) (second pt))]]\n                            ;; There is almost certainly a more efficient way to do\n                            ;; this. Study the transformation here, and see how many\n                            ;; times we're taking square roots and then squaring again.\n                            ;; https://en.wikipedia.org/wiki/N-sphere#Spherical_coordinates\n                            (if-not (next more)\n                              (s/up* ans)\n                              (let [r' (g/sqrt (g/+ (g/square (first more))\n                                                    (g/square r)))]\n                                (recur r'\n                                       (rest more)\n                                       (cons (safe-atan r' (second more))\n                                             ans)))))))))))\n\n               (uuid [_] id))\n             (with-meta {::coord-prototype coordinate-prototype\n                         ::manifold manifold})))))))\n\n(defn- ->Sn-stereographic\n  \"Returns an [[ICoordinateSystem]] instance that converts between `manifold`\n  points and a [stereographic\n  projection]((https://en.wikipedia.org/wiki/N-sphere#Stereographic_projection))\n  of the\n  unit [n-sphere](https://en.wikipedia.org/wiki/N-sphere#Stereographic_projection)\n  S(n) from the final coordinate.\n\n  Also accepts an `orientation-function` from dimension `(+ n 1)` to a unitary\n  `orientation` matrix (2-tensor, technically, a down of ups, dimension `n+1`\n  each, since S(n) is embedded in n+1 dimensional-space). This 2-tensor is used\n  to reposition the north pole of the spherical coordinate system.\n\n  Notes from scmutils:\n\n  The `orientation-function` should return an orthogonal (n+1)-by-(n+1) matrix.\n  It can be interpreted as moving the pole / plane of projection and possibly\n  reflecting.\n\n  The default pole is (0 0 ... 1).\n  We fire a ray through m = (m_0 ... m_n)\n\n  x(t) = p + t(m - p)\n  x(0) = p, x(1) = m\n  x_n(t) = 1-t(1+m_n), 0 = x_n(1/(1+m_n))\"\n  [orientation-function]\n  (fn ctor\n    ([manifold]\n     (let [proto (default-coordinate-prototype manifold)]\n       (ctor manifold proto)))\n    ([manifold coordinate-prototype]\n     (let [n (:dimension manifold)\n           orientation-matrix (orientation-function (+ n 1))\n           orientation-inverse-matrix (g/invert orientation-matrix)\n           id (u/uuid)]\n       (-> (reify ICoordinateSystem\n             (check-coordinates [_ coords]\n               (or (and (= n 1) (= (g/dimension coords) 1))\n                   (and (s/up? coords) (= (g/dimension coords) n))))\n\n             (check-point [_ point]\n               (my-manifold-point? point manifold))\n\n             (coords->point [this coords]\n               (assert (check-coordinates this coords))\n               (let [coords' (if (= n 1) (s/up coords) coords)\n                     delta  (g/dot-product coords' coords')\n                     xn (g/divide (g/- delta 1)\n                                  (g/+ 1 delta))\n                     pt (s/generate (+ n 1)\n                                    ::s/up\n                                    #(if (= % n) xn\n                                         (g/divide (g/* 2 (nth coords' %))\n                                                   (g/+ 1 delta))))]\n                 (make-manifold-point\n                  (g/* orientation-matrix pt)\n                  manifold this coords)))\n\n             (point->coords [this point]\n               (assert (check-point this point))\n               (get-coordinates\n                point this\n                (fn []\n                  (let [pt (g/* orientation-inverse-matrix\n                                (manifold-point-representation point))]\n                    (when (and (v/number? (nth pt n))\n                               (= (nth pt n) 1))\n                      (u/illegal-state \"S^n stereographic singular\"))\n                    (let [coords (s/generate\n                                  n ::s/up\n                                  #(g/divide (nth pt %)\n                                             (g/- 1 (nth pt n))))]\n                      (if (= n 1)\n                        (first coords)\n                        coords))))))\n\n             (uuid [_] id))\n           (with-meta {::coord-prototype coordinate-prototype\n                       ::manifold manifold}))))))\n\n(defn- ->Sn-gnomonic\n  \"Returns an [[ICoordinateSystem]] instance that converts between `manifold`\n  points and a [Gnomonic\n  Projection](https://en.wikipedia.org/wiki/Gnomonic_projection) of the [unit\n  n-sphere](https://en.wikipedia.org/wiki/N-sphere).\n\n\n   We map the nothern hemisphere to the plane by firing a ray from the origin.\n   The coordinates are given by the intersection with the z = 1 plane.\n   x(t) = t*m\n   x_n(t) = t*m_n, 1 = x_n(1/m_n)\n\n  `orientation-function` should should return an n+1-by-n+1 orthogonal matrix.\n  It can be interpreted as moving the plane of projection, and point mapped to\n  the origin, as well as possibly reflecting.\n\n   Given the coordinates x we have\n\n   <x,x> = (1-m_n^2)/m_n^2\n   1 + <x,x> = (m_n^2 + 1 - m_n^2)/m_n^2\n   m_n = sqrt(1/(1+<x,x>))\n\n   where positive square root is sufficient for the northern hemisphere.\"\n  [orientation-function]\n  (fn ctor\n    ([manifold]\n     (let [proto (default-coordinate-prototype manifold)]\n       (ctor manifold proto)))\n    ([manifold coordinate-prototype]\n     (let [n (:dimension manifold)\n           orientation-matrix (orientation-function (+ n 1))\n           orientation-inverse-matrix (g/invert orientation-matrix)\n           id (u/uuid)]\n       (-> (reify ICoordinateSystem\n             (check-coordinates [_ coords]\n               (or (and (= n 1)\n                        (= (g/dimension coords) 1))\n                   (and (s/up? coords)\n                        (= (g/dimension coords) n))))\n\n             (check-point [_ point]\n               (my-manifold-point? point manifold))\n\n             (coords->point [this coords]\n               (assert (check-coordinates this coords))\n               (let [coords (if (= n 1)\n                              (s/up coords)\n                              coords)\n                     delta (g/dot-product coords coords)\n                     d     (g/sqrt (g/+ 1 delta))\n                     xn    (g// 1 d)\n                     pt    (s/generate\n                            (g/+ n 1) ::s/up\n                            (fn [i]\n                              (if (= i n)\n                                xn\n                                (g// (nth coords i) d))))]\n                 (make-manifold-point\n                  (g/* orientation-matrix pt)\n                  manifold this coords)))\n\n             (point->coords [this point]\n               (assert (check-point this point))\n               (get-coordinates\n                point this\n                (fn []\n                  (let [pt (g/* orientation-inverse-matrix\n                                (manifold-point-representation point))\n                        final-coord (nth pt n)]\n                    (when (and (v/number? final-coord)\n                               (or (g/negative? final-coord)\n                                   (v/zero? final-coord)))\n                      (throw\n                       (ex-info \"Point not covered by S^n-gnomic coordinate patch.\"\n                                {:point point\n                                 :coordinate-system this})))\n                    (let [coords (s/generate\n                                  n ::s/up\n                                  (fn [i]\n                                    (g// (nth pt i) final-coord)))]\n                      (if (= n 1)\n                        (nth coords 0)\n                        coords))))))\n\n             (uuid [_] id))\n           (with-meta {::coord-prototype coordinate-prototype\n                       ::manifold manifold}))))))\n\n\n(defn- ->Euler-chart\n  \"Returns an [[ICoordinateSystem]] instance that converts between `manifold`\n  points and the [Euler angles](https://en.wikipedia.org/wiki/Euler_angles) for\n  SO(3).\"\n  ([manifold]\n   (let [proto (default-coordinate-prototype manifold)]\n     (->Euler-chart manifold proto)))\n  ([manifold coordinate-prototype]\n   (let [n (:dimension manifold)\n         id (u/uuid)]\n     (-> (reify ICoordinateSystem\n           (check-coordinates [_ coords]\n             (and (s/up? coords)\n                  (= (g/dimension coords) n)\n                  (let [c0 (nth coords 0)]\n                    (or (not (v/number? c0))\n                        (not (v/zero? c0))))))\n\n           (check-point [_ point]\n             (my-manifold-point? point manifold))\n\n           (coords->point [this coords]\n             (assert (check-coordinates this coords))\n             (let [[theta phi psi] coords\n                   ;; NB: scmutils uses rotate-?-tuple instead of matrix;\n                   ;; therefore we must transpose indices in get-coordinates\n                   Mx-theta (rotate-x-matrix theta)\n                   Mz-phi (rotate-z-matrix phi)\n                   Mz-psi (rotate-z-matrix psi)\n                   M (g/* Mz-phi Mx-theta Mz-psi)]\n               (make-manifold-point M manifold this coords)))\n\n           (point->coords [this point]\n             (assert (check-point this point))\n             (get-coordinates\n              point this\n              (fn []\n                (let [M (manifold-point-representation point)\n                      theta (g/acos (get-in M [2 2]))\n                      phi (g/atan (get-in M [0 2])\n                                  (g/negate (get-in M [1 2])))\n                      psi (g/atan (get-in M [2 0])\n                                  (get-in M [2 1]))]\n                  (s/up theta phi psi)))))\n\n           (uuid [_] id))\n         (with-meta {::coord-prototype coordinate-prototype\n                     ::manifold manifold})))))\n\n(defn- ->Alternate-chart\n  \"Returns an [[ICoordinateSystem]] instance that converts between `manifold`\n  points and the alternate angles for SO(3).\n\n  NOTE: Please add docs about what these are!\"\n  ([manifold]\n   (let [proto (default-coordinate-prototype manifold)]\n     (->Alternate-chart manifold proto)))\n  ([manifold coordinate-prototype]\n   (let [n (:dimension manifold)\n         id (u/uuid)]\n     (-> (reify ICoordinateSystem\n           (check-coordinates [_ coords]\n             (and (s/up? coords)\n                  (= (g/dimension coords) n)\n                  (or (not (v/number? (nth coords 0)))\n                      (< (/ Math/PI -2)\n                         (nth coords 0)\n                         (/ Math/PI 2) ))))\n\n           (check-point [_ point]\n             (my-manifold-point? point manifold))\n\n           (coords->point [this coords]\n             (assert (check-coordinates this coords))\n             (let [[theta phi psi] coords\n                   ;; NB: scmutils uses rotate-?-tuple instead of matrix;\n                   ;; therefore we must transpose indices in get-coordinates\n                   Mx-theta (rotate-x-matrix theta)\n                   Mz-phi (rotate-z-matrix phi)\n                   My-psi (rotate-y-matrix psi)\n                   pt (g/* Mz-phi Mx-theta My-psi)]\n               (make-manifold-point pt manifold this coords)))\n\n           (point->coords [this point]\n             (assert (check-point this point))\n             (get-coordinates\n              point this\n              (fn []\n                (let [M (manifold-point-representation point)\n                      theta (g/asin (get-in M [2 1]))\n                      phi (g/atan (g/negate (get-in M [0 1]))\n                                  (get-in M [1 1]))\n                      psi (g/atan (g/negate (get-in M [2 0]))\n                                  (get-in M [2 2]))]\n                  (s/up theta phi psi)))))\n\n           (uuid [_] id))\n         (with-meta {::coord-prototype coordinate-prototype\n                     ::manifold manifold})))))\n\n;; ## Manifold Definitions\n;;\n;; This section binds many common manifold families and coordinate systems for\n;; use. Enjoy!\n\n(def Rn\n  (-> \"R(%d)\"\n      (make-manifold-family)\n      (attach-patch :origin)\n      (attach-coordinate-system :rectangular :origin ->Rectangular)\n      (attach-coordinate-system :polar-cylindrical :origin ->PolarCylindrical)\n      (attach-coordinate-system :spherical-cylindrical :origin ->SphericalCylindrical)))\n\n(def R1 (make-manifold Rn 1))\n(def R1-rect (coordinate-system-at R1 :rectangular :origin))\n(def the-real-line R1-rect)\n\n(def R2 (make-manifold Rn 2))\n(def R2-rect (coordinate-system-at R2 :rectangular :origin))\n(def R2-polar (coordinate-system-at R2 :polar-cylindrical :origin))\n\n(def R3 (make-manifold Rn 3))\n(def R3-rect (coordinate-system-at R3 :rectangular :origin))\n(def R3-cyl (coordinate-system-at R3 :polar-cylindrical :origin))\n(def R3-spherical (coordinate-system-at R3 :spherical-cylindrical :origin))\n\n(def R4 (make-manifold Rn 4))\n(def R4-rect (coordinate-system-at R4 :rectangular :origin))\n(def R4-cyl (coordinate-system-at R4 :polar-cylindrical :origin))\n\n(def spacetime\n  (-> Rn\n      (attach-coordinate-system :spacetime-spherical :origin ->SpacetimeSpherical)\n      (make-manifold 4)))\n\n(def spacetime-rect\n  (coordinate-system-at spacetime :rectangular :origin))\n\n(def spacetime-sphere\n  (coordinate-system-at spacetime :spacetime-spherical :origin))\n\n;; The surface of a sphere, specialized to two dimensions. See [[S2p]] for the 2\n;; dimensional specialization of S(n).\n;;\n;; The `:tilted` patch rotates the north pole 90 degrees toward the positive y\n;; axis.\n\n(def S2-type\n  (-> \"S2\"\n      (make-manifold-family)\n      (attach-patch :north-pole)\n      (attach-patch :south-pole)\n      (attach-patch :tilted)\n      (attach-coordinate-system :spherical :north-pole\n                                (->S2-coordinates\n                                 (s/down (s/up 1 0 0)\n                                         (s/up 0 1 0)\n                                         (s/up 0 0 1))))\n      (attach-coordinate-system :spherical :tilted\n                                (->S2-coordinates\n                                 (s/down (s/up 1 0 0)\n                                         (s/up 0 0 1)\n                                         (s/up 0 -1 0))))\n      (attach-coordinate-system :spherical :south-pole\n                                (->S2-coordinates\n                                 (s/down (s/up 1 0 0)\n                                         (s/up 0 1 0)\n                                         (s/up 0 0 -1))))\n      (attach-coordinate-system :stereographic :north-pole\n                                (->Sn-stereographic matrix/I))\n      (attach-coordinate-system :stereographic :south-pole\n                                (->Sn-stereographic\n                                 (fn [n]\n                                   ;; TODO: just go flip that coordinate in matrix/I\n                                   (matrix/generate\n                                    n n\n                                    (fn [i j]\n                                      (if (= i j)\n                                        (if (= j n) -1 1)\n                                        0))))))\n\n      (attach-coordinate-system :gnomonic :north-pole\n                                (->Sn-gnomonic matrix/I))\n\n      (attach-coordinate-system :gnomonic :south-pole\n                                (->Sn-gnomonic\n                                 (fn [n]\n                                   ;; TODO: just go flip that coordinate in matrix/I\n                                   (matrix/generate\n                                    n n\n                                    (fn [i j]\n                                      (if (= i j)\n                                        (if (= j n) -1 1)\n                                        0))))))))\n\n(def S2 (make-manifold S2-type 2 3))\n(def S2-spherical (coordinate-system-at S2 :spherical :north-pole))\n\n(def ^{:doc \"Similar to the [[S2-spherical]] coordinate system, with the north\n  pole rotated 90 degrees and lying along the positive y axis.\"}\n  S2-tilted\n  (coordinate-system-at S2 :spherical :tilted))\n\n(def S2-stereographic (coordinate-system-at S2 :stereographic :north-pole))\n(def S2-Riemann S2-stereographic)\n(def S2-gnomonic (coordinate-system-at S2 :gnomonic :north-pole))\n\n(def Sn\n  (-> (make-manifold-family \"S(%d)\")\n      (attach-patch :north-pole)\n      (attach-patch :south-pole)\n      (attach-patch :tilted)\n      (attach-coordinate-system :spherical :north-pole (->Sn-coordinates matrix/I))\n      (attach-coordinate-system :spherical :south-pole\n                                (->Sn-coordinates\n                                 (fn [n]\n                                   ;; TODO: just go flip that coordinate in matrix/I\n                                   (matrix/generate\n                                    n n\n                                    (fn [i j]\n                                      (if (= i j)\n                                        (if (= j n) -1 1)\n                                        0))))))\n\n      (attach-coordinate-system :spherical :tilted\n                                (->Sn-coordinates\n                                 (fn [n]\n                                   (s/generate\n                                    n ::s/down\n                                    (fn [col]\n                                      (s/generate\n                                       n ::s/up\n                                       (fn [row]\n                                         (cond (and (= row (- n 2)) (= col (- n 1))) -1\n                                               (and (= row (- n 1)) (= col (- n 2))) 1\n                                               (and (= row col) (< row (- n 2))) 1\n                                               :else 0))))))))\n\n      (attach-coordinate-system :gnomonic :north-pole (->Sn-gnomonic matrix/I))\n      (attach-coordinate-system :gnomonic :south-pole\n                                (->Sn-gnomonic\n                                 (fn [n]\n                                   ;; TODO: just go flip that coordinate in matrix/I\n                                   (matrix/generate\n                                    n n\n                                    (fn [i j]\n                                      (if (= i j)\n                                        (if (= j n) -1 1)\n                                        0))))))\n\n      (attach-coordinate-system :stereographic :north-pole (->Sn-stereographic matrix/I))\n      (attach-coordinate-system :stereographic :south-pole\n                                (->Sn-stereographic\n                                 (fn [n]\n                                   ;; TODO: just go flip that coordinate in matrix/I\n                                   (matrix/generate\n                                    n n\n                                    (fn [i j]\n                                      (if (= i j)\n                                        (if (= j n) -1 1)\n                                        0))))))))\n\n(def S1 (make-manifold Sn 1))\n(def S1-circular (coordinate-system-at S1 :spherical :north-pole))\n(def S1-tilted (coordinate-system-at S1 :spherical :tilted))\n(def S1-slope (coordinate-system-at S1 :stereographic :north-pole))\n(def S1-gnomonic (coordinate-system-at S1 :gnomonic :north-pole))\n\n(def S2p (make-manifold Sn 2))\n(def S2p-spherical (coordinate-system-at S2p :spherical :north-pole))\n(def S2p-tilted (coordinate-system-at S2p :spherical :tilted))\n(def S2p-stereographic (coordinate-system-at S2p :stereographic :north-pole))\n(def S2p-Riemann S2p-stereographic)\n(def S2p-gnomonic (coordinate-system-at S2p :gnomonic :north-pole))\n\n(def S3 (make-manifold Sn 3))\n(def S3-spherical (coordinate-system-at S3 :spherical :north-pole))\n(def S3-tilted (coordinate-system-at S3 :spherical :tilted))\n(def S3-gnomonic (coordinate-system-at S3 :gnomonic :north-pole))\n\n;; TODO is south pole right??\n(def S3-stereographic (coordinate-system-at S3 :stereographic :south-pole))\n\n;; ## SO(3)\n;;\n;; Points are represented by 3x3 (down (up ...) ...)\n;;\n;; There is only one instance of an SOn manifold defined, SO3. As a consequence\n;; the name is not SOn but rather SO3-type.\n\n(def SO3-type\n  (-> (make-manifold-family \"SO3\")\n      (attach-patch :Euler-patch)\n      (attach-patch :alternate-patch)\n      (attach-coordinate-system :Euler :Euler-patch ->Euler-chart)\n      (attach-coordinate-system :alternate :alternate-patch ->Alternate-chart)))\n\n(def SO3\n  (make-manifold SO3-type 3))\n\n(def Euler-angles\n  (coordinate-system-at SO3 :Euler :Euler-patch))\n\n(def alternate-angles\n  (coordinate-system-at SO3 :alternate :alternate-patch))\n"]}