{"version":3,"sources":["sicmutils/calculus/metric.cljc"],"mappings":"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","names":["sicmutils.calculus.metric/embedding-map->metric-components","n","xi->rectangular","h","sicmutils.calculus.derivative/D","ref","f","k","p1__87829#","sicmutils.function$.compose","cljs.core.get","cljs.core._EQ_","sicmutils.structure.down","sicmutils.generic/dot-product","sicmutils.structure/generate","i","j","sicmutils.calculus.metric/coordinate-system->metric-components","coordsys","sicmutils.calculus.manifold/manifold","xi->x","sicmutils.calculus.manifold/manifold-point-representation","sicmutils.calculus.manifold/point","sicmutils.calculus.metric/coordinate-system->metric","coordinate-system","basis","sicmutils.calculus.basis/coordinate-system->basis","oneform-basis","sicmutils.calculus.basis/basis->oneform-basis","->components","Chi","sicmutils.calculus.manifold/chart","v1","v2","m","gcoeffs","G__87852","sicmutils.generic._STAR_","fexpr__87853","fexpr__87854","sicmutils.calculus.indexed/with-argument-types","the-metric","sicmutils.calculus.metric/coordinate-system->inverse-metric","vector-basis","sicmutils.calculus.basis/basis->vector-basis","sicmutils.generic._SLASH_","w1","w2","G__87858","sicmutils.structure.mapr","e","fexpr__87859","fexpr__87860","the-inverse-metric","sicmutils.calculus.metric/make-metric","name","sicmutils.calculus.manifold/literal-manifold-function","cljs.core.symbol","gij","sicmutils.calculus.metric/literal-metric","sicmutils.generic/dimension","sicmutils.calculus.metric/components->metric","components","sicmutils.calculus.metric/metric->components","metric","e_i","e_j","sicmutils.calculus.metric/metric->inverse-components","g_ij","fexpr__87866","typical","sicmutils.structure/typical-object","sicmutils.matrix.s_COLON_inverse","sicmutils.calculus.metric/invert","g-ij","sicmutils.calculus.metric/metric-over-map","mu:N->M","g-on-M","V-over-mu","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","sicmutils.calculus.vector_field.procedure__GT_vector_field","_","fexpr__87880","sicmutils.value/freeze","G__87885","fexpr__87884","G__87886","G__87887","make-fake-vector-field","sicmutils.calculus.metric/lower","u","v","sicmutils.calculus.form_field.procedure__GT_oneform_field","omega","sicmutils.calculus.metric/vector-field->oneform-field","sicmutils.calculus.metric/drop1","sicmutils.calculus.metric/raise","gi","sicmutils.calculus.basis/contract","vf-i","ff-i","sicmutils.calculus.metric/oneform-field->vector-field","sicmutils.calculus.metric/raise1","sicmutils.calculus.metric/drop2","metric-tensor","tensor","e1","e2","sicmutils.calculus.metric/raise2","tensor02","omega1","omega2","sicmutils.calculus.metric/trace2down","inverse-metric-tensor","sicmutils.calculus.metric/trace2up","tensor20","sicmutils.calculus.metric/sharpen","oneform-field","oneform-coeffs","ei","fexpr__87909","vector-coeffs","sicmutils.structure.sumr","sicmutils.generic/*","sicmutils.calculus.metric/S2-metric","vec__87913","cljs.core.nth","vec__87916","theta","sicmutils.calculus.coordinate/coordinate-functions","sicmutils.calculus.manifold/S2-spherical","dtheta","dphi","sicmutils.calculus.form-field/coordinate-system->oneform-basis","sicmutils.generic._PLUS_","sicmutils.generic/expt","sicmutils.generic/sin"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.calculus.metric\n  (:require [sicmutils.calculus.basis :as b]\n            [sicmutils.calculus.coordinate :as coord]\n            [sicmutils.calculus.derivative :refer [D]]\n            [sicmutils.calculus.form-field :as ff]\n            [sicmutils.calculus.indexed :as ci]\n            [sicmutils.calculus.manifold :as m]\n            [sicmutils.calculus.vector-field :as vf]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g]\n            [sicmutils.matrix :as matrix]\n            [sicmutils.structure :as s :refer [down]]\n            [sicmutils.value :as v]))\n\n;; ## Metrics\n\n;; A metric is a function that takes two vector fields and produces a function\n;; on the manifold.\n\n(defn embedding-map->metric-components\n  [n xi->rectangular]\n  (let [h   (D xi->rectangular)\n        ref (fn [f k]\n              (f/compose #(get % k) f))]\n    (if (= n 1)\n      (down (down (g/dot-product h h)))\n      (s/generate\n       n ::s/down\n       (fn [i]\n         (s/generate\n          n ::s/down\n          (fn [j]\n            (g/dot-product (ref h i)\n                           (ref h j)))))))))\n\n(defn coordinate-system->metric-components [coordsys]\n  (let [n (:dimension (m/manifold coordsys))\n        ;; assumes internal rectangular representation\n        xi->x (f/compose m/manifold-point-representation\n                         (m/point coordsys))]\n    (embedding-map->metric-components n xi->x)))\n\n(defn coordinate-system->metric [coordinate-system]\n  (let [basis (b/coordinate-system->basis coordinate-system)\n        oneform-basis (b/basis->oneform-basis basis)\n        ->components (coordinate-system->metric-components\n                      coordinate-system)\n        Chi (m/chart coordinate-system)]\n    (letfn [(the-metric [v1 v2]\n              (fn [m]\n                (let [gcoeffs (->components (Chi m))]\n                  (g/* (g/* gcoeffs ((oneform-basis v1) m))\n                       ((oneform-basis v2) m)))))]\n      (ci/with-argument-types\n        the-metric\n        [::vf/vector-field\n         ::vf/vector-field]))))\n\n(defn coordinate-system->inverse-metric [coordinate-system]\n  (let [basis (b/coordinate-system->basis coordinate-system)\n        vector-basis (b/basis->vector-basis basis)\n        ->components\n        (g// 1 (coordinate-system->metric-components\n                coordinate-system))\n        Chi (m/chart coordinate-system)]\n    (letfn [(the-inverse-metric [w1 w2]\n              (fn [m]\n                (let [gcoeffs (->components (Chi m))]\n                  (g/* (g/* gcoeffs\n                            (s/mapr (fn [e] ((w1 e) m))\n                                    vector-basis))\n                       (s/mapr (fn [e] ((w2 e) m))\n                               vector-basis)))))]\n      (ci/with-argument-types\n        the-inverse-metric\n        [::ff/oneform-field\n         ::ff/oneform-field]))))\n\n;; Symbolic metrics are often useful for testing.\n\n(defn- make-metric [name coordinate-system]\n  (fn gij [i j]\n    (if (<= i j)\n      (m/literal-manifold-function\n       (symbol (str name \"_\" i j))\n       coordinate-system)\n      (gij j i))))\n\n(defn literal-metric\n  \"Flat coordinate systems here only.\"\n  [name coordinate-system]\n  (let [basis (b/coordinate-system->basis coordinate-system)\n        oneform-basis (b/basis->oneform-basis basis)\n        gij (make-metric name coordinate-system)\n        n (g/dimension oneform-basis)\n        gcoeffs (s/generate\n                 n ::s/down\n                 (fn [i]\n                   (s/generate\n                    n ::s/down\n                    (fn [j]\n                      (gij i j)))))]\n    (letfn [(the-metric [v1 v2]\n              (g/* (g/* gcoeffs (oneform-basis v1))\n                   (oneform-basis v2)))]\n      (ci/with-argument-types\n        the-metric\n        [::vf/vector-field\n         ::vf/vector-field]))))\n\n(defn components->metric [components basis]\n  (let [oneform-basis (b/basis->oneform-basis basis)]\n    (fn the-metric [v1 v2]\n      (g/* (oneform-basis v1)\n           (g/* components (oneform-basis v2))))))\n\n(defn metric->components [metric basis]\n  (let [vector-basis (b/basis->vector-basis basis)]\n    (s/mapr (fn [e_i]\n              (s/mapr (fn [e_j]\n                        (metric e_i e_j))\n                      vector-basis))\n            vector-basis)))\n\n(defn metric->inverse-components\n  \"Given a metric and a basis, computes the inverse metric.\"\n  [metric basis]\n  (fn the-coeffs [m]\n    (let [g_ij ((metric->components metric basis) m)\n          oneform-basis (b/basis->oneform-basis basis)\n          typical (s/typical-object oneform-basis)]\n      (matrix/s:inverse typical g_ij typical))))\n\n(defn invert [metric basis]\n  (letfn [(the-inverse-metric [w1 w2]\n            (let [vector-basis (b/basis->vector-basis basis)\n                  g-ij (metric->inverse-components metric basis)]\n              (g/* (g/* g-ij (s/mapr w1 vector-basis))\n                   (s/mapr w2 vector-basis))))]\n    (ci/with-argument-types\n      the-inverse-metric\n      [::ff/oneform-field\n       ::ff/oneform-field])))\n\n;; Over a map...\n\n(defn metric-over-map [mu:N->M g-on-M]\n  (letfn [(make-fake-vector-field [V-over-mu n]\n            (vf/procedure->vector-field\n             (fn [f]\n               (fn [_]\n                 ((V-over-mu f) n)))\n             `(~'make-fake-vector-field\n               ~(v/freeze V-over-mu))))\n          (the-metric [v1 v2]\n            (fn [n]\n              ((g-on-M\n                (make-fake-vector-field v1 n)\n                (make-fake-vector-field v2 n))\n               (mu:N->M n))))]\n    (ci/with-argument-types\n      the-metric\n      [::vf/vector-field\n       ::vf/vector-field])))\n\n;; ### Raising and lowering indices\n\n(defn lower\n  \"To make a vector field into a one-form field, ie, a (1,0) tensor into a (0,1)\n  tensor.\"\n  [metric]\n  (fn [u]\n    (letfn [(omega [v]\n              (metric v u))]\n      (ff/procedure->oneform-field\n       omega\n       `(~'lower\n         ~(v/freeze u)\n         ~(v/freeze metric))))))\n\n(def ^{:doc \"Alias for [[lower]].\"}\n  vector-field->oneform-field\n  lower)\n\n(def ^{:doc \"Alias for [[lower]].\"}\n  drop1\n  lower)\n\n(defn raise\n  \"To make a one-form field into a vector field, ie, a (0,1) tensor into a (1,0)\n  tensor.\"\n  [metric basis]\n  (let [gi (invert metric basis)]\n    (fn [omega]\n      (let [v (b/contract\n               (fn [vf-i ff-i]\n                 (g/* (gi omega ff-i) vf-i))\n               basis)]\n        (vf/procedure->vector-field\n         v\n         `(~'raise\n           ~(v/freeze omega)\n           ~(v/freeze metric)))))))\n\n(def ^{:doc \"Alias for [[raise]].\"}\n  oneform-field->vector-field\n  raise)\n\n(def ^{:doc \"Alias for [[raise]].\"}\n  raise1\n  raise)\n\n(defn drop2\n  \"For making a (2,0) tensor into a (0,2) tensor.\"\n  [metric-tensor basis]\n  (fn [tensor]\n    (letfn [(omega [v1 v2]\n              (b/contract\n               (fn [e1 w1]\n                 (b/contract\n                  (fn [e2 w2]\n                    (g/* (metric-tensor v1 e1)\n                         (tensor w1 w2)\n                         (metric-tensor e2 v2)))\n                  basis))\n               basis))]\n      (ci/with-argument-types\n        omega\n        [::vf/vector-field\n         ::vf/vector-field]))))\n\n(defn raise2\n  \"For making a (0,2) tensor into a (2,0) tensor.\"\n  [metric-tensor basis]\n  (let [gi (invert metric-tensor basis)]\n    (fn [tensor02]\n      (letfn[(v2 [omega1 omega2]\n               (b/contract\n                (fn [e1 w1]\n                  (b/contract\n                   (fn [e2 w2]\n                     (g/* (gi omega1 w1)\n                          (tensor02 e1 e2)\n                          (gi w2 omega2)))\n                   basis))\n                basis))]\n        (ci/with-argument-types\n          v2\n          [::ff/oneform-field\n           ::ff/oneform-field])))))\n\n(defn trace2down\n  \"Computes the trace of a (0,2) tensor.\"\n  [metric-tensor basis]\n  (let [inverse-metric-tensor (invert metric-tensor basis)]\n    (fn [tensor02]\n      (let [f (b/contract\n               (fn [e1 w1]\n                 (b/contract\n                  (fn [e2 w2]\n                    (g/* (inverse-metric-tensor w1 w2)\n                         (tensor02 e1 e2)))\n                  basis))\n               basis)]\n        (ci/with-argument-types\n          f\n          [::v/function])))))\n\n(defn trace2up\n  \"Computes the trace of a (2,0) tensor\"\n  [metric-tensor basis]\n  (fn [tensor20]\n    (let [f (b/contract\n             (fn [e1 w1]\n               (b/contract\n                (fn [e2 w2]\n                  (g/* (metric-tensor e1 e2)\n                       (tensor20 w1 w2)))\n                basis))\n             basis)]\n      (ci/with-argument-types\n        f\n        [::v/function]))))\n\n\n;; Unfortunately raise is very expensive because the matrix is\n;; inverted for each manifold point.\n\n(defn sharpen [metric basis m]\n  (let [g-ij ((metric->inverse-components metric basis) m)\n\t      vector-basis (b/basis->vector-basis basis)]\n    (fn sharp [oneform-field]\n      (let [oneform-coeffs\n\t          (s/mapr (fn [ei] ((oneform-field ei) m))\n\t\t                vector-basis)\n            vector-coeffs (g/* g-ij oneform-coeffs)]\n\t      (s/sumr g/* vector-coeffs vector-basis)))))\n\n;; ## Useful metrics\n\n(def S2-metric\n  (let [[theta] (coord/coordinate-functions m/S2-spherical)\n        [dtheta dphi] (ff/coordinate-system->oneform-basis m/S2-spherical)]\n    (-> (fn the-metric [v1 v2]\n          (g/+ (g/* (dtheta v1) (dtheta v2))\n\t             (g/* (g/expt (g/sin theta) 2)\n\t                  (dphi v1) (dphi v2))))\n        (ci/with-argument-types\n          [::vf/vector-field\n           ::vf/vector-field]))))\n"]}