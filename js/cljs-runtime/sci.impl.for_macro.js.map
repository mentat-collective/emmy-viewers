{"version":3,"sources":["sci/impl/for_macro.cljc"],"mappings":"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","names":["sci.impl.for-macro/assert-args","expr","seq-exprs","_body-expr","arg-count","cljs.core/count","cljs.core._EQ_","sci.impl.utils.throw_error_with_location","cljs.core/vector?","cljs.core/even?","sci.impl.for-macro/expand-for","_","body-expr","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","to-groups","cljs.core.reduce","p__77285","vec__77289","cljs.core.nth","groups","k","v","cljs.core/Keyword","cljs.core.conj","cljs.core/pop","cljs.core/peek","cljs.core.partition","err","msg","js/Error","cljs.core.apply","cljs.core/str","emit-bind","p__77297","vec__77298","seq__77299","first__77300","cljs.core/first","cljs.core/next","vec__77301","seq__77302","first__77303","vec__77304","vec__77307","bind","mod-pairs","next-expr","next-groups","giter","cljs.core.gensym","gxs","do-mod","p__77310","vec__77312","seq__77313","first__77314","vec__77315","pair","etc","sci.impl.utils/allowed-recur","sci.impl.utils/allowed-loop","gi","gb","do-cmod","p__77556","vec__77558","seq__77559","first__77560","vec__77561","cljs.core/second"],"sourcesContent":["(ns sci.impl.for-macro\n  {:no-doc true}\n  (:require [sci.impl.utils :refer [allowed-loop allowed-recur\n                                    throw-error-with-location]]))\n\n;; based on the source of clojure.core/for\n\n(defn assert-args [expr seq-exprs _body-expr]\n  (let [arg-count (dec (count expr))]\n    (when-not (= 2 arg-count)\n      (throw-error-with-location (str \"Wrong number of args (\" arg-count \") passed to: clojure.core/for\")\n                                 expr)))\n  (when-not (vector? seq-exprs)\n    (throw-error-with-location \"for requires a vector for its binding\"\n                               expr))\n  (when-not (even? (count seq-exprs))\n    (throw-error-with-location \"for requires an even number of forms in binding vector\"\n                               expr)))\n\n;; see clojurescript core.cljc defmacro for\n(defn expand-for\n  [expr _ seq-exprs body-expr]\n  (assert-args expr seq-exprs body-expr)\n  (let [to-groups (fn [seq-exprs]\n                    (reduce (fn [groups [k v]]\n                              (if (keyword? k)\n                                (conj (pop groups) (conj (peek groups) [k v]))\n                                (conj groups [k v])))\n                            [] (partition 2 seq-exprs)))\n        err (fn [& msg] (throw (new #?(:clj IllegalArgumentException\n                                       :cljs js/Error) ^String (apply str msg))))\n        emit-bind (fn emit-bind [[[bind expr & mod-pairs]\n                                  & [[_ next-expr] :as next-groups]]]\n                    (let [giter (gensym \"iter__\")\n                          gxs (gensym \"s__\")\n                          do-mod (fn do-mod [[[k v :as pair] & etc]]\n                                   (cond\n                                     (= k :let) `(let ~v ~(do-mod etc))\n                                     (= k :while) `(when ~v ~(do-mod etc))\n                                     (= k :when) `(if ~v\n                                                    ~(do-mod etc)\n                                                    (~allowed-recur (rest ~gxs)))\n                                     (keyword? k) (err \"Invalid 'for' keyword \" k)\n                                     next-groups\n                                     `(let [iterys# ~(emit-bind next-groups)\n                                            fs# (seq (iterys# ~next-expr))]\n                                        (if fs#\n                                          (concat fs# (~giter (rest ~gxs)))\n                                          (~allowed-recur (rest ~gxs))))\n                                     :else `(cons ~body-expr\n                                                  (~giter (rest ~gxs)))))]\n                      (if next-groups\n                        #_\"not the inner-most loop\"\n                        `(fn ~giter [~gxs]\n                           (lazy-seq\n                            (~allowed-loop [~gxs ~gxs]\n                             (when-first [~bind ~gxs]\n                               ~(do-mod mod-pairs)))))\n                        #_\"inner-most loop\"\n                        (let [gi (gensym \"i__\")\n                              gb (gensym \"b__\")\n                              do-cmod (fn do-cmod [[[k v :as pair] & etc]]\n                                        (cond\n                                          (= k :let) `(let ~v ~(do-cmod etc))\n                                          (= k :while) `(when ~v ~(do-cmod etc))\n                                          (= k :when) `(if ~v\n                                                         ~(do-cmod etc)\n                                                         (~allowed-recur\n                                                          (unchecked-inc ~gi)))\n                                          (keyword? k)\n                                          (err \"Invalid 'for' keyword \" k)\n                                          :else\n                                          `(do (chunk-append ~gb ~body-expr)\n                                               (~allowed-recur (unchecked-inc ~gi)))))]\n                          `(fn ~giter [~gxs]\n                             (lazy-seq\n                              (~allowed-loop [~gxs ~gxs]\n                               (let [~gxs (seq ~gxs)]\n                                 (when ~gxs\n                                   (if (chunked-seq? ~gxs)\n                                     (let [c# (chunk-first ~gxs)\n                                           size# (int (count c#))\n                                           ~gb (chunk-buffer size#)]\n                                       (if (~allowed-loop [~gi (int 0)]\n                                            (if (< ~gi size#)\n                                              (let [~bind (nth c# ~gi)]\n                                                ~(do-cmod mod-pairs))\n                                              true))\n                                         (chunk-cons\n                                          (chunk ~gb)\n                                          (~giter (chunk-rest ~gxs)))\n                                         (chunk-cons (chunk ~gb) nil)))\n                                     (let [~bind (first ~gxs)]\n                                       ~(do-mod mod-pairs))))))))))))]\n    `(let [iter# ~(emit-bind (to-groups seq-exprs))]\n       (iter# ~(second seq-exprs)))))\n"]}