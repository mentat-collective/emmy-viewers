{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_inline$strikethrough.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/rules_inline/strikethrough.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_inline$strikethrough\"] = function(global,require,module,exports) {\n// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token:  state.tokens.length - 1,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      max = delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","postProcess","state","delimiters","i","loneMarkers","max","length","startDelim","marker","end","endDelim","token","tokens","type","tag","nesting","markup","content","push","pop","j","tokenize","module.exports.tokenize","silent","src","charCodeAt","pos","scanned","scanDelims","len","ch","String","fromCharCode","open","can_open","close","can_close","module.exports.postProcess","curr","tokens_meta"]
}
