{"version":3,"sources":["nextjournal/markdown/transform.cljc"],"mappings":"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","names":["nextjournal.markdown.transform/guard","pred","val","p__85551","map__85553","cljs.core/--destructure-map","cljs.core.get","nextjournal.markdown.transform/->text","_node","text","content","or__4253__auto__","cljs.core.apply","cljs.core/str","cljs.core.map","nextjournal.markdown.transform/->id","lambdaisland.uri.normalize/normalize-fragment","p__85558","map__85560","nextjournal.markdown.transform/hydrate-toc","doc","toc","cljs.core.update","cljs.core.partial","cljs.core/into","p__85562","map__85563","node","t","cljs.core._EQ_","p__85564","map__85565","nextjournal.markdown.transform/table-alignment","style","vec__85566","cljs.core.nth","_","alignment","cljs.core/re-matches","p__85570","map__85571","nextjournal.markdown.transform/heading-markup","l","cljs.core.keyword","p__85572","map__85573","nextjournal.markdown.transform/into-markup","mkup","ctx","cljs.core.conj","cljs.core/seq","cljs.core.into","cljs.core.keep","nextjournal.markdown.transform/->hiccup","cljs.core.assoc","p__85578","p__85579","map__85580","map__85581","nextjournal.markdown.transform/toc->hiccup","parent","children","toc-item","G__85582","p1__85575#","id","G__85583","temp__5757__auto__","el","js/document","G__85584","cljs.core.not_EQ_","nextjournal.markdown.transform/default-hiccup-renderers","G__85608","p__85609","map__85610","p__85606","map__85607","cljs.core/constantly","p__85598","p__85599","map__85600","map__85601","attrs","p__85594","map__85595","p__85602","map__85603","p__85585","map__85586","p__85588","map__85589","p__85592","map__85593","p__85596","map__85597","p__85604","map__85605","p__85590","map__85591","d","var_args","G__85612","js/Error","p__85613","map__85614","nextjournal.markdown.transform.__GT_hiccup","map__85615","type","G__85616","temp__5755__auto__","f","cljs.core/fn?","cljs.core.pr_str"],"sourcesContent":["(ns nextjournal.markdown.transform\n  \"transform markdown data as returned by `nextjournal.markdown/parse` into other formats, currently:\n     * hiccup\"\n  (:require [lambdaisland.uri.normalize :as uri.normalize]))\n\n;; helpers\n(defn guard [pred val] (when (pred val) val))\n(defn ->text [{:as _node :keys [text content]}] (or text (apply str (map ->text content))))\n(def ->id uri.normalize/normalize-fragment)\n\n(defn hydrate-toc\n  \"Scans doc contents and replaces toc node placeholder with the toc node accumulated during parse.\"\n  [{:as doc :keys [toc]}]\n  (update doc :content (partial into [] (map (fn [{:as node t :type}] (if (= :toc t) toc node))))))\n\n(defn table-alignment [{:keys [style]}]\n  (when (string? style)\n    (let [[_ alignment] (re-matches #\"^text-align:(.+)$\" style)]\n      (when alignment {:text-align alignment}))))\n\n(defn heading-markup [{l :heading-level}] [(keyword (str \"h\" (or l 1)))])\n\n;; into-markup\n(declare ->hiccup)\n(defn into-markup\n  \"Takes a hiccup vector, a context and a node, puts node's `:content` into markup mapping through `->hiccup`.\"\n  [mkup ctx {:as node :keys [text content]}]\n  (cond ;; formula nodes are leaves: have text and no contents\n    text (conj mkup text)\n    (seq content) (into mkup\n                        (keep (partial ->hiccup (assoc ctx ::parent node)))\n                        content)))\n\n(defn toc->hiccup [{:as ctx ::keys [parent]} {:as node :keys [content children]}]\n  (let [toc-item (cond-> [:div]\n                   (seq content)\n                   (conj (let [id (-> node ->text ->id)]\n                           [:a {:href (str \"#\" id) #?@(:cljs [:on-click #(when-some [el (.getElementById js/document id)] (.preventDefault %) (.scrollIntoViewIfNeeded el))])}\n                            (-> node heading-markup (into-markup ctx node))]))\n                   (seq children)\n                   (conj (into [:ul] (map (partial ->hiccup (assoc ctx ::parent node))) children)))]\n    (cond->> toc-item\n      (= :toc (:type parent))\n      (conj [:li.toc-item])\n      (not= :toc (:type parent))\n      (conj [:div.toc]))))\n\n(comment\n  ;; override toc rendering\n  (-> \"# Hello\na paragraph\n[[TOC]]\n## Section _nice_ One\n### Section Nested\n## Section **terrible** Idea\n\"\n      nextjournal.markdown/parse\n      ;; :toc\n      ;; ->hiccup #_\n      (->> (->hiccup (assoc default-hiccup-renderers\n                            :toc (fn [ctx {:as node :keys [content children heading-level]}]\n                                   (cond-> [:div]\n                                     (seq content) (conj [:span.title {:data-level heading-level} (-> node ->text ->id)])\n                                     (seq children) (conj (into [:ul] (map (partial ->hiccup ctx)) children)))))))))\n\n(def default-hiccup-renderers\n  {:doc (partial into-markup [:div])\n   :heading (fn [ctx node] (-> (heading-markup node) (conj {:id (-> node ->text ->id)}) (into-markup ctx node)))\n   :paragraph (partial into-markup [:p])\n   :plain (partial into-markup [:<>])\n   :text (fn [_ {:keys [text]}] text)\n   :hashtag (fn [_ {:keys [text]}] [:a.tag {:href (str \"/tags/\" text)} (str \"#\" text)]) ;; TODO: make it configurable\n   :blockquote (partial into-markup [:blockquote])\n   :ruler (constantly [:hr])\n\n   ;; images\n   :image (fn [{:as ctx ::keys [parent]} {:as node :keys [attrs]}]\n            (if (= :paragraph (:type parent))\n              [:img.inline attrs]\n              [:figure.image [:img attrs] (into-markup [:figcaption] ctx node)]))\n\n   ;; code\n   :code (partial into-markup [:pre.viewer-code.not-prose])\n\n   ;; softbreaks\n   ;; :softbreak (constantly [:br]) (treat as space)\n   :softbreak (constantly \" \")\n\n   ;; formulas\n   :formula (partial into-markup [:span.formula])\n   :block-formula (partial into-markup [:figure.formula])\n\n   ;; lists\n   :bullet-list (partial into-markup [:ul])\n   :list-item (partial into-markup [:li])\n   :todo-list (partial into-markup [:ul.contains-task-list])\n   :numbered-list (fn [ctx {:as node :keys [attrs]}] (into-markup [:ol attrs] ctx node))\n\n   :todo-item (fn [ctx {:as node :keys [attrs]}]\n                (into-markup [:li [:input {:type \"checkbox\" :checked (:checked attrs)}]] ctx node))\n\n   ;; tables\n   :table (partial into-markup [:table])\n   :table-head (partial into-markup [:thead])\n   :table-body (partial into-markup [:tbody])\n   :table-row (partial into-markup [:tr])\n   :table-header (fn [ctx {:as node :keys [attrs]}] (into-markup [:th {:style (table-alignment attrs)}] ctx node))\n   :table-data (fn [ctx {:as node :keys [attrs]}] (into-markup [:td {:style (table-alignment attrs)}] ctx node))\n\n   ;; sidenodes\n   :sidenote-ref (partial into-markup [:sup.sidenote-ref])\n   :sidenote (fn [ctx {:as node :keys [attrs]}]\n               (into-markup [:span.sidenote [:sup {:style {:margin-right \"3px\"}} (-> attrs :ref inc)]]\n                            ctx\n                            node))\n   ;; TOC\n   :toc toc->hiccup\n\n   ;; marks\n   :em (partial into-markup [:em])\n   :strong (partial into-markup [:strong])\n   :monospace (partial into-markup [:code])\n   :strikethrough (partial into-markup [:s])\n   :link (fn [ctx {:as node :keys [attrs]}] (into-markup [:a {:href (:href attrs)}] ctx node))\n   :internal-link (fn [_ {:keys [attrs text]}] [:a.internal {:href (:href attrs text)} text])\n\n   ;; default convenience fn to wrap extra markup around the default one from within the overriding function\n   :default (fn [ctx {:as node t :type}] (when-some [d (get default-hiccup-renderers t)] (d ctx node)))\n   })\n\n(defn ->hiccup\n  ([node] (->hiccup default-hiccup-renderers node))\n  ([ctx {:as node t :type}]\n   (let [{:as node :keys [type]} (cond-> node (= :doc t) hydrate-toc)]\n     (if-some [f (guard fn? (get ctx type))]\n       (f ctx node)\n       [:span.message.red\n        [:strong (str \"Unknown type: '\" type \"'.\")]\n        [:code (pr-str node)]]\n       ))))\n\n(comment\n  (-> \"# Hello\n\na nice paragraph with sidenotes[^my-note]\n\n[[TOC]]\n\n## Section One\nA nice $\\\\phi$ formula [for _real_ **strong** fun](/path/to) soft\nbreak\n\n- [ ] one **ahoi** list\n- two `nice` and ~~three~~\n- [x] checked\n\n> that said who?\n\n---\n\n## Section Two\n\n### Tables\n\n| Syntax |  JVM                     | JavaScript                      |\n|--------|-------------------------:|:--------------------------------|\n|   foo  |  Loca _lDate_ ahoiii     | goog.date.Date                  |\n|   bar  |  java.time.LocalTime     | some [kinky](link/to/something) |\n|   bag  |  java.time.LocalDateTime | $\\\\phi$                         |\n\n### Images\n\n![Some **nice** caption](https://www.example.com/images/dinosaur.jpg)\n\nand here as inline ![alt](foo/bar) image\n\n```clj\n(some nice clojure)\n```\n\n[^my-note]: Here can discuss at length\"\n    nextjournal.markdown/parse\n    ->hiccup\n    )\n\n  ;; override defaults\n  (->> \"## Title\npar one\n\npar two\"\n    nextjournal.markdown/parse\n    (->hiccup (assoc default-hiccup-renderers\n                     :heading (partial into-markup [:h1.at-all-levels])\n                     ;; wrap something around the default\n                     :paragraph (fn [{:as ctx d :default} node] [:div.p-container (d ctx node)]))))\n  )\n"]}