{"version":3,"sources":["sicmutils/calculus/vector_calculus.cljc"],"mappings":"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","names":["sicmutils.calculus.vector-calculus/Grad","f","sicmutils.function$.compose","sicmutils.structure/opposite","sicmutils.generic/partial-derivative","sicmutils.operator.make_operator","sicmutils.calculus.vector-calculus/gradient","metric","basis","sicmutils.calculus.metric/raise","sicmutils.calculus.form-field/d","sicmutils.calculus.vector-calculus/Div","sicmutils.generic/trace","var_args","G__87980","sicmutils.calculus.vector-calculus/divergence","js/Error","Cartan","sicmutils.calculus.covariant/Cartan->basis","nabla","sicmutils.calculus.covariant.covariant_derivative","v","point","sicmutils.calculus.basis/contract","ei","wi","fexpr__87987","G__87988","fexpr__87989","orthonormal-basis","star","sicmutils.calculus.hodge-star/Hodge-star","flat","sicmutils.calculus.metric/lower","sicmutils.calculus.vector-calculus/Curl","f-triple","vec__87990","cljs.core.nth","Dx","Dy","Dz","cljs.core.map","sicmutils.calculus.derivative/partial","fx","sicmutils.function$.get","fy","fz","sicmutils.structure.up","sicmutils.generic._","sicmutils.calculus.vector-calculus/curl","sharp","sicmutils.calculus.vector-calculus/Lap","sicmutils.generic._STAR_","sicmutils.calculus.vector-calculus/Laplacian","sicmutils.calculus.vector_calculus.divergence","sicmutils.calculus.vector-calculus/coordinate-system->Lame-coefficients","coordinate-system","gij","sicmutils.calculus.metric/coordinate-system->metric-components","sicmutils.matrix/diagonal?","n","sicmutils.calculus.manifold/manifold","sicmutils.structure/generate","i","sicmutils.generic/sqrt","cljs.core.get_in","sicmutils.calculus.vector-calculus/coordinate-system->orthonormal-vector-basis","coordsys","vector-basis","sicmutils.calculus.vector-field/coordinate-system->vector-basis","Lame-coefs","sicmutils.generic._SLASH_","cljs.core.get","sicmutils.calculus.manifold/chart"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.calculus.vector-calculus\n  \"This namespace contains vector calculus operators, in versions built on top\n  of [[derivative/D]] _and_ in Functional Differential Geometry style.\n\n  The former transform functions of scalars or vectors, while the latter take a\n  metric and basis.\"\n  (:refer-clojure :exclude [+ - * /])\n  (:require [sicmutils.calculus.basis :as b]\n            [sicmutils.calculus.covariant :as cov]\n            [sicmutils.calculus.derivative :as d]\n            [sicmutils.calculus.form-field :as ff]\n            [sicmutils.calculus.hodge-star :as hs]\n            [sicmutils.calculus.manifold :as cm]\n            [sicmutils.calculus.metric :as m]\n            [sicmutils.calculus.vector-field :as vf]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g :refer [- * /]]\n            [sicmutils.matrix :as matrix]\n            [sicmutils.operator :as o]\n            [sicmutils.structure :as s]))\n\n;; Traditional vector calculus operators, defined in two different styles. See\n;; the namespace comment for a basic sketch.\n\n(def ^{:doc \"Operator that takes a function `f` and returns a new function that\n  calculates the [Gradient](https://en.wikipedia.org/wiki/Gradient) of `f`.\n\n  The related [[D]] operator returns a function that produces a structure of the\n  opposite orientation as [[Grad]]. Both of these functions use forward-mode\n  automatic differentiation.\"}\n  Grad\n  (-> (fn [f]\n        (f/compose s/opposite\n                   (g/partial-derivative f [])))\n      (o/make-operator 'Grad)))\n\n(defn gradient\n  \"[[gradient]] implements equation (10.3) in Functional Differential Geometry,\n  defined on page 154.\"\n  [metric basis]\n  (f/compose (m/raise metric basis) ff/d))\n\n(def ^{:doc \"Operator that takes a function `f` and returns a function that\n  calculates the [Divergence](https://en.wikipedia.org/wiki/Divergence) of\n  `f` at its input point.\n\n The divergence is a one-level contraction of the gradient.\"}\n  Div\n  (-> (f/compose g/trace Grad)\n      (o/make-operator 'Div)))\n\n(defn divergence\n  \"Both arities of [[divergence]] are defined on page 156 of Functional Differential Geometry.\"\n  ([Cartan]\n   (let [basis (cov/Cartan->basis Cartan)\n         nabla (cov/covariant-derivative Cartan)]\n     (fn [v]\n       (fn [point]\n         (b/contract (fn [ei wi]\n                       ((wi ((nabla ei) v)) point))\n                     basis)))))\n\n  ([metric orthonormal-basis]\n   (let [star (hs/Hodge-star metric orthonormal-basis)\n         flat (m/lower metric)]\n     (f/compose star ff/d star flat))))\n\n(def ^{:doc \"Operator that takes a function `f` and returns a function that\n  calculates the [Curl](https://en.wikipedia.org/wiki/Curl_(mathematics)) of `f`\n  at its input point.\n\n  `f` must be a function from $\\\\mathbb{R}^3 \\\\to \\\\mathbb{R}^3$.\"}\n  Curl\n  (-> (fn [f-triple]\n        (let [[Dx Dy Dz] (map d/partial [0 1 2])\n              fx (f/get f-triple 0)\n              fy (f/get f-triple 1)\n              fz (f/get f-triple 2)]\n          (s/up (- (Dy fz) (Dz fy))\n                (- (Dz fx) (Dx fz))\n                (- (Dx fy) (Dy fx)))))\n      (o/make-operator 'Curl)))\n\n(defn curl\n  \"[[curl]] implements equation (10.7) of Functional Differential Geometry,\n  defined on page 155.\"\n  [metric orthonormal-basis]\n  (let [star  (hs/Hodge-star metric orthonormal-basis)\n        sharp (m/raise metric orthonormal-basis)\n        flat  (m/lower metric)]\n    (f/compose sharp star ff/d flat)))\n\n\n(def ^{:doc \"Operator that takes a function `f` and returns a function that\n  calculates the [Vector\n  Laplacian](https://en.wikipedia.org/wiki/Laplace_operator#Vector_Laplacian) of\n  `f` at its input point.\"}\n  Lap\n  (-> (f/compose g/trace (* Grad Grad))\n      (o/make-operator 'Lap)))\n\n(defn Laplacian [metric orthonormal-basis]\n  (f/compose (divergence metric orthonormal-basis)\n             (gradient metric orthonormal-basis)))\n\n(defn coordinate-system->Lame-coefficients [coordinate-system]\n  (let [gij (m/coordinate-system->metric-components coordinate-system)]\n    (assert (matrix/diagonal? gij))\n    (let [n (:dimension (cm/manifold coordinate-system))]\n      (s/generate n ::s/down\n                  (fn [i]\n                    (g/sqrt (get-in gij [i i])))))))\n\n(defn coordinate-system->orthonormal-vector-basis [coordsys]\n  (let [vector-basis (vf/coordinate-system->vector-basis coordsys)\n        Lame-coefs (coordinate-system->Lame-coefficients coordsys)\n        n (:dimension (cm/manifold coordsys))]\n    (s/generate n ::s/down\n                (fn [i]\n                  (* (nth vector-basis i)\n                     (/ 1 (f/compose\n                           (get Lame-coefs i)\n                           (cm/chart coordsys))))))))\n"]}