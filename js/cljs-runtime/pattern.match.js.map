{"version":3,"sources":["pattern/match.cljc"],"mappings":"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","names":["pattern.match/fail","_","pattern.match/pass","frame","succeed","pattern.match/with-frame","new-frame","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","pattern.match/update-frame","seq82206","G__82207","cljs.core/first","cljs.core/next","self__4851__auto__","f","args","temp__5753__auto__","cljs.core.apply","pattern.match/predicate","pred","data","and__4251__auto__","pattern.match/frame-predicate","G__82218","pattern.match/eq","js/Error","x","pattern.match.eq","cljs.core/=","eq-fn","other","G__82225","pattern.match/bind","sym","pattern.match.bind","pattern.syntax/wildcard?","temp__5751__auto__","vec__82239","cljs.core.nth","binding","cljs.core/find","cljs.core._EQ_","G__82242","cljs.core.assoc","pattern.match/match-when","success-pattern","match","pattern.match/pattern->combinators","xs","success","G__82252","pattern.match/match-if","fail-pattern","s-match","f-match","G__82267","pattern.match/or","args-arr__4885__auto__","argseq__4886__auto__","seq82265","G__82266","pattern","more","matchers","cljs.core.map","cljs.core/cons","p1__82262#","cljs.core/some","G__82286","pattern.match/and","seq82284","G__82285","cljs.core.reduce","acc","matcher","cljs.core/reduced","pattern.match/not","pattern.match/as-segment-matcher","cljs.core.vary_meta","cljs.core/assoc","pattern.match/segment-matcher?","cljs.core/meta","pattern.match/segment","or__4253__auto__","cljs.core/sequential?","binding-count","cljs.core/count","cljs.core.take","G__82311","G__82312","cljs.core.drop","prefix","suffix","cljs.core/seq","cljs.core.conj","pattern.match/entire-segment","G__82316","G__82317","pattern.match/reverse-segment","cljs.core/vector?","reversed","cljs.core/rseq","G__82326","G__82327","pattern.match/sequence*","patterns","items","G__82361","G__82362","G__82363","step","G__82374","G__82375","G__82376","new-xs","m","try-segment","try-elem","pattern.match/sequence","seq82387","self__4852__auto__","cljs.core/fn?","pattern.syntax/binding?","pattern.syntax/variable-name","pattern.syntax/restriction","pattern.syntax/segment?","pattern.syntax/reverse-segment?","pattern.syntax/reverse-segment-name","cljs.core/seq?","cljs.core/empty?","cljs.core.concat","cljs.core/butlast","p","cljs.core/last","this__4502__auto__","k__4503__auto__","this__4504__auto__","k82390","else__4505__auto__","G__82402","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","ret__4525__auto__","p__82407","vec__82408","k__4526__auto__","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","G__82389","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this82391","other82392","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","this__4510__auto__","k__4511__auto__","pred__82417","cljs.core/keyword-identical?","expr__82418","this__4515__auto__","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/-nth","cljs.core/-conj","pattern.match/Failure","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__82394","extmap__4542__auto__","G__82420","cljs.core/record?","pattern.match/->Failure","pattern.match/map->Failure","pattern.match/failure","pattern.match/failed?","G__82422","pattern.match/matcher","G__82423","G__82424","G__82425","cljs.core/identity","pattern.match.and","cljs.core/map?","cljs.core.merge","G__82426","G__82427","G__82428","G__82430","pattern.match/match","pattern.match.matcher","pattern.match/foreach-matcher","cont","G__82431","G__82432","G__82433","pattern.match/foreach","pattern.match/all-results-matcher","cljs.core/deref","results","cljs.core.atom","cljs.core.swap_BANG_","cljs.core/conj","G__82434","G__82435","G__82436","pattern.match/all-results"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns pattern.match\n  \"Implementation of a pattern matching system inspired by [Gerald Jay Sussman's\n  lecture notes for MIT\n  6.945](http://groups.csail.mit.edu/mac/users/gjs/6.945/).\n  See [[pattern.rule]] for a higher-level API.\n\n  [[pattern.match]] and [[pattern.rule]] are spiritually similar to Alexey\n  Radul's [Rules](https://github.com/axch/rules) library for Scheme, and the\n  pattern matching system described in GJS and Hanson's [Software Design for\n  Flexibility](https://mitpress.mit.edu/books/software-design-flexibility).\"\n  (:refer-clojure :exclude [sequence or and not])\n  (:require [clojure.core :as core]\n            [pattern.syntax :as s]))\n\n;; # Pattern Matching\n;;\n;; The library is built out of a few stacked ideas: matcher combinators,\n;; matchers, consequences and rules.\n;;\n;; ### Matcher Combinators\n;;\n;; - A \"matcher combinator\" is a function that takes three arguments:\n;;\n;; `[binding-frame data success-continuation]`\n;;\n;;  and either returns `nil` or `false`, or calls its `success-continuation`\n;;  with a potentially-updated binding map.\n;;\n;;\n;; ### Matcher\n;;\n;; A `matcher` is a function of a `data` input that can succeed or fail. If it\n;; succeeds, it will return the binding map generated by the matching process.\n;;\n;; On failure, a matcher returns a special `failure` singleton object. You can\n;; check for this object using [[fail?]].\n;;\n;; ### Consequence Functions\n;;\n;; A consequence is a function from the binding map returned by a matcher to a\n;; final form. A consequence can fail by returning `false`, `nil` or the special\n;; `failure` singleton.\n;;\n;; ### Rule\n;;\n;; A rule is a function of `data` built from a pair of:\n;;\n;; - a matcher\n;; - a consequence function.\n;;\n;; If the matcher fails on the rule's input, the whole rule returns `failure`.\n;; If the match succeeds, the rule calls the consequence function with the\n;; matcher's binding map. If THIS function succeeds, the rule returns that\n;; value.\n;;\n;; If the consequence function returns `nil` or `false` (or `failure`), the\n;; whole `rule` fails with `failure`.\n;;\n;; ## Combinators\n\n;; `pattern.match` contains many matcher combinators. These are either functions\n;; with the contract described above, or functions that take one or more\n;; combinators and return a new combinator with the same contract. Examples\n;; are [[or]], [[not]], [[and]], [[match-when]] and more below.\n;;\n;; `pattern.rule` contains many rule combinators, which are either primitive\n;; rules or functions from zero or more rules to a new rule.\n;;\n;; Finally, `pattern.syntax` defines a small pattern language. Any matcher\n;; combinator that take another matcher can take a pattern instead.\n;;\n;;\n;; ### Basic Matcher Combinators\n\n(defn fail\n  \"Matcher which will fail for any input.\"\n  [_ _ _])\n\n(defn pass\n  \"Matcher that succeeds (with no new bindings) for any input, passing along its\n  input frame.\"\n  [frame _ succeed]\n  (succeed frame))\n\n(defn with-frame\n  \"Takes a `new-frame` of bindings and returns a matcher that will ignore its\n  input and always succeed by replacing the current map of bindings with\n  `new-frame`.\"\n  [new-frame]\n  (fn [_ _ succeed]\n    (succeed new-frame)))\n\n(defn update-frame\n  \"Takes a function from `frame` to a new frame (or false) and any number of\n  arguments `args`, and returns a matcher that will ignore its input and\n\n  - succeed with `(apply f frame args)` if that value is truthy,\n  - fail otherwise.\"\n  [f & args]\n  (fn [frame _ succeed]\n    (when-let [new-frame (apply f frame args)]\n      (succeed new-frame))))\n\n(defn predicate\n  \"Takes a predicate function `pred` and returns a matcher that succeeds (with no\n  new bindings) if its data input passes the predicate, fails otherwise.\"\n  [pred]\n  (fn predicate-match [frame data succeed]\n    (core/and (pred data)\n              (succeed frame))))\n\n(defn frame-predicate\n  \"Takes a predicate function `pred` and returns a matcher that succeeds (with no\n  new bindings) if its data input passes the predicate, fails otherwise.\"\n  [pred]\n  (fn frame-pred [frame _ succeed]\n    (core/and (pred frame)\n              (succeed frame))))\n\n(defn eq\n  \"Takes some input `x` and returns a matcher which succeeds if its data input is\n  equal to `x` (via `=` or the optional `eq-fn` argument). Fails otherwise.\n\n  The frame is not modified.\"\n  ([x] (eq x =))\n  ([x eq-fn]\n   (predicate\n    (fn [other]\n      (eq-fn x other)))))\n\n(defn bind\n  \"Takes a binding variable `sym` and an optional predicate `pred`, and returns a\n  matcher that binds its input to `sym` in the returned `frame`.\n\n  The returned matcher only succeeds if `input` passes `pred`.\n\n  If `sym` is already present in `frame`, the matcher only succeeds if the\n  values are equal, fails otherwise.\n\n  NOTE: If `sym` is the wildcard `_`, the returned matcher will not introduce a\n  new binding, but _will_ still check the predicate.\"\n  ([sym]\n   (bind sym (fn [_] true)))\n  ([sym pred]\n   (if (s/wildcard? sym)\n     (predicate pred)\n     (fn bind-match [frame data succeed]\n       (when (pred data)\n         (if-let [[_ binding] (find frame sym)]\n           (core/and (= binding data)\n                     (succeed frame))\n           (succeed (assoc frame sym data))))))))\n\n;; ### Matcher Combinators\n;;\n;; This section introduces functions that are able to build new matcher\n;; combinators out of the primitive matcher combinators defined above.\n;;\n;; Each of the following functions can take EITHER a matcher combinator or\n;; a \"pattern\". The pattern syntax is described in `pattern.syntax`.\n;;\n;; As an example, you might provide the symbol `'?x` instead of an\n;; explicit `(bind '?x)`:\n\n(comment\n  (let [m (match-if odd? '?odd '?even)]\n    (= [{'?odd 11} {'?even 12}]\n       [(m {} 11 identity)\n        (m {} 12 identity)])))\n\n(declare pattern->combinators)\n\n(defn match-when\n  \"Returns a matcher that passes its `frame` on to `success-pattern` if `pred`\n  succeeds on its data input, fails otherwise.\"\n  [pred success-pattern]\n  (let [match (pattern->combinators success-pattern)]\n    (fn [frame xs success]\n      (when (pred xs)\n        (match frame xs success)))))\n\n(defn match-if\n  \"Returns a matcher that passes its `frame` on to `success-pattern` if `pred`\n  succeeds on its data input, `fail-pattern` otherwise.\n\n  If no `fail-matcher` is supplied, the behavior is equivalent\n  to [[match-when]].\"\n  ([pred success-pattern]\n   (match-when pred success-pattern))\n  ([pred success-pattern fail-pattern]\n   (let [s-match (pattern->combinators success-pattern)\n         f-match (pattern->combinators fail-pattern)]\n     (fn [frame xs success]\n       (if (pred xs)\n         (s-match frame xs success)\n         (f-match frame xs success))))))\n\n(defn or\n  \"Takes a sequence of patterns, and returns a matcher that will apply its\n  arguments to each matcher in turn. Returns the value of the first pattern that\n  succeeds.\"\n  ([] fail)\n  ([pattern] (pattern->combinators pattern))\n  ([pattern & more]\n   (let [matchers (map pattern->combinators (cons pattern more))]\n     (fn call [frame xs succeed]\n       (some #(% frame xs succeed)\n             matchers)))))\n\n(defn and\n  \"Takes a sequence of patterns and returns a matcher that will apply its\n  arguments to the first pattern;\n\n  If that match succeeds, the next pattern will be called with the new, returned\n  frame (and the original data and success continuation).\n\n  The returned matcher succeeds only of all patterns succeed, and returns the\n  value of the final pattern.\"\n  ([] pass)\n  ([pattern] (pattern->combinators pattern))\n  ([pattern & more]\n   (let [matchers (map pattern->combinators (cons pattern more))]\n     (fn [frame xs succeed]\n       (reduce (fn [acc matcher]\n                 (if acc\n                   (matcher acc xs succeed)\n                   (reduced acc)))\n               frame\n               matchers)))))\n\n(defn not\n  \"Takes a `pattern` and returns a matcher that will apply its arguments to the\n  `pattern`. The returned pattern will succeed with the original frame if\n  `pattern` fails, and fail if `pattern` succeeds.\"\n  [pattern]\n  (let [match (pattern->combinators pattern)]\n    (fn [frame xs succeed]\n      (when-not (match frame xs succeed)\n        (succeed frame)))))\n\n;; ### Lists and Segments\n;;\n;; Segment variables introduce some additional trouble. Unlike other matchers, a\n;; segment variable is not tested against a fixed input, but against a sequence\n;; such that it may match any prefix. This means that in general, segment\n;; variables must search, trying one match and possibly backtracking.\n;;\n;; There are two circumstances when the search can be avoided:\n;;\n;; - if the variable is already bound, the bound value needs to be checked\n;;   against the input data, and will either fail or succeed.\n;;\n;; - If the segment variable is the last matcher in its enclosing list (which\n;;   actually happens quite often!) then the segment matcher can match the\n;;   entire remaining segment, no search required.\n;;\n;; This requires a different interface for the continutation. Segment matchers\n;; pass TWO arguments into their success continuation - the binding frame, and\n;; the remaining unmatched segment.\n;;\n;; The following two functions let us mark matcher combinators with this\n;; interface using their metadata.\n\n(defn as-segment-matcher\n  \"Takes a matcher and returns `f` with its metadata modified such\n  that [[segment-matcher?]] will return `true` when applied to `f`.\"\n  [f]\n  (vary-meta f assoc ::segment? true))\n\n(defn- segment-matcher?\n  \"Returns true if the supplied matcher `f` is a segment matcher, false\n  otherwise.\"\n  [f]\n  (::segment? (meta f) false))\n\n(defn segment\n  \"Takes a binding variable `sym` and returns a matcher that calls its success\n  continuation with successively longer prefixes of its (sequential) data input\n  bound to `sym` inside the frame.\n\n  If `sym` is already present in the frame, the returned matcher only succeeds\n  if the bound value is a prefix of the data argument `xs`.\n\n  If `sym` matches the wildcard symbol `_`, the behavior is the same, but no new\n  binding is introduced.\n\n  NOTE: the returned matcher will call its success continuation with TWO\n  arguments; the new frame and the remaining elements in `xs`. This is a\n  different contract than all other matchers, making `segment` appropriate for\n  use inside `sequence`.\"\n  [sym]\n  (as-segment-matcher\n   (fn segment-match [frame xs succeed]\n     (let [xs (core/or xs [])]\n       (when (sequential? xs)\n         (if-let [binding (core/and\n                           (core/not (s/wildcard? sym))\n                           (frame sym))]\n           (let [binding-count (count binding)]\n             (when (= (take binding-count xs) binding)\n               (succeed frame (drop binding-count xs))))\n           (loop [prefix []\n                  suffix xs]\n             (let [new-frame (if (s/wildcard? sym)\n                               frame\n                               (assoc frame sym prefix))]\n               (core/or (succeed new-frame suffix)\n                        (core/and (seq suffix)\n                                  (recur (conj prefix (first suffix))\n                                         (next suffix))))))))))))\n\n(defn- entire-segment\n  \"Similar to [[segment]], but matches the entire remaining sequential argument\n  `xs`. Fails if its input is not sequential, or `sym` is already bound to some\n  other variable or non-equal sequence.\n\n  If `sym` matches the wildcard symbol `_`, succeeds if `xs` is a sequence and\n  introduces NO new bindings.\n\n  Calls its continuation with the new frame and `nil`, always.\"\n  [sym]\n  (as-segment-matcher\n   (fn entire-segment-match [frame xs succeed]\n     (let [xs (core/or xs [])]\n       (when (sequential? xs)\n         (if (s/wildcard? sym)\n           (succeed frame nil)\n           (if-let [binding (frame sym)]\n             (when (= xs binding)\n               (succeed frame nil))\n             (succeed (assoc frame sym xs) nil))))))))\n\n(defn reverse-segment\n  \"Returns a matcher that takes a binding variable `sym`, and succeeds if it's\n  called with a sequential data argument with a prefix that is the REVERSE of\n  the sequence bound to `sym` in `frame`.\n\n  Fails if any of the following are true:\n\n  - `sym` is not bound in the frame\n  - `sym` is bound to something other than a vector prefix created by `segment`\n  - the data argument does not have a prefix matching the reverse of vector\n    bound to `sym`.\"\n  [sym]\n  (as-segment-matcher\n   (fn reverse-segment-match [frame xs succeed]\n     (let [xs (core/or xs [])]\n       (when (sequential? xs)\n         (when-let [binding (frame sym)]\n           (when (vector? binding)\n             (let [binding-count (count binding)\n                   reversed      (rseq binding)]\n               (when (= (take binding-count xs) reversed)\n                 (succeed frame (drop binding-count xs)))))))))))\n\n(defn sequence*\n  \"Version of [[sequence]] that takes an explicit sequence of `patterns`, vs the\n  multi-arity version. See [[sequence]] for documentation.\"\n  [patterns]\n  (fn sequence-match [frame xs succeed]\n    (when (sequential? xs)\n      (letfn [(step [frame items matchers]\n                (letfn [(try-elem [matcher]\n                          (matcher frame\n                                   (first items)\n                                   (fn [new-frame]\n                                     (step new-frame\n                                           (next items)\n                                           (next matchers)))))\n\n                        (try-segment [matcher]\n                          (matcher frame\n                                   items\n                                   (fn [new-frame new-xs]\n                                     (step new-frame\n                                           new-xs\n                                           (next matchers)))))]\n                  (cond matchers (let [m (first matchers)]\n                                   (if (segment-matcher? m)\n                                     (try-segment m)\n                                     (core/and (seq items)\n                                               (try-elem m))))\n\n                        (seq items) false\n                        :else (succeed frame))))]\n        (let [matchers (map pattern->combinators patterns)]\n          (step frame xs matchers))))))\n\n(defn sequence\n  \"Takes a sequence of patterns and returns a matcher that accepts a sequential\n  data input, and attempts to match successive items (or segments) in the\n  sequence with the supplied patterns.\n\n  The returned matcher succeeds if `patterns` can consume all elements, fails\n  otherwise (or of any of the supplied patterns fails on its argument).\n\n  On success, the returned matcher calls its success continuation with a frame\n  processed by each pattern in sequence.\"\n  [& patterns]\n  (sequence* patterns))\n\n;; ## Pattern Matching Compiler\n;;\n;; The next function transforms a pattern (as defined by `pattern.syntax`) into\n;; a matcher combinator. Any function you pass to [[pattern->combinators]] is\n;; returned, so it's appropriate to pass other matcher combinators as pattern\n;; elements.\n\n(defn pattern->combinators\n  \"Given a pattern (built using the syntax elements described in\n  `pattern.syntax`), returns a matcher combinator that will successfully match\n  data structures described by the input pattern, and fail otherwise.\"\n  [pattern]\n  (cond (fn? pattern) pattern\n\n        (s/binding? pattern)\n        (bind (s/variable-name pattern)\n              (s/restriction pattern))\n\n        (s/segment? pattern)\n        (segment (s/variable-name pattern))\n\n        (s/reverse-segment? pattern)\n        (reverse-segment (s/reverse-segment-name pattern))\n\n        (s/wildcard? pattern) pass\n\n        (core/or (seq? pattern)\n                 (vector? pattern))\n        (if (empty? pattern)\n          (eq pattern)\n          (sequence*\n           (concat (map pattern->combinators (butlast pattern))\n                   (let [p (last pattern)]\n                     [(if (s/segment? p)\n                        (entire-segment (s/variable-name p))\n                        (pattern->combinators p))]))))\n\n        :else (eq pattern)))\n\n;; This concludes the matcher combinator section of our program. On to the next\n;; act: the \"matcher\"!\n;;\n;;\n;; ## Top Level Matchers\n;;\n;; Once you've built up a combinator out of smaller matcher combinators, you can\n;; turn your combinator into a \"matcher\". This is a function from a data object\n;; to either:\n;;\n;; - the binding map, if successful\n;; - if failed, a special `failure` singleton object.\n;;\n;; This interface will become important in `sicmutils.rule`, for building up\n;; groups of rules that can, say, search for the first successful matcher of\n;; many, or accumulate binding maps from matchers run in sequence until one\n;; fails.\n;;\n;; The next few functions define this explicit `failure` singleton.\n\n\n(defrecord Failure [])\n\n(def ^{:doc \"Singleton object representing the failure of a matcher to match its\n  input. Check for failure with [[failed?]]\"}\n  failure\n  (Failure.))\n\n(defn failed?\n  \"Returns true if `x` is equivalent to the failure sentinel [[failure]], false\n  otherwise.\"\n  [x]\n  (instance? Failure x))\n\n(defn matcher\n  \"Takes a `pattern` or matcher combinator, and returns a function from a data\n  object to either:\n\n  - A successful map of bindings extracted by matching the supplied `pattern` or\n    combinator to the input data\n  - An explicit `failure` object\n\n  Check for failure with [[failed?]].\n\n  Optionally, you can supply a predicate `pred`. `pred` takes the map of\n  bindings from a successful match and returns either:\n\n  - `nil`, `false` or the explicit `failure` object to force a match failure,\n    potentially causing a backtrack back into the data\n  - a map of NEW bindings to merge into the binding map (and signal success)\n\n  Any other truthy value signals success with no new bindings.\"\n  ([pattern]\n   (let [match (pattern->combinators pattern)]\n     (fn [data]\n       (core/or (match {} data identity)\n                failure))))\n  ([pattern pred]\n   (let [match (pattern->combinators pattern)\n         success (fn [frame]\n                   (when-let [m (pred frame)]\n                     (when (and m (not (failed? m)))\n                       (if (map? m)\n                         (merge frame m)\n                         frame))))]\n     (fn [data]\n       (core/or (match {} data success)\n                failure)))))\n\n(defn match\n  \"Convenience function that creates a matcher from the supplied `pattern` (and\n  optional predicate `pred`) and immediately applies it to `data`.\n\n  Equivalent to:\n\n  ```clojure\n  ((matcher pattern pred) data)\n  ```\"\n  ([pattern data]\n   ((matcher pattern) data))\n  ([pattern pred data]\n   ((matcher pattern pred) data)))\n\n(defn foreach-matcher\n  \"Takes a `pattern` and side-effecting callback function `f`, and returns a\n  matcher that calls `f` with a map of bindings for every possible match of\n  `pattern` to its input data.\n\n  For a convenience function that applies the matcher to data immediately,\n  see [[foreach]].\n\n  NOTE: If you pass a segment matcher, `f` must accept two arguments - the\n  binding map, and the sequence of all remaining items that the segment\n  matcher rejected.\"\n  [pattern f]\n  (let [match (pattern->combinators pattern)\n        cont (fn ([frame]\n                 (f frame)\n                 false)\n               ([frame xs]\n                (f frame xs)\n                false))]\n    (fn [data]\n      (match {} data cont))))\n\n(defn foreach\n  \"Convenience function that creates a [[foreach-matcher]] from the supplied\n  `pattern` and callback `f` and immediately applies it to `data`.\n\n  Equivalent to:\n\n  ```clojure\n  ((foreach-matcher pattern pred) data)\n  ```\"\n  [pattern f data]\n  ((foreach-matcher pattern f) data))\n\n(defn all-results-matcher\n  \"Takes a `pattern` and callback function `f`, and returns a matcher that takes a\n  `data` argument and returns a sequence of every possible match of `pattern` to\n  the data.\n\n  For a convenience function that applies the matcher to data immediately,\n  see [[all-results]].\n\n  NOTE: If you pass a segment matcher, `f` must accept two arguments - the\n  binding map, and the sequence of all remaining items that the segment\n  matcher rejected.\"\n  [pattern]\n  (let [match (pattern->combinators pattern)]\n    (fn [data]\n      (let [results (atom [])\n            cont (fn\n                   ([frame]\n                    (swap! results conj frame)\n                    false)\n                   ([frame xs]\n                    (swap! results conj [frame xs])\n                    false))]\n        (match {} data cont)\n        @results))))\n\n(defn all-results\n  \"Convenience function that creates an [[all-results-matcher]] from the supplied\n  `pattern` and immediately applies it to `data`.\n\n  Equivalent to:\n\n  ```clojure\n  ((all-results-matcher pattern pred) data)\n  ```\"\n  [pattern data]\n  ((all-results-matcher pattern) data))\n"]}