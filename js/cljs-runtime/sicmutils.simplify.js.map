{"version":3,"sources":["sicmutils/simplify.cljc"],"mappings":"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","names":["sicmutils.simplify/unless-timeout","f","x","e100770","js/Error","_","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","sicmutils.simplify/poly-analyzer","gensym","sicmutils.expression.analyze/monotonic-symbol-generator","sicmutils.expression.analyze.make_analyzer","sicmutils.polynomial/analyzer","sicmutils.simplify/rational-function-analyzer","sicmutils.rational-function/analyzer","sicmutils.simplify/*poly-simplify*","cljs.core/memoize","sicmutils.expression.analyze/expression-simplifier","sicmutils.simplify/*rf-simplify*","sicmutils.simplify/hermetic-simplify-fixture","thunk","*rf-simplify*-orig-val__100771","*poly-simplify*-orig-val__100772","*rf-simplify*-temp-val__100773","*poly-simplify*-temp-val__100774","sicmutils.simplify/simplify-and-flatten","expr","sicmutils.simplify/simplify-until-stable","rule-simplify","canonicalize","new-expr","cljs.core._EQ_","canonicalized-expr","sicmutils.value/zero?","cljs.core/List","sicmutils.simplify/simplify-and-canonicalize","sicmutils.simplify/clear-square-roots-of-perfect-squares","cljs.core.comp","sicmutils.simplify.rules/universal-reductions","sicmutils.polynomial.factor/root-out-squares","sicmutils.simplify/only-if","bool","cljs.core/identity","universal-reductions","sqrt-contract","sicmutils.simplify.rules/sqrt-contract","sqrt-expand","sicmutils.simplify.rules/sqrt-expand","log-contract","sicmutils.simplify.rules/log-contract","sincos-random","sicmutils.simplify.rules/sincos-random","sincos-flush-ones","sicmutils.simplify.rules/sincos-flush-ones","sicmutils.simplify/simplify-expression","syms","sicmutils.expression/variables-in","sqrt?","sicmutils.simplify.rules/occurs-in?","full-sqrt?","and__4251__auto__","sicmutils.simplify.rules/*sqrt-factor-simplify?*","logexp?","trig?","partials?","simple","sicmutils.simplify.rules/*divide-numbers-through-simplify?*","sicmutils.simplify.rules/divide-numbers-through","sicmutils.simplify.rules/sincos->trig","sicmutils.simplify.rules/complex-trig","sicmutils.simplify.rules/angular-parity","sicmutils.simplify.rules/sin-sq->cos-sq","sicmutils.simplify.rules/*trig-product-to-sum-simplify?*","sicmutils.simplify.rules/trig:product->sum","sicmutils.simplify.rules/log-expand","sicmutils.simplify.rules/exp-expand","sicmutils.simplify.rules/exp-contract","sicmutils.simplify.rules/trig->sincos","sicmutils.simplify.rules/canonicalize-partials"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.simplify\n  (:require [sicmutils.expression :as x]\n            [sicmutils.expression.analyze :as a]\n            [sicmutils.polynomial :as poly]\n            [sicmutils.polynomial.factor :as factor]\n            [sicmutils.rational-function :as rf]\n            [sicmutils.simplify.rules :as rules]\n            [sicmutils.value :as v]\n            [taoensso.timbre :as log])\n  #?(:clj\n     (:import (java.util.concurrent TimeoutException))))\n\n(defn- unless-timeout\n  \"Returns a function that invokes f, but catches TimeoutException;\n  if that exception is caught, then x is returned in lieu of (f x).\"\n  [f]\n  (fn [x]\n    (try (f x)\n         (catch #?(:clj TimeoutException :cljs js/Error) _\n           (log/warn\n            (str \"simplifier timed out: must have been a complicated expression\"))\n           x))))\n\n(defn ^:no-doc poly-analyzer\n  \"An analyzer capable of simplifying sums and products, but unable to cancel\n  across the fraction bar.\n  NOTE: I think this is fpf:analyzer in the scheme code.\"\n  []\n  (let [gensym (a/monotonic-symbol-generator \"-s-\")]\n    (a/make-analyzer poly/analyzer gensym)))\n\n(defn ^:no-doc rational-function-analyzer\n  \"An analyzer capable of simplifying expressions built out of rational\n  functions.\n  NOTE: This is rcf:analyzer.\"\n  []\n  (let [gensym (a/monotonic-symbol-generator \"-r-\")]\n    (a/make-analyzer rf/analyzer gensym)))\n\n(def ^:dynamic *poly-simplify*\n  (memoize\n   (a/expression-simplifier\n    (poly-analyzer))))\n\n(def ^:dynamic *rf-simplify*\n  (unless-timeout\n   (memoize\n    (a/expression-simplifier\n     (rational-function-analyzer)))))\n\n(defn hermetic-simplify-fixture\n  \"Returns the result of executing the supplied `thunk` in an environment where\n  the [[*rf-simplify*]] and [[*poly-simplify*]] are not memoized.\"\n  [thunk]\n  (binding [*rf-simplify* (unless-timeout\n                           (a/expression-simplifier\n                            (rational-function-analyzer)))\n            *poly-simplify* (unless-timeout\n                             (a/expression-simplifier\n                              (poly-analyzer)))]\n    (thunk)))\n\n(defn- simplify-and-flatten [expr]\n  (*poly-simplify*\n   (*rf-simplify* expr)))\n\n(defn- simplify-until-stable\n  [rule-simplify canonicalize]\n  (fn [expr]\n    (let [new-expr (rule-simplify expr)]\n      (if (= expr new-expr)\n        expr\n        (let [canonicalized-expr (canonicalize new-expr)]\n          (cond (= canonicalized-expr expr) expr\n                (v/zero?\n                 (*poly-simplify*\n                  (list '- expr canonicalized-expr)))\n                canonicalized-expr\n                :else (recur canonicalized-expr)))))))\n\n(defn- simplify-and-canonicalize\n  [rule-simplify canonicalize]\n  (fn [expr]\n    (let [new-expr (rule-simplify expr)]\n      (if (= expr new-expr)\n        expr\n        (canonicalize new-expr)))))\n\n(def ^:private clear-square-roots-of-perfect-squares\n  (-> (comp (rules/universal-reductions #'*rf-simplify*)\n            factor/root-out-squares)\n      (simplify-and-canonicalize simplify-and-flatten)))\n\n(defn- only-if\n  \"If the supplied `bool` is true, returns `f`, else returns `identity`.\"\n  [bool f]\n  (if bool\n    f\n    identity))\n\n(let [universal-reductions (rules/universal-reductions #'*rf-simplify*)\n      sqrt-contract (rules/sqrt-contract #'*rf-simplify*)\n      sqrt-expand (rules/sqrt-expand #'*rf-simplify*)\n      log-contract (rules/log-contract #'*rf-simplify*)\n      sincos-random (rules/sincos-random #'*rf-simplify*)\n      sincos-flush-ones (rules/sincos-flush-ones #'*rf-simplify*)]\n\n  (defn simplify-expression\n    \"Simplifies an expression representing a complex number. TODO say more!\"\n    [expr]\n    (let [syms (x/variables-in expr)\n          sqrt? (rules/occurs-in? #{'sqrt} syms)\n          full-sqrt? (and rules/*sqrt-factor-simplify?*\n                          (rules/occurs-in? #{'sqrt} syms))\n\n          logexp? (rules/occurs-in? #{'log 'exp} syms)\n          trig? (rules/occurs-in? #{'sin 'cos 'tan 'cot 'sec 'csc} syms)\n          partials? (rules/occurs-in? #{'partial} syms)\n          simple\n          (comp (only-if rules/*divide-numbers-through-simplify?*\n                         rules/divide-numbers-through)\n\n                (only-if sqrt? clear-square-roots-of-perfect-squares)\n\n                (only-if full-sqrt?\n                         (comp (-> (comp universal-reductions sqrt-expand)\n                                   (simplify-until-stable simplify-and-flatten))\n                               clear-square-roots-of-perfect-squares\n                               (-> sqrt-contract\n                                   (simplify-until-stable simplify-and-flatten))))\n\n                (only-if trig?\n                         (comp (-> (comp universal-reductions rules/sincos->trig)\n                                   (simplify-and-canonicalize simplify-and-flatten))\n                               (-> rules/complex-trig\n                                   (simplify-and-canonicalize simplify-and-flatten))\n                               (-> rules/angular-parity\n                                   (simplify-and-canonicalize simplify-and-flatten))\n                               (-> sincos-random\n                                   (simplify-until-stable simplify-and-flatten))\n                               (-> rules/sin-sq->cos-sq\n                                   (simplify-and-canonicalize simplify-and-flatten))\n                               (-> sincos-flush-ones\n                                   (simplify-and-canonicalize simplify-and-flatten))\n\n                               (only-if rules/*trig-product-to-sum-simplify?*\n                                        (-> rules/trig:product->sum\n                                            (simplify-and-canonicalize simplify-and-flatten)))\n\n                               (-> universal-reductions\n                                   (simplify-and-canonicalize simplify-and-flatten))\n                               (-> sincos-random\n                                   (simplify-until-stable simplify-and-flatten))\n                               (-> rules/sin-sq->cos-sq\n                                   (simplify-and-canonicalize simplify-and-flatten))\n                               (-> sincos-flush-ones\n                                   (simplify-and-canonicalize simplify-and-flatten))))\n\n                (only-if logexp?\n                         (comp (-> universal-reductions\n                                   (simplify-and-canonicalize simplify-and-flatten))\n                               (-> (comp rules/log-expand\n                                         rules/exp-expand)\n                                   (simplify-until-stable simplify-and-flatten))\n                               (-> (comp log-contract\n                                         rules/exp-contract)\n                                   (simplify-until-stable simplify-and-flatten))))\n\n                (-> (comp universal-reductions\n                          (only-if logexp?\n                                   (comp rules/log-expand\n                                         rules/exp-expand))\n                          (only-if sqrt?\n                                   sqrt-expand))\n                    (simplify-until-stable simplify-and-flatten))\n\n                (only-if trig?\n                         (-> rules/angular-parity\n                             (simplify-and-canonicalize simplify-and-flatten)))\n\n                (-> rules/trig->sincos\n                    (simplify-and-canonicalize simplify-and-flatten))\n\n                ;; TODO this should happen at the END, only a single time, after\n                ;; everything else is done. It's not right to get operator\n                ;; multiplication going and then attempt to canonicalize the\n                ;; expression, even if it sort of works.\n                (only-if partials?\n                         (-> rules/canonicalize-partials\n                             (simplify-and-canonicalize simplify-and-flatten)))\n                simplify-and-flatten)]\n      (simple expr))))\n"]}