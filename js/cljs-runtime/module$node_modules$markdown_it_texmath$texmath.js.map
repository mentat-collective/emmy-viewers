{
"version":3,
"file":"module$node_modules$markdown_it_texmath$texmath.js",
"lineCount":13,
"mappings":"AAAAA,cAAA,CAAA,+CAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO5GC,QAASA,WAAU,CAACC,IAAD,CAAO,CACtB,MAAOA,KACFC,CAAAA,OADE,CACM,IADN,CACY,UADZ,CAEFA,CAAAA,OAFE,CAEM,IAFN,CAEY,SAFZ,CAGFA,CAAAA,OAHE,CAGM,IAHN,CAGY,SAHZ,CAIFA,CAAAA,OAJE,CAIM,IAJN,CAIY,WAJZ,CAKFA,CAAAA,OALE,CAKM,IALN,CAKY,WALZ,CADe,CAS1BC,QAASA,QAAO,CAACC,EAAD,CAAKC,OAAL,CAAc,CAC1B,MAAMC,WAAaD,OAAbC,EAAwBD,OAAQC,CAAAA,UAAhCA,EAA8C,SAApD,CACMC,WAAaF,OAAbE,EAAwBF,OAAQE,CAAAA,UAAhCA,EAA8C,CAAA,CADpD,CAEMC,aAAeH,OAAfG,EAA0BH,OAAQG,CAAAA,YAAlCA,EAAkD,EACxDA,aAAaC,CAAAA,YAAb,CAA4BD,YAAaC,CAAAA,YAAzC,EAAyD,CAAA,CACzDD,aAAaE,CAAAA,MAAb;AAAsBF,YAAaE,CAAAA,MAAnC,EAA6CL,OAA7C,EAAwDA,OAAQK,CAAAA,MAE3DP,QAAQQ,CAAAA,KAAb,GAEQR,OAAQQ,CAAAA,KAFhB,CACQN,OAAJ,EAAyC,QAAzC,GAAe,MAAOA,QAAQO,CAAAA,MAA9B,CACoBP,OAAQO,CAAAA,MAD5B,CAG2B,QAAtB,GAAI,MAAOd,OAAX,CACeD,OAAA,CAAQ,sCAAR,CADf,CAGe,CAAEgB,cAAc,EAAG,CAAE,MAAO,yBAAT,CAAnB,CAPxB,CAUA,IAAIP,UAAJ,GAAkBH,QAAQW,CAAAA,KAA1B,CAAiC,CAC7B,IAAK,MAAMC,IAAX,GAAmBZ,QAAQW,CAAAA,KAAR,CAAcR,UAAd,CAA0BU,CAAAA,MAA7C,CACUT,UAEN,EAFoB,YAEpB,EAFoCQ,KAEpC,GAF0CA,IAAKR,CAAAA,UAE/C,CAF4D,CAAA,CAE5D,EADAH,EAAGY,CAAAA,MAAOC,CAAAA,KAAMC,CAAAA,MAAhB,CAAuB,QAAvB,CAAiCH,IAAKI,CAAAA,IAAtC,CAA4ChB,OAAQa,CAAAA,MAAR,CAAeD,IAAf,CAA5C,CACA,CAAAX,EAAGgB,CAAAA,QAASN,CAAAA,KAAZ,CAAkBC,IAAKI,CAAAA,IAAvB,CAAA,CAA+B,CAACE,MAAD,CAASC,GAAT,CAAA;AAAiBP,IAAKQ,CAAAA,IAAKrB,CAAAA,OAAV,CAAkB,KAAlB,CAAwBC,OAAQqB,CAAAA,MAAR,CAAeH,MAAA,CAAOC,GAAP,CAAYG,CAAAA,OAA3B,CAAmC,CAAC,CAACV,IAAKW,CAAAA,WAA1C,CAAsDlB,YAAtD,CAAxB,CAGpD,KAAK,MAAMO,IAAX,GAAmBZ,QAAQW,CAAAA,KAAR,CAAcR,UAAd,CAA0BqB,CAAAA,KAA7C,CACIvB,EAAGuB,CAAAA,KAAMV,CAAAA,KAAMC,CAAAA,MAAf,CAAsB,OAAtB,CAA+BH,IAAKI,CAAAA,IAApC,CAA0ChB,OAAQwB,CAAAA,KAAR,CAAcZ,IAAd,CAA1C,CACA,CAAAX,EAAGgB,CAAAA,QAASN,CAAAA,KAAZ,CAAkBC,IAAKI,CAAAA,IAAvB,CAAA,CAA+B,CAACE,MAAD,CAASC,GAAT,CAAA,EAAiBP,IAAKQ,CAAAA,IAAKrB,CAAAA,OAAV,CAAkB,KAAlB,CAAwBF,UAAA,CAAWqB,MAAA,CAAOC,GAAP,CAAYM,CAAAA,IAAvB,CAAxB,CACU1B,CAAAA,OADV,CACkB,KADlB,CACwBC,OAAQqB,CAAAA,MAAR,CAAeH,MAAA,CAAOC,GAAP,CAAYG,CAAAA,OAA3B,CAAmC,CAAA,CAAnC,CAAwCjB,YAAxC,CADxB,CATvB,CAjBP,CAkC9BL,OAAQa,CAAAA,MAAR,CAAkBD,IAADc,EACb,QAAQ,CAACC,KAAD,CAAQC,MAAR,CAAgB,CACpB,IAAMC,IAAMF,KAAME,CAAAA,GAClB,OAAMC,IAAMH,KAAMI,CAAAA,GAAlB,CAEMC,MADMF,GAAIG,CAAAA,UAAJ,CAAerB,IAAKsB,CAAAA,GAApB,CAAyBtB,IAAKuB,CAAAA,GAAIC,CAAAA,SAAlC,CAA8CP,GAA9C,CACNG;CAD6D,CAACpB,IAAKyB,CAAAA,GACnEL,EAD0EpB,IAAKyB,CAAAA,GAAL,CAASP,GAAT,CAAclB,IAAKR,CAAAA,UAAnB,CAA+ByB,GAA/B,CAC1EG,GAAepB,IAAKuB,CAAAA,GAAIG,CAAAA,IAAT,CAAcR,GAAd,CAGrB,IAFMS,GAEN,CAFY,CAAC,CAACP,KAEd,EAFuBH,GAEvB,CAF6BjB,IAAKuB,CAAAA,GAAIC,CAAAA,SAEtC,GAFoD,CAACxB,IAAK4B,CAAAA,IAE1D,EAFkE5B,IAAK4B,CAAAA,IAAL,CAAUV,GAAV,CAAelB,IAAKR,CAAAA,UAApB,CAAgCQ,IAAKuB,CAAAA,GAAIC,CAAAA,SAAzC,CAAqD,CAArD,CAElE,EACSR,MAKL,GAJUa,MAEN,CAFcd,KAAMe,CAAAA,IAAN,CAAW9B,IAAKI,CAAAA,IAAhB,CAAsB,MAAtB,CAA8B,CAA9B,CAEd,CADAyB,MAAMnB,CAAAA,OACN,CADgBU,KAAA,CAAM,CAAN,CAChB,CAAAS,MAAME,CAAAA,MAAN,CAAe/B,IAAKsB,CAAAA,GAExB,EAAAP,KAAME,CAAAA,GAAN,CAAYjB,IAAKuB,CAAAA,GAAIC,CAAAA,SAEzB,OAAOG,IAfa,CAkB5BvC,QAAQwB,CAAAA,KAAR,CAAiBZ,IAADgC,EACZpB,QAAcA,CAACG,KAADH,CAAQqB,OAARrB,CAAiBsB,OAAjBtB,CAA0BI,MAA1BJ,CAAkCA,CAC5CA,IAAMK,IAAMF,KAAMoB,CAAAA,MAANvB,CAAaqB,OAAbrB,CAANK,CAA8BF,KAAMqB,CAAAA,MAANxB,CAAaqB,OAAbrB,CAApCA,CACMM,IAAMH,KAAMI,CAAAA,GAElBP,OAAMQ,MADMF,GAAIG,CAAAA,UAAJT,CAAeZ,IAAKsB,CAAAA,GAApBV,CAAyBZ,IAAKuB,CAAAA,GAAIC,CAAAA,SAAlCZ,CAA8CK,GAA9CL,CACNQ,GAD6DR,CAACZ,IAAKyB,CAAAA,GACnEL;AAD0EpB,IAAKyB,CAAAA,GAALb,CAASM,GAATN,CAAcA,CAAAA,CAAdA,CAAqBK,GAArBL,CAC1EQ,GAAepB,IAAKuB,CAAAA,GAAIG,CAAAA,IAATd,CAAcM,GAAdN,CAKrBA,KAJMe,GAINf,CAJYA,CAACA,CAACQ,KAIdR,EAHYK,GAGZL,CAHkBZ,IAAKuB,CAAAA,GAAIC,CAAAA,SAG3BZ,GAFaA,CAACZ,IAAK4B,CAAAA,IAEnBhB,EAF2BZ,IAAK4B,CAAAA,IAALhB,CAAUM,GAAVN,CAAeA,CAAAA,CAAfA,CAAsBZ,IAAKuB,CAAAA,GAAIC,CAAAA,SAA/BZ,CAA2CA,CAA3CA,CAE3BA,IAAWA,CAACI,MAAZJ,CAAoBA,CACVyB,GAAAA,CAASrC,IAAKuB,CAAAA,GAAIC,CAAAA,SAAlBa,CAA8BzB,CAGpCA,KAAK0B,MAAL1B,CAAeqB,OAAfrB,CAAwB0B,MAAxB1B,CAAkCsB,OAAlCtB,EACQA,EAAAyB,GAAAzB,EAAUG,KAAMoB,CAAAA,MAANvB,CAAa0B,MAAb1B,CAAVA,CAAkCG,KAAMqB,CAAAA,MAANxB,CAAa0B,MAAb1B,CAAlCA,EAA2DyB,GAA3DzB,EAAqEG,KAAMwB,CAAAA,MAAN3B,CAAa0B,MAAb1B,CAArEA,CADRA,CAA2C0B,MAAA1B,EAA3CA,EAMM4B,OAAAA,CAAUzB,KAAMyB,CAAAA,OAChBC,IAAAA,CAAa1B,KAAM0B,CAAAA,UACzB1B,MAAMyB,CAAAA,OAAN5B,CAAgB0B,MAChBvB,MAAM0B,CAAAA,UAAN7B,CAAmBA,MAEAA,aAAnBA,GAAI6B,GAAJ7B,GACIQ,KAAAR,CAAMA,CAANA,CADJA,CACeQ,KAAAR,CAAMA,CAANA,CAASzB,CAAAA,OAATyB,CAAiBA,oBAAjBA,CAAsCA,EAAtCA,CADfA,CAGAA,KAAIiB,MAAQd,KAAMe,CAAAA,IAANlB,CAAWZ,IAAKI,CAAAA,IAAhBQ,CAAsBA,MAAtBA,CAA8BA,CAA9BA,CACZiB,MAAMjB,CAAAA,KAANA;AAAcA,CAAAA,CACdiB,MAAME,CAAAA,MAANnB,CAAeZ,IAAKsB,CAAAA,GACpBO,MAAMnB,CAAAA,OAANE,CAAgBQ,KAAAR,CAAMA,CAANA,CAChBiB,MAAMhB,CAAAA,IAAND,CAAaQ,KAAAR,CAAMQ,KAAMsB,CAAAA,MAAZ9B,CAAmBA,CAAnBA,CACbiB,MAAMc,CAAAA,GAAN/B,CAAYA,CAAEqB,OAAFrB,CAAW0B,MAAX1B,CAEZiB,MAAAjB,CAAQG,KAAMe,CAAAA,IAANlB,CAAWZ,IAAKI,CAAAA,IAAhBQ,CAAqBA,MAArBA,CAA6BA,MAA7BA,CAAqCA,CAACA,CAAtCA,CACRiB,MAAMjB,CAAAA,KAANA,CAAeA,CAAAA,CACfiB,MAAME,CAAAA,MAANnB,CAAeZ,IAAKsB,CAAAA,GAEpBP,MAAM0B,CAAAA,UAAN7B,CAAmB6B,GACnB1B,MAAMyB,CAAAA,OAAN5B,CAAgB4B,OAChBzB,MAAM6B,CAAAA,IAANhC,CAAa0B,MAAb1B,CAAqBA,CA/BLA,CAiCpBA,MAAOe,IA1CqCf,CA6CpDxB,QAAQqB,CAAAA,MAAR,CAAiBoC,QAAQ,CAACC,GAAD,CAAKnC,WAAL,CAAiBrB,OAAjB,CAA0B,CAC/CA,OAAQqB,CAAAA,WAAR,CAAsBA,WACtB,KAAIgB,GACJ,IAAI,CACAA,GAAA,CAAMvC,OAAQQ,CAAAA,KAAME,CAAAA,cAAd,CAA6BgD,GAA7B,CAAkCxD,OAAlC,CADN,CAGJ,MAAMyD,GAAN,CAAW,CACPpB,GAAA,CAAM1C,UAAA,CAAW,GAAG6D,GAAH,IAAUC,GAAIC,CAAAA,OAAd,EAAX,CADC,CAGX,MAAOrB,IATwC,CAanDvC,QAAQ6D,CAAAA,GAAR,CAAcC,QAAQ,CAACtD,KAAD,CAAQ,CAC1BR,OAAQQ,CAAAA,KAAR;AAAgBA,KAChB,OAAOR,QAFmB,CAgD9BA,QAAQ+D,CAAAA,eAAR,CAA0B,CAAC,aAAD,CAAe,oBAAf,CAC1B/D,QAAQgE,CAAAA,cAAR,CAA0B,CAAC,YAAD,CAAc,iBAAd,CAE1BhE,QAAQiE,CAAAA,KAAR,CAAgB,CAACnC,GAAD,CAAK1B,UAAL,CAAgB8D,GAAhB,CAAAC,EAAwB,CAC9BC,GAAAA,CAAY,CAAN,CAAAF,GAAA,CAAUpC,GAAA,CAAIoC,GAAJ,CAAQ,CAAR,CAAWG,CAAAA,UAAX,CAAsB,CAAtB,CAAV,CAAqC,CAAA,CACjD,OAAOjE,WAAA,CAAa,CAACgE,GAAd,EAA6B,EAA7B,GAAqBA,GAArB,CACa,CAACA,GADd,EAC6B,EAD7B,GACqBA,GADrB,GAE4B,EAF5B,CAEsBA,GAFtB,EAE0C,EAF1C,CAEoCA,GAFpC,CAF6B,CAMxCpE,QAAQsE,CAAAA,MAAR,CAAiB,CAACxC,GAAD,CAAK1B,UAAL,CAAgBmE,GAAhB,CAAAC,EAAwB,CAC/BC,GAAAA,CAAM3C,GAAA,CAAIyC,GAAJ,CAAQ,CAAR,CAANE,EAAoB3C,GAAA,CAAIyC,GAAJ,CAAQ,CAAR,CAAWF,CAAAA,UAAX,CAAsB,CAAtB,CAC1B,OAAOjE,WAAA,CAAa,CAACqE,GAAd,EAA6B,EAA7B,GAAqBA,GAArB,EAC6B,EAD7B,GACqBA,GADrB,EAE6B,EAF7B,GAEqBA,GAFrB,EAG6B,EAH7B,GAGqBA,GAHrB,CAIa,CAACA,GAJd,EAI2B,EAJ3B,CAIqBA,GAJrB,EAIyC,EAJzC,CAImCA,GANL,CASzCzE,QAAQW,CAAAA,KAAR,CAAgB,CACZ+D,SAAU,CACN7D,OAAQ,CACJ,CAAIG,KAAM,aAAV,CACImB,IAAK,iBADT;AAEIf,KAAM,yBAFV,CAGIc,IAAK,KAHT,CADI,CADF,CAQNV,MAAO,CACH,CAAIR,KAAM,iBAAV,CACImB,IAAK,2DADT,CAEIf,KAAM,uGAFV,CAGIc,IAAK,KAHT,CADG,CAMH,CAAIlB,KAAM,YAAV,CACImB,IAAK,uBADT,CAEIf,KAAM,0DAFV,CAGIc,IAAK,KAHT,CANG,CARD,CADE,CAsBZyC,OAAQ,CACJ9D,OAAQ,CACJ,CAAIG,KAAM,aAAV,CACImB,IAAK,eADT,CAEIf,KAAM,yBAFV,CAGIc,IAAK,IAHT,CADI,CADJ,CAQJV,MAAO,CACH,CAAIR,KAAM,iBAAV;AACImB,IAAK,kDADT,CAEIf,KAAM,uGAFV,CAGIc,IAAK,SAHT,CADG,CAMH,CAAIlB,KAAM,YAAV,CACImB,IAAK,8BADT,CAEIf,KAAM,0DAFV,CAGIc,IAAK,SAHT,CANG,CARH,CAtBI,CA2CZ0C,MAAO,CACH/D,OAAQ,CACJ,CAAIG,KAAM,aAAV,CACImB,IAAK,oBADT,CAEIf,KAAM,yBAFV,CAGIc,IAAK,IAHT,CADI,CAMJ,CAAIlB,KAAM,aAAV,CACImB,IAAK,6BADT,CAEIf,KAAM,yBAFV,CAGIc,IAAK,GAHT;AAII2C,cAAe,CAAA,CAJnB,CAKIxC,IAAKrC,OAAQiE,CAAAA,KALjB,CAMIzB,KAAMxC,OAAQsE,CAAAA,MANlB,CANI,CADL,CAiBH9C,MAAO,CACH,CAAIR,KAAM,iBAAV,CACImB,IAAK,sDADT,CAEIf,KAAM,uGAFV,CAGIc,IAAK,SAHT,CADG,CAMH,CAAIlB,KAAM,YAAV,CACImB,IAAK,iCADT,CAEIf,KAAM,0DAFV,CAGIc,IAAK,SAHT,CANG,CAjBJ,CA3CK,CAyEZ4C,SAAU,CACNjE,OAAQ,CACJ,CAAIG,KAAM,aAAV,CACImB,IAAK,mBADT,CAEIf,KAAM,yBAFV;AAGIc,IAAK,IAHT,CADI,CADF,CAQNV,MAAO,CACH,CAAIR,KAAM,iBAAV,CACImB,IAAK,yCADT,CAEIf,KAAM,uGAFV,CAGIc,IAAK,IAHT,CADG,CAMH,CAAIlB,KAAM,YAAV,CACImB,IAAK,uBADT,CAEIf,KAAM,0DAFV,CAGIc,IAAK,IAHT,CANG,CARD,CAzEE,CA8FZ6C,QAAS,CACLlE,OAAQ,CACJ,CAAIG,KAAM,oBAAV,CACImB,IAAK,kCADT,CAEIf,KAAM,0DAFV,CAGIc,IAAK,IAHT,CAIIX,YAAa,CAAA,CAJjB;AAKIc,IAAKrC,OAAQiE,CAAAA,KALjB,CAMIzB,KAAMxC,OAAQsE,CAAAA,MANlB,CADI,CASJ,CAAItD,KAAM,aAAV,CACImB,IAAK,4BADT,CAEIf,KAAM,yBAFV,CAGIc,IAAK,GAHT,CAII9B,WAAY,CAAA,CAJhB,CAKIiC,IAAKrC,OAAQiE,CAAAA,KALjB,CAMIzB,KAAMxC,OAAQsE,CAAAA,MANlB,CATI,CADH,CAmBL9C,MAAO,CACH,CAAIR,KAAM,iBAAV,CACImB,IAAK,yCADT,CAEIf,KAAM,uGAFV,CAGIc,IAAK,IAHT,CADG,CAMH,CAAIlB,KAAM,YAAV,CACImB,IAAK,uBADT,CAEIf,KAAM,0DAFV,CAGIc,IAAK,IAHT,CANG,CAnBF,CA9FG,CAgIM;QAAtB,GAAI,MAAOvC,OAAX,EAAkCA,MAAOC,CAAAA,OAAzC,GACGD,MAAOC,CAAAA,OADV,CACoBI,OADpB,CAlU4G;",
"sources":["node_modules/markdown-it-texmath/texmath.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it_texmath$texmath\"] = function(global,require,module,exports) {\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Stefan Goessner - 2017-21. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n\r\nfunction escapeHTML(text) {\r\n    return text\r\n        .replace(/&/g, \"&amp;\")\r\n        .replace(/</g, \"&lt;\")\r\n        .replace(/>/g, \"&gt;\")\r\n        .replace(/\"/g, \"&quot;\")\r\n        .replace(/'/g, \"&#039;\");\r\n}\r\n\r\nfunction texmath(md, options) {\r\n    const delimiters = options && options.delimiters || 'dollars';\r\n    const outerSpace = options && options.outerSpace || false;         // inline rules, effectively `dollars` require surrounding spaces, i.e ` $\\psi$ `, to be accepted as inline formulas. This is primarily a guard against misinterpreting single `$`'s in normal markdown text (relevant for inline math only. Default: `false`, for backwards compatibility).\r\n    const katexOptions = options && options.katexOptions || {};\r\n    katexOptions.throwOnError = katexOptions.throwOnError || false; \r\n    katexOptions.macros = katexOptions.macros || options && options.macros;  // ensure backwards compatibility\r\n\r\n    if (!texmath.katex) { // else ... deprecated `use` method was used ...\r\n        if (options && typeof options.engine === 'object') {\r\n            texmath.katex = options.engine;\r\n        }\r\n        else if (typeof module === \"object\")\r\n            texmath.katex = require('katex');\r\n        else  // artifical error object.\r\n            texmath.katex = { renderToString() { return 'No math renderer found.' } };\r\n    }\r\n\r\n    if (delimiters in texmath.rules) {\r\n        for (const rule of texmath.rules[delimiters].inline) {\r\n            if (!!outerSpace && 'outerSpace' in rule) rule.outerSpace = true;\r\n            md.inline.ruler.before('escape', rule.name, texmath.inline(rule));  // ! important\r\n            md.renderer.rules[rule.name] = (tokens, idx) => rule.tmpl.replace(/\\$1/,texmath.render(tokens[idx].content,!!rule.displayMode,katexOptions));\r\n        }\r\n\r\n        for (const rule of texmath.rules[delimiters].block) {\r\n            md.block.ruler.before('fence', rule.name, texmath.block(rule));  // ! important for ```math delimiters\r\n            md.renderer.rules[rule.name] = (tokens, idx) => rule.tmpl.replace(/\\$2/,escapeHTML(tokens[idx].info))  // equation number .. ?\r\n                                                                     .replace(/\\$1/,texmath.render(tokens[idx].content,true,katexOptions));\r\n        }\r\n    }\r\n}\r\n\r\n// texmath.inline = (rule) => dollar;  // just for debugging/testing ..\r\n\r\ntexmath.inline = (rule) => \r\n    function(state, silent) {\r\n        const pos = state.pos;\r\n        const str = state.src;\r\n        const pre = str.startsWith(rule.tag, rule.rex.lastIndex = pos) && (!rule.pre || rule.pre(str, rule.outerSpace, pos));  // valid pre-condition ...\r\n        const match = pre && rule.rex.exec(str);\r\n        const res = !!match && pos < rule.rex.lastIndex && (!rule.post || rule.post(str, rule.outerSpace, rule.rex.lastIndex - 1));\r\n\r\n        if (res) { \r\n            if (!silent) {\r\n                const token = state.push(rule.name, 'math', 0);\r\n                token.content = match[1];\r\n                token.markup = rule.tag;\r\n            }\r\n            state.pos = rule.rex.lastIndex;\r\n        }\r\n        return res;\r\n    }\r\n\r\ntexmath.block = (rule) => \r\n    function block(state, begLine, endLine, silent) {\r\n        const pos = state.bMarks[begLine] + state.tShift[begLine];\r\n        const str = state.src;\r\n        const pre = str.startsWith(rule.tag, rule.rex.lastIndex = pos) && (!rule.pre || rule.pre(str, false, pos));  // valid pre-condition ....\r\n        const match = pre && rule.rex.exec(str);\r\n        const res = !!match\r\n                 && pos < rule.rex.lastIndex \r\n                 && (!rule.post || rule.post(str, false, rule.rex.lastIndex - 1));\r\n\r\n        if (res && !silent) {    // match and valid post-condition ...\r\n            const endpos = rule.rex.lastIndex - 1;\r\n            let curline;\r\n\r\n            for (curline = begLine; curline < endLine; curline++)\r\n                if (endpos >= state.bMarks[curline] + state.tShift[curline] && endpos <= state.eMarks[curline]) // line for end of block math found ...\r\n                    break;\r\n\r\n            // \"this will prevent lazy continuations from ever going past our end marker\"\r\n            // s. https://github.com/markdown-it/markdown-it-container/blob/master/index.js\r\n            const lineMax = state.lineMax;\r\n            const parentType = state.parentType;\r\n            state.lineMax = curline;\r\n            state.parentType = 'math';\r\n\r\n            if (parentType === 'blockquote') // remove all leading '>' inside multiline formula\r\n                match[1] = match[1].replace(/(\\n*?^(?:\\s*>)+)/gm,'');\r\n            // begin token\r\n            let token = state.push(rule.name, 'math', 1);  // 'math_block'\r\n            token.block = true;\r\n            token.markup = rule.tag;\r\n            token.content = match[1];\r\n            token.info = match[match.length-1];    // eq.no\r\n            token.map = [ begLine, curline ];\r\n            // end token\r\n            token = state.push(rule.name+'_end', 'math', -1);\r\n            token.block  = true;\r\n            token.markup = rule.tag;\r\n\r\n            state.parentType = parentType;\r\n            state.lineMax = lineMax;\r\n            state.line = curline+1;\r\n        }\r\n        return res;\r\n    }\r\n\r\ntexmath.render = function(tex,displayMode,options) {\r\n    options.displayMode = displayMode;\r\n    let res;\r\n    try {\r\n        res = texmath.katex.renderToString(tex, options);\r\n    }\r\n    catch(err) {\r\n        res = escapeHTML(`${tex}:${err.message}`)\r\n    }\r\n    return res;\r\n}\r\n\r\n// ! deprecated ... use options !\r\ntexmath.use = function(katex) {  // math renderer used ...\r\n    texmath.katex = katex;       // ... katex solely at current ...\r\n    return texmath;\r\n}\r\n\r\n/*\r\nfunction dollar(state, silent) {\r\n  var start, max, marker, matchStart, matchEnd, token,\r\n      pos = state.pos,\r\n      ch = state.src.charCodeAt(pos);\r\n\r\n  if (ch !== 0x24) { return false; }  // $\r\n\r\n  start = pos;\r\n  pos++;\r\n  max = state.posMax;\r\n\r\n  while (pos < max && state.src.charCodeAt(pos) === 0x24) { pos++; }\r\n\r\n  marker = state.src.slice(start, pos);\r\n\r\n  matchStart = matchEnd = pos;\r\n\r\n  while ((matchStart = state.src.indexOf('$', matchEnd)) !== -1) {\r\n    matchEnd = matchStart + 1;\r\n\r\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x24) { matchEnd++; }\r\n\r\n    if (matchEnd - matchStart === marker.length) {\r\n      if (!silent) {\r\n        token         = state.push('math_inline', 'math', 0);\r\n        token.markup  = marker;\r\n        token.content = state.src.slice(pos, matchStart)\r\n                                 .replace(/[ \\n]+/g, ' ')\r\n                                 .trim();\r\n      }\r\n      state.pos = matchEnd;\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if (!silent) { state.pending += marker; }\r\n  state.pos += marker.length;\r\n  return true;\r\n};\r\n*/\r\n\r\n// used for enable/disable math rendering by `markdown-it`\r\ntexmath.inlineRuleNames = ['math_inline','math_inline_double'];\r\ntexmath.blockRuleNames  = ['math_block','math_block_eqno'];\r\n\r\ntexmath.$_pre = (str,outerSpace,beg) => {\r\n    const prv = beg > 0 ? str[beg-1].charCodeAt(0) : false;\r\n    return outerSpace ? !prv || prv === 0x20           // space  (avoiding regex's for performance reasons)\r\n                      : !prv || prv !== 0x5c           // no backslash,\r\n                             && (prv < 0x30 || prv > 0x39); // no decimal digit .. before opening '$'\r\n}\r\ntexmath.$_post = (str,outerSpace,end) => {\r\n    const nxt = str[end+1] && str[end+1].charCodeAt(0);\r\n    return outerSpace ? !nxt || nxt === 0x20           // space  (avoiding regex's for performance reasons)\r\n                             || nxt === 0x2e           // '.'\r\n                             || nxt === 0x2c           // ','\r\n                             || nxt === 0x3b           // ';'\r\n                      : !nxt || nxt < 0x30 || nxt > 0x39;   // no decimal digit .. after closing '$'\r\n}\r\n\r\ntexmath.rules = {\r\n    brackets: {\r\n        inline: [ \r\n            {   name: 'math_inline',\r\n                rex: /\\\\\\((.+?)\\\\\\)/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '\\\\('\r\n            }\r\n        ],\r\n        block: [\r\n            {   name: 'math_block_eqno',\r\n                rex: /\\\\\\[(((?!\\\\\\]|\\\\\\[)[\\s\\S])+?)\\\\\\]\\s*?\\(([^)$\\r\\n]+?)\\)/gmy,\r\n                tmpl: '<section class=\"eqno\"><eqn>$1</eqn><span>($2)</span></section>',\r\n                tag: '\\\\['\r\n            },\r\n            {   name: 'math_block',\r\n                rex: /\\\\\\[([\\s\\S]+?)\\\\\\]/gmy,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '\\\\['\r\n            }\r\n        ]\r\n    },\r\n    gitlab: {\r\n        inline: [ \r\n            {   name: 'math_inline',\r\n                rex: /\\$`(.+?)`\\$/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '$`'\r\n            }\r\n        ],\r\n        block: [\r\n            {   name: 'math_block_eqno',\r\n                rex: /`{3}math\\s*([^`]+?)\\s*?`{3}\\s*\\(([^)\\r\\n]+?)\\)/gm,\r\n                tmpl: '<section class=\"eqno\"><eqn>$1</eqn><span>($2)</span></section>',\r\n                tag: '```math'\r\n            },\r\n            {   name: 'math_block',\r\n                rex: /`{3}math\\s*([^`]*?)\\s*`{3}/gm,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '```math'\r\n            }\r\n        ]\r\n    },\r\n    julia: {\r\n        inline: [ \r\n            {   name: 'math_inline', \r\n                rex: /`{2}([^`]+?)`{2}/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '``'\r\n            },\r\n            {   name: 'math_inline',\r\n                rex: /\\$((?:\\S?)|(?:\\S.*?\\S))\\$/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '$',\r\n                spaceEnclosed: false,\r\n                pre: texmath.$_pre,\r\n                post: texmath.$_post,\r\n\r\n            }\r\n        ],\r\n        block: [\r\n            {   name: 'math_block_eqno',\r\n                rex: /`{3}math\\s+?([^`]+?)\\s+?`{3}\\s*?\\(([^)$\\r\\n]+?)\\)/gmy,\r\n                tmpl: '<section class=\"eqno\"><eqn>$1</eqn><span>($2)</span></section>',\r\n                tag: '```math'\r\n            },\r\n            {   name: 'math_block',\r\n                rex: /`{3}math\\s+?([^`]+?)\\s+?`{3}/gmy,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '```math'\r\n            }\r\n        ]\r\n    },\r\n    kramdown: {\r\n        inline: [ \r\n            {   name: 'math_inline', \r\n                rex: /\\${2}(.+?)\\${2}/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '$$'\r\n            }\r\n        ],\r\n        block: [\r\n            {   name: 'math_block_eqno',\r\n                rex: /\\${2}([^$]+?)\\${2}\\s*?\\(([^)\\s]+?)\\)/gmy,\r\n                tmpl: '<section class=\"eqno\"><eqn>$1</eqn><span>($2)</span></section>',\r\n                tag: '$$'\r\n            },\r\n            {   name: 'math_block',\r\n                rex: /\\${2}([^$]+?)\\${2}/gmy,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '$$'\r\n            }\r\n        ]\r\n    },\r\n    dollars: {\r\n        inline: [\r\n            {   name: 'math_inline_double',\r\n                rex: /\\${2}((?:\\S)|(?:\\S.*?\\S))\\${2}/gy,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '$$',\r\n                displayMode: true,\r\n                pre: texmath.$_pre,\r\n                post: texmath.$_post\r\n            },\r\n            {   name: 'math_inline',\r\n                rex: /\\$((?:\\S)|(?:\\S.*?\\S))\\$/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '$',\r\n                outerSpace: false,\r\n                pre: texmath.$_pre,\r\n                post: texmath.$_post\r\n            }\r\n        ],\r\n        block: [\r\n            {   name: 'math_block_eqno',\r\n                rex: /\\${2}([^$]+?)\\${2}\\s*?\\(([^)\\s]+?)\\)/gmy,\r\n                tmpl: '<section class=\"eqno\"><eqn>$1</eqn><span>($2)</span></section>',\r\n                tag: '$$'\r\n            },\r\n            {   name: 'math_block',\r\n                rex: /\\${2}([^$]+?)\\${2}/gmy,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '$$'\r\n            }\r\n        ]\r\n    }\r\n};\r\n\r\nif (typeof module === \"object\" && module.exports)\r\n   module.exports = texmath;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","escapeHTML","text","replace","texmath","md","options","delimiters","outerSpace","katexOptions","throwOnError","macros","katex","engine","renderToString","rules","rule","inline","ruler","before","name","renderer","tokens","idx","tmpl","render","content","displayMode","block","info","texmath.inline","state","silent","pos","str","src","match","startsWith","tag","rex","lastIndex","pre","exec","res","post","token","push","markup","texmath.block","begLine","endLine","bMarks","tShift","endpos","curline","eMarks","lineMax","parentType","length","map","line","texmath.render","tex","err","message","use","texmath.use","inlineRuleNames","blockRuleNames","$_pre","beg","texmath.$_pre","prv","charCodeAt","$_post","end","texmath.$_post","nxt","brackets","gitlab","julia","spaceEnclosed","kramdown","dollars"]
}
