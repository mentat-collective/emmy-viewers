{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_block$table.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQlHC,QAASA,QAAO,CAACC,KAAD,CAAQC,IAAR,CAAc,CAAA,IACxBC,IAAMF,KAAMG,CAAAA,MAAN,CAAaF,IAAb,CAANC,CAA2BF,KAAMI,CAAAA,MAAN,CAAaH,IAAb,CAG/B,OAAOD,MAAMK,CAAAA,GAAIC,CAAAA,MAAV,CAAiBJ,GAAjB,CAFGF,KAAMO,CAAAA,MAANC,CAAaP,IAAbO,CAEH,CAA4BN,GAA5B,CAJqB,CAO9BO,QAASA,aAAY,CAACC,GAAD,CAAM,CAAA,IACrBC,OAAS,EADY,CAErBT,IAAM,CAFe,CAGrBM,IAAME,GAAIE,CAAAA,MAHW,CAIrBC,EAJqB,CAKrBC,UAAY,CAAA,CALS,CAMrBC,QAAU,CANW,CAOrBC,QAAU,EAId,KAFAH,EAEA,CAFMH,GAAIO,CAAAA,UAAJ,CAAef,GAAf,CAEN,CAAOA,GAAP,CAAaM,GAAb,CAAA,CACa,GAgBX,GAhBIK,EAgBJ,GAfOC,SAAL,EAOEE,OACA,EADWN,GAAIQ,CAAAA,SAAJ,CAAcH,OAAd,CAAuBb,GAAvB,CAA6B,CAA7B,CACX,CAAAa,OAAA,CAAUb,GARZ,GAEES,MAAOQ,CAAAA,IAAP,CAAYH,OAAZ,CAAsBN,GAAIQ,CAAAA,SAAJ,CAAcH,OAAd,CAAuBb,GAAvB,CAAtB,CAEA,CADAc,OACA;AADU,EACV,CAAAD,OAAA,CAAUb,GAAV,CAAgB,CAJlB,CAeF,EAHAY,SAGA,CAHoB,EAGpB,GAHaD,EAGb,CAFAX,GAAA,EAEA,CAAAW,EAAA,CAAKH,GAAIO,CAAAA,UAAJ,CAAef,GAAf,CAGPS,OAAOQ,CAAAA,IAAP,CAAYH,OAAZ,CAAsBN,GAAIQ,CAAAA,SAAJ,CAAcH,OAAd,CAAtB,CAEA,OAAOJ,OAjCkB,CAV3B,IAAIS,QAAUxB,OAAA,CAAQ,kDAAR,CAA2BwB,CAAAA,OA+CzCvB,OAAOC,CAAAA,OAAP,CAAiBuB,QAAc,CAACrB,KAAD,CAAQsB,SAAR,CAAmBC,OAAnB,CAA4BC,MAA5B,CAAoC,CAAA,IAEtCC,UAI3B,IAAIH,SAAJ,CAAgB,CAAhB,CAAoBC,OAApB,CAA+B,MAAO,CAAA,CAEtC,KAAAG,SAAWJ,SAAXI,CAAuB,CAKvB,IAHI1B,KAAM2B,CAAAA,MAAN,CAAaD,QAAb,CAGJ,CAH6B1B,KAAM4B,CAAAA,SAGnC,EAAgD,CAAhD,EAAI5B,KAAM2B,CAAAA,MAAN,CAAaD,QAAb,CAAJ,CAA6B1B,KAAM4B,CAAAA,SAAnC,CAAqD,MAAO,CAAA,CAM5D,KAAA1B,IAAMF,KAAMG,CAAAA,MAAN,CAAauB,QAAb,CAANxB,CAA+BF,KAAMI,CAAAA,MAAN,CAAasB,QAAb,CAC/B,IAAIxB,GAAJ,EAAWF,KAAMO,CAAAA,MAAN,CAAamB,QAAb,CAAX,CAAqC,MAAO,CAAA,CAE5C;IAAAG,GAAU7B,KAAMK,CAAAA,GAAIY,CAAAA,UAAV,CAAqBf,GAAA,EAArB,CAGV,IAFgB,GAEhB,GAFI2B,EAEJ,EAF2C,EAE3C,GAF+BA,EAE/B,EAFsE,EAEtE,GAF0DA,EAE1D,EAAI3B,GAAJ,EAAWF,KAAMO,CAAAA,MAAN,CAAamB,QAAb,CAAX,CAAqC,MAAO,CAAA,CAE5C,KAAAI,YAAW9B,KAAMK,CAAAA,GAAIY,CAAAA,UAAV,CAAqBf,GAAA,EAArB,CAOX,IANiB,GAMjB,GANI4B,WAMJ,EAN6C,EAM7C,GANgCA,WAMhC,EANyE,EAMzE,GAN4DA,WAM5D,EANwF,CAACV,OAAA,CAAQU,WAAR,CAMzF,EAAgB,EAAhB,GAAID,EAAJ,EAA+BT,OAAA,CAAQU,WAAR,CAA/B,CAAoD,MAAO,CAAA,CAE3D,KAAA,CAAO5B,GAAP,CAAaF,KAAMO,CAAAA,MAAN,CAAamB,QAAb,CAAb,CAAA,CAAqC,CACnCb,EAAA,CAAKb,KAAMK,CAAAA,GAAIY,CAAAA,UAAV,CAAqBf,GAArB,CAEL,IAAW,GAAX,GAAIW,EAAJ,EAAiC,EAAjC,GAA0BA,EAA1B,EAAuD,EAAvD,GAAgDA,EAAhD,EAAsE,CAACO,OAAA,CAAQP,EAAR,CAAvE,CAAsF,MAAO,CAAA,CAE7FX,IAAA,EALmC,CAQrC6B,EAAA,CAAWhC,OAAA,CAAQC,KAAR,CAAesB,SAAf,CAA2B,CAA3B,CAEX,KAAAU,EAAUD,EAASE,CAAAA,KAAT,CAAe,GAAf,CACVC,IAAA,CAAS,EACT,KAAKC,EAAL,CAAS,CAAT,CAAYA,EAAZ,CAAgBH,CAAQpB,CAAAA,MAAxB,CAAgCuB,EAAA,EAAhC,CAAqC,CACnCC,QAAA,CAAIJ,CAAA,CAAQG,EAAR,CAAWE,CAAAA,IAAX,EACJ,IAAI,CAACD,QAAL,CAGE,GAAU,CAAV;AAAID,EAAJ,EAAeA,EAAf,GAAqBH,CAAQpB,CAAAA,MAA7B,CAAsC,CAAtC,CACE,QADF,KAGE,OAAO,CAAA,CAIX,IAAI,CAAC,UAAW0B,CAAAA,IAAX,CAAgBF,QAAhB,CAAL,CAA2B,MAAO,CAAA,CACC,GAAnC,GAAIA,QAAEnB,CAAAA,UAAF,CAAamB,QAAExB,CAAAA,MAAf,CAAwB,CAAxB,CAAJ,CACEsB,GAAOf,CAAAA,IAAP,CAAgC,EAApB,GAAAiB,QAAEnB,CAAAA,UAAF,CAAa,CAAb,CAAA,CAAkC,QAAlC,CAA6C,OAAzD,CADF,CAE+B,EAAxB,GAAImB,QAAEnB,CAAAA,UAAF,CAAa,CAAb,CAAJ,CACLiB,GAAOf,CAAAA,IAAP,CAAY,MAAZ,CADK,CAGLe,GAAOf,CAAAA,IAAP,CAAY,EAAZ,CAlBiC,CAsBrCY,EAAA,CAAWhC,OAAA,CAAQC,KAAR,CAAesB,SAAf,CAA0Be,CAAAA,IAA1B,EAEX,IAD8B,CAAC,CAC/B,GADIN,EAASQ,CAAAA,OAAT,CAAiB,GAAjB,CACJ,EAAiD,CAAjD,EAAIvC,KAAM2B,CAAAA,MAAN,CAAaL,SAAb,CAAJ,CAA8BtB,KAAM4B,CAAAA,SAApC,CAAsD,MAAO,CAAA,CAC7DI,EAAA,CAAUvB,YAAA,CAAasB,EAAb,CACNC,EAAQpB,CAAAA,MAAZ,EAAqC,EAArC,GAAsBoB,CAAA,CAAQ,CAAR,CAAtB,EAAyCA,CAAQQ,CAAAA,KAAR,EACrCR,EAAQpB,CAAAA,MAAZ,EAAsD,EAAtD,GAAsBoB,CAAA,CAAQA,CAAQpB,CAAAA,MAAhB,CAAyB,CAAzB,CAAtB,EAA0DoB,CAAQS,CAAAA,GAAR,EAI1DC,YAAA,CAAcV,CAAQpB,CAAAA,MACtB,IAAoB,CAApB,GAAI8B,WAAJ,EAAyBA,WAAzB,GAAyCR,GAAOtB,CAAAA,MAAhD,CAA0D,MAAO,CAAA,CAEjE;GAAIY,MAAJ,CAAc,MAAO,CAAA,CAErB,KAAAmB,cAAgB3C,KAAM4C,CAAAA,UACtB5C,MAAM4C,CAAAA,UAAN,CAAmB,OAInB,KAAAC,gBAAkB7C,KAAM8C,CAAAA,EAAGC,CAAAA,KAAMC,CAAAA,KAAMC,CAAAA,QAArB,CAA8B,YAA9B,CAElB,KAAAC,MAAYlD,KAAMmB,CAAAA,IAAN,CAAW,YAAX,CAAyB,OAAzB,CAAkC,CAAlC,CACZ+B,MAAMC,CAAAA,GAAN,CAAYC,MAAZ,CAAyB,CAAE9B,SAAF,CAAa,CAAb,CAEzB4B,MAAA,CAAYlD,KAAMmB,CAAAA,IAAN,CAAW,YAAX,CAAyB,OAAzB,CAAkC,CAAlC,CACZ+B,MAAMC,CAAAA,GAAN,CAAY,CAAE7B,SAAF,CAAaA,SAAb,CAAyB,CAAzB,CAEZ4B,MAAA,CAAYlD,KAAMmB,CAAAA,IAAN,CAAW,SAAX,CAAsB,IAAtB,CAA4B,CAA5B,CACZ+B,MAAMC,CAAAA,GAAN,CAAY,CAAE7B,SAAF,CAAaA,SAAb,CAAyB,CAAzB,CAEZ,KAAKa,EAAL,CAAS,CAAT,CAAYA,EAAZ,CAAgBH,CAAQpB,CAAAA,MAAxB,CAAgCuB,EAAA,EAAhC,CACEe,KASiB,CATAlD,KAAMmB,CAAAA,IAAN,CAAW,SAAX,CAAsB,IAAtB,CAA4B,CAA5B,CASA,CARbe,GAAA,CAAOC,EAAP,CAQa,GAPfe,KAAMG,CAAAA,KAOS,CAPA,CAAE,CAAE,OAAF,CAAW,aAAX,CAA2BnB,GAAA,CAAOC,EAAP,CAA3B,CAAF,CAOA,EAJjBe,KAIiB,CAJAlD,KAAMmB,CAAAA,IAAN,CAAW,QAAX;AAAqB,EAArB,CAAyB,CAAzB,CAIA,CAHjB+B,KAAMI,CAAAA,OAGW,CAHAtB,CAAA,CAAQG,EAAR,CAAWE,CAAAA,IAAX,EAGA,CAFjBa,KAAMK,CAAAA,QAEW,CAFA,EAEA,CAAAvD,KAAMmB,CAAAA,IAAN,CAAW,UAAX,CAAuB,IAAvB,CAA6B,CAAC,CAA9B,CAGPnB,MAAMmB,CAAAA,IAAN,CAAW,UAAX,CAAuB,IAAvB,CAA6B,CAAC,CAA9B,CACAnB,MAAMmB,CAAAA,IAAN,CAAW,aAAX,CAA0B,OAA1B,CAAmC,CAAC,CAApC,CAEZ,KAAKO,QAAL,CAAgBJ,SAAhB,CAA4B,CAA5B,CAA+BI,QAA/B,CAA0CH,OAA1C,EACM,EAAAvB,KAAM2B,CAAAA,MAAN,CAAaD,QAAb,CAAA,CAAyB1B,KAAM4B,CAAAA,SAA/B,CADN,CAAmDF,QAAA,EAAnD,CAA+D,CAG7D8B,KAAA,CAAY,CAAA,CACPrB,GAAA,CAAI,CAAT,KAAYsB,CAAZ,CAAgBZ,eAAgBjC,CAAAA,MAAhC,CAAwCuB,EAAxC,CAA4CsB,CAA5C,CAA+CtB,EAAA,EAA/C,CACE,GAAIU,eAAA,CAAgBV,EAAhB,CAAA,CAAmBnC,KAAnB,CAA0B0B,QAA1B,CAAoCH,OAApC,CAA6C,CAAA,CAA7C,CAAJ,CAAwD,CACtDiC,KAAA,CAAY,CAAA,CACZ,MAFsD,CAM1D,GAAIA,KAAJ,CAAiB,KACjBzB,GAAA,CAAWhC,OAAA,CAAQC,KAAR,CAAe0B,QAAf,CAAyBW,CAAAA,IAAzB,EACX,IAAI,CAACN,EAAL,CAAiB,KACjB,IAAgD,CAAhD,EAAI/B,KAAM2B,CAAAA,MAAN,CAAaD,QAAb,CAAJ,CAA6B1B,KAAM4B,CAAAA,SAAnC,CAAqD,KACrDI,EAAA,CAAUvB,YAAA,CAAasB,EAAb,CACNC,EAAQpB,CAAAA,MAAZ;AAAqC,EAArC,GAAsBoB,CAAA,CAAQ,CAAR,CAAtB,EAAyCA,CAAQQ,CAAAA,KAAR,EACrCR,EAAQpB,CAAAA,MAAZ,EAAsD,EAAtD,GAAsBoB,CAAA,CAAQA,CAAQpB,CAAAA,MAAhB,CAAyB,CAAzB,CAAtB,EAA0DoB,CAAQS,CAAAA,GAAR,EAEtDf,SAAJ,GAAiBJ,SAAjB,CAA6B,CAA7B,GACE4B,KACA,CADYlD,KAAMmB,CAAAA,IAAN,CAAW,YAAX,CAAyB,OAAzB,CAAkC,CAAlC,CACZ,CAAA+B,KAAMC,CAAAA,GAAN,CAAY1B,UAAZ,CAAyB,CAAEH,SAAF,CAAc,CAAd,CAAiB,CAAjB,CAF3B,CAKA4B,MAAA,CAAYlD,KAAMmB,CAAAA,IAAN,CAAW,SAAX,CAAsB,IAAtB,CAA4B,CAA5B,CACZ+B,MAAMC,CAAAA,GAAN,CAAY,CAAEzB,QAAF,CAAYA,QAAZ,CAAuB,CAAvB,CAEZ,KAAKS,EAAL,CAAS,CAAT,CAAYA,EAAZ,CAAgBO,WAAhB,CAA6BP,EAAA,EAA7B,CACEe,KASiB,CATAlD,KAAMmB,CAAAA,IAAN,CAAW,SAAX,CAAsB,IAAtB,CAA4B,CAA5B,CASA,CARbe,GAAA,CAAOC,EAAP,CAQa,GAPfe,KAAMG,CAAAA,KAOS,CAPA,CAAE,CAAE,OAAF,CAAW,aAAX,CAA2BnB,GAAA,CAAOC,EAAP,CAA3B,CAAF,CAOA,EAJjBe,KAIiB,CAJAlD,KAAMmB,CAAAA,IAAN,CAAW,QAAX,CAAqB,EAArB,CAAyB,CAAzB,CAIA,CAHjB+B,KAAMI,CAAAA,OAGW,CAHAtB,CAAA,CAAQG,EAAR,CAAA,CAAaH,CAAA,CAAQG,EAAR,CAAWE,CAAAA,IAAX,EAAb,CAAiC,EAGjC,CAFjBa,KAAMK,CAAAA,QAEW,CAFA,EAEA,CAAAvD,KAAMmB,CAAAA,IAAN,CAAW,UAAX,CAAuB,IAAvB,CAA6B,CAAC,CAA9B,CAEXnB,MAAMmB,CAAAA,IAAN,CAAW,UAAX,CAAuB,IAAvB,CAA6B,CAAC,CAA9B,CAvCqD,CA0C3DM,UAAJ;CACUzB,KAAMmB,CAAAA,IAAN,CAAW,aAAX,CAA0B,OAA1B,CAAmC,CAAC,CAApC,CACR,CAAAM,UAAA,CAAW,CAAX,CAAA,CAAgBC,QAFlB,CAKQ1B,MAAMmB,CAAAA,IAAN,CAAW,aAAX,CAA0B,OAA1B,CAAmC,CAAC,CAApC,CACRiC,OAAA,CAAW,CAAX,CAAA,CAAgB1B,QAEhB1B,MAAM4C,CAAAA,UAAN,CAAmBD,aACnB3C,MAAMC,CAAAA,IAAN,CAAayB,QACb,OAAO,CAAA,CAxK0D,CApD+C;",
"sources":["node_modules/markdown-it/lib/rules_block/table.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_block$table\"] = function(global,require,module,exports) {\n// GFM table, https://github.github.com/gfm/#tables-extension-\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      isEscaped = false,\n      lastPos = 0,\n      current = '';\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */);\n    pos++;\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(current + str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines, oldParentType, terminate,\n      terminatorRules, firstCh, secondCh;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }\n\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) { break; }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    if (nextLine === startLine + 2) {\n      token     = state.push('tbody_open', 'tbody', 1);\n      token.map = tbodyLines = [ startLine + 2, 0 ];\n    }\n\n    token     = state.push('tr_open', 'tr', 1);\n    token.map = [ nextLine, nextLine + 1 ];\n\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  if (tbodyLines) {\n    token = state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","getLine","state","line","pos","bMarks","tShift","src","substr","eMarks","max","escapedSplit","str","result","length","ch","isEscaped","lastPos","current","charCodeAt","substring","push","isSpace","module.exports","startLine","endLine","silent","tbodyLines","nextLine","sCount","blkIndent","firstCh","secondCh","lineText","columns","split","aligns","i","t","trim","test","indexOf","shift","pop","columnCount","oldParentType","parentType","terminatorRules","md","block","ruler","getRules","token","map","tableLines","attrs","content","children","terminate","l"]
}
