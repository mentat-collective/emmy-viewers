{
"version":3,
"file":"module$node_modules$$lezer$common$dist$index_cjs.js",
"lineCount":74,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA8d7GC,QAASA,UAAS,CAACC,IAAD,CAAOC,GAAP,CAAYC,IAAZ,CAAkBC,EAAlB,CAAsB,CACpC,OAAQH,IAAR,EACI,KAAK,CAAC,CAAN,CAAsB,MAAOE,KAAP,CAAcD,GACpC,MAAK,CAAC,CAAN,CAA0B,MAAOE,GAAP,EAAaF,GAAb,EAAoBC,IAApB,CAA2BD,GACrD,MAAK,CAAL,CAAqB,MAAOC,KAAP,CAAcD,GAAd,EAAqBE,EAArB,CAA0BF,GAC/C,MAAK,CAAL,CAAwB,MAAOC,KAAP,EAAeD,GAAf,EAAsBE,EAAtB,CAA2BF,GACnD,MAAK,CAAL,CAAoB,MAAOE,GAAP,CAAYF,GAChC,MAAK,CAAL,CAAuB,MAAO,CAAA,CANlC,CADoC,CAUxCG,QAASA,2BAA0B,CAACC,IAAD,CAAOJ,GAAP,CAAY,CAE3C,IADIK,GACJ,CADWD,IAAKE,CAAAA,WAAL,CAAiBN,GAAjB,CACX,CAAOK,GAAP,CAAA,CAAa,CACT,IAAIE,KAAOF,GAAKG,CAAAA,SAChB,IAAI,CAACD,IAAL,EAAaA,IAAKL,CAAAA,EAAlB,EAAwBG,GAAKH,CAAAA,EAA7B,CACI,KACAK,KAAKE,CAAAA,IAAKC,CAAAA,OAAd,EAAyBH,IAAKN,CAAAA,IAA9B,EAAsCM,IAAKL,CAAAA,EAA3C,EACIE,IACA,CADOC,GACP,CAAAA,GAAA;AAAOE,IAAKI,CAAAA,WAFhB,EAKIN,GALJ,CAKWE,IATF,CAYb,MAAOH,KAdoC,CAgB/CQ,QAASA,YAAW,CAACR,IAAD,CAAOJ,GAAP,CAAYD,IAAZ,CAAkBc,QAAlB,CAA4B,CAG5C,IAFA,IAAIC,EAEJ,CAAOV,IAAKH,CAAAA,IAAZ,EAAoBG,IAAKF,CAAAA,EAAzB,GACY,CAAP,CAAAH,IAAA,CAAWK,IAAKH,CAAAA,IAAhB,EAAwBD,GAAxB,CAA8BI,IAAKH,CAAAA,IAAnC,CAA0CD,GAD/C,IAEY,CAAC,CAAR,CAAAD,IAAA,CAAYK,IAAKF,CAAAA,EAAjB,EAAuBF,GAAvB,CAA6BI,IAAKF,CAAAA,EAAlC,CAAuCF,GAF5C,EAAA,CAEkD,CAC9C,IAAIe,gBAAS,CAACF,QAAD,EAAaT,IAAb,WAA6BY,SAA7B,EAAsD,CAAtD,CAAyCZ,IAAKa,CAAAA,KAA9C,CAA0D,IAA1D,CAAiEb,IAAKW,CAAAA,MACnF,IAAI,CAACA,eAAL,CACI,MAAOX,KACXA,KAAA,CAAOW,eAJuC,CAM9CG,eAAAA,CAAOL,QAAA,CAAW,CAAX,CAAehB,OAAQsB,CAAAA,QAASC,CAAAA,cAE3C,IAAIP,QAAJ,CACI,IAAK,IAAIR,KAAOD,IAAX,CAAiBW,OAASV,IAAKU,CAAAA,MAApC,CAA4CA,MAA5C,CAAoDV,IAAA,CAAOU,MAAP,CAAeA,MAAf,CAAwBV,IAAKU,CAAAA,MAAjF,CACQV,IAAJ,WAAoBW,SAApB;AAA6C,CAA7C,CAAgCX,IAAKY,CAAAA,KAArC,GAA4F,IAAzC,IAACH,EAAD,CAAMC,MAAOM,CAAAA,KAAP,CAAarB,GAAb,CAAkBD,IAAlB,CAAwBmB,eAAxB,CAAN,GAAwD,IAAK,EAA7D,GAAiDJ,EAAjD,CAAiE,IAAK,EAAtE,CAA0EA,EAAGb,CAAAA,IAAhI,GAAyII,IAAKJ,CAAAA,IAA9I,GACIG,IADJ,CACWW,MADX,CAGR,KAAA,CAAA,CAAA,CAAS,CACDO,QAAAA,CAAQlB,IAAKiB,CAAAA,KAAL,CAAWrB,GAAX,CAAgBD,IAAhB,CAAsBmB,eAAtB,CACZ,IAAI,CAACI,QAAL,CACI,MAAOlB,KACXA,KAAA,CAAOkB,QAJF,CAlBmC,CA4HhDC,QAASA,YAAW,CAACnB,IAAD,CAAOK,IAAP,CAAae,MAAb,CAAqBC,KAArB,CAA4B,CACxCC,IAAAA,CAAMtB,IAAKuB,CAAAA,MAAL,EAAV,KAAyBC,OAAS,EAClC,IAAI,CAACF,IAAIG,CAAAA,UAAJ,EAAL,CACI,MAAOD,OACX,IAAc,IAAd,EAAIJ,MAAJ,CACI,IAAA,CAAO,CAACE,IAAIjB,CAAAA,IAAKqB,CAAAA,EAAT,CAAYN,MAAZ,CAAR,CAAA,CACI,GAAI,CAACE,IAAIK,CAAAA,WAAJ,EAAL,CACI,MAAOH,OACnB,KAAA,CAAA,CAAA,CAAS,CACL,GAAa,IAAb,EAAIH,KAAJ,EAAqBC,IAAIjB,CAAAA,IAAKqB,CAAAA,EAAT,CAAYL,KAAZ,CAArB,CACI,MAAOG,OACPF,KAAIjB,CAAAA,IAAKqB,CAAAA,EAAT,CAAYrB,IAAZ,CAAJ,EACImB,MAAOI,CAAAA,IAAP,CAAYN,IAAItB,CAAAA,IAAhB,CACJ;GAAI,CAACsB,IAAIK,CAAAA,WAAJ,EAAL,CACI,MAAgB,KAAT,EAAAN,KAAA,CAAgBG,MAAhB,CAAyB,EAN/B,CARmC,CAiBhDK,QAASA,iBAAgB,CAAC7B,IAAD,CAAO8B,OAAP,CAAgBC,CAAA,CAAID,OAAQE,CAAAA,MAAZ,CAAqB,CAArC,CAAwC,CAC7D,IAASC,IAAT,CAAajC,IAAKW,CAAAA,MAAlB,CAA+B,CAA/B,EAA0BoB,CAA1B,CAAkCE,IAAlC,CAAsCA,IAAEtB,CAAAA,MAAxC,CAAgD,CAC5C,GAAI,CAACsB,IAAL,CACI,MAAO,CAAA,CACX,IAAI,CAACA,IAAE5B,CAAAA,IAAK6B,CAAAA,WAAZ,CAAyB,CACrB,GAAIJ,OAAA,CAAQC,CAAR,CAAJ,EAAkBD,OAAA,CAAQC,CAAR,CAAlB,EAAgCE,IAAEE,CAAAA,IAAlC,CACI,MAAO,CAAA,CACXJ,EAAA,EAHqB,CAHmB,CAShD,MAAO,CAAA,CAVsD,CA2WjEK,QAASA,SAAQ,CAACC,IAAD,CAAO,CACpB,MAAOA,KAAKC,CAAAA,QAASC,CAAAA,IAAd,CAAmBC,EAAA,EAAMA,EAAN,WAAoBC,WAApB,EAAkC,CAACD,EAAGnC,CAAAA,IAAK6B,CAAAA,WAA3C,EAA0DE,QAAA,CAASI,EAAT,CAA7E,CADa,CAGxBE,QAASA,UAAS,CAACC,IAAD,CAAO,CAMrBC,QAASA,SAAQ,CAACC,WAAD,CAAcC,eAAd,CAAsBR,QAAtB,CAAgCS,SAAhC,CAA2CC,QAA3C,CAAqD,CAClE,IAAI,CAAEC,EAAF,CAAMC,KAAN,CAAaC,GAAb,CAAkBC,IAAlB,CAAA;AAA2B7B,MAE/B,KADA,IAAI8B,iBAAmBC,SACvB,CAAc,CAAd,CAAOF,IAAP,CAAA,CAAiB,CACb7B,MAAOgC,CAAAA,IAAP,EACA,IAAY,CAAC,CAAb,EAAIH,IAAJ,CAA4B,CAExBd,QAASV,CAAAA,IAAT,CADW4B,MAAAxD,CAAOiD,EAAPjD,CACX,CACA+C,UAAUnB,CAAAA,IAAV,CAAesB,KAAf,CAAuBL,WAAvB,CACA,OAJwB,CAMvB,GAAY,CAAC,CAAb,EAAIO,IAAJ,CAAoC,CACrCK,WAAA,CAAcR,EACd,OAFqC,CAIpC,GAAY,CAAC,CAAb,EAAIG,IAAJ,CAAgC,CACjCE,SAAA,CAAYL,EACZ,OAFiC,CAKjC,KAAM,KAAIS,UAAJ,CAAe,6BAA6BN,IAA7B,EAAf,CAAN,CAjBS,CAHiD,IAuB9D/C,KAAOsD,KAAA,CAAMV,EAAN,CAvBuD,CAwB9DW,kBAAWV,KAAXU,CAAmBf,WAxB2C,CAyB9D,eAAA,IAAA,eAAA,CAAA,GAAA,CAAA,KAAA,EAAA,eAAA,CAAA,CAAmC,IAAA,OAAA,MAAA,CAAA,GAAA,CAAA,eAkFnCgB,gBAAAA,CAAOtC,MAAOsC,CAAAA,IAAP,EAP4B,KAQzBX,eAAVE,eAAUF,CAAH,CAR4B,KAQdY;AAAO,CARO,CAQJC,SAAWF,eAAKV,CAAAA,GAAhBY,CAAsBC,eARlB,CASnCxC,OAAS,CAAE4B,KAAM,CAAR,CAAWF,MAAO,CAAlB,CAAqBY,KAAM,CAA3B,CACb,EAAA,CAAM,IAAK,IAAIhB,OAASe,eAAKjE,CAAAA,GAAdkD,CAAoBmB,MAA7B,CAAsCJ,eAAKjE,CAAAA,GAA3C,CAAiDkD,MAAjD,CAAA,CAA0D,CAC5D,IAAIoB,SAAWL,eAAKT,CAAAA,IAEpB,IAAIS,eAAKZ,CAAAA,EAAT,EAxFmCD,QAwFnC,EAAuC,CAAvC,EAA2BkB,QAA3B,CAA0C,CAGtC1C,MAAO4B,CAAAA,IAAP,CAAcA,eACd5B,OAAO0B,CAAAA,KAAP,CAAeA,cACf1B,OAAOsC,CAAAA,IAAP,CAAcA,IACdA,KAAA,EAAQ,CACRV,gBAAA,EAAQ,CACRS,gBAAKN,CAAAA,IAAL,EACA,SATsC,CAW1C,IAAIK,SAAWC,eAAKjE,CAAAA,GAAhBgE,CAAsBM,QAC1B,IAAe,CAAf,CAAIA,QAAJ,EAAoBN,QAApB,CAA+Bd,MAA/B,EAAyCe,eAAKX,CAAAA,KAA9C,CAAsDa,QAAtD,CACI,KACJ,KAAII,aAAeN,eAAKZ,CAAAA,EAAL;AAAWmB,aAAX,CAA2B,CAA3B,CAA+B,CAAlD,CACIC,UAAYR,eAAKX,CAAAA,KAErB,KADAW,eAAKN,CAAAA,IAAL,EACA,CAAOM,eAAKjE,CAAAA,GAAZ,CAAkBgE,QAAlB,CAAA,CAA4B,CACxB,GAAgB,CAAhB,CAAIC,eAAKT,CAAAA,IAAT,CACI,GAAiB,CAAC,CAAlB,EAAIS,eAAKT,CAAAA,IAAT,CACIe,YAAA,EAAgB,CADpB,KAGI,OAAM,CAJd,KAMSN,gBAAKZ,CAAAA,EAAT,EAAemB,aAAf,GACDD,YADC,EACe,CADf,CAGLN,gBAAKN,CAAAA,IAAL,EAVwB,CAY5BL,cAAA,CAAQmB,SACRjB,gBAAA,EAAQc,QACRJ,KAAA,EAAQK,YAlCoD,CAoChE,GAAe,CAAf,CAzHuCnB,QAyHvC,EAAoBI,eAApB,EAA4Ba,MAA5B,CACIzC,MAAO4B,CAAAA,IAEP,CAFcA,eAEd,CADA5B,MAAO0B,CAAAA,KACP,CADeA,cACf,CAAA1B,MAAOsC,CAAAA,IAAP,CAAcA,IA5HqB,gBAAA,CAAA,MAAA,CA8HlB,CAAd,CAAAtC,MAAO4B,CAAAA,IAAP,CAAkB5B,MAAlB,CAA2B8C,IAAAA,EA9H9B,CAAJ,GAAI,eAAJ,CAAgG,CAExF3B,iBAAAA;AAAO,IAAI4B,WAAJ,CAAgBC,MAAOpB,CAAAA,IAAvB,CAA8BoB,MAAOV,CAAAA,IAArC,CACPW,KAAAA,CAASlD,MAAO3B,CAAAA,GAAhB6E,CAAsBD,MAAOpB,CAAAA,IACjC,KADuCvC,gBACvC,CAD+C8B,iBAAKX,CAAAA,MACpD,CAAOT,MAAO3B,CAAAA,GAAd,CAAoB6E,IAApB,CAAA,CACI5D,gBAAA,CAAQ6D,YAAA,CAAaF,MAAOtB,CAAAA,KAApB,CAA2BP,iBAA3B,CAAiC9B,gBAAjC,CACZb,KAAA,CAAO,IAAIyC,UAAJ,CAAeE,iBAAf,CAAqBQ,GAArB,CAA2BqB,MAAOtB,CAAAA,KAAlC,CAAyCyB,OAAzC,CACPf,kBAAA,CAAWY,MAAOtB,CAAAA,KAAlB,CAA0BL,WAPkE,CAAhG,IASK,CACG4B,MAAAA,CAASlD,MAAO3B,CAAAA,GAAhB6E,CAAsBrB,IAC1B7B,OAAOgC,CAAAA,IAAP,EACIqB,YAAAA,CAAgB,EAAIC,SAAAA,CAAiB,EACrCC,gBAAAA,CAAgB7B,EAAA,EAAMmB,aAAN,CAAsBnB,EAAtB,CAA2B,CAAC,CAC5C8B,gBAAAA,CAAY,CAChB,KADmBC,cACnB,CAD6B7B,GAC7B,CAAO5B,MAAO3B,CAAAA,GAAd,CAAoB6E,MAApB,CAAA,CACyB,CAArB,EAAIK,eAAJ;AAA0BvD,MAAO0B,CAAAA,EAAjC,EAAuC6B,eAAvC,EAAuE,CAAvE,EAAwDvD,MAAO6B,CAAAA,IAA/D,EACQ7B,MAAO4B,CAAAA,GAKX,EALkB6B,cAKlB,CAL4BhB,eAK5B,GAJIiB,cAAA,CAAeL,WAAf,CAA8BC,QAA9B,CAA8C3B,KAA9C,CAAqD6B,eAArD,CAAgExD,MAAO4B,CAAAA,GAAvE,CAA4E6B,cAA5E,CAAqFF,eAArF,CAAoGzB,gBAApG,CAEA,CADA0B,eACA,CADYH,WAAc5C,CAAAA,MAC1B,CAAAgD,cAAA,CAAUzD,MAAO4B,CAAAA,GAErB,EAAA5B,MAAOgC,CAAAA,IAAP,EANJ,EASIX,QAAA,CAASM,KAAT,CAAgBuB,MAAhB,CAAwBG,WAAxB,CAAuCC,QAAvC,CAAuDC,eAAvD,CAGa,EAArB,EAAIA,eAAJ,EAAsC,CAAtC,CAA0BC,eAA1B,EAA2CA,eAA3C,CAAuDH,WAAc5C,CAAAA,MAArE,EACIiD,cAAA,CAAeL,WAAf,CAA8BC,QAA9B,CAA8C3B,KAA9C,CAAqD6B,eAArD,CAAgE7B,KAAhE,CAAuE8B,cAAvE,CAAgFF,eAAhF;AAA+FzB,gBAA/F,CACJuB,YAAcM,CAAAA,OAAd,EACAL,SAAeK,CAAAA,OAAf,EACoB,EAAC,CAArB,CAAIJ,eAAJ,EAAsC,CAAtC,CAA0BC,eAA1B,EACQI,gBACJ,CADWC,YAAA,CAAa/E,IAAb,CACX,CAAAL,IAAA,CAAOqF,YAAA,CAAahF,IAAb,CAAmBuE,WAAnB,CAAkCC,QAAlC,CAAkD,CAAlD,CAAqDD,WAAc5C,CAAAA,MAAnE,CAA2E,CAA3E,CAA8EmB,GAA9E,CAAoFD,KAApF,CAA2FiC,gBAA3F,CAAiGA,gBAAjG,CAFX,EAKInF,IALJ,CAKWsF,QAAA,CAASjF,IAAT,CAAeuE,WAAf,CAA8BC,QAA9B,CAA8C1B,GAA9C,CAAoDD,KAApD,CAA2DG,gBAA3D,CAA8EF,GAA9E,CA5BV,CA+BLb,QAASV,CAAAA,IAAT,CAAc5B,IAAd,CACA+C,UAAUnB,CAAAA,IAAV,CAAegC,iBAAf,CAlEkE,CAoEtEwB,QAASA,aAAY,CAAC/E,IAAD,CAAO,CACxB,MAAO,CAACiC,QAAD,CAAWS,SAAX,CAAsBf,MAAtB,CAAA,EAAiC,CAAA,IAChCsB,UAAY,CADoB,CACjBiC,MAAQjD,QAASN,CAAAA,MAAjBuD,CAA0B,CADT,CACYpF,IADZ,CACkBqF,aACtD,IAAa,CAAb;AAAID,KAAJ,GAAmBpF,IAAnB,CAA0BmC,QAAA,CAASiD,KAAT,CAA1B,WAAsDE,KAAtD,CAA4D,CACxD,GAAI,CAACF,KAAL,EAAcpF,IAAKE,CAAAA,IAAnB,EAA2BA,IAA3B,EAAmCF,IAAK6B,CAAAA,MAAxC,EAAkDA,MAAlD,CACI,MAAO7B,KACX,IAAIqF,aAAJ,CAAoBrF,IAAKuF,CAAAA,IAAL,CAAUC,QAASrC,CAAAA,SAAnB,CAApB,CACIA,SAAA,CAAYP,SAAA,CAAUwC,KAAV,CAAZ,CAA+BpF,IAAK6B,CAAAA,MAApC,CAA6CwD,aAJO,CAM5D,MAAOF,SAAA,CAASjF,IAAT,CAAeiC,QAAf,CAAyBS,SAAzB,CAAoCf,MAApC,CAA4CsB,SAA5C,CAR6B,CADhB,CAY5B2B,QAASA,eAAc,CAAC3C,QAAD,CAAWS,SAAX,CAAsB6C,IAAtB,CAA4B7D,CAA5B,CAA+BlC,IAA/B,CAAqCC,EAArC,CAAyCO,IAAzC,CAA+CiD,SAA/C,CAA0D,CAAA,IACzEsB,cAAgB,EADyD,CACrDC,eAAiB,EACzC,KAAA,CAAOvC,QAASN,CAAAA,MAAhB,CAAyBD,CAAzB,CAAA,CACI6C,aAAchD,CAAAA,IAAd,CAAmBU,QAASuD,CAAAA,GAAT,EAAnB,CACA,CAAAhB,cAAejD,CAAAA,IAAf,CAAoBmB,SAAU8C,CAAAA,GAAV,EAApB,CAAsCD,IAAtC,CAA6C/F,IAA7C,CAEJyC,SAASV,CAAAA,IAAT,CAAc0D,QAAA,CAASX,OAAQhB,CAAAA,KAAR,CAActD,IAAd,CAAT;AAA8BuE,aAA9B,CAA6CC,cAA7C,CAA6D/E,EAA7D,CAAkED,IAAlE,CAAwEyD,SAAxE,CAAoFxD,EAApF,CAAd,CACAiD,UAAUnB,CAAAA,IAAV,CAAe/B,IAAf,CAAsB+F,IAAtB,CAP6E,CASjFN,QAASA,SAAQ,CAACjF,IAAD,CAAOiC,QAAP,CAAiBS,SAAjB,CAA4Bf,MAA5B,CAAoCsB,SAAA,CAAY,CAAhD,CAAmDwC,KAAnD,CAA0D,CACvE,GAAIrC,WAAJ,CAAiB,CACb,IAAIsC,KAAO,CAACJ,QAASlC,CAAAA,WAAV,CAAuBA,WAAvB,CACXqC,MAAA,CAAQA,KAAA,CAAQ,CAACC,IAAD,CAAOC,CAAAA,MAAP,CAAcF,KAAd,CAAR,CAA+B,CAACC,IAAD,CAF1B,CAID,EAAhB,CAAIzC,SAAJ,GACQyC,SACJ,CADW,CAACJ,QAASrC,CAAAA,SAAV,CAAqBA,SAArB,CACX,CAAAwC,KAAA,CAAQA,KAAA,CAAQ,CAACC,SAAD,CAAOC,CAAAA,MAAP,CAAcF,KAAd,CAAR,CAA+B,CAACC,SAAD,CAF3C,CAIA,OAAO,KAAIN,IAAJ,CAASpF,IAAT,CAAeiC,QAAf,CAAyBS,SAAzB,CAAoCf,MAApC,CAA4C8D,KAA5C,CATgE,CAgE3EpB,QAASA,aAAY,CAACuB,WAAD,CAAczB,MAAd,CAAsB3D,KAAtB,CAA6B,CAC9C,IAAI,CAAEoC,EAAF,CAAMC,KAAN,CAAaC,GAAb,CAAkBC,IAAlB,CAAA,CAA2B7B,MAC/BA,OAAOgC,CAAAA,IAAP,EACA,IAAY,CAAZ;AAAIH,IAAJ,EAAiBH,EAAjB,CAAsBmB,aAAtB,CAAqC,CACjC,IAAI8B,WAAarF,KACjB,IAAW,CAAX,CAAIuC,IAAJ,CAAc,CACV,IAAIqB,OAASlD,MAAO3B,CAAAA,GAAhB6E,EAAuBrB,IAAvBqB,CAA8B,CAA9BA,CACJ,KAAA,CAAOlD,MAAO3B,CAAAA,GAAd,CAAoB6E,MAApB,CAAA,CACI5D,KAAA,CAAQ6D,YAAA,CAAauB,WAAb,CAA0BzB,MAA1B,CAAkC3D,KAAlC,CAHF,CAKd2D,MAAA,CAAO,EAAE3D,KAAT,CAAA,CAAkBqF,UAClB1B,OAAA,CAAO,EAAE3D,KAAT,CAAA,CAAkBsC,GAAlB,CAAwB8C,WACxBzB,OAAA,CAAO,EAAE3D,KAAT,CAAA,CAAkBqC,KAAlB,CAA0B+C,WAC1BzB,OAAA,CAAO,EAAE3D,KAAT,CAAA,CAAkBoC,EAVe,CAArC,IAYiB,CAAC,CAAb,EAAIG,IAAJ,CACDK,WADC,CACaR,EADb,CAGY,CAAC,CAHb,EAGIG,IAHJ,GAIDE,SAJC,CAIWL,EAJX,CAML,OAAOpC,MArBuC,CA9JlD,IAAIH,EACJ,KAAI,CAAE,OAAA8D,eAAF,CAAUG,OAAV,CAAmBX,eAAA,CA7+BCmC,IA6+BpB,CAA0D3C,MAAA,CAAS,EAAnE,CAAuEY,aAAA,CAAgBO,OAAQhB,CAAAA,KAAM3B,CAAAA,MAArG,CAAA,CAAgHW,IAApH,CACIpB,OAAS6E,KAAMC,CAAAA,OAAN,CAAc7B,eAAd,CAAA,CAAwB,IAAI8B,gBAAJ,CAAqB9B,eAArB;AAA6BA,eAAOxC,CAAAA,MAApC,CAAxB,CAAsEwC,eADnF,CAEIb,MAAQgB,OAAQhB,CAAAA,KAFpB,CAGIF,YAAc,CAHlB,CAGqBH,UAAY,CAHjC,CAoLIhB,kBAAW,EApLf,CAoLmBS,mBAAY,EAC/B,KAAA,CAAoB,CAApB,CAAOxB,MAAO3B,CAAAA,GAAd,CAAA,CACIgD,QAAA,CAASD,IAAKO,CAAAA,KAAd,EAAuB,CAAvB,CAA0BP,IAAKsD,CAAAA,WAA/B,EAA8C,CAA9C,CAAiD3D,iBAAjD,CAA2DS,kBAA3D,CAAsE,CAAC,CAAvE,CACJ,KAAIf,gBAAgC,IAAvB,IAACtB,EAAD,CAAMiC,IAAKX,CAAAA,MAAX,GAAsC,IAAK,EAA3C,GAA+BtB,EAA/B,CAA+CA,EAA/C,CAAqD4B,iBAASN,CAAAA,MAAT,CAAkBe,kBAAA,CAAU,CAAV,CAAlB,CAAiCT,iBAAA,CAAS,CAAT,CAAYN,CAAAA,MAA7C,CAAsD,CACxH,OAAO,KAAIyD,IAAJ,CAAS9B,KAAA,CAAMhB,IAAK4D,CAAAA,KAAX,CAAT,CAA4BjE,iBAAS4C,CAAAA,OAAT,EAA5B,CAAgDnC,kBAAUmC,CAAAA,OAAV,EAAhD,CAAqElD,eAArE,CA1Lc,CA6LzBkC,QAASA,SAAQ,CAACsC,WAAD;AAAcxG,IAAd,CAAoB,CACjC,GAAI,CAACwG,WAAYtE,CAAAA,WAAjB,EAAgClC,IAAhC,WAAgDyC,WAAhD,EAA8DzC,IAAKK,CAAAA,IAAnE,EAA2EmG,WAA3E,CACI,MAAO,EACX,KAAIpD,KAAOqD,aAAcC,CAAAA,GAAd,CAAkB1G,IAAlB,CACX,IAAY,IAAZ,EAAIoD,IAAJ,CAAkB,CACdA,IAAA,CAAO,CACP,KAAK,IAAIuD,KAAT,GAAkB3G,KAAKsC,CAAAA,QAAvB,CAAiC,CAC7B,GAAIqE,KAAMtG,CAAAA,IAAV,EAAkBmG,WAAlB,EAAiC,EAAEG,KAAF,WAAmBlB,KAAnB,CAAjC,CAA2D,CACvDrC,IAAA,CAAO,CACP,MAFuD,CAI3DA,IAAA,EAAQc,QAAA,CAASsC,WAAT,CAAsBG,KAAtB,CALqB,CAOjCF,aAAcG,CAAAA,GAAd,CAAkB5G,IAAlB,CAAwBoD,IAAxB,CATc,CAWlB,MAAOA,KAf0B,CAiBrCiC,QAASA,aAAY,CAErBmB,WAFqB,CAIrBlE,iBAJqB,CAIXS,kBAJW,CAMrBlD,aANqB,CAMfC,WANe,CAQrBoD,KARqB,CAUrBlB,MAVqB,CAYrB6E,KAZqB,CAcrBC,MAdqB,CAcb,CAMJC,QAASA,OAAM,CAACzE,QAAD,CAAWS,SAAX,CAAsBlD,IAAtB,CAA4BC,EAA5B,CAAgCkH,MAAhC,CAAwC,CACnD,IAAA,CAAmBjF,IAAnB;AAAuBjC,EAAvB,CAAA,CAA4B,CAAA,IACpBmH,UAAYlF,IADQ,KACLmF,WAAanE,SAAA,CAAUhB,IAAV,CAAhC,KAA8CoF,UAAYjD,QAAA,CAASsC,WAAT,CAAsBlE,QAAA,CAASP,IAAT,CAAtB,CAE1D,KADAA,IAAA,EACA,CAAOA,IAAP,CAAWjC,EAAX,CAAeiC,IAAA,EAAf,CAAoB,CAChB,IAAIqF,SAAWlD,QAAA,CAASsC,WAAT,CAAsBlE,QAAA,CAASP,IAAT,CAAtB,CACf,IAAIoF,SAAJ,CAAgBC,QAAhB,EAA4BC,QAA5B,CACI,KACJF,UAAA,EAAaC,QAJG,CAMpB,GAAIrF,IAAJ,EAASkF,SAAT,CAAqB,CAArB,CAAwB,CACpB,GAAIE,SAAJ,CAAgBE,QAAhB,CAA0B,CAClBC,UAAAA,CAAOhF,QAAA,CAAS2E,SAAT,CACXF,OAAA,CAAOO,UAAKhF,CAAAA,QAAZ,CAAsBgF,UAAKvE,CAAAA,SAA3B,CAAsC,CAAtC,CAAyCuE,UAAKhF,CAAAA,QAASN,CAAAA,MAAvD,CAA+De,SAAA,CAAUkE,SAAV,CAA/D,CAAsFD,MAAtF,CACA,SAHsB,CAK1BpC,aAAchD,CAAAA,IAAd,CAAmBU,QAAA,CAAS2E,SAAT,CAAnB,CANoB,CAAxB,IAUIrC,cAAchD,CAAAA,IAAd,CAAmByD,YAAA,CAAamB,WAAb;AAA0BlE,QAA1B,CAAoCS,SAApC,CAA+CkE,SAA/C,CAA0DlF,IAA1D,CAA6DmF,UAA7D,CADNnE,SAAA,CAAUhB,IAAV,CAAc,CAAd,CACM,CADaO,QAAA,CAASP,IAAT,CAAa,CAAb,CAAgBC,CAAAA,MAC7B,CADsCkF,UACtC,CAAiF,IAAjF,CAAuFJ,MAAvF,CAAnB,CAEJjC,eAAejD,CAAAA,IAAf,CAAoBsF,UAApB,CAAiCF,MAAjC,CAA0C9D,KAA1C,CArBwB,CADuB,CALvD,IAAIqE,MAAQ,CACZ,KAAK,IAAIxF,EAAIlC,aAAb,CAAmBkC,CAAnB,CAAuBjC,WAAvB,CAA2BiC,CAAA,EAA3B,CACIwF,KAAA,EAASrD,QAAA,CAASsC,WAAT,CAAsBlE,iBAAA,CAASP,CAAT,CAAtB,CACb,KAAIsF,SAAWG,IAAKC,CAAAA,IAAL,CAAmB,GAAnB,CAAWF,KAAX,CAA0B,CAA1B,CAAf,CACI3C,cAAgB,EADpB,CACwBC,eAAiB,EA0BzCkC,OAAA,CAAOzE,iBAAP,CAAiBS,kBAAjB,CAA4BlD,aAA5B,CAAkCC,WAAlC,CAAsC,CAAtC,CACA,OAAO,CAAC+G,KAAD,EAAUC,MAAV,EAAkBlC,aAAlB,CAAiCC,cAAjC,CAAiD7C,MAAjD,CAhCH,CAwWR0F,QAASA,WAAU,CAACC,OAAD,CAAU9H,IAAV,CAAgBC,EAAhB,CAAoB,CACnC,IAAK,IAAI8H,KAAT,GAAkBD,QAAlB,CAA2B,CACvB,GAAIC,KAAM/H,CAAAA,IAAV;AAAkBC,EAAlB,CACI,KACJ,IAAI8H,KAAM9H,CAAAA,EAAV,CAAeD,IAAf,CACI,MAAO+H,MAAM/H,CAAAA,IAAN,EAAcA,IAAd,EAAsB+H,KAAM9H,CAAAA,EAA5B,EAAkCA,EAAlC,CAAuC,CAAvC,CAAsD,CAJ1C,CAM3B,MAAO,EAP4B,CAWvC+H,QAASA,SAAQ,CAACC,GAAD,CAAMC,MAAN,CAAcC,IAAd,CAAoBC,KAApB,CAA2BlF,SAA3B,CAAsCmF,GAAtC,CAA2C,CACxD,GAAIH,MAAJ,CAAaC,IAAb,CAAmB,CAAA,IACXnI,KAAOiI,GAAItD,CAAAA,MAAJ,CAAWuD,MAAX,CAAoB,CAApB,CACXE,MAAMrG,CAAAA,IAAN,CAAWkG,GAAIK,CAAAA,KAAJ,CAAUJ,MAAV,CAAkBC,IAAlB,CAAwBnI,IAAxB,CAD6BiI,GAAItD,CAAAA,MAAJ1E,CAAWkI,IAAXlI,CAAkB,CAAlBA,CAC7B,CAAX,CACAiD,UAAUnB,CAAAA,IAAV,CAAe/B,IAAf,CAAsBqI,GAAtB,CAHe,CADqC,CAY5DE,QAASA,YAAW,CAAC7G,MAAD,CAAS,CAiBzB8G,QAASA,MAAK,CAACN,MAAD,CAASC,IAAT,CAAe3H,IAAf,CAAqBiI,WAArB,CAAkCtG,MAAlC,CAA0C,CACpD,IAAID,EAAIgG,MACR,KAAA,CAAOQ,CAAA,CAAExG,CAAF,CAAM,CAAN,CAAP,CAAkBmG,GAAlB,EAAyBlI,IAAKH,CAAAA,IAA9B,CAAA,CACIkC,CAAA,CAAIwG,CAAA,CAAExG,CAAF,CAAM,CAAN,CAH4C,KAIhDO,SAAW,EAJqC,CAIjCS,UAAY,EAC/B8E,SAAA,CAASC,GAAT,CAAcC,MAAd,CAAsBhG,CAAtB,CAAyBO,QAAzB,CAAmCS,SAAnC,CAA8CuF,WAA9C,CACIzI,OAAAA,CAAO0I,CAAA,CAAExG,CAAF,CAAM,CAAN,CAAX,KAAqBjC,GAAKyI,CAAA,CAAExG,CAAF;AAAM,CAAN,CAE1BO,SAASV,CAAAA,IAAT,CADe/B,MACD,CADQqI,GACR,EADelI,IAAKH,CAAAA,IACpB,EAD4BC,EAC5B,CADiCoI,GACjC,EADwClI,IAAKF,CAAAA,EAC7C,EADmDyI,CAAA,CAAExG,CAAF,CACnD,EAD2D/B,IAAKK,CAAAA,IAAK4C,CAAAA,EACrE,CAAWjD,IAAKwI,CAAAA,MAAL,EAAX,CAA2BH,KAAA,CAAMtG,CAAN,CAAU,CAAV,CAAawG,CAAA,CAAExG,CAAF,CAAM,CAAN,CAAb,CAAuB+F,GAAIlB,CAAAA,GAAIjD,CAAAA,KAAR,CAAc4E,CAAA,CAAExG,CAAF,CAAd,CAAvB,CAA4ClC,MAA5C,CAAkDC,EAAlD,CAAuDD,MAAvD,CAAzC,CACAkD,UAAUnB,CAAAA,IAAV,CAAe/B,MAAf,CAAsByI,WAAtB,CACAT,SAAA,CAASC,GAAT,CAAcS,CAAA,CAAExG,CAAF,CAAM,CAAN,CAAd,CAAwBiG,IAAxB,CAA8B1F,QAA9B,CAAwCS,SAAxC,CAAmDuF,WAAnD,CACA,OAAO,KAAI7C,IAAJ,CAASpF,IAAT,CAAeiC,QAAf,CAAyBS,SAAzB,CAAoCf,MAApC,CAX6C,CAjB/B,IACrB,CAAEhC,IAAF,CAAA,CAAWuB,MADU,CACFkH,MAAQ,CAE/B,GACIlH,OAAOZ,CAAAA,MAAP,EACA,CAAA8H,KAAA,EAFJ,OAGS,CAAClH,MAAOc,CAAAA,IAHjB,CAHyB,KAQrBN,WAAI,CARiB,KAQd6D,KAAOrE,MAAOc,CAAAA,IARA,CAQM6F,IAAM,CACrC,KAAA,CAEQ,EADJA,GACI,CADEtC,IAAK7C,CAAAA,SAAL,CAAehB,UAAf,CACF,CADsBR,MAAO1B,CAAAA,IAC7B,CAAAqI,GAAA,EAAOlI,IAAKH,CAAAA,IAAZ,EAAoBqI,GAApB,CAA0BtC,IAAKtD,CAAAA,QAAL,CAAcP,UAAd,CAAiBC,CAAAA,MAA3C;AAAqDhC,IAAKF,CAAAA,EAA1D,CAFR,CAAQiC,UAAA,EAAR,EATyB,IAcrB+F,IAAMlC,IAAKtD,CAAAA,QAAL,CAAcP,UAAd,CAde,CAcGwG,EAAIT,GAAItD,CAAAA,MAgBpCoB,KAAKtD,CAAAA,QAAL,CAAcP,UAAd,CAAA,CAAmBsG,KAAA,CAAM,CAAN,CAASE,CAAEvG,CAAAA,MAAX,CAAmB0G,QAASC,CAAAA,IAA5B,CAAkC,CAAlC,CAAqCb,GAAI9F,CAAAA,MAAzC,CAEnB,KAAS4G,UAAT,CAAa,CAAb,CAAgBA,UAAhB,EAAqBH,KAArB,CAA4BG,UAAA,EAA5B,CACIrH,MAAOsH,CAAAA,UAAP,CAAkB7I,IAAKH,CAAAA,IAAvB,CAjCqB,CA0H7BiJ,QAASA,YAAW,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAAA,IAC5BC,KAAO,IADqB,CACfC,QAAUF,MAC3B,KAAK,IAAIjH,EAAI,CAAR,CAAWoH,EAAI,CAApB,CAAuBpH,CAAvB,CAA2BgH,KAAM/G,CAAAA,MAAjC,CAAyCD,CAAA,EAAzC,CAA8C,CAAA,IACtCqH,QAAUL,KAAA,CAAMhH,CAAN,CAAU,CAAV,CAAajC,CAAAA,EADe,CACXuJ,MAAQN,KAAA,CAAMhH,CAAN,CAASlC,CAAAA,IAChD,KAAA,CAAOsJ,CAAP,CAAWD,OAAQlH,CAAAA,MAAnB,CAA2BmH,CAAA,EAA3B,CAAgC,CAC5B,IAAIG,EAAIJ,OAAA,CAAQC,CAAR,CACR,IAAIG,CAAEzJ,CAAAA,IAAN,EAAcwJ,KAAd,CACI,KACAC,EAAExJ,CAAAA,EAAN,EAAYsJ,OAAZ,GAEKH,IAEL,GADIC,OACJ,CADcD,IACd,CADqBD,MAAOb,CAAAA,KAAP,EACrB,EAAImB,CAAEzJ,CAAAA,IAAN,CAAauJ,OAAb,EACIH,IAAA,CAAKE,CAAL,CACA;AADU,IAAII,KAAJ,CAAUD,CAAEzJ,CAAAA,IAAZ,CAAkBuJ,OAAlB,CACV,CAAIE,CAAExJ,CAAAA,EAAN,CAAWuJ,KAAX,EACIJ,IAAKO,CAAAA,MAAL,CAAYL,CAAZ,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,IAAII,KAAJ,CAAUF,KAAV,CAAiBC,CAAExJ,CAAAA,EAAnB,CAAtB,CAHR,EAKSwJ,CAAExJ,CAAAA,EAAN,CAAWuJ,KAAX,CACDJ,IAAA,CAAKE,CAAA,EAAL,CADC,CACW,IAAII,KAAJ,CAAUF,KAAV,CAAiBC,CAAExJ,CAAAA,EAAnB,CADX,CAIDmJ,IAAKO,CAAAA,MAAL,CAAYL,CAAA,EAAZ,CAAiB,CAAjB,CAbJ,CAJ4B,CAFU,CAuB9C,MAAOD,QAzByB,CA2BpCO,QAASA,iBAAgB,CAACC,CAAD,CAAInB,CAAJ,CAAO1I,IAAP,CAAaC,EAAb,CAAiB,CAAA,IAClC6J,GAAK,CAD6B,CAC1BC,GAAK,CADqB,CAClBC,IAAM,CAAA,CADY,CACLC,IAAM,CAAA,CAAvC,KAA8ClK,IAAM,CAAC,GACrD,KAAI4B,OAAS,EACb,KAAA,CAAA,CAAA,CAAS,CACL,IAAIuI,MAAQJ,EAAA,EAAMD,CAAE1H,CAAAA,MAAR,CAAiB,GAAjB,CAAuB6H,GAAA,CAAMH,CAAA,CAAEC,EAAF,CAAM7J,CAAAA,EAAZ,CAAiB4J,CAAA,CAAEC,EAAF,CAAM9J,CAAAA,IAA1D,CACImK,MAAQJ,EAAA,EAAMrB,CAAEvG,CAAAA,MAAR,CAAiB,GAAjB,CAAuB8H,GAAA,CAAMvB,CAAA,CAAEqB,EAAF,CAAM9J,CAAAA,EAAZ,CAAiByI,CAAA,CAAEqB,EAAF,CAAM/J,CAAAA,IAC1D,IAAIgK,GAAJ,EAAWC,GAAX,CAAgB,CACR5G,GAAAA,CAAQsE,IAAKyC,CAAAA,GAAL,CAASrK,GAAT,CAAcC,IAAd,CAAZ,KAAiCsD,IAAMqE,IAAK0C,CAAAA,GAAL,CAASH,KAAT,CAAgBC,KAAhB,CAAuBlK,EAAvB,CACnCoD,IAAJ,CAAYC,GAAZ,EACI3B,MAAOI,CAAAA,IAAP,CAAY,IAAI2H,KAAJ,CAAUrG,GAAV,CAAiBC,GAAjB,CAAZ,CAHQ,CAKhBvD,GAAA,CAAM4H,IAAK0C,CAAAA,GAAL,CAASH,KAAT,CAAgBC,KAAhB,CACN,IAAW,GAAX;AAAIpK,GAAJ,CACI,KACAmK,MAAJ,EAAanK,GAAb,GACSiK,GAAL,EAGIA,GACA,CADM,CAAA,CACN,CAAAF,EAAA,EAJJ,EACIE,GADJ,CACU,CAAA,CAFd,CAQIG,MAAJ,EAAapK,GAAb,GACSkK,GAAL,EAGIA,GACA,CADM,CAAA,CACN,CAAAF,EAAA,EAJJ,EACIE,GADJ,CACU,CAAA,CAFd,CAnBK,CA4BT,MAAOtI,OA/B+B,CAoC1C2I,QAASA,eAAc,CAACC,MAAD,CAASpB,MAAT,CAAiB,CACpC,IAAIxH,OAAS,EACb,KAAK,IAAI,CAAE,IAAA5B,YAAF,CAAOyK,KAAP,CAAcC,IAAd,CAAT,EAAiCF,OAAjC,CAAyC,CACjCxG,MAAAA,CAAWhE,YAAXgE,EAAkByG,KAAME,CAAAA,OAAN,CAAgBF,KAAME,CAAAA,OAAN,CAAc,CAAd,CAAiB1K,CAAAA,IAAjC,CAAwC,CAA1D+D,CAAJ,KAAkEa,OAASb,MAATa,CAAoB4F,KAAMhI,CAAAA,IAAKL,CAAAA,MAAjG,CACInC,KAAO2H,IAAKyC,CAAAA,GAAL,CAASK,IAAKzK,CAAAA,IAAd,CAAoB+D,MAApB,CAAX,KAA0C9D,GAAK0H,IAAK0C,CAAAA,GAAL,CAASI,IAAKxK,CAAAA,EAAd,CAAkB2E,MAAlB,CAC/C,IAAI4F,KAAME,CAAAA,OAAV,CAAmB,CACXA,MAAAA,CAAUF,KAAME,CAAAA,OAAQC,CAAAA,GAAd,CAAkBlB,CAAA,EAAK,IAAIC,KAAJ,CAAUD,CAAEzJ,CAAAA,IAAZ,CAAmBD,YAAnB,CAAwB0J,CAAExJ,CAAAA,EAA1B,CAA+BF,YAA/B,CAAvB,CACV6K,OAAAA,CAAUhB,gBAAA,CAAiBT,MAAjB,CAAyBuB,MAAzB,CAAkC1K,IAAlC;AAAwCC,EAAxC,CACd,KAAK,IAAIiC,EAAI,CAAR,CAAWnC,IAAMC,IAAtB,CAAA,CAA6BkC,CAAA,EAA7B,CAAkC,CAC9B,IAAgCoB,IAAM,CAAlChD,IAAkC,CAA3B4B,CAA2B,EAAtB0I,MAAQzI,CAAAA,MAAc,EAAOlC,EAAP,CAAY2K,MAAA,CAAQ1I,CAAR,CAAWlC,CAAAA,IACzDsD,IAAJ,CAAUvD,GAAV,EACI4B,MAAOI,CAAAA,IAAP,CAAY,IAAI8I,YAAJ,CAAiB9K,GAAjB,CAAsBuD,GAAtB,CAA2BkH,KAAMhI,CAAAA,IAAjC,CAAuC,CAACuB,MAAxC,CAAkD0G,IAAKzK,CAAAA,IAAvD,EAA+DD,GAA/D,EAAsE0K,IAAKK,CAAAA,SAA3E,CAAsFL,IAAKxK,CAAAA,EAA3F,EAAiGqD,GAAjG,EAAwGmH,IAAKM,CAAAA,OAA7G,CAAZ,CACJ,IAAIzK,IAAJ,CACI,KACJP,IAAA,CAAM6K,MAAA,CAAQ1I,CAAR,CAAWjC,CAAAA,EANa,CAHnB,CAAnB,IAaI0B,OAAOI,CAAAA,IAAP,CAAY,IAAI8I,YAAJ,CAAiB7K,IAAjB,CAAuBC,EAAvB,CAA2BuK,KAAMhI,CAAAA,IAAjC,CAAuC,CAACuB,MAAxC,CAAkD0G,IAAKzK,CAAAA,IAAvD,EAA+D+D,MAA/D,EAA2E0G,IAAKK,CAAAA,SAAhF,CAA2FL,IAAKxK,CAAAA,EAAhG,EAAsG2E,MAAtG,EAAgH6F,IAAKM,CAAAA,OAArH,CAAZ,CAhBiC,CAmBzC,MAAOpJ,OArB6B,CApwDxCqJ,MAAOC,CAAAA,cAAP,CAAsBrL,OAAtB,CAA+B,YAA/B,CAA6C,CAAEsL,MAAO,CAAA,CAAT,CAA7C,CAMA,KAAIC,WAAa,CACjB,MAAMzB,MAAN,CACI0B,WAAW,CAACpL,IAAD,CAAOC,EAAP,CAAW,CAClB,IAAKD,CAAAA,IAAL,CAAYA,IACZ,KAAKC,CAAAA,EAAL;AAAUA,EAFQ,CAD1B,CASA,KAAM6F,SAAN,CAEIsF,WAAW,CAACC,MAAA,CAAS,EAAV,CAAc,CACrB,IAAKjI,CAAAA,EAAL,CAAU+H,UAAA,EACV,KAAKG,CAAAA,OAAL,CAAe,CAAC,CAACD,MAAOC,CAAAA,OACxB,KAAKC,CAAAA,WAAL,CAAmBF,MAAOE,CAAAA,WAA1B,EAA0C,CAAA,EAAA,EAAM,CAC5C,KAAUC,MAAJ,CAAU,sDAAV,CAAN,CAD4C,CAAN,CAHrB,CAczBC,GAAG,CAACC,KAAD,CAAQ,CACP,GAAI,IAAKJ,CAAAA,OAAT,CACI,KAAM,KAAIzH,UAAJ,CAAe,wCAAf,CAAN,CACgB,UAApB,EAAI,MAAO6H,MAAX,GACIA,KADJ,CACY7C,QAAS6C,CAAAA,KAAT,CAAeA,KAAf,CADZ,CAEA,OAAQlL,KAAD,EAAU,CACTmB,IAAAA,CAAS+J,KAAA,CAAMlL,IAAN,CACb,OAAkBiE,KAAAA,EAAX,GAAA9C,IAAA,CAAuB,IAAvB,CAA8B,CAAC,IAAD,CAAOA,IAAP,CAFxB,CALV,CAhBf,CA+BAmE,QAAS6F,CAAAA,QAAT,CAAoB,IAAI7F,QAAJ,CAAa,CAAEyF,YAAaK,GAAAL,EAAOK,GAAIpD,CAAAA,KAAJ,CAAU,GAAV,CAAtB,CAAb,CAIpB1C,SAAS+F,CAAAA,QAAT;AAAoB,IAAI/F,QAAJ,CAAa,CAAEyF,YAAaK,GAAAL,EAAOK,GAAIpD,CAAAA,KAAJ,CAAU,GAAV,CAAtB,CAAb,CAIpB1C,SAASgG,CAAAA,KAAT,CAAiB,IAAIhG,QAAJ,CAAa,CAAEyF,YAAaK,GAAAL,EAAOK,GAAIpD,CAAAA,KAAJ,CAAU,GAAV,CAAtB,CAAb,CAIjB1C,SAASlC,CAAAA,WAAT,CAAuB,IAAIkC,QAAJ,CAAa,CAAEwF,QAAS,CAAA,CAAX,CAAb,CAKvBxF,SAASrC,CAAAA,SAAT,CAAqB,IAAIqC,QAAJ,CAAa,CAAEwF,QAAS,CAAA,CAAX,CAAb,CAIrBxF,SAASiG,CAAAA,OAAT,CAAmB,IAAIjG,QAAJ,CAAa,CAAEwF,QAAS,CAAA,CAAX,CAAb,CAInB,MAAMU,YAAN,CACIZ,WAAW,CAEX5I,IAFW,CAUXkI,OAVW,CAYXuB,MAZW,CAYH,CACJ,IAAKzJ,CAAAA,IAAL,CAAYA,IACZ,KAAKkI,CAAAA,OAAL,CAAeA,OACf,KAAKuB,CAAAA,MAAL,CAAcA,MAHV,CAbZ,CAmBA,MAAMC,QAAUlB,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CAEhB,MAAMtD,SAAN,CAEIuC,WAAW,CAKX9I,IALW,CAOX2D,KAPW,CAUX7C,EAVW,CAYXgJ,KAAA,CAAQ,CAZG,CAYA,CACP,IAAK9J,CAAAA,IAAL,CAAYA,IACZ,KAAK2D,CAAAA,KAAL,CAAaA,KACb,KAAK7C,CAAAA,EAAL,CAAUA,EACV,KAAKgJ,CAAAA,KAAL,CAAaA,KAJN,CAOJC,aAAM,CAACC,IAAD,CAAO,CAChB,IAAIrG;AAAQqG,IAAKrG,CAAAA,KAAL,EAAcqG,IAAKrG,CAAAA,KAAM9D,CAAAA,MAAzB,CAAkC6I,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CAAlC,CAAwDD,OAApE,CAGI1L,KAAO,IAAIqI,QAAJ,CAAayD,IAAKhK,CAAAA,IAAlB,EAA0B,EAA1B,CAA8B2D,KAA9B,CAAqCqG,IAAKlJ,CAAAA,EAA1C,EAFEkJ,IAAKC,CAAAA,GAAL,CAAW,CAAX,CAAyB,CAE3B,GAFiCD,IAAKE,CAAAA,OAAL,CAAe,CAAf,CAAiC,CAElE,GADNF,IAAKG,CAAAA,KAAL,CAAa,CAAb,CAA6B,CACvB,GAD0C,IAAb,EAAAH,IAAKhK,CAAAA,IAAL,CAAoB,CAApB,CAAwC,CACrE,EACX,IAAIgK,IAAKrG,CAAAA,KAAT,CACI,IAAK,IAAIyG,GAAT,GAAgBJ,KAAKrG,CAAAA,KAArB,CAGI,GAFKM,KAAMC,CAAAA,OAAN,CAAckG,GAAd,CAEDA,GADAA,GACAA,CADMA,GAAA,CAAIlM,IAAJ,CACNkM,EAAAA,GAAJ,CAAS,CACL,GAAIA,GAAA,CAAI,CAAJ,CAAOpB,CAAAA,OAAX,CACI,KAAM,KAAIzH,UAAJ,CAAe,4CAAf,CAAN,CACJoC,KAAA,CAAMyG,GAAA,CAAI,CAAJ,CAAOtJ,CAAAA,EAAb,CAAA,CAAmBsJ,GAAA,CAAI,CAAJ,CAHd,CAMjB,MAAOlM,KAfS,CAmBpBqF,IAAI,CAACA,IAAD,CAAO,CAAE,MAAO,KAAKI,CAAAA,KAAL,CAAWJ,IAAKzC,CAAAA,EAAhB,CAAT,CAEP,SAAQ,EAAA,CAAE,MAAoC,EAApC,EAAQ,IAAKgJ,CAAAA,KAAb,CAAqB,CAArB,CAAF,CAER,aAAY,EAAA,CAAE,MAAwC,EAAxC,EAAQ,IAAKA,CAAAA,KAAb,CAAqB,CAArB,CAAF,CAEZ,WAAU,EAAA,CAAE,MAAsC,EAAtC;CAAQ,IAAKA,CAAAA,KAAb,CAAqB,CAArB,CAAF,CAGV,eAAc,EAAA,CAAE,MAA0C,EAA1C,EAAQ,IAAKA,CAAAA,KAAb,CAAqB,CAArB,CAAF,CAGlBvK,EAAE,CAACS,IAAD,CAAO,CACL,GAAmB,QAAnB,EAAI,MAAOA,KAAX,CAA6B,CACzB,GAAI,IAAKA,CAAAA,IAAT,EAAiBA,IAAjB,CACI,MAAO,CAAA,CACX,KAAIwJ,MAAQ,IAAKjG,CAAAA,IAAL,CAAUC,QAASgG,CAAAA,KAAnB,CACZ,OAAOA,MAAA,CAA8B,CAAC,CAA/B,CAAQA,KAAMa,CAAAA,OAAN,CAAcrK,IAAd,CAAR,CAAmC,CAAA,CAJjB,CAM7B,MAAO,KAAKc,CAAAA,EAAZ,EAAkBd,IAPb,CAeFoJ,YAAK,CAACf,GAAD,CAAM,CACd,IAAIiC,OAAS5B,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CACb,KAAK,IAAItG,IAAT,GAAiB8E,IAAjB,CACI,IAAK,IAAIrI,IAAT,GAAiBuD,KAAK2C,CAAAA,KAAL,CAAW,GAAX,CAAjB,CACIoE,MAAA,CAAOtK,IAAP,CAAA,CAAeqI,GAAA,CAAI9E,IAAJ,CACvB,OAAQ1F,KAAD,EAAU,CACb,IAAK,IAAI0M,OAAS1M,IAAK0F,CAAAA,IAAL,CAAUC,QAASgG,CAAAA,KAAnB,CAAb,CAAwC5J,EAAI,CAAC,CAAlD,CAAqDA,CAArD,EAA0D2K,MAAA,CAASA,MAAO1K,CAAAA,MAAhB,CAAyB,CAAnF,EAAuFD,CAAA,EAAvF,CAA4F,CACxF,IAAI4K,MAAQF,MAAA,CAAW,CAAJ,CAAA1K,CAAA,CAAQ/B,IAAKmC,CAAAA,IAAb,CAAoBuK,MAAA,CAAO3K,CAAP,CAA3B,CACZ,IAAI4K,KAAJ,CACI,MAAOA,MAH6E,CAD/E,CALH,CAnEtB,CAkFAjE,QAASC,CAAAA,IAAT;AAAgB,IAAID,QAAJ,CAAa,EAAb,CAAiBmC,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CAAjB,CAAsC,CAAtC,CAAyC,CAAzC,CAQhB,MAAMY,QAAN,CAGI3B,WAAW,CAEXtH,KAFW,CAEJ,CACH,IAAKA,CAAAA,KAAL,CAAaA,KACb,KAAK,IAAI5B,EAAI,CAAb,CAAgBA,CAAhB,CAAoB4B,KAAM3B,CAAAA,MAA1B,CAAkCD,CAAA,EAAlC,CACI,GAAI4B,KAAA,CAAM5B,CAAN,CAASkB,CAAAA,EAAb,EAAmBlB,CAAnB,CACI,KAAM,KAAI2B,UAAJ,CAAe,6EAAf,CAAN,CAJL,CASPmJ,MAAM,CAAC,GAAG/G,KAAJ,CAAW,CACb,IAAIgH,SAAW,EACf,KAAK,IAAIzM,IAAT,GAAiB,KAAKsD,CAAAA,KAAtB,CAA6B,CACzB,IAAIoJ,SAAW,IACf,KAAK,IAAIC,MAAT,GAAmBlH,MAAnB,CAA0B,CACtB,IAAIwF,IAAM0B,MAAA,CAAO3M,IAAP,CACNiL,IAAJ,GACSyB,QAEL,GADIA,QACJ,CADelC,MAAOoC,CAAAA,MAAP,CAAc,EAAd,CAAkB5M,IAAKyF,CAAAA,KAAvB,CACf,EAAAiH,QAAA,CAASzB,GAAA,CAAI,CAAJ,CAAOrI,CAAAA,EAAhB,CAAA,CAAsBqI,GAAA,CAAI,CAAJ,CAH1B,CAFsB,CAQ1BwB,QAASlL,CAAAA,IAAT,CAAcmL,QAAA,CAAW,IAAIrE,QAAJ,CAAarI,IAAK8B,CAAAA,IAAlB,CAAwB4K,QAAxB;AAAkC1M,IAAK4C,CAAAA,EAAvC,CAA2C5C,IAAK4L,CAAAA,KAAhD,CAAX,CAAoE5L,IAAlF,CAVyB,CAY7B,MAAO,KAAIuM,OAAJ,CAAYE,QAAZ,CAdM,CAdrB,CA1L6G,MAyNvGI,WAAa,IAAIC,OAzNsF,CAyN3EC,gBAAkB,IAAID,OAGxD1N,QAAQsB,CAAAA,QAAR,CAAmB,IAAK,EACvB,UAAS,CAACA,QAAD,CAAW,CAIjBA,QAAA,CAASA,QAAA,CAAA,cAAT,CAAsC,CAAtC,CAAA,CAA2C,gBAI3CA,SAAA,CAASA,QAAA,CAAA,gBAAT,CAAwC,CAAxC,CAAA,CAA6C,kBAI7CA,SAAA,CAASA,QAAA,CAAA,YAAT,CAAoC,CAApC,CAAA,CAAyC,cAKzCA,SAAA,CAASA,QAAA,CAAA,cAAT,CAAsC,CAAtC,CAAA,CAA2C,gBAjB1B,CAApB,CAAD,CAkBGtB,OAAQsB,CAAAA,QAlBX,GAkBwBtB,OAAQsB,CAAAA,QAlBhC,CAkB2C,EAlB3C,EAiCA,MAAM0E,KAAN,CAEIwF,WAAW,CAEX5K,IAFW,CAIXiC,QAJW,CAOXS,SAPW,CASXf,MATW,CAWX8D,KAXW,CAWJ,CACH,IAAKzF,CAAAA,IAAL,CAAYA,IACZ,KAAKiC,CAAAA,QAAL;AAAgBA,QAChB,KAAKS,CAAAA,SAAL,CAAiBA,SACjB,KAAKf,CAAAA,MAAL,CAAcA,MAEd,KAAK8D,CAAAA,KAAL,CAAa,IACb,IAAIA,KAAJ,EAAaA,KAAM9D,CAAAA,MAAnB,CAA2B,CACvB,IAAK8D,CAAAA,KAAL,CAAa+E,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CACb,KAAK,IAAI,CAACtG,IAAD,CAAOqF,KAAP,CAAT,EAA0BjF,MAA1B,CACI,IAAKA,CAAAA,KAAL,CAA0B,QAAf,EAAA,MAAOJ,KAAP,CAA0BA,IAA1B,CAAiCA,IAAKzC,CAAAA,EAAjD,CAAA,CAAuD8H,KAHpC,CAPxB,CAcPsC,QAAQ,EAAG,CACP,IAAIzB,QAAU,IAAKlG,CAAAA,IAAL,CAAUC,QAASiG,CAAAA,OAAnB,CACd,IAAIA,OAAJ,EAAe,CAACA,OAAQrB,CAAAA,OAAxB,CACI,MAAOqB,QAAQvJ,CAAAA,IAAKgL,CAAAA,QAAb,EACP/K,QAAAA,CAAW,EACf,KAAK,IAAIE,EAAT,GAAe,KAAKF,CAAAA,QAApB,CAA8B,CAC1B,IAAImJ,IAAMjJ,EAAG6K,CAAAA,QAAH,EACN5B,IAAJ,GACQnJ,OAEJ,GADIA,OACJ,EADgB,GAChB,EAAAA,OAAA,EAAYmJ,GAHhB,CAF0B,CAQ9B,MAAQ,KAAKpL,CAAAA,IAAK8B,CAAAA,IAAX,EACF,IAAKmL,CAAAA,IAAL,CAAU,IAAKjN,CAAAA,IAAK8B,CAAAA,IAApB,CAAA,EAA6B,CAAC,IAAK9B,CAAAA,IAAKC,CAAAA,OAAxC,CAAkDiN,IAAKC,CAAAA,SAAL,CAAe,IAAKnN,CAAAA,IAAK8B,CAAAA,IAAzB,CAAlD;AAAmF,IAAK9B,CAAAA,IAAK8B,CAAAA,IAD3F,GAEEG,OAASN,CAAAA,MAAT,CAAkB,GAAlB,CAAwBM,OAAxB,CAAmC,GAAnC,CAAyC,EAF3C,EAAkBA,OAblB,CAoBXf,MAAM,CAACT,IAAA,CAAO,CAAR,CAAW,CACb,MAAO,KAAI2M,UAAJ,CAAe,IAAKC,CAAAA,OAApB,CAA6B5M,IAA7B,CADM,CAMjB6M,QAAQ,CAAC/N,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgBmB,IAAhB,CAA0B,CAC1B8M,IAAAA,CAAQV,UAAWxG,CAAAA,GAAX,CAAe,IAAf,CAARkH,EAAgC,IAAKF,CAAAA,OACrCnM,KAAAA,CAAS,IAAIkM,UAAJ,CAAeG,IAAf,CACbrM,KAAOsM,CAAAA,MAAP,CAAcjO,GAAd,CAAmBD,IAAnB,CACAuN,WAAWtG,CAAAA,GAAX,CAAe,IAAf,CAAqBrF,IAAOuM,CAAAA,KAA5B,CACA,OAAOvM,KALuB,CAS9B,WAAU,EAAA,CACV,MAAO,KAAIX,QAAJ,CAAa,IAAb,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,IAAzB,CADG,CAYdmN,OAAO,CAACnO,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CACfK,GAAAA,CAAOQ,WAAA,CAAY0M,UAAWxG,CAAAA,GAAX,CAAe,IAAf,CAAZ,EAAoC,IAAKgH,CAAAA,OAAzC,CAAkD9N,GAAlD,CAAuDD,IAAvD,CAA6D,CAAA,CAA7D,CACXuN,WAAWtG,CAAAA,GAAX,CAAe,IAAf,CAAqB5G,GAArB,CACA,OAAOA,IAHY,CAUvBgO,YAAY,CAACpO,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CACpBK,GAAAA,CAAOQ,WAAA,CAAY4M,eAAgB1G,CAAAA,GAAhB,CAAoB,IAApB,CAAZ;AAAyC,IAAKgH,CAAAA,OAA9C,CAAuD9N,GAAvD,CAA4DD,IAA5D,CAAkE,CAAA,CAAlE,CACXyN,gBAAgBxG,CAAAA,GAAhB,CAAoB,IAApB,CAA0B5G,GAA1B,CACA,OAAOA,IAHiB,CAU5BiO,OAAO,CAAC9B,IAAD,CAAO,CACV,IAAI,CAAElL,KAAF,CAASiN,KAAT,CAAgBrO,IAAA,CAAO,CAAvB,CAA0BC,EAAA,CAAK,IAAKkC,CAAAA,MAApC,CAAA,CAA+CmK,IACnD,KAASgC,IAAT,CAAa,IAAK5M,CAAAA,MAAL,EAAa4K,IAAKrL,CAAAA,IAAlB,EAA0B,CAA1B,EAA+BrB,OAAQsB,CAAAA,QAASqN,CAAAA,gBAAhD,CAAb,CAAA,CAAA,CAAkF,CAC9E,IAAIC,QAAU,CAAA,CACd,IAAIF,IAAEtO,CAAAA,IAAN,EAAcC,EAAd,EAAoBqO,IAAErO,CAAAA,EAAtB,EAA4BD,IAA5B,GAAqCsO,IAAE9N,CAAAA,IAAK6B,CAAAA,WAA5C,EAAwE,CAAA,CAAxE,GAA2DjB,KAAA,CAAMkN,IAAN,CAA3D,EAAgF,CAC5E,GAAIA,IAAE1M,CAAAA,UAAF,EAAJ,CACI,QACJ4M,QAAA,CAAU,CAAA,CAHkE,CAKhF,IAAA,CAAA,CAAA,CAAS,CACDA,OAAJ,EAAeH,KAAf,EAAwB,CAACC,IAAE9N,CAAAA,IAAK6B,CAAAA,WAAhC,EACIgM,KAAA,CAAMC,IAAN,CACJ,IAAIA,IAAExM,CAAAA,WAAF,EAAJ,CACI,KACJ,IAAI,CAACwM,IAAExN,CAAAA,MAAF,EAAL,CACI,MACJ0N,QAAA,CAAU,CAAA,CAPL,CAPqE,CAFxE,CAsBd3I,IAAI,CAACA,IAAD,CAAO,CACP,MAAQA,KAAKyF,CAAAA,OAAN,CAAuC,IAAKrF,CAAAA,KAAL,CAAa,IAAKA,CAAAA,KAAL,CAAWJ,IAAKzC,CAAAA,EAAhB,CAAb;AAAmCqB,IAAAA,EAA1E,CAAgB,IAAKjE,CAAAA,IAAKqF,CAAAA,IAAV,CAAeA,IAAf,CADhB,CAMP,cAAa,EAAA,CACb,IAAIlE,OAAS,EACb,IAAI,IAAKsE,CAAAA,KAAT,CACI,IAAK,IAAI7C,EAAT,GAAe,KAAK6C,CAAAA,KAApB,CACItE,MAAOI,CAAAA,IAAP,CAAY,CAAC,CAACqB,EAAF,CAAM,IAAK6C,CAAAA,KAAL,CAAW7C,EAAX,CAAN,CAAZ,CACR,OAAOzB,OALM,CAUjB8M,OAAO,CAACpD,MAAA,CAAS,EAAV,CAAc,CACjB,MAA+B,EAAxB,EAAA,IAAK5I,CAAAA,QAASN,CAAAA,MAAd,CAA+C,IAA/C,CACHqD,YAAA,CAAaqD,QAASC,CAAAA,IAAtB,CAA4B,IAAKrG,CAAAA,QAAjC,CAA2C,IAAKS,CAAAA,SAAhD,CAA2D,CAA3D,CAA8D,IAAKT,CAAAA,QAASN,CAAAA,MAA5E,CAAoF,CAApF,CAAuF,IAAKA,CAAAA,MAA5F,CAAoG,CAACM,QAAD,CAAWS,SAAX,CAAsBf,MAAtB,CAAA,EAAiC,IAAIyD,IAAJ,CAAS,IAAKpF,CAAAA,IAAd,CAAoBiC,QAApB,CAA8BS,SAA9B,CAAyCf,MAAzC,CAAiD,IAAKuM,CAAAA,UAAtD,CAArI,CAAwMrD,MAAO5F,CAAAA,QAA/M,EAA4N,CAAA,CAAChD,QAAD,CAAWS,SAAX,CAAsBf,MAAtB,CAAA,EAAiC,IAAIyD,IAAJ,CAASiD,QAASC,CAAAA,IAAlB,CAAwBrG,QAAxB,CAAkCS,SAAlC,CAA6Cf,MAA7C,CAAjC,CAA5N,CAFa,CAMdwM,YAAK,CAAC7L,IAAD,CAAO,CAAE,MAAOD,UAAA,CAAUC,IAAV,CAAT,CA1IvB;AA6IA8C,IAAKgJ,CAAAA,KAAL,CAAa,IAAIhJ,IAAJ,CAASiD,QAASC,CAAAA,IAAlB,CAAwB,EAAxB,CAA4B,EAA5B,CAAgC,CAAhC,CACb,MAAMrC,iBAAN,CACI2E,WAAW,CAACzG,MAAD,CAAS3D,KAAT,CAAgB,CACvB,IAAK2D,CAAAA,MAAL,CAAcA,MACd,KAAK3D,CAAAA,KAAL,CAAaA,KAFU,CAIvB,MAAK,EAAA,CAAE,MAAO,KAAK2D,CAAAA,MAAL,CAAY,IAAK3D,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACL,SAAQ,EAAA,CAAE,MAAO,KAAK2D,CAAAA,MAAL,CAAY,IAAK3D,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACR,OAAM,EAAA,CAAE,MAAO,KAAK2D,CAAAA,MAAL,CAAY,IAAK3D,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACN,QAAO,EAAA,CAAE,MAAO,KAAK2D,CAAAA,MAAL,CAAY,IAAK3D,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACP,OAAM,EAAA,CAAE,MAAO,KAAKA,CAAAA,KAAd,CACV0C,IAAI,EAAG,CAAE,IAAK1C,CAAAA,KAAL,EAAc,CAAhB,CACPgD,IAAI,EAAG,CAAE,MAAO,KAAIyC,gBAAJ,CAAqB,IAAK9B,CAAAA,MAA1B,CAAkC,IAAK3D,CAAAA,KAAvC,CAAT,CAXX,CAiBA,KAAM4B,WAAN,CAEIwI,WAAW,CAEXzG,MAFW,CAIXxC,MAJW,CAMX4E,GANW,CAMN,CACD,IAAKpC,CAAAA,MAAL,CAAcA,MACd,KAAKxC,CAAAA,MAAL,CAAcA,MACd,KAAK4E,CAAAA,GAAL;AAAWA,GAHV,CAMD,QAAO,EAAA,CAAE,MAAO8B,SAASC,CAAAA,IAAlB,CAEX0E,QAAQ,EAAG,CACP,IAAI7L,OAAS,EACb,KAAK,IAAIX,MAAQ,CAAjB,CAAoBA,KAApB,CAA4B,IAAK2D,CAAAA,MAAOxC,CAAAA,MAAxC,CAAA,CACIR,MAAOI,CAAAA,IAAP,CAAY,IAAK8M,CAAAA,WAAL,CAAiB7N,KAAjB,CAAZ,CACA,CAAAA,KAAA,CAAQ,IAAK2D,CAAAA,MAAL,CAAY3D,KAAZ,CAAoB,CAApB,CAEZ,OAAOW,OAAOmN,CAAAA,IAAP,CAAY,GAAZ,CANA,CASXD,WAAW,CAAC7N,KAAD,CAAQ,CACf,IAA6B+N,SAAW,IAAKpK,CAAAA,MAAL,CAAY3D,KAAZ,CAAoB,CAApB,CADzB,KAEXR,KAAO,IAAKuG,CAAAA,GAAIjD,CAAAA,KAAT,CADF,IAAKa,CAAAA,MAALvB,CAAYpC,KAAZoC,CACE,CAAX,KAA+BzB,OAASnB,IAAK8B,CAAAA,IACzC,KAAKmL,CAAAA,IAAL,CAAU9L,MAAV,CAAJ,EAAyB,CAACnB,IAAKC,CAAAA,OAA/B,GACIkB,MADJ,CACa+L,IAAKC,CAAAA,SAAL,CAAehM,MAAf,CADb,CAEAX,MAAA,EAAS,CACT,IAAI+N,QAAJ,EAAgB/N,KAAhB,CACI,MAAOW,OAEX,KADIc,IACJ,CADe,EACf,CAAOzB,KAAP,CAAe+N,QAAf,CAAA,CACItM,IAASV,CAAAA,IAAT,CAAc,IAAK8M,CAAAA,WAAL,CAAiB7N,KAAjB,CAAd,CACA,CAAAA,KAAA,CAAQ,IAAK2D,CAAAA,MAAL,CAAY3D,KAAZ;AAAoB,CAApB,CAEZ,OAAOW,OAAP,CAAgB,GAAhB,CAAsBc,IAASqM,CAAAA,IAAT,CAAc,GAAd,CAAtB,CAA2C,GAb5B,CAgBnBE,SAAS,CAAC3I,UAAD,CAAa0I,QAAb,CAAuBE,GAAvB,CAA4BlP,GAA5B,CAAiCD,IAAjC,CAAuC,CAAA,IACxC,CAAE6E,MAAF,CAAA,CAAa,IAD2B,CACrBuK,KAAO,CAAC,CAC/B,KAAA,CAAyBhN,UAAzB,EAA8B6M,QAA9B,EACQ,EAAAlP,SAAA,CAAUC,IAAV,CAAgBC,GAAhB,CAAqB4E,MAAA,CAAOzC,UAAP,CAAW,CAAX,CAArB,CAAoCyC,MAAA,CAAOzC,UAAP,CAAW,CAAX,CAApC,CAAA,GACAgN,IACI,CADGhN,UACH,CAAM,CAAN,CAAA+M,GAFJ,EADR,CAAwC/M,UAAxC,CAA4CyC,MAAA,CAAOzC,UAAP,CAAW,CAAX,CAA5C,EAOA,MAAOgN,KATqC,CAYhD5G,KAAK,CAACJ,MAAD,CAASC,IAAT,CAAenI,IAAf,CAAqBC,EAArB,CAAyB,CAC1B,IAAIyI,EAAI,IAAK/D,CAAAA,MAAb,CACIyE,KAAO,IAAI1E,WAAJ,CAAgByD,IAAhB,CAAuBD,MAAvB,CACX,KAAK,IAAIhG,EAAIgG,MAAR,CAAgBoB,EAAI,CAAzB,CAA4BpH,CAA5B,CAAgCiG,IAAhC,CAAA,CACIiB,IAAA,CAAKE,CAAA,EAAL,CAGA,CAHYZ,CAAA,CAAExG,CAAA,EAAF,CAGZ,CAFAkH,IAAA,CAAKE,CAAA,EAAL,CAEA,CAFYZ,CAAA,CAAExG,CAAA,EAAF,CAEZ,CAFqBlC,IAErB,CADAoJ,IAAA,CAAKE,CAAA,EAAL,CACA,CADYZ,CAAA,CAAExG,CAAA,EAAF,CACZ,CADqBlC,IACrB,CAAAoJ,IAAA,CAAKE,CAAA,EAAL,CAAA,CAAYZ,CAAA,CAAExG,CAAA,EAAF,CAAZ,CAAqBgG,MAEzB,OAAO,KAAItF,UAAJ,CAAewG,IAAf,CAAqBnJ,EAArB,CAA0BD,IAA1B,CAAgC,IAAK+G,CAAAA,GAArC,CATmB,CArDlC;AAoHA,KAAMhG,SAAN,CACIqK,WAAW,CAAC6C,KAAD,CAAQjO,IAAR,CAEXgB,KAFW,CAEJmO,OAFI,CAEK,CACZ,IAAKlB,CAAAA,KAAL,CAAaA,KACb,KAAKjO,CAAAA,IAAL,CAAYA,IACZ,KAAKgB,CAAAA,KAAL,CAAaA,KACb,KAAKmO,CAAAA,OAAL,CAAeA,OAJH,CAMZ,QAAO,EAAA,CAAE,MAAO,KAAKlB,CAAAA,KAAMzN,CAAAA,IAApB,CACP,QAAO,EAAA,CAAE,MAAO,KAAKyN,CAAAA,KAAMzN,CAAAA,IAAK8B,CAAAA,IAAzB,CACP,MAAK,EAAA,CAAE,MAAO,KAAKtC,CAAAA,IAAZ,CAAmB,IAAKiO,CAAAA,KAAM9L,CAAAA,MAAhC,CACTiN,SAAS,CAAClN,CAAD,CAAI+M,GAAJ,CAASlP,GAAT,CAAcD,IAAd,CAAoBmB,IAAA,CAAO,CAA3B,CAA8B,CACnC,IAAK,IAAIH,OAAS,IAAlB,CAAA,CAAA,CAA0B,CACtB,IAAK,IAAI,CAAE2B,QAAF,CAAYS,SAAZ,CAAA,CAA0BpC,MAAOmN,CAAAA,KAArC,CAA4CoB,EAAU,CAAN,CAAAJ,GAAA,CAAUxM,QAASN,CAAAA,MAAnB,CAA4B,CAAC,CAAlF,CAAqFD,CAArF,EAA0FmN,CAA1F,CAA6FnN,CAA7F,EAAkG+M,GAAlG,CAAuG,CAAA,IAC/FvL,KAAOjB,QAAA,CAASP,CAAT,CADwF,CAC3EmB,MAAQH,SAAA,CAAUhB,CAAV,CAARmB,CAAuBvC,MAAOd,CAAAA,IACtD,IAAKH,SAAA,CAAUC,IAAV,CAAgBC,GAAhB,CAAqBsD,KAArB,CAA4BA,KAA5B,CAAoCK,IAAKvB,CAAAA,MAAzC,CAAL,CAEA,GAAIuB,IAAJ,WAAoBd,WAApB,CAAgC,CAC5B,GAAI3B,IAAJ;AAAWrB,OAAQsB,CAAAA,QAASoO,CAAAA,cAA5B,CACI,QACJ,KAAItO,MAAQ0C,IAAKsL,CAAAA,SAAL,CAAe,CAAf,CAAkBtL,IAAKiB,CAAAA,MAAOxC,CAAAA,MAA9B,CAAsC8M,GAAtC,CAA2ClP,GAA3C,CAAiDsD,KAAjD,CAAwDvD,IAAxD,CACZ,IAAY,CAAC,CAAb,CAAIkB,KAAJ,CACI,MAAO,KAAIuO,UAAJ,CAAe,IAAIC,aAAJ,CAAkB1O,MAAlB,CAA0B4C,IAA1B,CAAgCxB,CAAhC,CAAmCmB,KAAnC,CAAf,CAA0D,IAA1D,CAAgErC,KAAhE,CALiB,CAAhC,IAOK,IAAKC,IAAL,CAAYrB,OAAQsB,CAAAA,QAASqN,CAAAA,gBAA7B,EAAmD,CAAC7K,IAAKlD,CAAAA,IAAK6B,CAAAA,WAA9D,EAA6EE,QAAA,CAASmB,IAAT,CAA7E,CAA8F,CAC/F,IAAIqI,OACJ,IAAI,EAAE9K,IAAF,CAASrB,OAAQsB,CAAAA,QAASuO,CAAAA,YAA1B,CAAJ,EACI/L,IAAKuC,CAAAA,KADT,GACmB8F,OADnB,CAC6BrI,IAAKmC,CAAAA,IAAL,CAAUC,QAASiG,CAAAA,OAAnB,CAD7B,GAC6D,CAACA,OAAQrB,CAAAA,OADtE,CAEI,MAAO,KAAI3J,QAAJ,CAAagL,OAAQvJ,CAAAA,IAArB,CAA2Ba,KAA3B,CAAkCnB,CAAlC,CAAqCpB,MAArC,CACPO,EAAAA,CAAQ,IAAIN,QAAJ,CAAa2C,IAAb,CAAmBL,KAAnB,CAA0BnB,CAA1B,CAA6BpB,MAA7B,CACZ,OAAQG,KAAD,CAAQrB,OAAQsB,CAAAA,QAASqN,CAAAA,gBAAzB;AAA8C,CAAClN,CAAMb,CAAAA,IAAK6B,CAAAA,WAA1D,CAAwEhB,CAAxE,CACDA,CAAM+N,CAAAA,SAAN,CAAsB,CAAN,CAAAH,GAAA,CAAUvL,IAAKjB,CAAAA,QAASN,CAAAA,MAAxB,CAAiC,CAAjC,CAAqC,CAArD,CAAwD8M,GAAxD,CAA6DlP,GAA7D,CAAkED,IAAlE,CAPyF,CAXA,CAqBvG,GAAKmB,IAAL,CAAYrB,OAAQsB,CAAAA,QAASqN,CAAAA,gBAA7B,EAAkD,CAACzN,MAAON,CAAAA,IAAK6B,CAAAA,WAA/D,CACI,MAAO,KAEPH,EAAA,CADgB,CAApB,EAAIpB,MAAOE,CAAAA,KAAX,CACQF,MAAOE,CAAAA,KADf,CACuBiO,GADvB,CAGc,CAAN,CAAAA,GAAA,CAAU,CAAC,CAAX,CAAenO,MAAOqO,CAAAA,OAAQlB,CAAAA,KAAMxL,CAAAA,QAASN,CAAAA,MACrDrB,OAAA,CAASA,MAAOqO,CAAAA,OAChB,IAAI,CAACrO,MAAL,CACI,MAAO,KA9BW,CADS,CAkCnC,cAAa,EAAA,CAAE,MAAO,KAAKsO,CAAAA,SAAL,CAAe,CAAf,CAAkB,CAAlB,CAAqB,CAArB,CAAwB,CAAxB,CAAT,CACb,aAAY,EAAA,CAAE,MAAO,KAAKA,CAAAA,SAAL,CAAe,IAAKnB,CAAAA,KAAMxL,CAAAA,QAASN,CAAAA,MAAnC,CAA4C,CAA5C,CAA+C,CAAC,CAAhD,CAAmD,CAAnD,CAAsD,CAAtD,CAAT,CAChB6G,UAAU,CAACjJ,GAAD,CAAM,CAAE,MAAO,KAAKqP,CAAAA,SAAL,CAAe,CAAf,CAAkB,CAAlB,CAAqBrP,GAArB,CAA0B,CAA1B,CAAT,CAChBM,WAAW,CAACN,GAAD,CAAM,CAAE,MAAO,KAAKqP,CAAAA,SAAL,CAAe,IAAKnB,CAAAA,KAAMxL,CAAAA,QAASN,CAAAA,MAAnC;AAA4C,CAA5C,CAA+C,CAAC,CAAhD,CAAmDpC,GAAnD,CAAwD,CAAC,CAAzD,CAAT,CACjBqB,KAAK,CAACrB,GAAD,CAAMD,IAAN,CAAYmB,IAAA,CAAO,CAAnB,CAAsB,CACvB,IAAI8K,OACJ,IAAI,EAAE9K,IAAF,CAASrB,OAAQsB,CAAAA,QAASC,CAAAA,cAA1B,CAAJ,GAAkD4K,OAAlD,CAA4D,IAAKkC,CAAAA,KAAMpI,CAAAA,IAAX,CAAgBC,QAASiG,CAAAA,OAAzB,CAA5D,GAAkGA,OAAQrB,CAAAA,OAA1G,CAAmH,CAC/G,IAAIgF,KAAO3P,GAAP2P,CAAa,IAAK1P,CAAAA,IACtB,KAAK,IAAI,CAAEA,IAAF,CAAQC,EAAR,CAAT,EAAyB8L,QAAQrB,CAAAA,OAAjC,CACI,IAAY,CAAP,CAAA5K,IAAA,CAAWE,IAAX,EAAmB0P,IAAnB,CAA0B1P,IAA1B,CAAiC0P,IAAtC,IACY,CAAP,CAAA5P,IAAA,CAAWG,EAAX,EAAiByP,IAAjB,CAAwBzP,EAAxB,CAA6ByP,IADlC,EAEI,MAAO,KAAI3O,QAAJ,CAAagL,OAAQvJ,CAAAA,IAArB,CAA2BuJ,OAAQrB,CAAAA,OAAR,CAAgB,CAAhB,CAAmB1K,CAAAA,IAA9C,CAAqD,IAAKA,CAAAA,IAA1D,CAAgE,CAAC,CAAjE,CAAoE,IAApE,CALgG,CAQnH,MAAO,KAAKoP,CAAAA,SAAL,CAAe,CAAf,CAAkB,CAAlB,CAAqBrP,GAArB,CAA0BD,IAA1B,CAAgCmB,IAAhC,CAVgB,CAY3B0O,qBAAqB,EAAG,CACpB,IAAIC,IAAM,IACV,KAAA,CAAOA,GAAIpP,CAAAA,IAAK6B,CAAAA,WAAhB,EAA+BuN,GAAIT,CAAAA,OAAnC,CAAA,CACIS,GAAA,CAAMA,GAAIT,CAAAA,OACd,OAAOS,IAJa,CAMpB,UAAS,EAAA,CACT,MAAO,KAAKT,CAAAA,OAAL;AAAe,IAAKA,CAAAA,OAAQQ,CAAAA,qBAAb,EAAf,CAAsD,IADpD,CAGT,eAAc,EAAA,CACd,MAAO,KAAKR,CAAAA,OAAL,EAA8B,CAA9B,EAAgB,IAAKnO,CAAAA,KAArB,CAAkC,IAAKmO,CAAAA,OAAQC,CAAAA,SAAb,CAAuB,IAAKpO,CAAAA,KAA5B,CAAoC,CAApC,CAAuC,CAAvC,CAA0C,CAA1C,CAA6C,CAA7C,CAAlC,CAAmG,IAD5F,CAGd,eAAc,EAAA,CACd,MAAO,KAAKmO,CAAAA,OAAL,EAA8B,CAA9B,EAAgB,IAAKnO,CAAAA,KAArB,CAAkC,IAAKmO,CAAAA,OAAQC,CAAAA,SAAb,CAAuB,IAAKpO,CAAAA,KAA5B,CAAoC,CAApC,CAAuC,CAAC,CAAxC,CAA2C,CAA3C,CAA8C,CAA9C,CAAlC,CAAoG,IAD7F,CAGlBU,MAAM,CAACT,IAAA,CAAO,CAAR,CAAW,CAAE,MAAO,KAAI2M,UAAJ,CAAe,IAAf,CAAqB3M,IAArB,CAAT,CACb,QAAO,EAAA,CAAE,MAAO,KAAKgN,CAAAA,KAAd,CACXtF,MAAM,EAAG,CAAE,MAAO,KAAKsF,CAAAA,KAAd,CACTC,OAAO,CAACnO,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CACnB,MAAOa,YAAA,CAAY,IAAZ,CAAkBZ,GAAlB,CAAuBD,IAAvB,CAA6B,CAAA,CAA7B,CADY,CAGvBqO,YAAY,CAACpO,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CACxB,MAAOa,YAAA,CAAY,IAAZ,CAAkBZ,GAAlB,CAAuBD,IAAvB,CAA6B,CAAA,CAA7B,CADiB,CAG5BI,0BAA0B,CAACH,GAAD,CAAM,CAAE,MAAOG,2BAAA,CAA2B,IAA3B;AAAiCH,GAAjC,CAAT,CAChC8P,QAAQ,CAACrP,IAAD,CAAOe,MAAA,CAAS,IAAhB,CAAsBC,KAAA,CAAQ,IAA9B,CAAoC,CACpCiI,IAAAA,CAAInI,WAAA,CAAY,IAAZ,CAAkBd,IAAlB,CAAwBe,MAAxB,CAAgCC,KAAhC,CACR,OAAOiI,KAAEtH,CAAAA,MAAF,CAAWsH,IAAA,CAAE,CAAF,CAAX,CAAkB,IAFe,CAI5CnI,WAAW,CAACd,IAAD,CAAOe,MAAA,CAAS,IAAhB,CAAsBC,KAAA,CAAQ,IAA9B,CAAoC,CAC3C,MAAOF,YAAA,CAAY,IAAZ,CAAkBd,IAAlB,CAAwBe,MAAxB,CAAgCC,KAAhC,CADoC,CAI/CgM,QAAQ,EAAG,CAAE,MAAO,KAAKS,CAAAA,KAAMT,CAAAA,QAAX,EAAT,CACP,QAAO,EAAA,CAAE,MAAO,KAAT,CACXsC,YAAY,CAAC7N,OAAD,CAAU,CAAE,MAAOD,iBAAA,CAAiB,IAAjB,CAAuBC,OAAvB,CAAT,CAjG1B,CAgIA,KAAMuN,cAAN,CACIpE,WAAW,CAACtK,MAAD,CAAS6D,MAAT,CAAiB3D,KAAjB,CAAwBqC,KAAxB,CAA+B,CACtC,IAAKvC,CAAAA,MAAL,CAAcA,MACd,KAAK6D,CAAAA,MAAL,CAAcA,MACd,KAAK3D,CAAAA,KAAL,CAAaA,KACb,KAAKqC,CAAAA,KAAL,CAAaA,KAJyB,CAD9C,CAQA,KAAMkM,WAAN,CACInE,WAAW,CAACnJ,OAAD,CAAUkN,OAAV;AAAmBnO,KAAnB,CAA0B,CACjC,IAAKiB,CAAAA,OAAL,CAAeA,OACf,KAAKkN,CAAAA,OAAL,CAAeA,OACf,KAAKnO,CAAAA,KAAL,CAAaA,KACb,KAAKR,CAAAA,IAAL,CAAYyB,OAAQ0C,CAAAA,MAAOoC,CAAAA,GAAIjD,CAAAA,KAAnB,CAAyB7B,OAAQ0C,CAAAA,MAAOA,CAAAA,MAAf,CAAsB3D,KAAtB,CAAzB,CAJqB,CAMjC,QAAO,EAAA,CAAE,MAAO,KAAKR,CAAAA,IAAK8B,CAAAA,IAAnB,CACP,QAAO,EAAA,CAAE,MAAO,KAAKL,CAAAA,OAAQoB,CAAAA,KAApB,CAA4B,IAAKpB,CAAAA,OAAQ0C,CAAAA,MAAOA,CAAAA,MAApB,CAA2B,IAAK3D,CAAAA,KAAhC,CAAwC,CAAxC,CAA9B,CACP,MAAK,EAAA,CAAE,MAAO,KAAKiB,CAAAA,OAAQoB,CAAAA,KAApB,CAA4B,IAAKpB,CAAAA,OAAQ0C,CAAAA,MAAOA,CAAAA,MAApB,CAA2B,IAAK3D,CAAAA,KAAhC,CAAwC,CAAxC,CAA9B,CACT8F,KAAK,CAACmI,GAAD,CAAMlP,GAAN,CAAWD,IAAX,CAAiB,CAClB,IAAI,CAAE6E,MAAF,CAAA,CAAa,IAAK1C,CAAAA,OAClBjB,IAAAA,CAAQ2D,MAAOqK,CAAAA,SAAP,CAAiB,IAAKhO,CAAAA,KAAtB,CAA8B,CAA9B,CAAiC2D,MAAOA,CAAAA,MAAP,CAAc,IAAK3D,CAAAA,KAAnB,CAA2B,CAA3B,CAAjC,CAAgEiO,GAAhE,CAAqElP,GAArE,CAA2E,IAAKkC,CAAAA,OAAQoB,CAAAA,KAAxF,CAA+FvD,IAA/F,CACZ,OAAe,EAAR,CAAAkB,GAAA,CAAY,IAAZ,CAAmB,IAAIuO,UAAJ,CAAe,IAAKtN,CAAAA,OAApB;AAA6B,IAA7B,CAAmCjB,GAAnC,CAHR,CAKlB,cAAa,EAAA,CAAE,MAAO,KAAK8F,CAAAA,KAAL,CAAW,CAAX,CAAc,CAAd,CAAiB,CAAjB,CAAT,CACb,aAAY,EAAA,CAAE,MAAO,KAAKA,CAAAA,KAAL,CAAW,CAAC,CAAZ,CAAe,CAAf,CAAkB,CAAlB,CAAT,CAChBkC,UAAU,CAACjJ,GAAD,CAAM,CAAE,MAAO,KAAK+G,CAAAA,KAAL,CAAW,CAAX,CAAc/G,GAAd,CAAmB,CAAnB,CAAT,CAChBM,WAAW,CAACN,GAAD,CAAM,CAAE,MAAO,KAAK+G,CAAAA,KAAL,CAAW,CAAC,CAAZ,CAAe/G,GAAf,CAAoB,CAAC,CAArB,CAAT,CACjBqB,KAAK,CAACrB,GAAD,CAAMD,IAAN,CAAYmB,IAAA,CAAO,CAAnB,CAAsB,CACvB,GAAIA,IAAJ,CAAWrB,OAAQsB,CAAAA,QAASoO,CAAAA,cAA5B,CACI,MAAO,KACX,EAAI,CAAE,OAAA3K,IAAF,CAAJ,CAAiB,IAAK1C,CAAAA,OAAtB,CACIjB,IAAAA,CAAQ2D,IAAOqK,CAAAA,SAAP,CAAiB,IAAKhO,CAAAA,KAAtB,CAA8B,CAA9B,CAAiC2D,IAAOA,CAAAA,MAAP,CAAc,IAAK3D,CAAAA,KAAnB,CAA2B,CAA3B,CAAjC,CAAuE,CAAP,CAAAlB,IAAA,CAAW,CAAX,CAAe,CAAC,CAAhF,CAAmFC,GAAnF,CAAyF,IAAKkC,CAAAA,OAAQoB,CAAAA,KAAtG,CAA6GvD,IAA7G,CACZ,OAAe,EAAR,CAAAkB,GAAA,CAAY,IAAZ,CAAmB,IAAIuO,UAAJ,CAAe,IAAKtN,CAAAA,OAApB,CAA6B,IAA7B,CAAmCjB,GAAnC,CALH,CAOvB,UAAS,EAAA,CACT,MAAO,KAAKmO,CAAAA,OAAZ,EAAuB,IAAKlN,CAAAA,OAAQnB,CAAAA,MAAO6O,CAAAA,qBAApB,EADd,CAGbI,eAAe,CAACd,GAAD,CAAM,CACjB,MAAO,KAAKE,CAAAA,OAAL;AAAe,IAAf,CAAsB,IAAKlN,CAAAA,OAAQnB,CAAAA,MAAOsO,CAAAA,SAApB,CAA8B,IAAKnN,CAAAA,OAAQjB,CAAAA,KAA3C,CAAmDiO,GAAnD,CAAwDA,GAAxD,CAA6D,CAA7D,CAAgE,CAAhE,CADZ,CAGjB,eAAc,EAAA,CACd,IAAI,CAAEtK,MAAF,CAAA,CAAa,IAAK1C,CAAAA,OAAtB,CACIT,MAAQmD,MAAOA,CAAAA,MAAP,CAAc,IAAK3D,CAAAA,KAAnB,CAA2B,CAA3B,CACZ,OAAIQ,MAAJ,EAAa,IAAK2N,CAAAA,OAAL,CAAexK,MAAOA,CAAAA,MAAP,CAAc,IAAKwK,CAAAA,OAAQnO,CAAAA,KAA3B,CAAmC,CAAnC,CAAf,CAAuD2D,MAAOA,CAAAA,MAAOxC,CAAAA,MAAlF,EACW,IAAIoN,UAAJ,CAAe,IAAKtN,CAAAA,OAApB,CAA6B,IAAKkN,CAAAA,OAAlC,CAA2C3N,KAA3C,CADX,CAEO,IAAKuO,CAAAA,eAAL,CAAqB,CAArB,CALO,CAOd,eAAc,EAAA,CACd,IAAI,CAAEpL,MAAF,CAAA,CAAa,IAAK1C,CAAAA,OAAtB,CACIe,YAAc,IAAKmM,CAAAA,OAAL,CAAe,IAAKA,CAAAA,OAAQnO,CAAAA,KAA5B,CAAoC,CAApC,CAAwC,CAC1D,OAAI,KAAKA,CAAAA,KAAT,EAAkBgC,WAAlB,CACW,IAAK+M,CAAAA,eAAL,CAAqB,CAAC,CAAtB,CADX,CAEO,IAAIR,UAAJ,CAAe,IAAKtN,CAAAA,OAApB,CAA6B,IAAKkN,CAAAA,OAAlC,CAA2CxK,MAAOqK,CAAAA,SAAP,CAAiBhM,WAAjB;AAA8B,IAAKhC,CAAAA,KAAnC,CAA0C,CAAC,CAA3C,CAA8C,CAA9C,CAAiD,CAAjD,CAA3C,CALO,CAOlBU,MAAM,CAACT,IAAA,CAAO,CAAR,CAAW,CAAE,MAAO,KAAI2M,UAAJ,CAAe,IAAf,CAAqB3M,IAArB,CAAT,CACb,QAAO,EAAA,CAAE,MAAO,KAAT,CACX0H,MAAM,EAAG,CAAA,IACDlG,SAAW,EADV,CACcS,UAAY,EAD1B,CAED,CAAEyB,MAAF,CAAA,CAAa,IAAK1C,CAAAA,OAFjB,CAGDiG,OAAS,IAAKlH,CAAAA,KAAdkH,CAAsB,CAHrB,CAGwBC,KAAOxD,MAAOA,CAAAA,MAAP,CAAc,IAAK3D,CAAAA,KAAnB,CAA2B,CAA3B,CAChCmH,KAAJ,CAAWD,MAAX,GAEIzF,QAASV,CAAAA,IAAT,CAAc4C,MAAO2D,CAAAA,KAAP,CAAaJ,MAAb,CAAqBC,IAArB,CADHxD,MAAOA,CAAAA,MAAP3E,CAAc,IAAKgB,CAAAA,KAAnBhB,CAA2B,CAA3BA,CACG,CADiC2E,MAAOA,CAAAA,MAAP1E,CAAc,IAAKe,CAAAA,KAAnBf,CAA2B,CAA3BA,CACjC,CAAd,CACA,CAAAiD,SAAUnB,CAAAA,IAAV,CAAe,CAAf,CAHJ,CAKA,OAAO,KAAI6D,IAAJ,CAAS,IAAKpF,CAAAA,IAAd,CAAoBiC,QAApB,CAA8BS,SAA9B,CAAyC,IAAKjD,CAAAA,EAA9C,CAAmD,IAAKD,CAAAA,IAAxD,CATF,CAWTkO,OAAO,CAACnO,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CACnB,MAAOa,YAAA,CAAY,IAAZ,CAAkBZ,GAAlB,CAAuBD,IAAvB,CAA6B,CAAA,CAA7B,CADY,CAGvBqO,YAAY,CAACpO,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CACxB,MAAOa,YAAA,CAAY,IAAZ;AAAkBZ,GAAlB,CAAuBD,IAAvB,CAA6B,CAAA,CAA7B,CADiB,CAG5BI,0BAA0B,CAACH,GAAD,CAAM,CAAE,MAAOG,2BAAA,CAA2B,IAA3B,CAAiCH,GAAjC,CAAT,CAEhCyN,QAAQ,EAAG,CAAE,MAAO,KAAKvL,CAAAA,OAAQ0C,CAAAA,MAAOkK,CAAAA,WAApB,CAAgC,IAAK7N,CAAAA,KAArC,CAAT,CACX6O,QAAQ,CAACrP,IAAD,CAAOe,MAAA,CAAS,IAAhB,CAAsBC,KAAA,CAAQ,IAA9B,CAAoC,CACpCiI,IAAAA,CAAInI,WAAA,CAAY,IAAZ,CAAkBd,IAAlB,CAAwBe,MAAxB,CAAgCC,KAAhC,CACR,OAAOiI,KAAEtH,CAAAA,MAAF,CAAWsH,IAAA,CAAE,CAAF,CAAX,CAAkB,IAFe,CAI5CnI,WAAW,CAACd,IAAD,CAAOe,MAAA,CAAS,IAAhB,CAAsBC,KAAA,CAAQ,IAA9B,CAAoC,CAC3C,MAAOF,YAAA,CAAY,IAAZ,CAAkBd,IAAlB,CAAwBe,MAAxB,CAAgCC,KAAhC,CADoC,CAG3C,QAAO,EAAA,CAAE,MAAO,KAAT,CACXsO,YAAY,CAAC7N,OAAD,CAAU,CAAE,MAAOD,iBAAA,CAAiB,IAAjB,CAAuBC,OAAvB,CAAT,CA5E1B,CAgFA,KAAM2L,WAAN,CAEIxC,WAAW,CAACjL,IAAD,CAEXc,IAAA,CAAO,CAFI,CAED,CACN,IAAKA,CAAAA,IAAL,CAAYA,IAEZ,KAAK0D,CAAAA,MAAL,CAAc,IACd;IAAKqL,CAAAA,KAAL,CAAa,EAEb,KAAKhP,CAAAA,KAAL,CAAa,CACb,KAAKiP,CAAAA,UAAL,CAAkB,IAClB,IAAI9P,IAAJ,WAAoBY,SAApB,CACI,IAAKmP,CAAAA,SAAL,CAAe/P,IAAf,CADJ,KAGK,CACD,IAAK8N,CAAAA,KAAL,CAAa9N,IAAK8B,CAAAA,OAAQnB,CAAAA,MAC1B,KAAK6D,CAAAA,MAAL,CAAcxE,IAAK8B,CAAAA,OACnB,KAASkO,IAAT,CAAahQ,IAAKgP,CAAAA,OAAlB,CAA2BgB,IAA3B,CAA8BA,IAA9B,CAAkCA,IAAEhB,CAAAA,OAApC,CACI,IAAKa,CAAAA,KAAMI,CAAAA,OAAX,CAAmBD,IAAEnP,CAAAA,KAArB,CACJ,KAAKiP,CAAAA,UAAL,CAAkB9P,IAClB,KAAKkQ,CAAAA,QAAL,CAAclQ,IAAKa,CAAAA,KAAnB,CANC,CAXC,CAqBN,QAAO,EAAA,CAAE,MAAO,KAAKR,CAAAA,IAAK8B,CAAAA,IAAnB,CACX4N,SAAS,CAAC/P,IAAD,CAAO,CACZ,GAAI,CAACA,IAAL,CACI,MAAO,CAAA,CACX,KAAK8N,CAAAA,KAAL,CAAa9N,IACb,KAAKK,CAAAA,IAAL,CAAYL,IAAKK,CAAAA,IACjB,KAAKR,CAAAA,IAAL,CAAYG,IAAKH,CAAAA,IACjB,KAAKC,CAAAA,EAAL,CAAUE,IAAKF,CAAAA,EACf,OAAO,CAAA,CAPK,CAShBoQ,QAAQ,CAACrP,KAAD,CAAQR,IAAR,CAAc,CAClB,IAAKQ,CAAAA,KAAL,CAAaA,KACb,KAAI,CAAEqC,KAAF,CAASsB,MAAT,CAAA,CAAoB,IAAKA,CAAAA,MAC7B,KAAKnE,CAAAA,IAAL;AAAYA,IAAZ,EAAoBmE,MAAOoC,CAAAA,GAAIjD,CAAAA,KAAX,CAAiBa,MAAOA,CAAAA,MAAP,CAAc3D,KAAd,CAAjB,CACpB,KAAKhB,CAAAA,IAAL,CAAYqD,KAAZ,CAAoBsB,MAAOA,CAAAA,MAAP,CAAc3D,KAAd,CAAsB,CAAtB,CACpB,KAAKf,CAAAA,EAAL,CAAUoD,KAAV,CAAkBsB,MAAOA,CAAAA,MAAP,CAAc3D,KAAd,CAAsB,CAAtB,CAClB,OAAO,CAAA,CANW,CAQtBsP,KAAK,CAACnQ,IAAD,CAAO,CACR,GAAI,CAACA,IAAL,CACI,MAAO,CAAA,CACX,IAAIA,IAAJ,WAAoBY,SAApB,CAEI,MADA,KAAK4D,CAAAA,MACE,CADO,IACP,CAAA,IAAKuL,CAAAA,SAAL,CAAe/P,IAAf,CAEX,KAAKwE,CAAAA,MAAL,CAAcxE,IAAK8B,CAAAA,OACnB,OAAO,KAAKoO,CAAAA,QAAL,CAAclQ,IAAKa,CAAAA,KAAnB,CAA0Bb,IAAKK,CAAAA,IAA/B,CARC,CAWZgN,QAAQ,EAAG,CACP,MAAO,KAAK7I,CAAAA,MAAL,CAAc,IAAKA,CAAAA,MAAOA,CAAAA,MAAOkK,CAAAA,WAAnB,CAA+B,IAAK7N,CAAAA,KAApC,CAAd,CAA2D,IAAKiN,CAAAA,KAAMT,CAAAA,QAAX,EAD3D,CAIX+C,UAAU,CAACtB,GAAD,CAAMlP,GAAN,CAAWD,IAAX,CAAiB,CACvB,GAAI,CAAC,IAAK6E,CAAAA,MAAV,CACI,MAAO,KAAK2L,CAAAA,KAAL,CAAW,IAAKrC,CAAAA,KAAMmB,CAAAA,SAAX,CAA2B,CAAN,CAAAH,GAAA,CAAU,IAAKhB,CAAAA,KAAMA,CAAAA,KAAMxL,CAAAA,QAASN,CAAAA,MAApC;AAA6C,CAA7C,CAAiD,CAAtE,CAAyE8M,GAAzE,CAA8ElP,GAA9E,CAAmFD,IAAnF,CAAyF,IAAKmB,CAAAA,IAA9F,CAAX,CACX,KAAI,CAAE0D,MAAF,CAAA,CAAa,IAAKA,CAAAA,MAClB3D,IAAAA,CAAQ2D,MAAOqK,CAAAA,SAAP,CAAiB,IAAKhO,CAAAA,KAAtB,CAA8B,CAA9B,CAAiC2D,MAAOA,CAAAA,MAAP,CAAc,IAAK3D,CAAAA,KAAnB,CAA2B,CAA3B,CAAjC,CAAgEiO,GAAhE,CAAqElP,GAArE,CAA2E,IAAK4E,CAAAA,MAAOtB,CAAAA,KAAvF,CAA8FvD,IAA9F,CACZ,IAAY,CAAZ,CAAIkB,GAAJ,CACI,MAAO,CAAA,CACX,KAAKgP,CAAAA,KAAMjO,CAAAA,IAAX,CAAgB,IAAKf,CAAAA,KAArB,CACA,OAAO,KAAKqP,CAAAA,QAAL,CAAcrP,GAAd,CARgB,CAY3BY,UAAU,EAAG,CAAE,MAAO,KAAK2O,CAAAA,UAAL,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,CAAtB,CAAT,CAEbhQ,SAAS,EAAG,CAAE,MAAO,KAAKgQ,CAAAA,UAAL,CAAgB,CAAC,CAAjB,CAAoB,CAApB,CAAuB,CAAvB,CAAT,CAEZvH,UAAU,CAACjJ,GAAD,CAAM,CAAE,MAAO,KAAKwQ,CAAAA,UAAL,CAAgB,CAAhB,CAAmBxQ,GAAnB,CAAwB,CAAxB,CAAT,CAEhBM,WAAW,CAACN,GAAD,CAAM,CAAE,MAAO,KAAKwQ,CAAAA,UAAL,CAAgB,CAAC,CAAjB,CAAoBxQ,GAApB,CAAyB,CAAC,CAA1B,CAAT,CAMjBqB,KAAK,CAACrB,GAAD,CAAMD,IAAN,CAAYmB,IAAA,CAAO,IAAKA,CAAAA,IAAxB,CAA8B,CAC/B,MAAK,KAAK0D,CAAAA,MAAV,CAEO1D,IAAA,CAAOrB,OAAQsB,CAAAA,QAASoO,CAAAA,cAAxB,CAAyC,CAAA,CAAzC,CAAiD,IAAKiB,CAAAA,UAAL,CAAgB,CAAhB;AAAmBxQ,GAAnB,CAAwBD,IAAxB,CAFxD,CACW,IAAKwQ,CAAAA,KAAL,CAAW,IAAKrC,CAAAA,KAAM7M,CAAAA,KAAX,CAAiBrB,GAAjB,CAAsBD,IAAtB,CAA4BmB,IAA5B,CAAX,CAFoB,CAMnCH,MAAM,EAAG,CACL,GAAI,CAAC,IAAK6D,CAAAA,MAAV,CACI,MAAO,KAAKuL,CAAAA,SAAL,CAAgB,IAAKjP,CAAAA,IAAN,CAAarB,OAAQsB,CAAAA,QAASqN,CAAAA,gBAA9B,CAAkD,IAAKN,CAAAA,KAAMkB,CAAAA,OAA7D,CAAuE,IAAKlB,CAAAA,KAAMnN,CAAAA,MAAjG,CACX,IAAI,IAAKkP,CAAAA,KAAM7N,CAAAA,MAAf,CACI,MAAO,KAAKkO,CAAAA,QAAL,CAAc,IAAKL,CAAAA,KAAMhK,CAAAA,GAAX,EAAd,CACX,KAAIlF,OAAU,IAAKG,CAAAA,IAAN,CAAarB,OAAQsB,CAAAA,QAASqN,CAAAA,gBAA9B,CAAkD,IAAK5J,CAAAA,MAAO7D,CAAAA,MAA9D,CAAuE,IAAK6D,CAAAA,MAAO7D,CAAAA,MAAO6O,CAAAA,qBAAnB,EACpF,KAAKhL,CAAAA,MAAL,CAAc,IACd,OAAO,KAAKuL,CAAAA,SAAL,CAAepP,MAAf,CAPF,CAUT0P,OAAO,CAACvB,GAAD,CAAM,CACT,GAAI,CAAC,IAAKtK,CAAAA,MAAV,CACI,MAAQ,KAAKsJ,CAAAA,KAAMkB,CAAAA,OAAZ,CACD,IAAKmB,CAAAA,KAAL,CAA8B,CAAnB,CAAA,IAAKrC,CAAAA,KAAMjN,CAAAA,KAAX,CAAuB,IAAvB,CACP,IAAKiN,CAAAA,KAAMkB,CAAAA,OAAQC,CAAAA,SAAnB,CAA6B,IAAKnB,CAAAA,KAAMjN,CAAAA,KAAxC;AAAgDiO,GAAhD,CAAqDA,GAArD,CAA0D,CAA1D,CAA6D,CAA7D,CAA+E,IAAKhO,CAAAA,IAApF,CADJ,CADC,CAAsB,CAAA,CAFxB,KAKL,CAAE0D,MAAF,CAAA,CAAa,IAAKA,CAAAA,MALb,CAKqBoE,EAAI,IAAKiH,CAAAA,KAAM7N,CAAAA,MAAf4G,CAAwB,CACtD,IAAU,CAAV,CAAIkG,GAAJ,CAAa,CACT,IAAIjM,YAAkB,CAAJ,CAAA+F,CAAA,CAAQ,CAAR,CAAY,IAAKiH,CAAAA,KAAL,CAAWjH,CAAX,CAAZ,CAA4B,CAC9C,IAAI,IAAK/H,CAAAA,KAAT,EAAkBgC,WAAlB,CACI,MAAO,KAAKqN,CAAAA,QAAL,CAAc1L,MAAOqK,CAAAA,SAAP,CAAiBhM,WAAjB,CAA8B,IAAKhC,CAAAA,KAAnC,CAA0C,CAAC,CAA3C,CAA8C,CAA9C,CAAiD,CAAjD,CAAd,CAHF,CAAb,IAOI,IADIQ,WACA,CADQmD,MAAOA,CAAAA,MAAP,CAAc,IAAK3D,CAAAA,KAAnB,CAA2B,CAA3B,CACR,CAAAQ,WAAA,EAAa,CAAJ,CAAAuH,CAAA,CAAQpE,MAAOA,CAAAA,MAAOxC,CAAAA,MAAtB,CAA+BwC,MAAOA,CAAAA,MAAP,CAAc,IAAKqL,CAAAA,KAAL,CAAWjH,CAAX,CAAd,CAA8B,CAA9B,CAAxC,CAAJ,CACI,MAAO,KAAKsH,CAAAA,QAAL,CAAc7O,WAAd,CAEf,OAAW,EAAJ,CAAAuH,CAAA,CAAQ,IAAKuH,CAAAA,KAAL,CAAW,IAAK3L,CAAAA,MAAO7D,CAAAA,MAAOsO,CAAAA,SAAnB,CAA6B,IAAKzK,CAAAA,MAAO3D,CAAAA,KAAzC,CAAiDiO,GAAjD,CAAsDA,GAAtD,CAA2D,CAA3D,CAA8D,CAA9D,CAAgF,IAAKhO,CAAAA,IAArF,CAAX,CAAR,CAAiH,CAAA,CAhB/G,CAmBba,WAAW,EAAG,CAAE,MAAO,KAAK0O,CAAAA,OAAL,CAAa,CAAb,CAAT,CAEd9P,WAAW,EAAG,CAAE,MAAO,KAAK8P,CAAAA,OAAL,CAAa,CAAC,CAAd,CAAT,CACdC,UAAU,CAACxB,GAAD,CAAM,CAAA,IACRjO,KADQ;AACDF,MAAX,EAAmB,CAAE,OAAA6D,MAAF,CAAnB,CAAgC,IAAhC,CACA,IAAIA,MAAJ,CAAY,CACR,GAAU,CAAV,CAAIsK,GAAJ,CACI,IAAI,IAAKjO,CAAAA,KAAT,CAAiB2D,MAAOA,CAAAA,MAAOA,CAAAA,MAAOxC,CAAAA,MAAtC,CACI,MAAO,CAAA,CADX,CADJ,IAKI,KAASD,KAAT,CAAa,CAAb,CAAgBA,KAAhB,CAAoB,IAAKlB,CAAAA,KAAzB,CAAgCkB,KAAA,EAAhC,CACI,GAAIyC,MAAOA,CAAAA,MAAOA,CAAAA,MAAd,CAAqBzC,KAArB,CAAyB,CAAzB,CAAJ,CAAkC,IAAKlB,CAAAA,KAAvC,CACI,MAAO,CAAA,CAEnB,EAAC,CAAEA,KAAF,CAASF,MAAT,CAAD,CAAqB6D,MAArB,CAVQ,CAAZ,IAaI,CAAC,CAAE3D,KAAF,CAAS,QAASF,MAAlB,CAAD,CAA8B,IAAKmN,CAAAA,KAAnC,CAEJ,KAAA,CAAOnN,MAAP,CAAe,CAAEE,KAAF,CAAS,QAASF,MAAlB,CAAf,CAA4CA,MAA5C,CACI,GAAY,CAAC,CAAb,CAAIE,KAAJ,CACI,IAAK,IAAIkB,EAAIlB,KAAJkB,CAAY+M,GAAhB,CAAqBI,EAAU,CAAN,CAAAJ,GAAA,CAAU,CAAC,CAAX,CAAenO,MAAOmN,CAAAA,KAAMxL,CAAAA,QAASN,CAAAA,MAAnE,CAA2ED,CAA3E,EAAgFmN,CAAhF,CAAmFnN,CAAnF,EAAwF+M,GAAxF,CAEI,GADInI,KACA,CADQhG,MAAOmN,CAAAA,KAAMxL,CAAAA,QAAb,CAAsBP,CAAtB,CACR,CAAC,IAAKjB,CAAAA,IAAN,CAAarB,OAAQsB,CAAAA,QAASqN,CAAAA,gBAA9B,EACAzH,KADA,WACiBlE,WADjB,EAEA,CAACkE,KAAMtG,CAAAA,IAAK6B,CAAAA,WAFZ;AAGAE,QAAA,CAASuE,KAAT,CAHJ,CAII,MAAO,CAAA,CAGvB,OAAO,CAAA,CA5BK,CA8BhB4J,IAAI,CAACzB,GAAD,CAAM7N,KAAN,CAAa,CACb,GAAIA,KAAJ,EAAa,IAAKmP,CAAAA,UAAL,CAAgBtB,GAAhB,CAAqB,CAArB,CAAwB,CAAxB,CAAb,CACI,MAAO,CAAA,CACX,KAAA,CAAA,CAAA,CAAS,CACL,GAAI,IAAKuB,CAAAA,OAAL,CAAavB,GAAb,CAAJ,CACI,MAAO,CAAA,CACX,IAAI,IAAKwB,CAAAA,UAAL,CAAgBxB,GAAhB,CAAJ,EAA4B,CAAC,IAAKnO,CAAAA,MAAL,EAA7B,CACI,MAAO,CAAA,CAJN,CAHI,CAejB4C,IAAI,CAACtC,KAAA,CAAQ,CAAA,CAAT,CAAe,CAAE,MAAO,KAAKsP,CAAAA,IAAL,CAAU,CAAV,CAAatP,KAAb,CAAT,CAKnBuP,IAAI,CAACvP,KAAA,CAAQ,CAAA,CAAT,CAAe,CAAE,MAAO,KAAKsP,CAAAA,IAAL,CAAU,CAAC,CAAX,CAActP,KAAd,CAAT,CAInB4M,MAAM,CAACjO,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CAElB,IAAA,EAAO,IAAKE,CAAAA,IAAZ,EAAoB,IAAKC,CAAAA,EAAzB,GACY,CAAP,CAAAH,IAAA,CAAW,IAAKE,CAAAA,IAAhB,EAAwBD,GAAxB,CAA8B,IAAKC,CAAAA,IAAnC,CAA0CD,GAD/C,IAEY,CAAC,CAAR,CAAAD,IAAA,CAAY,IAAKG,CAAAA,EAAjB,EAAuBF,GAAvB,CAA6B,IAAKE,CAAAA,EAAlC,CAAuCF,GAF5C,IAGS,IAAKe,CAAAA,MAAL,EAHT,CAAA,EAMA,IAAA,CAAO,IAAKyP,CAAAA,UAAL,CAAgB,CAAhB,CAAmBxQ,GAAnB,CAAwBD,IAAxB,CAAP,CAAA,EACA,MAAO,KATW,CAalB,QAAO,EAAA,CACP,GAAI,CAAC,IAAK6E,CAAAA,MAAV,CACI,MAAO,KAAKsJ,CAAAA,KAFT,KAGH2C;AAAQ,IAAKX,CAAAA,UAHV,KAGsBtO,OAAS,IAH/B,CAGqCiH,MAAQ,CACpD,IAAIgI,KAAJ,EAAaA,KAAM3O,CAAAA,OAAnB,EAA8B,IAAK0C,CAAAA,MAAnC,CACI,CAAA,CAAM,IAAK,IAAI3D,MAAQ,IAAKA,CAAAA,KAAjB,CAAwB+H,EAAI,IAAKiH,CAAAA,KAAM7N,CAAAA,MAA5C,CAAyD,CAAzD,EAAoD4G,CAApD,CAAA,CAA6D,CAC/D,IAAK,IAAIuF,EAAIsC,KAAb,CAAoBtC,CAApB,CAAuBA,CAAvB,CAA2BA,CAAEa,CAAAA,OAA7B,CACI,GAAIb,CAAEtN,CAAAA,KAAN,EAAeA,KAAf,CAAsB,CAClB,GAAIA,KAAJ,EAAa,IAAKA,CAAAA,KAAlB,CACI,MAAOsN,EACX3M,OAAA,CAAS2M,CACT1F,MAAA,CAAQG,CAAR,CAAY,CACZ,OAAM,CALY,CAO1B/H,KAAA,CAAQ,IAAKgP,CAAAA,KAAL,CAAW,EAAEjH,CAAb,CATuD,CAYvE,IAAS7G,KAAT,CAAa0G,KAAb,CAAoB1G,KAApB,CAAwB,IAAK8N,CAAAA,KAAM7N,CAAAA,MAAnC,CAA2CD,KAAA,EAA3C,CACIP,MAAA,CAAS,IAAI4N,UAAJ,CAAe,IAAK5K,CAAAA,MAApB,CAA4BhD,MAA5B,CAAoC,IAAKqO,CAAAA,KAAL,CAAW9N,KAAX,CAApC,CACb,OAAO,KAAK+N,CAAAA,UAAZ,CAAyB,IAAIV,UAAJ,CAAe,IAAK5K,CAAAA,MAApB,CAA4BhD,MAA5B,CAAoC,IAAKX,CAAAA,KAAzC,CAnBlB,CAwBP,QAAO,EAAA,CACP,MAAO,KAAK2D,CAAAA,MAAL,CAAc,IAAd,CAAqB,IAAKsJ,CAAAA,KAAMA,CAAAA,KADhC,CAOXG,OAAO,CAAChN,KAAD;AAAQiN,KAAR,CAAe,CAClB,IAAK,IAAIzF,MAAQ,CAAjB,CAAA,CAAA,CAAsB,CAClB,IAAIiI,UAAY,CAAA,CAChB,IAAI,IAAKrQ,CAAAA,IAAK6B,CAAAA,WAAd,EAA6C,CAAA,CAA7C,GAA6BjB,KAAA,CAAM,IAAN,CAA7B,CAAoD,CAChD,GAAI,IAAKQ,CAAAA,UAAL,EAAJ,CAAuB,CACnBgH,KAAA,EACA,SAFmB,CAIlB,IAAKpI,CAAAA,IAAK6B,CAAAA,WAAf,GACIwO,SADJ,CACgB,CAAA,CADhB,CALgD,CAQpD,IAAA,CAAA,CAAA,CAAS,CACDA,SAAJ,EAAiBxC,KAAjB,EACIA,KAAA,CAAM,IAAN,CAEJ,IAAI,IAAKvM,CAAAA,WAAL,EAAJ,CACI,KACJ,IAAI,CAAC8G,KAAL,CACI,MACJ,KAAK9H,CAAAA,MAAL,EACA8H,MAAA,EACAiI,UAAA,CAAY,CAAA,CAVP,CAVS,CADJ,CA4BtBf,YAAY,CAAC7N,OAAD,CAAU,CAClB,GAAI,CAAC,IAAK0C,CAAAA,MAAV,CACI,MAAO3C,iBAAA,CAAiB,IAAK7B,CAAAA,IAAtB,CAA4B8B,OAA5B,CAFO,KAGd,CAAE0C,MAAF,CAAA,CAAa,IAAKA,CAAAA,MAHJ,CAGY,CAAEb,KAAF,CAAA,CAAYa,MAAOoC,CAAAA,GACjD,KAAK,IAAI7E,EAAID,OAAQE,CAAAA,MAAZD,CAAqB,CAAzB,CAA4B6G,EAAI,IAAKiH,CAAAA,KAAM7N,CAAAA,MAAf4G,CAAwB,CAAzD,CAAiE,CAAjE,EAA4D7G,CAA5D,CAAoE6G,CAAA,EAApE,CAAyE,CACrE,GAAQ,CAAR,CAAIA,CAAJ,CACI,MAAO/G,iBAAA,CAAiB,IAAK7B,CAAAA,IAAtB;AAA4B8B,OAA5B,CAAqCC,CAArC,CACX,KAAI1B,KAAOsD,KAAA,CAAMa,MAAOA,CAAAA,MAAP,CAAc,IAAKqL,CAAAA,KAAL,CAAWjH,CAAX,CAAd,CAAN,CACX,IAAI,CAACvI,IAAK6B,CAAAA,WAAV,CAAuB,CACnB,GAAIJ,OAAA,CAAQC,CAAR,CAAJ,EAAkBD,OAAA,CAAQC,CAAR,CAAlB,EAAgC1B,IAAK8B,CAAAA,IAArC,CACI,MAAO,CAAA,CACXJ,EAAA,EAHmB,CAJ8C,CAUzE,MAAO,CAAA,CAdW,CAtP1B,CAscA,MAAM0E,cAAgB,IAAI0G,OAqE1B,MAAMwD,YAAN,CACI1F,WAAW,EAAG,CACV,IAAKT,CAAAA,GAAL,CAAW,IAAI2C,OADL,CAGdyD,SAAS,CAACpM,MAAD,CAAS3D,KAAT,CAAgBkK,KAAhB,CAAuB,CAC5B,IAAI7J,MAAQ,IAAKsJ,CAAAA,GAAI9D,CAAAA,GAAT,CAAalC,MAAb,CACPtD,MAAL,EACI,IAAKsJ,CAAAA,GAAI5D,CAAAA,GAAT,CAAapC,MAAb,CAAqBtD,KAArB,CAA6B,IAAI2P,GAAjC,CACJ3P,MAAM0F,CAAAA,GAAN,CAAU/F,KAAV,CAAiBkK,KAAjB,CAJ4B,CAMhC+F,SAAS,CAACtM,MAAD,CAAS3D,KAAT,CAAgB,CAErB,OADIK,MACJ,CADY,IAAKsJ,CAAAA,GAAI9D,CAAAA,GAAT,CAAalC,MAAb,CACZ,GAAgBtD,MAAMwF,CAAAA,GAAN,CAAU7F,KAAV,CAFK,CAKzB+F,GAAG,CAAC5G,IAAD,CAAO+K,KAAP,CAAc,CACT/K,IAAJ,WAAoBoP,WAApB,CACI,IAAKwB,CAAAA,SAAL,CAAe5Q,IAAK8B,CAAAA,OAAQ0C,CAAAA,MAA5B;AAAoCxE,IAAKa,CAAAA,KAAzC,CAAgDkK,KAAhD,CADJ,CAES/K,IAFT,WAEyBY,SAFzB,EAGI,IAAK4J,CAAAA,GAAI5D,CAAAA,GAAT,CAAa5G,IAAKqC,CAAAA,IAAlB,CAAwB0I,KAAxB,CAJS,CAOjBrE,GAAG,CAAC1G,IAAD,CAAO,CACN,MAAOA,KAAA,WAAgBoP,WAAhB,CAA6B,IAAK0B,CAAAA,SAAL,CAAe9Q,IAAK8B,CAAAA,OAAQ0C,CAAAA,MAA5B,CAAoCxE,IAAKa,CAAAA,KAAzC,CAA7B,CACDb,IAAA,WAAgBY,SAAhB,CAA2B,IAAK4J,CAAAA,GAAI9D,CAAAA,GAAT,CAAa1G,IAAKqC,CAAAA,IAAlB,CAA3B,CAAqDiC,IAAAA,EAFrD,CAKVyM,SAAS,CAACxP,MAAD,CAASwJ,KAAT,CAAgB,CACjBxJ,MAAOiD,CAAAA,MAAX,CACI,IAAKoM,CAAAA,SAAL,CAAerP,MAAOiD,CAAAA,MAAOA,CAAAA,MAA7B,CAAqCjD,MAAOV,CAAAA,KAA5C,CAAmDkK,KAAnD,CADJ,CAGI,IAAKP,CAAAA,GAAI5D,CAAAA,GAAT,CAAarF,MAAOc,CAAAA,IAApB,CAA0B0I,KAA1B,CAJiB,CAQzBiG,SAAS,CAACzP,MAAD,CAAS,CACd,MAAOA,OAAOiD,CAAAA,MAAP,CAAgB,IAAKsM,CAAAA,SAAL,CAAevP,MAAOiD,CAAAA,MAAOA,CAAAA,MAA7B,CAAqCjD,MAAOV,CAAAA,KAA5C,CAAhB,CAAqE,IAAK2J,CAAAA,GAAI9D,CAAAA,GAAT,CAAanF,MAAOc,CAAAA,IAApB,CAD9D,CAnCtB,CA+CA,KAAMqI,aAAN,CAKIO,WAAW,CAIXpL,IAJW,CAMXC,EANW;AAQXuC,IARW,CAaX2E,MAbW,CAaH2D,SAAA,CAAY,CAAA,CAbT,CAagBC,OAAA,CAAU,CAAA,CAb1B,CAaiC,CACxC,IAAK/K,CAAAA,IAAL,CAAYA,IACZ,KAAKC,CAAAA,EAAL,CAAUA,EACV,KAAKuC,CAAAA,IAAL,CAAYA,IACZ,KAAK2E,CAAAA,MAAL,CAAcA,MACd,KAAKiK,CAAAA,IAAL,EAAatG,SAAA,CAAY,CAAZ,CAA4B,CAAzC,GAA+CC,OAAA,CAAU,CAAV,CAAwB,CAAvE,CALwC,CAWxC,aAAY,EAAA,CAAE,MAAqC,EAArC,EAAQ,IAAKqG,CAAAA,IAAb,CAAoB,CAApB,CAAF,CAGZ,WAAU,EAAA,CAAE,MAAmC,EAAnC,EAAQ,IAAKA,CAAAA,IAAb,CAAoB,CAApB,CAAF,CAOPC,cAAO,CAAC7O,IAAD,CAAO8O,SAAA,CAAY,EAAnB,CAAuBC,OAAA,CAAU,CAAA,CAAjC,CAAwC,CAC9C5P,OAAAA,CAAS,CAAC,IAAIkJ,YAAJ,CAAiB,CAAjB,CAAoBrI,IAAKL,CAAAA,MAAzB,CAAiCK,IAAjC,CAAuC,CAAvC,CAA0C,CAAA,CAA1C,CAAiD+O,OAAjD,CAAD,CACb,KAAK,IAAIC,CAAT,GAAcF,UAAd,CACQE,CAAEvR,CAAAA,EAAN,CAAWuC,IAAKL,CAAAA,MAAhB,EACIR,OAAOI,CAAAA,IAAP,CAAYyP,CAAZ,CACR,OAAO7P,QAL2C,CAU/C8P,mBAAY,CAACH,SAAD,CAAY1G,OAAZ,CAAqB8G,MAAA,CAAS,GAA9B,CAAmC,CAClD,GAAI,CAAC9G,OAAQzI,CAAAA,MAAb,CACI,MAAOmP,UACX,KAAI3P,OAAS,EAAb,CACIgQ,GAAK,CADT,CACYC;AAAQN,SAAUnP,CAAAA,MAAV,CAAmBmP,SAAA,CAAU,CAAV,CAAnB,CAAkC,IACtD,KAAK,IAAIO,GAAK,CAAT,CAAY9R,IAAM,CAAlB,CAAqBsI,IAAM,CAAhC,CAAA,CAAoCwJ,EAAA,EAApC,CAA0C,CACtC,IAAIC,MAAQD,EAAA,CAAKjH,OAAQzI,CAAAA,MAAb,CAAsByI,OAAA,CAAQiH,EAAR,CAAtB,CAAoC,IAAhD,CACIE,QAAUD,KAAA,CAAQA,KAAME,CAAAA,KAAd,CAAsB,GACpC,IAAID,OAAJ,CAAchS,GAAd,EAAqB2R,MAArB,CACI,IAAA,CAAOE,KAAP,EAAgBA,KAAM5R,CAAAA,IAAtB,CAA6B+R,OAA7B,CAAA,CAAsC,CAClC,IAAIE,IAAML,KACV,IAAI7R,GAAJ,EAAWkS,GAAIjS,CAAAA,IAAf,EAAuB+R,OAAvB,EAAkCE,GAAIhS,CAAAA,EAAtC,EAA4CoI,GAA5C,CAAiD,CAAA,IACzC6J,MAAQvK,IAAKyC,CAAAA,GAAL,CAAS6H,GAAIjS,CAAAA,IAAb,CAAmBD,GAAnB,CAARmS,CAAkC7J,GADO,CACF8J,IAAMxK,IAAK0C,CAAAA,GAAL,CAAS4H,GAAIhS,CAAAA,EAAb,CAAiB8R,OAAjB,CAANI,CAAkC9J,GAC7E4J,IAAA,CAAMC,KAAA,EAASC,GAAT,CAAe,IAAf,CAAsB,IAAItH,YAAJ,CAAiBqH,KAAjB,CAAwBC,GAAxB,CAA6BF,GAAIzP,CAAAA,IAAjC,CAAuCyP,GAAI9K,CAAAA,MAA3C,CAAoDkB,GAApD,CAA8D,CAA9D,CAAyDwJ,EAAzD,CAAiE,CAAC,CAACC,KAAnE,CAFiB,CAI7CG,GAAJ,EACItQ,MAAOI,CAAAA,IAAP,CAAYkQ,GAAZ,CACJ,IAAIL,KAAM3R,CAAAA,EAAV,CAAe8R,OAAf,CACI,KACJH,MAAA,CAAQD,EAAA,CAAKL,SAAUnP,CAAAA,MAAf,CAAwBmP,SAAA,CAAUK,EAAA,EAAV,CAAxB,CAA0C,IAVhB,CAY1C,GAAI,CAACG,KAAL,CACI,KACJ/R;GAAA,CAAM+R,KAAMM,CAAAA,GACZ/J,IAAA,CAAMyJ,KAAMM,CAAAA,GAAZ,CAAkBN,KAAMO,CAAAA,GAnBc,CAqB1C,MAAO1Q,OA1B2C,CAjD1D,CA+EA,KAAM2Q,OAAN,CASIC,UAAU,CAACC,KAAD,CAAQlB,SAAR,CAAmBnI,MAAnB,CAA2B,CACb,QAApB,EAAI,MAAOqJ,MAAX,GACIA,KADJ,CACY,IAAIC,WAAJ,CAAgBD,KAAhB,CADZ,CAEArJ,OAAA,CAAUA,MAAD,CAAyCA,MAAOhH,CAAAA,MAAP,CAAgBgH,MAAOwB,CAAAA,GAAP,CAAWlB,CAAA,EAAK,IAAIC,KAAJ,CAAUD,CAAEzJ,CAAAA,IAAZ,CAAkByJ,CAAExJ,CAAAA,EAApB,CAAhB,CAAhB,CAA2D,CAAC,IAAIyJ,KAAJ,CAAU,CAAV,CAAa,CAAb,CAAD,CAApG,CAAU,CAAC,IAAIA,KAAJ,CAAU,CAAV,CAAa8I,KAAMrQ,CAAAA,MAAnB,CAAD,CACnB,OAAO,KAAKuQ,CAAAA,WAAL,CAAiBF,KAAjB,CAAwBlB,SAAxB,EAAqC,EAArC,CAAyCnI,MAAzC,CAJ0B,CAOrCwJ,KAAK,CAACH,KAAD,CAAQlB,SAAR,CAAmBnI,MAAnB,CAA2B,CAE5B,IADIwJ,KACJ,CADY,IAAKJ,CAAAA,UAAL,CAAgBC,KAAhB,CAAuBlB,SAAvB,CAAkCnI,MAAlC,CACZ,CAAA,CAAA,CAEI,GADIyJ,SACJ,CADWD,KAAME,CAAAA,OAAN,EACX,CACI,MAAOD,UALa,CAhBpC,CAyBA,KAAMH,YAAN,CACIrH,WAAW,CAAC0H,MAAD,CAAS,CAChB,IAAKA,CAAAA,MAAL,CAAcA,MADE,CAGhB,UAAS,EAAA,CAAE,MAAO,KAAKA,CAAAA,MAAO3Q,CAAAA,MAArB,CACb4Q,KAAK,CAAC/S,IAAD,CAAO,CAAE,MAAO,KAAK8S,CAAAA,MAAOxK,CAAAA,KAAZ,CAAkBtI,IAAlB,CAAT,CACR,cAAa,EAAA,CAAE,MAAO,CAAA,CAAT,CACjBgT,IAAI,CAAChT,IAAD;AAAOC,EAAP,CAAW,CAAE,MAAO,KAAK6S,CAAAA,MAAOxK,CAAAA,KAAZ,CAAkBtI,IAAlB,CAAwBC,EAAxB,CAAT,CAPnB,CAkBA,KAAMgT,WAAN,CACI7H,WAAW,CAACa,MAAD,CAAS0G,KAAT,CAAgBjI,OAAhB,CAAyBwI,MAAzB,CAAiC/J,MAAjC,CAAyC,CAChD,IAAK8C,CAAAA,MAAL,CAAcA,MACd,KAAK0G,CAAAA,KAAL,CAAaA,KACb,KAAKjI,CAAAA,OAAL,CAAeA,OACf,KAAKwI,CAAAA,MAAL,CAAcA,MACd,KAAK/J,CAAAA,MAAL,CAAcA,MALkC,CADxD,CASA,KAAMgK,cAAN,CACI/H,WAAW,CAACa,MAAD,CAASmH,SAAT,CAAoB7I,MAApB,CAA4BvJ,KAA5B,CAAmCqC,KAAnC,CAA0C6P,MAA1C,CAAkDvC,IAAlD,CAAwD,CAC/D,IAAK1E,CAAAA,MAAL,CAAcA,MACd,KAAKmH,CAAAA,SAAL,CAAiBA,SACjB,KAAK7I,CAAAA,MAAL,CAAcA,MACd,KAAKvJ,CAAAA,KAAL,CAAaA,KACb,KAAKqC,CAAAA,KAAL,CAAaA,KACb,KAAK6P,CAAAA,MAAL,CAAcA,MACd,KAAKvC,CAAAA,IAAL,CAAYA,IACZ,KAAK/H,CAAAA,KAAL,CAAa,CACb,KAAKO,CAAAA,MAAL,CAAc,EATiD,CADvE,CAaA,MAAMkK,aAAe,IAAIvN,QAAJ,CAAa,CAAEwF,QAAS,CAAA,CAAX,CAAb,CACrB,MAAMgI,WAAN,CACIlI,WAAW,CAACrF,IAAD;AAAOwN,IAAP,CAAaf,KAAb,CAAoBlB,SAApB,CAA+BnI,MAA/B,CAAuC,CAC9C,IAAKoK,CAAAA,IAAL,CAAYA,IACZ,KAAKf,CAAAA,KAAL,CAAaA,KACb,KAAKlB,CAAAA,SAAL,CAAiBA,SACjB,KAAKnI,CAAAA,MAAL,CAAcA,MACd,KAAK9H,CAAAA,KAAL,CAAa,EACb,KAAKmS,CAAAA,SAAL,CAAiB,CAEjB,KAAKC,CAAAA,SAAL,CADA,IAAKC,CAAAA,QACL,CADgB,IAEhB,KAAKC,CAAAA,SAAL,CAAiB5N,IAT6B,CAWlD8M,OAAO,EAAG,CACN,GAAI,IAAKc,CAAAA,SAAT,CAAoB,CAChB,IAAIf,KAAO,IAAKe,CAAAA,SAAUd,CAAAA,OAAf,EACX,IAAI,CAACD,IAAL,CACI,MAAO,KACX,KAAKe,CAAAA,SAAL,CAAiB,IACjB,KAAKD,CAAAA,QAAL,CAAgBd,IAChB,KAAKgB,CAAAA,UAAL,EACA,IAAsB,IAAtB,EAAI,IAAKH,CAAAA,SAAT,CACI,IAAK,IAAIpS,KAAT,GAAkB,KAAKA,CAAAA,KAAvB,CACIA,KAAMsR,CAAAA,KAAMkB,CAAAA,MAAZ,CAAmB,IAAKJ,CAAAA,SAAxB,CATQ,CAWpB,GAAI,IAAKD,CAAAA,SAAT,EAAsB,IAAKnS,CAAAA,KAAMc,CAAAA,MAAjC,CAII,MAHIR,KAGGA,CAHM,IAAK+R,CAAAA,QAGX/R,CAFe,IAEfA,EAFH,IAAK8R,CAAAA,SAEF9R;CADHA,IACGA,CADM,IAAIiE,IAAJ,CAASjE,IAAOnB,CAAAA,IAAhB,CAAsBmB,IAAOc,CAAAA,QAA7B,CAAuCd,IAAOuB,CAAAA,SAA9C,CAAyDvB,IAAOQ,CAAAA,MAAhE,CAAwER,IAAO+M,CAAAA,UAAWvI,CAAAA,MAAlB,CAAyB,CAAC,CAACkN,YAAD,CAAe,IAAKI,CAAAA,SAApB,CAAD,CAAzB,CAAxE,CACN9R,EAAAA,IAEPN,KAAAA,CAAQ,IAAKA,CAAAA,KAAL,CAAW,IAAKmS,CAAAA,SAAhB,CACZ,IADwCZ,KACxC,CAD+CvR,IAAMsR,CAAAA,KAAME,CAAAA,OAAZ,EAC/C,CAAU,CACN,IAAKW,CAAAA,SAAL,EAKA,KAAIvN,MAAQ+E,MAAOoC,CAAAA,MAAP,CAAcpC,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CAAd,CAAmC9K,IAAM6R,CAAAA,MAAOjN,CAAAA,KAAhD,CACZA,MAAA,CAAMH,QAASiG,CAAAA,OAAQ3I,CAAAA,EAAvB,CAAA,CAA6B,IAAI4I,WAAJ,CAAgB4G,KAAhB,CAAsBvR,IAAMqJ,CAAAA,OAA5B,CAAqCrJ,IAAM4K,CAAAA,MAA3C,CAC7B5K,KAAM6R,CAAAA,MAAOjN,CAAAA,KAAb,CAAqBA,KARf,CAUV,MAAO,KA7BD,CA+BN,aAAY,EAAA,CACZ,GAAI,IAAK0N,CAAAA,SAAT,CACI,MAAO,EACX,KAAI5T,IAAM,IAAKyS,CAAAA,KAAMrQ,CAAAA,MACrB,KAAK,IAAID,EAAI,IAAKsR,CAAAA,SAAlB,CAA6BtR,CAA7B,CAAiC,IAAKb,CAAAA,KAAMc,CAAAA,MAA5C,CAAoDD,CAAA,EAApD,CACQ,IAAKb,CAAAA,KAAL,CAAWa,CAAX,CAAciH,CAAAA,MAAd,CAAqB,CAArB,CAAwBnJ,CAAAA,IAA5B;AAAmCD,GAAnC,GACIA,GADJ,CACU4H,IAAK0C,CAAAA,GAAL,CAAStK,GAAT,CAAc,IAAKsB,CAAAA,KAAL,CAAWa,CAAX,CAAcyQ,CAAAA,KAAMmB,CAAAA,SAAlC,CADV,CAGJ,OAAO/T,IARK,CAUhB8T,MAAM,CAAC9T,GAAD,CAAM,CACR,IAAK0T,CAAAA,SAAL,CAAiB1T,GACjB,IAAI,IAAK4T,CAAAA,SAAT,CACI,IAAKA,CAAAA,SAAUE,CAAAA,MAAf,CAAsB9T,GAAtB,CADJ,KAGI,KAAK,IAAImC,EAAI,IAAKsR,CAAAA,SAAlB,CAA6BtR,CAA7B,CAAiC,IAAKb,CAAAA,KAAMc,CAAAA,MAA5C,CAAoDD,CAAA,EAApD,CACI,IAAKb,CAAAA,KAAL,CAAWa,CAAX,CAAcyQ,CAAAA,KAAMkB,CAAAA,MAApB,CAA2B9T,GAA3B,CANA,CAQZ6T,UAAU,EAAG,CACT,IAAIG,eAAiB,IAAIC,cAAJ,CAAmB,IAAK1C,CAAAA,SAAxB,CAArB,CACI5G,QAAU,IADd,CAEI5C,QAAU,IAFd,CAGIpG,OAAS,IAAIkM,UAAJ,CAAe,IAAI7M,QAAJ,CAAa,IAAK2S,CAAAA,QAAlB,CAA4B,IAAKvK,CAAAA,MAAL,CAAY,CAAZ,CAAenJ,CAAAA,IAA3C,CAAiD,CAAjD,CAAoD,IAApD,CAAf,CAA0EJ,OAAQsB,CAAAA,QAASqN,CAAAA,gBAA3F,CAA8G3O,OAAQsB,CAAAA,QAASuO,CAAAA,YAA/H,CACb,EAAA,CAAM,IAAK,IAAI8D,IAAJ,CAAUU,SAAf,CAA4C,IAA5C,EAA0B,IAAKR,CAAAA,SAA/B;AAAoD/R,MAAO1B,CAAAA,IAA3D,CAAkE,IAAKyT,CAAAA,SAAvE,CAAA,CAAmF,CAAA,IACjFrS,MAAQ,CAAA,CAAZ,KAAkB2G,KAClB,IAAIgM,cAAeG,CAAAA,OAAf,CAAuBxS,MAAvB,CAAJ,CAAoC,CAChC,GAAIgJ,OAAJ,GACQgB,KADR,CACgBhB,OAAQH,CAAAA,MAAO4J,CAAAA,IAAf,CAAoBC,CAAA,EAAKA,CAAE3J,CAAAA,IAAKzK,CAAAA,IAAZ,EAAoB0B,MAAO1B,CAAAA,IAA3B,EAAmCoU,CAAE3J,CAAAA,IAAKxK,CAAAA,EAA1C,EAAgDyB,MAAOzB,CAAAA,EAAvD,EAA6DmU,CAAE5J,CAAAA,KAAME,CAAAA,OAAzF,CADhB,EAGQ,IAAK,IAAIjB,UAAT,GAAciC,MAAMlB,CAAAA,KAAME,CAAAA,OAA1B,CAAmC,CAAA,IAC3B1K,KAAOyJ,UAAEzJ,CAAAA,IAATA,CAAgB0L,KAAM3L,CAAAA,GADK,CACAE,GAAKwJ,UAAExJ,CAAAA,EAAPA,CAAYyL,KAAM3L,CAAAA,GAC7CC,KAAJ,EAAY0B,MAAO1B,CAAAA,IAAnB,EAA2BC,EAA3B,EAAiCyB,MAAOzB,CAAAA,EAAxC,EAA8C,CAACyK,OAAQvB,CAAAA,MAAOzG,CAAAA,IAAf,CAAoB+G,CAAA,EAAKA,CAAEzJ,CAAAA,IAAP,CAAcC,EAAd,EAAoBwJ,CAAExJ,CAAAA,EAAtB,CAA2BD,IAA/C,CAA/C,EACI0K,OAAQvB,CAAAA,MAAOpH,CAAAA,IAAf,CAAoB,CAAE/B,IAAF,CAAQC,EAAR,CAApB,CAH2B,CAM3CmB,KAAA,CAAQ,CAAA,CAVwB,CAApC,IAYK,IAAI0G,OAAJ,GAAgBmM,SAAhB,CAA4BpM,UAAA,CAAWC,OAAQqB,CAAAA,MAAnB,CAA2BzH,MAAO1B,CAAAA,IAAlC,CAAwC0B,MAAOzB,CAAAA,EAA/C,CAA5B,EACDmB,KAAA;AAAqB,CAArB,EAAQ6S,SADP,KAGA,IAAI,CAACvS,MAAOlB,CAAAA,IAAK6B,CAAAA,WAAjB,EAAgCX,MAAO1B,CAAAA,IAAvC,CAA8C0B,MAAOzB,CAAAA,EAArD,GAA4DsT,IAA5D,CAAmE,IAAKA,CAAAA,IAAL,CAAU7R,MAAV,CAAkB,IAAK8Q,CAAAA,KAAvB,CAAnE,EAAmG,CAC/F9Q,MAAOc,CAAAA,IAAZ,EACI+F,WAAA,CAAY7G,MAAZ,CACJ,KAAI2S,UAAYN,cAAeO,CAAAA,UAAf,CAA0B5S,MAAO1B,CAAAA,IAAjC,CAAuCuT,IAAKtH,CAAAA,MAA5C,CAChB,IAA2B,UAA3B,EAAI,MAAOsH,KAAK7I,CAAAA,OAAhB,CACIA,OAAA,CAAU,IAAIyI,aAAJ,CAAkBI,IAAKtH,CAAAA,MAAvB,CAA+BsH,IAAK7I,CAAAA,OAApC,CAA6C2J,SAA7C,CAAwD,IAAKhT,CAAAA,KAAMc,CAAAA,MAAnE,CAA2ET,MAAO1B,CAAAA,IAAlF,CAAwF0B,MAAOc,CAAAA,IAA/F,CAAqGkI,OAArG,CADd,KAGK,CACD,IAAIvB,OAASF,WAAA,CAAY,IAAKE,CAAAA,MAAjB,CAAyBoK,IAAK7I,CAAAA,OAA9B,EAAyC,CAAC,IAAIhB,KAAJ,CAAUhI,MAAO1B,CAAAA,IAAjB,CAAuB0B,MAAOzB,CAAAA,EAA9B,CAAD,CAAzC,CACTkJ,OAAOhH,CAAAA,MAAX,EACI,IAAKd,CAAAA,KAAMU,CAAAA,IAAX,CAAgB,IAAIkR,UAAJ,CAAeM,IAAKtH,CAAAA,MAApB,CAA4BsH,IAAKtH,CAAAA,MAAOsG,CAAAA,UAAZ,CAAuB,IAAKC,CAAAA,KAA5B;AAAmClI,cAAA,CAAe+J,SAAf,CAA0BlL,MAA1B,CAAnC,CAAsEA,MAAtE,CAA5B,CAA2GoK,IAAK7I,CAAAA,OAAL,CAAe6I,IAAK7I,CAAAA,OAAQC,CAAAA,GAAb,CAAiBlB,CAAA,EAAK,IAAIC,KAAJ,CAAUD,CAAEzJ,CAAAA,IAAZ,CAAmB0B,MAAO1B,CAAAA,IAA1B,CAAgCyJ,CAAExJ,CAAAA,EAAlC,CAAuCyB,MAAO1B,CAAAA,IAA9C,CAAtB,CAAf,CAA4F,IAAvM,CAA6M0B,MAAOc,CAAAA,IAApN,CAA0N2G,MAA1N,CAAhB,CACCoK,KAAK7I,CAAAA,OAAV,CAESvB,MAAOhH,CAAAA,MAFhB,GAGI2F,OAHJ,CAGc,CAAEqB,MAAF,CAAUP,MAAO,CAAjB,CAAoB+H,KAAM7I,OAA1B,CAHd,EACI1G,KADJ,CACY,CAAA,CALX,CAP+F,CAAnG,IAiBIsJ,QAAJ,GAAgB3C,KAAhB,CAAwB2C,OAAQ0I,CAAAA,SAAR,CAAkB1R,MAAlB,CAAxB,IACa,CAAA,CAEd,GAFIqG,KAEJ,GADIA,KACJ,CADY,IAAI2B,KAAJ,CAAUhI,MAAO1B,CAAAA,IAAjB,CAAuB0B,MAAOzB,CAAAA,EAA9B,CACZ,EAAI8H,KAAM/H,CAAAA,IAAV,CAAiB+H,KAAM9H,CAAAA,EAAvB,EACIyK,OAAQvB,CAAAA,MAAOpH,CAAAA,IAAf,CAAoBgG,KAApB,CAJH,CAML,IAAI3G,KAAJ,EAAaM,MAAOE,CAAAA,UAAP,EAAb,CACQ8I,OAEJ,EADIA,OAAQ9B,CAAAA,KAAR,EACJ,CAAId,OAAJ,EACIA,OAAQc,CAAAA,KAAR,EAJR,KAOI,KAAA,CACQ,CAAAlH,MAAOI,CAAAA,WAAP,EADR,CAAA,CAAS,CAGL,GAAI,CAACJ,MAAOZ,CAAAA,MAAP,EAAL,CACI,MAAM,CACN4J;OAAJ,EAAe,CAAC,EAAEA,OAAQ9B,CAAAA,KAA1B,GACQO,KAGJ,CAHaF,WAAA,CAAY,IAAKE,CAAAA,MAAjB,CAAyBuB,OAAQvB,CAAAA,MAAjC,CAGb,CAFIA,KAAOhH,CAAAA,MAEX,EADI,IAAKd,CAAAA,KAAMsI,CAAAA,MAAX,CAAkBe,OAAQ1J,CAAAA,KAA1B,CAAiC,CAAjC,CAAoC,IAAIiS,UAAJ,CAAevI,OAAQuB,CAAAA,MAAvB,CAA+BvB,OAAQuB,CAAAA,MAAOsG,CAAAA,UAAf,CAA0B,IAAKC,CAAAA,KAA/B,CAAsClI,cAAA,CAAeI,OAAQH,CAAAA,MAAvB,CAA+BpB,KAA/B,CAAtC,CAA8EA,KAA9E,CAA/B,CAAsHuB,OAAQvB,CAAAA,MAAOwB,CAAAA,GAAf,CAAmBlB,CAAA,EAAK,IAAIC,KAAJ,CAAUD,CAAEzJ,CAAAA,IAAZ,CAAmB0K,OAAQrH,CAAAA,KAA3B,CAAkCoG,CAAExJ,CAAAA,EAApC,CAAyCyK,OAAQrH,CAAAA,KAAjD,CAAxB,CAAtH,CAAwMqH,OAAQwI,CAAAA,MAAhN,CAAwN/J,KAAxN,CAApC,CACJ,CAAAuB,OAAA,CAAUA,OAAQiG,CAAAA,IAJtB,CAMI7I,QAAJ,EAAe,CAAC,EAAEA,OAAQc,CAAAA,KAA1B,GACId,OADJ,CACcA,OAAQ6I,CAAAA,IADtB,CAXK,CA/CwE,CALhF,CA7DjB,CA6LA,KAAM4D,gBAAN,CACInJ,WAAW,CAACoJ,IAAD,CAAOrN,MAAP,CAAe,CACtB,IAAKA,CAAAA,MAAL,CAAcA,MACd,KAAKyL,CAAAA,IAAL,CAAY,CAAA,CACZ,KAAKlR,CAAAA,MAAL,CAAc8S,IAAK9S,CAAAA,MAAL,CAAY9B,OAAQsB,CAAAA,QAASqN,CAAAA,gBAA7B;AAAgD3O,OAAQsB,CAAAA,QAASuO,CAAAA,YAAjE,CAHQ,CAM1BzB,MAAM,CAACjO,GAAD,CAAM,CAAA,IACJ,CAAE2B,MAAF,CAAA,CAAa,IADT,CACeU,EAAIrC,GAAJqC,CAAU,IAAK+E,CAAAA,MACtC,KAAA,CAAO,CAAC,IAAKyL,CAAAA,IAAb,EAAqBlR,MAAO1B,CAAAA,IAA5B,CAAmCoC,CAAnC,CAAA,CACQV,MAAOzB,CAAAA,EAAX,EAAiBF,GAAjB,EAAwB2B,MAAON,CAAAA,KAAP,CAAagB,CAAb,CAAgB,CAAhB,CAAmBxC,OAAQsB,CAAAA,QAASC,CAAAA,cAApC,CAAqDvB,OAAQsB,CAAAA,QAASoO,CAAAA,cAAtE,CAAxB,EACU5N,MAAOgC,CAAAA,IAAP,CAAY,CAAA,CAAZ,CADV,GAEI,IAAKkP,CAAAA,IAFT,CAEgB,CAAA,CAFhB,CAHI,CAQZsB,OAAO,CAACxS,MAAD,CAAS,CACZ,IAAKsM,CAAAA,MAAL,CAAYtM,MAAO1B,CAAAA,IAAnB,CACA,IAAI,CAAC,IAAK4S,CAAAA,IAAV,EAAkB,IAAKlR,CAAAA,MAAO1B,CAAAA,IAA9B,CAAqC,IAAKmH,CAAAA,MAA1C,EAAoDzF,MAAO1B,CAAAA,IAA3D,EAAmE,IAAK0B,CAAAA,MAAOc,CAAAA,IAA/E,CACI,IAAK,IAAIA,KAAO,IAAKd,CAAAA,MAAOc,CAAAA,IAA5B,CAAA,CAAA,CAAoC,CAChC,GAAIA,IAAJ,EAAYd,MAAOc,CAAAA,IAAnB,CACI,MAAO,CAAA,CACX,IAAIA,IAAKC,CAAAA,QAASN,CAAAA,MAAlB,EAAiD,CAAjD,EAA4BK,IAAKU,CAAAA,SAAL,CAAe,CAAf,CAA5B,EAAsDV,IAAKC,CAAAA,QAAL,CAAc,CAAd,CAAtD,UAAkFmD,KAAlF,CACIpD,IAAA;AAAOA,IAAKC,CAAAA,QAAL,CAAc,CAAd,CADX,KAGI,MAN4B,CASxC,MAAO,CAAA,CAZK,CAfpB,CA8BA,KAAMuR,eAAN,CACI5I,WAAW,CAACkG,SAAD,CAAY,CACnB,IAAIzQ,EACJ,KAAKyQ,CAAAA,SAAL,CAAiBA,SAEjB,KAAKmD,CAAAA,KAAL,CADA,IAAKC,CAAAA,KACL,CADa,CAETpD,UAAUnP,CAAAA,MAAd,EACQwS,SAEJ,CAFY,IAAKC,CAAAA,OAEjB,CAF2BtD,SAAA,CAAU,CAAV,CAE3B,CADA,IAAKoD,CAAAA,KACL,CADsD,IAAzC,IAAC7T,EAAD,CAAM8T,SAAMnS,CAAAA,IAAKqD,CAAAA,IAAX,CAAgBwN,YAAhB,CAAN,GAAwD,IAAK,EAA7D,GAAiDxS,EAAjD,CAAiEA,EAAjE,CAAsE8T,SAAM1U,CAAAA,EACzF,CAAA,IAAKoB,CAAAA,KAAL,CAAa,IAAIkT,eAAJ,CAAoBI,SAAMnS,CAAAA,IAA1B,CAAgC,CAACmS,SAAMxN,CAAAA,MAAvC,CAHjB,EAMI,IAAKyN,CAAAA,OANT,CAMmB,IAAKvT,CAAAA,KANxB,CAMgC,IAXb,CAcvB6S,OAAO,CAAC/T,IAAD,CAAO,CACV,IAAA,CAAO,IAAKyU,CAAAA,OAAZ,EAAuBzU,IAAKH,CAAAA,IAA5B,EAAoC,IAAK0U,CAAAA,KAAzC,CAAA,CACI,IAAKG,CAAAA,QAAL,EACJ,OAAO,KAAKD,CAAAA,OAAZ,EAAuB,IAAKA,CAAAA,OAAQ5U,CAAAA,IAApC,EAA4CG,IAAKH,CAAAA,IAAjD,EAAyD,IAAK0U,CAAAA,KAA9D;AAAuEvU,IAAKF,CAAAA,EAA5E,EAAkF,IAAKoB,CAAAA,KAAM6S,CAAAA,OAAX,CAAmB/T,IAAnB,CAHxE,CAKd0U,QAAQ,EAAG,CACP,IAAIhU,EACJ,KAAK4T,CAAAA,KAAL,EACA,IAAI,IAAKA,CAAAA,KAAT,EAAkB,IAAKnD,CAAAA,SAAUnP,CAAAA,MAAjC,CACI,IAAKyS,CAAAA,OAAL,CAAe,IAAKvT,CAAAA,KAApB,CAA4B,IADhC,KAGK,CACD,IAAIoJ,KAAO,IAAKmK,CAAAA,OAAZnK,CAAsB,IAAK6G,CAAAA,SAAL,CAAe,IAAKmD,CAAAA,KAApB,CAC1B,KAAKC,CAAAA,KAAL,CAAqD,IAAxC,IAAC7T,EAAD,CAAM4J,IAAKjI,CAAAA,IAAKqD,CAAAA,IAAV,CAAewN,YAAf,CAAN,GAAuD,IAAK,EAA5D,GAAgDxS,EAAhD,CAAgEA,EAAhE,CAAqE4J,IAAKxK,CAAAA,EACvF,KAAKoB,CAAAA,KAAL,CAAa,IAAIkT,eAAJ,CAAoB9J,IAAKjI,CAAAA,IAAzB,CAA+B,CAACiI,IAAKtD,CAAAA,MAArC,CAHZ,CANE,CAYXmN,UAAU,CAACvU,GAAD,CAAMkM,MAAN,CAAc,CACpB,IAAIpL,EACJ,KAAIc,OAAS,EACb,IAAI,IAAKN,CAAAA,KAAT,CAEI,IADA,IAAKA,CAAAA,KAAMK,CAAAA,MAAOsM,CAAAA,MAAlB,CAAyBjO,GAAzB,CAA8B,CAA9B,CACSA,CAAAA,GAAAA,CAAM,IAAKsB,CAAAA,KAAMK,CAAAA,MAAOvB,CAAAA,IAAjC,CAAuCJ,GAAvC,CAA4CA,GAA5C,CAAkDA,GAAIe,CAAAA,MAAtD,CAA8D,CAC1D,IAAI0J,MAA4B,IAApB,IAAC3J,EAAD,CAAMd,GAAIyC,CAAAA,IAAV,GAAmC,IAAK,EAAxC,GAA4B3B,EAA5B;AAA4C,IAAK,EAAjD,CAAqDA,EAAGgF,CAAAA,IAAH,CAAQC,QAASiG,CAAAA,OAAjB,CACjE,IAAIvB,KAAJ,EAAaA,KAAMyB,CAAAA,MAAnB,EAA6BA,MAA7B,CACI,IAAK,IAAI/J,EAAI,IAAKuS,CAAAA,KAAlB,CAAyBvS,CAAzB,CAA6B,IAAKoP,CAAAA,SAAUnP,CAAAA,MAA5C,CAAoDD,CAAA,EAApD,CAAyD,CACrD,IAAIuI,KAAO,IAAK6G,CAAAA,SAAL,CAAepP,CAAf,CACX,IAAIuI,IAAKzK,CAAAA,IAAT,EAAiBD,GAAIE,CAAAA,EAArB,CACI,KACAwK,KAAKjI,CAAAA,IAAT,EAAiB,IAAKoS,CAAAA,OAAQpS,CAAAA,IAA9B,EACIb,MAAOI,CAAAA,IAAP,CAAY,CACR0I,IADQ,CAER1K,IAAKA,GAAIC,CAAAA,IAATD,CAAgB0K,IAAKtD,CAAAA,MAFb,CAGRqD,KAHQ,CAAZ,CALiD,CAHH,CAiBlE,MAAO7I,OAtBa,CAhC5B,CAgJA/B,OAAQ0G,CAAAA,mBAAR,CAvxD4BA,IAwxD5B1G,QAAQoM,CAAAA,WAAR,CAAsBA,WACtBpM,QAAQkG,CAAAA,QAAR,CAAmBA,QACnBlG,QAAQmN,CAAAA,OAAR,CAAkBA,OAClBnN,QAAQiJ,CAAAA,QAAR,CAAmBA,QACnBjJ,QAAQkR,CAAAA,WAAR,CAAsBA,WACtBlR,QAAQ0S,CAAAA,MAAR,CAAiBA,MACjB1S,QAAQgG,CAAAA,IAAR,CAAeA,IACfhG,QAAQgD,CAAAA,UAAR,CAAqBA,UACrBhD;OAAQgO,CAAAA,UAAR,CAAqBA,UACrBhO,QAAQiL,CAAAA,YAAR,CAAuBA,YACvBjL,QAAQkV,CAAAA,UAAR,CAhZAA,QAAmB,CAACvB,IAAD,CAAO,CACtB,MAAO,CAACZ,KAAD,CAAQH,KAAR,CAAelB,SAAf,CAA0BnI,MAA1B,CAAA,EAAqC,IAAImK,UAAJ,CAAeX,KAAf,CAAsBY,IAAtB,CAA4Bf,KAA5B,CAAmClB,SAAnC,CAA8CnI,MAA9C,CADtB,CA15CmF;",
"sources":["node_modules/@lezer/common/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$lezer$common$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node.\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type.\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    /// prop values for each node type in the set. Takes a [match\n    /// object](#common.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages in mixed-language parsers.\nNodeProp.mounted = new NodeProp({ perNode: true });\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass MountedTree {\n    constructor(\n    /// The inner tree.\n    tree, \n    /// If this is null, this tree replaces the entire node (it will\n    /// be included in the regular iteration instead of its host\n    /// node). If not, only the given ranges are considered to be\n    /// covered by this tree. This is used for trees that are mixed in\n    /// a way that isn't strictly hierarchical. Such mounted trees are\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n    /// and [`enter`](#common.SyntaxNode.enter).\n    overlay, \n    /// The parser used to create this subtree.\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n}\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /// Define a node type.\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |\n            (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method can be created with\n    /// [`NodeProp.add`](#common.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/// Options that control iteration. Can be combined with the `|`\n/// operator to enable multiple ones.\nexports.IterMode = void 0;\n(function (IterMode) {\n    /// When enabled, iteration will only visit [`Tree`](#common.Tree)\n    /// objects, not nodes packed into\n    /// [`TreeBuffer`](#common.TreeBuffer)s.\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /// Enable this to make iteration include anonymous nodes (such as\n    /// the nodes that wrap repeated grammar constructs into a balanced\n    /// tree).\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /// By default, regular [mounted](#common.NodeProp^mounted) nodes\n    /// replace their base node in iteration. Enable this to ignore them\n    /// instead.\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /// This option only applies in\n    /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    /// library to not enter mounted overlays if one covers the given\n    /// position.\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(exports.IterMode || (exports.IterMode = {}));\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    constructor(\n    /// The type of the top node.\n    type, \n    /// This node's child nodes.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length, \n    /// Per-node [node props](#common.NodeProp) to associate with this node.\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /// @internal\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /// @internal\n    toString() {\n        let mounted = this.prop(NodeProp.mounted);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    /// the tree. Mode can be used to [control](#common.IterMode) which\n    /// nodes the cursor visits.\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    /// at the given position and side (see\n    /// [`moveTo`](#common.TreeCursor.moveTo).\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    ///\n    /// Note that this will not enter\n    /// [overlays](#common.MountedTree.overlay), and you often want\n    /// [`resolveInner`](#common.Tree.resolveInner) instead.\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        for (let c = this.cursor((spec.mode || 0) | exports.IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && !c.type.isAnonymous)\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    balance(config = {}) {\n        return this.children.length <= 8 /* BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it).\nclass TreeBuffer {\n    /// Create a tree buffer.\n    constructor(\n    /// The buffer's content.\n    buffer, \n    /// The total length of the group of nodes in the buffer.\n    length, \n    /// The node set used in this buffer.\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /// @internal\n    get type() { return NodeType.none; }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /// @internal\n    slice(startI, endI, from, to) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI);\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n        }\n        return new TreeBuffer(copy, to - from, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Before */: return from < pos;\n        case -1 /* AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Around */: return from < pos && to > pos;\n        case 1 /* AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* After */: return to > pos;\n        case 4 /* DontCare */: return true;\n    }\n}\nfunction enterUnfinishedNodesBefore(node, pos) {\n    let scan = node.childBefore(pos);\n    while (scan) {\n        let last = scan.lastChild;\n        if (!last || last.to != scan.to)\n            break;\n        if (last.type.isError && last.from == last.to) {\n            node = scan;\n            scan = last.prevSibling;\n        }\n        else {\n            scan = last;\n        }\n    }\n    return node;\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : exports.IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass TreeNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & exports.IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & exports.IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & exports.IterMode.IgnoreMounts) &&\n                        next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & exports.IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & exports.IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & exports.IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this._tree.toString(); }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node.parent; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & exports.IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];\n            children.push(buffer.slice(startI, endI, from, to));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// @internal\n    constructor(node, \n    /// @internal\n    mode = 0) {\n        this.mode = mode;\n        /// @internal\n        this.buffer = null;\n        this.stack = [];\n        /// @internal\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }\n    /// Move the cursor to the first child that ends after `pos`.\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }\n    /// Move to the last child that starts before `pos`.\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }\n    /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & exports.IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /// Move to the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & exports.IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & exports.IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & exports.IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n    next(enter = true) { return this.move(1, enter); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev(enter = true) { return this.move(-1, enter); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /// Iterate over the current node and all its descendants, calling\n    /// `enter` when entering a node and `leave`, if given, when leaving\n    /// one. When `enter` returns `false`, any children of that node are\n    /// skipped, and `leave` isn't called for it.\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling())\n                    break;\n                if (!depth)\n                    return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Test whether the current node matches a given context\u2014a sequence\n    /// of direct parent node names. Empty strings in the context array\n    /// are treated as wildcards.\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/// Provides a way to associate values with pieces of trees. As long\n/// as that part of the tree is reused, the associated values can be\n/// retrieved from an updated tree.\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /// Set the value for this syntax node.\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /// Retrieve value for this syntax node, if it exists in the map.\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /// Set the value for the node that a cursor currently points to.\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /// Retrieve the value for the node that a cursor currently points\n    /// to.\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass TreeFragment {\n    /// Construct a tree fragment. You'll usually want to use\n    /// [`addTree`](#common.TreeFragment^addTree) and\n    /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    /// calling this directly.\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);\n    }\n    /// Whether the start of the fragment represents the start of a\n    /// parse, or the end of a change. (In the second case, it may not\n    /// be safe to reuse some nodes at the start, depending on the\n    /// parsing algorithm.)\n    get openStart() { return (this.open & 1 /* Start */) > 0; }\n    /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n    get openEnd() { return (this.open & 2 /* End */) > 0; }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/// A superclass that parsers should extend.\nclass Parser {\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /// Run a full parse, returning the resulting tree.\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, ranges) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.ranges = ranges;\n    }\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].ranges[0].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), exports.IterMode.IncludeAnonymous | exports.IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n            let enter = true, range;\n            if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Full */;\n            }\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n                    if (ranges.length)\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length)\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;\n    }\n    return 0 /* None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];\n        nodes.push(buf.slice(startI, endI, from, to));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, depth = 0;\n    // Scan up to the nearest tree\n    do {\n        cursor.parent();\n        depth++;\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let i = 0, base = cursor.tree, off = 0;\n    for (;; i++) {\n        off = base.positions[i] + cursor.from;\n        if (off <= node.from && off + base.children[i].length >= node.to)\n            break;\n    }\n    let buf = base.children[i], b = buf.buffer;\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length) {\n        let i = startI;\n        while (b[i + 2] + off <= node.from)\n            i = b[i + 3];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\n        let from = b[i + 1], to = b[i + 2];\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\n    // Move the cursor back to the target node\n    for (let d = 0; d <= depth; d++)\n        cursor.childAfter(node.from);\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(exports.IterMode.IncludeAnonymous | exports.IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, exports.IterMode.IgnoreOverlays | exports.IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n        }\n    }\n    return result;\n}\n\nexports.DefaultBufferLength = DefaultBufferLength;\nexports.MountedTree = MountedTree;\nexports.NodeProp = NodeProp;\nexports.NodeSet = NodeSet;\nexports.NodeType = NodeType;\nexports.NodeWeakMap = NodeWeakMap;\nexports.Parser = Parser;\nexports.Tree = Tree;\nexports.TreeBuffer = TreeBuffer;\nexports.TreeCursor = TreeCursor;\nexports.TreeFragment = TreeFragment;\nexports.parseMixed = parseMixed;\n\n};"],
"names":["shadow$provide","global","require","module","exports","checkSide","side","pos","from","to","enterUnfinishedNodesBefore","node","scan","childBefore","last","lastChild","type","isError","prevSibling","resolveNode","overlays","_a","parent","TreeNode","index","mode","IterMode","IgnoreOverlays","enter","inner","getChildren","before","after","cur","cursor","result","firstChild","is","nextSibling","push","matchNodeContext","context","i","length","p","isAnonymous","name","hasChild","tree","children","some","ch","TreeBuffer","buildTree","data","takeNode","parentStart","minPos","positions","inRepeat","id","start","end","size","lookAheadAtStart","lookAhead","next","reused","contextHash","RangeError","types","startPos","fork","skip","minStart","maxBufferLength","maxSize","nodeSize","localSkipped","minRepeatType","nodeStart","undefined","Uint16Array","buffer","endPos","copyToBuffer","nodeSet","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","reverse","make","makeBalanced","balanceRange","makeTree","lastI","lookAheadProp","Tree","prop","NodeProp","base","pop","props","pair","concat","bufferStart","startIndex","DefaultBufferLength","Array","isArray","FlatBufferCursor","topID","balanceType","nodeSizeCache","get","child","set","mkTop","mkTree","divide","offset","groupFrom","groupStart","groupSize","nextSize","maxChild","only","total","Math","ceil","checkCover","covered","range","sliceBuf","buf","startI","endI","nodes","off","slice","materialize","split","innerOffset","b","toTree","depth","NodeType","none","d","childAfter","punchRanges","outer","ranges","copy","current","j","gapFrom","gapTo","r","Range","splice","findCoverChanges","a","iA","iB","inA","inB","nextA","nextB","max","min","enterFragments","mounts","mount","frag","overlay","map","changes","TreeFragment","openStart","openEnd","Object","defineProperty","value","nextPropID","constructor","config","perNode","deserialize","Error","add","match","closedBy","str","openedBy","group","mounted","MountedTree","parser","noProps","create","flags","define","spec","top","skipped","error","src","indexOf","direct","groups","found","NodeSet","extend","newTypes","newProps","source","assign","CachedNode","WeakMap","CachedInnerNode","toString","test","JSON","stringify","TreeCursor","topNode","cursorAt","scope","moveTo","_tree","resolve","resolveInner","iterate","leave","c","IncludeAnonymous","entered","balance","propValues","build","empty","childString","join","endIndex","findChild","dir","pick","_parent","nextChild","e","ExcludeBuffers","BufferNode","BufferContext","IgnoreMounts","rPos","nextSignificantParent","val","getChild","matchContext","externalSibling","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","enterChild","sibling","atLastNode","move","prev","cache","mustLeave","NodeWeakMap","setBuffer","Map","getBuffer","cursorSet","cursorGet","open","addTree","fragments","partial","f","applyChanges","minGap","fI","nextF","cI","nextC","nextPos","fromA","cut","fFrom","fTo","toA","toB","Parser","startParse","input","StringInput","createParse","parse","done","advance","string","chunk","read","InnerParse","target","ActiveOverlay","predicate","stoppedInner","MixedParse","nest","innerDone","stoppedAt","baseTree","baseParse","startInner","stopAt","parsedPos","fragmentCursor","FragmentCursor","isCovered","hasNode","find","m","oldMounts","findMounts","StructureCursor","root","fragI","curTo","first","curFrag","nextFrag","parseMixed"]
}
