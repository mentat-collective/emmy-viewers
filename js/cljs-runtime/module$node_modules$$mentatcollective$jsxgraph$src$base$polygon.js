shadow$provide.module$node_modules$$mentatcollective$jsxgraph$src$base$polygon=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _jxg=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$jxg")),_constants=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$constants")),_coords=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$coords")),
_statistics=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$math$statistics")),_geometry=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$math$geometry")),_type=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$utils$type")),_element=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$element"));_jxg.default.Polygon=function(board,vertices,attributes){this.constructor(board,
attributes,_constants.default.OBJECT_TYPE_POLYGON,_constants.default.OBJECT_CLASS_AREA);var i,j,attr_line=_type.default.copyAttributes(attributes,board.options,"polygon","borders");this.withLines=attributes.withlines;this.attr_line=attr_line;this.vertices=[];for(i=0;i<vertices.length;i++)this.vertices[i]=this.board.select(vertices[i]),this.vertices[i]._is_new&&(delete this.vertices[i]._is_new,this.vertices[i]._is_new_pol=!0);0<this.vertices.length&&this.vertices[this.vertices.length-1].id!==this.vertices[0].id&&
this.vertices.push(this.vertices[0]);this.borders=[];if(this.withLines){var len=this.vertices.length-1;for(j=0;j<len;j++)i=(j+1)%len,attr_line.id=attr_line.ids&&attr_line.ids[i],attr_line.name=attr_line.names&&attr_line.names[i],attr_line.strokecolor=_type.default.isArray(attr_line.colors)&&attr_line.colors[i%attr_line.colors.length]||attr_line.strokecolor,attr_line.visible=_type.default.exists(attributes.borders.visible)?attributes.borders.visible:attributes.visible,!1===attr_line.strokecolor&&(attr_line.strokecolor=
"none"),vertices=board.create("segment",[this.vertices[i],this.vertices[i+1]],attr_line),vertices.dump=!1,this.borders[i]=vertices,vertices.parentPolygon=this}this.inherits.push(this.vertices,this.borders);this.id=this.board.setId(this,"Py");for(i=0;i<this.vertices.length-1;i++)board=this.board.select(this.vertices[i]),_type.default.exists(board._is_new_pol)?(this.addChild(board),delete board._is_new_pol):board.addChild(this);this.board.renderer.drawPolygon(this);this.board.finalizeAdding(this);this.createGradient();
this.elType="polygon";this.createLabel();this.methodMap=_jxg.default.deepCopy(this.methodMap,{borders:"borders",vertices:"vertices",A:"Area",Area:"Area",Perimeter:"Perimeter",L:"Perimeter",Length:"Perimeter",boundingBox:"boundingBox",bounds:"bounds",addPoints:"addPoints",insertPoints:"insertPoints",removePoints:"removePoints"})};_jxg.default.Polygon.prototype=new _element.default;_jxg.default.extend(_jxg.default.Polygon.prototype,{pnpoly:function(x_in,y_in,coord_type){return _geometry.default.pnpoly(x_in,
y_in,this.vertices,coord_type)},hasPoint:function(x,y){var i;if(_type.default.evaluate(this.visProp.hasinnerpoints)&&this.pnpoly(x,y))return!0;var len=this.borders.length;for(i=0;i<len;i++)if(this.borders[i].hasPoint(x,y))return!0;return!1},updateRenderer:function(){var i;if(!this.needsUpdate)return this;if(this.visPropCalc.visible){var len=this.vertices.length;this.isReal=!0;for(i=0;i<len;++i)if(!this.vertices[i].isReal){this.isReal=!1;break}this.isReal||this.updateVisibility(!1)}this.visPropCalc.visible&&
this.board.renderer.updatePolygon(this);this.hasLabel&&this.visPropCalc.visible&&this.label&&this.label.visPropCalc.visible&&this.isReal&&(this.label.update(),this.board.renderer.updateText(this.label));this.setDisplayRendNode();this.needsUpdate=!1;return this},getTextAnchor:function(){var i;if(0===this.vertices.length)return new _coords.default(_constants.default.COORDS_BY_USER,[1,0,0],this.board);var a=this.vertices[0].X();var b=this.vertices[0].Y();var x=a;var y=b;for(i=0;i<this.vertices.length;i++)this.vertices[i].X()<
a&&(a=this.vertices[i].X()),this.vertices[i].X()>x&&(x=this.vertices[i].X()),this.vertices[i].Y()>b&&(b=this.vertices[i].Y()),this.vertices[i].Y()<y&&(y=this.vertices[i].Y());return new _coords.default(_constants.default.COORDS_BY_USER,[.5*(a+x),.5*(b+y)],this.board)},getLabelAnchor:_jxg.default.shortcut(_jxg.default.Polygon.prototype,"getTextAnchor"),cloneToBackground:function(){var copy={};copy.id=this.id+"T"+this.numTraces;this.numTraces++;copy.vertices=this.vertices;copy.visProp=_type.default.deepCopy(this.visProp,
this.visProp.traceattributes,!0);copy.visProp.layer=this.board.options.layer.trace;copy.board=this.board;_type.default.clearVisPropOld(copy);copy.visPropCalc={visible:_type.default.evaluate(copy.visProp.visible)};var er=this.board.renderer.enhancedRendering;this.board.renderer.enhancedRendering=!0;this.board.renderer.drawPolygon(copy);this.board.renderer.enhancedRendering=er;this.traces[copy.id]=copy.rendNode;return this},hideElement:function(borderless){_jxg.default.deprecated("Element.hideElement()",
"Element.setDisplayRendNode()");this.visPropCalc.visible=!1;this.board.renderer.display(this,!1);if(!borderless)for(borderless=0;borderless<this.borders.length;borderless++)this.borders[borderless].hideElement();this.hasLabel&&_type.default.exists(this.label)&&(this.label.hiddenByParent=!0,this.label.visPropCalc.visible&&this.label.hideElement())},showElement:function(borderless){_jxg.default.deprecated("Element.showElement()","Element.setDisplayRendNode()");this.visPropCalc.visible=!0;this.board.renderer.display(this,
!0);if(!borderless)for(borderless=0;borderless<this.borders.length;borderless++)this.borders[borderless].showElement().updateRenderer();_type.default.exists(this.label)&&this.hasLabel&&this.label.hiddenByParent&&(this.label.hiddenByParent=!1,this.label.visPropCalc.visible||this.label.showElement().updateRenderer());return this},Area:function(){return Math.abs(_geometry.default.signedPolygon(this.vertices,!0))},Perimeter:function(){var i,len=this.vertices.length,val=0;for(i=1;i<len;++i)val+=this.vertices[i].Dist(this.vertices[i-
1]);return val},boundingBox:function(){var box=[0,0,0,0],i,le=this.vertices.length-1;if(0===le)return box;box[0]=this.vertices[0].X();box[2]=box[0];box[1]=this.vertices[0].Y();box[3]=box[1];for(i=1;i<le;++i){var v=this.vertices[i].X();v<box[0]?box[0]=v:v>box[2]&&(box[2]=v);v=this.vertices[i].Y();v>box[1]?box[1]=v:v<box[3]&&(box[3]=v)}return box},bounds:function(){return this.boundingBox()},remove:function(){var i;for(i=0;i<this.borders.length;i++)this.board.removeObject(this.borders[i]);_element.default.prototype.remove.call(this)},
findPoint:function(p){var i;if(!_type.default.isPoint(p))return-1;for(i=0;i<this.vertices.length;i++)if(this.vertices[i].id===p.id)return i;return-1},addPoints:function(p){var args=Array.prototype.slice.call(arguments);return this.insertPoints.apply(this,["polygonalchain"===this.elType?this.vertices.length-1:this.vertices.length-2].concat(args))},insertPoints:function(idx,p){if(0===arguments.length)return this;var i=this.vertices.length-1;"polygon"===this.elType&&i--;if(-1>idx||idx>i)return this;
var le=arguments.length-1;for(i=1;i<le+1;i++){var start=_type.default.providePoints(this.board,[arguments[i]],{},"polygon",["vertices"])[0];start._is_new&&(this.addChild(start),delete start._is_new);this.vertices.splice(idx+i,0,start)}if(this.withLines)for(start=idx+1,"polygon"===this.elType?0>idx?(this.vertices[this.vertices.length-1]=this.vertices[0],this.borders[this.borders.length-1].point2=this.vertices[this.vertices.length-1]):this.borders[idx].point2=this.vertices[start]:0<=idx&&(idx<this.borders.length?
this.borders[idx].point2=this.vertices[start]:start=idx),i=start;i<start+le;i++)this.borders.splice(i,0,this.board.create("segment",[this.vertices[i],this.vertices[i+1]],this.attr_line));this.inherits=[];this.inherits.push(this.vertices,this.borders);this.board.update();return this},removePoints:function(p){var i,firstPoint;var j=[];var partition=[];"polygon"===this.elType&&(firstPoint=this.vertices.pop());for(i=0;i<arguments.length;i++){var idx=arguments[i];_type.default.isPoint(idx)&&(idx=this.findPoint(idx));
_type.default.isNumber(idx)&&-1<idx&&idx<this.vertices.length&&-1===_type.default.indexOf(j,idx)&&j.push(idx)}if(0===j.length)return"polygon"===this.elType&&this.vertices.push(firstPoint),this;for(i=0;i<j.length;i++)this.vertices[j[i]].removeChild(this);j=j.sort();idx=this.vertices.slice();firstPoint=this.borders.slice();this.withLines&&partition.push([j[j.length-1]]);for(i=j.length-1;-1<i;i--)idx[j[i]]=-1,this.withLines&&1<j.length&&j[i]-1>j[i-1]&&(partition[partition.length-1][1]=j[i],partition.push([j[i-
1]]));this.withLines&&(partition[partition.length-1][1]=j[0]);this.vertices=[];for(i=0;i<idx.length;i++)_type.default.isPoint(idx[i])&&this.vertices.push(idx[i]);"polygon"===this.elType&&1<this.vertices.length&&this.vertices[this.vertices.length-1].id!==this.vertices[0].id&&this.vertices.push(this.vertices[0]);if(this.withLines){for(i=0;i<partition.length;i++){for(j=partition[i][1]-1;j<partition[i][0]+1;j++)0>j?"polygon"===this.elType&&(this.board.removeObject(this.borders[firstPoint.length-1]),firstPoint[firstPoint.length-
1]=-1):j<firstPoint.length&&(this.board.removeObject(this.borders[j]),firstPoint[j]=-1);0!==partition[i][1]&&partition[i][0]!==idx.length-1&&(firstPoint[partition[i][0]-1]=this.board.create("segment",[idx[partition[i][1]-1],idx[partition[i][0]+1]],this.attr_line))}this.borders=[];for(i=0;i<firstPoint.length;i++)-1!==firstPoint[i]&&this.borders.push(firstPoint[i]);"polygon"===this.elType&&2<this.vertices.length&&(partition[0][1]===this.vertices.length-1||0===partition[partition.length-1][1])&&this.borders.push(this.board.create("segment",
[this.vertices[0],this.vertices[this.vertices.length-2]],this.attr_line))}this.inherits=[];this.inherits.push(this.vertices,this.borders);this.board.update();return this},getParents:function(){this.setParents(this.vertices);return this.parents},getAttributes:function(){var attr=_element.default.prototype.getAttributes.call(this),i;if(this.withLines)for(attr.lines=attr.lines||{},attr.lines.ids=[],attr.lines.colors=[],i=0;i<this.borders.length;i++)attr.lines.ids.push(this.borders[i].id),attr.lines.colors.push(this.borders[i].visProp.strokecolor);
return attr},snapToGrid:function(){var i;var force=_type.default.evaluate(this.visProp.snaptogrid)?!0:!1;for(i=0;i<this.vertices.length;i++)this.vertices[i].handleSnapToGrid(force,!0)},setPositionDirectly:function(method,coords,oldcoords){coords=new _coords.default(method,coords,this.board);var oldc=new _coords.default(method,oldcoords,this.board);oldcoords=this.vertices.length-1;for(method=0;method<oldcoords;method++)if(!this.vertices[method].draggable())return this;coords=_statistics.default.subtract(coords.usrCoords,
oldc.usrCoords);this.board.create("transform",coords.slice(1),{type:"translate"}).applyOnce(this.vertices.slice(0,-1));return this},sutherlandHodgman:function(polygon){var clip=_jxg.default.Math.Geometry.sortVertices(this.vertices),subject=_jxg.default.Math.Geometry.sortVertices(polygon.vertices);polygon=clip.length-1;var lenSubject=subject.length-1,outputList=[],i,j,isInside=function(c1,c2,c3){return 0<=(c2[1]-c1[1])*(c3[2]-c1[2])-(c2[2]-c1[2])*(c3[1]-c1[1])};for(i=0;i<lenSubject;i++)outputList.push(subject[i]);
for(i=0;i<polygon;i++){lenSubject=outputList.slice(0);subject=lenSubject.length;outputList=[];var S=lenSubject[subject-1];for(j=0;j<subject;j++){var E=lenSubject[j];isInside(clip[i],clip[i+1],E)?(isInside(clip[i],clip[i+1],S)||(S=_jxg.default.Math.Geometry.meetSegmentSegment(S,E,clip[i],clip[i+1]),S[0][1]/=S[0][0],S[0][2]/=S[0][0],S[0][0]=1,outputList.push(S[0])),outputList.push(E)):isInside(clip[i],clip[i+1],S)&&(S=_jxg.default.Math.Geometry.meetSegmentSegment(S,E,clip[i],clip[i+1]),S[0][1]/=S[0][0],
S[0][2]/=S[0][0],S[0][0]=1,outputList.push(S[0]));S=E}}return outputList},intersect:function(polygon){return this.sutherlandHodgman(polygon)}});_jxg.default.createPolygon=function(board,parents,attributes){var i,points=[],is_transform=!1;_type.default.copyAttributes(attributes,board.options,"polygon");var obj=board.select(parents[0]);null===obj&&(obj=parents[0]);if(_type.default.isObject(obj)&&obj.type===_constants.default.OBJECT_TYPE_POLYGON&&_type.default.isTransformationOrArray(parents[1])){is_transform=
!0;var le=obj.vertices.length-1;var attr_points=_type.default.copyAttributes(attributes,board.options,"polygon","vertices");for(i=0;i<le;i++)attr_points.withlabel&&(attr_points.name=""===obj.vertices[i].name?"":obj.vertices[i].name+"'"),points.push(board.create("point",[obj.vertices[i],parents[1]],attr_points))}else if(points=_type.default.providePoints(board,parents,attributes,"polygon",["vertices"]),!1===points)throw Error("JSXGraph: Can't create polygon / polygonalchain with parent types other than 'point' and 'coordinate arrays' or a function returning an array of coordinates. Alternatively, a polygon and a transformation can be supplied");
i=_type.default.copyAttributes(attributes,board.options,"polygon");board=new _jxg.default.Polygon(board,points,i);board.isDraggable=!0;if(is_transform)for(board.prepareUpdate().update().updateVisibility().updateRenderer(),le=obj.vertices.length-1,i=0;i<le;i++)points[i].prepareUpdate().update().updateVisibility().updateRenderer();return board};_jxg.default.createRegularPolygon=function(board,parents,attributes){var p=parents.length;var n=parents[p-1];if(_type.default.isNumber(n)&&(3!==parents.length||
3>n))throw Error("JSXGraph: A regular polygon needs two point types and a number \x3e 2 as input.");if(_type.default.isNumber(board.select(n))){p--;var pointsExist=!1}else n=p,pointsExist=!0;p=_type.default.providePoints(board,parents.slice(0,p),attributes,"regularpolygon",["vertices"]);if(!1===p)throw Error("JSXGraph: Can't create regular polygon with parent types other than 'point' and 'coordinate arrays' or a function returning an array of coordinates");var attr=_type.default.copyAttributes(attributes,
board.options,"regularpolygon","vertices");for(parents=2;parents<n;parents++){var rot=board.create("transform",[Math.PI*(2-(n-2)/n),p[parents-1]],{type:"rotate"});pointsExist?(p[parents].addTransform(p[parents-2],rot),p[parents].fullUpdate()):(_type.default.isArray(attr.ids)&&attr.ids.length>=n-2&&(attr.id=attr.ids[parents-2]),p[parents]=board.create("point",[p[parents-2],rot],attr),p[parents].type=_constants.default.OBJECT_TYPE_CAS,p[parents].isDraggable=!0,p[parents].visProp.fixed=!1)}attr=_type.default.copyAttributes(attributes,
board.options,"regularpolygon");board=board.create("polygon",p,attr);board.elType="regularpolygon";return board};_jxg.default.createPolygonalChain=function(board,parents,attributes){attributes=_type.default.copyAttributes(attributes,board.options,"polygonalchain");parents=board.create("polygon",parents,attributes);parents.elType="polygonalchain";parents.vertices.pop();board.removeObject(parents.borders[parents.borders.length-1]);parents.borders.pop();return parents};_jxg.default.registerElement("polygon",
_jxg.default.createPolygon);_jxg.default.registerElement("regularpolygon",_jxg.default.createRegularPolygon);_jxg.default.registerElement("polygonalchain",_jxg.default.createPolygonalChain);exports.default={Polygon:_jxg.default.Polygon,createPolygon:_jxg.default.createPolygon,createRegularPolygon:_jxg.default.createRegularPolygon}}
//# sourceMappingURL=module$node_modules$$mentatcollective$jsxgraph$src$base$polygon.js.map
