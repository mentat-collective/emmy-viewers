{
"version":3,
"file":"module$node_modules$lodash$isLength.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,mCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmChGD,MAAOC,CAAAA,OAAP,CALAC,QAAiB,CAACC,KAAD,CAAQ,CACvB,MAAuB,QAAvB,EAAO,MAAOA,MAAd,EACU,CAAC,CADX,CACEA,KADF,EAC6B,CAD7B,EACgBA,KADhB,CACwB,CADxB,EA7BqBC,gBA6BrB,EACkCD,KAFX,CA9BuE;",
"sources":["node_modules/lodash/isLength.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$isLength\"] = function(global,require,module,exports) {\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n};"],
"names":["shadow$provide","global","require","module","exports","isLength","value","MAX_SAFE_INTEGER"]
}
