{
"version":3,
"file":"module$node_modules$mathbox$build$esm$render$buffer$memo.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,IAAR,CAAe,IAAK,EAEpB,KAAIC,WAAaP,OAAA,CAAQ,yCAAR,CAEbQ,OAAAA,CAAmBR,OAAA,CAAQ,qEAAR,CAevB,MAAMM,KAAN,QAAmBE,OAAiBC,CAAAA,eAApC,CACEC,WAAW,CAACC,QAAD,CAAWC,OAAX,CAAoBC,OAApB,CAA6B,CAAA,IAClCC,OADkC,CACzBC,MAEb,OAAMC,MAAQH,OAAQG,CAAAA,KAAhBA,EAAyB,CAA/B,CACMC,SAAWJ,OAAQI,CAAAA,QAAnBA,EAA+B,CADrC,CAEMC;AAAQL,OAAQK,CAAAA,KAAhBA,EAAyB,CAF/B,CAGMC,OAASN,OAAQM,CAAAA,MAAjBA,EAA2B,CAHjC,CAIMC,MAAQP,OAAQO,CAAAA,KAAhBA,EAAyB,CAE/BP,QAAQQ,CAAAA,MAAR,CAAiBd,UAAWe,CAAAA,UAC5BT,QAAQK,CAAAA,KAAR,CAAgBH,MAAhB,CAAyBC,KAAzB,CAAiCE,KACjCL,QAAQM,CAAAA,MAAR,CAAiBL,OAAjB,CAA2BK,MAA3B,CAAoCC,KACpCP,QAAQU,CAAAA,MAAR,CAAiB,CACjB,QAAOV,OAAQG,CAAAA,KACf,QAAOH,OAAQO,CAAAA,KACf,QAAOP,OAAQI,CAAAA,QACf,MAAA,CAAMN,QAAN,CAAgBC,OAAhB,CAAyBC,OAAzB,CAEkB,KAAlB,EAAI,IAAKG,CAAAA,KAAT,GACE,IAAKA,CAAAA,KADP,CACeA,KADf,CAIqB,KAArB,EAAI,IAAKC,CAAAA,QAAT,GACE,IAAKA,CAAAA,QADP,CACkBA,QADlB,CAIkB,KAAlB,EAAI,IAAKC,CAAAA,KAAT,GACE,IAAKA,CAAAA,KADP,CACeA,KADf,CAIA,KAAKH,CAAAA,MAAL,CAAcA,MAEK,KAAnB,EAAI,IAAKI,CAAAA,MAAT,GACE,IAAKA,CAAAA,MADP,CACgBA,MADhB,CAIA,KAAKL,CAAAA,OAAL,CAAeA,OAEG,KAAlB,EAAI,IAAKM,CAAAA,KAAT;CACE,IAAKA,CAAAA,KADP,CACeA,KADf,CAIA,KAAKI,CAAAA,MAAL,CAAY,CACVC,aAAc,CACZC,KAAM,GADM,CAEZrB,MAAO,IAAKW,CAAAA,KAFA,CADJ,CAKVW,cAAe,CACbD,KAAM,GADO,CAEbrB,MAAO,IAAKc,CAAAA,MAFC,CALL,CAAZ,CA1CsC,CAsDxCS,cAAc,CAACC,MAAD,CAAS,CACP,IAAd,EAAIA,MAAJ,GACEA,MADF,CACW,IAAKjB,CAAAA,OAAQiB,CAAAA,MAAb,EADX,CAIAA,OAAOC,CAAAA,IAAP,CAAY,kBAAZ,CAAgC,IAAKC,CAAAA,QAArC,CACA,OAAO,MAAMH,CAAAA,cAAN,CAAqBC,MAArB,CAA6B,CAA7B,CAAgC,CAAhC,CANc,CAvDzB,CAmEA3B,OAAQI,CAAAA,IAAR,CAAeA,IA5FsG;",
"sources":["node_modules/mathbox/build/esm/render/buffer/memo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathbox$build$esm$render$buffer$memo\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Memo = void 0;\n\nvar _constants = require(\"three/src/constants.js\");\n\nvar _rendertotexture = require(\"./rendertotexture.js\");\n\n// TODO: This file was created by bulk-decaffeinate.\n// Sanity-check the conversion and remove this comment.\n\n/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\n/*\n * Wrapped RTT for memoizing 4D arrays back to a 2D texture\n */\nclass Memo extends _rendertotexture.RenderToTexture {\n  constructor(renderer, shaders, options) {\n    let _height, _width;\n\n    const items = options.items || 1;\n    const channels = options.channels || 4;\n    const width = options.width || 1;\n    const height = options.height || 1;\n    const depth = options.depth || 1; //options.format = [null, THREE.LuminanceFormat, THREE.LuminanceAlphaFormat, THREE.RGBFormat, THREE.RGBAFormat][@channels]\n\n    options.format = _constants.RGBAFormat;\n    options.width = _width = items * width;\n    options.height = _height = height * depth;\n    options.frames = 1;\n    delete options.items;\n    delete options.depth;\n    delete options.channels;\n    super(renderer, shaders, options);\n\n    if (this.items == null) {\n      this.items = items;\n    }\n\n    if (this.channels == null) {\n      this.channels = channels;\n    }\n\n    if (this.width == null) {\n      this.width = width;\n    }\n\n    this._width = _width;\n\n    if (this.height == null) {\n      this.height = height;\n    }\n\n    this._height = _height;\n\n    if (this.depth == null) {\n      this.depth = depth;\n    }\n\n    this._adopt({\n      textureItems: {\n        type: \"f\",\n        value: this.items\n      },\n      textureHeight: {\n        type: \"f\",\n        value: this.height\n      }\n    });\n  }\n\n  shaderAbsolute(shader) {\n    if (shader == null) {\n      shader = this.shaders.shader();\n    }\n\n    shader.pipe(\"map.xyzw.texture\", this.uniforms);\n    return super.shaderAbsolute(shader, 1, 2);\n  }\n\n} //shader.pipe Util.GLSL.swizzleVec4 ['0000', 'x000', 'xw00', 'xyz0'][@channels] if @channels < 4\n\n\nexports.Memo = Memo;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Memo","_constants","_rendertotexture","RenderToTexture","constructor","renderer","shaders","options","_height","_width","items","channels","width","height","depth","format","RGBAFormat","frames","_adopt","textureItems","type","textureHeight","shaderAbsolute","shader","pipe","uniforms"]
}
