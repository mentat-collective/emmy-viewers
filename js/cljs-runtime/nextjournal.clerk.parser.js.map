{"version":3,"sources":["nextjournal/clerk/parser.cljc"],"mappings":"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","names":["nextjournal.clerk.parser/ns?","form","cljs.core/seq?","cljs.core._EQ_","cljs.core/first","nextjournal.clerk.parser/remove-leading-semicolons","s","clojure.string/replace","nextjournal.clerk.parser/legacy-doc-visibility","temp__5753__auto__","visibility","cljs.core/meta","visibility-set","cljs.core/Keyword","cljs.core/set?","or__5045__auto__","p1__75224#","cljs.core/some","cljs.core.get","nextjournal.clerk.parser/legacy-form-visibility","legacy-visibility","visibility-set'","G__75235","cljs.core.conj","cljs.core.merge","p1__75233#","G__75236","cljs.core/name","cljs.core/Symbol","nextjournal.clerk.parser/visibility-marker?","cljs.core/map?","cljs.core/contains?","nextjournal.clerk.parser/parse-visibility","visibility-map","and__5043__auto__","G__75252","cljs.core/PersistentHashMap","cljs.core/every?","cljs.core/keys","cljs.core/vals","cljs.core.ex_info","G__75256","cljs.core.assoc","nextjournal.clerk.parser/->visibility","G__75257","nextjournal.clerk.parser/get-doc-setting","key","G__75262","cljs.core/second","nextjournal.clerk.parser/->doc-visibility","nextjournal.clerk.parser/->doc-settings","first-form","G__75268","fexpr__75267","cljs.core.filter","p__75274","map__75275","cljs.core/--destructure-map","nextjournal.clerk.parser/->open-graph","title","blocks","cljs.core.sequence","cljs.core.comp","cljs.core.keep","cljs.core.mapcat","cljs.core.map","nextjournal.markdown.transform/->text","p1__75273#","nextjournal.clerk.parser/add-open-graph-metadata","doc","p__75292","map__75293","nextjournal.clerk.parser/add-auto-expand-results","p__75295","map__75296","p__75301","map__75302","nextjournal.clerk.parser/add-block-visibility","analyzed-doc","cljs.core.reduce","p__75303","p__75304","map__75305","map__75306","state","block","var","type","visibility'","G__75307","cljs.core.update","cljs.core/conj","G__75308","cljs.core.dissoc","nextjournal.clerk.parser/code-tags","nextjournal.clerk.parser/whitespace-on-line-tags","var_args","G__75321","nextjournal.clerk.parser/parse-clojure-string","js/Error","p__75338","map__75343","nextjournal.clerk.parser.parse_clojure_string","opts","_opts","doc?","initial-state","G__75353","map__75354","map__75398","nodes","add-comment-on-line?","rewrite-clj.parser/parse-string-all","temp__5751__auto__","node","G__75404","rewrite-clj.node/tag","cljs.core/rest","rewrite-clj.node/string","clojure.set/rename-keys","cljs.core/select-keys","G__75405","rewrite-clj.node/comment?","cljs.core.update_in","cljs.core/count","cljs.core/str","clojure.string/trim-newline","cljs.core.drop_while","cljs.core.some_fn","rewrite-clj.node/linebreak?","cljs.core.apply","cljs.core.take_while","nextjournal.markdown/parse","cljs.core.into","nextjournal.markdown.parser/add-title+toc","p__75406","map__75407","nextjournal.clerk.parser/code-cell?","p__75408","map__75409","nextjournal.clerk.parser/parse-markdown-cell","p__75417","map__75418","nextjournal.clerk.parser/parse-markdown-string","map__75419","content","toc","G__75421","map__75422","map__75438","md-slice","temp__5755__auto__","p1__75414#","G__75440","cljs.core/seq","G__75441","p1__75415#","G__75439"],"sourcesContent":["(ns nextjournal.clerk.parser\n  \"Clerk's Parser turns Clojure & Markdown files and strings into Clerk documents.\"\n  (:require [clojure.core :as core]\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [nextjournal.markdown :as markdown]\n            [nextjournal.markdown.parser :as markdown.parser]\n            [nextjournal.markdown.transform :as markdown.transform]\n            [rewrite-clj.node :as n]\n            [rewrite-clj.parser :as p]))\n\n(defn ns? [form]\n  (and (seq? form) (= 'ns (first form))))\n\n(defn remove-leading-semicolons [s]\n  (str/replace s #\"^[;]+\" \"\"))\n\n\n(defn ^:private legacy-doc-visibility [form]\n  (when-let [visibility (-> form meta :nextjournal.clerk/visibility)]\n    (when-let [visibility-set (cond\n                                (keyword? visibility) #{visibility}\n                                (set? visibility) visibility)]\n      {:code (or (some #(get visibility-set %) [:hide :fold]) :show)})))\n\n#_(legacy-doc-visibility '^{:nextjournal.clerk/visibility :hide-ns} (ns foo))\n#_(legacy-doc-visibility '^{:nextjournal.clerk/visibility :fold} (ns foo))\n#_(legacy-doc-visibility '^{:nextjournal.clerk/visibility :hide} (ns foo))\n\n(defn ^:private legacy-form-visibility [form visibility]\n  (when-let [legacy-visibility (cond\n                                 (keyword? visibility) #{visibility}\n                                 (set? visibility) visibility)]\n    (let [visibility-set' (cond-> legacy-visibility\n                            (:hide-ns legacy-visibility) (conj legacy-visibility :hide))]\n      (merge {:code (or (some #(get visibility-set' %) [:hide :fold]) :show)}\n             (when (or (some-> form meta :nextjournal.clerk/viewer name (= \"hide-result\"))\n                       (and (seq? form) (symbol? (first form)) (= \"hide-result\" (name (first form)))))\n               {:result :hide})))))\n\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :hide-ns} (ns foo) :hide-ns)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :fold} (ns foo) :fold)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :hide} (ns foo) :hide)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :show :nextjournal.clerk/viewer :hide-result} (def my-range (range 600)) :show)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :show :nextjournal.clerk/viewer nextjournal.clerk/hide-result} (def my-range (range 500)) :show)\n\n(defn visibility-marker? [form]\n  (and (map? form) (contains? form :nextjournal.clerk/visibility)))\n\n(defn parse-visibility [form visibility]\n  (or (legacy-form-visibility form visibility) ;; TODO: drop legacy visibiliy support before 1.0\n      (when-let [visibility-map (and visibility (cond->> visibility (not (map? visibility)) (hash-map :code)))]\n        (when-not (and (every? #{:code :result} (keys visibility-map))\n                       (every? #{:hide :show :fold} (vals visibility-map)))\n          (throw (ex-info \"Invalid `:nextjournal.clerk/visibility`, please pass a map with `:code` and `:result` keys, allowed values are `:hide`, `:show` and `:fold`.\"\n                          (cond-> {:visibility visibility}\n                            form (assoc :form form)))))\n        visibility-map)))\n\n#_(parse-visibility nil nil)\n#_(parse-visibility nil {:code :fold :result :hide})\n\n(defn ->visibility [form]\n  (if (visibility-marker? form)\n    {:code :hide :result :hide}\n    (cond-> (parse-visibility form (-> form meta :nextjournal.clerk/visibility))\n      (ns? form) (merge {:result :hide}))))\n\n#_(->visibility (quote ^{:nextjournal.clerk/visibility :fold} (ns foo)))\n#_(->visibility '(foo :bar))\n#_(->visibility (quote (ns foo {:nextjournal.clerk/visibility {:code :fold :result :hide}})))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility {:code :fold :result :hide}} (ns foo)))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility :hidden} (ns foo)))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility \"bam\"} (ns foo)))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility #{:hide-ns}} (do :foo)))\n\n(defn get-doc-setting [form key]\n  (or (when (ns? form) (merge (-> form second meta key) (some key form)))\n      (when (map? form) (get form key))))\n\n(defn ->doc-visibility [form]\n  (cond\n    ;; TODO: drop legacy visibility support before 1.0\n    (and (ns? form) (legacy-doc-visibility form))\n    (legacy-doc-visibility form)\n\n    (or (ns? form) (visibility-marker? form))\n    (parse-visibility form (get-doc-setting form :nextjournal.clerk/visibility))))\n\n#_(->doc-visibility '(ns foo \"my docs\" {:nextjournal.clerk/visibility {:code :fold :result :hide}}))\n#_(->doc-visibility '{:nextjournal.clerk/visibility {:code :fold}})\n#_(->doc-visibility '(ns foo \"my docs\" {}))\n#_(->doc-visibility '(ns ^{:nextjournal.clerk/visibility {:code :fold :result :hide}} foo))\n#_(->doc-visibility '(ns ^{:nextjournal.clerk/visibility {:code :fold}} foo\n                       {:nextjournal.clerk/visibility {:result :hide}}))\n\n(defn ->doc-settings [first-form]\n  {:ns? (ns? first-form)\n   :toc-visibility (or (#{true :collapsed} (:nextjournal.clerk/toc\n                                            (merge (-> first-form meta) ;; TODO: deprecate\n                                                   (when (ns? first-form)\n                                                     (merge (-> first-form second meta)\n                                                            (first (filter map? first-form)))))))\n                       false)})\n\n(defn ->open-graph [{:keys [title blocks]}]\n  (merge {:type \"article:clerk\"\n          :title title\n          :description (first (sequence\n                               (comp (keep :doc)\n                                     (mapcat :content)\n                                     (filter (comp #{:paragraph} :type))\n                                     (map markdown.transform/->text)) blocks))}\n         (some #(get-doc-setting (:form %) :nextjournal.clerk/open-graph) blocks)))\n\n#_(->open-graph\n   (nextjournal.clerk.analyzer/analyze-doc\n    (parse-file {:doc? true} \"notebooks/open_graph.clj\")))\n\n(defn add-open-graph-metadata [doc] (assoc doc :open-graph (->open-graph doc)))\n\n;; TODO: Unify with get-doc-settings\n(defn add-auto-expand-results [{:as doc :keys [blocks]}]\n  (assoc doc :auto-expand-results? (some (fn [{:keys [form]}]\n                                           (when (ns? form) (some :nextjournal.clerk/auto-expand-results? form)))\n                                         blocks)))\n\n#_(->doc-settings '^{:nextjournal.clerk/toc :boom} (ns foo)) ;; TODO: error\n\n(defn add-block-visibility [{:as analyzed-doc :keys [blocks]}]\n  (-> (reduce (fn [{:as state :keys [visibility]} {:as block :keys [var form type]}]\n                (let [visibility' (merge visibility (->doc-visibility form))]\n                  (cond-> (-> state\n                              (update :blocks conj (cond-> block\n                                                     (= type :code) (assoc :visibility (merge visibility' (->visibility form))))))\n                    (= type :code) (assoc :visibility visibility'))))\n              (assoc analyzed-doc :blocks [] :visibility {:code :show :result :show})\n              blocks)\n      (dissoc :visibility)))\n\n(def code-tags\n  #{:deref :map :meta :list :quote :syntax-quote :reader-macro :set :token :var :vector})\n\n(def whitespace-on-line-tags\n  #{:comment :whitespace :comma})\n\n(defn parse-clojure-string\n  ([s] (parse-clojure-string {} s))\n  ([opts s] (parse-clojure-string opts {:blocks []} s))\n  ([{:as _opts :keys [doc?]} initial-state s]\n   (loop [{:as state :keys [nodes blocks visibility add-comment-on-line?]} (assoc initial-state :nodes (:children (p/parse-string-all s)))]\n     (if-let [node (first nodes)]\n       (recur (cond\n                (code-tags (n/tag node))\n                (-> state\n                    (assoc :add-comment-on-line? true)\n                    (update :nodes rest)\n                    (update :blocks conj {:type :code\n                                          :text (n/string node)\n                                          :loc (-> (meta node)\n                                                   (set/rename-keys {:row :line\n                                                                     :col :column})\n                                                   (select-keys [:line :column]))}))\n\n                (and add-comment-on-line? (whitespace-on-line-tags (n/tag node)))\n                (-> state\n                    (assoc :add-comment-on-line? (not (n/comment? node)))\n                    (update :nodes rest)\n                    (update-in [:blocks (dec (count blocks)) :text] str (-> node n/string str/trim-newline)))\n\n                (and doc? (n/comment? node))\n                (-> state\n                    (assoc :add-comment-on-line? false)\n                    (assoc :nodes (drop-while (some-fn n/comment? n/linebreak?) nodes))\n                    (update :blocks conj {:type :markdown\n                                          :doc (-> (apply str (map (comp remove-leading-semicolons n/string)\n                                                                   (take-while (some-fn n/comment? n/linebreak?) nodes)))\n                                                   markdown/parse\n                                                   (select-keys [:type :content]))}))\n                :else\n                (-> state\n                    (assoc :add-comment-on-line? false)\n                    (update :nodes rest))))\n       (merge (select-keys state [:blocks])\n              (when doc?\n                (-> {:content (into []\n                                    (comp (filter (comp #{:markdown} :type))\n                                          (mapcat (comp :content :doc)))\n                                    blocks)}\n                    markdown.parser/add-title+toc\n                    (select-keys [:title :toc]))))))))\n\n#_(parse-clojure-string {:doc? true} \"'code ;; foo\\n;; bar\")\n#_(parse-clojure-string \"'code , ;; foo\\n;; bar\")\n#_(parse-clojure-string \"'code\\n;; foo\\n;; bar\")\n#_(keys (parse-clojure-string {:doc? true} (slurp \"notebooks/viewer_api.clj\")))\n\n(defn code-cell? [{:as node :keys [type]}]\n  (and (= :code type) (contains? node :info)))\n\n(defn parse-markdown-cell [{:as state :keys [nodes]}]\n  (assoc (parse-clojure-string {:doc? true} state (markdown.transform/->text (first nodes)))\n         :nodes (rest nodes)\n         ::md-slice []))\n\n(defn parse-markdown-string [{:keys [doc?]} s]\n  (let [{:keys [content toc title]} (markdown/parse s)]\n    (loop [{:as state :keys [nodes] ::keys [md-slice]} {:blocks [] ::md-slice [] :nodes content}]\n      (if-some [node (first nodes)]\n        (recur\n         (if (code-cell? node)\n           (-> state\n               (update :blocks #(cond-> % (seq md-slice) (conj {:type :markdown :doc {:type :doc :content md-slice}})))\n               parse-markdown-cell)\n\n           (-> state (update :nodes rest) (cond-> doc? (update ::md-slice conj node)))))\n\n        (-> state\n            (update :blocks #(cond-> % (seq md-slice) (conj {:type :markdown :doc {:type :doc :content md-slice}})))\n            (select-keys [:blocks :visibility])\n            (merge (when doc? {:title title :toc toc})))))))\n\n#?(:clj\n   (defn parse-file\n     ([file] (parse-file {} file))\n     ([opts file] (-> (if (str/ends-with? file \".md\")\n                        (parse-markdown-string opts (slurp file))\n                        (parse-clojure-string opts (slurp file)))\n                      (assoc :file file)))))\n\n#_(parse-file {:doc? true} \"notebooks/visibility.clj\")\n#_(parse-file \"notebooks/visibility.clj\")\n#_(parse-file \"notebooks/elements.clj\")\n#_(parse-file \"notebooks/markdown.md\")\n#_(parse-file {:doc? true} \"notebooks/rule_30.clj\")\n#_(parse-file \"notebooks/src/demo/lib.cljc\")\n"]}