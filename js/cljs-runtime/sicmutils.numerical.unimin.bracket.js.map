{"version":3,"sources":["sicmutils/numerical/unimin/bracket.cljc"],"mappings":"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","names":["sicmutils.numerical.unimin.bracket/epsilon","sicmutils.numerical.unimin.bracket/ascending-by","f","a","b","fa","fb","p__88245","p__88246","p__88247","vec__88248","cljs.core.nth","vec__88251","vec__88254","%","p1__88239#","js/Error","sicmutils.numerical.unimin.bracket/parabolic-pieces","xa","xb","xc","fc","cljs.core/second","tmp1","tmp2","v","p","q","sicmutils.generic/negate","sicmutils.generic/abs","p__88259","vec__88260","sicmutils.numerical.unimin.bracket/parabolic-step","c","vec__88263","two-eps","p__88267","map__88268","cljs.core/--destructure-map","cljs.core.get","sicmutils.numerical.unimin.bracket/bracket-step-fn","grow-limit","p__88269","p__88270","vec__88271","vec__88274","wlim","w","fw","new-c","sicmutils.numerical.unimin.golden/extend-pt","var_args","G__88279","sicmutils.numerical.unimin.bracket/bracket-min","p__88280","map__88281","sicmutils.numerical.unimin.bracket.bracket_min","maxiter","maxfun","opts","vec__88282","vec__88285","vec__88288","vec__88291","f-counter","sicmutils.util.counted","step","stop-fn","p__88294","p__88295","vec__88296","vec__88299","_","iteration","cljs.core/deref","complete","p__88305","p__88306","vec__88307","vec__88310","iterations","m","cljs.core.assoc","G__88317","vec__88318","vec__88330","G__88336","sicmutils.numerical.unimin.bracket/bracket-max","sicmutils.numerical.unimin.bracket.bracket_max","-f","cljs.core.comp","G__88342","sicmutils.numerical.unimin.bracket/bracket-min-scmutils","p__88344","map__88345","sicmutils.numerical.unimin.bracket.bracket_min_scmutils","start","vec__88347","vec__88350","vec__88353","vec__88356","p__88362","p__88363","p__88364","vec__88365","vec__88368","vec__88371","x__4339__auto__","y__4340__auto__","p__88375","p__88376","vec__88378","vec__88381","run","p__88387","p__88388","vec__88393","vec__88396","iter","xd","G__88402","sicmutils.numerical.unimin.bracket/bracket-max-scmutils","sicmutils.numerical.unimin.bracket.bracket_max_scmutils"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.numerical.unimin.bracket\n  (:require [sicmutils.generic :as g]\n            [sicmutils.numerical.unimin.golden :as ug]\n            [sicmutils.util :as u]))\n\n(def ^:private epsilon 1e-21)\n\n(defn ascending-by\n  \"Returns the points ordered as f(a) < f(b)\"\n  [f a b]\n  (let [fa (f a) fb (f b)]\n    (if (< fa fb)\n      [[a fa] [b fb]]\n      [[b fb] [a fa]])))\n\n(defn parabolic-pieces\n  \"Accepts three pairs of `[x, (f x)]`, fits a quadratic function to all three\n  points and returns the step from `xb` (the coordinate of the second argument)\n  to the minimum of the fitted quadratic.\n\n  Returns the numerator and denominator `p` and `q` of the required step. If `q`\n  is 0, then the supplied points were colinear.\n\n  `q` is guaranteed to be `>= 0`, while `p` might be negative.\n\n  See these notes for the derivation of this method:\n  http://fourier.eng.hmc.edu/e176/lectures/NM/node25.html\"\n  [[xa fa] [xb fb] [xc fc]]\n  {:post [#(>= (second %) 0)]}\n  (let [tmp1  (* (- xb xa) (- fb fc))\n        tmp2  (* (- xb xc) (- fb fa))\n        v     (- tmp2 tmp1)\n        p (- (* (- xb xc) tmp2)\n             (* (- xb xa) tmp1))\n        q (* 2.0 v)]\n    (if (pos? q)\n      [(g/negate p) q]\n      [p (g/abs q)])))\n\n(defn parabolic-step\n  \"Fits a parabola through all three points, and returns the coordinate of the\n  minimum of the parabola.\n\n  If the supplied points are colinear, returns a point that takes a large jump\n  in the direction of the downward slope of the line.\"\n  [a [xb :as b] c]\n  (let [two-eps (* 2.0 epsilon)\n        [p q] (parabolic-pieces a b c)\n        q (if (< q two-eps)\n            two-eps\n            q)]\n    (+ xb (/ p q))))\n\n(defn bracket-step-fn\n  \"Returns a function that performs steps of bracket extension.\n\n  :grow-limit is the maximum factor that the parabolic interpolation can jump\n  the function.\"\n  [f {:keys [grow-limit] :or {grow-limit 110.0}}]\n  (fn [a\n      [xb fb :as b]\n      [xc fc :as c]]\n    (let [;; If f(c) is < f(b) the minimum of the parabola will be far\n          ;; outside the bounds. This is a bound on how far we're allowed to\n          ;; jump in a single step.\n          wlim (+ xb (* grow-limit (- xc xb)))\n          w (parabolic-step a b c)]\n      (cond\n        ;; If the minimum is between b and c, we know that either b or w are\n        ;; suitable minima, since f(b) < f(a).\n        (<= xb w xc)\n        (let [fw (f w)]\n          (cond\n            ;; if the parabolic minimum w evaluates to < f(c), shift the interval\n            ;; to (b, w, c):\n            (< fw fc) [b [w fw] c]\n\n            ;; If f(b) < f(w) >= f(c), tighten the interval to (a, b, w):\n            (> fw fb) [a b [w fw]]\n\n            ;; If the points are in descending order - f(a) > f(b) >= f(w) >=\n            ;; f(c) - stretch beyond `c` to attempt to find an increasing\n            ;; region.\n            :else (let [new-c (ug/extend-pt xc xb)]\n                    [b c [new-c (f new-c)]])))\n\n        ;; This is the case where the parabolic minimum stretched beyond c but\n        ;; hasn't reached its limit.\n        (<= xc w wlim)\n        (let [fw (f w)]\n          (if (< fw fc)\n            ;; If we're still descending, shift the interval fully right to (c,\n            ;; w, stretched-c)\n            (let [new-c (ug/extend-pt w xc)]\n              [c [w fw] [new-c (f new-c)]])\n            ;; if the fn value starts to rise, tighten to (b, c, w).\n            [b c [w fw]]))\n\n        ;; If the parabolic interpolation jumps beyond the stretch limit, adjust\n        ;; the range to the limit only.\n        (<= xc wlim w) [b c [wlim (f wlim)]]\n\n        ;; I don't this this branch can ever actually be reached.\n        :else (let [new-c (ug/extend-pt xc xb)]\n                [b c [new-c (f new-c)]])))))\n\n(defn bracket-min\n  \"Generates an interval `[lo, hi]` that is guaranteed to contain a minimum of the\n  function `f`, along with a candidate point `[mid, (f mid)]` that the user can\n  use to start a minimum search.\n\n  Returns a dictionary of the form:\n\n  {:lo `lower end of the bracket`\n   :mid `candidate point`\n   :hi `upper end of the bracket`\n   :fncalls `# of fn evaluations so far`\n   :iterations `total iterations`}\n\n  `:lo`, `:mid` and `:hi` are each pairs of the form `[x, (f x)]`.\n\n  The implementation works by growing the bounds using either:\n\n  - a step outside the bounds that places one bound at the golden-ratio cut\n  point between the new bounds, or\n  - a parabola with a minimum interpolated outside the current bounds, bounded b\n  a max.\n\n  This implementation was ported from `scipy.optimize.optimize.bracket`:\n  https://github.com/scipy/scipy/blob/v1.5.2/scipy/optimize/optimize.py#L2450\n\n  `bracket-min` supports the following optional keyword arguments:\n\n  `:xa` the initial guess for the lower end of the bracket. Defaults to 0.0.\n\n  `:xb` the initial guess for the upper end of the bracket. Defaults to 1.0. (If\n  these points aren't supplied in sorted order they'll be switched.)\n\n  `:grow-limit` The maximum factor that the parabolic interpolation can jump the\n  function. Defaults to 110.0.\n\n  `:maxiter` Maximum number of iterations allowed for the minimizer. Defaults to\n  1000.\n\n  `:maxfun` Maximum number of times the function can be evaluated before exiting.\n  Defaults to 1000.\n  \"\n  ([f] (bracket-min f {}))\n  ([f {:keys [xa xb maxiter maxfun]\n       :or {xa 0.0\n            xb 1.0\n            maxiter 1000\n            maxfun 1000}\n       :as opts}]\n   (let [[f-counter f] (u/counted f)\n         step (bracket-step-fn f opts)\n         stop-fn (fn [_ [_ fb] [_ fc] iteration]\n                   (or (> iteration maxiter)\n                       (> @f-counter maxfun)\n                       (<= fb fc)))\n         complete (fn [[xa :as a] b [xc :as c] iterations]\n                    (let [m {:lo a\n                             :mid b\n                             :hi c\n                             :fncalls @f-counter\n                             :iterations iterations}]\n                      (if (< xc xa)\n                        (assoc m :lo c :hi a)\n                        m)))\n         ;; Massage starting values into descending order by f; f(b) < f(a).\n         [[xb :as b] [xa :as a]] (ascending-by f xa xb)\n\n         ;; Generate the first value of c by stretching b away from a with\n         ;; golden-ratio amount, so that b ends up at the golden ratio\n         ;; point (with short segment leading to `a`).\n         xc (ug/extend-pt xb xa)\n         fc (f xc)]\n     (loop [[a b c] [a b [xc fc]]\n            iteration 0]\n       (if (stop-fn a b c iteration)\n         (complete a b c iteration)\n         (recur (step a b c)\n                (inc iteration)))))))\n\n(defn bracket-max\n  \"Identical to bracket-min, except brackets a maximum of the supplied fn.\"\n  ([f] (bracket-max f {}))\n  ([f opts]\n   (let [-f (comp g/negate f)]\n     (bracket-min -f opts))))\n\n(defn bracket-min-scmutils\n  \" Given a function f, a starting point and a step size, try to bracket a local\n  extremum for f.\n\n  Return a list (retcode a b c fa fb fc iter-count) where a < b < c, and fa, fb,\n  fc are the function values at these points. In the case of a minimum, fb\n  <= (min fa fc); the opposite inequality holds in the case of a maximum.\n\n  iter-count is the number of function evaluations required. retcode is 'okay if\n  the search succeeded, or 'maxcount if it was abandoned.\n  \"\n  ([f] (bracket-min-scmutils f {}))\n  ([f {:keys [start step maxiter]\n       :or {start 0\n            step 10\n            maxiter 1000}}]\n   (let [[f-counter f] (u/counted f)\n         stop-fn (fn [[_ fa] [_ fb] [_ fc] iteration]\n                   (or (> iteration maxiter)\n                       (<= fb (min fa fc))))\n         complete (fn [[xa :as a] b [xc :as c] iterations]\n                    (let [m {:lo a\n                             :mid b\n                             :hi c\n                             :fncalls @f-counter\n                             :converged? (<= iterations maxiter)\n                             :iterations iterations}]\n                      (if (< xc xa)\n                        (assoc m :lo c :hi a)\n                        m)))\n         run (fn [[xa :as a] b [xc :as c] iter]\n               (if (stop-fn a b c iter)\n                 (complete a b c iter)\n                 (let [xd (+ xc (- xc xa))]\n                   (recur b c [xd (f xd)] (inc iter)))))\n         [[xb :as b] [xa :as a]] (ascending-by f start (+ start step))\n         xc (+ xb (- xb xa))]\n     (run a b [xc (f xc)] 0))))\n\n(defn bracket-max-scmutils\n  \"Identical to bracket-min-scmutils, except brackets a maximum of the supplied\n  fn.\"\n  ([f] (bracket-max-scmutils f {}))\n  ([f opts]\n   (let [-f (comp g/negate f)]\n     (bracket-min -f opts))))\n"]}