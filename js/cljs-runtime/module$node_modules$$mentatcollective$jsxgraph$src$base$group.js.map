{
"version":3,
"file":"module$node_modules$$mentatcollective$jsxgraph$src$base$group.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/@mentatcollective/jsxgraph/src/base/group.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mentatcollective$jsxgraph$src$base$group\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jxg = _interopRequireDefault(require(\"../jxg\"));\n\nvar _constants = _interopRequireDefault(require(\"./constants\"));\n\nvar _math = _interopRequireDefault(require(\"../math/math\"));\n\nvar _geometry = _interopRequireDefault(require(\"../math/geometry\"));\n\nvar _type = _interopRequireDefault(require(\"../utils/type\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n    Copyright 2008-2022\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <http://www.gnu.org/licenses/>\n    and <http://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview In this file the class Group is defined, a class for\n * managing grouping of points.\n */\n\n/**\n * Creates a new instance of Group.\n * @class In this class all group management is done.\n * @param {JXG.Board} board\n * @param {String} id Unique identifier for this object.  If null or an empty string is given,\n * an unique id will be generated by Board\n * @param {String} name Not necessarily unique name, displayed on the board.  If null or an\n * empty string is given, an unique name will be generated.\n * @param {Array} objects Array of points to add to this group.\n * @param {Object} attributes Defines the visual appearance of the group.\n * @constructor\n */\n_jxg.default.Group = function (board, id, name, objects, attributes) {\n  var number, objArray, i, obj;\n  this.board = board;\n  this.objects = {};\n  number = this.board.numObjects;\n  this.board.numObjects += 1;\n\n  if (id === \"\" || !_type.default.exists(id)) {\n    this.id = this.board.id + \"Group\" + number;\n  } else {\n    this.id = id;\n  }\n\n  this.board.groups[this.id] = this;\n  this.type = _constants.default.OBJECT_TYPE_POINT;\n  this.elementClass = _constants.default.OBJECT_CLASS_POINT;\n\n  if (name === \"\" || !_type.default.exists(name)) {\n    this.name = \"group_\" + this.board.generateName(this);\n  } else {\n    this.name = name;\n  }\n\n  delete this.type;\n  /**\n   * Cache coordinates of points. From this and the actual position\n   * of the points, the translation is determined.\n   * It has to be kept updated in this class \"by hand\"-\n   *\n   * @private\n   * @type Object\n   * @see JXG.Group#_updateCoordsCache\n   */\n\n  this.coords = {};\n  this.needsRegularUpdate = attributes.needsregularupdate;\n  this.rotationCenter = \"centroid\";\n  this.scaleCenter = null;\n  this.rotationPoints = [];\n  this.translationPoints = [];\n  this.scalePoints = [];\n  this.scaleDirections = {};\n  this.parents = [];\n\n  if (_type.default.isArray(objects)) {\n    objArray = objects;\n  } else {\n    objArray = Array.prototype.slice.call(arguments, 3);\n  }\n\n  for (i = 0; i < objArray.length; i++) {\n    obj = this.board.select(objArray[i]);\n\n    if (!_type.default.evaluate(obj.visProp.fixed) && _type.default.exists(obj.coords)) {\n      this.addPoint(obj);\n    }\n  }\n\n  this.methodMap = {\n    ungroup: \"ungroup\",\n    add: \"addPoint\",\n    addPoint: \"addPoint\",\n    addPoints: \"addPoints\",\n    addGroup: \"addGroup\",\n    remove: \"removePoint\",\n    removePoint: \"removePoint\",\n    setAttribute: \"setAttribute\",\n    setProperty: \"setAttribute\"\n  };\n};\n\n_jxg.default.extend(_jxg.default.Group.prototype,\n/** @lends JXG.Group.prototype */\n{\n  /**\n   * Releases all elements of this group.\n   * @returns {JXG.Group} returns this (empty) group\n   */\n  ungroup: function () {\n    var el, p, i;\n\n    for (el in this.objects) {\n      if (this.objects.hasOwnProperty(el)) {\n        p = this.objects[el].point;\n\n        if (_type.default.isArray(p.groups)) {\n          i = _type.default.indexOf(p.groups, this.id);\n\n          if (i >= 0) {\n            delete p.groups[i];\n          }\n        }\n      }\n    }\n\n    this.objects = {};\n    return this;\n  },\n\n  /**\n   * Adds ids of elements to the array this.parents. This is a copy\n   * of {@link Element.addParents}.\n   * @param {Array} parents Array of elements or ids of elements.\n   * Alternatively, one can give a list of objects as parameters.\n   * @returns {JXG.Object} reference to the object itself.\n   **/\n  addParents: function (parents) {\n    var i, len, par;\n\n    if (_type.default.isArray(parents)) {\n      par = parents;\n    } else {\n      par = arguments;\n    }\n\n    len = par.length;\n\n    for (i = 0; i < len; ++i) {\n      if (_type.default.isId(this.board, par[i])) {\n        this.parents.push(par[i]);\n      } else if (_type.default.exists(par[i].id)) {\n        this.parents.push(par[i].id);\n      }\n    }\n\n    this.parents = _type.default.uniqueArray(this.parents);\n  },\n\n  /**\n   * Sets ids of elements to the array this.parents. This is a copy\n   * of {@link Element.setParents}\n   * First, this.parents is cleared. See {@link Group#addParents}.\n   * @param {Array} parents Array of elements or ids of elements.\n   * Alternatively, one can give a list of objects as parameters.\n   * @returns {JXG.Object} reference to the object itself.\n   **/\n  setParents: function (parents) {\n    this.parents = [];\n    this.addParents(parents);\n    return this;\n  },\n\n  /**\n   * List of the element ids resp. values used as parents in {@link JXG.Board#create}.\n   * @returns {Array}\n   */\n  getParents: function () {\n    return _type.default.isArray(this.parents) ? this.parents : [];\n  },\n\n  /**\n   * Update the cached coordinates of a group element.\n   * @param  {String} el element id of the group element whose cached coordinates\n   * are going to be updated.\n   * @return null\n   */\n  _updateCoordsCache: function (el) {\n    var obj;\n\n    if (el !== \"\" && _type.default.exists(this.objects[el])) {\n      obj = this.objects[el].point;\n      this.coords[obj.id] = {\n        usrCoords: obj.coords.usrCoords.slice(0)\n      };\n    }\n  },\n\n  /**\n   * Sends an update to all group members.\n   * This method is called from the points' coords object event listeners\n   * and not by the board.\n   * @returns {JXG.Group} returns this group\n   */\n  update: function () {\n    var drag,\n        el,\n        actionCenter,\n        desc,\n        s,\n        sx,\n        sy,\n        alpha,\n        t,\n        center,\n        obj = null;\n\n    if (!this.needsUpdate) {\n      return this;\n    }\n\n    drag = this._update_find_drag_type();\n\n    if (drag.action === \"nothing\") {\n      this._updateCoordsCache(drag.id);\n\n      return this;\n    }\n\n    obj = this.objects[drag.id].point; // Prepare translation, scaling or rotation\n\n    if (drag.action === \"translation\") {\n      t = [obj.coords.usrCoords[1] - this.coords[drag.id].usrCoords[1], obj.coords.usrCoords[2] - this.coords[drag.id].usrCoords[2]];\n    } else if (drag.action === \"rotation\" || drag.action === \"scaling\") {\n      if (drag.action === \"rotation\") {\n        actionCenter = \"rotationCenter\";\n      } else {\n        actionCenter = \"scaleCenter\";\n      }\n\n      if (_type.default.isPoint(this[actionCenter])) {\n        center = this[actionCenter].coords.usrCoords.slice(1);\n      } else if (this[actionCenter] === \"centroid\") {\n        center = this._update_centroid_center();\n      } else if (_type.default.isArray(this[actionCenter])) {\n        center = this[actionCenter];\n      } else if (_type.default.isFunction(this[actionCenter])) {\n        center = this[actionCenter]();\n      } else {\n        return this;\n      }\n\n      if (drag.action === \"rotation\") {\n        alpha = _geometry.default.rad(this.coords[drag.id].usrCoords.slice(1), center, this.objects[drag.id].point);\n        t = this.board.create(\"transform\", [alpha, center[0], center[1]], {\n          type: \"rotate\"\n        });\n        t.update(); // This initializes t.matrix, which is needed if the action element is the first group element.\n      } else if (drag.action === \"scaling\") {\n        s = _geometry.default.distance(this.coords[drag.id].usrCoords.slice(1), center);\n\n        if (Math.abs(s) < _math.default.eps) {\n          return this;\n        }\n\n        s = _geometry.default.distance(obj.coords.usrCoords.slice(1), center) / s;\n        sx = this.scaleDirections[drag.id].indexOf(\"x\") >= 0 ? s : 1.0;\n        sy = this.scaleDirections[drag.id].indexOf(\"y\") >= 0 ? s : 1.0; // Shift scale center to origin, scale and shift the scale center back.\n\n        t = this.board.create(\"transform\", [1, 0, 0, center[0] * (1 - sx), sx, 0, center[1] * (1 - sy), 0, sy], {\n          type: \"generic\"\n        });\n        t.update(); // This initializes t.matrix, which is needed if the action element is the first group element.\n      } else {\n        return this;\n      }\n    }\n\n    this._update_apply_transformation(drag, t);\n\n    this.needsUpdate = false; // This is needed here to prevent infinite recursion because\n    // of the board.updateElements call below,\n    // Prepare dependent objects for update\n\n    for (el in this.objects) {\n      if (this.objects.hasOwnProperty(el)) {\n        for (desc in this.objects[el].descendants) {\n          if (this.objects[el].descendants.hasOwnProperty(desc)) {\n            this.objects[el].descendants.needsUpdate = this.objects[el].descendants.needsRegularUpdate || this.board.needsFullUpdate;\n          }\n        }\n      }\n    }\n\n    this.board.updateElements(drag); // Now, all group elements have their new position and\n    // we can update the bookkeeping of the coordinates of the group elements.\n\n    for (el in this.objects) {\n      if (this.objects.hasOwnProperty(el)) {\n        this._updateCoordsCache(el);\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * @private\n   * Determine what the dragging of a group element should do:\n   * rotation, translation, scaling or nothing.\n   */\n  _update_find_drag_type: function () {\n    var el,\n        obj,\n        action = \"nothing\",\n        changed = [],\n        dragObjId; // Determine how many elements have changed their position\n    // If more than one element changed its position, it is a translation.\n    // If exactly one element changed its position we have to find the type of the point.\n\n    for (el in this.objects) {\n      if (this.objects.hasOwnProperty(el)) {\n        obj = this.objects[el].point;\n\n        if (obj.coords.distance(_constants.default.COORDS_BY_USER, this.coords[el]) > _math.default.eps) {\n          changed.push(obj.id);\n        }\n      }\n    } // Determine type of action: translation, scaling or rotation\n\n\n    if (changed.length === 0) {\n      return {\n        action: action,\n        id: \"\",\n        changed: changed\n      };\n    }\n\n    dragObjId = changed[0];\n    obj = this.objects[dragObjId].point;\n\n    if (changed.length > 1) {\n      // More than one point moved => translation\n      action = \"translation\";\n    } else {\n      // One point moved => we have to determine the type\n      if (_type.default.isInArray(this.rotationPoints, obj) && _type.default.exists(this.rotationCenter)) {\n        action = \"rotation\";\n      } else if (_type.default.isInArray(this.scalePoints, obj) && _type.default.exists(this.scaleCenter)) {\n        action = \"scaling\";\n      } else if (_type.default.isInArray(this.translationPoints, obj)) {\n        action = \"translation\";\n      }\n    }\n\n    return {\n      action: action,\n      id: dragObjId,\n      changed: changed\n    };\n  },\n\n  /**\n   * @private\n   * Determine the Euclidean coordinates of the centroid of the group.\n   * @returns {Array} array of length two,\n   */\n  _update_centroid_center: function () {\n    var center, len, el;\n    center = [0, 0];\n    len = 0;\n\n    for (el in this.coords) {\n      if (this.coords.hasOwnProperty(el)) {\n        center[0] += this.coords[el].usrCoords[1];\n        center[1] += this.coords[el].usrCoords[2];\n        ++len;\n      }\n    }\n\n    if (len > 0) {\n      center[0] /= len;\n      center[1] /= len;\n    }\n\n    return center;\n  },\n\n  /**\n   * @private\n   * Apply the transformation to all elements of the group\n   */\n  _update_apply_transformation: function (drag, t) {\n    var el, obj;\n\n    for (el in this.objects) {\n      if (this.objects.hasOwnProperty(el)) {\n        if (_type.default.exists(this.board.objects[el])) {\n          obj = this.objects[el].point; // Here, it is important that we change the position\n          // of elements by using setCoordinates.\n          // Thus, we avoid the call of snapToGrid().\n          // This is done in the subsequent call of board.updateElements()\n          // in Group.update() above.\n\n          if (obj.id !== drag.id) {\n            if (drag.action === \"translation\") {\n              if (!_type.default.isInArray(drag.changed, obj.id)) {\n                obj.coords.setCoordinates(_constants.default.COORDS_BY_USER, [this.coords[el].usrCoords[1] + t[0], this.coords[el].usrCoords[2] + t[1]]);\n              }\n            } else if (drag.action === \"rotation\" || drag.action === \"scaling\") {\n              t.applyOnce([obj]);\n            }\n          } else {\n            if (drag.action === \"rotation\" || drag.action === \"scaling\") {\n              obj.coords.setCoordinates(_constants.default.COORDS_BY_USER, _math.default.matVecMult(t.matrix, this.coords[obj.id].usrCoords));\n            }\n          }\n        } else {\n          delete this.objects[el];\n        }\n      }\n    }\n  },\n\n  /**\n   * Adds an Point to this group.\n   * @param {JXG.Point} object The point added to the group.\n   * @returns {JXG.Group} returns this group\n   */\n  addPoint: function (object) {\n    this.objects[object.id] = {\n      point: this.board.select(object)\n    };\n\n    this._updateCoordsCache(object.id); //this.coords[object.id] = {usrCoords: object.coords.usrCoords.slice(0) };\n\n\n    this.translationPoints.push(object);\n    object.groups.push(this.id);\n    object.groups = _type.default.uniqueArray(object.groups);\n    return this;\n  },\n\n  /**\n   * Adds multiple points to this group.\n   * @param {Array} objects An array of points to add to the group.\n   * @returns {JXG.Group} returns this group\n   */\n  addPoints: function (objects) {\n    var p;\n\n    for (p = 0; p < objects.length; p++) {\n      this.addPoint(objects[p]);\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds all points in a group to this group.\n   * @param {JXG.Group} group The group added to this group.\n   * @returns {JXG.Group} returns this group\n   */\n  addGroup: function (group) {\n    var el;\n\n    for (el in group.objects) {\n      if (group.objects.hasOwnProperty(el)) {\n        this.addPoint(group.objects[el].point);\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes a point from the group.\n   * @param {JXG.Point} point\n   * @returns {JXG.Group} returns this group\n   */\n  removePoint: function (point) {\n    delete this.objects[point.id];\n    return this;\n  },\n\n  /**\n   * Sets the center of rotation for the group. This is either a point or the centroid of the group.\n   * @param {JXG.Point|String} object A point which will be the center of rotation, the string \"centroid\", or\n   * an array of length two, or a function returning an array of length two.\n   * @default 'centroid'\n   * @returns {JXG.Group} returns this group\n   */\n  setRotationCenter: function (object) {\n    this.rotationCenter = object;\n    return this;\n  },\n\n  /**\n   * Sets the rotation points of the group. Dragging at one of these points results into a rotation of the whole group around\n   * the rotation center of the group {@see JXG.Group#setRotationCenter}.\n   * @param {Array|JXG.Point} objects Array of {@link JXG.Point} or arbitrary number of {@link JXG.Point} elements.\n   * @returns {JXG.Group} returns this group\n   */\n  setRotationPoints: function (objects) {\n    return this._setActionPoints(\"rotation\", objects);\n  },\n\n  /**\n   * Adds a point to the set of rotation points of the group. Dragging at one of these points results into a rotation of the whole group around\n   * the rotation center of the group {@see JXG.Group#setRotationCenter}.\n   * @param {JXG.Point} point {@link JXG.Point} element.\n   * @returns {JXG.Group} returns this group\n   */\n  addRotationPoint: function (point) {\n    return this._addActionPoint(\"rotation\", point);\n  },\n\n  /**\n   * Removes the rotation property from a point of the group.\n   * @param {JXG.Point} point {@link JXG.Point} element.\n   * @returns {JXG.Group} returns this group\n   */\n  removeRotationPoint: function (point) {\n    return this._removeActionPoint(\"rotation\", point);\n  },\n\n  /**\n   * Sets the translation points of the group. Dragging at one of these points results into a translation of the whole group.\n   * @param {Array|JXG.Point} objects Array of {@link JXG.Point} or arbitrary number of {@link JXG.Point} elements.\n   *\n   * By default, all points of the group are translation points.\n   * @returns {JXG.Group} returns this group\n   */\n  setTranslationPoints: function (objects) {\n    return this._setActionPoints(\"translation\", objects);\n  },\n\n  /**\n   * Adds a point to the set of the translation points of the group.\n   * Dragging one of these points results into a translation of the whole group.\n   * @param {JXG.Point} point {@link JXG.Point} element.\n   * @returns {JXG.Group} returns this group\n   */\n  addTranslationPoint: function (point) {\n    return this._addActionPoint(\"translation\", point);\n  },\n\n  /**\n   * Removes the translation property from a point of the group.\n   * @param {JXG.Point} point {@link JXG.Point} element.\n   * @returns {JXG.Group} returns this group\n   */\n  removeTranslationPoint: function (point) {\n    return this._removeActionPoint(\"translation\", point);\n  },\n\n  /**\n   * Sets the center of scaling for the group. This is either a point or the centroid of the group.\n   * @param {JXG.Point|String} object A point which will be the center of scaling, the string \"centroid\", or\n   * an array of length two, or a function returning an array of length two.\n   * @returns {JXG.Group} returns this group\n   */\n  setScaleCenter: function (object) {\n    this.scaleCenter = object;\n    return this;\n  },\n\n  /**\n   * Sets the scale points of the group. Dragging at one of these points results into a scaling of the whole group.\n   * @param {Array|JXG.Point} objects Array of {@link JXG.Point} or arbitrary number of {@link JXG.Point} elements.\n   * @param {String} direction Restricts the directions to be scaled. Possible values are 'x', 'y', 'xy'. Default value is 'xy'.\n   *\n   * By default, all points of the group are translation points.\n   * @returns {JXG.Group} returns this group\n   */\n  setScalePoints: function (objects, direction) {\n    var objs, i, len;\n\n    if (_type.default.isArray(objects)) {\n      objs = objects;\n    } else {\n      objs = arguments;\n    }\n\n    len = objs.length;\n\n    for (i = 0; i < len; ++i) {\n      this.scaleDirections[this.board.select(objs[i]).id] = direction || \"xy\";\n    }\n\n    return this._setActionPoints(\"scale\", objects);\n  },\n\n  /**\n   * Adds a point to the set of the scale points of the group. Dragging at one of these points results into a scaling of the whole group.\n   * @param {JXG.Point} point {@link JXG.Point} element.\n   * @param {String} direction Restricts the directions to be scaled. Possible values are 'x', 'y', 'xy'. Default value is 'xy'.\n   * @returns {JXG.Group} returns this group\n   */\n  addScalePoint: function (point, direction) {\n    this._addActionPoint(\"scale\", point);\n\n    this.scaleDirections[this.board.select(point).id] = direction || \"xy\";\n    return this;\n  },\n\n  /**\n   * Removes the scaling property from a point of the group.\n   * @param {JXG.Point} point {@link JXG.Point} element.\n   * @returns {JXG.Group} returns this group\n   */\n  removeScalePoint: function (point) {\n    return this._removeActionPoint(\"scale\", point);\n  },\n\n  /**\n   * Generic method for {@link JXG.Group@setTranslationPoints} and {@link JXG.Group@setRotationPoints}\n   * @private\n   */\n  _setActionPoints: function (action, objects) {\n    var objs, i, len;\n\n    if (_type.default.isArray(objects)) {\n      objs = objects;\n    } else {\n      objs = arguments;\n    }\n\n    len = objs.length;\n    this[action + \"Points\"] = [];\n\n    for (i = 0; i < len; ++i) {\n      this._addActionPoint(action, objs[i]);\n    }\n\n    return this;\n  },\n\n  /**\n   * Generic method for {@link JXG.Group@addTranslationPoint} and {@link JXG.Group@addRotationPoint}\n   * @private\n   */\n  _addActionPoint: function (action, point) {\n    this[action + \"Points\"].push(this.board.select(point));\n    return this;\n  },\n\n  /**\n   * Generic method for {@link JXG.Group@removeTranslationPoint} and {@link JXG.Group@removeRotationPoint}\n   * @private\n   */\n  _removeActionPoint: function (action, point) {\n    var idx = this[action + \"Points\"].indexOf(this.board.select(point));\n\n    if (idx > -1) {\n      this[action + \"Points\"].splice(idx, 1);\n    }\n\n    return this;\n  },\n\n  /**\n   * @deprecated\n   * Use setAttribute\n   */\n  setProperty: function () {\n    _jxg.default.deprecated(\"Group.setProperty\", \"Group.setAttribute()\");\n\n    this.setAttribute.apply(this, arguments);\n  },\n  setAttribute: function () {\n    var el;\n\n    for (el in this.objects) {\n      if (this.objects.hasOwnProperty(el)) {\n        this.objects[el].point.setAttribute.apply(this.objects[el].point, arguments);\n      }\n    }\n\n    return this;\n  }\n});\n/**\n * @class This element combines a given set of {@link JXG.Point} elements to a\n *  group. The elements of the group and dependent elements can be translated, rotated and scaled by\n *  dragging one of the group elements.\n *\n *\n * @pseudo\n * @description\n * @name Group\n * @augments JXG.Group\n * @constructor\n * @type JXG.Group\n * @param {JXG.Board} board The board the points are on.\n * @param {Array} parents Array of points to group.\n * @param {Object} attributes Visual properties (unused).\n * @returns {JXG.Group}\n *\n * @example\n *\n *  // Create some free points. e.g. A, B, C, D\n *  // Create a group\n *\n *  var p, col, g;\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *  g = board.create('group', p);\n *\n * </pre><div class=\"jxgbox\" id=\"JXGa2204533-db91-4af9-b720-70394de4d367\" style=\"width: 400px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n *  (function () {\n *  var board, p, col, g;\n *  board = JXG.JSXGraph.initBoard('JXGa2204533-db91-4af9-b720-70394de4d367', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *  g = board.create('group', p);\n *  })();\n * \u003c/script><pre>\n *\n *\n * @example\n *\n *  // Create some free points. e.g. A, B, C, D\n *  // Create a group\n *  // If the points define a polygon and the polygon has the attribute hasInnerPoints:true,\n *  // the polygon can be dragged around.\n *\n *  var p, col, pol, g;\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *\n *  pol = board.create('polygon', p, {hasInnerPoints: true});\n *  g = board.create('group', p);\n *\n * </pre><div class=\"jxgbox\" id=\"JXG781b5564-a671-4327-81c6-de915c8f924e\" style=\"width: 400px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n *  (function () {\n *  var board, p, col, pol, g;\n *  board = JXG.JSXGraph.initBoard('JXG781b5564-a671-4327-81c6-de915c8f924e', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *  pol = board.create('polygon', p, {hasInnerPoints: true});\n *  g = board.create('group', p);\n *  })();\n * \u003c/script><pre>\n *\n *  @example\n *\n *  // Allow rotations:\n *  // Define a center of rotation and declare points of the group as \"rotation points\".\n *\n *  var p, col, pol, g;\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *\n *  pol = board.create('polygon', p, {hasInnerPoints: true});\n *  g = board.create('group', p);\n *  g.setRotationCenter(p[0]);\n *  g.setRotationPoints([p[1], p[2]]);\n *\n * </pre><div class=\"jxgbox\" id=\"JXGf0491b62-b377-42cb-b55c-4ef5374b39fc\" style=\"width: 400px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n *  (function () {\n *  var board, p, col, pol, g;\n *  board = JXG.JSXGraph.initBoard('JXGf0491b62-b377-42cb-b55c-4ef5374b39fc', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *  pol = board.create('polygon', p, {hasInnerPoints: true});\n *  g = board.create('group', p);\n *  g.setRotationCenter(p[0]);\n *  g.setRotationPoints([p[1], p[2]]);\n *  })();\n * \u003c/script><pre>\n *\n *  @example\n *\n *  // Allow rotations:\n *  // As rotation center, arbitrary points, coordinate arrays,\n *  // or functions returning coordinate arrays can be given.\n *  // Another possibility is to use the predefined string 'centroid'.\n *\n *  // The methods to define the rotation points can be chained.\n *\n *  var p, col, pol, g;\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *\n *  pol = board.create('polygon', p, {hasInnerPoints: true});\n *  g = board.create('group', p).setRotationCenter('centroid').setRotationPoints([p[1], p[2]]);\n *\n * </pre><div class=\"jxgbox\" id=\"JXG8785b099-a75e-4769-bfd8-47dd4376fe27\" style=\"width: 400px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n *  (function () {\n *  var board, p, col, pol, g;\n *  board = JXG.JSXGraph.initBoard('JXG8785b099-a75e-4769-bfd8-47dd4376fe27', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *  pol = board.create('polygon', p, {hasInnerPoints: true});\n *  g = board.create('group', p).setRotationCenter('centroid').setRotationPoints([p[1], p[2]]);\n *  })();\n * \u003c/script><pre>\n *\n *  @example\n *\n *  // Allow scaling:\n *  // As for rotation one can declare points of the group to trigger a scaling operation.\n *  // For this, one has to define a scaleCenter, in analogy to rotations.\n *\n *  // Here, the yellow  point enables scaling, the red point a rotation.\n *\n *  var p, col, pol, g;\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'yellow', fillColor:'yellow'}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *\n *  pol = board.create('polygon', p, {hasInnerPoints: true});\n *  g = board.create('group', p).setRotationCenter('centroid').setRotationPoints([p[2]]);\n *  g.setScaleCenter(p[0]).setScalePoints(p[1]);\n *\n * </pre><div class=\"jxgbox\" id=\"JXGc3ca436b-e4fc-4de5-bab4-09790140c675\" style=\"width: 400px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n *  (function () {\n *  var board, p, col, pol, g;\n *  board = JXG.JSXGraph.initBoard('JXGc3ca436b-e4fc-4de5-bab4-09790140c675', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'yellow', fillColor:'yellow'}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *  pol = board.create('polygon', p, {hasInnerPoints: true});\n *  g = board.create('group', p).setRotationCenter('centroid').setRotationPoints([p[2]]);\n *  g.setScaleCenter(p[0]).setScalePoints(p[1]);\n *  })();\n * \u003c/script><pre>\n *\n *  @example\n *\n *  // Allow Translations:\n *  // By default, every point of a group triggers a translation.\n *  // There may be situations, when this is not wanted.\n *\n *  // In this example, E triggers nothing, but itself is rotation center\n *  // and is translated, if other points are moved around.\n *\n *  var p, q, col, pol, g;\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'yellow', fillColor:'yellow'}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *  q = board.create('point',[0, 0], {size: 5, strokeColor:col, fillColor:col});\n *\n *  pol = board.create('polygon', p, {hasInnerPoints: true});\n *  g = board.create('group', p.concat(q)).setRotationCenter('centroid').setRotationPoints([p[2]]);\n *  g.setScaleCenter(p[0]).setScalePoints(p[1]);\n *  g.removeTranslationPoint(q);\n *\n * </pre><div class=\"jxgbox\" id=\"JXGd19b800a-57a9-4303-b49a-8f5b7a5488f0\" style=\"width: 400px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n *  (function () {\n *  var board, p, q, col, pol, g;\n *  board = JXG.JSXGraph.initBoard('JXGd19b800a-57a9-4303-b49a-8f5b7a5488f0', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\n *  col = 'blue';\n *  p = [];\n *  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n *  p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'yellow', fillColor:'yellow'}));\n *  p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n *  p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n *  q = board.create('point',[0, 0], {size: 5, strokeColor:col, fillColor:col});\n *\n *  pol = board.create('polygon', p, {hasInnerPoints: true});\n *  g = board.create('group', p.concat(q)).setRotationCenter('centroid').setRotationPoints([p[2]]);\n *  g.setScaleCenter(p[0]).setScalePoints(p[1]);\n *  g.removeTranslationPoint(q);\n *  })();\n * \u003c/script><pre>\n *\n *\n */\n\n\n_jxg.default.createGroup = function (board, parents, attributes) {\n  var attr = _type.default.copyAttributes(attributes, board.options, \"group\"),\n      g = new _jxg.default.Group(board, attr.id, attr.name, parents, attr);\n\n  g.elType = \"group\";\n  g.setParents(parents);\n  return g;\n};\n\n_jxg.default.registerElement(\"group\", _jxg.default.createGroup);\n\nvar _default = {\n  Group: _jxg.default.Group,\n  createGroup: _jxg.default.createGroup\n};\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_jxg","_constants","_math","_geometry","_type","Group","_jxg.default.Group","board","id","name","objects","attributes","i","number","numObjects","exists","groups","type","OBJECT_TYPE_POINT","elementClass","OBJECT_CLASS_POINT","generateName","coords","needsRegularUpdate","needsregularupdate","rotationCenter","scaleCenter","rotationPoints","translationPoints","scalePoints","scaleDirections","parents","objArray","isArray","Array","prototype","slice","call","arguments","length","select","evaluate","visProp","fixed","addPoint","methodMap","ungroup","add","addPoints","addGroup","remove","removePoint","setAttribute","setProperty","extend","el","hasOwnProperty","p","point","indexOf","addParents","par","len","isId","push","uniqueArray","setParents","getParents","_updateCoordsCache","usrCoords","update","desc","needsUpdate","drag","_update_find_drag_type","action","t","actionCenter","isPoint","center","_update_centroid_center","isFunction","alpha","rad","create","s","distance","Math","abs","eps","sx","sy","_update_apply_transformation","descendants","needsFullUpdate","updateElements","changed","COORDS_BY_USER","dragObjId","isInArray","setCoordinates","applyOnce","matVecMult","matrix","object","group","setRotationCenter","setRotationPoints","_setActionPoints","addRotationPoint","_addActionPoint","removeRotationPoint","_removeActionPoint","setTranslationPoints","addTranslationPoint","removeTranslationPoint","setScaleCenter","setScalePoints","direction","objs","addScalePoint","removeScalePoint","idx","splice","deprecated","apply","createGroup","_jxg.default.createGroup","attr","copyAttributes","options","g","elType","registerElement","_default"]
}
