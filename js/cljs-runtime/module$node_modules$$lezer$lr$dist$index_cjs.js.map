{
"version":3,
"file":"module$node_modules$$lezer$lr$dist$index_cjs.js",
"lineCount":64,
"mappings":"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",
"sources":["node_modules/@lezer/lr/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$lezer$lr$dist$index_cjs\"] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar common = require('@lezer/common');\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case\u2014they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);\n        let start = this.stack[base - 2];\n        let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* GotoFlag */) {\n            this.pushState(action & 65535 /* ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if ((action & 65536 /* ReduceFlag */) == 0)\n                return true;\n            if (action == 0)\n                return false;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);\n        if ((reduce & 65536 /* ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&\n            !parser.stateSlot(this.state, 4 /* DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// @internal\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing\u2014when looking forward\u2014or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) { readToken(this.data, input, stack, this.id); }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group) {\n    let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1];\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* BigValCode */) {\n                value = 65535 /* BigVal */;\n                break;\n            }\n            if (next >= 92 /* Gap2 */)\n                next--;\n            if (next >= 34 /* Gap1 */)\n                next--;\n            let digit = next - 32 /* Start */;\n            if (digit >= 46 /* Base */) {\n                digit -= 46 /* Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(common.IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof common.Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(common.NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {\n                if (data[i] == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // \u2654, \u2655, \u2656, \u2657, \u2658, \u2659, \u2660, \u2661, \u2662, \u2663, \u2664, \u2665, \u2666, \u2667\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(common.NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof common.Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof common.Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* CutDepth */) {\n            while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return common.Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends common.Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = common.NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new common.NodeSet(nodeNames.map((name, i) => common.NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = common.DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// @internal\n    overrides(token, prev) {\n        let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// Used by the output of the parser generator. Not available to\n    /// user code.\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Extend */ : 0 /* Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexports.ContextTracker = ContextTracker;\nexports.ExternalTokenizer = ExternalTokenizer;\nexports.InputStream = InputStream;\nexports.LRParser = LRParser;\nexports.Stack = Stack;\n\n};"],
"names":["shadow$provide","global","require","module","exports","decodeArray","input","Type","Uint16Array","array","pos","out","length","value","next","charCodeAt","stop","digit","cutAt","tree","side","cursor","common","IterMode","IncludeAnonymous","moveTo","childBefore","childAfter","to","from","type","isError","Math","max","min","prevSibling","nextSibling","parent","pushStackDedup","stack","newStacks","i","other","sameState","score","push","pair","data","off","findOffset","start","term","findFinished","stacks","best","stopped","p","stoppedAt","stream","end","parser","stateFlag","state","getSpecializer","spec","external","mask","extend","get","process","Object","defineProperty","Stack","constructor","reducePos","buffer","bufferBase","curContext","lookAhead","toString","filter","_","concat","cx","context","StackContext","pushState","reduce","action","depth","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","base","count","baseStateID","pop","size","isReduce","cur","top","index","shift","nextEnd","maxNode","shiftContext","apply","useNode","reused","updateContext","tracker","reuse","reset","split","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","s","some","v","result","forceReduce","validAction","target","forceAll","restart","dialectEnabled","dialectID","dialect","flags","emitContext","last","hash","emitLookAhead","newCx","setLookAhead","close","strict","Recover","goto","StackBufferCursor","maybeNext","create","fork","CachedToken","extended","nullToken","InputStream","ranges","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","range","readNext","resolveOffset","offset","assoc","clipPos","peek","idx","resolved","acceptToken","endOffset","RangeError","getChunk","nextChunk","advance","n","setDone","read","r","TokenGroup","id","groupMask","accEnd","allows","overrides","low","high","mid","prototype","contextual","fallback","ExternalTokenizer","options","verbose","env","test","LOG","stackIDs","Safety","FragmentCursor","fragments","nodeSet","fragment","safeTo","safeFrom","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","putAction","set","Rec","Parse","recovering","nextStackID","minStackPos","topTerm","bufferLength","advanceStack","stoppedTokens","tok","finished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","j","splice","stopAt","stackID","strictCx","cxHash","cached","match","types","contextHash","inner","defaultReduce","localStack","advanceFully","restarted","tokenEnd","deadEnd","done","force","forceBase","insert","build","topID","maxBufferLength","minRepeatType","WeakMap","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","LRParser","Parser","setProp","nodeID","nodeProps","deserialize","wrappers","version","nodeNames","repeatNodeCount","topTerms","keys","topRules","propSpec","NodeSet","name","NodeType","define","undefined","props","indexOf","error","skipped","skippedNodes","propSources","DefaultBufferLength","tokenArray","tokenData","specializerSpecs","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrecTable","tokenPrec","termNames","parseDialect","createParse","parse","w","loose","table","groupTag","terminal","slot","flag","prev","iPrev","configure","config","copy","assign","info","t","found","find","contextTracker","wrap","hasWrappers","prec","values","part","Uint8Array"]
}
