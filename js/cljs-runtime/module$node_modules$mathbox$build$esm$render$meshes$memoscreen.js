shadow$provide.module$node_modules$mathbox$build$esm$render$meshes$memoscreen=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.MemoScreen=void 0;global=require("module$node_modules$mathbox$build$esm$render$meshes$screen");var _Vector=require("module$node_modules$three$src$math$Vector2"),_Vector2=require("module$node_modules$three$src$math$Vector4");class MemoScreen extends global.Screen{constructor(renderer,shaders,options){const {items,width,
height,depth,stpq}=options,uniforms={remapUVScale:{type:"v2",value:new _Vector.Vector2(items*width,height*depth)},remapModulus:{type:"v2",value:new _Vector.Vector2(items,height)},remapModulusInv:{type:"v2",value:new _Vector.Vector2(1/Math.max(1,items),1/Math.max(1,height))},remapSTPQScale:{type:"v4",value:new _Vector2.Vector4(1/Math.max(1,width-1),1/Math.max(1,height-1),1/Math.max(1,depth-1),1/Math.max(1,items-1))}},map=shaders.shader();map.pipe("screen.map.xyzw",uniforms);null!=options.map&&(stpq&&
map.pipe("screen.map.stpq",uniforms),map.pipe(options.map));super(renderer,shaders,{map,linear:!0});this.memo=options;this.uniforms=uniforms;for(const object of Array.from(this.renders))object.transparent=!1}cover(width,height,depth,items){null==width&&({width}=this.memo);null==height&&({height}=this.memo);null==depth&&({depth}=this.memo);null==items&&({items}=this.memo);this.uniforms.remapSTPQScale.value.set(1/Math.max(1,width-1),1/Math.max(1,height-1),1/Math.max(1,depth-1),1/Math.max(1,items-1));
width/=this.memo.width;depth/=this.memo.depth;1===this.memo.depth&&(depth=height/this.memo.height);return this.geometry.cover(width,depth)}}exports.MemoScreen=MemoScreen}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$render$meshes$memoscreen.js.map
