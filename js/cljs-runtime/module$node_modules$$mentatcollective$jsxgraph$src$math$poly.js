shadow$provide.module$node_modules$$mentatcollective$jsxgraph$src$math$poly=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;global=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$jxg"));var _math=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$math$math")),_type=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$utils$type"));
_math.default.Poly={};_math.default.Poly.Ring=function(variables){this.vars=variables};global.default.extend(_math.default.Poly.Ring.prototype,{});_math.default.Poly.Monomial=function(ring,coefficient,exponents){var i;if(!_type.default.exists(ring))throw Error("JSXGraph error: In JXG.Math.Poly.monomial missing parameter 'ring'.");_type.default.isArray(exponents)||(exponents=[]);exponents=exponents.slice(0,ring.vars.length);for(i=exponents.length;i<ring.vars.length;i++)exponents.push(0);this.ring=
ring;this.coefficient=coefficient||0;this.exponents=_type.default.deepCopy(exponents)};global.default.extend(_math.default.Poly.Monomial.prototype,{copy:function(){return new _math.default.Poly.Monomial(this.ring,this.coefficient,this.exponents)},print:function(){var s=[],i;for(i=0;i<this.ring.vars.length;i++)s.push(this.ring.vars[i]+"^"+this.exponents[i]);return this.coefficient+"*"+s.join("*")}});_math.default.Poly.Polynomial=function(ring,str){if(!_type.default.exists(ring))throw Error("JSXGraph error: In JXG.Math.Poly.polynomial missing parameter 'ring'.");
str=_type.default.exists(str)&&_type.default.isString(str)?void 0:[];this.ring=ring;this.monomials=str};global.default.extend(_math.default.Poly.Polynomial.prototype,{findSignature:function(sig){var i;for(i=0;i<this.monomials.length;i++)if(_type.default.cmpArrays(this.monomials[i].exponents,sig))return i;return-1},addSubMonomial:function(m,factor){var i=this.findSignature(m.exponents);-1<i?this.monomials[i].coefficient+=factor*m.coefficient:(m.coefficient*=factor,this.monomials.push(m))},add:function(mp){var i;
if(_type.default.exists(mp)&&mp.ring===this.ring)if(_type.default.isArray(mp.exponents))this.addSubMonomial(mp,1);else for(i=0;i<mp.monomials.length;i++)this.addSubMonomial(mp.monomials[i],1);else throw Error("JSXGraph error: In JXG.Math.Poly.polynomial.add either summand is undefined or rings don't match.");},sub:function(mp){var i;if(_type.default.exists(mp)&&mp.ring===this.ring)if(_type.default.isArray(mp.exponents))this.addSubMonomial(mp,-1);else for(i=0;i<mp.monomials.length;i++)this.addSubMonomial(mp.monomials[i],
-1);else throw Error("JSXGraph error: In JXG.Math.Poly.polynomial.sub either summand is undefined or rings don't match.");},copy:function(){var i;var p=new _math.default.Poly.Polynomial(this.ring);for(i=0;i<this.monomials.length;i++)p.monomials.push(this.monomials[i].copy());return p},print:function(){var s=[],i;for(i=0;i<this.monomials.length;i++)s.push("("+this.monomials[i].print()+")");return s.join("+")}});exports.default=_math.default.Poly}
//# sourceMappingURL=module$node_modules$$mentatcollective$jsxgraph$src$math$poly.js.map
