shadow$provide.module$node_modules$mathbox$build$esm$primitives$types$rtt$rtt=function(global,require,module,exports){function __guard__(value,transform){return"undefined"!==typeof value&&null!==value?transform(value):void 0}Object.defineProperty(exports,"__esModule",{value:!0});exports.RTT=void 0;global=require("module$node_modules$mathbox$build$esm$primitives$types$base$parent");class RTT extends global.Parent{static initClass(){this.traits="node root scene vertex texture rtt source index image".split(" ");
this.defaults={minFilter:"linear",magFilter:"linear",type:"unsignedByte"}}init(){return this.rtt=this.scene=this.camera=this.width=this.height=this.history=this.rootSize=this.size=null}indexShader(shader){return shader}imageShader(shader){return this.rtt.shaderRelative(shader)}sourceShader(shader){return this.rtt.shaderAbsolute(shader,this.history)}getDimensions(){return{items:1,width:this.width,height:this.height,depth:this.history}}getActiveDimensions(){return this.getDimensions()}make(){this.parentRoot=
this._inherit("root");this.rootSize=this.parentRoot.getSize();this._listen(this.parentRoot,"root.pre",this.pre);this._listen(this.parentRoot,"root.update",this.update);this._listen(this.parentRoot,"root.render",this.render);this._listen(this.parentRoot,"root.post",this.post);this._listen(this.parentRoot,"root.camera",this.setCamera);this._listen(this.parentRoot,"root.resize",function(event){return this.resize(event.size)});if(null!=this.rootSize){var {minFilter,magFilter,type}=this.props,{width,height,
history,size}=this.props,relativeSize=size===this.node.attributes["rtt.size"].enum.relative;var aspect=relativeSize?this.rootSize.renderWidth:1;relativeSize=relativeSize?this.rootSize.renderHeight:1;this.width=Math.round(null!=width?width*aspect:this.rootSize.renderWidth);this.height=Math.round(null!=height?height*relativeSize:this.rootSize.renderHeight);this.history=history;this.aspect=aspect=this.width/this.height;null==this.scene&&(this.scene=this._renderables.make("scene"));this.rtt=this._renderables.make("renderToTexture",
{scene:this.scene,camera:this._context.defaultCamera,width:this.width,height:this.height,frames:this.history,minFilter,magFilter,type});aspect=width||height?aspect:this.rootSize.aspect;relativeSize=null!=height?height:this.rootSize.viewHeight;return this.size={renderWidth:this.width,renderHeight:this.height,aspect,viewWidth:null!=width?width:this.rootSize.viewWidth,viewHeight:relativeSize,pixelRatio:this.height/relativeSize}}}made(){this.trigger({type:"source.rebuild"});if(this.size)return this.trigger({type:"root.resize",
size:this.size})}unmake(rebuild){if(null!=this.rtt)return this.rtt.dispose(),rebuild||this.scene.dispose(),this.rtt=this.width=this.height=this.history=null}change(changed,touched,init){if(touched.texture||changed["rtt.width"]||changed["rtt.height"])return this.rebuild();if(changed["root.camera"]||init)return this._unattach(),this._attach(this.props.camera,"camera",this.setCamera,this,this,!0),this.setCamera()}adopt(renderable){return Array.from(renderable.renders).map(object=>this.scene.add(object))}unadopt(renderable){return Array.from(renderable.renders).map(object=>
this.scene.remove(object))}resize(size){let height,width;this.rootSize=size;({width,height,size}=this.props);size=size===this.node.attributes["rtt.size"].enum.relative;if(!this.rtt||null==width||null==height||size)return this.rebuild()}select(selector){return this._root.node.model.select(selector,[this.node])}watch(selector,handler){return this._root.node.model.watch(selector,handler)}unwatch(handler){return this._root.node.model.unwatch(handler)}pre(e){return this.trigger(e)}update(e){let camera;
null!=(camera=this.getOwnCamera())&&(camera.aspect=this.aspect||1,camera.updateProjectionMatrix());return this.trigger(e)}render(e){this.trigger(e);return null!=this.rtt?this.rtt.render(this.getCamera()):void 0}post(e){return this.trigger(e)}setCamera(){const camera=__guard__(this.select(this.props.camera)[0],x=>x.controller);if(this.camera!==camera)return this.camera=camera,this.rtt.camera=this.getCamera(),this.trigger({type:"root.camera"});if(!this.camera)return this.trigger({type:"root.camera"})}getOwnCamera(){return null!=
this.camera?this.camera.getCamera():void 0}getCamera(){let left;return null!=(left=this.getOwnCamera())?left:this._inherit("root").getCamera()}vertex(shader,pass){return 2===pass?shader.pipe("view.position"):3===pass?shader.pipe("root.position"):shader}}exports.RTT=RTT;RTT.initClass()}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$primitives$types$rtt$rtt.js.map
