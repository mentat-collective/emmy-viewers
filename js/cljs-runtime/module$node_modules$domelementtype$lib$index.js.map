{
"version":3,
"file":"module$node_modules$domelementtype$lib$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEzGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,OAAR,CAAkBJ,OAAQK,CAAAA,KAA1B,CAAkCL,OAAQM,CAAAA,GAA1C,CAAgDN,OAAQO,CAAAA,KAAxD,CAAgEP,OAAQQ,CAAAA,MAAxE,CAAiFR,OAAQS,CAAAA,OAAzF,CAAmGT,OAAQU,CAAAA,SAA3G,CAAuHV,OAAQW,CAAAA,IAA/H,CAAsIX,OAAQY,CAAAA,IAA9I,CAAqJZ,OAAQa,CAAAA,KAA7J,CAAqKb,OAAQc,CAAAA,WAA7K,CAA2L,IAAK,EAEhM,KAAIA,WACH,UAAS,CAACA,WAAD,CAAc,CAEpBA,WAAA,CAAA,IAAA,CAAsB,MAEtBA,YAAA,CAAA,IAAA,CAAsB,MAEtBA,YAAA,CAAA,SAAA,CAA2B,WAE3BA,YAAA,CAAA,OAAA,CAAyB,SAEzBA,YAAA,CAAA,MAAA,CAAwB,QAExBA;WAAA,CAAA,KAAA,CAAuB,OAEvBA,YAAA,CAAA,GAAA,CAAqB,KAErBA,YAAA,CAAA,KAAA,CAAuB,OAEvBA,YAAA,CAAA,OAAA,CAAyB,SAlBL,CAAvB,CAAD,CAmBGA,WAnBH,CAmBiBd,OAAQc,CAAAA,WAnBzB,GAmByCd,OAAQc,CAAAA,WAnBjD,CAmB+D,EAnB/D,EA8BAd,QAAQa,CAAAA,KAAR,CALAA,QAAc,CAACE,IAAD,CAAO,CACjB,MAAQA,KAAKC,CAAAA,IAAb,GAAsBF,WAAYR,CAAAA,GAAlC,EACIS,IAAKC,CAAAA,IADT,GACkBF,WAAYN,CAAAA,MAD9B,EAEIO,IAAKC,CAAAA,IAFT,GAEkBF,WAAYP,CAAAA,KAHb,CAQrBP,QAAQY,CAAAA,IAAR,CAAeE,WAAYF,CAAAA,IAE3BZ,QAAQW,CAAAA,IAAR,CAAeG,WAAYH,CAAAA,IAE3BX,QAAQU,CAAAA,SAAR,CAAoBI,WAAYJ,CAAAA,SAEhCV,QAAQS,CAAAA,OAAR,CAAkBK,WAAYL,CAAAA,OAE9BT,QAAQQ,CAAAA,MAAR,CAAiBM,WAAYN,CAAAA,MAE7BR,QAAQO,CAAAA,KAAR,CAAgBO,WAAYP,CAAAA,KAE5BP,QAAQM,CAAAA,GAAR;AAAcQ,WAAYR,CAAAA,GAE1BN,QAAQK,CAAAA,KAAR,CAAgBS,WAAYT,CAAAA,KAE5BL,QAAQI,CAAAA,OAAR,CAAkBU,WAAYV,CAAAA,OAvD2E;",
"sources":["node_modules/domelementtype/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$domelementtype$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;\n/** Types of elements found in htmlparser2's DOM */\nvar ElementType;\n(function (ElementType) {\n    /** Type for the root element of a document */\n    ElementType[\"Root\"] = \"root\";\n    /** Type for Text */\n    ElementType[\"Text\"] = \"text\";\n    /** Type for <? ... ?> */\n    ElementType[\"Directive\"] = \"directive\";\n    /** Type for \u003c!-- ... --\u003e */\n    ElementType[\"Comment\"] = \"comment\";\n    /** Type for <script> tags */\n    ElementType[\"Script\"] = \"script\";\n    /** Type for <style> tags */\n    ElementType[\"Style\"] = \"style\";\n    /** Type for Any tag */\n    ElementType[\"Tag\"] = \"tag\";\n    /** Type for <![CDATA[ ... ]]\u003e */\n    ElementType[\"CDATA\"] = \"cdata\";\n    /** Type for <!doctype ...> */\n    ElementType[\"Doctype\"] = \"doctype\";\n})(ElementType = exports.ElementType || (exports.ElementType = {}));\n/**\n * Tests whether an element is a tag or not.\n *\n * @param elem Element to test\n */\nfunction isTag(elem) {\n    return (elem.type === ElementType.Tag ||\n        elem.type === ElementType.Script ||\n        elem.type === ElementType.Style);\n}\nexports.isTag = isTag;\n// Exports for backwards compatibility\n/** Type for the root element of a document */\nexports.Root = ElementType.Root;\n/** Type for Text */\nexports.Text = ElementType.Text;\n/** Type for <? ... ?> */\nexports.Directive = ElementType.Directive;\n/** Type for \u003c!-- ... --\u003e */\nexports.Comment = ElementType.Comment;\n/** Type for <script> tags */\nexports.Script = ElementType.Script;\n/** Type for <style> tags */\nexports.Style = ElementType.Style;\n/** Type for Any tag */\nexports.Tag = ElementType.Tag;\n/** Type for <![CDATA[ ... ]]\u003e */\nexports.CDATA = ElementType.CDATA;\n/** Type for <!doctype ...> */\nexports.Doctype = ElementType.Doctype;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Doctype","CDATA","Tag","Style","Script","Comment","Directive","Text","Root","isTag","ElementType","elem","type"]
}
