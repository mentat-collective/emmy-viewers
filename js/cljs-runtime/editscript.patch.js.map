{"version":3,"sources":["editscript/patch.cljc"],"mappings":"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","names":["editscript.patch/vget","x","p","G__75430","cljs.core/Keyword","js/Error","editscript.edit/get-type","cljs.core.get","cljs.core.nth","editscript.patch/vdelete","G__75448","cljs.core.dissoc","cljs.core.into","cljs.core.subvec","clojure.set.difference","cljs.core/split-at","p1__75447#","cljs.core.concat","cljs.core/next","cljs.core.apply","cljs.core/list","editscript.patch/vadd","v","G__75466","cljs.core.assoc","cljs.core.conj","p1__75457#","editscript.patch/sreplace","edits","level","editscript.util.common/transform-str","sf","cljs.core._EQ_","cljs.core/subs","cljs.core/subvec","i","cljs.core/volatile!","ss","cljs.core/persistent!","cljs.core.reduce","e","cljs.core/integer?","s","G__75486","G__75487","cljs.core/deref","G__75488","cljs.core.partial","cljs.core/+","cljs.core.conj_BANG_","cljs.core/count","cljs.core/transient","G__75521","cljs.core/str","clojure.string.join","cljs.core/flatten","editscript.patch/vreplace","G__75530","p1__75526#","cljs.core/rest","editscript.patch/valter","o","G__75531","p__75532","vec__75533","editscript.patch/patch*","old","path","op","value","vec__75540","seq__75541","cljs.core/seq","first__75542","cljs.core/first","f","r","up","G__75543"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.patch\n  (:require [clojure.set :as set]\n            [editscript.edit :as e]\n            [editscript.util.common :as c]\n            [clojure.string :as s]))\n\n#?(:clj (set! *warn-on-reflection* true))\n#?(:clj (set! *unchecked-math* :warn-on-boxed))\n\n(defn- vget\n  [x p]\n  (case (e/get-type x)\n    (:map :vec :set) (get x p)\n    :lst             (nth x p)))\n\n(defn- vdelete\n  [x p]\n  (case (e/get-type x)\n    ;;NB, there is a special case where dissoc has no effect:\n    ;;if p is ##NaN, then p cannot be found in x, for (= ##NaN ##NaN) is false!\n    :map (dissoc x p)\n    :vec (into (subvec x 0 p) (subvec x (inc ^long p)))\n    :set (set/difference x #{p})\n    :lst (->> (split-at p x)\n              (#(concat (nth % 0) (next (nth % 1))))\n              (apply list))))\n\n(defn- vadd\n  [x p v]\n  (case (e/get-type x)\n    :map (assoc x p v)\n    :vec (into (conj (subvec x 0 p) v) (subvec x p))\n    :set (conj x v)\n    :lst (->> (split-at p x)\n              (#(concat (nth % 0) (conj (nth % 1) v)))\n              (apply list))))\n\n(defn- sreplace\n  [x edits level]\n  (let [x  (c/transform-str x level)\n        sf (if (= level :character) subs subvec)\n        i  (volatile! 0)\n        ss (persistent!\n             (reduce\n               (fn [ss e]\n                 (cond\n                   (integer? e)     (let [s (sf x @i (+ ^long @i ^long e))]\n                                      (vswap! i (partial + e))\n                                      (conj! ss s))\n                   (= (nth e 0) :-) (do (vswap! i (partial + (nth e 1))) ss)\n                   (= (nth e 0) :r) (let [s (nth e 1)]\n                                      (vswap! i (partial + (count s)))\n                                      (conj! ss s))\n                   (= (nth e 0) :+) (conj! ss (nth e 1))))\n               (transient [])\n               edits))]\n    (case level\n      :character (apply str ss)\n      :word      (s/join \" \" (flatten ss))\n      :line      (s/join \"\\n\" (flatten ss)))))\n\n(defn- vreplace\n  [x p v]\n  (case (e/get-type x)\n    :map (assoc x p v)\n    :vec (into (conj (subvec x 0 p) v) (subvec x (inc ^long p)))\n    :set (-> x (set/difference #{p}) (conj v))\n    :lst (->> (split-at p x)\n              (#(concat (nth % 0) (conj (rest (nth % 1)) v)))\n              (apply list))))\n\n(defn- valter\n  [x p o v]\n  (case o\n    :-  (vdelete x p)\n    :+  (vadd x p v)\n    :r  (vreplace x p v)\n    :s  (vreplace x p (sreplace (vget x p) v :character))\n    :sw (vreplace x p (sreplace (vget x p) v :word))\n    :sl (vreplace x p (sreplace (vget x p) v :line))))\n\n(defn patch*\n  [old [path op value]]\n  (letfn [(up [x p o v]\n            (let [[f & r] p]\n              (if r\n                (valter x f :r (up (vget x f) r o v))\n                (if (seq p)\n                  (valter x f o v)\n                  (case o\n                    :s  (sreplace x v :character)\n                    :sw (sreplace x v :word)\n                    :sl (sreplace x v :line)\n                    v)))))]\n    (up old path op value)))\n"]}