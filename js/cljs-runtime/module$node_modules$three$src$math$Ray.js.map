{
"version":3,
"file":"module$node_modules$three$src$math$Ray.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/three/src/math/Ray.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$math$Ray\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Ray = void 0;\n\nvar _Vector = require(\"./Vector3.js\");\n\nconst _vector = /*@__PURE__*/new _Vector.Vector3();\n\nconst _segCenter = /*@__PURE__*/new _Vector.Vector3();\n\nconst _segDir = /*@__PURE__*/new _Vector.Vector3();\n\nconst _diff = /*@__PURE__*/new _Vector.Vector3();\n\nconst _edge1 = /*@__PURE__*/new _Vector.Vector3();\n\nconst _edge2 = /*@__PURE__*/new _Vector.Vector3();\n\nconst _normal = /*@__PURE__*/new _Vector.Vector3();\n\nclass Ray {\n  constructor(origin = new _Vector.Vector3(), direction = new _Vector.Vector3(0, 0, -1)) {\n    this.origin = origin;\n    this.direction = direction;\n  }\n\n  set(origin, direction) {\n    this.origin.copy(origin);\n    this.direction.copy(direction);\n    return this;\n  }\n\n  copy(ray) {\n    this.origin.copy(ray.origin);\n    this.direction.copy(ray.direction);\n    return this;\n  }\n\n  at(t, target) {\n    return target.copy(this.direction).multiplyScalar(t).add(this.origin);\n  }\n\n  lookAt(v) {\n    this.direction.copy(v).sub(this.origin).normalize();\n    return this;\n  }\n\n  recast(t) {\n    this.origin.copy(this.at(t, _vector));\n    return this;\n  }\n\n  closestPointToPoint(point, target) {\n    target.subVectors(point, this.origin);\n    const directionDistance = target.dot(this.direction);\n\n    if (directionDistance < 0) {\n      return target.copy(this.origin);\n    }\n\n    return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n  }\n\n  distanceToPoint(point) {\n    return Math.sqrt(this.distanceSqToPoint(point));\n  }\n\n  distanceSqToPoint(point) {\n    const directionDistance = _vector.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n    if (directionDistance < 0) {\n      return this.origin.distanceToSquared(point);\n    }\n\n    _vector.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n    return _vector.distanceToSquared(point);\n  }\n\n  distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n    // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n    // It returns the min distance between the ray and the segment\n    // defined by v0 and v1\n    // It can also set two optional targets :\n    // - The closest point on the ray\n    // - The closest point on the segment\n    _segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n    _segDir.copy(v1).sub(v0).normalize();\n\n    _diff.copy(this.origin).sub(_segCenter);\n\n    const segExtent = v0.distanceTo(v1) * 0.5;\n    const a01 = -this.direction.dot(_segDir);\n\n    const b0 = _diff.dot(this.direction);\n\n    const b1 = -_diff.dot(_segDir);\n\n    const c = _diff.lengthSq();\n\n    const det = Math.abs(1 - a01 * a01);\n    let s0, s1, sqrDist, extDet;\n\n    if (det > 0) {\n      // The ray and segment are not parallel.\n      s0 = a01 * b1 - b0;\n      s1 = a01 * b0 - b1;\n      extDet = segExtent * det;\n\n      if (s0 >= 0) {\n        if (s1 >= -extDet) {\n          if (s1 <= extDet) {\n            // region 0\n            // Minimum at interior points of ray and segment.\n            const invDet = 1 / det;\n            s0 *= invDet;\n            s1 *= invDet;\n            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n          } else {\n            // region 1\n            s1 = segExtent;\n            s0 = Math.max(0, -(a01 * s1 + b0));\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n          }\n        } else {\n          // region 5\n          s1 = -segExtent;\n          s0 = Math.max(0, -(a01 * s1 + b0));\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n      } else {\n        if (s1 <= -extDet) {\n          // region 4\n          s0 = Math.max(0, -(-a01 * segExtent + b0));\n          s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        } else if (s1 <= extDet) {\n          // region 3\n          s0 = 0;\n          s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = s1 * (s1 + 2 * b1) + c;\n        } else {\n          // region 2\n          s0 = Math.max(0, -(a01 * segExtent + b0));\n          s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n      }\n    } else {\n      // Ray and segment are parallel.\n      s1 = a01 > 0 ? -segExtent : segExtent;\n      s0 = Math.max(0, -(a01 * s1 + b0));\n      sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n    }\n\n    if (optionalPointOnRay) {\n      optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n    }\n\n    if (optionalPointOnSegment) {\n      optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n    }\n\n    return sqrDist;\n  }\n\n  intersectSphere(sphere, target) {\n    _vector.subVectors(sphere.center, this.origin);\n\n    const tca = _vector.dot(this.direction);\n\n    const d2 = _vector.dot(_vector) - tca * tca;\n    const radius2 = sphere.radius * sphere.radius;\n    if (d2 > radius2) return null;\n    const thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n    const t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n    const t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n    if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n    // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n    // in order to always return an intersect point that is in front of the ray.\n\n    if (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n    return this.at(t0, target);\n  }\n\n  intersectsSphere(sphere) {\n    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n  }\n\n  distanceToPlane(plane) {\n    const denominator = plane.normal.dot(this.direction);\n\n    if (denominator === 0) {\n      // line is coplanar, return origin\n      if (plane.distanceToPoint(this.origin) === 0) {\n        return 0;\n      } // Null is preferable to undefined since undefined means.... it is undefined\n\n\n      return null;\n    }\n\n    const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n    return t >= 0 ? t : null;\n  }\n\n  intersectPlane(plane, target) {\n    const t = this.distanceToPlane(plane);\n\n    if (t === null) {\n      return null;\n    }\n\n    return this.at(t, target);\n  }\n\n  intersectsPlane(plane) {\n    // check if the ray lies on the plane first\n    const distToPoint = plane.distanceToPoint(this.origin);\n\n    if (distToPoint === 0) {\n      return true;\n    }\n\n    const denominator = plane.normal.dot(this.direction);\n\n    if (denominator * distToPoint < 0) {\n      return true;\n    } // ray origin is behind the plane (and is pointing behind it)\n\n\n    return false;\n  }\n\n  intersectBox(box, target) {\n    let tmin, tmax, tymin, tymax, tzmin, tzmax;\n    const invdirx = 1 / this.direction.x,\n          invdiry = 1 / this.direction.y,\n          invdirz = 1 / this.direction.z;\n    const origin = this.origin;\n\n    if (invdirx >= 0) {\n      tmin = (box.min.x - origin.x) * invdirx;\n      tmax = (box.max.x - origin.x) * invdirx;\n    } else {\n      tmin = (box.max.x - origin.x) * invdirx;\n      tmax = (box.min.x - origin.x) * invdirx;\n    }\n\n    if (invdiry >= 0) {\n      tymin = (box.min.y - origin.y) * invdiry;\n      tymax = (box.max.y - origin.y) * invdiry;\n    } else {\n      tymin = (box.max.y - origin.y) * invdiry;\n      tymax = (box.min.y - origin.y) * invdiry;\n    }\n\n    if (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n    // (result of 0 * Infinity). x !== x returns true if x is NaN\n\n    if (tymin > tmin || tmin !== tmin) tmin = tymin;\n    if (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n    if (invdirz >= 0) {\n      tzmin = (box.min.z - origin.z) * invdirz;\n      tzmax = (box.max.z - origin.z) * invdirz;\n    } else {\n      tzmin = (box.max.z - origin.z) * invdirz;\n      tzmax = (box.min.z - origin.z) * invdirz;\n    }\n\n    if (tmin > tzmax || tzmin > tmax) return null;\n    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n    if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n    if (tmax < 0) return null;\n    return this.at(tmin >= 0 ? tmin : tmax, target);\n  }\n\n  intersectsBox(box) {\n    return this.intersectBox(box, _vector) !== null;\n  }\n\n  intersectTriangle(a, b, c, backfaceCulling, target) {\n    // Compute the offset origin, edges, and normal.\n    // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n    _edge1.subVectors(b, a);\n\n    _edge2.subVectors(c, a);\n\n    _normal.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n    // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n    //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n    //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n    //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n    let DdN = this.direction.dot(_normal);\n    let sign;\n\n    if (DdN > 0) {\n      if (backfaceCulling) return null;\n      sign = 1;\n    } else if (DdN < 0) {\n      sign = -1;\n      DdN = -DdN;\n    } else {\n      return null;\n    }\n\n    _diff.subVectors(this.origin, a);\n\n    const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n    if (DdQxE2 < 0) {\n      return null;\n    }\n\n    const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n    if (DdE1xQ < 0) {\n      return null;\n    } // b1+b2 > 1, no intersection\n\n\n    if (DdQxE2 + DdE1xQ > DdN) {\n      return null;\n    } // Line intersects triangle, check if ray does.\n\n\n    const QdN = -sign * _diff.dot(_normal); // t < 0, no intersection\n\n\n    if (QdN < 0) {\n      return null;\n    } // Ray intersects triangle.\n\n\n    return this.at(QdN / DdN, target);\n  }\n\n  applyMatrix4(matrix4) {\n    this.origin.applyMatrix4(matrix4);\n    this.direction.transformDirection(matrix4);\n    return this;\n  }\n\n  equals(ray) {\n    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n}\n\nexports.Ray = Ray;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Ray","_Vector","_vector","Vector3","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","constructor","origin","direction","set","copy","ray","at","t","target","multiplyScalar","add","lookAt","v","sub","normalize","recast","closestPointToPoint","point","subVectors","directionDistance","dot","distanceToPoint","Math","sqrt","distanceSqToPoint","distanceToSquared","distanceSqToSegment","v0","v1","optionalPointOnRay","optionalPointOnSegment","segExtent","distanceTo","a01","b0","b1","c","lengthSq","det","abs","extDet","s0","s1","invDet","sqrDist","max","min","intersectSphere","sphere","center","tca","d2","radius2","radius","thc","t0","t1","intersectsSphere","distanceToPlane","plane","denominator","normal","constant","intersectPlane","intersectsPlane","distToPoint","intersectBox","box","tmin","invdirx","x","invdiry","y","invdirz","z","tmax","tymin","tymax","tzmin","tzmax","intersectsBox","intersectTriangle","a","b","backfaceCulling","crossVectors","DdN","sign","DdQxE2","DdE1xQ","cross","QdN","applyMatrix4","matrix4","transformDirection","equals","clone"]
}
