{
"version":3,
"file":"module$node_modules$lodash$_cloneBuffer.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAChGC,MAAAA,CAAOH,OAAA,CAAQ,kCAAR,CAYX,KACII,YAAc,CADdC,OACc,CADL,CANTC,OAMS,EATTC,OASS,CATuB,QASvB,EATK,MAAOL,QASZ,EATmCA,OASnC,EAT8C,CAACA,OAAQM,CAAAA,QASvD,EATmEN,OASnE,GANoC,QAMpC,EANmB,MAAOD,OAM1B,EANgDA,MAMhD,EAN0D,CAACA,MAAOO,CAAAA,QAMlE,EAN8EP,MAM9E,GAHqBK,OAAWJ,CAAAA,OAGhC,GAH4CK,OAG5C,CAAgBJ,MAAKE,CAAAA,MAArB,CAA8BI,IAAAA,EACzB,EAASJ,OAAOD,CAAAA,WAAhB,CAA8BK,IAAAA,EAqBhDR,OAAOC,CAAAA,OAAP,CAXAQ,QAAoB,CAACC,MAAD,CAASC,MAAT,CAAiB,CACnC,GAAIA,MAAJ,CACE,MAAOD,OAAOE,CAAAA,KAAP,EAELC,OAAAA,CAASH,MAAOG,CAAAA,MAChBC,OAAAA,CAASX,WAAA,CAAcA,WAAA,CAAYU,MAAZ,CAAd;AAAoC,IAAIH,MAAOK,CAAAA,WAAX,CAAuBF,MAAvB,CAEjDH,OAAOM,CAAAA,IAAP,CAAYF,MAAZ,CACA,OAAOA,OAR4B,CAxB+D;",
"sources":["node_modules/lodash/_cloneBuffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_cloneBuffer\"] = function(global,require,module,exports) {\nvar root = require('./_root');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n\n};"],
"names":["shadow$provide","global","require","module","exports","root","allocUnsafe","Buffer","freeModule","freeExports","nodeType","undefined","cloneBuffer","buffer","isDeep","slice","length","result","constructor","copy"]
}
