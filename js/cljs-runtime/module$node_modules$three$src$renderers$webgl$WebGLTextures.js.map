{
"version":3,
"file":"module$node_modules$three$src$renderers$webgl$WebGLTextures.js",
"lineCount":72,
"mappings":"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",
"sources":["node_modules/three/src/renderers/webgl/WebGLTextures.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$renderers$webgl$WebGLTextures\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLTextures = WebGLTextures;\n\nvar _constants = require(\"../../constants.js\");\n\nvar MathUtils = _interopRequireWildcard(require(\"../../math/MathUtils.js\"));\n\nvar _ImageUtils = require(\"../../extras/ImageUtils.js\");\n\nvar _utils = require(\"../../utils.js\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n  const isWebGL2 = capabilities.isWebGL2;\n  const maxTextures = capabilities.maxTextures;\n  const maxCubemapSize = capabilities.maxCubemapSize;\n  const maxTextureSize = capabilities.maxTextureSize;\n  const maxSamples = capabilities.maxSamples;\n  const hasMultisampledRenderToTexture = extensions.has('WEBGL_multisampled_render_to_texture');\n  const MultisampledRenderToTextureExtension = hasMultisampledRenderToTexture ? extensions.get('WEBGL_multisampled_render_to_texture') : undefined;\n\n  const _videoTextures = new WeakMap();\n\n  let _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n  // also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n  // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n  let useOffscreenCanvas = false;\n\n  try {\n    useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n  } catch (err) {// Ignore any errors\n  }\n\n  function createCanvas(width, height) {\n    // Use OffscreenCanvas when available. Specially needed in web workers\n    return useOffscreenCanvas ? new OffscreenCanvas(width, height) : (0, _utils.createElementNS)('canvas');\n  }\n\n  function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n    let scale = 1; // handle case if texture exceeds max size\n\n    if (image.width > maxSize || image.height > maxSize) {\n      scale = maxSize / Math.max(image.width, image.height);\n    } // only perform resize if necessary\n\n\n    if (scale < 1 || needsPowerOfTwo === true) {\n      // only perform resize for certain image types\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        const floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n        const width = floor(scale * image.width);\n        const height = floor(scale * image.height);\n        if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n        const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, width, height);\n        console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n        return canvas;\n      } else {\n        if ('data' in image) {\n          console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n        }\n\n        return image;\n      }\n    }\n\n    return image;\n  }\n\n  function isPowerOfTwo(image) {\n    return MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n  }\n\n  function textureNeedsPowerOfTwo(texture) {\n    if (isWebGL2) return false;\n    return texture.wrapS !== _constants.ClampToEdgeWrapping || texture.wrapT !== _constants.ClampToEdgeWrapping || texture.minFilter !== _constants.NearestFilter && texture.minFilter !== _constants.LinearFilter;\n  }\n\n  function textureNeedsGenerateMipmaps(texture, supportsMips) {\n    return texture.generateMipmaps && supportsMips && texture.minFilter !== _constants.NearestFilter && texture.minFilter !== _constants.LinearFilter;\n  }\n\n  function generateMipmap(target) {\n    _gl.generateMipmap(target);\n  }\n\n  function getInternalFormat(internalFormatName, glFormat, glType, encoding, isVideoTexture = false) {\n    if (isWebGL2 === false) return glFormat;\n\n    if (internalFormatName !== null) {\n      if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n      console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n    }\n\n    let internalFormat = glFormat;\n\n    if (glFormat === _gl.RED) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n    }\n\n    if (glFormat === _gl.RG) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;\n    }\n\n    if (glFormat === _gl.RGBA) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = encoding === _constants.sRGBEncoding && isVideoTexture === false ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n      if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;\n      if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;\n    }\n\n    if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n      extensions.get('EXT_color_buffer_float');\n    }\n\n    return internalFormat;\n  }\n\n  function getMipLevels(texture, image, supportsMips) {\n    if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== _constants.NearestFilter && texture.minFilter !== _constants.LinearFilter) {\n      return Math.log2(Math.max(image.width, image.height)) + 1;\n    } else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) {\n      // user-defined mipmaps\n      return texture.mipmaps.length;\n    } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {\n      return image.mipmaps.length;\n    } else {\n      // texture without mipmaps (only base level)\n      return 1;\n    }\n  } // Fallback filters for non-power-of-2 textures\n\n\n  function filterFallback(f) {\n    if (f === _constants.NearestFilter || f === _constants.NearestMipmapNearestFilter || f === _constants.NearestMipmapLinearFilter) {\n      return _gl.NEAREST;\n    }\n\n    return _gl.LINEAR;\n  } //\n\n\n  function onTextureDispose(event) {\n    const texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    deallocateTexture(texture);\n\n    if (texture.isVideoTexture) {\n      _videoTextures.delete(texture);\n    }\n\n    info.memory.textures--;\n  }\n\n  function onRenderTargetDispose(event) {\n    const renderTarget = event.target;\n    renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n    deallocateRenderTarget(renderTarget);\n  } //\n\n\n  function deallocateTexture(texture) {\n    const textureProperties = properties.get(texture);\n    if (textureProperties.__webglInit === undefined) return;\n\n    _gl.deleteTexture(textureProperties.__webglTexture);\n\n    properties.remove(texture);\n  }\n\n  function deallocateRenderTarget(renderTarget) {\n    const texture = renderTarget.texture;\n    const renderTargetProperties = properties.get(renderTarget);\n    const textureProperties = properties.get(texture);\n    if (!renderTarget) return;\n\n    if (textureProperties.__webglTexture !== undefined) {\n      _gl.deleteTexture(textureProperties.__webglTexture);\n\n      info.memory.textures--;\n    }\n\n    if (renderTarget.depthTexture) {\n      renderTarget.depthTexture.dispose();\n    }\n\n    if (renderTarget.isWebGLCubeRenderTarget) {\n      for (let i = 0; i < 6; i++) {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n      }\n    } else {\n      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n      if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n      if (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n      if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n    }\n\n    if (renderTarget.isWebGLMultipleRenderTargets) {\n      for (let i = 0, il = texture.length; i < il; i++) {\n        const attachmentProperties = properties.get(texture[i]);\n\n        if (attachmentProperties.__webglTexture) {\n          _gl.deleteTexture(attachmentProperties.__webglTexture);\n\n          info.memory.textures--;\n        }\n\n        properties.remove(texture[i]);\n      }\n    }\n\n    properties.remove(texture);\n    properties.remove(renderTarget);\n  } //\n\n\n  let textureUnits = 0;\n\n  function resetTextureUnits() {\n    textureUnits = 0;\n  }\n\n  function allocateTextureUnit() {\n    const textureUnit = textureUnits;\n\n    if (textureUnit >= maxTextures) {\n      console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n    }\n\n    textureUnits += 1;\n    return textureUnit;\n  } //\n\n\n  function setTexture2D(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.isVideoTexture) updateVideoTexture(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      const image = texture.image;\n\n      if (image === undefined) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n      } else if (image.complete === false) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n      } else {\n        uploadTexture(textureProperties, texture, slot);\n        return;\n      }\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n  }\n\n  function setTexture2DArray(texture, slot) {\n    const textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n  }\n\n  function setTexture3D(texture, slot) {\n    const textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n  }\n\n  function setTextureCube(texture, slot) {\n    const textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadCubeTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n  }\n\n  const wrappingToGL = {\n    [_constants.RepeatWrapping]: _gl.REPEAT,\n    [_constants.ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n    [_constants.MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n  };\n  const filterToGL = {\n    [_constants.NearestFilter]: _gl.NEAREST,\n    [_constants.NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n    [_constants.NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n    [_constants.LinearFilter]: _gl.LINEAR,\n    [_constants.LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n    [_constants.LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n  };\n\n  function setTextureParameters(textureType, texture, supportsMips) {\n    if (supportsMips) {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n    } else {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n      }\n\n      if (texture.wrapS !== _constants.ClampToEdgeWrapping || texture.wrapT !== _constants.ClampToEdgeWrapping) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n      if (texture.minFilter !== _constants.NearestFilter && texture.minFilter !== _constants.LinearFilter) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n      }\n    }\n\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      const extension = extensions.get('EXT_texture_filter_anisotropic');\n      if (texture.type === _constants.FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n      if (isWebGL2 === false && texture.type === _constants.HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n        properties.get(texture).__currentAnisotropy = texture.anisotropy;\n      }\n    }\n  }\n\n  function initTexture(textureProperties, texture) {\n    if (textureProperties.__webglInit === undefined) {\n      textureProperties.__webglInit = true;\n      texture.addEventListener('dispose', onTextureDispose);\n      textureProperties.__webglTexture = _gl.createTexture();\n      info.memory.textures++;\n    }\n  }\n\n  function uploadTexture(textureProperties, texture, slot) {\n    let textureType = _gl.TEXTURE_2D;\n    if (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n    if (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n    initTexture(textureProperties, texture);\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(textureType, textureProperties.__webglTexture);\n\n    _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n    _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n    _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n    _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n    const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n    let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n    image = verifyColorSpace(texture, image);\n    const supportsMips = isPowerOfTwo(image) || isWebGL2,\n          glFormat = utils.convert(texture.format, texture.encoding);\n    let glType = utils.convert(texture.type),\n        glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);\n    setTextureParameters(textureType, texture, supportsMips);\n    let mipmap;\n    const mipmaps = texture.mipmaps;\n    const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;\n    const allocateMemory = textureProperties.__version === undefined;\n    const levels = getMipLevels(texture, image, supportsMips);\n\n    if (texture.isDepthTexture) {\n      // populate depth texture with dummy data\n      glInternalFormat = _gl.DEPTH_COMPONENT;\n\n      if (isWebGL2) {\n        if (texture.type === _constants.FloatType) {\n          glInternalFormat = _gl.DEPTH_COMPONENT32F;\n        } else if (texture.type === _constants.UnsignedIntType) {\n          glInternalFormat = _gl.DEPTH_COMPONENT24;\n        } else if (texture.type === _constants.UnsignedInt248Type) {\n          glInternalFormat = _gl.DEPTH24_STENCIL8;\n        } else {\n          glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n        }\n      } else {\n        if (texture.type === _constants.FloatType) {\n          console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n        }\n      } // validation checks for WebGL 1\n\n\n      if (texture.format === _constants.DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n        // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n        // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n        if (texture.type !== _constants.UnsignedShortType && texture.type !== _constants.UnsignedIntType) {\n          console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n          texture.type = _constants.UnsignedShortType;\n          glType = utils.convert(texture.type);\n        }\n      }\n\n      if (texture.format === _constants.DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n        // Depth stencil textures need the DEPTH_STENCIL internal format\n        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n        glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n        // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n        if (texture.type !== _constants.UnsignedInt248Type) {\n          console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n          texture.type = _constants.UnsignedInt248Type;\n          glType = utils.convert(texture.type);\n        }\n      } //\n\n\n      if (useTexStorage && allocateMemory) {\n        state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);\n      } else {\n        state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n      }\n    } else if (texture.isDataTexture) {\n      // use manually created mipmaps if available\n      // if there are no manual mipmaps\n      // set 0 level mipmap and then use GL to generate other mipmap levels\n      if (mipmaps.length > 0 && supportsMips) {\n        if (useTexStorage && allocateMemory) {\n          state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n        }\n\n        for (let i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n\n          if (useTexStorage) {\n            state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n          }\n        }\n\n        texture.generateMipmaps = false;\n      } else {\n        if (useTexStorage) {\n          if (allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n          }\n\n          state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n        }\n      }\n    } else if (texture.isCompressedTexture) {\n      if (useTexStorage && allocateMemory) {\n        state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n      }\n\n      for (let i = 0, il = mipmaps.length; i < il; i++) {\n        mipmap = mipmaps[i];\n\n        if (texture.format !== _constants.RGBAFormat) {\n          if (glFormat !== null) {\n            if (useTexStorage) {\n              state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n            } else {\n              state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n            }\n          } else {\n            console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n          }\n        } else {\n          if (useTexStorage) {\n            state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n          }\n        }\n      }\n    } else if (texture.isDataTexture2DArray) {\n      if (useTexStorage) {\n        if (allocateMemory) {\n          state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);\n        }\n\n        state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);\n      } else {\n        state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n      }\n    } else if (texture.isDataTexture3D) {\n      if (useTexStorage) {\n        if (allocateMemory) {\n          state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);\n        }\n\n        state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);\n      } else {\n        state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n      }\n    } else if (texture.isFramebufferTexture) {\n      if (useTexStorage && allocateMemory) {\n        state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n      } else {\n        state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n      }\n    } else {\n      // regular Texture (image, video, canvas)\n      // use manually created mipmaps if available\n      // if there are no manual mipmaps\n      // set 0 level mipmap and then use GL to generate other mipmap levels\n      if (mipmaps.length > 0 && supportsMips) {\n        if (useTexStorage && allocateMemory) {\n          state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n        }\n\n        for (let i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n\n          if (useTexStorage) {\n            state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n          }\n        }\n\n        texture.generateMipmaps = false;\n      } else {\n        if (useTexStorage) {\n          if (allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n          }\n\n          state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n        }\n      }\n    }\n\n    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n      generateMipmap(textureType);\n    }\n\n    textureProperties.__version = texture.version;\n    if (texture.onUpdate) texture.onUpdate(texture);\n  }\n\n  function uploadCubeTexture(textureProperties, texture, slot) {\n    if (texture.image.length !== 6) return;\n    initTexture(textureProperties, texture);\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n    _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n    _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n    _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n    _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n    const isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n    const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n    const cubeImage = [];\n\n    for (let i = 0; i < 6; i++) {\n      if (!isCompressed && !isDataTexture) {\n        cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n      } else {\n        cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n      }\n\n      cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);\n    }\n\n    const image = cubeImage[0],\n          supportsMips = isPowerOfTwo(image) || isWebGL2,\n          glFormat = utils.convert(texture.format, texture.encoding),\n          glType = utils.convert(texture.type),\n          glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n    const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;\n    const allocateMemory = textureProperties.__version === undefined;\n    let levels = getMipLevels(texture, image, supportsMips);\n    setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n    let mipmaps;\n\n    if (isCompressed) {\n      if (useTexStorage && allocateMemory) {\n        state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);\n      }\n\n      for (let i = 0; i < 6; i++) {\n        mipmaps = cubeImage[i].mipmaps;\n\n        for (let j = 0; j < mipmaps.length; j++) {\n          const mipmap = mipmaps[j];\n\n          if (texture.format !== _constants.RGBAFormat) {\n            if (glFormat !== null) {\n              if (useTexStorage) {\n                state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n              } else {\n                state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n              }\n            } else {\n              console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n            }\n          } else {\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n            }\n          }\n        }\n      }\n    } else {\n      mipmaps = texture.mipmaps;\n\n      if (useTexStorage && allocateMemory) {\n        // TODO: Uniformly handle mipmap definitions\n        // Normal textures and compressed cube textures define base level + mips with their mipmap array\n        // Uncompressed cube textures use their mipmap array only for mips (no base level)\n        if (mipmaps.length > 0) levels++;\n        state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);\n      }\n\n      for (let i = 0; i < 6; i++) {\n        if (isDataTexture) {\n          if (useTexStorage) {\n            state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);\n          } else {\n            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n          }\n\n          for (let j = 0; j < mipmaps.length; j++) {\n            const mipmap = mipmaps[j];\n            const mipmapImage = mipmap.image[i].image;\n\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n            }\n          }\n        } else {\n          if (useTexStorage) {\n            state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);\n          } else {\n            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n          }\n\n          for (let j = 0; j < mipmaps.length; j++) {\n            const mipmap = mipmaps[j];\n\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n            }\n          }\n        }\n      }\n    }\n\n    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n      // We assume images for cube map have the same size.\n      generateMipmap(_gl.TEXTURE_CUBE_MAP);\n    }\n\n    textureProperties.__version = texture.version;\n    if (texture.onUpdate) texture.onUpdate(texture);\n  } // Render targets\n  // Setup storage for target texture and bind it to correct framebuffer\n\n\n  function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n    const glFormat = utils.convert(texture.format, texture.encoding);\n    const glType = utils.convert(texture.type);\n    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n    const renderTargetProperties = properties.get(renderTarget);\n\n    if (!renderTargetProperties.__hasExternalTextures) {\n      if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n        state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n      } else {\n        state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n      }\n    }\n\n    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    if (renderTarget.useRenderToTexture) {\n      MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));\n    } else {\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n    }\n\n    state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n      let glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n      if (isMultisample || renderTarget.useRenderToTexture) {\n        const depthTexture = renderTarget.depthTexture;\n\n        if (depthTexture && depthTexture.isDepthTexture) {\n          if (depthTexture.type === _constants.FloatType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT32F;\n          } else if (depthTexture.type === _constants.UnsignedIntType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT24;\n          }\n        }\n\n        const samples = getRenderTargetSamples(renderTarget);\n\n        if (renderTarget.useRenderToTexture) {\n          MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else {\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        }\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n      const samples = getRenderTargetSamples(renderTarget);\n\n      if (isMultisample && renderTarget.useRenderbuffer) {\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n      } else if (renderTarget.useRenderToTexture) {\n        MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else {\n      // Use the first texture for MRT so far\n      const texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;\n      const glFormat = utils.convert(texture.format, texture.encoding);\n      const glType = utils.convert(texture.type);\n      const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n      const samples = getRenderTargetSamples(renderTarget);\n\n      if (isMultisample && renderTarget.useRenderbuffer) {\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n      } else if (renderTarget.useRenderToTexture) {\n        MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n      }\n    }\n\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n  } // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n  function setupDepthTexture(framebuffer, renderTarget) {\n    const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n    if (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n      throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n    } // upload an empty depth texture with framebuffer size\n\n\n    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n      renderTarget.depthTexture.image.width = renderTarget.width;\n      renderTarget.depthTexture.image.height = renderTarget.height;\n      renderTarget.depthTexture.needsUpdate = true;\n    }\n\n    setTexture2D(renderTarget.depthTexture, 0);\n\n    const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n    const samples = getRenderTargetSamples(renderTarget);\n\n    if (renderTarget.depthTexture.format === _constants.DepthFormat) {\n      if (renderTarget.useRenderToTexture) {\n        MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);\n      } else {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      }\n    } else if (renderTarget.depthTexture.format === _constants.DepthStencilFormat) {\n      if (renderTarget.useRenderToTexture) {\n        MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);\n      } else {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      }\n    } else {\n      throw new Error('Unknown depthTexture format');\n    }\n  } // Setup GL resources for a non-texture depth buffer\n\n\n  function setupDepthRenderbuffer(renderTarget) {\n    const renderTargetProperties = properties.get(renderTarget);\n    const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n    if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {\n      if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n    } else {\n      if (isCube) {\n        renderTargetProperties.__webglDepthbuffer = [];\n\n        for (let i = 0; i < 6; i++) {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n          renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n        }\n      } else {\n        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n      }\n    }\n\n    state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // rebind framebuffer with external textures\n\n\n  function rebindTextures(renderTarget, colorTexture, depthTexture) {\n    const renderTargetProperties = properties.get(renderTarget);\n\n    if (colorTexture !== undefined) {\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);\n    }\n\n    if (depthTexture !== undefined) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  } // Set up GL resources for the render target\n\n\n  function setupRenderTarget(renderTarget) {\n    const texture = renderTarget.texture;\n    const renderTargetProperties = properties.get(renderTarget);\n    const textureProperties = properties.get(texture);\n    renderTarget.addEventListener('dispose', onRenderTargetDispose);\n\n    if (renderTarget.isWebGLMultipleRenderTargets !== true) {\n      if (textureProperties.__webglTexture === undefined) {\n        textureProperties.__webglTexture = _gl.createTexture();\n      }\n\n      textureProperties.__version = texture.version;\n      info.memory.textures++;\n    }\n\n    const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n    const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n    const isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Setup framebuffer\n\n    if (isCube) {\n      renderTargetProperties.__webglFramebuffer = [];\n\n      for (let i = 0; i < 6; i++) {\n        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n      }\n    } else {\n      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n      if (isMultipleRenderTargets) {\n        if (capabilities.drawBuffers) {\n          const textures = renderTarget.texture;\n\n          for (let i = 0, il = textures.length; i < il; i++) {\n            const attachmentProperties = properties.get(textures[i]);\n\n            if (attachmentProperties.__webglTexture === undefined) {\n              attachmentProperties.__webglTexture = _gl.createTexture();\n              info.memory.textures++;\n            }\n          }\n        } else {\n          console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n        }\n      } else if (renderTarget.useRenderbuffer) {\n        if (isWebGL2) {\n          renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n          renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n          const glFormat = utils.convert(texture.format, texture.encoding);\n          const glType = utils.convert(texture.type);\n          const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n          const samples = getRenderTargetSamples(renderTarget);\n\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n          _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n          if (renderTarget.depthBuffer) {\n            renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n            setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n          }\n\n          state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n        } else {\n          console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n        }\n      }\n    } // Setup color buffer\n\n\n    if (isCube) {\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n      for (let i = 0; i < 6; i++) {\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n\n      state.unbindTexture();\n    } else if (isMultipleRenderTargets) {\n      const textures = renderTarget.texture;\n\n      for (let i = 0, il = textures.length; i < il; i++) {\n        const attachment = textures[i];\n        const attachmentProperties = properties.get(attachment);\n        state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n        setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n\n        if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n          generateMipmap(_gl.TEXTURE_2D);\n        }\n      }\n\n      state.unbindTexture();\n    } else {\n      let glTextureType = _gl.TEXTURE_2D;\n\n      if (isRenderTarget3D) {\n        // Render targets containing layers, i.e: Texture 3D and 2d arrays\n        if (isWebGL2) {\n          const isTexture3D = texture.isDataTexture3D;\n          glTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n        } else {\n          console.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n        }\n      }\n\n      state.bindTexture(glTextureType, textureProperties.__webglTexture);\n      setTextureParameters(glTextureType, texture, supportsMips);\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(glTextureType);\n      }\n\n      state.unbindTexture();\n    } // Setup depth and stencil buffers\n\n\n    if (renderTarget.depthBuffer) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  }\n\n  function updateRenderTargetMipmap(renderTarget) {\n    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n    const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n    for (let i = 0, il = textures.length; i < il; i++) {\n      const texture = textures[i];\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n        const webglTexture = properties.get(texture).__webglTexture;\n\n        state.bindTexture(target, webglTexture);\n        generateMipmap(target);\n        state.unbindTexture();\n      }\n    }\n  }\n\n  function updateMultisampleRenderTarget(renderTarget) {\n    if (renderTarget.useRenderbuffer) {\n      if (isWebGL2) {\n        const width = renderTarget.width;\n        const height = renderTarget.height;\n        let mask = _gl.COLOR_BUFFER_BIT;\n        const invalidationArray = [_gl.COLOR_ATTACHMENT0];\n        const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\n        if (renderTarget.depthBuffer) {\n          invalidationArray.push(depthStyle);\n        }\n\n        if (!renderTarget.ignoreDepthForMultisampleCopy) {\n          if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n          if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n        }\n\n        const renderTargetProperties = properties.get(renderTarget);\n        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n        if (renderTarget.ignoreDepthForMultisampleCopy) {\n          _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [depthStyle]);\n\n          _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);\n        }\n\n        _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n        _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);\n\n        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n      } else {\n        console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n      }\n    }\n  }\n\n  function getRenderTargetSamples(renderTarget) {\n    return isWebGL2 && (renderTarget.useRenderbuffer || renderTarget.useRenderToTexture) ? Math.min(maxSamples, renderTarget.samples) : 0;\n  }\n\n  function updateVideoTexture(texture) {\n    const frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n    if (_videoTextures.get(texture) !== frame) {\n      _videoTextures.set(texture, frame);\n\n      texture.update();\n    }\n  }\n\n  function verifyColorSpace(texture, image) {\n    const encoding = texture.encoding;\n    const format = texture.format;\n    const type = texture.type;\n    if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _constants._SRGBAFormat) return image;\n\n    if (encoding !== _constants.LinearEncoding) {\n      // sRGB\n      if (encoding === _constants.sRGBEncoding) {\n        if (isWebGL2 === false) {\n          // in WebGL 1, try to use EXT_sRGB extension and unsized formats\n          if (extensions.has('EXT_sRGB') === true && format === _constants.RGBAFormat) {\n            texture.format = _constants._SRGBAFormat; // it's not possible to generate mips in WebGL 1 with this extension\n\n            texture.minFilter = _constants.LinearFilter;\n            texture.generateMipmaps = false;\n          } else {\n            // slow fallback (CPU decode)\n            image = _ImageUtils.ImageUtils.sRGBToLinear(image);\n          }\n        } else {\n          // in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n          if (format !== _constants.RGBAFormat || type !== _constants.UnsignedByteType) {\n            console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');\n          }\n        }\n      } else {\n        console.error('THREE.WebGLTextures: Unsupported texture encoding:', encoding);\n      }\n    }\n\n    return image;\n  } // backwards compatibility\n\n\n  let warnedTexture2D = false;\n  let warnedTextureCube = false;\n\n  function safeSetTexture2D(texture, slot) {\n    if (texture && texture.isWebGLRenderTarget) {\n      if (warnedTexture2D === false) {\n        console.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n        warnedTexture2D = true;\n      }\n\n      texture = texture.texture;\n    }\n\n    setTexture2D(texture, slot);\n  }\n\n  function safeSetTextureCube(texture, slot) {\n    if (texture && texture.isWebGLCubeRenderTarget) {\n      if (warnedTextureCube === false) {\n        console.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n        warnedTextureCube = true;\n      }\n\n      texture = texture.texture;\n    }\n\n    setTextureCube(texture, slot);\n  } //\n\n\n  this.allocateTextureUnit = allocateTextureUnit;\n  this.resetTextureUnits = resetTextureUnits;\n  this.setTexture2D = setTexture2D;\n  this.setTexture2DArray = setTexture2DArray;\n  this.setTexture3D = setTexture3D;\n  this.setTextureCube = setTextureCube;\n  this.rebindTextures = rebindTextures;\n  this.setupRenderTarget = setupRenderTarget;\n  this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n  this.setupDepthRenderbuffer = setupDepthRenderbuffer;\n  this.setupFrameBufferTexture = setupFrameBufferTexture;\n  this.safeSetTexture2D = safeSetTexture2D;\n  this.safeSetTextureCube = safeSetTextureCube;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","Object","defineProperty","value","WebGLTextures","_gl","extensions","state","properties","capabilities","utils","info","resizeImage","image","needsPowerOfTwo","needsNewCanvas","maxSize","scale","width","height","Math","max","HTMLImageElement","HTMLCanvasElement","ImageBitmap","floor","canvas","MathUtils","floorPowerOfTwo","undefined","_canvas","useOffscreenCanvas","OffscreenCanvas","_utils","createElementNS","getContext","context","drawImage","console","warn","isPowerOfTwo","textureNeedsGenerateMipmaps","texture","supportsMips","generateMipmaps","minFilter","_constants","NearestFilter","LinearFilter","getInternalFormat","internalFormatName","glFormat","glType","encoding","isVideoTexture","isWebGL2","internalFormat","RED","FLOAT","R32F","HALF_FLOAT","R16F","UNSIGNED_BYTE","R8","RG","RG32F","RG16F","RG8","RGBA","RGBA32F","RGBA16F","sRGBEncoding","SRGB8_ALPHA8","RGBA8","UNSIGNED_SHORT_4_4_4_4","RGBA4","UNSIGNED_SHORT_5_5_5_1","RGB5_A1","get","getMipLevels","isFramebufferTexture","log2","mipmaps","length","isCompressedTexture","Array","isArray","filterFallback","f","NearestMipmapNearestFilter","NearestMipmapLinearFilter","NEAREST","LINEAR","onTextureDispose","event","target","removeEventListener","textureProperties","__webglInit","deleteTexture","__webglTexture","remove","_videoTextures","delete","memory","textures","onRenderTargetDispose","renderTarget","renderTargetProperties","depthTexture","dispose","isWebGLCubeRenderTarget","i","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","isWebGLMultipleRenderTargets","il","attachmentProperties","setTexture2D","slot","frame","render","set","update","version","__version","complete","uploadTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setTextureCube","initTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","flipY","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","UNPACK_ALIGNMENT","unpackAlignment","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","isCompressed","isDataTexture","cubeImage","maxCubemapSize","verifyColorSpace","convert","format","type","glInternalFormat","useTexStorage","allocateMemory","levels","setTextureParameters","texStorage2D","j","mipmap","RGBAFormat","compressedTexSubImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","data","compressedTexImage2D","texSubImage2D","texImage2D","mipmapImage","generateMipmap","onUpdate","textureType","texParameteri","TEXTURE_WRAP_S","wrappingToGL","wrapS","TEXTURE_WRAP_T","wrapT","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_WRAP_R","wrapR","TEXTURE_MAG_FILTER","filterToGL","magFilter","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","ClampToEdgeWrapping","has","extension","FloatType","HalfFloatType","anisotropy","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","min","getMaxAnisotropy","addEventListener","createTexture","isDataTexture2DArray","isDataTexture3D","maxTextureSize","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","UnsignedIntType","DEPTH_COMPONENT24","UnsignedInt248Type","DEPTH24_STENCIL8","DEPTH_COMPONENT16","error","DepthFormat","UnsignedShortType","DepthStencilFormat","DEPTH_STENCIL","texStorage3D","depth","texSubImage3D","texImage3D","setupFrameBufferTexture","framebuffer","attachment","textureTarget","__hasExternalTextures","bindFramebuffer","FRAMEBUFFER","useRenderToTexture","MultisampledRenderToTextureExtension","framebufferTexture2DMultisampleEXT","getRenderTargetSamples","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","samples","renderbufferStorageMultisampleEXT","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","useRenderbuffer","DEPTH_STENCIL_ATTACHMENT","setupDepthRenderbuffer","isCube","__autoAllocateDepthBuffer","Error","needsUpdate","webglDepthTexture","createRenderbuffer","maxSamples","_SRGBAFormat","LinearEncoding","_ImageUtils","ImageUtils","sRGBToLinear","UnsignedByteType","maxTextures","hasMultisampledRenderToTexture","err","textureUnits","RepeatWrapping","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipmapNearestFilter","LINEAR_MIPMAP_NEAREST","LinearMipmapLinearFilter","LINEAR_MIPMAP_LINEAR","warnedTexture2D","warnedTextureCube","allocateTextureUnit","textureUnit","resetTextureUnits","setTexture2DArray","setTexture3D","rebindTextures","colorTexture","COLOR_ATTACHMENT0","setupRenderTarget","isMultipleRenderTargets","isRenderTarget3D","createFramebuffer","drawBuffers","glTextureType","unbindTexture","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","mask","COLOR_BUFFER_BIT","invalidationArray","depthStyle","push","ignoreDepthForMultisampleCopy","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","invalidateFramebuffer","blitFramebuffer","safeSetTexture2D","isWebGLRenderTarget","safeSetTextureCube","_interopRequireWildcard","obj","__esModule","default","cache","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc"]
}
