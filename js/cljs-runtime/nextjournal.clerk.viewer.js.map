{"version":3,"sources":["nextjournal/clerk/viewer.cljc"],"mappings":"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","names":["this__4502__auto__","k__4503__auto__","this__4504__auto__","k76329","else__4505__auto__","G__76333","cljs.core/Keyword","form","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__76334","vec__76335","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__76328","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this76330","other76331","cljs.core._EQ_","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__76338","this__4510__auto__","k__4511__auto__","pred__76339","cljs.core/keyword-identical?","expr__76340","cljs.core.assoc","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","nextjournal.clerk.viewer/ViewerEval","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__76332","extmap__4542__auto__","G__76342","cljs.core/record?","nextjournal.clerk.viewer/->ViewerEval","nextjournal.clerk.viewer/map->ViewerEval","k76344","G__76352","f","p__76356","vec__76357","G__76343","this76345","other76346","G__76362","pred__76363","expr__76364","unused__43952__auto__","self__","G__76370","js/Error","args76348","cljs.core/aclone","nextjournal.clerk.viewer/ViewerFn","G__76347","G__76386","nextjournal.clerk.viewer/->ViewerFn","nextjournal.clerk.viewer/map->ViewerFn","this","x","fexpr__76375","y","fexpr__76381","nextjournal.clerk.viewer/viewer-fn?","nextjournal.clerk.viewer/viewer-eval?","nextjournal.clerk.viewer/->viewer-fn","cljs.core/eval","nextjournal.clerk.viewer/->viewer-eval","nextjournal.clerk.viewer/wrapped-value?","and__4251__auto__","cljs.core/map?","e76394","_e","var_args","G__76407","nextjournal.clerk.viewer/ensure-wrapped","v","nextjournal.clerk.viewer.ensure_wrapped","nextjournal.clerk.viewer/->value","nextjournal.clerk.viewer/->viewer","nextjournal.clerk.viewer/->viewers","nextjournal.clerk.viewer/width","nextjournal.clerk.viewer/normalize-viewer-opts","opts","cljs.core.ex_info","clojure.set/rename-keys","nextjournal.clerk.viewer/normalize-viewer","viewer","cljs.core/Symbol","cljs.core/seq?","cljs.core/fn?","G__76441","nextjournal.clerk.viewer/with-viewer","nextjournal.clerk.viewer.with_viewer","viewer-opts","cljs.core.merge","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","nextjournal.clerk.viewer/with-viewer-extracting-opts","seq76444","G__76445","cljs.core/first","cljs.core/next","self__4851__auto__","opts+items","cljs.core/not","cljs.core/rest","cljs.core/sequential?","cljs.core.apply","cljs.core.partial","nextjournal.clerk.viewer/with-viewers","viewers","G__76450","nextjournal.clerk.viewer/get-safe","p1__76448#","key","nextjournal.clerk.viewer.get_safe","map","e76451","nextjournal.clerk.viewer/rpad-vec","length","padding","cljs.core/vec","cljs.core.take","cljs.core.repeat","nextjournal.clerk.viewer/missing-pred","nextjournal.clerk.viewer/normalize-seq-of-seq","s","max-count","cljs.core/max-key","p1__76453#","cljs.core.mapv","nextjournal.clerk.viewer/normalize-seq-of-map","ks","cljs.core.mapcat","cljs.core/keys","cljs.core.distinct","m","p1__76455#","nextjournal.clerk.viewer/normalize-map-of-seq","m*","p__76458","vec__76459","acc","k","cljs.core.range","cljs.core/val","cljs.core.comp","i","p1__76457#","cljs.core.get_in","p__76466","map__76467","cljs.core/--destructure-map","nextjournal.clerk.viewer/normalize-seq-to-vec","head","rows","G__76469","nextjournal.clerk.viewer/use-headers","map__76472","table","cljs.core.update","nextjournal.clerk.viewer/normalize-table-data","data","cljs.core/vals","nextjournal.clerk.viewer/demunge-ex-data","ex-data","traces","p1__76479#","cljs.core/demunge","cljs.core/pr-str","nextjournal.clerk.viewer/inspect-fn","p1__76490#","nextjournal.clerk.viewer/when-wrapped","G__76491","nextjournal.clerk.viewer/inspect-wrapped-value","wrapped-value","G__76493","nextjournal.clerk.viewer/apply-viewers","nextjournal.clerk.viewer/process-wrapped-value","nextjournal.clerk.viewer/mark-presented","nextjournal.clerk.viewer/mark-preserve-keys","nextjournal.clerk.viewer/fetch-all","_opts","_xs","nextjournal.clerk.viewer/var-from-def?","nextjournal.clerk.viewer/datafied?","nextjournal.clerk.viewer/with-md-viewer","map__76499","node","type","cljs.core.keyword","cljs.core/name","nextjournal.clerk.viewer/into-markup","markup","p__76501","map__76503","p__76510","map__76511","text","content","G__76512","p1__76500#","G__76517","w","p__76518","map__76519","nextjournal.clerk.viewer/apply-viewer-unwrapping-var-from-def","result","value","map__76520","transform-fn","cljs.core/deref","cljs.core/var?","nextjournal.clerk.viewer/get-default-viewers","nextjournal.clerk.viewer/!viewers","nextjournal.clerk.viewer/default-viewers","G__76531","nextjournal.clerk.viewer/get-viewers","scope","nextjournal.clerk.viewer.get_viewers","or__4253__auto__","fexpr__76532","nextjournal.clerk.viewer/hide-result-viewer","_","p__76533","map__76534","nextjournal.clerk.viewer/->display","code-cell","visibility","map__76535","code","cljs.core.not_EQ_","p__76536","map__76537","nextjournal.clerk.viewer/with-block-viewer","doc","cell","G__76538","map__76539","display-opts","code?","result?","G__76540","cljs.core.conj","cljs.core/select-keys","nextjournal.clerk.viewer/update-viewers","select-fn->update-fn","p__76547","vec__76549","pred","update-fn","G__76557","G__76560","nextjournal.clerk.viewer/add-viewers","added-viewers","nextjournal.clerk.viewer.add_viewers","nextjournal.clerk.viewer/table-missing-viewer","nextjournal.clerk.viewer/table-markup-viewer","nextjournal.clerk.viewer/table-head-viewer","nextjournal.clerk.viewer/table-body-viewer","nextjournal.clerk.viewer/table-row-viewer","nextjournal.clerk.viewer/update-table-viewers","p1__76752#","p1__76756#","p1__76757#","cljs.core/string?","cljs.core/number?","nextjournal.clerk.viewer/update-val","seq76791","G__76792","args","cljs.core/update","p1__76809#","nextjournal.clerk.viewer/markdown-viewers","p__76835","map__76837","heading-level","lambdaisland.uri.normalize/normalize-fragment","nextjournal.markdown.transform/->text","p1__76812#","p1__76813#","p1__76817#","p__76948","map__76949","attrs","p1__76827#","nextjournal.markdown.transform/table-alignment","p1__76828#","p__76957","map__76958","nextjournal.clerk.viewer/char-viewer","cljs.core/char?","nextjournal.clerk.viewer/string-viewer","nextjournal.clerk.viewer/number-viewer","nextjournal.clerk.viewer/number-hex-viewer","nextjournal.clerk.viewer/symbol-viewer","cljs.core/symbol?","nextjournal.clerk.viewer/keyword-viewer","cljs.core/keyword?","nextjournal.clerk.viewer/nil-viewer","cljs.core/nil?","nextjournal.clerk.viewer/boolean-viewer","cljs.core/boolean?","nextjournal.clerk.viewer/map-entry-viewer","cljs.core/map-entry?","nextjournal.clerk.viewer/var-from-def-viewer","nextjournal.clerk.viewer/read+inspect-viewer","nextjournal.clerk.viewer/vector-viewer","nextjournal.clerk.viewer/set-viewer","cljs.core/set?","nextjournal.clerk.viewer/sequential-viewer","nextjournal.clerk.viewer/map-viewer","nextjournal.clerk.viewer/var->symbol","sci.lang/Var","cljs.core.symbol","nextjournal.clerk.viewer/var-viewer","p1__76972#","cljs.core.some_fn","nextjournal.clerk.viewer/throwable-viewer","e","clojure.datafy/datafy","p1__76974#","nextjournal.clerk.viewer/ideref-viewer","cljs.core/IDeref","ideref","cljs.core.pr_str","cljs.core/type","temp__5751__auto__","deref-as-map","js/cljs","js/cljs.core","js/cljs.core.deref-as-map","cljs.core/Var","cljs.core/deref-as-map","nextjournal.clerk.viewer/regex-viewer","cljs.core/regexp?","regex","nextjournal.clerk.viewer/fallback-viewer","cljs.core/constantly","p1__76993#","nextjournal.clerk.viewer/elision-viewer","nextjournal.clerk.viewer/katex-viewer","nextjournal.clerk.viewer/mathjax-viewer","nextjournal.clerk.viewer/html-viewer","clojure.walk/postwalk","nextjournal.clerk.viewer/plotly-viewer","nextjournal.clerk.viewer/vega-lite-viewer","nextjournal.clerk.viewer/markdown-viewer","p1__77001#","G__77002","nextjournal.markdown/parse","nextjournal.clerk.viewer/code-viewer","clojure.string/trim","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__77003","cljs.core/*print-newline*","*print-fn*-orig-val__77004","cljs.core/*print-fn*","*print-newline*-temp-val__77005","*print-fn*-temp-val__77006","x__4796__auto__","cljs.pprint.pprint","nextjournal.clerk.viewer/code-folded-viewer","*print-newline*-orig-val__77007","*print-fn*-orig-val__77008","*print-newline*-temp-val__77009","*print-fn*-temp-val__77010","nextjournal.clerk.viewer/reagent-viewer","nextjournal.clerk.viewer/row-viewer","nextjournal.clerk.viewer/col-viewer","nextjournal.clerk.viewer/table-viewer","map__77039","p1__77037#","cljs.core.map_indexed","cljs.core/vector","p1__77038#","cljs.core.keep","cljs.core/second","G__77041","cljs.core/cons","cljs.core.map","nextjournal.clerk.viewer/present","nextjournal.clerk.viewer/table-error-viewer","nextjournal.clerk.viewer/code-block-viewer","p__77048","map__77049","nextjournal.clerk.viewer/tagged-value-viewer","nextjournal.clerk.viewer/js-object-viewer","goog/isObject","o","cljs.core.remove","goog/typeOf","obj77052","applied-science.js-interop.impl/wrap-key","js/undefined","e77054","obj77055","js/Object.keys","nextjournal.clerk.viewer/js-array-viewer","cljs.core/js-iterable?","nextjournal.clerk.viewer/result-block-viewer","nextjournal.clerk.viewer/result-viewer","p__77056","map__77057","nextjournal.clerk.viewer/process-blocks","ns","cljs.core/into","nextjournal.clerk.viewer/apply-viewers*","nextjournal.clerk.viewer/ensure-wrapped-with-viewers","nextjournal.clerk.viewer/notebook-viewer","p__77060","map__77062","nextjournal.clerk.viewer/buffered-image-viewer","js/nextjournal","js/nextjournal.clerk","js/nextjournal.clerk.viewer","js/nextjournal.clerk.viewer.!viewers","reagent.ratom.atom","nextjournal.clerk.viewer/rank-val","val","cljs.core/reduce-kv","res","idx","cljs.core/ifn?","cljs.core/reduced","nextjournal.clerk.viewer/resilient-compare","a","b","e77063","cljs.core/compare","nextjournal.clerk.viewer/ensure-sorted","xs","cljs.core/sorted?","cljs.core.sort_by","cljs.core.sort","nextjournal.clerk.viewer/find-viewer","select-fn","cljs.core.filter","nextjournal.clerk.viewer/find-named-viewer","viewer-name","nextjournal.clerk.viewer/viewer-for","temp__5753__auto__","selected-viewer","p__77065","map__77066","G__77068","nextjournal.clerk.viewer.ensure_wrapped_with_viewers","cljs.core/*ns*","x-viewers","nextjournal.clerk.viewer/->opts","cljs.core/empty?","map__77081","render-fn","transformed-value","G__77093","wrapped-value'","G__77099","nextjournal.clerk.viewer/count-viewers","p1__77122#","G__77124","nextjournal.clerk.viewer/bounded-count-opts","n","limit","total","e77188","cljs.core/bounded-count","G__77190","p__77204","map__77205","nextjournal.clerk.viewer/drop+take-xf","offset","G__77206","cljs.core.drop","cljs.core/int?","p__77215","map__77216","nextjournal.clerk.viewer/process-render-fn","G__77217","nextjournal.clerk.viewer/process-viewer","nextjournal.clerk.viewer/make-elision","fetch-opts","nextjournal.clerk.viewer/find-elision","desc","p1__77231#","cljs.core/tree-seq","G__77232","nextjournal.clerk.viewer/->fetch-opts","nextjournal.clerk.viewer/get-elision","map__77233","path","nextjournal.clerk.viewer/get-fetch-opts-n","p__77234","map__77235","nextjournal.clerk.viewer/inherit-opts","path-segment","cljs.core.fnil","cljs.core/conj","p__77236","map__77237","nextjournal.clerk.viewer/present+paginate-children","preserve-keys?","!budget","budget","map__77238","map__77239","paginate?","fetch-opts'","G__77240","cljs.core/min","children","p__77241","vec__77242","G__77245","nextjournal.clerk.viewer/present*","cljs.core/identity","G__77246","elision","unbounded?","new-offset","G__77247","cljs.core/peek","G__77248","p__77249","map__77250","nextjournal.clerk.viewer/present+paginate-string","map__77251","x__4339__auto__","y__4340__auto__","G__77252","cljs.core.subs","p__77256","map__77257","current-path","map__77258","presented?","descend?","p1__77255#","cljs.core.swap_BANG_","x__4336__auto__","y__4337__auto__","G__77260","cljs.core/associative?","cljs.core/seqable?","nextjournal.clerk.viewer/assign-content-lengths","map__77283","map__77284","name","opening-paren","closing-paren","elision-content-length","cljs.core/+","p1__77270#","p1__77271#","p__77321","p__77322","map__77324","map__77326","nextjournal.clerk.viewer/compute-expanded-at","state","expanded-at","state'","nextjournal.clerk.viewer/assign-expanded-at","G__77333","nextjournal.clerk.viewer.present","G__77334","cljs.core.atom","nextjournal.clerk.viewer/assign-closing-parens","nextjournal.clerk.viewer/desc->values","cljs.core/with-meta","cljs.core/coll?","G__77347","cljs.core/empty","nextjournal.clerk.viewer/path-to-value","cljs.core.interleave","nextjournal.clerk.viewer/merge-presentations","root","more","cljs.core.update_in","map__77352","path-from-value","path-from-more","cljs.core/pop","G__77566","nextjournal.clerk.viewer.assign_closing_parens","closing-parens","closing","non-leaf?","defer-closing?","cljs.core/last","G__77568","cljs.core/dissoc","G__77569","G__77571","nextjournal.clerk.viewer/reset-viewers!","nextjournal.clerk.viewer.reset_viewers_BANG_","fexpr__77573","cljs.core/assoc","nextjournal.clerk.viewer/add-viewers!","nextjournal.clerk.viewer/html","nextjournal.clerk.viewer/md","nextjournal.clerk.viewer/plotly","nextjournal.clerk.viewer/vl","nextjournal.clerk.viewer/table","nextjournal.clerk.viewer/row","nextjournal.clerk.viewer/col","nextjournal.clerk.viewer/tex","nextjournal.clerk.viewer/notebook","nextjournal.clerk.viewer/code","nextjournal.clerk.viewer/doc-url","G__77586","nextjournal.clerk.viewer/hide-result","_viewer-opts","nextjournal.clerk.viewer/eval-cljs-result-viewer","nextjournal.clerk.viewer/eval-cljs-str","code-string","nextjournal.clerk.viewer/example-viewer","p__77587","map__77588","nextjournal.clerk.viewer/examples-viewer","examples"],"sourcesContent":["(ns nextjournal.clerk.viewer\n  (:require [clojure.string :as str]\n            [clojure.pprint :as pprint]\n            [clojure.datafy :as datafy]\n            [clojure.set :as set]\n            [clojure.walk :as w]\n            #?@(:clj [[babashka.fs :as fs]\n                      [clojure.repl :refer [demunge]]\n                      [nextjournal.clerk.config :as config]\n                      [nextjournal.clerk.analyzer :as analyzer]]\n                :cljs [[reagent.ratom :as ratom]\n                       [sci.impl.vars]\n                       [sci.lang]\n                       [applied-science.js-interop :as j]])\n            [nextjournal.markdown :as md]\n            [nextjournal.markdown.transform :as md.transform]\n            [lambdaisland.uri.normalize :as uri.normalize])\n  #?(:clj (:import (com.pngencoder PngEncoder)\n                   (clojure.lang IDeref)\n                   (java.lang Throwable)\n                   (java.awt.image BufferedImage)\n                   (java.util Base64)\n                   (java.nio.file Files StandardOpenOption))))\n\n(defrecord ViewerEval [form])\n\n(defrecord ViewerFn [form #?(:cljs f)]\n  #?@(:cljs [IFn\n             (-invoke [this x] ((:f this) x))\n             (-invoke [this x y] ((:f this) x y))]))\n\n\n(defn viewer-fn? [x]\n  (instance? ViewerFn x))\n\n(defn viewer-eval? [x]\n  (instance? ViewerEval x))\n\n(defn ->viewer-fn [form]\n  (map->ViewerFn {:form form #?@(:cljs [:f (eval form)])}))\n\n(defn ->viewer-eval [form]\n  (map->ViewerEval {:form form}))\n\n#?(:clj\n   (defmethod print-method ViewerFn [v ^java.io.Writer w]\n     (.write w (str \"#viewer-fn \" (pr-str `~(:form v))))))\n\n#?(:clj\n   (defmethod print-method ViewerEval [v ^java.io.Writer w]\n     (.write w (str \"#viewer-eval \" (pr-str `~(:form v))))))\n\n#_(binding [*data-readers* {'viewer-fn ->viewer-fn}]\n    (read-string (pr-str (->viewer-fn '(fn [x] x)))))\n#_(binding [*data-readers* {'viewer-fn ->viewer-fn}]\n    (read-string (pr-str (->viewer-fn 'number?))))\n\n(comment\n  (def num? (form->fn+form 'number?))\n  (num? 42)\n  (:form num?)\n  (pr-str num?))\n\n(defn wrapped-value?\n  \"Tests if `x` is a map containing a `:nextjournal/value`.\"\n  [x]\n  (and (map? x) ;; can throw for `sorted-map`\n       (try (contains? x :nextjournal/value)\n            (catch #?(:clj Exception :cljs js/Error) _e false))))\n\n(defn ensure-wrapped\n  \"Ensures `x` is wrapped in a map under a `:nextjournal/value` key.\"\n  ([x] (if (wrapped-value? x) x {:nextjournal/value x}))\n  ([x v] (-> x ensure-wrapped (assoc :nextjournal/viewer v))))\n\n#_(ensure-wrapped 123)\n#_(ensure-wrapped {:nextjournal/value 456})\n\n(defn ->value\n  \"Takes `x` and returns the `:nextjournal/value` from it, or otherwise `x` unmodified.\"\n  [x]\n  (if (wrapped-value? x)\n    (:nextjournal/value x)\n    x))\n\n#_(->value (with-viewer :code '(+ 1 2 3)))\n#_(->value 123)\n\n(defn ->viewer\n  \"Returns the `:nextjournal/viewer` for a given wrapped value `x`, `nil` otherwise.\"\n  [x]\n  (when (wrapped-value? x)\n    (:nextjournal/viewer x)))\n\n\n#_(->viewer (with-viewer :code '(+ 1 2 3)))\n#_(->viewer \"123\")\n\n(defn ->viewers\n  \"Returns the `:nextjournal/viewers` for a given wrapped value `x`, `nil` otherwise.\"\n  [x]\n  (when (wrapped-value? x)\n    (:nextjournal/viewers x)))\n\n(defn width\n  \"Returns the `:nextjournal/width` for a given wrapped value `x`, `nil` otherwise.\"\n  [x]\n  (when (wrapped-value? x)\n    (:nextjournal/width x)))\n\n\n(defn normalize-viewer-opts [opts]\n  (when-not (map? opts)\n    (throw (ex-info \"normalize-viewer-opts not passed `map?` opts\" {:opts opts})))\n  (set/rename-keys opts {:nextjournal.clerk/viewer :nextjournal/viewer\n                         :nextjournal.clerk/viewers :nextjournal/viewers\n                         :nextjournal.clerk/opts :nextjournal/opts\n                         :nextjournal.clerk/width :nextjournal/width}))\n\n(defn normalize-viewer [viewer]\n  (cond (keyword? viewer) viewer\n        (map? viewer) viewer\n        (or (symbol? viewer) (seq? viewer) #?(:cljs (fn? viewer))) {:render-fn viewer}\n        #?@(:clj [(fn? viewer) {:transform-fn viewer}])\n        :else (throw (ex-info \"cannot normalize viewer\" {:viewer viewer}))))\n\n#_(normalize-viewer '#(v/html [:h3 \"Hello \" % \"!\"]))\n#_(normalize-viewer :latex)\n#_(normalize-viewer {:render-fn '#(v/html [:h3 \"Hello \" % \"!\"]) :transform-fn identity})\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; public api\n\n(defn with-viewer\n  \"Wraps the given value `x` and associates it with the given `viewer`. Takes an optional second `viewer-opts` arg.\"\n  ([viewer x] (with-viewer viewer nil x))\n  ([viewer viewer-opts x]\n   (merge (when viewer-opts (normalize-viewer-opts viewer-opts))\n          (-> x\n              ensure-wrapped\n              (assoc :nextjournal/viewer (normalize-viewer viewer))))))\n\n;; TODO: Think of a better name\n(defn with-viewer-extracting-opts [viewer & opts+items]\n  ;; TODO: maybe support sequantial & viewer-opts?\n  (cond\n    (and (map? (first opts+items)) (not (wrapped-value? (first opts+items))))\n    (with-viewer viewer (first opts+items) (rest opts+items))\n\n    (and (sequential? (first opts+items)) (= 1 (count opts+items)))\n    (apply (partial with-viewer viewer) opts+items)\n\n    :else\n    (with-viewer viewer opts+items)))\n\n#_(with-viewer :latex \"x^2\")\n#_(with-viewer '#(v/html [:h3 \"Hello \" % \"!\"]) \"x^2\")\n\n(defn with-viewers\n  \"Binds viewers to types, eg {:boolean view-fn}\"\n  [viewers x]\n  (-> x\n      ensure-wrapped\n      (assoc :nextjournal/viewers viewers)))\n\n#_(->> \"x^2\" (with-viewer :latex) (with-viewers [{:name :latex :render-fn :mathjax}]))\n\n(defn get-safe\n  ([key] #(get-safe % key))\n  ([map key]\n   (when (map? map)\n     (try (get map key) ;; can throw for e.g. sorted-map\n          (catch #?(:clj Exception :cljs js/Error) _e nil)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; table viewer normalization\n\n(defn rpad-vec [v length padding]\n  (vec (take length (concat v (repeat padding)))))\n\n(def missing-pred\n  :nextjournal/missing)\n\n(defn normalize-seq-of-seq [s]\n  (let [max-count (count (apply max-key count s))]\n    {:rows (mapv #(rpad-vec (->value %) max-count missing-pred) s)}))\n\n(defn normalize-seq-of-map [s]\n  (let [ks (->> s (mapcat keys) distinct vec)]\n    {:head ks\n     :rows (mapv (fn [m] (mapv #(get m % missing-pred) ks)) s)}))\n\n\n(defn normalize-map-of-seq [m]\n  (let [ks (-> m keys vec)\n        m* (if (seq? (get m (first ks)))\n             (reduce (fn [acc [k s]] (assoc acc k (vec s))) {} m)\n             m)]\n    {:head ks\n     :rows (->> (range (count (val (apply max-key (comp count val) m*))))\n                (mapv (fn [i] (mapv #(get-in m* [% i] missing-pred) ks))))}))\n\n(defn normalize-seq-to-vec [{:keys [head rows]}]\n  (cond-> {:rows (vec rows)}\n    head (assoc :head (vec head))))\n\n(defn use-headers [s]\n  (let [{:as table :keys [rows]} (normalize-seq-of-seq s)]\n    (-> table\n        (assoc :head (first rows))\n        (update :rows rest))))\n\n(defn normalize-table-data [data]\n  (cond\n    (and (map? data) (-> data (get-safe :rows) sequential?)) (normalize-seq-to-vec data)\n    (and (map? data) (sequential? (first (vals data)))) (normalize-map-of-seq data)\n    (and (sequential? data) (map? (first data))) (normalize-seq-of-map data)\n    (and (sequential? data) (sequential? (first data))) (normalize-seq-of-seq data)\n    :else nil))\n\n(defn demunge-ex-data [ex-data]\n  (update ex-data :trace (fn [traces] (mapv #(update % 0 (comp demunge pr-str)) traces))))\n\n#_(demunge-ex-data (datafy/datafy (ex-info \"foo\" {:bar :baz})))\n\n(declare present present* !viewers apply-viewers apply-viewers* ensure-wrapped-with-viewers process-viewer process-wrapped-value default-viewers find-named-viewer)\n\n(defn inspect-fn []  #?(:clj (->viewer-eval 'v/inspect-presented) :cljs (eval 'v/inspect-presented)))\n\n(defn when-wrapped [f] #(cond-> % (wrapped-value? %) f))\n\n(defn inspect-wrapped-value [wrapped-value]\n  [(inspect-fn) (-> wrapped-value apply-viewers process-wrapped-value)])\n\n#_(w/postwalk (when-wrapped inspect-wrapped-value) [1 2 {:a [3 (with-viewer :latex \"\\\\alpha\")]} 4])\n\n(defn mark-presented [wrapped-value]\n  (assoc wrapped-value :nextjournal/presented? true))\n\n(defn mark-preserve-keys [wrapped-value]\n  (assoc wrapped-value :nextjournal/preserve-keys? true))\n\n(defn fetch-all [_opts _xs]\n  (throw (ex-info \"`fetch-all` is deprecated, please use a `:transform-fn` with `mark-presented` instead.\" {})))\n\n(def var-from-def?\n  (get-safe :nextjournal.clerk/var-from-def))\n\n(def datafied?\n  (get-safe :nextjournal.clerk/datafied))\n\n(defn with-md-viewer [wrapped-value]\n  (let [{:as node :keys [type]} (->value wrapped-value)]\n    (when-not type\n      (throw (ex-info \"no type given for with-md-viewer\" {:wrapped-value wrapped-value})))\n    (with-viewer (keyword \"nextjournal.markdown\" (name type)) wrapped-value)))\n\n(defn into-markup [markup]\n  (fn [{:as wrapped-value :nextjournal/keys [viewers]}]\n    (-> (with-viewer {:name :html- :render-fn 'v/html} wrapped-value)\n        mark-presented\n        (update :nextjournal/value\n                (fn [{:as node :keys [text content]}]\n                  (into (cond-> markup (fn? markup) (apply [node]))\n                        (cond text [text]\n                              content (mapv #(-> (with-md-viewer %)\n                                                 (assoc :nextjournal/viewers viewers)\n                                                 (apply-viewers)\n                                                 (as-> w\n                                                     (if (= :html- (:name (->viewer w)))\n                                                       (->value w)\n                                                       [(inspect-fn) (process-wrapped-value w)])))\n                                            content))))))))\n\n#?(:clj\n   (defn ->edn [x]\n     (binding [*print-namespace-maps* false\n               *print-length* nil\n               *print-level* nil]\n       (pr-str x))))\n\n#_(->edn {:nextjournal/value :foo})\n\n(defn apply-viewer-unwrapping-var-from-def [{:as result :nextjournal/keys [value viewer]}]\n  (if viewer\n    (let [{:keys [transform-fn]} (and (map? viewer) viewer)\n          value (if (and (not transform-fn) (get value :nextjournal.clerk/var-from-def))\n                  (-> value :nextjournal.clerk/var-from-def deref)\n                  value)]\n      (assoc result :nextjournal/value (if (or (var? viewer) (fn? viewer))\n                                         (viewer value)\n                                         {:nextjournal/value value\n                                          :nextjournal/viewer (normalize-viewer viewer)})))\n    result))\n\n#_(apply-viewer-unwrapping-var-from-def {:nextjournal/value [:h1 \"hi\"] :nextjournal/viewer :html})\n#_(apply-viewer-unwrapping-var-from-def {:nextjournal/value [:h1 \"hi\"] :nextjournal/viewer (resolve 'nextjournal.clerk/html)})\n\n#?(:clj\n   (defn base64-encode-value [{:as result :nextjournal/keys [content-type]}]\n     (update result :nextjournal/value (fn [data] (str \"data:\" content-type \";base64,\"\n                                                       (.encodeToString (Base64/getEncoder) data))))))\n\n#?(:clj\n   (defn maybe-store-result-as-file [{:as _doc+blob-opts :keys [blob-id file out-path]} {:as result :nextjournal/keys [content-type value]}]\n     ;; TODO: support customization via viewer api\n     (if-let [image-type (second (re-matches #\"image/(\\w+)\" content-type))]\n       (let [dir (fs/path out-path \"_data\")\n             file-path (fs/path dir (str (analyzer/valuehash value) \".\" image-type))\n             dir-depth (get (frequencies file) \\/ 0)\n             relative-root (str/join (repeat dir-depth \"../\"))]\n         ;; TODO: support absolute paths\n         (fs/create-dirs dir)\n         (when-not (fs/exists? file-path)\n           (Files/write file-path value (into-array [StandardOpenOption/CREATE])))\n         (assoc result :nextjournal/value (str relative-root \"_data/\" (fs/file-name file-path))))\n       result)))\n\n#_(nextjournal.clerk.builder/build-static-app! {:paths [\"image.clj\" \"notebooks/image.clj\" \"notebooks/viewers/image.clj\"] :bundle? false :browse? false})\n#_(nextjournal.clerk.builder/build-static-app! {:paths [\"image.clj\" \"notebooks/image.clj\" \"notebooks/viewers/image.clj\"] :browse? false})\n\n#?(:clj\n   (defn process-blobs [{:as doc+blob-opts :keys [blob-mode blob-id]} presented-result]\n     (w/postwalk #(if (get % :nextjournal/content-type)\n                    (case blob-mode\n                      :lazy-load (assoc % :nextjournal/value {:blob-id blob-id :path (:path %)})\n                      :inline (base64-encode-value %)\n                      :file (maybe-store-result-as-file doc+blob-opts %))\n                    %)\n                 presented-result)))\n\n(defn get-default-viewers []\n  (:default @!viewers default-viewers))\n\n(defn get-viewers\n  ([scope] (get-viewers scope nil))\n  ([scope value]\n   (or (when value (->viewers value))\n       (when scope (@!viewers scope))\n       (get-default-viewers))))\n\n#_(get-viewers nil nil)\n\n#?(:clj\n   (defn transform-result [{cell :nextjournal/value doc :nextjournal/opts}]\n     (let [{:keys [inline-results? bundle?]} doc\n           {:as result :nextjournal/keys [value blob-id viewers]} (:result cell)\n           blob-mode (cond\n                       (and (not inline-results?) blob-id) :lazy-load\n                       bundle? :inline ;; TODO: provide a separte setting for this\n                       :else :file)\n           blob-opts (assoc doc :blob-mode blob-mode :blob-id blob-id)\n           presented-result (process-blobs blob-opts (present (ensure-wrapped-with-viewers (or viewers (get-viewers *ns*)) value)))\n           opts-from-form-meta (select-keys result [:nextjournal/width :nextjournal/opts])]\n       (merge {:nextjournal/viewer :clerk/result\n               :nextjournal/value (cond-> (try {:nextjournal/edn (->edn (merge presented-result opts-from-form-meta))}\n                                               (catch Throwable _e\n                                                 {:nextjournal/string (pr-str value)}))\n                                    (-> presented-result ->viewer :name)\n                                    (assoc :nextjournal/viewer (select-keys (->viewer presented-result) [:name]))\n\n                                    (= blob-mode :lazy-load)\n                                    (assoc :nextjournal/fetch-opts {:blob-id blob-id}\n                                           :nextjournal/hash (analyzer/->hash-str [blob-id presented-result opts-from-form-meta])))}\n              (dissoc presented-result :nextjournal/value :nextjournal/viewer :nextjournal/viewers)\n              ;; TODO: consider dropping this. Still needed by notebook-viewer fn to read :nextjournal/width option on result blocks\n              opts-from-form-meta))))\n\n(def hide-result-viewer\n  {:name :hide-result :transform-fn (fn [_] nil)})\n\n(defn ->display [{:as code-cell :keys [result visibility]}]\n  (let [{:keys [code result]} visibility]\n    {:result? (not= :hide result)\n     :fold? (= code :fold)\n     :code? (not= :hide code)}))\n\n#_(->display {:result {:nextjournal.clerk/visibility {:code :show :result :show}}})\n#_(->display {:result {:nextjournal.clerk/visibility {:code :fold :result :show}}})\n#_(->display {:result {:nextjournal.clerk/visibility {:code :fold :result :hide}}})\n\n(defn with-block-viewer [doc {:as cell :keys [type]}]\n  (case type\n    :markdown [(with-viewer :markdown (:doc cell))]\n    :code (let [cell (update cell :result apply-viewer-unwrapping-var-from-def)\n                {:as display-opts :keys [code? result?]} (->display cell)]\n            ;; TODO: use vars instead of names\n            (cond-> []\n              code?\n              (conj (with-viewer :clerk/code-block {:nextjournal.clerk/opts (select-keys cell [:loc])}\n                      ;; TODO: display analysis could be merged into cell earlier\n                      (-> cell (merge display-opts) (dissoc :result))))\n              result?\n              (conj (with-viewer :clerk/result-block {:nextjournal/opts doc}\n                      cell))))))\n\n(defn update-viewers [viewers select-fn->update-fn]\n  (reduce (fn [viewers [pred update-fn]]\n            (mapv (fn [viewer]\n                    (cond-> viewer\n                      (pred viewer) update-fn)) viewers))\n          viewers\n          select-fn->update-fn))\n\n#_(update-viewers default-viewers {:page-size #(dissoc % :page-size)})\n\n(defn add-viewers\n  ([added-viewers] (add-viewers (get-default-viewers) added-viewers))\n  ([viewers added-viewers] (into (vec added-viewers) viewers)))\n\n(def table-missing-viewer {:pred #{:nextjournal/missing} :render-fn '(fn [x] (v/html [:<>]))})\n\n(def table-markup-viewer\n  {:name :table/markup\n   :render-fn '(fn [head+body opts]\n                 (v/html [:div.overflow-x-auto (into [:table.text-xs.sans-serif.text-gray-900.dark:text-white.not-prose] (v/inspect-children opts) head+body)]))})\n\n(def table-head-viewer\n  {:name :table/head\n   :render-fn '(fn [header-row {:as opts :keys [path number-col?]}]\n                 (v/html [:thead.border-b.border-gray-300.dark:border-slate-700\n                          (into [:tr]\n                                (map-indexed (fn [i {:as header-cell :nextjournal/keys [value]}]\n                                               (let [title (when (or (string? value) (keyword? value) (symbol? value))\n                                                             value)]\n                                                 [:th.relative.pl-6.pr-2.py-1.align-bottom.font-medium\n                                                  (cond-> {:class (when (number-col? i) \"text-right\")} title (assoc :title title))\n                                                  [:div.flex.items-center (v/inspect-presented opts header-cell)]]))) header-row)]))})\n\n(def table-body-viewer\n  {:name :table/body :page-size 20\n   :render-fn '(fn [rows opts] (v/html (into [:tbody] (map-indexed (fn [idx row] (v/inspect-presented (update opts :path conj idx) row))) rows)))})\n\n(def table-row-viewer\n  {:name :table/row\n   :render-fn '(fn [row {:as opts :keys [path number-col?]}]\n                 (v/html (into [:tr.hover:bg-gray-200.dark:hover:bg-slate-700\n                                {:class (if (even? (peek path)) \"bg-black/5 dark:bg-gray-800\" \"bg-white dark:bg-gray-900\")}]\n                               (map-indexed (fn [idx cell] [:td.pl-6.pr-2.py-1 (when (number-col? idx) {:class \"text-right\"}) (v/inspect-presented opts cell)])) row)))})\n\n(defn update-table-viewers [viewers]\n  (-> viewers\n      (update-viewers {(comp #{string?} :pred) #(assoc % :render-fn (quote v/string-viewer))\n                       (comp #{number?} :pred) #(assoc % :render-fn '(fn [x] (v/html [:span.tabular-nums (if (js/Number.isNaN x) \"NaN\" (str x))])))\n                       (comp #{:elision} :name) #(assoc % :render-fn '(fn [{:as fetch-opts :keys [total offset unbounded?]} {:keys [num-cols]}]\n                                                                        (v/html\n                                                                         [v/consume-view-context :fetch-fn (fn [fetch-fn]\n                                                                                                             [:tr.border-t.dark:border-slate-700\n                                                                                                              [:td.text-center.py-1\n                                                                                                               {:col-span num-cols\n                                                                                                                :class (if (fn? fetch-fn)\n                                                                                                                         \"bg-indigo-50 hover:bg-indigo-100 dark:bg-gray-800 dark:hover:bg-slate-700 cursor-pointer\"\n                                                                                                                         \"text-gray-400 text-slate-500\")\n                                                                                                                :on-click (fn [_] (when (fn? fetch-fn)\n                                                                                                                                    (fetch-fn fetch-opts)))}\n                                                                                                               (- total offset) (when unbounded? \"+\") (if (fn? fetch-fn) \" more\u2026\" \" more elided\")]])])))})\n      (add-viewers [table-missing-viewer\n                    table-markup-viewer\n                    table-head-viewer\n                    table-body-viewer\n                    table-row-viewer])))\n\n#?(:clj (def utc-date-format ;; from `clojure.instant/thread-local-utc-date-format`\n          (doto (java.text.SimpleDateFormat. \"yyyy-MM-dd'T'HH:mm:ss.SSS-00:00\")\n            (.setTimeZone (java.util.TimeZone/getTimeZone \"GMT\")))))\n\n#?(:clj\n   (defn datafy-scope [scope]\n     (cond\n       (instance? clojure.lang.Namespace scope) {:namespace (-> scope str keyword)}\n       (keyword? scope) scope\n       :else (throw (ex-info (str \"Unsupported scope \" scope) {:scope scope})))))\n\n#_(datafy-scope *ns*)\n#_(datafy-scope #'datafy-scope)\n\n(defn update-val [f & args]\n  (fn [wrapped-value] (apply update wrapped-value :nextjournal/value f args)))\n\n#_((update-val + 1) {:nextjournal/value 41})\n\n(def markdown-viewers\n  [{:name :nextjournal.markdown/doc :transform-fn (into-markup [:div.viewer-markdown])}\n\n   ;; blocks\n   {:name :nextjournal.markdown/heading\n    :transform-fn (into-markup\n                   (fn [{:as node :keys [heading-level]}]\n                     [(str \"h\" heading-level) {:id (uri.normalize/normalize-fragment (md.transform/->text node))}]))}\n   {:name :nextjournal.markdown/image :transform-fn #(with-viewer :html [:img.inline (-> % ->value :attrs)])}\n   {:name :nextjournal.markdown/blockquote :transform-fn (into-markup [:blockquote])}\n   {:name :nextjournal.markdown/paragraph :transform-fn (into-markup [:p])}\n   {:name :nextjournal.markdown/plain :transform-fn (into-markup [:<>])}\n   {:name :nextjournal.markdown/ruler :transform-fn (into-markup [:hr])}\n   {:name :nextjournal.markdown/code\n    :transform-fn (fn [wrapped-value] (with-viewer :html\n                                        [:div.viewer-code (with-viewer :code\n                                                            (md.transform/->text (->value wrapped-value)))]))}\n\n   ;; marks\n   {:name :nextjournal.markdown/em :transform-fn (into-markup [:em])}\n   {:name :nextjournal.markdown/strong :transform-fn (into-markup [:strong])}\n   {:name :nextjournal.markdown/monospace :transform-fn (into-markup [:code])}\n   {:name :nextjournal.markdown/strikethrough :transform-fn (into-markup [:s])}\n   {:name :nextjournal.markdown/link :transform-fn (into-markup #(vector :a (:attrs %)))}\n   {:name :nextjournal.markdown/internal-link :transform-fn (into-markup #(vector :a {:href (str \"#\" (:text %))}))}\n   {:name :nextjournal.markdown/hashtag :transform-fn (into-markup #(vector :a {:href (str \"#\" (:text %))}))}\n\n   ;; inlines\n   {:name :nextjournal.markdown/text :transform-fn (into-markup [:span])}\n   {:name :nextjournal.markdown/softbreak :transform-fn (fn [_] (with-viewer :html [:span \" \"]))}\n   #?(:clj {:name :nextjournal.markdown/inline :transform-fn (comp eval read-string md.transform/->text)})\n\n   ;; formulas\n   {:name :nextjournal.markdown/formula :transform-fn (comp :text ->value) :render-fn '(fn [tex] (v/katex-viewer tex {:inline? true}))}\n   {:name :nextjournal.markdown/block-formula :transform-fn (comp :text ->value) :render-fn 'v/katex-viewer}\n\n   ;; lists\n   {:name :nextjournal.markdown/bullet-list :transform-fn (into-markup [:ul])}\n   {:name :nextjournal.markdown/numbered-list :transform-fn (into-markup [:ol])}\n   {:name :nextjournal.markdown/todo-list :transform-fn (into-markup [:ul.contains-task-list])}\n   {:name :nextjournal.markdown/list-item :transform-fn (into-markup [:li])}\n   {:name :nextjournal.markdown/todo-item\n    :transform-fn (into-markup (fn [{:keys [attrs]}] [:li [:input {:type \"checkbox\" :default-checked (:checked attrs)}]]))}\n\n   ;; tables\n   {:name :nextjournal.markdown/table :transform-fn (into-markup [:table])}\n   {:name :nextjournal.markdown/table-head :transform-fn (into-markup [:thead])}\n   {:name :nextjournal.markdown/table-body :transform-fn (into-markup [:tbody])}\n   {:name :nextjournal.markdown/table-row :transform-fn (into-markup [:tr])}\n   {:name :nextjournal.markdown/table-header\n    :transform-fn (into-markup #(vector :th {:style (md.transform/table-alignment (:attrs %))}))}\n   {:name :nextjournal.markdown/table-data\n    :transform-fn (into-markup #(vector :td {:style (md.transform/table-alignment (:attrs %))}))}\n\n   ;; ToC via [[TOC]] placeholder ignored\n   {:name :nextjournal.markdown/toc :transform-fn (into-markup [:div.toc])}\n\n   ;; sidenotes\n   {:name :nextjournal.markdown/sidenote\n    :transform-fn (into-markup (fn [{:keys [attrs]}] [:span.sidenote [:sup {:style {:margin-right \"3px\"}} (-> attrs :ref inc)]]))}\n   {:name :nextjournal.markdown/sidenote-ref\n    :transform-fn (into-markup [:sup.sidenote-ref])}])\n\n(def char-viewer\n  {:pred char? :render-fn '(fn [c] (v/html [:span.cmt-string.inspected-value \"\\\\\" c]))})\n\n(def string-viewer\n  {:pred string? :render-fn (quote v/quoted-string-viewer) :page-size 80})\n\n(def number-viewer\n  {:pred number? :render-fn (quote v/number-viewer)})\n\n(def number-hex-viewer\n  {:name :number-hex :render-fn '(fn [num] (v/number-viewer (str \"0x\" (.toString (js/Number. num) 16))))})\n\n(def symbol-viewer\n  {:pred symbol? :render-fn '(fn [x] (v/html [:span.cmt-keyword.inspected-value (str x)]))})\n\n(def keyword-viewer\n  {:pred keyword? :render-fn '(fn [x] (v/html [:span.cmt-atom.inspected-value (str x)]))})\n\n(def nil-viewer\n  {:pred nil? :render-fn '(fn [_] (v/html [:span.cmt-default.inspected-value \"nil\"]))})\n\n(def boolean-viewer\n  {:pred boolean? :render-fn '(fn [x] (v/html [:span.cmt-bool.inspected-value (str x)]))})\n\n(def map-entry-viewer\n  {:pred map-entry? :name :map-entry :render-fn '(fn [xs opts] (v/html (into [:<>] (comp (v/inspect-children opts) (interpose \" \")) xs))) :page-size 2})\n\n(def var-from-def-viewer\n  {:pred var-from-def? :transform-fn (update-val (comp deref :nextjournal.clerk/var-from-def))})\n\n(def read+inspect-viewer\n  {:name :read+inspect :render-fn '(fn [x] (try (v/html [v/inspect (v/read-string x)])\n                                                (catch js/Error _e\n                                                  (v/unreadable-edn-viewer x))))})\n\n(def vector-viewer\n  {:pred vector? :render-fn 'v/coll-viewer :opening-paren \"[\" :closing-paren \"]\" :page-size 20})\n\n(def set-viewer\n  {:pred set? :render-fn 'v/coll-viewer :opening-paren \"#{\" :closing-paren \"}\" :page-size 20})\n\n(def sequential-viewer\n  {:pred sequential? :render-fn 'v/coll-viewer :opening-paren \"(\" :closing-paren \")\" :page-size 20})\n\n(def map-viewer\n  {:pred map? :name :map :render-fn 'v/map-viewer :opening-paren \"{\" :closing-paren \"}\" :page-size 10})\n\n#?(:cljs (defn var->symbol [v] (if (instance? sci.lang.Var v) (sci.impl.vars/toSymbol v) (symbol v))))\n\n(def var-viewer\n  {:pred (some-fn var? #?(:cljs #(instance? sci.lang.Var %)))\n   :transform-fn (comp #?(:cljs var->symbol :clj symbol) ->value)\n   :render-fn '(fn [x] (v/html [:span.inspected-value [:span.cmt-meta \"#'\" (str x)]]))})\n\n(def throwable-viewer\n  {:pred (fn [e] (instance? #?(:clj Throwable :cljs js/Error) e))\n   :name :error :render-fn 'v/throwable-viewer :transform-fn (comp mark-presented (update-val (comp demunge-ex-data datafy/datafy)))})\n\n(def buffered-image-viewer #?(:clj {:pred #(instance? BufferedImage %)\n                                    :transform-fn (fn [{image :nextjournal/value}]\n                                                    (let [w (.getWidth image)\n                                                          h (.getHeight image)\n                                                          r (float (/ w h))]\n                                                      (-> {:nextjournal/value (.. (PngEncoder.)\n                                                                                  (withBufferedImage image)\n                                                                                  (withCompressionLevel 1)\n                                                                                  (toBytes))\n                                                           :nextjournal/content-type \"image/png\"\n                                                           :nextjournal/width (if (and (< 2 r) (< 900 w)) :full :wide)}\n                                                          mark-presented)))\n                                    :render-fn '(fn [blob] (v/html [:figure.flex.flex-col.items-center.not-prose [:img {:src (v/url-for blob)}]]))}))\n\n(def ideref-viewer\n  {:pred #(instance? IDeref %)\n   :transform-fn (update-val (fn [ideref]\n                               (with-viewer :tagged-value\n                                 {:tag \"object\"\n                                  :value (vector (symbol (pr-str (type ideref)))\n                                                 #?(:clj (with-viewer :number-hex (System/identityHashCode ideref)))\n                                                 (if-let [deref-as-map (resolve 'clojure.core/deref-as-map)]\n                                                   (deref-as-map ideref)\n                                                   ideref))})))})\n\n(def regex-viewer\n  {:pred #?(:clj (partial instance? java.util.regex.Pattern) :cljs regexp?)\n   :transform-fn (fn [wrapped-value] (with-viewer :tagged-value {:tag \"\" :value (let [regex (->value wrapped-value)]\n                                                                                  #?(:clj (.pattern regex) :cljs (.-source regex)))}))})\n\n(def fallback-viewer\n  {:pred (constantly :true) :transform-fn (update-val #(with-viewer :read+inspect (pr-str %)))})\n\n(def elision-viewer\n  {:name :elision :render-fn (quote v/elision-viewer) :transform-fn mark-presented})\n\n(def katex-viewer\n  {:name :latex :render-fn (quote v/katex-viewer) :transform-fn mark-presented})\n\n(def mathjax-viewer\n  {:name :mathjax :render-fn (quote v/mathjax-viewer) :transform-fn mark-presented})\n\n(def html-viewer\n  {:name :html\n   :render-fn (quote v/html)\n   :transform-fn (comp mark-presented\n                       (update-val (partial w/postwalk (when-wrapped inspect-wrapped-value))))})\n\n(def plotly-viewer\n  {:name :plotly :render-fn (quote v/plotly-viewer) :transform-fn mark-presented})\n\n(def vega-lite-viewer\n  {:name :vega-lite :render-fn (quote v/vega-lite-viewer) :transform-fn mark-presented})\n\n(def markdown-viewer\n  {:name :markdown :transform-fn (fn [wrapped-value]\n                                   (-> wrapped-value\n                                       mark-presented\n                                       (update :nextjournal/value #(cond->> % (string? %) md/parse))\n                                       (update :nextjournal/viewers add-viewers markdown-viewers)\n                                       (with-md-viewer)))})\n\n(def code-viewer\n  {:name :code :render-fn (quote v/code-viewer) :transform-fn (comp mark-presented (update-val (fn [v] (if (string? v) v (str/trim (with-out-str (pprint/pprint v)))))))})\n\n(def code-folded-viewer\n  {:name :code-folded :render-fn (quote v/foldable-code-viewer) :transform-fn (comp mark-presented (update-val (fn [v] (if (string? v) v (with-out-str (pprint/pprint v))))))})\n\n(def reagent-viewer\n  {:name :reagent :render-fn (quote v/reagent-viewer) :transform-fn mark-presented})\n\n(def row-viewer\n  {:name :row :render-fn '(fn [items opts]\n                            (let [item-count (count items)]\n                              (v/html (into [:div {:class \"md:flex md:flex-row md:gap-4 not-prose\"\n                                                   :style opts}]\n                                            (map (fn [item]\n                                                   [:div.flex.items-center.justify-center.flex-auto\n                                                    (v/inspect-presented opts item)])) items))))})\n\n(def col-viewer\n  {:name :col :render-fn '(fn [items opts]\n                            (v/html (into [:div {:class \"md:flex md:flex-col md:gap-4 clerk-grid not-prose\"\n                                                 :style opts}]\n                                          (map (fn [item]\n                                                 [:div.flex.items-center.justify-center\n                                                  (v/inspect-presented opts item)])) items)))})\n\n(def table-viewer\n  {:name :table\n   :transform-fn (fn [wrapped-value]\n                   (if-let [{:keys [head rows]} (normalize-table-data (->value wrapped-value))]\n                     (-> wrapped-value\n                         (assoc :nextjournal/viewer :table/markup)\n                         (update :nextjournal/width #(or % :wide))\n                         (update :nextjournal/viewers update-table-viewers)\n                         (assoc :nextjournal/opts {:num-cols (count (or head (first rows)))\n                                                   :number-col? (into #{}\n                                                                      (comp (map-indexed vector)\n                                                                            (keep #(when (number? (second %)) (first %))))\n                                                                      (not-empty (first rows)))})\n                         (assoc :nextjournal/value (cond->> []\n                                                     (seq rows) (cons (with-viewer :table/body (map (partial with-viewer :table/row) rows)))\n                                                     head (cons (with-viewer (:name table-head-viewer table-head-viewer) head)))))\n                     (-> wrapped-value\n                         mark-presented\n                         (assoc :nextjournal/width :wide)\n                         (assoc :nextjournal/value [(present wrapped-value)])\n                         (assoc :nextjournal/viewer {:render-fn 'v/table-error}))))})\n\n(def table-error-viewer\n  {:name :table-error :render-fn (quote v/table-error) :page-size 1})\n\n(def code-block-viewer\n  {:name :clerk/code-block :transform-fn (fn [{:as wrapped-value :nextjournal/keys [value]}]\n                                           (-> wrapped-value\n                                               (assoc :nextjournal/viewer (if (:fold? value) :code-folded :code))\n                                               (update :nextjournal/value :text)))})\n\n(def tagged-value-viewer\n  {:name :tagged-value\n   :render-fn '(fn [{:keys [tag value space?]} opts]\n                 (v/html (v/tagged-value {:space? (:nextjournal/value space?)}\n                                         (str \"#\" (:nextjournal/value tag))\n                                         [v/inspect-presented value])))\n   :transform-fn mark-preserve-keys})\n\n\n#?(:cljs\n   (def js-object-viewer\n     {:name :js-array\n      :pred goog/isObject\n      :page-size 20\n      :opening-paren \"{\" :closing-paren \"}\"\n      :render-fn '(fn [v opts] (v/html (v/tagged-value {:space? true} \"#js\" (v/map-view v opts))))\n      :transform-fn (update-val (fn [^js o]\n                                  (into {}\n                                        (comp (remove (fn [k] (identical? \"function\" (goog/typeOf (j/get o k)))))\n                                              (map (fn [k]\n                                                     [(symbol k)\n                                                      (try (let [v (j/get o k)]\n                                                             (.-constructor v) ;; test for SecurityError\n                                                             ;; https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\n                                                             v)\n                                                           (catch js/Error _ 'forbidden))]))) (js/Object.keys o))))}))\n\n#?(:cljs\n   (def js-array-viewer\n     {:name :js-array\n      :pred js-iterable?\n      :transform-fn (update-val seq)\n      :render-fn '(fn [v opts] (v/html (v/tagged-value {:space? true} \"#js\" (v/coll-view v opts))))\n      :opening-paren \"[\" :closing-paren \"]\"\n      :page-size 20}))\n\n(def result-block-viewer\n  {:name :clerk/result-block\n   :transform-fn (comp mark-presented\n                       #?(:clj transform-result))})\n\n(def result-viewer\n  {:name :clerk/result :render-fn (quote v/result-viewer) :transform-fn mark-presented})\n\n(defn process-blocks [viewers {:as doc :keys [ns]}]\n  (-> doc\n      (update :blocks (partial into [] (comp (mapcat (partial with-block-viewer doc))\n                                             (map (comp process-wrapped-value\n                                                        apply-viewers*\n                                                        (partial ensure-wrapped-with-viewers viewers))))))\n      (select-keys [:blocks :toc :toc-visibility :title])\n      #?(:clj (cond-> ns (assoc :scope (datafy-scope ns))))))\n\n(def notebook-viewer\n  {:name :clerk/notebook\n   :render-fn (quote v/notebook-viewer)\n   :transform-fn (fn [{:as wrapped-value :nextjournal/keys [viewers]}]\n                   (-> wrapped-value\n                       (update :nextjournal/value (partial process-blocks viewers))\n                       mark-presented))})\n\n(def default-viewers\n  ;; maybe make this a sorted-map\n  [char-viewer\n   string-viewer\n   number-viewer\n   number-hex-viewer\n   symbol-viewer\n   keyword-viewer\n   nil-viewer\n   boolean-viewer\n   map-entry-viewer\n   var-from-def-viewer\n   read+inspect-viewer\n   vector-viewer\n   set-viewer\n   sequential-viewer\n   map-viewer\n   var-viewer\n   throwable-viewer\n   buffered-image-viewer\n   ideref-viewer\n   regex-viewer\n   #?(:cljs js-array-viewer)\n   #?(:cljs js-object-viewer)\n   fallback-viewer\n   elision-viewer\n   katex-viewer\n   mathjax-viewer\n   html-viewer\n   plotly-viewer\n   vega-lite-viewer\n   markdown-viewer\n   code-viewer\n   code-folded-viewer\n   reagent-viewer\n   row-viewer\n   col-viewer\n   table-viewer\n   table-error-viewer\n   code-block-viewer\n   result-block-viewer\n   tagged-value-viewer\n   result-viewer\n   notebook-viewer\n   hide-result-viewer])\n\n(defonce\n  ^{:doc \"atom containing a map of and per-namespace viewers or `:defaults` overridden viewers.\"}\n  !viewers\n  (#?(:clj atom :cljs ratom/atom) {}))\n\n#_(reset! !viewers {})\n\n;; heavily inspired by code from Thomas Heller in shadow-cljs, see\n;; https://github.com/thheller/shadow-cljs/blob/1708acb21bcdae244b50293d17633ce35a78a467/src/main/shadow/remote/runtime/obj_support.cljc#L118-L144\n\n(defn rank-val [val]\n  (reduce-kv (fn [res idx pred]\n               (if (and (ifn? pred) (pred val)) (reduced idx) res))\n             -1\n             (into [] (map :pred) default-viewers)))\n\n(defn resilient-compare [a b]\n  (try\n    (compare a b)\n    (catch #?(:clj Exception :cljs js/Error) _e\n      (compare (rank-val a) (rank-val b)))))\n\n(defn ensure-sorted [xs]\n  (cond\n    (sorted? xs) xs\n    (map? xs) (sort-by first resilient-compare xs)\n    (set? xs) (sort resilient-compare xs)\n    :else xs))\n\n\n(defn find-viewer [viewers select-fn]\n  (first (filter select-fn viewers)))\n\n#_(find-viewer default-viewers (comp #{string?} :pred))\n#_(find-viewer default-viewers (comp #{:elision} :name))\n\n(defn find-named-viewer [viewers viewer-name]\n  (find-viewer viewers (comp #{viewer-name} :name)))\n\n#_(find-named-viewer default-viewers :elision)\n\n(defn viewer-for [viewers x]\n  (or (when-let [selected-viewer (->viewer x)]\n        (if (keyword? selected-viewer)\n          (or (find-named-viewer viewers selected-viewer)\n              (throw (ex-info (str \"cannot find viewer named \" selected-viewer)\n                              {:selected-viewer selected-viewer :viewers viewers})))\n          selected-viewer))\n      (find-viewer viewers (let [v (->value x)]\n                             (fn [{:keys [pred]}]\n                               (and (ifn? pred) (pred v)))))\n      (throw (ex-info (str \"cannot find matching viewer for value\")\n                      {:value (->value x) :viewers viewers :x x}))))\n\n#_(viewer-for default-viewers [1 2 3])\n#_(viewer-for default-viewers {:nextjournal/value [1 2 3]})\n#_(viewer-for default-viewers 42)\n#_(viewer-for default-viewers (with-viewer :html [:h1 \"Hello Hiccup\"]))\n#_(viewer-for default-viewers (with-viewer {:transform-fn identity} [:h1 \"Hello Hiccup\"]))\n\n(defn ensure-wrapped-with-viewers\n  ([x] (ensure-wrapped-with-viewers (get-viewers *ns*) x))\n  ([viewers x]\n   (-> x\n       ensure-wrapped\n       (update :nextjournal/viewers (fn [x-viewers] (or x-viewers viewers))))))\n\n#_(ensure-wrapped-with-viewers 42)\n#_(ensure-wrapped-with-viewers {:nextjournal/value 42 :nextjournal/viewers [:boo]})\n\n(defn ->opts [wrapped-value]\n  (select-keys wrapped-value [:nextjournal/width :nextjournal/opts :!budget :budget :path :current-path :offset]))\n\n(defn apply-viewers* [wrapped-value]\n  (when (empty? (->viewers wrapped-value))\n    (throw (ex-info \"cannot apply empty viewers\" {:wrapped-value wrapped-value})))\n  (let [viewers (->viewers wrapped-value)\n        {:as viewer :keys [render-fn transform-fn]} (viewer-for viewers wrapped-value)\n        transformed-value (ensure-wrapped-with-viewers viewers\n                                                       (cond-> (dissoc wrapped-value :nextjournal/viewer)\n                                                         transform-fn transform-fn))\n        wrapped-value' (cond-> transformed-value\n                         (-> transformed-value ->value wrapped-value?)\n                         (merge (->value transformed-value)))]\n    (if (and transform-fn (not render-fn))\n      (recur wrapped-value')\n      (-> wrapped-value'\n          (assoc :nextjournal/viewer viewer)\n          (merge (->opts wrapped-value))))))\n\n(defn apply-viewers [x]\n  (apply-viewers* (ensure-wrapped-with-viewers x)))\n\n#_(apply-viewers 42)\n#_(apply-viewers {:one :two})\n#_(apply-viewers {:one :two})\n#_(apply-viewers [1 2 3])\n#_(apply-viewers (range 3))\n#_(apply-viewers (clojure.java.io/file \"notebooks\"))\n#_(apply-viewers (md \"# Hello\"))\n#_(apply-viewers (html [:h1 \"hi\"]))\n#_(apply-viewers (with-viewer :elision {:remaining 10 :count 30 :offset 19}))\n#_(apply-viewers (with-viewer (->Form '(fn [name] (html [:<> \"Hello \" name]))) \"James\"))\n#_(apply-viewers (with-viewers [{:pred (constantly true) :render-fn '(fn [x] [:h1 \"hi\"])}] 42))\n\n(defn count-viewers\n  \"Helper function to walk a given `x` and replace the viewers with their counts. Useful for debugging.\"\n  [x]\n  (w/postwalk #(if (wrapped-value? %)\n                 (cond-> (dissoc % :!budget)\n                   (:nextjournal/viewers %)\n                   (-> #_%\n                       (update :nextjournal/viewers count)\n                       (set/rename-keys {:nextjournal/viewers :nextjournal/viewers-count})))\n                 %) x))\n\n(defn bounded-count-opts [n xs]\n  (when-not (number? n)\n    (throw (ex-info \"n must be a number?\" {:n n :xs xs})))\n  (let [limit (+ n #?(:clj config/*bounded-count-limit* :cljs 10000))\n        total (try (bounded-count limit xs)\n                   (catch #?(:clj Exception :cljs js/Error) _\n                     nil))]\n    (cond-> {}\n      total (assoc :total total)\n      (or (not total) (= total limit)) (assoc :unbounded? true))))\n\n#_(bounded-count-opts 20 (range))\n#_(bounded-count-opts 20 (range 3234567))\n\n(defn drop+take-xf\n  \"Takes a map with optional `:n` and `:offset` and returns a transducer that drops `:offset` and takes `:n`.\"\n  [{:keys [n offset]\n    :or {offset 0}}]\n  (cond-> (drop offset)\n    (int? n)\n    (comp (take n))))\n\n#_(sequence (drop+take-xf {:n 10}) (range 100))\n#_(sequence (drop+take-xf {:n 10 :offset 10}) (range 100))\n#_(sequence (drop+take-xf {}) (range 9))\n\n\n(declare assign-closing-parens)\n\n(defn process-render-fn [{:as viewer :keys [render-fn]}]\n  (cond-> viewer\n    (and render-fn (not (viewer-fn? render-fn)))\n    (update :render-fn ->viewer-fn)))\n\n(defn process-viewer [viewer]\n  (if-not (map? viewer)\n    viewer\n    (-> viewer\n        (dissoc :pred :transform-fn :update-viewers-fn)\n        process-render-fn)))\n\n#_(process-viewer {:render-fn '(v/html [:h1]) :transform-fn mark-presented})\n\n(defn process-wrapped-value [wrapped-value]\n  (-> wrapped-value\n      (select-keys [:nextjournal/viewer :nextjournal/value :nextjournal/width :nextjournal/content-type :nextjournal/opts :path :offset :n])\n      (update :nextjournal/viewer process-viewer)))\n\n#_(process-wrapped-value (apply-viewers 42))\n\n(defn make-elision [viewers fetch-opts]\n  (->> (with-viewer :elision fetch-opts)\n       (ensure-wrapped-with-viewers viewers)\n       apply-viewers\n       process-wrapped-value))\n\n#_(make-elision default-viewers {:n 20})\n\n(defn find-elision [desc]\n  (->value (first (filter (comp #{:elision} :name :nextjournal/viewer)\n                          (tree-seq (some-fn map? vector?) #(cond-> % (map? %) vals) desc)))))\n\n(defn ->fetch-opts [wrapped-value]\n  (merge {:n (-> wrapped-value ->viewer :page-size)}\n         (select-keys wrapped-value [:path :offset])))\n\n(defn get-elision [wrapped-value]\n  (let [{:as fetch-opts :keys [path offset n]} (->fetch-opts wrapped-value)]\n    (merge fetch-opts (bounded-count-opts n (->value wrapped-value)))))\n\n#_(get-elision (present (range)))\n#_(get-elision (present \"abc\"))\n#_(get-elision (present (str/join (repeat 1000 \"abc\"))))\n\n(defn get-fetch-opts-n [wrapped-value]\n  (-> wrapped-value ->fetch-opts :n))\n\n(defn inherit-opts [{:as wrapped-value :nextjournal/keys [viewers]} value path-segment]\n  (-> (ensure-wrapped-with-viewers viewers value)\n      (merge (select-keys (->opts wrapped-value) [:!budget :budget :path :current-path]))\n      (update :path (fnil conj []) path-segment)\n      (update :current-path (fnil conj []) path-segment)))\n\n(defn present+paginate-children [{:as wrapped-value :nextjournal/keys [viewers preserve-keys?] :keys [!budget budget]}]\n  (let [{:as fetch-opts :keys [path offset n]} (->fetch-opts wrapped-value)\n        xs (->value wrapped-value)\n        paginate? (and (number? n) (not preserve-keys?))\n        fetch-opts' (cond-> fetch-opts\n                      (and paginate? !budget (not (map-entry? xs)))\n                      (update :n min @!budget))\n        children (if preserve-keys?\n                   (into {} (map (fn [[k v]] [k (present* (inherit-opts wrapped-value v k))])) xs)\n                   (into []\n                         (comp (if paginate? (drop+take-xf fetch-opts') identity)\n                               (map-indexed (fn [i x] (present* (inherit-opts wrapped-value x (+ i (or offset 0))))))\n                               (remove nil?))\n                         (ensure-sorted xs)))\n        {:as elision :keys [total unbounded?]} (and paginate? (get-elision wrapped-value))\n        new-offset (when paginate? (or (some-> children peek :path peek inc) 0))]\n    (cond-> children\n      (and paginate? (or unbounded? (< new-offset total)))\n      (conj (let [fetch-opts (assoc elision :offset new-offset)]\n              (make-elision viewers fetch-opts))))))\n\n(defn present+paginate-string [{:as wrapped-value :nextjournal/keys [viewers viewer value]}]\n  (let [{:as elision :keys [n total path offset]} (and (:page-size viewer)\n                                                       (get-elision wrapped-value))]\n    (if (and n (< n total))\n      (let [new-offset (min (+ (or offset 0) n) total)]\n        (cond-> [(subs value (or offset 0) new-offset)]\n          (pos? (- total new-offset)) (conj (let [fetch-opts (-> elision\n                                                                 (assoc :offset new-offset :replace-path (conj path new-offset)))]\n                                              (make-elision viewers fetch-opts)))\n          true ensure-wrapped))\n      value)))\n\n\n(defn ^:private present* [{:as wrapped-value\n                           :keys [path current-path !budget]\n                           :nextjournal/keys [viewers]}]\n  (when (empty? viewers)\n    (throw (ex-info \"cannot present* with empty viewers\" {:wrapped-value wrapped-value})))\n  (let [{:as wrapped-value :nextjournal/keys [viewers presented?]} (apply-viewers* wrapped-value)\n        descend? (< (count current-path)\n                    (count path))\n        xs (->value wrapped-value)]\n    #_(prn :xs xs :type (type xs) :path path :current-path current-path :descend? descend?)\n    (when (and !budget (not descend?) (not presented?))\n      (swap! !budget #(max (dec %) 0)))\n    (-> (merge (->opts wrapped-value)\n               (with-viewer (->viewer wrapped-value)\n                 (cond presented?\n                       wrapped-value\n\n                       descend? ;; TODO: can this be unified, simplified, or even dropped in favor of continuation?\n                       (let [idx (first (drop (count current-path) path))]\n                         (present* (-> (ensure-wrapped-with-viewers\n                                        viewers\n                                        (cond (and (map? xs) (keyword? idx)) (get xs idx)\n                                              (or (map? xs) (set? xs)) (nth (seq (ensure-sorted xs)) idx)\n                                              (associative? xs) (get xs idx)\n                                              (sequential? xs) (nth xs idx)))\n                                       (merge (->opts wrapped-value))\n                                       (update :current-path (fnil conj []) idx))))\n\n                       (string? xs)\n                       (present+paginate-string wrapped-value)\n\n                       (and xs (seqable? xs))\n                       (present+paginate-children wrapped-value)\n\n                       :else ;; leaf value\n                       xs)))\n        process-wrapped-value)))\n\n(defn assign-content-lengths [wrapped-value]\n  (w/postwalk\n   (fn [x]\n     (if-let [value (and (wrapped-value? x) (:nextjournal/value x))]\n       (let [{:nextjournal/keys [viewer]} x\n             {:keys [name opening-paren closing-paren]} viewer\n             elision-content-length 6]\n         (assoc x\n                :content-length\n                (cond\n                  (or (nil? value) (char? value) (string? value) (keyword? value) (symbol? value) (number? value))\n                  (count (pr-str value))\n                  (contains? #{:elision} name)\n                  elision-content-length\n                  (contains? #{:map-entry} name)\n                  (reduce + 1 (map #(:content-length % 0) value))\n                  (vector? value)\n                  (->> value\n                       (map #(:content-length % 0))\n                       (reduce + (+ (count opening-paren) (count closing-paren)))\n                       (+ (dec (count value))))\n                  :else 0)\n                :type name))\n       x))\n   wrapped-value))\n\n#_(defn compute-expanded-at [{:as state :keys [indents expanded-at prev-type]}\n                           {:nextjournal/keys [value]\n                            :keys [content-length path type]\n                            :or {content-length 0}}]\n  (let [max-length (- 80 (reduce + 0 indents))\n        expanded? (< max-length content-length)\n        state' (assoc state\n                      :expanded-at (assoc expanded-at path expanded?)\n                      #_(if expanded?\n                          (assoc expanded-at path true)\n                          expanded-at)\n                      :prev-type type\n                      :indents (conj\n                                (->> indents (take (count path)) vec)\n                                (cond\n                                  (contains? #{:map-entry} prev-type) (or content-length 0)\n                                  (vector? value) 2\n                                  :else 1)))]\n    (if (vector? value)\n      (reduce compute-expanded-at state' value)\n      state')))\n\n#_(defn assign-expanded-at [wrapped-value]\n  (cond-> wrapped-value\n    (:content-length wrapped-value)\n    (assoc :nextjournal/expanded-at\n           (:expanded-at (compute-expanded-at {:expanded-at {}} wrapped-value)))))\n\n(defn compute-expanded-at [{:as state :keys [expanded-at]}\n                           {:nextjournal/keys [value] :keys [path]}]\n  (let [state' (assoc state :expanded-at (assoc expanded-at path false))]\n    (if (vector? value)\n      (reduce compute-expanded-at state' value)\n      state')))\n\n(defn assign-expanded-at [wrapped-value]\n  (assoc wrapped-value :nextjournal/expanded-at (:expanded-at (compute-expanded-at {:expanded-at {}} wrapped-value))))\n\n(comment\n  (-> (compute-expanded-at\n       {:indents [] :expanded-at {}}\n       (present {:a-vector [1 2 3] :a-list '(123 234 345) :a-set #{1 2 3 4}}))\n      :expanded-at\n      keys\n      sort)\n  (= (count \"[1 2 [1 [2] 3] 4 5]\")\n     (:content-length (assign-content-lengths (present [1 2 [1 [2] 3] 4 5]))))\n  (= (count \"{:a-vector [1 2 3] :a-list (123 234 345) :a-set #{1 2 3 4}}\")\n     (:content-length (assign-content-lengths (present {:a-vector [1 2 3] :a-list '(123 234 345) :a-set #{1 2 3 4}}))))\n  ;; Check for elisions as well\n  (assign-content-lengths (present {:foo (vec (repeat 2 {:baz (range 30) :fooze (range 40)})) :bar (range 20)})))\n\n(defn present\n  \"Returns a subset of a given `value`.\"\n  ([x] (present x {}))\n  ([x opts]\n   (-> (ensure-wrapped-with-viewers x)\n       (merge {:!budget (atom (:budget opts 200))\n               :path (:path opts [])\n               :current-path (:current-path opts [])}\n              opts)\n       present*\n       assign-closing-parens\n       assign-expanded-at)))\n\n(comment\n  (present [\\a \\b])\n  (present [42])\n  (-> (present (range 100)) ->value peek)\n  (present {:hello [1 2 3]})\n  (present {:one [1 2 3] 1 2 3 4})\n  (present [1 2 [1 [2] 3] 4 5])\n  (present (clojure.java.io/file \"notebooks\"))\n  (present {:viewers [{:pred sequential? :render-fn pr-str}]} (range 100))\n  (present (map vector (range)))\n  (present (subs (slurp \"/usr/share/dict/words\") 0 1000))\n  (present (plotly {:data [{:z [[1 2 3] [3 2 1]] :type \"surface\"}]}))\n  (present [(with-viewer :html [:h1 \"hi\"])])\n  (present (with-viewer :html [:ul (for [x (range 3)] [:li x])]))\n  (present (range))\n  (present {1 [2]})\n  (present (with-viewer '(fn [name] (html [:<> \"Hello \" name])) \"James\"))\n  (present {:foo (vec (repeat 2 {:baz (range 30) :fooze (range 40)})) :bar (range 20)}))\n\n(defn desc->values\n  \"Takes a `description` and returns its value. Inverse of `present`. Mostly useful for debugging.\"\n  [desc]\n  (let [x (->value desc)\n        viewer-name (-> desc ->viewer :name)]\n    (cond (= viewer-name :elision) (with-meta '\u2026 x)\n          (coll? x) (into (case viewer-name\n                            ;; TODO: fix table viewer\n                            (:map :table) {}\n                            (or (empty x) []))\n                          (map desc->values)\n                          x)\n          :else x)))\n\n#_(desc->values (present [1 [2 {:a :b} 2] 3 (range 100)]))\n#_(desc->values (present (table (mapv vector (range 30)))))\n#_(desc->values (present (with-viewer :table (normalize-table-data (repeat 60 [\"Adelie\" \"Biscoe\" 50 30 200 5000 :female])))))\n\n(defn path-to-value [path]\n  (conj (interleave path (repeat :nextjournal/value)) :nextjournal/value))\n\n(defn merge-presentations [root more elision]\n  (update-in root\n             (path-to-value (:path elision))\n             (fn [value]\n               (let [{:keys [offset path]} (-> value peek :nextjournal/value)\n                     path-from-value (conj path offset)\n                     path-from-more (or (:replace-path elision) ;; string case, TODO find a better way to unify\n                                        (-> more :nextjournal/value first :path))]\n                 (when (not= path-from-value path-from-more)\n                   (throw (ex-info \"paths mismatch\" {:path-from-value path-from-value :path-from-more path-from-more :root root :more more :path-to-value (path-to-value (:path more)) :value value})))\n                 (into (pop value) (:nextjournal/value more))))))\n\n\n(defn assign-closing-parens\n  ([node] (assign-closing-parens '() node))\n  ([closing-parens node]\n   (let [value (->value node)\n         viewer (->viewer node)\n         closing (:closing-paren viewer)\n         non-leaf? (and (vector? value) (wrapped-value? (first value)))\n         defer-closing? (and non-leaf?\n                             (or (-> value last :nextjournal/viewer :closing-paren) ;; the last element can carry parens\n                                 (and (= :map-entry (-> value last :nextjournal/viewer :name)) ;; the last element is a map entry whose value can carry parens\n                                      (-> value last :nextjournal/value last :nextjournal/viewer :closing-paren))))]\n     (cond-> (cond\n               (not closing) node\n               defer-closing? (update node :nextjournal/viewer dissoc :closing-paren)\n               :else (update-in node [:nextjournal/viewer :closing-paren] cons closing-parens))\n       non-leaf? (update :nextjournal/value\n                         (fn [xs]\n                           (into []\n                                 (map-indexed (fn [i x]\n                                                (assign-closing-parens (if (and defer-closing? (= (dec (count xs)) i))\n                                                                         (cond->> closing-parens closing (cons closing))\n                                                                         '())\n                                                                       x)))\n                                 xs)))))))\n\n(defn reset-viewers!\n  ([viewers] (reset-viewers! *ns* viewers))\n  ([scope viewers]\n   (assert (or (#{:default} scope)\n               #?(:clj (instance? clojure.lang.Namespace scope))))\n   (swap! !viewers assoc scope viewers)))\n\n(defn add-viewers! [viewers]\n  (reset-viewers! *ns* (add-viewers (get-default-viewers) viewers))\n  viewers)\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; public convenience api\n(def html         (partial with-viewer html-viewer))\n(def md           (partial with-viewer markdown-viewer))\n(def plotly       (partial with-viewer plotly-viewer))\n(def vl           (partial with-viewer vega-lite-viewer))\n(def table        (partial with-viewer table-viewer))\n(def row          (partial with-viewer-extracting-opts row-viewer))\n(def col          (partial with-viewer-extracting-opts col-viewer))\n(def tex          (partial with-viewer katex-viewer))\n(def notebook     (partial with-viewer (:name notebook-viewer)))\n(def code         (partial with-viewer code-viewer))\n(defn doc-url [path]\n  (->viewer-eval (list 'v/doc-url path)))\n\n(defn hide-result\n  \"Deprecated, please put ^{:nextjournal.clerk/visibility {:result :hide}} metadata on the form instead.\"\n  {:deprecated \"0.10\"}\n  ([x] #?(:clj (hide-result {} x)) :cljs x)\n  ([_viewer-opts x]\n   #?(:clj (binding [*out* *err*]\n             (prn \"`hide-result` has been deprecated, please put `^{:nextjournal.clerk/visibility {:result :hide}}` metadata on the form instead.\")))\n   x))\n\n(def eval-cljs-result-viewer\n  {:transform-fn mark-presented\n   :render-fn '(fn [x]\n                 (v/html (v/inspect x)))})\n\n(defn eval-cljs-str [code-string]\n  ;; NOTE: this relies on implementation details on how SCI code is evaluated\n  ;; and will change in a future version of Clerk\n  (with-viewer eval-cljs-result-viewer\n    (-> (->viewer-eval (list 'binding '[*ns* *ns*]\n                             (list 'load-string code-string)))\n        (assoc :remount? true))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; examples\n(def example-viewer\n  {:transform-fn (fn [{:as wrapped-value :nextjournal/keys [viewers] :keys [path current-path]}]\n                   (-> wrapped-value\n                       mark-preserve-keys\n                       (assoc :nextjournal/viewer {:render-fn '(fn [{:keys [form val]} opts]\n                                                                 (v/html [:div.flex.flex-wrap\n                                                                          {:class \"py-[7px]\"}\n                                                                          [:div [:div.bg-slate-100.px-2.rounded\n                                                                                 (v/inspect-presented opts form)]]\n                                                                          [:div.flex.mt-1\n                                                                           [:div.mx-2.font-sans.text-xs.text-slate-500 {:class \"mt-[2px]\"} \"\u21d2\"]\n                                                                           (v/inspect-presented opts val)]]))})\n                       (update-in [:nextjournal/value :form] code)))})\n\n(def examples-viewer\n  {:transform-fn (update-val (fn [examples]\n                               (mapv (partial with-viewer example-viewer) examples)))\n   :render-fn '(fn [examples opts]\n                 (v/html (into [:div.border-l-2.border-slate-300.pl-4\n                                [:div.uppercase.tracking-wider.text-xs.font-sans.text-slate-500.mt-4.mb-2 \"Examples\"]]\n                               (v/inspect-children opts) examples)))})\n"]}