{
"version":3,
"file":"module$node_modules$markdown_it$lib$index.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$index\"] = function(global,require,module,exports) {\n// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  default: require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `\u201c\u201d\u2018\u2019`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'\u00ab\u00bb\u201e\u201c'` for Russian, `'\u201e\u201c\u201a\u2018'` for German, and\n *   `['\u00ab\\xA0', '\\xA0\u00bb', '\u2039\\xA0', '\\xA0\u203a']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n\n};"],
"names":["shadow$provide","global","require","module","exports","validateLink","url","str","trim","toLowerCase","BAD_PROTO_RE","test","GOOD_DATA_RE","normalizeLink","parsed","mdurl","parse","hostname","protocol","RECODE_HOSTNAME_FOR","indexOf","punycode","toASCII","er","encode","format","normalizeLinkText","toUnicode","decode","defaultChars","MarkdownIt","presetName","options","utils","isString","inline","ParserInline","block","ParserBlock","core","ParserCore","renderer","Renderer","linkify","LinkifyIt","helpers","assign","configure","set","config","default","zero","commonmark","prototype","MarkdownIt.prototype.set","MarkdownIt.prototype.configure","presets","self","Error","components","Object","keys","forEach","name","rules","ruler","enableOnly","rules2","ruler2","enable","MarkdownIt.prototype.enable","list","ignoreInvalid","result","Array","isArray","chain","concat","missed","filter","length","disable","MarkdownIt.prototype.disable","use","MarkdownIt.prototype.use","plugin","args","slice","call","arguments","apply","MarkdownIt.prototype.parse","src","env","state","State","process","tokens","render","MarkdownIt.prototype.render","parseInline","MarkdownIt.prototype.parseInline","inlineMode","renderInline","MarkdownIt.prototype.renderInline"]
}
