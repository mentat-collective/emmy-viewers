shadow$provide.module$node_modules$markdown_it$lib$parser_block=function(global,require,module,exports){function ParserBlock(){this.ruler=new Ruler;for(var i=0;i<_rules.length;i++)this.ruler.push(_rules[i][0],_rules[i][1],{alt:(_rules[i][2]||[]).slice()})}var Ruler=require("module$node_modules$markdown_it$lib$ruler"),_rules=[["table",require("module$node_modules$markdown_it$lib$rules_block$table"),["paragraph","reference"]],["code",require("module$node_modules$markdown_it$lib$rules_block$code")],
["fence",require("module$node_modules$markdown_it$lib$rules_block$fence"),["paragraph","reference","blockquote","list"]],["blockquote",require("module$node_modules$markdown_it$lib$rules_block$blockquote"),["paragraph","reference","blockquote","list"]],["hr",require("module$node_modules$markdown_it$lib$rules_block$hr"),["paragraph","reference","blockquote","list"]],["list",require("module$node_modules$markdown_it$lib$rules_block$list"),["paragraph","reference","blockquote"]],["reference",require("module$node_modules$markdown_it$lib$rules_block$reference")],
["html_block",require("module$node_modules$markdown_it$lib$rules_block$html_block"),["paragraph","reference","blockquote"]],["heading",require("module$node_modules$markdown_it$lib$rules_block$heading"),["paragraph","reference","blockquote"]],["lheading",require("module$node_modules$markdown_it$lib$rules_block$lheading")],["paragraph",require("module$node_modules$markdown_it$lib$rules_block$paragraph")]];ParserBlock.prototype.tokenize=function(state,startLine,endLine){for(var i,rules=this.ruler.getRules(""),
len=rules.length,line=startLine,hasEmptyLines=!1,maxNesting=state.md.options.maxNesting;line<endLine;){state.line=line=state.skipEmptyLines(line);if(line>=endLine)break;if(state.sCount[line]<state.blkIndent)break;if(state.level>=maxNesting){state.line=endLine;break}for(i=0;i<len&&!(startLine=rules[i](state,line,endLine,!1));i++);state.tight=!hasEmptyLines;state.isEmpty(state.line-1)&&(hasEmptyLines=!0);line=state.line;line<endLine&&state.isEmpty(line)&&(hasEmptyLines=!0,line++,state.line=line)}};
ParserBlock.prototype.parse=function(src,md,env,outTokens){src&&(src=new this.State(src,md,env,outTokens),this.tokenize(src,src.line,src.lineMax))};ParserBlock.prototype.State=require("module$node_modules$markdown_it$lib$rules_block$state_block");module.exports=ParserBlock}
//# sourceMappingURL=module$node_modules$markdown_it$lib$parser_block.js.map
