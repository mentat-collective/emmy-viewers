{"version":3,"sources":["sci/lang.cljc"],"mappings":"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AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA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","names":["sci.lang/class-name","s","temp__5751__auto__","i","clojure.string.last_index_of","cljs.core.subs","sci.lang/package-name","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sci.lang/Type","sci.lang/->Type","data","namespace","name","_","v","this","ns","nom","sci.lang/throw-root-binding","js/Error","unused__43702__auto__","self__","G__85747","args85715","cljs.core/aclone","sci.lang/Var","sci.lang/->Var","root","sym","meta","thread-bound","needs-ctx","_this","or__4253__auto__","vm__27614__auto__","sci.impl.unrestrict/*unrestricted*","cljs.core/not","the-var__27615__auto__","ns__27616__auto__","ns-name__27617__auto__","sci.impl.types/getName","name__27618__auto__","cljs.core.ex_info","sym-name","G__85726","cljs.core/name","cljs.core.symbol","G__85727","temp__5757__auto__","m","cljs.core/meta","sci.impl.vars/SciUnbound","b","sci.impl.vars/get-thread-binding","sci.impl.types/setVal","tbox","sci.impl.types/getVal","a","writer","opts","cljs.core/-pr-writer","fexpr__85749","cljs.core/deref","fexpr__85750","fexpr__85751","c","fexpr__85752","d","fexpr__85755","e","fexpr__85756","f","fexpr__85757","g","fexpr__85758","h","fexpr__85759","fexpr__85763","j","fexpr__85766","k","fexpr__85768","l","fexpr__85771","fexpr__85773","n","fexpr__85776","o","fexpr__85777","p","fexpr__85778","q","fexpr__85780","r","fexpr__85781","fexpr__85786","t","fexpr__85787","rest","cljs.core.apply","sci.lang/Namespace","sci.lang/->Namespace"],"sourcesContent":["(ns sci.lang\n  (:require [clojure.string :as str]\n            [sci.impl.types :as types]\n            [sci.impl.vars :as vars]\n            #?(:cljs [sci.impl.unrestrict :refer [*unrestricted*]]))\n  (:refer-clojure :exclude [Var ->Var var? Namespace ->Namespace]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; marker interface for vars, clj only for now\n#?(:clj (definterface ^{:doc \"Marker interface for SCI vars.\"} IVar))\n\n(defn- class-name [s]\n  (if-let [i (str/last-index-of s \".\")]\n    (subs s (inc i))\n    s))\n\n(defn- package-name [s]\n  (if-let [i (str/last-index-of s \".\")]\n    (subs s 0 i)\n    s))\n\n(deftype ^{:doc \"Representation of a SCI custom type, created e.g. with `(defrecord Foo [])`. The fields of this type are implementation detail and should not be accessed directly.\"}\n    Type [^:volatile-mutable data\n          ^:volatile-mutable namespace\n          ^:volatile-mutable name]\n  sci.impl.types/IBox\n  (getVal [_] data)\n  (setVal [_ v] (set! data v))\n  Object\n  (toString [_]\n    (str (:sci.impl/type-name data)))\n\n  ;; meta is only supported to get our implementation! keys out\n  #?@(:clj\n      [clojure.lang.IMeta\n       (meta [_] data)]\n      :cljs\n      [IMeta\n       (-meta [_] data)])\n\n  ;; we need to support Named for `derive`\n  #?@(:clj\n      [clojure.lang.Named\n       (getNamespace [this]\n                     (if (nil? namespace)\n                       (let [ns (package-name (str this))]\n                         (set! namespace ns)\n                         ns)\n                       namespace))\n       (getName [this]\n                (if (nil? name)\n                  (let [nom (class-name (str this))]\n                    (set! name nom)\n                    nom)\n                  name))]\n      :cljs\n      [INamed\n       (-namespace [this]\n                   (if (nil? namespace)\n                     (let [ns (package-name (str this))]\n                       (set! namespace ns)\n                       ns)\n                     namespace))\n       (-name [this]\n              (if (nil? name)\n                (let [nom (class-name (str this))]\n                  (set! name nom)\n                  nom)\n                name))]))\n\n#?(:clj (defmethod print-method Type [this w]\n          (.write ^java.io.Writer w (str this))))\n\n(defn- throw-root-binding [this]\n  (throw (new #?(:clj IllegalStateException :cljs js/Error)\n                  (str \"Can't change/establish root binding of \" this \" with set\"))))\n\n(deftype ^{:doc \"Representation of a SCI var, created e.g. with `(defn foo [])`\n    The fields of this type are implementation detail and should not be accessed\n    directly.\"}\n    Var [#?(:clj ^:volatile-mutable root\n            :cljs ^:mutable root)\n         sym\n         #?(:clj ^:volatile-mutable meta\n            :cljs ^:mutable meta)\n         #?(:clj ^:volatile-mutable thread-bound\n            :cljs ^:mutable thread-bound)\n         #?(:clj ^:volatile-mutable needs-ctx\n            :cljs ^:mutable needs-ctx)]\n  #?(:clj\n     ;; marker interface, clj only for now\n     sci.lang.IVar)\n  types/HasName\n  (getName [_this]\n    (or (:name meta) sym))\n  vars/IVar\n  (bindRoot [this v]\n    (vars/with-writeable-var this meta\n      (set! (.-root this) v)))\n  (getRawRoot [_this]\n    root)\n  (toSymbol [_this]\n    ;; if we have at least a name from metadata, then build the symbol from that\n    (if-let [sym-name (some-> (:name meta) name)]\n      (symbol (some-> (:ns meta) types/getName name) sym-name)\n      ;; otherwise, fall back to the symbol\n      sym))\n  (isMacro [_]\n    (or (:macro meta)\n        (when-some [m (clojure.core/meta root)]\n          (:sci/macro m))))\n  (setThreadBound [this v]\n    (set! (.-thread-bound this) v))\n  (unbind [this]\n    (vars/with-writeable-var this meta\n      (set! (.-root this) (sci.impl.vars.SciUnbound. this))))\n  (hasRoot [_this]\n    (not (instance? sci.impl.vars.SciUnbound root)))\n  vars/DynVar\n  (dynamic? [_this]\n    (:dynamic meta))\n  types/IBox\n  (setVal [this v]\n    (if-let [b (vars/get-thread-binding this)]\n      #?(:clj\n         (let [t (.-thread b)]\n           (if (not (identical? t (Thread/currentThread)))\n             (throw (new IllegalStateException\n                         (format \"Can't set!: %s from non-binding thread\" (vars/toSymbol this))))\n             (types/setVal b v)))\n         :cljs (types/setVal b v))\n      #?(:clj (throw-root-binding this)\n         :cljs (if *unrestricted*\n                 (set! (.-root this) v)\n                 (throw-root-binding this)))))\n  (getVal [_this] root)\n  #?(:clj clojure.lang.IDeref :cljs IDeref)\n  (#?(:clj deref\n      :cljs -deref) [this]\n    (if thread-bound\n      (if-let [tbox (vars/get-thread-binding this)]\n        (types/getVal tbox)\n        root)\n      root))\n  Object\n  (toString [this]\n    (str \"#'\" (vars/toSymbol this)))\n  #?(:cljs IPrintWithWriter)\n  #?(:cljs (-pr-writer [a writer opts]\n                       (-write writer \"#'\")\n                       (-pr-writer (vars/toSymbol a) writer opts)))\n  #?(:clj clojure.lang.IMeta :cljs IMeta)\n  #?(:clj (clojure.core/meta [_] meta) :cljs (-meta [_] meta))\n  ;; #?(:clj Comparable :cljs IEquiv)\n  ;; (-equiv [this other]\n  ;;   (if (instance? Var other)\n  ;;     (= (.-sym this) (.-sym other))\n  ;;     false))\n  ;; #?(:clj clojure.lang.IHashEq :cljs IHash)\n  ;; (-hash [_]\n  ;;   (hash-symbol sym))\n  #?(:clj clojure.lang.IReference)\n  #?(:clj (alterMeta [this f args]\n                     (vars/with-writeable-var this meta\n                       (locking (set! meta (apply f meta args))))))\n  #?(:clj (resetMeta [this m]\n                     (vars/with-writeable-var this meta\n                       (locking (set! meta m)))))\n  #?@(:clj [clojure.lang.IRef\n            (addWatch [_ _ _]\n                      (throw (java.lang.UnsupportedOperationException. \"Method add-watch not implemented for sci.lang.Var\")))\n            (removeWatch [_ _]\n                      (throw (java.lang.UnsupportedOperationException. \"Method remove-watch not implemented for sci.lang.Var\")))])\n  ;; #?(:cljs Fn) ;; In the real CLJS this is there... why?\n  #?(:clj clojure.lang.IFn :cljs IFn)\n  (#?(:clj invoke :cljs -invoke) [this]\n    (@this))\n  (#?(:clj invoke :cljs -invoke) [this a]\n    (@this a))\n  (#?(:clj invoke :cljs -invoke) [this a b]\n    (@this a b))\n  (#?(:clj invoke :cljs -invoke) [this a b c]\n    (@this a b c))\n  (#?(:clj invoke :cljs -invoke) [this a b c d]\n    (@this a b c d))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e]\n    (@this a b c d e))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f]\n    (@this a b c d e f))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g]\n    (@this a b c d e f g))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h]\n    (@this a b c d e f g h))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i]\n    (@this a b c d e f g h i))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j]\n    (@this a b c d e f g h i j))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k]\n    (@this a b c d e f g h i j k))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l]\n    (@this a b c d e f g h i j k l))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m]\n    (@this a b c d e f g h i j k l m))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n]\n    (@this a b c d e f g h i j k l m n))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o]\n    (@this a b c d e f g h i j k l m n o))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p]\n    (@this a b c d e f g h i j k l m n o p))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q]\n    (@this a b c d e f g h i j k l m n o p q))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r]\n    (@this a b c d e f g h i j k l m n o p q r))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s]\n    (@this a b c d e f g h i j k l m n o p q r s))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s t]\n    (@this a b c d e f g h i j k l m n o p q r s t))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s t rest]\n    (apply @this a b c d e f g h i j k l m n o p q r s t rest))\n  #?(:clj\n     (applyTo [this args]\n              (apply @this args)))\n  vars/CtxVar\n  (needs-ctx? [_] needs-ctx)\n  (needs-ctx! [_] (set! needs-ctx true)))\n\n#?(:clj\n   ;; Use public interface for print-method so it can be overriden in bb itself\n   (do (defmethod print-method sci.lang.IVar [o ^java.io.Writer w]\n         (.write w (str \"#'\" (vars/toSymbol ^sci.impl.vars.IVar o))))\n       (prefer-method print-method sci.lang.IVar clojure.lang.IDeref)))\n\n(deftype\n    ^{:doc\n      \"Representation of a SCI namespace, created e.g. with `(create-ns 'foo)`.\n      The fields of this type are implementation detail and should not be accessed\n      directly.\"}\n    Namespace [name #?(:clj ^:volatile-mutable meta\n                       :cljs ^:mutable meta)]\n  Object\n  (toString [_]\n    (str name))\n  types/HasName\n  (getName [_] name)\n  #?(:clj clojure.lang.IMeta :cljs IMeta)\n  #?(:clj (clojure.core/meta [_] meta) :cljs (-meta [_] meta))\n  #?(:clj clojure.lang.IReference)\n  #?(:clj (alterMeta [this f args]\n                     (vars/with-writeable-namespace this meta\n                       (locking (set! meta (apply f meta args))))))\n  #?(:clj (resetMeta [this m]\n                     (vars/with-writeable-namespace this meta\n                       (locking (set! meta m))))))\n"]}