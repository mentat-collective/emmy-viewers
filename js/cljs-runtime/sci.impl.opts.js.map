{"version":3,"sources":["sci/impl/opts.cljc"],"mappings":"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","names":["sci.impl.opts/init-env!","env","bindings","aliases","namespaces","classes","raw-classes","imports","load-fn","async-load-fn","ns-aliases","cljs.core.swap_BANG_","env-nss","cljs.core.merge_with","cljs.core/merge","or__4253__auto__","sci.impl.namespaces/namespaces","cljs.core.assoc","sci.impl.utils/user-ns","cljs.core.merge","cljs.core.get_in","cljs.core.update","cljs.core/assoc","sci.impl.utils.new_var","cljs.core/make-hierarchy","sci.impl.utils/clojure-core-ns","temp__5751__auto__","env-imports","cljs.core/not","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sci.impl.opts/process-permissions","seq92956","G__92957","cljs.core/first","cljs.core/next","self__4851__auto__","prev-perms","permissions","cljs.core/not-empty","cljs.core.into","cljs.core.comp","cljs.core/cat","cljs.core.map","sci.impl.utils/strip-core-ns","p1__92958#","p1__92959#","sci.impl.opts/default-classes","js/Error","msg","filename","line","cljs.core/Delay","goog.string/StringBuffer","sci.lang/Type","sci.impl.opts/default-imports","sci.impl.opts/normalize-classes","class->opts","cljs.core/transient","cljs.core/select-keys","kvs","vec__92960","cljs.core.nth","sym","class-opts","cljs.core.assoc_BANG_","cljs.core/map?","cljs.core/rest","cljs.core/persistent!","sci.impl.opts/default-reify-fn","_","sci.impl.opts/->ctx","features","readers","check-permissions?","sci.impl.opts/default-ns-aliases","p__92965","map__92966","cljs.core/--destructure-map","cljs.core.get","reify-fn","allow","deny","proxy-fn","sci.impl.opts/init","cljs.core.atom","ctx","sci.impl.opts.process_permissions","sci.impl.opts/merge-opts","opts","cljs.core/deref","map__92975","!env"],"sourcesContent":["(ns sci.impl.opts\n  {:no-doc true}\n  (:require\n   #?(:cljs [goog.string])\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.types]\n   [sci.impl.utils :as utils :refer [strip-core-ns]]\n   [sci.lang])\n  #?(:clj (:import\n           [sci.impl.types IReified])))\n\n#?(:clj\n   (defrecord Env [namespaces imports load-fn]))\n\n(defn init-env! [env bindings aliases namespaces classes raw-classes imports\n                 load-fn #?(:cljs async-load-fn) ns-aliases]\n  (swap! env (fn [env]\n               (let [env-nss (:namespaces env)\n                     namespaces (merge-with merge\n                                            (or\n                                             ;; either the env has already got namespaces\n                                             env-nss\n                                             ;; or we need to install the default namespaces\n                                             namespaces/namespaces)\n                                            (when-not env-nss\n                                              ;; can skip when env has already got namespaces\n                                              {'user (assoc bindings\n                                                            :obj utils/user-ns)})\n                                            namespaces)\n                     aliases (merge aliases\n                                    (get-in env [:namespaces 'user :aliases]))\n                     namespaces (-> namespaces\n                                    (update 'user assoc :aliases aliases)\n                                    (update 'clojure.core assoc 'global-hierarchy\n                                            (utils/new-var 'global-hierarchy (make-hierarchy)\n                                                          {:ns utils/clojure-core-ns})))\n                     imports (if-let [env-imports (:imports env)]\n                               (merge env-imports imports)\n                               imports)\n                     ns-aliases (merge (:ns-aliases env) ns-aliases)]\n                 ;; TODO: is the first case ever hit?\n                 (if-not env\n                   #?(:clj (->Env namespaces imports load-fn)\n                      :cljs {:namespaces namespaces\n                             :imports imports\n                             :load-fn load-fn\n                             :async-load-fn async-load-fn})\n                   (assoc env\n                          :namespaces namespaces\n                          :imports imports\n                          :load-fn load-fn\n                          #?@(:cljs [:async-load-fn async-load-fn])\n                          :public-class (:public-class classes)\n                          :class->opts (:class->opts classes)\n                          :raw-classes raw-classes\n                          :ns-aliases ns-aliases))))))\n\n(defn process-permissions [prev-perms & permissions]\n  (not-empty (into prev-perms (comp cat (map strip-core-ns)) permissions)))\n\n(def default-classes\n  #?(:clj {'java.lang.AssertionError AssertionError\n           'java.lang.Exception {:class Exception}\n           'java.lang.IllegalArgumentException java.lang.IllegalArgumentException\n           'clojure.lang.Delay clojure.lang.Delay\n           'clojure.lang.ExceptionInfo clojure.lang.ExceptionInfo\n           'clojure.lang.LineNumberingPushbackReader clojure.lang.LineNumberingPushbackReader\n           'java.lang.String {:class String}\n           'java.io.StringWriter java.io.StringWriter\n           'java.io.StringReader java.io.StringReader\n           'java.lang.Integer Integer\n           'java.lang.Number Number\n           'java.lang.Double Double\n           'java.lang.ArithmeticException ArithmeticException\n           'java.lang.Object Object\n           'sci.lang.IVar sci.lang.IVar ;; deprecated\n           'sci.lang.Type sci.lang.Type\n           'sci.lang.Var sci.lang.Var}\n     :cljs {'Error {:class js/Error :constructor (fn\n                                                   ([msg] (js/Error. msg))\n                                                   ([msg filename] (js/Error. msg filename))\n                                                   ([msg filename line] (js/Error. msg filename line)))}\n            'cljs.core.Delay {:class cljs.core/Delay\n                              :constructor #(cljs.core/Delay. % nil)}\n            'goog.string.StringBuffer {:class goog.string/StringBuffer\n                                       :constructor #(goog.string/StringBuffer. %)}\n            'sci.lang.Type sci.lang.Type}))\n\n(def default-imports\n  #?(:clj '{AssertionError java.lang.AssertionError\n            Exception java.lang.Exception\n            String java.lang.String\n            ArithmeticException java.lang.ArithmeticException\n            Integer java.lang.Integer\n            Number java.lang.Number\n            Double java.lang.Double\n            Object java.lang.Object}\n     :cljs {}))\n\n(defn normalize-classes [classes]\n  (loop [class->opts (transient (select-keys classes [:allow]))\n         kvs classes]\n    (if-let [[sym class-opts] (first kvs)]\n      (recur ;; storing the physical class as key didn't work well with\n       ;; GraalVM\n       (assoc! class->opts sym (if (map? class-opts)\n                                 class-opts\n                                 {:class class-opts}))\n       (rest kvs))\n      {:public-class (:public-class classes)\n       :class->opts (persistent! class->opts)})))\n\n(def default-reify-fn\n  #?(:clj (fn [{:keys [interfaces methods protocols]}]\n            (reify\n              Object\n              (toString [this]\n                ((get methods 'toString) this))\n              IReified\n              (getInterfaces [_this]\n                interfaces)\n              (getMethods [_this]\n                methods)\n              (getProtocols [_this]\n                protocols)))\n     :cljs (fn [_ _ _])))\n\n#?(:clj (defrecord Ctx [bindings env\n                        features readers\n                        reload-all\n                        check-permissions]))\n\n(defn ->ctx [bindings env features readers check-permissions?]\n  #?(:cljs {:bindings bindings\n            :env env\n            :features features\n            :readers readers\n            :check-permissions check-permissions?}\n     :clj (->Ctx bindings env features readers false check-permissions?)))\n\n(def default-ns-aliases\n  #?(:clj {}\n     :cljs {;; in SCI the core namespace is always called clojure.core\n            'cljs.core 'clojure.core}))\n\n(defn init\n  \"Initializes options\"\n  [{:keys [:bindings :env\n           :allow :deny\n           :aliases\n           :namespaces\n           :classes\n           :imports\n           :features\n           :load-fn\n           :readers\n           :reify-fn\n           :proxy-fn\n           #?(:cljs :async-load-fn)\n           :ns-aliases]}]\n  (let [env (or env (atom {}))\n        imports (merge default-imports imports)\n        ns-aliases (merge default-ns-aliases ns-aliases)\n        bindings bindings\n        raw-classes (merge default-classes classes)\n        classes (normalize-classes raw-classes)\n        _ (init-env! env bindings aliases namespaces classes raw-classes imports\n                     load-fn #?(:cljs async-load-fn) ns-aliases)\n        ctx (assoc (->ctx {} env features readers (or allow deny))\n                   :allow (when allow (process-permissions #{} allow))\n                   :deny (when deny (process-permissions #{} deny))\n                   :reify-fn (or reify-fn default-reify-fn)\n                   :proxy-fn proxy-fn\n                   #?@(:clj [:main-thread-id (.getId (Thread/currentThread))]))]\n    ctx))\n\n(defn merge-opts [ctx opts]\n  (let [!env (:env ctx)\n        env @!env\n        {:keys [:bindings\n                :allow :deny\n                :aliases\n                :namespaces\n                :classes\n                :imports\n                :features\n                :load-fn\n                :readers\n                :reify-fn\n                #?(:cljs :async-load-fn)\n                :ns-aliases]\n         :or {load-fn (:load-fn env)\n              #?@(:cljs [async-load-fn (:async-load-fn env)])}} opts\n        raw-classes (merge (:raw-classes @!env) classes)\n        classes (normalize-classes raw-classes)\n        _ (init-env! !env bindings aliases namespaces classes raw-classes imports load-fn #?(:cljs async-load-fn) ns-aliases)\n        ctx (assoc (->ctx {} !env features readers (or (:check-permissions ctx) allow deny))\n                   :allow (when allow (process-permissions (:allow ctx) allow))\n                   :deny (when deny (process-permissions (:deny ctx) deny))\n                   :reify-fn reify-fn\n                   :main-thread-id (:main-thread-id ctx))]\n    ctx))\n"]}