{
"version":3,
"file":"module$node_modules$three$src$renderers$webgl$WebGLBackground.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/three/src/renderers/webgl/WebGLBackground.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$renderers$webgl$WebGLBackground\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLBackground = WebGLBackground;\n\nvar _constants = require(\"../../constants.js\");\n\nvar _BoxGeometry = require(\"../../geometries/BoxGeometry.js\");\n\nvar _PlaneGeometry = require(\"../../geometries/PlaneGeometry.js\");\n\nvar _ShaderMaterial = require(\"../../materials/ShaderMaterial.js\");\n\nvar _Color = require(\"../../math/Color.js\");\n\nvar _Mesh = require(\"../../objects/Mesh.js\");\n\nvar _ShaderLib = require(\"../shaders/ShaderLib.js\");\n\nvar _UniformsUtils = require(\"../shaders/UniformsUtils.js\");\n\nfunction WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {\n  const clearColor = new _Color.Color(0x000000);\n  let clearAlpha = alpha === true ? 0 : 1;\n  let planeMesh;\n  let boxMesh;\n  let currentBackground = null;\n  let currentBackgroundVersion = 0;\n  let currentTonemapping = null;\n\n  function render(renderList, scene) {\n    let forceClear = false;\n    let background = scene.isScene === true ? scene.background : null;\n\n    if (background && background.isTexture) {\n      const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background\n\n      background = (usePMREM ? cubeuvmaps : cubemaps).get(background);\n    } // Ignore background in AR\n    // TODO: Reconsider this.\n\n\n    const xr = renderer.xr;\n    const session = xr.getSession && xr.getSession();\n\n    if (session && session.environmentBlendMode === 'additive') {\n      background = null;\n    }\n\n    if (background === null) {\n      setClear(clearColor, clearAlpha);\n    } else if (background && background.isColor) {\n      setClear(background, 1);\n      forceClear = true;\n    }\n\n    if (renderer.autoClear || forceClear) {\n      renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    }\n\n    if (background && (background.isCubeTexture || background.mapping === _constants.CubeUVReflectionMapping)) {\n      if (boxMesh === undefined) {\n        boxMesh = new _Mesh.Mesh(new _BoxGeometry.BoxGeometry(1, 1, 1), new _ShaderMaterial.ShaderMaterial({\n          name: 'BackgroundCubeMaterial',\n          uniforms: (0, _UniformsUtils.cloneUniforms)(_ShaderLib.ShaderLib.backgroundCube.uniforms),\n          vertexShader: _ShaderLib.ShaderLib.backgroundCube.vertexShader,\n          fragmentShader: _ShaderLib.ShaderLib.backgroundCube.fragmentShader,\n          side: _constants.BackSide,\n          depthTest: false,\n          depthWrite: false,\n          fog: false\n        }));\n        boxMesh.geometry.deleteAttribute('normal');\n        boxMesh.geometry.deleteAttribute('uv');\n\n        boxMesh.onBeforeRender = function (renderer, scene, camera) {\n          this.matrixWorld.copyPosition(camera.matrixWorld);\n        }; // add \"envMap\" material property so the renderer can evaluate it like for built-in materials\n\n\n        Object.defineProperty(boxMesh.material, 'envMap', {\n          get: function () {\n            return this.uniforms.envMap.value;\n          }\n        });\n        objects.update(boxMesh);\n      }\n\n      boxMesh.material.uniforms.envMap.value = background;\n      boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;\n      boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;\n\n      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n        boxMesh.material.needsUpdate = true;\n        currentBackground = background;\n        currentBackgroundVersion = background.version;\n        currentTonemapping = renderer.toneMapping;\n      }\n\n      boxMesh.layers.enableAll(); // push to the pre-sorted opaque render list\n\n      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n    } else if (background && background.isTexture) {\n      if (planeMesh === undefined) {\n        planeMesh = new _Mesh.Mesh(new _PlaneGeometry.PlaneGeometry(2, 2), new _ShaderMaterial.ShaderMaterial({\n          name: 'BackgroundMaterial',\n          uniforms: (0, _UniformsUtils.cloneUniforms)(_ShaderLib.ShaderLib.background.uniforms),\n          vertexShader: _ShaderLib.ShaderLib.background.vertexShader,\n          fragmentShader: _ShaderLib.ShaderLib.background.fragmentShader,\n          side: _constants.FrontSide,\n          depthTest: false,\n          depthWrite: false,\n          fog: false\n        }));\n        planeMesh.geometry.deleteAttribute('normal'); // add \"map\" material property so the renderer can evaluate it like for built-in materials\n\n        Object.defineProperty(planeMesh.material, 'map', {\n          get: function () {\n            return this.uniforms.t2D.value;\n          }\n        });\n        objects.update(planeMesh);\n      }\n\n      planeMesh.material.uniforms.t2D.value = background;\n\n      if (background.matrixAutoUpdate === true) {\n        background.updateMatrix();\n      }\n\n      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n        planeMesh.material.needsUpdate = true;\n        currentBackground = background;\n        currentBackgroundVersion = background.version;\n        currentTonemapping = renderer.toneMapping;\n      }\n\n      planeMesh.layers.enableAll(); // push to the pre-sorted opaque render list\n\n      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n    }\n  }\n\n  function setClear(color, alpha) {\n    state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n  }\n\n  return {\n    getClearColor: function () {\n      return clearColor;\n    },\n    setClearColor: function (color, alpha = 1) {\n      clearColor.set(color);\n      clearAlpha = alpha;\n      setClear(clearColor, clearAlpha);\n    },\n    getClearAlpha: function () {\n      return clearAlpha;\n    },\n    setClearAlpha: function (alpha) {\n      clearAlpha = alpha;\n      setClear(clearColor, clearAlpha);\n    },\n    render: render\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebGLBackground","renderer","cubemaps","cubeuvmaps","state","objects","alpha","premultipliedAlpha","setClear","color","buffers","r","g","b","clearColor","_Color","Color","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","getClearColor","setClearColor","set","getClearAlpha","setClearAlpha","render","renderList","scene","forceClear","background","isScene","isTexture","get","backgroundBlurriness","xr","session","getSession","environmentBlendMode","isColor","autoClear","clear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","mapping","_constants","CubeUVReflectionMapping","undefined","_Mesh","Mesh","_BoxGeometry","BoxGeometry","_ShaderMaterial","ShaderMaterial","name","uniforms","_UniformsUtils","cloneUniforms","_ShaderLib","ShaderLib","backgroundCube","vertexShader","fragmentShader","side","BackSide","depthTest","depthWrite","fog","geometry","deleteAttribute","onBeforeRender","boxMesh.onBeforeRender","camera","matrixWorld","copyPosition","material","envMap","update","flipEnvMap","isRenderTargetTexture","version","toneMapping","needsUpdate","layers","enableAll","unshift","_PlaneGeometry","PlaneGeometry","FrontSide","t2D","matrixAutoUpdate","updateMatrix","uvTransform","copy","matrix"]
}
