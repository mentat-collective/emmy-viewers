shadow$provide.module$node_modules$markdown_it$lib$rules_block$blockquote=function(global,require,module,exports){var isSpace=require("module$node_modules$markdown_it$lib$common$utils").isSpace;module.exports=function(state,startLine,endLine,silent){var offset,oldLineMax=state.lineMax;var i=state.bMarks[startLine]+state.tShift[startLine];var l=state.eMarks[startLine];if(4<=state.sCount[startLine]-state.blkIndent||62!==state.src.charCodeAt(i++))return!1;if(silent)return!0;var initial=offset=state.sCount[startLine]+
1;if(32===state.src.charCodeAt(i)){i++;initial++;offset++;var adjustTab=!1;var spaceAfterMarker=!0}else 9===state.src.charCodeAt(i)?(spaceAfterMarker=!0,3===(state.bsCount[startLine]+offset)%4?(i++,initial++,offset++,adjustTab=!1):adjustTab=!0):spaceAfterMarker=!1;var oldBMarks=[state.bMarks[startLine]];for(state.bMarks[startLine]=i;i<l;){var ch=state.src.charCodeAt(i);if(isSpace(ch))9===ch?offset+=4-(offset+state.bsCount[startLine]+(adjustTab?1:0))%4:offset++;else break;i++}var oldBSCount=[state.bsCount[startLine]];
state.bsCount[startLine]=state.sCount[startLine]+1+(spaceAfterMarker?1:0);ch=i>=l;var oldSCount=[state.sCount[startLine]];state.sCount[startLine]=offset-initial;var oldTShift=[state.tShift[startLine]];state.tShift[startLine]=i-state.bMarks[startLine];var terminatorRules=state.md.block.ruler.getRules("blockquote");var oldParentType=state.parentType;state.parentType="blockquote";for(silent=startLine+1;silent<endLine;silent++){initial=state.sCount[silent]<state.blkIndent;i=state.bMarks[silent]+state.tShift[silent];
l=state.eMarks[silent];if(i>=l)break;if(62!==state.src.charCodeAt(i++)||initial){if(ch)break;initial=!1;i=0;for(l=terminatorRules.length;i<l;i++)if(terminatorRules[i](state,silent,endLine,!0)){initial=!0;break}if(initial){state.lineMax=silent;0!==state.blkIndent&&(oldBMarks.push(state.bMarks[silent]),oldBSCount.push(state.bsCount[silent]),oldTShift.push(state.tShift[silent]),oldSCount.push(state.sCount[silent]),state.sCount[silent]-=state.blkIndent);break}oldBMarks.push(state.bMarks[silent]);oldBSCount.push(state.bsCount[silent]);
oldTShift.push(state.tShift[silent]);oldSCount.push(state.sCount[silent]);state.sCount[silent]=-1}else{initial=offset=state.sCount[silent]+1;32===state.src.charCodeAt(i)?(i++,initial++,offset++,adjustTab=!1,spaceAfterMarker=!0):9===state.src.charCodeAt(i)?(spaceAfterMarker=!0,3===(state.bsCount[silent]+offset)%4?(i++,initial++,offset++,adjustTab=!1):adjustTab=!0):spaceAfterMarker=!1;oldBMarks.push(state.bMarks[silent]);for(state.bMarks[silent]=i;i<l;){ch=state.src.charCodeAt(i);if(isSpace(ch))9===
ch?offset+=4-(offset+state.bsCount[silent]+(adjustTab?1:0))%4:offset++;else break;i++}ch=i>=l;oldBSCount.push(state.bsCount[silent]);state.bsCount[silent]=state.sCount[silent]+1+(spaceAfterMarker?1:0);oldSCount.push(state.sCount[silent]);state.sCount[silent]=offset-initial;oldTShift.push(state.tShift[silent]);state.tShift[silent]=i-state.bMarks[silent]}}endLine=state.blkIndent;state.blkIndent=0;terminatorRules=state.push("blockquote_open","blockquote",1);terminatorRules.markup="\x3e";terminatorRules.map=
adjustTab=[startLine,0];state.md.block.tokenize(state,startLine,silent);terminatorRules=state.push("blockquote_close","blockquote",-1);terminatorRules.markup="\x3e";state.lineMax=oldLineMax;state.parentType=oldParentType;adjustTab[1]=state.line;for(i=0;i<oldTShift.length;i++)state.bMarks[i+startLine]=oldBMarks[i],state.tShift[i+startLine]=oldTShift[i],state.sCount[i+startLine]=oldSCount[i],state.bsCount[i+startLine]=oldBSCount[i];state.blkIndent=endLine;return!0}}
//# sourceMappingURL=module$node_modules$markdown_it$lib$rules_block$blockquote.js.map
