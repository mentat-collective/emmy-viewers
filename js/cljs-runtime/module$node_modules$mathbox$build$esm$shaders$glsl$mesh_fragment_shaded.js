shadow$provide.module$node_modules$mathbox$build$esm$shaders$glsl$mesh_fragment_shaded=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;exports.default="\n#extension GL_OES_standard_derivatives : enable\nvarying vec3 vNormal;\nvarying vec3 vLight;\nvarying vec3 vPosition;\n\nvec3 offSpecular(vec3 color) {\n  vec3 c \x3d 1.0 - color;\n  return 1.0 - c * c;\n}\n\nvec4 getShadedColor(vec4 rgba) {\n  \n  vec3 color \x3d rgba.xyz;\n  vec3 color2 \x3d offSpecular(rgba.xyz);\n\n  vec3 normal \x3d normalize(vNormal);\n  vec3 light \x3d normalize(vLight);\n  vec3 position \x3d normalize(vPosition);\n  \n  // Workaround to avoid gl_FrontFacing. See https://github.com/unconed/mathbox/pull/26\n  vec3 pdx \x3d dFdx(vPosition);\n  vec3 pdy \x3d dFdy(vPosition);\n  bool frontFacting \x3d dot(vNormal, cross(pdx, pdy)) \x3e 0.0;\n\n  float side \x3d frontFacting ? 1.0 : -1.0;\n  float cosine  \x3d side * dot(normal, light);\n  float diffuse \x3d mix(max(0.0, cosine), .5 + .5 * cosine, .1);\n  \n  vec3  halfLight \x3d normalize(light + position);\n\tfloat cosineHalf \x3d max(0.0, side * dot(normal, halfLight));\n\tfloat specular \x3d pow(cosineHalf, 16.0);\n\t\n\treturn vec4(color * (diffuse * .9 + .05) + .25 * color2 * specular, rgba.a);\n}\n"}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$shaders$glsl$mesh_fragment_shaded.js.map
