{"version":3,"sources":["nextjournal/clojure_mode/commands.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.commands/view-command","f","p__89559","map__89560","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj89570","js/undefined","obj89571","state","dispatch","G__89572","nextjournal.clojure-mode.commands/unwrap*","nextjournal.clojure_mode.util.update_ranges","p__89574","map__89578","obj89580","obj89583","obj89585","range","from","to","empty","temp__5753__auto__","nearest-balanced-coll","G__89588","nextjournal.clojure_mode.node.tree","nextjournal.clojure-mode.node/closest","nextjournal.clojure-mode.node/coll?","nextjournal.clojure-mode.util/guard","nextjournal.clojure-mode.node/balanced?","nextjournal.clojure_mode.node.from_to","nextjournal.clojure-mode.node/down","nextjournal.clojure-mode.node/down-last","nextjournal.clojure-mode.commands/copy-to-clipboard!","text","focus-el","obj89593","js/document","input-el","js/document.createElement","obj89595","obj89596","js/document.execCommand","nextjournal.clojure-mode.commands/kill*","p__89603","map__89604","obj89606","obj89607","obj89608","node","parent","p1__89601#","or__4253__auto__","nextjournal.clojure-mode.node/string?","nextjournal.clojure-mode.node/top?","line-end","next-children","nextjournal.clojure_mode.node.children","last-child-on-line","G__89609","cljs.core.take_while","p1__89602#","cljs.core.every_pred","nextjournal.clojure-mode.node/start","cljs.core/last","content","nextjournal.clojure_mode.node.string","content-from","cljs.core.subs","next-newline","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/end-edge?","G__89610","cljs.core/first","nextjournal.clojure-mode.util/node-js?","nextjournal.clojure-mode.util/from-to","nextjournal.clojure-mode.commands/enter-and-indent*","ctx","nextjournal.clojure-mode.extensions.formatting/make-indent-context","p__89611","map__89612","obj89614","obj89615","obj89616","indent-at","cljs.core.some_fn","nextjournal.clojure-mode.node/inner-span","indent","nextjournal.clojure-mode.extensions.formatting/get-indentation","insertion","nextjournal.clojure-mode.extensions.formatting/spaces","nextjournal.clojure-mode.commands/nav-position","dir","G__89618","p1__89617#","obj89619","applied-science.js-interop.impl/wrap-key","G__89622","js/Error","nextjournal.clojure-mode.selections/constrain","nextjournal.clojure-mode.commands/nav","p__89624","map__89626","obj89632","obj89633","obj89634","obj89635","G__89637","nextjournal.clojure-mode.commands/nav-select","p__89638","map__89639","obj89642","obj89643","obj89644","nextjournal.clojure_mode.node.balanced_range","map__89645","obj89648","obj89649","G__89650","nextjournal.clojure-mode.commands/balance-ranges","p__89651","map__89652","obj89654","obj89655","obj89656","nextjournal.clojure-mode.commands/log","js/console.log","nextjournal.clojure-mode.commands/slurp","direction","p__89659","map__89660","obj89664","obj89666","obj89667","p1__89657#","cljs.core/not","G__89669","G__89671","nextjournal.clojure-mode.node/with-prefix","nextjournal.clojure-mode.node/right","G__89672","nextjournal.clojure-mode.node/left","nextjournal.clojure-mode.node/start-edge?","target","G__89674","cljs.core.remove","nextjournal.clojure-mode.node/line-comment?","nextjournal.clojure-mode.node/rights","nextjournal.clojure-mode.node/lefts","G__89675","edge","nextjournal.clojure-mode.node/name","obj89677","obj89678","nextjournal.clojure-mode.node/left-edge-with-prefix","start","nextjournal.clojure-mode.commands/barf","p__89682","map__89683","obj89685","obj89686","obj89687","G__89688","G__89689","cljs.core.drop","x__4339__auto__","y__4340__auto__","obj89691","obj89693","next-first-child","G__89696","left-edge","left-start","x__4336__auto__","y__4337__auto__","nextjournal.clojure-mode.commands/builtin-index","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineStart","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineStart","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectAll","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineBoundaryForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineBoundaryForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteCharBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.insertNewlineAndIndent","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineBoundaryBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineBoundaryBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteCharForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorCharLeft","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectCharLeft","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorCharRight","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectCharRight","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorGroupForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectGroupForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorGroupBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectGroupBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorDocEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectDocEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteGroupBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteGroupForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorPageDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectPageDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorPageUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectPageUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.splitLine","js/module$node_modules$$codemirror$commands$dist$index_cjs.transposeChars","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorDocStart","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectDocStart","nextjournal.clojure-mode.commands/indent","nextjournal.clojure-mode.extensions.formatting/format","nextjournal.clojure-mode.commands/unwrap","nextjournal.clojure-mode.commands/kill","nextjournal.clojure-mode.commands/nav-right","nextjournal.clojure-mode.commands/nav-left","nextjournal.clojure-mode.commands/nav-select-right","nextjournal.clojure-mode.commands/nav-select-left","nextjournal.clojure-mode.commands/slurp-forward","nextjournal.clojure-mode.commands/slurp-backward","nextjournal.clojure-mode.commands/barf-forward","nextjournal.clojure-mode.commands/barf-backward","nextjournal.clojure-mode.commands/selection-grow","nextjournal.clojure-mode.extensions.selection-history/selection-grow*","nextjournal.clojure-mode.commands/selection-return","nextjournal.clojure-mode.extensions.selection-history/selection-return*","nextjournal.clojure-mode.commands/enter-and-indent","nextjournal.clojure-mode.commands/paredit-index","nextjournal.clojure-mode.commands/index","cljs.core.merge","nextjournal.clojure-mode.commands/reverse-index","p1__89704#","p2__89706#","p3__89705#","cljs.core/reduce-kv","cljs.core.assoc"],"sourcesContent":["(ns nextjournal.clojure-mode.commands\n  (:require [\"@codemirror/commands\" :as commands]\n            [applied-science.js-interop :as j]\n            [nextjournal.clojure-mode.util :as u]\n            [nextjournal.clojure-mode.selections :as sel]\n            [nextjournal.clojure-mode.node :as n]\n            [nextjournal.clojure-mode.extensions.formatting :as format]\n            [nextjournal.clojure-mode.extensions.selection-history :as sel-history]))\n\n(defn view-command [f]\n  (j/fn [^:js {:keys [^js state dispatch]}]\n    (some-> (f state)\n            (dispatch))\n    true))\n\n(defn unwrap* [state]\n  (u/update-ranges state\n    (j/fn [^:js {:as range :keys [from to empty]}]\n      (when empty\n        (when-let [nearest-balanced-coll\n                   (some-> (n/tree state from -1)\n                           (n/closest n/coll?)\n                           (u/guard n/balanced?))]\n          {:cursor (dec from)\n           :changes [(n/from-to (n/down nearest-balanced-coll))\n                     (n/from-to (n/down-last nearest-balanced-coll))]})))))\n\n(defn copy-to-clipboard! [text]\n  (let [^js focus-el (j/get js/document :activeElement)\n        input-el (js/document.createElement \"textarea\")]\n    (.setAttribute input-el \"class\" \"clipboard-input\")\n    (j/assoc! input-el :innerHTML text)\n    (-> js/document .-body (.appendChild input-el))\n    (.focus input-el #js {:preventScroll true})\n    (.select input-el)\n    (js/document.execCommand \"copy\")\n    (.focus focus-el #js {:preventScroll true})\n    (-> js/document .-body (.removeChild input-el))))\n\n(defn kill* [^js state]\n  (u/update-ranges state\n    (j/fn [^:js {:as range :keys [from to empty]}]\n      (if empty\n        (let [node (n/tree state from)\n              parent (n/closest node #(or (n/coll? %)\n                                          (n/string? %)\n                                          (n/top? %)))\n              line-end (.-to (.lineAt (.-doc state) from))\n              next-children (when parent (n/children parent from 1))\n              last-child-on-line\n              (when parent (some->> next-children\n                                    (take-while (every-pred\n                                                 #(<= (n/start %) line-end)))\n                                    last))\n              to (cond (n/string? parent) (let [content (str (n/string state parent))\n                                                content-from (subs content (- from (n/start parent)))\n                                                next-newline (.indexOf content-from \\newline)]\n                                            (if (neg? next-newline)\n                                              (dec (n/end parent))\n                                              (+ from next-newline 1)))\n                       last-child-on-line (if (n/end-edge? last-child-on-line)\n                                            (n/start last-child-on-line)\n                                            (n/end last-child-on-line))\n                       (some-> (first next-children)\n                               n/start\n                               (> line-end)) (-> (first next-children) n/start))]\n          (when-not u/node-js?\n            (copy-to-clipboard! (n/string state from to)))\n          (when to\n            {:cursor from\n             :changes {:from from\n                       :to to}}))\n        (do\n          (copy-to-clipboard! (n/string state from to))\n          {:cursor from\n           :changes (u/from-to from to)})))))\n\n(defn enter-and-indent* [^js state]\n  (let [ctx (format/make-indent-context state)]\n    (u/update-ranges state\n      (j/fn [^:js {:as range :keys [from to empty]}]\n        (let [indent-at (-> (n/closest (n/tree state from) (some-fn n/coll? n/top?))\n                            n/inner-span\n                            n/start)\n              indent (format/get-indentation ctx indent-at)\n              insertion (str \\newline (format/spaces state indent))]\n          {:cursor (+ from (count insertion))\n           :changes [{:from from\n                      :to to\n                      :insert insertion}]})))))\n\n(defn nav-position [state from dir]\n  (or (some-> (n/closest (n/tree state from)\n                         #(or (n/coll? %)\n                              (n/string? %)\n                              (n/top? %)))\n              (n/children from dir)\n              first\n              (j/get (case dir -1 :from 1 :to)))\n      (sel/constrain state (+ from dir))))\n\n(defn nav [dir]\n  (fn [state]\n    (u/update-ranges state\n      (j/fn [^:js {:as range :keys [from to empty]}]\n        (if empty\n          {:cursor (nav-position state from dir)}\n          {:cursor (j/get (u/from-to from to) (case dir -1 :from 1 :to))})))))\n\n(defn nav-select [dir]\n  (fn [^js state]\n    (u/update-ranges state\n      (j/fn [^:js {:as range :keys [from to empty]}]\n        (if empty\n          {:range (n/balanced-range state from (nav-position state from dir))}\n          {:range (j/let [^:js {:keys [from to]} (u/from-to from to)]\n                    (case dir\n                      1 (n/balanced-range state from (nav-position state to dir))\n                      -1 (n/balanced-range state (nav-position state from dir) to)))})))))\n\n(defn balance-ranges [^js state]\n  (u/update-ranges state\n    (j/fn [^:js {:keys [from to empty]}]\n      (when-not empty\n        {:range (n/balanced-range state from to)}))))\n\n(def log js/console.log)\n\n(defn slurp [direction]\n  (fn [^js state]\n    (u/update-ranges state\n      (j/fn [^:js {:as range :keys [from to empty]}]\n        (when empty\n          (when-let [parent (n/closest (n/tree state from)\n                                       (every-pred n/coll?\n                                                   #(not\n                                                     (case direction\n                                                        1 (some-> % n/with-prefix n/right n/end-edge?)\n                                                       -1 (some-> % n/with-prefix n/left n/start-edge?)))))]\n            (when-let [target (case direction 1 (first (remove n/line-comment? (n/rights (n/with-prefix parent))))\n                                              -1 (first (remove n/line-comment? (n/lefts (n/with-prefix parent)))))]\n              {:cursor/mapped from\n               :changes (case direction\n                          1\n                          (let [edge (n/down-last parent)]\n                            [{:from (-> target n/end)\n                              :insert (n/name edge)}\n                             (-> edge\n                                 n/from-to\n                                 (j/assoc! :insert \" \"))])\n                          -1\n                          (let [^string edge (n/left-edge-with-prefix state parent)\n                                start (n/start (n/with-prefix parent))]\n                            [{:from start\n                              :to (+ start (count edge))\n                              :insert \" \"}\n                             {:from (n/start target)\n                              :insert edge}]))})))))))\n\n(defn barf [direction]\n  (fn [^js state]\n    (->> (j/fn [^:js {:as range :keys [from to empty]}]\n           (when empty\n             (when-let [parent (-> (n/tree state from)\n                                   (n/closest n/coll?))]\n               (case direction\n                 1\n                 (when-let [target (some->> (n/down-last parent)\n                                            n/lefts\n                                            (remove n/line-comment?)\n                                            (drop 1)\n                                            first)]\n\n                   {:cursor (min (n/end target) from)\n                    :changes [{:from (n/end target)\n                               :insert (n/name (n/down-last parent))}\n                              (-> (n/down-last parent)\n                                  n/from-to\n                                  (j/assoc! :insert \" \"))]})\n                 -1\n                 (when-let [next-first-child (some->> (n/down parent)\n                                                      n/rights\n                                                      (remove n/line-comment?)\n                                                      (drop 1)\n                                                      first)]\n                   (let [left-edge (n/left-edge-with-prefix state parent)\n                         left-start (n/start (n/with-prefix parent))]\n                     {:cursor (max from (+ (n/start next-first-child) (inc (count left-edge))))\n                      :changes [\n                                ;; insert left edge (prefixed by a space) in front of next-first-child\n                                {:from (n/start next-first-child)\n                                 :insert (str \" \" left-edge)}\n                                ;; replace left-edge with spaces\n                                {:from left-start\n                                 :to (+ left-start (count left-edge))\n                                 :insert (format/spaces state (count left-edge))}]}))))))\n         (u/update-ranges state))))\n\n(def builtin-index\n  \"Subset of builtin commands that compliment paredit\"\n  {:cursorLineStart commands/cursorLineStart\n   :selectLineStart commands/selectLineStart\n   :cursorLineDown commands/cursorLineDown\n   :selectLineDown commands/selectLineDown\n   :selectAll commands/selectAll\n   :cursorLineBoundaryForward commands/cursorLineBoundaryForward\n   :selectLineBoundaryForward commands/selectLineBoundaryForward\n   :deleteCharBackward commands/deleteCharBackward\n   :insertNewlineAndIndent commands/insertNewlineAndIndent\n   :cursorLineBoundaryBackward commands/cursorLineBoundaryBackward\n   :selectLineBoundaryBackward commands/selectLineBoundaryBackward\n   :deleteCharForward commands/deleteCharForward\n   :cursorCharLeft commands/cursorCharLeft\n   :selectCharLeft commands/selectCharLeft\n   :cursorCharRight commands/cursorCharRight\n   :selectCharRight commands/selectCharRight\n   :cursorGroupForward commands/cursorGroupForward\n   :selectGroupForward commands/selectGroupForward\n   :cursorGroupBackward commands/cursorGroupBackward\n   :selectGroupBackward commands/selectGroupBackward\n   :cursorDocEnd commands/cursorDocEnd\n   :selectDocEnd commands/selectDocEnd\n   :deleteGroupBackward commands/deleteGroupBackward\n   :deleteGroupForward commands/deleteGroupForward\n   :cursorPageDown commands/cursorPageDown\n   :selectPageDown commands/selectPageDown\n   :cursorPageUp commands/cursorPageUp\n   :selectPageUp commands/selectPageUp\n   :cursorLineEnd commands/cursorLineEnd\n   :selectLineEnd commands/selectLineEnd\n   :splitLine commands/splitLine\n   :transposeChars commands/transposeChars\n   :cursorLineUp commands/cursorLineUp\n   :selectLineUp commands/selectLineUp\n   :cursorDocStart commands/cursorDocStart\n   :selectDocStart commands/selectDocStart})\n\n(def indent (view-command format/format))\n(def unwrap (view-command unwrap*))\n(def kill (view-command kill*))\n(def nav-right (view-command (nav 1)))\n(def nav-left (view-command (nav -1)))\n(def nav-select-right (view-command (nav-select 1)))\n(def nav-select-left (view-command (nav-select -1)))\n(def slurp-forward (view-command (slurp 1)))\n(def slurp-backward (view-command (slurp -1)))\n(def barf-forward (view-command (barf 1)))\n(def barf-backward (view-command (barf -1)))\n(def selection-grow (view-command sel-history/selection-grow*))\n(def selection-return (view-command sel-history/selection-return*))\n(def enter-and-indent (view-command enter-and-indent*))\n\n(def paredit-index\n  {:indent indent\n   :unwrap unwrap\n   :kill kill\n   :nav-right nav-right\n   :nav-left nav-left\n   :nav-select-right nav-select-right\n   :nav-select-left nav-select-left\n   :slurp-forward slurp-forward\n   :slurp-backward slurp-backward\n   :barf-forward barf-forward\n   :barf-backward barf-backward\n   :selection-grow selection-grow\n   :selection-return selection-return\n   :enter-and-indent enter-and-indent})\n\n(def index\n  \"Mapping of keyword-id to command functions\"\n  (merge builtin-index\n         paredit-index))\n\n(def reverse-index\n  \"Lookup keyword-id by function\"\n  (reduce-kv #(assoc %1 %3 %2) {} index))\n"]}