{"version":3,"sources":["sicmutils/numerical/minimize.cljc"],"mappings":";AAQA,AAAA;;;;;;wCAAA,gDAAAA,xFAAME;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sEAAA,tEAAMD,iFAKFE,EAAEC,EAAEC;AALR,AAKW,OAACC,oEAASH,EAAEC,EAAEC,EAAE,qBAAA,rBAACE;;;AAL5B,CAAA,sEAAA,tEAAMN,iFAMFE,EAAEC,EAAEC,EAAEG;AANV,AAOG,sFAAA,2CAAA,1HAACC,yEAAYN,EAAEC,EAAEC,0GAAaG;;;AAPjC,CAAA,gEAAA,hEAAMP;;AAAN,AASA,AAAA;;;;;;yDAAA,iEAAAF,1HAAMgB;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,2BAAA,AAAA;AAAA,AAAA,IAAAC,yBAAA;;AAAA,AAAA,GAAA,CAAAA,yBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,gBAAA,CAAAA,yBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,4FAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,8FAAA,mBAAAG,jHAAMD,yGAKHW,KAAKC;AALR,AAAA,IAAAV,cAAAD;IAAAC,kBAAA,AAAAC,4BAAAD;WAAAA,PAKgCY;kBALhC,AAAAV,4CAAAF,gBAAA,1EAKqBW;AALrB,AAME,IAAME,SAAO,AAACC,qDAAeL,KAAKC,GAAGE;AAArC,AACE,oBAAI,AAAA,+FAAaC;AACf,oBAAIF;AACFE;;AACA,OAAA,uFAASA;;;AACX,OAACE,mCAAsB,CAAA,6FAAsDF;;;;AAXnF,CAAA,iFAAA,jFAAMf;;AAAN;AAAA,CAAA,2EAAA,WAAAK,tFAAML;AAAN,AAAA,IAAAM,YAAA,AAAAC,gBAAAF;IAAAA,gBAAA,AAAAG,eAAAH;IAAAI,YAAA,AAAAF,gBAAAF;IAAAA,gBAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAK,qBAAA;AAAA,AAAA,OAAAA,wDAAAJ,UAAAG,UAAAJ;;;AAAA","names":["var_args","G__102614","sicmutils.numerical.minimize/minimize","js/Error","f","a","b","sicmutils.numerical.minimize.minimize","cljs.core/constantly","observe","sicmutils.numerical.unimin.brent.brent_min","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.numerical.minimize/multidimensional-minimize","p__102619","map__102620","cljs.core/--destructure-map","cljs.core.get","seq102616","G__102617","cljs.core/first","cljs.core/next","G__102618","self__4851__auto__","func","x0","info?","opts","result","sicmutils.numerical.multimin.nelder-mead/nelder-mead","sicmutils.util/failure-to-converge"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.numerical.minimize\n  \"Entrypoint for univariate and multivariate minimization routines.\"\n  (:require [sicmutils.numerical.multimin.nelder-mead :as nm]\n            [sicmutils.numerical.unimin.brent :as b]\n            [sicmutils.util :as u]))\n\n(defn minimize\n  \"Find the minimum of the function `f: R -> R` in the interval `[a, b]`.\n\n  If an `observe` function is supplied, it will be invoked with the iteration\n  count and the values of x and f(x) at each search step.\"\n  ([f a b] (minimize f a b (constantly nil)))\n  ([f a b observe]\n   (b/brent-min f a b {:callback observe})))\n\n(defn multidimensional-minimize\n  \"Entrypoint for multidimensional minimization routines.\n\n  See [[sicmutils.numerical.multimin.nelder-mead/nelder-mead]] for the only\n  supported option.\"\n  [func x0 & {:keys [info?] :as opts}]\n  (let [result (nm/nelder-mead func x0 opts)]\n    (if (:converged? result)\n      (if info?\n        result\n        (:result result))\n      (u/failure-to-converge (str \"multidimensional-minimize failed to converge: \" result)))))\n"]}