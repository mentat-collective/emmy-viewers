shadow$provide.module$node_modules$threestrap$src$renderers$VRRenderer=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.VRRenderer=void 0;var _PerspectiveCamera=require("module$node_modules$three$src$cameras$PerspectiveCamera"),_Vector=require("module$node_modules$three$src$math$Vector3");class VRRenderer{constructor(renderer,hmd){this.renderer=renderer;this.right=new _Vector.Vector3;this.cameraLeft=new _PerspectiveCamera.PerspectiveCamera;this.cameraRight=
new _PerspectiveCamera.PerspectiveCamera;renderer=hmd.getEyeTranslation("left");this.halfIPD=(new _Vector.Vector3(renderer.x,renderer.y,renderer.z)).length();this.fovLeft=hmd.getRecommendedEyeFieldOfView("left");this.fovRight=hmd.getRecommendedEyeFieldOfView("right")}FovToNDCScaleOffset(fov){const pxscale=2/(fov.leftTan+fov.rightTan),pyscale=2/(fov.upTan+fov.downTan);return{scale:[pxscale,pyscale],offset:[(fov.leftTan-fov.rightTan)*pxscale*.5,(fov.upTan-fov.downTan)*pyscale*.5]}}FovPortToProjection(matrix,
fov,rightHanded,zNear,zFar){zNear=void 0===zNear?.01:zNear;zFar=void 0===zFar?1E4:zFar;rightHanded=void 0===rightHanded||rightHanded?-1:1;const m=matrix.elements;fov=this.FovToNDCScaleOffset(fov);m[0]=fov.scale[0];m[1]=0;m[2]=fov.offset[0]*rightHanded;m[3]=0;m[4]=0;m[5]=fov.scale[1];m[6]=-fov.offset[1]*rightHanded;m[7]=0;m[8]=0;m[9]=0;m[10]=zFar/(zNear-zFar)*-rightHanded;m[11]=zFar*zNear/(zNear-zFar);m[12]=0;m[13]=0;m[14]=rightHanded;m[15]=0;matrix.transpose()}FovToProjection(matrix,fov,rightHanded,
zNear,zFar){return this.FovPortToProjection(matrix,{upTan:Math.tan(fov.upDegrees*Math.PI/180),downTan:Math.tan(fov.downDegrees*Math.PI/180),leftTan:Math.tan(fov.leftDegrees*Math.PI/180),rightTan:Math.tan(fov.rightDegrees*Math.PI/180)},rightHanded,zNear,zFar)}render(scene,camera){this.FovToProjection(this.cameraLeft.projectionMatrix,this.fovLeft,!0,camera.near,camera.far);this.FovToProjection(this.cameraRight.projectionMatrix,this.fovRight,!0,camera.near,camera.far);this.right.set(this.halfIPD,0,0);
this.right.applyQuaternion(camera.quaternion);this.cameraLeft.position.copy(camera.position).sub(this.right);this.cameraRight.position.copy(camera.position).add(this.right);this.cameraLeft.quaternion.copy(camera.quaternion);this.cameraRight.quaternion.copy(camera.quaternion);var dpr=this.renderer.devicePixelRatio||1;camera=this.renderer.domElement.width/2/dpr;dpr=this.renderer.domElement.height/dpr;this.renderer.enableScissorTest(!0);this.renderer.setViewport(0,0,camera,dpr);this.renderer.setScissor(0,
0,camera,dpr);this.renderer.render(scene,this.cameraLeft);this.renderer.setViewport(camera,0,camera,dpr);this.renderer.setScissor(camera,0,camera,dpr);this.renderer.render(scene,this.cameraRight)}}exports.VRRenderer=VRRenderer}
//# sourceMappingURL=module$node_modules$threestrap$src$renderers$VRRenderer.js.map
