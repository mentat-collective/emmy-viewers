{"version":3,"sources":["demo/mathbox.cljs"],"mappings":"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","names":["demo.mathbox/format-number","x","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","demo.mathbox/Cartesian","seq123490","G__123491","cljs.core/first","cljs.core/next","self__4851__auto__","opts","children","cljs.core.update","p__123492","map__123493","cljs.core/--destructure-map","cljs.core.get","y","z","or__4253__auto__","cljs.core.into","mathbox.primitives/Cartesian","p__123494","map__123495","demo.mathbox/Volume","dimensions","vec__123496","cljs.core.nth","width","height","depth","cljs.core.dissoc","cljs.core.assoc","mathbox.primitives/Volume","p__123499","map__123500","demo.mathbox/ColorCube","size","opacity","emit","mathbox.primitives/Point","p__123501","map__123502","demo.mathbox/Function1","samples","f","f'","sicmutils.expression.compile/sci-eval","mathbox.primitives/Interval","_","time","G__123503","G__123504","mathbox.primitives/Line","demo.mathbox/Lagrangian-updater","p__123508","map__123509","seq123505","G__123506","G__123507","state-derivative","initial-state","compile?","map__123510","integrator","equations","sicmutils.numerical.ode/integration-opts","cljs.core/constantly","p__123511","vec__123512","t","state","t2","s","cljs.core.into_array","cljs.core/flatten","output","sicmutils.structure.unflatten","demo.mathbox/Lagrangian-collector","p__123518","map__123519","seq123515","G__123516","G__123517","map__123520","p__123521","vec__123522","steps","out","cljs.core.atom","cljs.core/transient","cljs.core.swap_BANG_","cljs.core/conj!","cljs.core/deref","cljs.core/persistent!","p__123525","map__123526","demo.mathbox/Tail","length","mathbox.primitives/Spread","mathbox.primitives/Array","i","G__123527","G__123528","G__123529","G__123530","mathbox.primitives/Transpose","p__123531","map__123532","demo.mathbox/Comet","path","cljs.core.apply","p__123534","map__123535","demo.mathbox/Mass","state->xyz","L","var-name","render-fn","state-deriv","my-updater","demo.mathbox.Lagrangian_updater","with-let123536","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__85371__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init123537","cljs.core/not","res123538","!state","reagent.core.atom","p1__123533#","nextjournal.clerk.sci-viewer/clerk-eval","cljs.core/List","cljs.core.mapv","cljs.core/sequential?","rec","vec__123539","G__123542","p__123544","map__123545","demo.mathbox/DoubleMass","with-let123546","init123547","res123548","p1__123543#","vec__123549","x1","y1","z1","x2","y2","z2","G__123552","demo.mathbox/two-pi","Math/PI","p__123553","map__123554","demo.mathbox/Ellipse","a","b","c","mathbox.primitives/Area","theta","phi","_i","_j","_time","sin-theta","Math/sin","cos-theta","Math/cos","G__123555","G__123556","G__123557","mathbox.primitives/Surface","demo.mathbox/sq","demo.mathbox/normalize","sicmutils.env/principal-value","demo.mathbox/m","demo.mathbox/g","demo.mathbox/l","demo.mathbox/V","demo.mathbox/potential","demo.mathbox/DoublePendulum","now","G__123558","G__123559","mathbox.primitives/Vector","mathbox.primitives/Slice","demo.mathbox/L","sicmutils.mechanics.lagrange/L-pendulum","demo.mathbox/state-deriv","sicmutils.mechanics.lagrange.Lagrangian__GT_state_derivative","demo.mathbox/Pendulum","with-let123561","init123562","res123563","updater","p1__123560#","vec__123564","G__123567","G__123568","demo.mathbox/WellAxes","mathbox.primitives/Axis","mathbox.primitives/Scale","mathbox.primitives/Format","mathbox.primitives/Label","demo.mathbox/PotentialLine","V","G__123569","G__123570","demo.mathbox/Well","mathbox.primitives/Grid","vec__123571","demo.mathbox/PhaseAxes","demo.mathbox/PhaseVectors","with-let123574","init123575","res123576","demo.mathbox.Lagrangian_collector","q","p","dt","seq__123577","cljs.core/seq","chunk__123578","count__123579","i__123580","vec__123593","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__123596","thetadot","cljs.core.take","G__123590","G__123591","G__123592","demo.mathbox/Phase","vec__123599","demo.mathbox/Hamilton","with-let123602","init123603","res123604","mathbox/Mathbox","mb","three","renderer","js/module$node_modules$three$src$math$Color.Color","mathbox.primitives/Layer","mathbox.primitives/Unit"],"sourcesContent":["(ns demo.mathbox\n  (:require [mathbox]\n            [mathbox.primitives :as box]\n            [nextjournal.clerk.sci-viewer :as sv]\n            [reagent.core :as r :include-macros true]\n            [sicmutils.env :as e]\n            [sicmutils.expression.compile :as xc]\n            [sicmutils.mechanics.lagrange :as l]\n            [sicmutils.numerical.ode :as ode]\n            [sicmutils.structure :as struct]\n            [\"three/src/math/Color.js\" :refer [Color]]))\n\n;; ## Components\n\n(defn format-number [x]\n  (-> x (.toFixed 2) (.replace #\"\\.0+$\" \"\")))\n\n(defn Cartesian [opts & children]\n  (let [opts (update opts :range\n                     (fn [{:keys [x y z]}]\n                       [(or x [0 1])\n                        (or y [0 1])\n                        (or z [0 1])]))]\n    (into [box/Cartesian opts] children)))\n\n(defn Volume\n  \"Like the original, but allows for a 'dimensions' key.\"\n  [{:keys [dimensions] :as opts}]\n  (let [[width height depth] dimensions\n        opts (-> (dissoc opts :dimensions)\n                 (assoc :width width\n                        :height height\n                        :depth depth))]\n    [box/Volume opts]))\n\n;; ## Demo-Specific Components\n;;\n;; These are higher-level components that we'll include for the demos.\n\n(defn ColorCube\n  [{:keys [dimensions size opacity]}]\n  [:<>\n   [Volume\n    {:dimensions dimensions\n     :items 1\n     :channels 4\n     :live false\n     :expr (fn [emit x y z]\n             (emit x y z opacity))}]\n   [box/Point\n    {:points \"<\"\n     :colors \"<\"\n     :color 0xffffff\n     :size size}]])\n\n(defn Function1 [{:keys [samples f] :or {samples 256}}]\n  (let [f' (xc/sci-eval f)]\n    [:<>\n     [box/Interval\n      {:width samples\n       :channels 2\n       :expr (fn [emit x _ time]\n               (emit x (f' x time)))}]\n     [box/Line {:color 0x3090ff :width 4}]\n     [box/Point {:color 0x3090ff :size 8}]]))\n\n(defn Lagrangian-updater\n  \"hardcoded at first for this use case.\"\n  [state-derivative initial-state & {:keys [compile?]\n                                     :or {compile? false}}]\n  (let [{:keys [integrator equations]}\n        (ode/integration-opts (constantly state-derivative)\n                              []\n                              initial-state\n                              {:epsilon 1e-6\n                               :compile? compile?})]\n    (fn [[t :as state] t2]\n      (let [s (into-array (flatten state))\n            output (.solve integrator equations t s t2 nil)]\n        (struct/unflatten (.-y ^js output) state)))))\n\n(defn Lagrangian-collector\n  \"hardcoded at first for this use case.\"\n  [state-derivative initial-state & {:keys [compile?]\n                                     :or {compile? false}}]\n  (let [{:keys [integrator equations]}\n        (ode/integration-opts (constantly state-derivative)\n                              []\n                              initial-state\n                              {:epsilon 1e-6\n                               :compile? compile?})]\n    (set! (.-denseOutput integrator) true)\n    (fn [[t :as state] t2 steps]\n      (let [out (atom (transient []))\n            s   (into-array (flatten state))]\n        (.solve integrator equations t s t2\n                (.grid integrator steps\n                       (fn [_ y]\n                         (swap! out conj! (struct/unflatten y state)))))\n        (persistent! @out)))))\n\n(defn Tail [{:keys [length] :as opts}]\n  [:<>\n   [box/Spread {:height [0 0 -0.02] :alignHeight -1}]\n   ;; Ah, this is the color channel, and fades out the tail as you go.\n   [box/Array\n    {:width length\n     :channels 4\n     :expr (fn [emit i]\n             (emit 1 1 1 (- 1 (/ i 16))))}]\n   [box/Transpose {:order \"yx\"}]\n   [box/Point\n    (-> (dissoc opts :length)\n        (assoc :points \"<<<\"\n               :colors \"<\"))]])\n\n(defn Comet\n  \"Path is a function of i, t\n  dimensions is how many you want to emit\n  history is tail length,\n  rest of options go to the final point\n\n  Note that i think we have to emit with xzy?? weird...\"\n  [{:keys [dimensions path length] :as opts}]\n  [:<>\n   [box/Array\n    {:history length\n     :channels dimensions\n     :expr (fn [emit i t]\n             (apply emit (path i t)))}]\n   [Tail\n    (dissoc opts :dimensions :path)]])\n\n;; NOTE: it comes across the wire ALREADY COMPILED and simplified down\n;; to source.\n(defn Mass [{:keys [state->xyz L initial-state var-name]}]\n  (let [render-fn   (xc/sci-eval state->xyz)\n        state-deriv (xc/sci-eval L)\n        my-updater  (Lagrangian-updater state-deriv initial-state :compile? false)]\n    (r/with-let [!state (r/atom initial-state)]\n      [Comet\n       {:dimensions 3\n        :length 16\n        :color 0x3090ff\n        :size 10\n        :opacity 0.99\n        :path\n        (fn [_ t]\n          (swap! !state #(my-updater % t))\n          (when var-name\n            (sv/clerk-eval\n             (list 'clojure.core/reset!\n                   var-name\n                   (mapv (fn rec [x]\n                           (if (sequential? x)\n                             (mapv rec x)\n                             x))\n                         @!state))))\n          (let [[x y z] (render-fn @!state)]\n            [x z y]))}])))\n\n(defn DoubleMass\n  \"Obviously these should be merged!\"\n  [{:keys [state->xyz L initial-state]}]\n  (let [render-fn   (xc/sci-eval state->xyz)\n        state-deriv (xc/sci-eval L)\n        my-updater  (Lagrangian-updater state-deriv initial-state)]\n    (r/with-let [!state (r/atom initial-state)]\n      [:<>\n       [box/Array\n        {:items 1\n         ;; because we have two items to emit.\n         :width 2\n         :channels 3\n         :history 16\n         :expr\n         (fn [emit _ t]\n           (swap! !state #(my-updater % t))\n           (let [[x1 y1 z1 x2 y2 z2] (render-fn @!state)]\n             (emit x1 z1 y1)\n             (emit x2 z2 y2)))}]\n       [Tail\n        {:length 16\n         :color 0x3090ff\n         :size 10\n         :zIndex 1}]])))\n\n(def ^:private two-pi (* 2 Math/PI))\n\n(defn Ellipse [{:keys [a b c]}]\n  [:<>\n   [box/Area\n    {:width 64\n     :height 64\n     :rangeX [0 two-pi]\n     :rangeY [0 two-pi]\n     :axes [1 3]\n     :expr (fn [emit theta phi _i _j _time]\n             (let [sin-theta (Math/sin theta)\n                   cos-theta (Math/cos theta)]\n               ;; xzy\n               (emit (* a sin-theta (Math/cos phi))\n                     (* c cos-theta)\n                     (* b sin-theta (Math/sin phi)))))\n     :items 1\n     :channels 3}]\n   [box/Surface\n    {:shaded true\n     :opacity 0.2\n     :lineX true\n     :lineY true\n     :points \"<\"\n     :color 0xffffff\n     :width 1}]])\n\n;; ## Hamiltonian Example\n\n(defn sq [x] (* x x))\n(def normalize (e/principal-value Math/PI))\n\n(def m 1)\n(def g 9.8)\n(def l 1)\n\n(defn V [theta]\n  (* -1 m g l (Math/cos theta)))\n\n(def potential V)\n\n(defn DoublePendulum\n  \"For later, here's how to extend this.\"\n  []\n  [:<>\n   [box/Array\n    {:width 2\n     :channels 2\n     :items 3\n     :expr (fn [emit _i now]\n             (emit -1 0)\n             (emit 0 0)\n             (emit (Math/sin now) (- (Math/cos now))))}]\n   ;; attach a bob between the two.\n   [box/Vector {:color 0xffffff :width 2}]\n   ;; JUST attach a point to the second of the two items, ie [1, 2)\n   [box/Slice {:items [0 1]}]\n   [box/Point {:color 0x909090 :size 4}]\n\n   [box/Slice {:items [1 3]}]\n   [box/Point {:color 0xffffff :size 10}]])\n\n(def L\n  (l/L-pendulum 9.8 1 1))\n\n(def state-deriv\n  (l/Lagrangian->state-derivative L))\n\n(defn Pendulum [!state]\n  (r/with-let [updater (Lagrangian-updater state-deriv @!state :compile? true)]\n    [:<>\n     [box/Array\n      {:channels 2\n       :items 2\n       :expr (fn [emit _i now]\n               (swap! !state #(updater % now))\n               (let [[_ theta] @!state\n                     theta     (normalize theta)]\n                 (emit 0 0)\n                 (emit (Math/sin theta)\n                       (- (Math/cos theta)))))}]\n     ;; attach a bob between the two.\n     [box/Vector {:color 0xffffff :width 2}]\n\n     [box/Slice {:items [0 1]}]\n     [box/Point {:color 0x909090 :size 4}]\n\n     [box/Slice {:items [1 2]}]\n     [box/Point {:color 0xffffff :size 10}]]))\n\n\n\n(defn WellAxes []\n  [:<>\n   [box/Axis\n    {:axis \"x\"\n     :color 0xffffff}]\n   [box/Scale\n    {:axis \"x\"\n     :divide 5\n     :unit Math/PI\n     :base 2\n     :start true\n     :end true}]\n   [box/Format\n    {:expr (fn [x] (str (format-number (/ x Math/PI)) \"\u03c0\"))\n     :font [\"Helvetica\"]}]\n   [box/Label\n    {:color 0xffffff\n     :background 0x000000\n     :depth 0.5\n     :zIndex 1\n     :zOrder 5\n     :size 10}]\n   [box/Axis\n    {:axis \"y\" :color 0xffffff}]\n   [box/Scale\n    {:axis \"y\"\n     :divide 5\n     :unit 1\n     :base 10\n     :start true\n     :end true\n     :zero false}]\n   [box/Format\n    {:expr format-number\n     :font [\"Helvetica\"]}]\n   [box/Label\n    {:color 0xffffff\n     :background 0x000000\n     :depth 0.5\n     :zIndex 1\n     :zOrder 5\n     :size 10\n     :offset [20 0]}]\n   ])\n\n(defn PotentialLine [V]\n  [:<>\n   ;; This is the potential well. Gotta redo this to make more sense.\n   [box/Interval\n    {:width 128\n     :channels 2\n     :live false\n     :expr (fn [emit theta]\n             (emit theta (V theta)))}]\n   [box/Line {:color 0x3090ff}]])\n\n(defn Well [!state]\n  [:<>\n   [box/Grid\n    {:color 0x808080\n     :unitX Math/PI\n     :baseX 2}]\n   [WellAxes]\n   [PotentialLine V]\n\n   ;; this is the bead traveling with history along the potential.\n   [Comet\n    {:dimensions 2\n     :length 16\n     :color 0xa0d0ff\n     :size 5\n     :opacity 0.99\n     :path\n     (fn [_ _]\n       (let [[_ theta] @!state]\n         [theta (V theta)]))}]])\n\n(defn PhaseAxes []\n  [:<>\n   [box/Axis\n    {:axis \"x\"\n     :color 0xffffff}]\n   [box/Scale\n    {:axis \"x\"\n     :divide 5\n     :unit 1\n     :base 10\n     :start true\n     :end true}]\n   [box/Format\n    {:expr format-number\n     :font [\"Helvetica\"]}]\n   [box/Label\n    {:color 0xffffff\n     :background 0x000000\n     :depth 0.5\n     :zIndex 1\n     :zOrder 5\n     :size 10}]\n   [box/Axis\n    {:axis \"y\"\n     :color 0xffffff}]\n   [box/Scale\n    {:axis \"y\"\n     :divide 5\n     :unit 1\n     :base 10\n     :start true\n     :end true\n     :zero false}]\n   [box/Format\n    {:expr format-number\n     :font [\"Helvetica\"]}]\n   [box/Label\n    {:color 0xffffff\n     :background 0x000000\n     :depth 0.5\n     :zIndex 1\n     :zOrder 5\n     :size 10\n     :offset [20 0]}]])\n\n(defn PhaseVectors []\n  (r/with-let\n    ;; we are only compiling here because this comes in on the cljs side.\n    [updater (Lagrangian-collector state-deriv [0 0 0] :compile? true)]\n    [:<>\n     [box/Area\n      {:width 16\n       :height 16\n       :channels 2\n       :items 8\n       :centeredX true\n       :centeredY true\n       :live false\n       :expr\n       (fn [emit q p]\n         (let [dt 1.5e-2]\n           (doseq [[_ theta thetadot] (take 8 (updater [0 q p] (* dt 8) dt))]\n             (emit theta thetadot))))}]\n     [box/Vector\n      {:color 0x3090ff\n       :size 5\n       :end true}]]))\n\n(defn Phase [!state]\n  [:<>\n   [box/Grid {:color 0x808080}]\n   [PhaseAxes]\n   [PhaseVectors]\n   [Comet\n    {:dimensions 2\n     :length 16\n     :color 0xa0d0ff\n     :size 10\n     :opacity 0.99\n     :path\n     (fn [_ _]\n       (let [[_ q p] @!state]\n         [q p]))}]])\n\n(defn Hamilton []\n  (r/with-let [!state (r/atom [0 3 0])]\n    [mathbox/Mathbox\n     {:style {:height \"600px\" :width \"100%\"}\n      :options {:plugins [\"core\" \"controls\" \"cursor\" \"stats\"]}\n      :init  (fn [mb]\n               (let [three    (.-three mb)\n                     renderer (.-renderer three)]\n                 (.setClearColor renderer (Color. 0x000000) 1.0)\n                 (.camera mb #js {:proxy true\n                                  :position #js [0 0 20]\n                                  :fov 90})))}\n     [box/Layer\n      [box/Unit {:scale 720 :focus 1}\n       [box/Cartesian\n        {:id \"pendulum\"\n         :range [[-1 1] [-1 1]]\n         :scale [0.25 0.25]\n         :position [-0.5 0.35 0]}\n        [Pendulum !state]]\n\n       [box/Cartesian\n        {:id \"well\"\n         ;; TODO fix our `normalize` so we don't map pi back to negative pi.\n         :range [[(- Math/PI) (- Math/PI 0.00001)]\n                 [-10 10]]\n         :scale [0.48 0.25]\n         :position [-0.5 -0.25 0]}\n        [Well !state]]\n\n       [box/Cartesian\n        {:id \"phase\"\n         :range [[-4 4] [-8 8]]\n         :scale [0.6 0.6]\n         :position [0.6 0]}\n        [Phase !state]]]]]))\n"]}