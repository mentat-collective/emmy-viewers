{"version":3,"sources":["demo/mathbox.cljs"],"mappings":"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","names":["demo.mathbox/default-options","js/module$node_modules$three$examples$jsm$controls$OrbitControls.OrbitControls","demo.mathbox/setup","f","box","and__4251__auto__","cljs.core/not","p__81827","map__81828","cljs.core/--destructure-map","cljs.core.get","demo.mathbox/opts->setup","background-color","camera-position","max-distance","scale","focus","three","temp__5753__auto__","vec__81829","cljs.core.nth","x","y","z","color","js/module$node_modules$three$build$three.Color","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","demo.mathbox/Mathbox","p__81834","map__81835","seq81832","G__81833","cljs.core/first","cljs.core/next","self__4851__auto__","init","style","opts","children","ref","cljs.core/map?","cljs.core/fn?","cljs.core.ex_info","cljs.core.dissoc","cljs.core.update","cljs.core.partial","cljs.core/merge","cljs.core.assoc","cljs.core.into","js/module$node_modules$mathbox_react$build$cjs$index.ContainedMathbox","demo.mathbox/Cartesian","seq81836","G__81837","p__81838","map__81839","or__4253__auto__","js/module$node_modules$mathbox_react$build$cjs$index.Cartesian","p__81841","map__81842","demo.mathbox/Volume","dimensions","vec__81843","width","height","depth","js/module$node_modules$mathbox_react$build$cjs$index.Volume","p__81846","map__81847","demo.mathbox/ColorCube","size","opacity","emit","js/module$node_modules$mathbox_react$build$cjs$index.Point","p__81848","map__81849","demo.mathbox/Function1","samples","f'","sicmutils.expression.compile/sci-eval","js/module$node_modules$mathbox_react$build$cjs$index.Interval","_","time","G__81850","G__81851","js/module$node_modules$mathbox_react$build$cjs$index.Line","demo.mathbox/Lagrangian-updater","state-derivative","initial-state","map__81852","integrator","equations","sicmutils.numerical.ode/integration-opts","cljs.core/constantly","p__81855","vec__81856","t","state","t2","s","cljs.core.into_array","cljs.core/flatten","output","sicmutils.structure.unflatten","p__81865","map__81866","demo.mathbox/Mass","state->xyz","L","var-name","render-fn","state-deriv","my-updater","with-let81867","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__74539__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init81868","res81869","!state","reagent.core.atom","_x","_i","p1__81862#","cljs.core.swap_BANG_","nextjournal.clerk.sci-viewer/clerk-eval","cljs.core/List","cljs.core/deref","cljs.core.mapv","cljs.core/sequential?","rec","vec__81870","x1","y1","z1","G__81873","p__81875","map__81876","demo.mathbox/DoubleMass","with-let81877","init81878","res81879","p1__81874#","vec__81880","x2","y2","z2","G__81883","demo.mathbox/two-pi","Math/PI","p__81884","map__81885","demo.mathbox/Ellipse","a","b","c","js/module$node_modules$mathbox_react$build$cjs$index.Area","theta","phi","_j","_time","sin-theta","Math/sin","cos-theta","Math/cos","G__81886","G__81887","G__81888","js/module$node_modules$mathbox_react$build$cjs$index.Surface"],"sourcesContent":["(ns demo.mathbox\n  (:require [\"mathbox-react\" :as MB]\n            [nextjournal.clerk.sci-viewer :as sv]\n            [reagent.core :as r :include-macros true]\n            [sicmutils.expression.compile :as xc]\n            [sicmutils.numerical.ode :as ode]\n            [sicmutils.structure :as struct]\n            [\"three\" :as THREE]\n            [\"three/examples/jsm/controls/OrbitControls.js\"\n             :as OrbitControls]))\n\n;; TODO take a key for orbitcontrols, trackballcontrols.\n(def default-options\n  {:plugins [\"core\" \"controls\" \"cursor\"]\n   :controls {:klass OrbitControls/OrbitControls}\n   :camera {}})\n\n(defn setup\n  \"Returns a setup function that will only run ONE time.\"\n  [f]\n  (fn [^js box]\n    (when (and box (not (.-created box)))\n      (set! (.-created box) true)\n      (f box))))\n\n(defn opts->setup\n  \"Some core options, tidied up.\"\n  [{:keys [background-color\n           camera-position\n           max-distance\n           scale focus]}]\n  (setup\n   (fn [^js box]\n     (when scale (.set box #js {:scale scale}))\n     (when focus (.set box #js {:focus focus}))\n     (let [three (.-three box)]\n       (when max-distance\n         (-> three .-controls .-maxDistance (set! max-distance)))\n       (when-let [[x y z] camera-position]\n         (-> three .-camera .-position (.set x y z)))\n       (when background-color\n         (let [color (THREE/Color. background-color)]\n           (-> three .-renderer (.setClearColor color 1.0))))))))\n\n;; ## Components\n\n(defn Mathbox\n  \"Same as `ContainedMathBox`, but with setup options.\n\n  TODO for NOW, don't supply `:ref`. But obviously we want to allow that too.\n\n  :style maps to containerStyle.\"\n  [{:keys [init style] :as opts} & children]\n  (let [ref (cond (map? init) (opts->setup init)\n                  (fn? init)  (setup init)\n                  :else      (throw\n                              (ex-info\n                               \"Invalid init.\" {:init init})))\n        opts (-> opts\n                 (dissoc :init :style)\n                 (update :options (partial merge default-options))\n                 (assoc :ref ref\n                        :containerStyle style))]\n    (into [:> MB/ContainedMathbox opts] children)))\n\n(defn Cartesian [opts & children]\n  (let [opts (update opts :range\n                     (fn [{:keys [x y z]}]\n                       [(or x [0 1])\n                        (or y [0 1])\n                        (or z [0 1])]))]\n    (into [:> MB/Cartesian opts] children)))\n\n(defn Volume\n  \"Like the original, but allows for a 'dimensions' key.\"\n  [{:keys [dimensions] :as opts}]\n  (let [[width height depth] dimensions\n        opts (-> (dissoc opts :dimensions)\n                 (assoc :width width\n                        :height height\n                        :depth depth))]\n    [:> MB/Volume opts]))\n\n;; ## Demo-Specific Components\n;;\n;; These are higher-level components that we'll include for the demos.\n\n(defn ColorCube\n  [{:keys [dimensions size opacity]}]\n  [:<>\n   [Volume\n    {:dimensions dimensions\n     :items 1\n     :channels 4\n     :live false\n     :expr (fn [emit x y z]\n             (emit x y z opacity))}]\n   [:> MB/Point\n    {:points \"<\"\n     :colors \"<\"\n     :color 0xffffff\n     :size size}]])\n\n(defn Function1 [{:keys [samples f]\n                  :or {samples 256}}]\n  (let [f' (xc/sci-eval f)]\n    [:<>\n     [:> MB/Interval\n      {:width samples\n       :items 1\n       :channels 2\n       :expr (fn [emit x _ time]\n               (emit x (f' x time)))}]\n     [:> MB/Line {:color 0x3090ff :width 4}]\n     [:> MB/Point {:color 0x3090ff :size 8}]]))\n\n(defn Lagrangian-updater\n  \"hardcoded at first for this use case.\"\n  [state-derivative initial-state]\n  (let [{:keys [integrator equations]}\n        (ode/integration-opts (constantly state-derivative)\n                              []\n                              initial-state\n                              {:epsilon 1e-6\n                               :compile? false})]\n    (fn [[t :as state] t2]\n      (let [s (into-array (flatten state))\n            output (.solve integrator equations t s t2 nil)]\n        (struct/unflatten (.-y ^js output) state)))))\n\n(defn Mass [{:keys [state->xyz L initial-state var-name]}]\n  (let [render-fn   (xc/sci-eval state->xyz)\n        state-deriv (xc/sci-eval L)\n        my-updater  (Lagrangian-updater state-deriv initial-state)]\n    (r/with-let [!state (r/atom initial-state)]\n      [:<>\n       [:> MB/Interval {:width 1\n                        :items 1\n                        :history 20\n                        :expr\n                        (fn [emit _x _i t]\n                          (swap! !state #(my-updater % t))\n                          (when var-name\n                            (sv/clerk-eval\n                             (list 'clojure.core/reset!\n                                   var-name\n                                   (mapv (fn rec [x]\n                                           (if (sequential? x)\n                                             (mapv rec x)\n                                             x))\n                                         @!state))))\n                          (let [[x1 y1 z1] (render-fn @!state)]\n                            (emit x1 z1 y1)))\n                        :channels 3}]\n       [:> MB/Point {:color 0x3090ff\n                     :size 20\n                     :zIndex 1}]])))\n\n(defn DoubleMass\n  \"Obviously these should be merged!\"\n  [{:keys [state->xyz L initial-state]}]\n  (let [render-fn   (xc/sci-eval state->xyz)\n        state-deriv (xc/sci-eval L)\n        my-updater  (Lagrangian-updater state-deriv initial-state)]\n    (r/with-let [!state (r/atom initial-state)]\n      [:<>\n       [:> MB/Interval\n        {;; because we have two items to emit.\n         :width 2\n         :items 1\n         :expr\n         (fn [emit _x _i t]\n           (swap! !state #(my-updater % t))\n           (let [[x1 y1 z1 x2 y2 z2] (render-fn @!state)]\n             (emit x1 z1 y1)\n             (emit x2 z2 y2)))\n         :channels 3}]\n       [:> MB/Point {:color 0x3090ff\n                     :size 20\n                     :zIndex 1}]])))\n\n(def ^:private two-pi (* 2 Math/PI))\n\n(defn Ellipse [{:keys [a b c]}]\n  [:<>\n   [:> MB/Area\n    {:width 64\n     :height 64\n     :rangeX [0 two-pi]\n     :rangeY [0 two-pi]\n     :axes [1 3]\n     :expr (fn [emit theta phi _i _j _time]\n             (let [sin-theta (Math/sin theta)\n                   cos-theta (Math/cos theta)]\n               ;; x y z? I think xzy\n               (emit (* a sin-theta (Math/cos phi))\n                     (* c cos-theta)\n                     (* b sin-theta (Math/sin phi)))))\n     :items 1\n     :channels 3}]\n   [:> MB/Surface {:shaded true\n                   :opacity 0.2\n                   :lineX true\n                   :lineY true\n                   :points \"<\"\n                   :color 0xffffff\n                   :width 1}]])\n"]}