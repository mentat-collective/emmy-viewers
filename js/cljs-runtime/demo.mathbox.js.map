{"version":3,"sources":["demo/mathbox.cljs"],"mappings":"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","names":["demo.mathbox/format-number","x","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","demo.mathbox/Cartesian","seq81997","G__81998","cljs.core/first","cljs.core/next","self__4851__auto__","opts","children","cljs.core.update","p__81999","map__82000","cljs.core/--destructure-map","cljs.core.get","y","z","or__4253__auto__","cljs.core.into","mathbox.primitives/Cartesian","p__82001","map__82002","demo.mathbox/Volume","dimensions","vec__82003","cljs.core.nth","width","height","depth","cljs.core.dissoc","cljs.core.assoc","mathbox.primitives/Volume","p__82006","map__82007","demo.mathbox/ColorCube","size","opacity","emit","mathbox.primitives/Point","p__82008","map__82009","demo.mathbox/Function1","samples","f","f'","sicmutils.expression.compile/sci-eval","mathbox.primitives/Interval","_","time","G__82010","G__82011","mathbox.primitives/Line","demo.mathbox/state-deriv*","g","m","l","sicmutils.mechanics.lagrange.Lagrangian__GT_state_derivative","sicmutils.mechanics.lagrange/L-pendulum","G__82013","demo.mathbox/Lagrangian-updater","js/Error","p__82014","map__82015","state-derivative","initial-state","demo.mathbox.Lagrangian_updater","compile?","parameters","map__82016","integrator","equations","sicmutils.numerical.ode/integration-opts","p__82017","vec__82018","t","state","t2","s","cljs.core.into_array","cljs.core/flatten","output","sicmutils.structure.unflatten","p__82021","map__82022","demo.mathbox/Lagrangian-collector","map__82023","step-size","G__82024","G__82025","p__82026","map__82027","demo.mathbox/Tail","length","mathbox.primitives/Spread","mathbox.primitives/Array","i","G__82028","G__82029","G__82030","G__82031","mathbox.primitives/Transpose","p__82032","map__82033","demo.mathbox/Comet","path","p__82035","map__82036","demo.mathbox/Mass","state->xyz","L","var-name","render-fn","state-deriv","my-updater","with-let82037","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__74980__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init82038","cljs.core/not","res82039","!state","reagent.core.atom","p1__82034#","cljs.core.swap_BANG_","nextjournal.clerk.sci-viewer/clerk-eval","cljs.core/List","cljs.core/deref","cljs.core.mapv","cljs.core/sequential?","rec","vec__82040","G__82043","p__82045","map__82046","demo.mathbox/DoubleMass","with-let82047","init82048","res82049","p1__82044#","vec__82050","x1","y1","z1","x2","y2","z2","G__82053","demo.mathbox/two-pi","Math/PI","p__82054","map__82055","demo.mathbox/Ellipse","a","b","c","mathbox.primitives/Area","theta","phi","_i","_j","_time","sin-theta","Math/sin","cos-theta","Math/cos","G__82056","G__82057","G__82058","mathbox.primitives/Surface","demo.mathbox/sq","demo.mathbox/normalize","sicmutils.env/principal-value","p__82059","vec__82060","demo.mathbox/V","demo.mathbox/DoublePendulum","now","G__82063","G__82064","mathbox.primitives/Vector","mathbox.primitives/Slice","p__82065","map__82066","demo.mathbox/WithSimulator2*","component","!p","js/module$node_modules$react$index.useMemo","cljs.core.atom","cljs.core.apply","cljs.core/array","simulate","js/module$node_modules$react$index.useEffect","cljs.core/reset!","p__82068","map__82069","demo.mathbox/InnerP","p1__82067#","new-state","vec__82070","G__82073","G__82074","demo.mathbox/Pendulum","!params","demo.mathbox/WellAxes","mathbox.primitives/Axis","mathbox.primitives/Scale","mathbox.primitives/Format","mathbox.primitives/Label","demo.mathbox/PotentialLine","V","G__82075","G__82076","G__82077","G__82078","demo.mathbox/Well","mathbox.primitives/Grid","vec__82079","G__82082","G__82083","demo.mathbox/PhaseAxes","p__82084","map__82085","demo.mathbox/PhaseVectors","steps","dt","_t","G__82086","G__82087","G__82088","G__82089","p__82090","map__82091","demo.mathbox/WithSimulator*","demo.mathbox/Phase","vec__82092","q","p","demo.mathbox/Hamilton","with-let82099","init82100","res82101","!items","mathbox/Mathbox","mb","o","gui","js/module$node_modules$dat_DOT_gui$build$dat_gui.GUI","G__82102","p1__82095#","cljs.core/assoc","p1__82096#","p1__82097#","p1__82098#","three","renderer","js/module$node_modules$three$src$math$Color.Color","mathbox.primitives/Layer","mathbox.primitives/Unit"],"sourcesContent":["(ns demo.mathbox\n  (:require [\"dat.gui\" :as dg]\n            [mathbox]\n            [mathbox.primitives :as box]\n            [nextjournal.clerk.sci-viewer :as sv]\n            [reagent.core :as r :include-macros true]\n            [sicmutils.env :as e]\n            [sicmutils.expression.compile :as xc]\n            [sicmutils.mechanics.lagrange :as l]\n            [sicmutils.numerical.ode :as ode]\n            [sicmutils.structure :as struct]\n            [\"react\" :as react]\n            [\"three/src/math/Color.js\" :refer [Color]]))\n\n;; ## Components\n\n(defn format-number [x]\n  (-> x (.toFixed 2) (.replace #\"\\.0+$\" \"\")))\n\n(defn Cartesian [opts & children]\n  (let [opts (update opts :range\n                     (fn [{:keys [x y z]}]\n                       [(or x [0 1])\n                        (or y [0 1])\n                        (or z [0 1])]))]\n    (into [box/Cartesian opts] children)))\n\n(defn Volume\n  \"Like the original, but allows for a 'dimensions' key.\"\n  [{:keys [dimensions] :as opts}]\n  (let [[width height depth] dimensions\n        opts (-> (dissoc opts :dimensions)\n                 (assoc :width width\n                        :height height\n                        :depth depth))]\n    [box/Volume opts]))\n\n;; ## Demo-Specific Components\n;;\n;; These are higher-level components that we'll include for the demos.\n\n(defn ColorCube\n  [{:keys [dimensions size opacity]}]\n  [:<>\n   [Volume\n    {:dimensions dimensions\n     :items 1\n     :channels 4\n     :live false\n     :expr (fn [emit x y z]\n             (emit x y z opacity))}]\n   [box/Point\n    {:points \"<\"\n     :colors \"<\"\n     :color 0xffffff\n     :size size}]])\n\n(defn Function1 [{:keys [samples f] :or {samples 256}}]\n  (let [f' (xc/sci-eval f)]\n    [:<>\n     [box/Interval\n      {:width samples\n       :channels 2\n       :expr (fn [emit x _ time]\n               (emit x (f' x time)))}]\n     [box/Line {:color 0x3090ff :width 4}]\n     [box/Point {:color 0x3090ff :size 8}]]))\n\n(defn state-deriv* [g m l]\n  (l/Lagrangian->state-derivative\n   (l/L-pendulum g m l)))\n\n(defn Lagrangian-updater\n  \"hardcoded at first for this use case.\"\n  ([state-derivative initial-state]\n   (Lagrangian-updater state-derivative initial-state {}))\n  ([state-derivative initial-state {:keys [compile? parameters]\n                                    :or {compile? false}}]\n   (let [{:keys [integrator equations]}\n         (ode/integration-opts state-derivative\n                               parameters\n                               initial-state\n                               {:epsilon 1e-6\n                                :compile? compile?})]\n     (fn [[t :as state] t2]\n       (let [s      (into-array (flatten state))\n             output (.solve integrator equations t s t2 nil)]\n         (-> (.-y ^js output)\n             (struct/unflatten state)))))))\n\n(defn Lagrangian-collector\n  \"hardcoded at first for this use case.\"\n  [state-derivative initial-state {:keys [compile? parameters]\n                                   :or {compile? false}}]\n  (let [{:keys [integrator equations]}\n        (ode/integration-opts state-derivative\n                              parameters\n                              initial-state\n                              {:epsilon 1e-6\n                               :compile? compile?})]\n    (set! (.-denseOutput integrator) true)\n    (fn [state t2 step-size emit]\n      (.solve integrator equations 0 state t2\n              (.grid integrator step-size\n                     (fn [_ y]\n                       (emit (aget y 1) (aget y 2))))))))\n\n(defn Tail [{:keys [length] :as opts}]\n  [:<>\n   [box/Spread {:height [0 0 -0.02] :alignHeight -1}]\n   ;; Ah, this is the color channel, and fades out the tail as you go.\n   [box/Array\n    {:width length\n     :channels 4\n     :expr (fn [emit i]\n             (emit 1 1 1 (- 1 (/ i 16))))}]\n   [box/Transpose {:order \"yx\"}]\n   [box/Point\n    (-> (dissoc opts :length)\n        (assoc :points \"<<<\"\n               :colors \"<\"))]])\n\n(defn Comet\n  \"Path is a function of i, t\n  dimensions is how many you want to emit\n  history is tail length,\n  rest of options go to the final point\n\n  Note that i think we have to emit with xzy?? weird...\"\n  [{:keys [dimensions path length] :as opts}]\n  [:<>\n   [box/Array\n    {:history length\n     :channels dimensions\n     :expr path}]\n   [Tail\n    (dissoc opts :dimensions :path)]])\n\n;; NOTE: it comes across the wire ALREADY COMPILED and simplified down\n;; to source.\n(defn Mass [{:keys [state->xyz L initial-state var-name]}]\n  (let [render-fn   (xc/sci-eval state->xyz)\n        state-deriv (xc/sci-eval L)\n        my-updater  (Lagrangian-updater state-deriv initial-state)]\n    (r/with-let [!state (r/atom initial-state)]\n      [Comet\n       {:dimensions 3\n        :length 16\n        :color 0x3090ff\n        :size 10\n        :opacity 0.99\n        :path\n        (fn [emit _ t]\n          (swap! !state #(my-updater % t))\n          (when var-name\n            (sv/clerk-eval\n             (list 'clojure.core/reset!\n                   var-name\n                   (mapv (fn rec [x]\n                           (if (sequential? x)\n                             (mapv rec x)\n                             x))\n                         @!state))))\n          (let [[x y z] (render-fn @!state)]\n            (emit x z y)))}])))\n\n(defn DoubleMass\n  \"Obviously these should be merged!\"\n  [{:keys [state->xyz L initial-state]}]\n  (let [render-fn   (xc/sci-eval state->xyz)\n        state-deriv (xc/sci-eval L)\n        my-updater  (Lagrangian-updater state-deriv initial-state)]\n    (r/with-let [!state (r/atom initial-state)]\n      [:<>\n       [box/Array\n        {:items 1\n         ;; because we have two items to emit.\n         :width 2\n         :channels 3\n         :history 16\n         :expr\n         (fn [emit _ t]\n           (swap! !state #(my-updater % t))\n           (let [[x1 y1 z1 x2 y2 z2] (render-fn @!state)]\n             (emit x1 z1 y1)\n             (emit x2 z2 y2)))}]\n       [Tail\n        {:length 16\n         :color 0x3090ff\n         :size 10\n         :zIndex 1}]])))\n\n(def ^:private two-pi (* 2 Math/PI))\n\n(defn Ellipse [{:keys [a b c]}]\n  [:<>\n   [box/Area\n    {:width 64\n     :height 64\n     :rangeX [0 two-pi]\n     :rangeY [0 two-pi]\n     :axes [1 3]\n     :expr (fn [emit theta phi _i _j _time]\n             (let [sin-theta (Math/sin theta)\n                   cos-theta (Math/cos theta)]\n               ;; xzy\n               (emit (* a sin-theta (Math/cos phi))\n                     (* c cos-theta)\n                     (* b sin-theta (Math/sin phi)))))\n     :items 1\n     :channels 3}]\n   [box/Surface\n    {:shaded true\n     :opacity 0.2\n     :lineX true\n     :lineY true\n     :points \"<\"\n     :color 0xffffff\n     :width 1}]])\n\n;; ## Hamiltonian Example\n\n(defn sq [x] (* x x))\n(def normalize (e/principal-value Math/PI))\n\n(defn V [[g m l] theta]\n  (* -1 m g l (Math/cos theta)))\n\n(defn DoublePendulum\n  \"For later, here's how to extend this.\"\n  []\n  [:<>\n   [box/Array\n    {:width 2\n     :channels 2\n     :items 3\n     :expr (fn [emit _i now]\n             (emit -1 0)\n             (emit 0 0)\n             (emit (Math/sin now) (- (Math/cos now))))}]\n   ;; attach a bob between the two.\n   [box/Vector {:color 0xffffff :width 2}]\n   ;; JUST attach a point to the second of the two items, ie [1, 2)\n   [box/Slice {:items [0 1]}]\n   [box/Point {:color 0x909090 :size 4}]\n\n   [box/Slice {:items [1 3]}]\n   [box/Point {:color 0xffffff :size 10}]])\n\n;; TODO stop tons of re-renders here from initial state!!\n\n(defn WithSimulator2*\n  \"Takes a component and passes along a simulator...\"\n  [{:keys [state-derivative initial-state parameters] :as opts}\n   component]\n  (let [!p (react/useMemo\n            (fn []\n              (when parameters\n                (atom (apply array parameters))))\n            #js [])\n        simulate (react/useMemo\n                  (fn []\n                    (Lagrangian-updater\n                     state-derivative\n                     initial-state\n                     {:compile? true\n                      :parameters !p}))\n                  #js [state-derivative])]\n    (react/useEffect\n     (fn mount []\n       (reset! !p (apply array parameters)))\n     #js [parameters])\n    [component\n     (-> (dissoc opts :state-derivative :initial-state)\n         (assoc :simulate simulate\n                :parameters !p))]))\n\n(defn InnerP [{:keys [!state simulate parameters] :as opts}]\n  [:<>\n   [box/Array\n    {:channels 2\n     :items 2\n     :expr (fn [emit _i now]\n             (swap! !state #(let [new-state (simulate % now)]\n                              (update new-state 1 normalize)))\n             (let [l (aget @parameters 2)\n                   [_ theta] @!state]\n               (emit 0 0)\n               (emit (* l (Math/sin theta))\n                     (* l (- (Math/cos theta))))))}]\n   ;; attach a bob between the two.\n   [box/Vector {:color 0xffffff :width 2}]\n\n   [box/Slice {:items [0 1]}]\n   [box/Point {:color 0x909090 :size 4}]\n\n   [box/Slice {:items [1 2]}]\n   [box/Point {:color 0xffffff :size 10}]])\n\n(defn Pendulum [!state !params]\n  [:f> WithSimulator2*\n   {:state-derivative state-deriv*\n    :initial-state    @!state\n    :parameters       !params\n    :!state           !state}\n   InnerP]\n\n  #_(r/with-let\n      [updater (Lagrangian-updater\n                state-deriv* @!state {:compile? true\n                                      :parameters (atom #js [9.8 1 1])})]\n      ))\n\n(defn WellAxes []\n  [:<>\n   [box/Axis\n    {:axis \"x\"\n     :color 0xffffff}]\n   [box/Scale\n    {:axis \"x\"\n     :divide 5\n     :unit Math/PI\n     :base 2\n     :start true\n     :end true}]\n   [box/Format\n    {:expr (fn [x] (str (format-number (/ x Math/PI)) \"\u03c0\"))\n     :font [\"Helvetica\"]}]\n   [box/Label\n    {:color 0xffffff\n     :background 0x000000\n     :depth 0.5\n     :zIndex 1\n     :zOrder 5\n     :size 10}]\n   [box/Axis\n    {:axis \"y\" :color 0xffffff}]\n   [box/Scale\n    {:axis \"y\"\n     :divide 5\n     :unit 1\n     :base 10\n     :start true\n     :end true\n     :zero false}]\n   [box/Format\n    {:expr format-number\n     :font [\"Helvetica\"]}]\n   [box/Label\n    {:color 0xffffff\n     :background 0x000000\n     :depth 0.5\n     :zIndex 1\n     :zOrder 5\n     :size 10\n     :offset [20 0]}]\n   ])\n\n(defn PotentialLine [V !params]\n  [:<>\n   ;; This is the potential well. Gotta redo this to make more sense.\n   [box/Interval\n    {:width 128\n     :channels 2\n     :live true\n     :expr (fn [emit theta]\n             (emit theta (V @!params theta)))}]\n   [box/Line {:color 0x3090ff}]])\n\n(defn Well [!state !params]\n  [:<>\n   [box/Grid\n    {:color 0x808080\n     :unitX Math/PI\n     :baseX 2}]\n   [WellAxes]\n   [PotentialLine V !params]\n\n   ;; this is the bead traveling with history along the potential.\n   [Comet\n    {:dimensions 2\n     :length 16\n     :color 0xa0d0ff\n     :size 5\n     :opacity 0.99\n     :path\n     (fn [emit _ _]\n       (let [[_ theta] @!state]\n         (emit theta (V @!params theta))))}]])\n\n(defn PhaseAxes []\n  [:<>\n   [box/Axis\n    {:axis \"x\"\n     :color 0xffffff}]\n   [box/Scale\n    {:axis \"x\"\n     :divide 5\n     :unit 1\n     :base 10\n     :start true\n     :end true}]\n   [box/Format\n    {:expr format-number\n     :font [\"Helvetica\"]}]\n   [box/Label\n    {:color 0xffffff\n     :background 0x000000\n     :depth 0.5\n     :zIndex 1\n     :zOrder 5\n     :size 10}]\n   [box/Axis\n    {:axis \"y\"\n     :color 0xffffff}]\n   [box/Scale\n    {:axis \"y\"\n     :divide 5\n     :unit 1\n     :base 10\n     :start true\n     :end true\n     :zero false}]\n   [box/Format\n    {:expr format-number\n     :font [\"Helvetica\"]}]\n   [box/Label\n    {:color 0xffffff\n     :background 0x000000\n     :depth 0.5\n     :zIndex 1\n     :zOrder 5\n     :size 10\n     :offset [20 0]}]])\n\n(defn PhaseVectors\n  \"Component that takes a simulator and builds an array of phase vectors... todo\n  document!!\"\n  [{:keys [simulate steps dt]\n    :or {steps 8\n         dt 3e-2}}]\n  [:<>\n   [box/Area\n    {:width 16\n     :height 16\n     :channels 2\n     :items steps\n     :centeredX true\n     :centeredY true\n     :live true\n     :expr\n     (let [t2 (* dt (+ 0.01 (dec steps)))]\n       (fn [emit x y _i _j _t]\n         (simulate\n          #js [0 x y] t2 dt emit)))}]\n   [box/Vector\n    {:color 0x3090ff\n     :size 5\n     :end true}]])\n\n(defn WithSimulator*\n  \"Takes a component and passes along a simulator...\"\n  [{:keys [state-derivative initial-state parameters] :as opts}\n   component]\n  (let [!p      (react/useMemo\n                 (fn []\n                   (when parameters\n                     (atom (apply array parameters))))\n                 #js [])\n        simulate (react/useMemo\n                  (fn []\n                    (Lagrangian-collector\n                     state-derivative\n                     initial-state\n                     {:compile? true\n                      :parameters !p}))\n                  #js [state-derivative])]\n    (react/useEffect\n     (fn mount []\n       (reset! !p (apply array parameters)))\n     #js [parameters])\n    [component\n     (-> (dissoc opts :state-derivative :initial-state :parameters)\n         (assoc :simulate simulate))]))\n\n(defn Phase [!state !params steps]\n  [:<>\n   [box/Grid {:color 0x808080}]\n   [PhaseAxes]\n   [:f> WithSimulator*\n    {:state-derivative state-deriv*\n     :initial-state [0 0 0]\n     :parameters !params\n     :steps steps}\n    PhaseVectors]\n   [Comet\n    {:dimensions 2\n     :length 16\n     :color 0xa0d0ff\n     :size 10\n     :opacity 0.99\n     :path\n     (fn [emit _ _]\n       (let [[_ q p] @!state]\n         (emit q p)))}]])\n\n;; TODO: get tex going!\n\n(defn Hamilton []\n  (r/with-let [!state  (r/atom [0 3 0])\n               !params (r/atom [9.8 1 1])\n               !items  (r/atom 8)]\n    [mathbox/Mathbox\n     {:style {:height \"600px\" :width \"100%\"}\n      :options {:plugins [\"core\" \"controls\" \"cursor\" \"stats\"]}\n      :init  (fn [mb]\n               (let [o #js {:length 1\n                            :mass 1\n                            :gravity 9.8\n                            :simSteps 8}\n                     gui (dg/GUI.)]\n                 (doto gui\n                   (-> (.add o \"length\") (.min 0.5) (.max 2) (.step 0.01)\n                       (.onChange #(swap! !params assoc 2 %)))\n\n                   (-> (.add o \"gravity\") (.min 5) (.max 15) (.step 0.01)\n                       (.onChange #(swap! !params assoc 0 %)))\n\n                   (-> (.add o \"mass\") (.min 0.5) (.max 2) (.step 0.01)\n                       (.onChange #(swap! !params assoc 1 %)))\n\n                   (-> (.add o \"simSteps\") (.min 1) (.max 50) (.step 1)\n                       (.onChange #(reset! !items %)))))\n\n               (let [three    (.-three mb)\n                     renderer (.-renderer three)]\n                 (.setClearColor renderer (Color. 0x000000) 1.0)\n                 (.camera mb #js {:proxy true\n                                  :position #js [0 0 20]\n                                  :fov 90})))}\n     [box/Layer\n      [box/Unit {:scale 720 :focus 1}\n       [box/Cartesian\n        {:id \"pendulum\"\n         :range [[-1 1] [-1 1]]\n         :scale [0.25 0.25]\n         :position [-0.5 0.35 0]}\n        [Pendulum !state @!params]]\n\n       [box/Cartesian\n        {:id \"well\"\n         ;; TODO fix our `normalize` so we don't map pi back to negative pi.\n         :range [[(- Math/PI) (- Math/PI 0.00001)]\n                 [-10 10]]\n         :scale [0.48 0.25]\n         :position [-0.5 -0.25 0]}\n        [Well !state !params]]\n\n       [box/Cartesian\n        {:id \"phase\"\n         :range [[-4 4] [-8 8]]\n         :scale [0.6 0.6]\n         :position [0.6 0]}\n        [Phase !state @!params @!items]]]]]))\n"]}