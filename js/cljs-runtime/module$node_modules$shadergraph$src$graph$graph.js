shadow$provide.module$node_modules$shadergraph$src$graph$graph=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Graph=void 0;class Graph{static initClass(){this.IN=this.index=0;this.OUT=1}static id(name){return++Graph.index}constructor(nodes,parent=null){this.parent=parent;this.id=Graph.id();this.nodes=[];nodes&&this.add(nodes)}inputs(){const inputs=[];for(const node of Array.from(this.nodes))for(const outlet of Array.from(node.inputs))null===
outlet.input&&inputs.push(outlet);return inputs}outputs(){const outputs=[];for(const node of Array.from(this.nodes))for(const outlet of Array.from(node.outputs))0===outlet.output.length&&outputs.push(outlet);return outputs}getIn(name){return Array.from(this.inputs()).filter(outlet=>outlet.name===name)[0]}getOut(name){return Array.from(this.outputs()).filter(outlet=>outlet.name===name)[0]}add(node,ignore){if(node.length)for(const _node of Array.from(node))this.add(_node);else{if(node.graph&&!ignore)throw Error("Adding node to two graphs at once");
node.graph=this;this.nodes.push(node)}}remove(node,ignore){if(node.length)for(const _node of Array.from(node))this.remove(_node);else{if(node.graph!==this)throw Error("Removing node from wrong graph.");ignore||node.disconnect();this.nodes.splice(this.nodes.indexOf(node),1);node.graph=null}}adopt(node){if(node.length)for(const _node of Array.from(node))this.adopt(_node);else node.graph.remove(node,!0),this.add(node,!0)}}exports.Graph=Graph;Graph.initClass()}
//# sourceMappingURL=module$node_modules$shadergraph$src$graph$graph.js.map
