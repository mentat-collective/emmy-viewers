{
"version":3,
"file":"module$node_modules$$mentatcollective$jsxgraph$src$parser$ca.js",
"lineCount":44,
"mappings":"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",
"sources":["node_modules/@mentatcollective/jsxgraph/src/parser/ca.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mentatcollective$jsxgraph$src$parser$ca\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jxg = _interopRequireDefault(require(\"../jxg\"));\n\nvar _constants = _interopRequireDefault(require(\"../base/constants\"));\n\nvar _text = _interopRequireDefault(require(\"../base/text\"));\n\nvar _math = _interopRequireDefault(require(\"../math/math\"));\n\nvar _geometry = _interopRequireDefault(require(\"../math/geometry\"));\n\nvar _statistics = _interopRequireDefault(require(\"../math/statistics\"));\n\nvar _type = _interopRequireDefault(require(\"../utils/type\"));\n\nvar _env = _interopRequireDefault(require(\"../utils/env\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n JessieCode Computer algebra algorithms\n\n    Copyright 2011-2019\n        Michael Gerhaeuser,\n        Alfred Wassermann\n\n    JessieCode is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JessieCode is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JessieCode. If not, see <http://www.gnu.org/licenses/>\n    and <http://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true, window: true, console: true, self: true, document: true, parser: true*/\n\n/*jslint nomen: true, plusplus: true*/\n\n/*eslint eqeqeq: \"off\"*/\n\n/**\n * @fileoverview Here, the computer algebra algorithms are implemented.\n */\n\n/**\n * A JessieCode object provides an interface to the parser and stores all variables and objects used within a JessieCode script.\n * The optional argument <tt>code</tt> is interpreted after initializing. To evaluate more code after initializing a JessieCode instance\n * please use {@link JXG.JessieCode#parse}. For code snippets like single expressions use {@link JXG.JessieCode#snippet}.\n * @constructor\n * @param {String} [code] Code to parse.\n * @param {Boolean} [geonext=false] Geonext compatibility mode.\n */\n_jxg.default.CA = function (node, createNode, parser) {\n  this.node = node;\n  this.createNode = createNode;\n  this.parser = parser;\n};\n\n_jxg.default.extend(_jxg.default.CA.prototype,\n/** @lends JXG.CA.prototype */\n{\n  findMapNode: function (mapname, node) {\n    var i, len, ret; //console.log(\"FINDMAP\", node);\n\n    if (node.value === \"op_assign\" && node.children[0].value === mapname) {\n      return node.children[1];\n    } else if (node.children) {\n      len = node.children.length;\n\n      for (i = 0; i < len; ++i) {\n        ret = this.findMapNode(mapname, node.children[i]);\n\n        if (ret !== null) {\n          return ret;\n        }\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Declare all subnodes as math nodes,\n   * i.e recursively set node.isMath = true;\n   */\n  setMath: function (node) {\n    var i, len;\n\n    if (node.type == \"node_op\" && (node.value == \"op_add\" || node.value == \"op_sub\" || node.value == \"op_mul\" || node.value == \"op_div\" || node.value == \"op_neg\" || node.value == \"op_execfun\" || node.value == \"op_exp\") || node.type == \"node_var\" || node.type == \"node_const\") {\n      node.isMath = true;\n    }\n\n    if (node.children) {\n      len = node.children.length;\n\n      for (i = 0; i < len; ++i) {\n        this.setMath(node.children[i]);\n      }\n    }\n  },\n  deriveElementary: function (node, varname) {\n    var fun = node.children[0].value,\n        arg = node.children[1],\n        newNode;\n\n    switch (fun) {\n      case \"abs\":\n        // x / sqrt(x * x)\n        newNode = this.createNode(\"node_op\", \"op_div\", arg[0], this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"sqrt\"), [this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(arg[0]), _type.default.deepCopy(arg[0]))]));\n        break;\n\n      case \"sqrt\":\n        newNode = this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_mul\", this.createNode(\"node_const\", 2.0), this.createNode(node.type, node.value, _type.default.deepCopy(node.children[0]), _type.default.deepCopy(node.children[1]))));\n        break;\n\n      case \"sin\":\n        newNode = this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"cos\"), _type.default.deepCopy(arg));\n        break;\n\n      case \"cos\":\n        newNode = this.createNode(\"node_op\", \"op_neg\", this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"sin\"), _type.default.deepCopy(arg)));\n        break;\n\n      case \"tan\":\n        newNode = this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_exp\", this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"cos\"), _type.default.deepCopy(arg)), this.createNode(\"node_const\", 2)));\n        break;\n\n      case \"cot\":\n        newNode = this.createNode(\"node_op\", \"op_neg\", this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_exp\", this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"sin\"), _type.default.deepCopy(arg)), this.createNode(\"node_const\", 2))));\n        break;\n\n      case \"exp\":\n        newNode = this.createNode(node.type, node.value, _type.default.deepCopy(node.children[0]), _type.default.deepCopy(node.children[1]));\n        break;\n\n      case \"pow\":\n        // (f^g)' = f^g*(f'g/f + g' log(f))\n        newNode = this.createNode(\"node_op\", \"op_mul\", this.createNode(\"node_op\", \"op_execfun\", _type.default.deepCopy(node.children[0]), _type.default.deepCopy(node.children[1])), this.createNode(\"node_op\", \"op_add\", this.createNode(\"node_op\", \"op_mul\", this.derivative(node.children[1][0], varname), this.createNode(\"node_op\", \"op_div\", _type.default.deepCopy(node.children[1][1]), _type.default.deepCopy(node.children[1][0]))), this.createNode(\"node_op\", \"op_mul\", this.derivative(node.children[1][1], varname), this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"log\"), [_type.default.deepCopy(node.children[1][0])]))));\n        break;\n\n      case \"log\":\n      case \"ln\":\n        newNode = this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), // Attention: single variable mode\n        _type.default.deepCopy(arg[0]));\n        break;\n\n      case \"log2\":\n      case \"lb\":\n      case \"ld\":\n        newNode = this.createNode(\"node_op\", \"op_mul\", this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), // Attention: single variable mode\n        _type.default.deepCopy(arg[0])), this.createNode(\"node_const\", 1.4426950408889634) // 1/log(2)\n        );\n        break;\n\n      case \"log10\":\n      case \"lg\":\n        newNode = this.createNode(\"node_op\", \"op_mul\", this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), // Attention: single variable mode\n        _type.default.deepCopy(arg[0])), this.createNode(\"node_const\", 0.43429448190325176) // 1/log(10)\n        );\n        break;\n\n      case \"asin\":\n        newNode = this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"sqrt\"), [this.createNode(\"node_op\", \"op_sub\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(arg[0]), _type.default.deepCopy(arg[0])))]));\n        break;\n\n      case \"acos\":\n        newNode = this.createNode(\"node_op\", \"op_neg\", this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"sqrt\"), [this.createNode(\"node_op\", \"op_sub\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(arg[0]), _type.default.deepCopy(arg[0])))])));\n        break;\n      //case 'atan2':\n\n      case \"atan\":\n        newNode = this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_add\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(arg[0]), _type.default.deepCopy(arg[0]))));\n        break;\n\n      case \"acot\":\n        newNode = this.createNode(\"node_op\", \"op_neg\", this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_add\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(arg[0]), _type.default.deepCopy(arg[0])))));\n        break;\n\n      case \"sinh\":\n        newNode = this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"cosh\"), [_type.default.deepCopy(arg[0])]);\n        break;\n\n      case \"cosh\":\n        newNode = this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"sinh\"), [_type.default.deepCopy(arg[0])]);\n        break;\n\n      case \"tanh\":\n        newNode = this.createNode(\"node_op\", \"op_sub\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_exp\", this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"tanh\"), [_type.default.deepCopy(arg[0])]), this.createNode(\"node_const\", 2.0)));\n        break;\n\n      case \"asinh\":\n        newNode = this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"sqrt\"), [this.createNode(\"node_op\", \"op_add\", this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(arg[0]), _type.default.deepCopy(arg[0])), this.createNode(\"node_const\", 1.0))]));\n        break;\n\n      case \"acosh\":\n        newNode = this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"sqrt\"), [this.createNode(\"node_op\", \"op_sub\", this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(arg[0]), _type.default.deepCopy(arg[0])), this.createNode(\"node_const\", 1.0))]));\n        break;\n\n      case \"atanh\":\n        newNode = this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_sub\", this.createNode(\"node_const\", 1.0), this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(arg[0]), _type.default.deepCopy(arg[0]))));\n        break;\n\n      default:\n        newNode = this.createNode(\"node_const\", 0.0);\n        console.log('Derivative of \"' + fun + '\" not yet implemented');\n        throw new Error(\"Error(\" + this.line + \"): \");\n      //  this._error('Derivative of \"' + fun + '\" not yet implemented');\n    }\n\n    return newNode;\n  },\n  derivative: function (node, varname) {\n    var newNode;\n\n    switch (node.type) {\n      case \"node_op\":\n        switch (node.value) {\n          /*\n          case 'op_map':\n              if (true) {\n                  newNode = this.createNode('node_op', 'op_map',\n                          Type.deepCopy(node.children[0]),\n                          this.derivative(node.children[1], varname)\n                      );\n              } else {\n                  newNode = this.derivative(node.children[1], varname);\n              }\n              break;\n          */\n          case \"op_execfun\":\n            // f'(g(x))g'(x)\n            if (node.children[0].value == \"pow\") {\n              newNode = this.deriveElementary(node, varname);\n            } else {\n              if (node.children[1].length === 0) {\n                newNode = this.createNode(\"node_const\", 0.0);\n              } else {\n                newNode = this.createNode(\"node_op\", \"op_mul\", this.deriveElementary(node, varname), // Warning: single variable mode\n                this.derivative(node.children[1][0], varname));\n              }\n            }\n\n            break;\n\n          case \"op_div\":\n            // (f'g \u2212 g'f )/(g*g)\n            newNode = this.createNode(\"node_op\", \"op_div\", this.createNode(\"node_op\", \"op_sub\", this.createNode(\"node_op\", \"op_mul\", this.derivative(node.children[0], varname), _type.default.deepCopy(node.children[1])), this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(node.children[0]), this.derivative(node.children[1], varname))), this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(node.children[1]), _type.default.deepCopy(node.children[1])));\n            break;\n\n          case \"op_mul\":\n            // fg' + f'g\n            newNode = this.createNode(\"node_op\", \"op_add\", this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(node.children[0]), this.derivative(node.children[1], varname)), this.createNode(\"node_op\", \"op_mul\", this.derivative(node.children[0], varname), _type.default.deepCopy(node.children[1])));\n            break;\n\n          case \"op_neg\":\n            newNode = this.createNode(\"node_op\", \"op_neg\", this.derivative(node.children[0], varname));\n            break;\n\n          case \"op_add\":\n          case \"op_sub\":\n            newNode = this.createNode(\"node_op\", node.value, this.derivative(node.children[0], varname), this.derivative(node.children[1], varname));\n            break;\n\n          case \"op_exp\":\n            // (f^g)' = f^g*(f'g/f + g' log(f))\n            newNode = this.createNode(\"node_op\", \"op_mul\", _type.default.deepCopy(node), this.createNode(\"node_op\", \"op_add\", this.createNode(\"node_op\", \"op_mul\", this.derivative(node.children[0], varname), this.createNode(\"node_op\", \"op_div\", _type.default.deepCopy(node.children[1]), _type.default.deepCopy(node.children[0]))), this.createNode(\"node_op\", \"op_mul\", this.derivative(node.children[1], varname), this.createNode(\"node_op\", \"op_execfun\", this.createNode(\"node_var\", \"log\"), [_type.default.deepCopy(node.children[0])]))));\n            break;\n        }\n\n        break;\n\n      case \"node_var\":\n        //console.log('node_var', node);\n        if (node.value === varname) {\n          newNode = this.createNode(\"node_const\", 1.0);\n        } else {\n          newNode = this.createNode(\"node_const\", 0.0);\n        }\n\n        break;\n\n      case \"node_const\":\n        newNode = this.createNode(\"node_const\", 0.0);\n        break;\n\n      case \"node_const_bool\":\n        break;\n\n      case \"node_str\":\n        break;\n    }\n\n    return newNode;\n  },\n\n  /**\n   * f = map (x) -> x*sin(x);\n   * Usages:\n   * h = D(f, x);\n   * h = map (x) -> D(f, x);\n   *\n   */\n  expandDerivatives: function (node, parent, ast) {\n    var len, i, j, mapNode, codeNode, ret, node2, newNode, mapName, varname, vArray, order;\n    ret = 0;\n\n    if (!node) {\n      return ret;\n    }\n\n    this.line = node.line;\n    this.col = node.col; // First we have to go down in the tree.\n    // This ensures that in cases like D(D(f,x),x) the inner D is expanded first.\n\n    len = node.children.length;\n\n    for (i = 0; i < len; ++i) {\n      if (node.children[i] && node.children[i].type) {\n        node.children[i] = this.expandDerivatives(node.children[i], node, ast);\n      } else if (_type.default.isArray(node.children[i])) {\n        for (j = 0; j < node.children[i].length; ++j) {\n          if (node.children[i][j] && node.children[i][j].type) {\n            node.children[i][j] = this.expandDerivatives(node.children[i][j], node, ast);\n          }\n        }\n      }\n    }\n\n    switch (node.type) {\n      case \"node_op\":\n        switch (node.value) {\n          case \"op_execfun\":\n            if (node.children[0] && node.children[0].value === \"D\") {\n              if (node.children[1][0].type == \"node_var\") {\n                /*\n                 * Derive map, that is compute D(f,x)\n                 * where e.g. f = map (x) -> x^2\n                 *\n                 * First step: find node where the map is defined\n                 */\n                mapName = node.children[1][0].value;\n                mapNode = this.findMapNode(mapName, ast);\n                vArray = mapNode.children[0]; // Variable name for differentiation\n\n                if (node.children[1].length >= 2) {\n                  varname = node.children[1][1].value;\n                } else {\n                  varname = mapNode.children[0][0]; // Usually it's 'x'\n                }\n\n                codeNode = mapNode.children[1];\n              } else {\n                /*\n                 * Derive expression, e.g.\n                 *     D(2*x, x)\n                 */\n                codeNode = node.children[1][0];\n                vArray = [\"x\"]; // Variable name for differentiation and order\n\n                if (node.children[1].length >= 2) {\n                  varname = node.children[1][1].value;\n                } else {\n                  varname = \"x\";\n                }\n              } // Differentiation order\n\n\n              if (node.children[1].length >= 3) {\n                order = node.children[1][2].value;\n              } else {\n                order = 1;\n              } // Create node which contains the derivative\n\n\n              newNode = codeNode; //newNode = this.removeTrivialNodes(newNode);\n\n              if (order >= 1) {\n                while (order >= 1) {\n                  newNode = this.derivative(newNode, varname);\n                  newNode = this.removeTrivialNodes(newNode);\n                  order--;\n                }\n              } // Replace the node containing e.g. D(f,x) by the derivative.\n\n\n              if (parent.type == \"node_op\" && parent.value == \"op_assign\") {\n                // If D is an assignment it has to be replaced by a map\n                // h = D(f, x)\n                node2 = this.createNode(\"node_op\", \"op_map\", vArray, newNode);\n              } else {\n                node2 = newNode;\n              }\n\n              this.setMath(node2);\n              node.type = node2.type;\n              node.value = node2.value;\n              node.children[0] = node2.children[0];\n              node.children[1] = node2.children[1];\n            }\n\n        }\n\n        break;\n\n      case \"node_var\":\n      case \"node_const\":\n      case \"node_const_bool\":\n      case \"node_str\":\n        break;\n    }\n\n    return node;\n  },\n  removeTrivialNodes: function (node) {\n    var i, len, n0, n1, swap; // In case of 'op_execfun' the children[1] node is an array.\n\n    if (_type.default.isArray(node)) {\n      len = node.length;\n\n      for (i = 0; i < len; ++i) {\n        node[i] = this.removeTrivialNodes(node[i]);\n      }\n    }\n\n    if (node.type != \"node_op\" || !node.children) {\n      return node;\n    }\n\n    len = node.children.length;\n\n    for (i = 0; i < len; ++i) {\n      this.mayNotBeSimplified = false;\n\n      do {\n        node.children[i] = this.removeTrivialNodes(node.children[i]);\n      } while (this.mayNotBeSimplified);\n    }\n\n    switch (node.value) {\n      // Allow maps of the form\n      //  map (x) -> x;\n      case \"op_map\":\n        n0 = node.children[0];\n        n1 = node.children[1];\n\n        if (n1.type == \"node_var\") {\n          for (i = 0; i < n0.length; ++i) {\n            // Allow maps of the form map(x) -> x\n            if (n0[i] == n1.value) {\n              n1.isMath = true;\n              break;\n            }\n          }\n        }\n\n        break;\n      // a + 0 -> a\n      // 0 + a -> a\n\n      case \"op_add\":\n        n0 = node.children[0];\n        n1 = node.children[1];\n\n        if (n0.type == \"node_const\" && n0.value === 0.0) {\n          return n1;\n        }\n\n        if (n1.type == \"node_const\" && n1.value === 0.0) {\n          return n0;\n        } // const + const -> const\n\n\n        if (n0.type == \"node_const\" && n1.type == \"node_const\") {\n          n0.value += n1.value;\n          return n0;\n        }\n\n        break;\n      // 1 * a = a\n      // a * 1 = a\n      // a * 0 = 0\n      // 0 * a = 0\n      // - * - = +\n      // Order children\n\n      case \"op_mul\":\n        n0 = node.children[0];\n        n1 = node.children[1];\n\n        if (n0.type == \"node_const\" && n0.value == 1.0) {\n          return n1;\n        }\n\n        if (n1.type == \"node_const\" && n1.value == 1.0) {\n          return n0;\n        }\n\n        if (n0.type == \"node_const\" && n0.value === 0.0) {\n          return n0;\n        }\n\n        if (n1.type == \"node_const\" && n1.value === 0.0) {\n          return n1;\n        }\n\n        if (n1.type == \"node_const\" && n1.value === 0.0) {\n          return n1;\n        } // (-a) * (-b) -> a*b\n\n\n        if (n0.type == \"node_op\" && n0.value == \"op_neg\" && n1.type == \"node_op\" && n1.value == \"op_neg\") {\n          node.children = [n0.children[0], n1.children[0]];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // (-a) * b -> -(a*b)\n\n\n        if (n0.value == \"op_neg\" && n1.value != \"op_neg\") {\n          node.type = \"node_op\";\n          node.value = \"op_neg\";\n          node.children = [this.createNode(\"node_op\", \"op_mul\", n0.children[0], n1)];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // a * (-b) -> -(a*b)\n\n\n        if (n0.value != \"op_neg\" && n1.value == \"op_neg\") {\n          node.type = \"node_op\";\n          node.value = \"op_neg\";\n          node.children = [this.createNode(\"node_op\", \"op_mul\", n0, n1.children[0])];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // (1 / a) * b -> a / b\n\n\n        if (n0.value == \"op_div\" && n0.children[0].type == \"node_const\" && n0.children[0].value == 1.0) {\n          node.type = \"node_op\";\n          node.value = \"op_div\";\n          node.children = [n1, n0.children[1]];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // a * (1 / b) -> a / b\n\n\n        if (n1.value == \"op_div\" && n1.children[0].type == \"node_const\" && n1.children[0].value == 1.0) {\n          node.type = \"node_op\";\n          node.value = \"op_div\";\n          node.children = [n0, n1.children[1]];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // Order children\n        // a * const -> const * a\n\n\n        if (n0.type != \"node_const\" && n1.type == \"node_const\") {\n          node.children = [n1, n0];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // a + (-const) -> -const * a\n\n\n        if (n0.type != \"node_const\" && n1.type == \"node_op\" && n1.value == \"op_neg\" && n1.children[0].type == \"node_const\") {\n          node.children = [n1, n0];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // a * var -> var * a\n        // a * fun -> fun * a\n\n\n        if (n0.type == \"node_op\" && n0.value != \"op_execfun\" && (n1.type == \"node_var\" || n1.type == \"node_op\" && n1.value == \"op_execfun\")) {\n          node.children = [n1, n0];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // a + (-var) -> -var * a\n\n\n        if (n0.type != \"node_op\" && n1.type == \"node_op\" && n1.value == \"op_neg\" && n1.children[0].type == \"node_var\") {\n          node.children = [n1, n0];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // a * (const * b) -> const * (a*b)\n        // a * (const / b) -> const * (a/b)\n\n\n        if (n0.type != \"node_const\" && n1.type == \"node_op\" && (n1.value == \"op_mul\" || n1.value == \"op_div\") && n1.children[0].type == \"node_const\") {\n          swap = n1.children[0];\n          n1.children[0] = n0;\n          node.children = [swap, n1];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // (const * a) * b -> const * (a * b)\n\n\n        if (n1.type != \"node_const\" && n0.type == \"node_op\" && n0.value == \"op_mul\" && n0.children[0].type == \"node_const\") {\n          node.children = [n0.children[0], this.createNode(\"node_op\", \"op_mul\", n0.children[1], n1)];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // const * const -> const\n\n\n        if (n0.type == \"node_const\" && n1.type == \"node_const\") {\n          n0.value *= n1.value;\n          return n0;\n        } // const * (const * a) -> const * a\n        // const * (const / a) -> const / a\n\n\n        if (n0.type == \"node_const\" && n1.type == \"node_op\" && (n1.value == \"op_mul\" || n1.value == \"op_div\") && n1.children[0].type == \"node_const\") {\n          n1.children[0].value *= n0.value;\n          return n1;\n        } // a * a-> a^2\n\n\n        n0.hash = this.parser.compile(n0);\n        n1.hash = this.parser.compile(n1);\n\n        if (n0.hash === n1.hash) {\n          node.value = \"op_exp\";\n          node.children[1] = this.createNode(\"node_const\", 2.0);\n          return node;\n        }\n\n        if (n0.type == \"node_const\" && n1.type == \"node_op\" && (n1.value == \"op_mul\" || n1.value == \"op_div\") && n1.children[0].type == \"node_const\") {\n          n1.children[0].value *= n0.value;\n          return n1;\n        } // a * a^b -> a^(b+1)\n\n\n        if (n1.type == \"node_op\" && n1.value == \"op_exp\") {\n          if (!n0.hash) {\n            n0.hash = this.parser.compile(n0);\n          }\n\n          if (!n1.children[0].hash) {\n            n1.children[0].hash = this.parser.compile(n1.children[0]);\n          }\n\n          if (n0.hash === n1.children[0].hash) {\n            n1.children[1] = this.createNode(\"node_op\", \"op_add\", n1.children[1], this.createNode(\"node_const\", 1.0));\n            this.mayNotBeSimplified = true;\n            return n1;\n          }\n        } // a^b * a^c -> a^(b+c)\n\n\n        if (n0.type == \"node_op\" && n0.value == \"op_exp\" && n1.type == \"node_op\" && n1.value == \"op_exp\") {\n          n0.children[0].hash = this.parser.compile(n0.children[0]);\n          n1.children[0].hash = this.parser.compile(n1.children[0]);\n\n          if (n0.children[0].hash === n1.children[0].hash) {\n            n0.children[1] = this.createNode(\"node_op\", \"op_add\", n0.children[1], n1.children[1]);\n            this.mayNotBeSimplified = true;\n            return n0;\n          }\n        }\n\n        break;\n      // 0 - a -> -a\n      // a - 0 -> a\n      // a - a -> 0\n\n      case \"op_sub\":\n        n0 = node.children[0];\n        n1 = node.children[1];\n\n        if (n0.type == \"node_const\" && n0.value === 0.0) {\n          node.value = \"op_neg\";\n          node.children[0] = n1;\n          return node;\n        }\n\n        if (n1.type == \"node_const\" && n1.value === 0.0) {\n          return n0;\n        }\n\n        if (n0.type == \"node_const\" && n1.type == \"node_const\" && n0.value == n1.value) {\n          return this.createNode(\"node_const\", 0.0);\n        }\n\n        if (n0.type == \"node_var\" && n1.type == \"node_var\" && n0.value == n1.value) {\n          return this.createNode(\"node_const\", 0.0);\n        } // const - const -> const\n\n\n        if (n0.type == \"node_const\" && n1.type == \"node_const\") {\n          n0.value -= n1.value;\n          return n0;\n        } // const * a - const * a -> const * a\n\n\n        if (n0.type == \"node_op\" && n0.value == \"op_mul\" && n1.type == \"node_op\" && n1.value == \"op_mul\") {\n          n0.children[1].hash = this.parser.compile(n0.children[1]);\n          n1.children[1].hash = this.parser.compile(n1.children[1]);\n\n          if (n0.children[1].hash === n1.children[1].hash) {\n            node.value = \"op_mul\";\n            node.children = [this.createNode(\"node_op\", \"op_sub\", n0.children[0], n1.children[0]), n0.children[1]];\n            this.mayNotBeSimplified = true;\n            return node;\n          }\n        } // const * a - a -> (const - 1) * a\n\n\n        if (n0.type == \"node_op\" && n0.value == \"op_mul\") {\n          n0.children[1].hash = this.parser.compile(n0.children[1]);\n          n1.hash = this.parser.compile(n1);\n\n          if (n0.children[1].hash === n1.hash) {\n            node.value = \"op_mul\";\n            node.children = [this.createNode(\"node_op\", \"op_sub\", n0.children[0], this.createNode(\"node_const\", 1.0)), n1];\n            this.mayNotBeSimplified = true;\n            return node;\n          }\n        } // a - const*a -> (const - 1) * a\n\n\n        if (n1.type == \"node_op\" && n1.value == \"op_mul\") {\n          n1.children[1].hash = this.parser.compile(n1.children[1]);\n          n0.hash = this.parser.compile(n0);\n\n          if (n1.children[1].hash === n0.hash) {\n            node.value = \"op_mul\";\n            node.children = [this.createNode(\"node_op\", \"op_sub\", this.createNode(\"node_const\", 1.0), n1.children[0]), n0];\n            this.mayNotBeSimplified = true;\n            return node;\n          }\n        }\n\n        break;\n      // -0 -> 0\n      // -(-b) = b\n\n      case \"op_neg\":\n        n0 = node.children[0];\n\n        if (n0.type == \"node_const\" && n0.value === 0.0) {\n          return n0;\n        }\n\n        if (n0.type == \"node_op\" && n0.value == \"op_neg\") {\n          return n0.children[0];\n        }\n\n        break;\n      // a / a -> 1, a != 0\n      // 0 / a -> 0, a != 0\n      // a / 0 -> Infinity, a != 0\n      // 0 / 0 -> NaN, a == 0\n\n      case \"op_div\":\n        n0 = node.children[0];\n        n1 = node.children[1];\n\n        if (n0.type == \"node_const\" && n1.type == \"node_const\" && n0.value == n1.value && n0.value !== 0) {\n          n0.value = 1.0;\n          return n0;\n        }\n\n        if (n0.type == \"node_const\" && n0.value === 0 && n1.type == \"node_const\" && n1.value !== 0) {\n          n0.value = 0.0;\n          return n0;\n        } // Risky: 0 / (something != 0) -> 0.0\n\n\n        if (n0.type == \"node_const\" && n0.value === 0 && (n1.type == \"node_op\" || n1.type == \"node_var\")) {\n          node.type = \"node_const\";\n          node.value = 0.0;\n          return node;\n        }\n\n        if (n0.type == \"node_var\" && n1.type == \"node_var\" && n0.value == n1.value) {\n          return this.createNode(\"node_const\", 1.0);\n        }\n\n        if (n0.type == \"node_const\" && n0.value !== 0 && n1.type == \"node_const\" && n1.value === 0) {\n          if (n0.value > 0.0) {\n            n0.value = Infinity;\n          } else {\n            n0.value = -Infinity; // Do we ever need this?\n          }\n\n          return n0;\n        } // (-a) / (-b) -> a/b\n\n\n        if (n0.type == \"node_op\" && n0.value == \"op_neg\" && n1.type == \"node_op\" && n1.value == \"op_neg\") {\n          node.children = [n0.children[0], n1.children[0]];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // (-a) / b -> -(a/b)\n\n\n        if (n0.value == \"op_neg\" && n1.value != \"op_neg\") {\n          node.type = \"node_op\";\n          node.value = \"op_neg\";\n          node.children = [this.createNode(\"node_op\", \"op_div\", n0.children[0], n1)];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // a / (-b) -> -(a/b)\n\n\n        if (n0.value != \"op_neg\" && n1.value == \"op_neg\") {\n          node.type = \"node_op\";\n          node.value = \"op_neg\";\n          node.children = [this.createNode(\"node_op\", \"op_div\", n0, n1.children[0])];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // a^b / a -> a^(b-1)\n\n\n        if (n0.type == \"node_op\" && n0.value == \"op_exp\") {\n          if (!n1.hash) {\n            n1.hash = this.parser.compile(n1);\n          }\n\n          if (!n0.children[0].hash) {\n            n0.children[0].hash = this.parser.compile(n0.children[0]);\n          }\n\n          if (n1.hash === n0.children[0].hash) {\n            n0.children[1] = this.createNode(\"node_op\", \"op_sub\", n0.children[1], this.createNode(\"node_const\", 1.0));\n            this.mayNotBeSimplified = true;\n            return n0;\n          }\n        } // (const * a) / b -> const * (a / b)\n\n\n        if (n1.type != \"node_const\" && n0.type == \"node_op\" && n0.value == \"op_mul\" && n0.children[0].type == \"node_const\") {\n          node.value = \"op_mul\";\n          node.children = [n0.children[0], this.createNode(\"node_op\", \"op_div\", n0.children[1], n1)];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // a^b / a^c -> a^(b-c)\n\n\n        if (n0.type == \"node_op\" && n0.value == \"op_exp\" && n1.type == \"node_op\" && n1.value == \"op_exp\") {\n          n0.children[0].hash = this.parser.compile(n0.children[0]);\n          n1.children[0].hash = this.parser.compile(n1.children[0]);\n\n          if (n0.children[0].hash === n1.children[0].hash) {\n            n0.children[1] = this.createNode(\"node_op\", \"op_sub\", n0.children[1], n1.children[1]);\n            this.mayNotBeSimplified = true;\n            return n0;\n          }\n        }\n\n        break;\n      // a^0 = 1\n      // a^1 -> a\n      // 1^a -> 1\n      // 0^a -> 0: a const != 0\n\n      case \"op_exp\":\n        n0 = node.children[0];\n        n1 = node.children[1];\n\n        if (n1.type == \"node_const\" && n1.value === 0.0) {\n          n1.value = 1.0;\n          return n1;\n        }\n\n        if (n1.type == \"node_const\" && n1.value == 1.0) {\n          return n0;\n        }\n\n        if (n0.type == \"node_const\" && n0.value == 1.0) {\n          return n0;\n        }\n\n        if (n0.type == \"node_const\" && n0.value === 0.0 && n1.type == \"node_const\" && n1.value !== 0.0) {\n          return n0;\n        } // (a^b)^c -> a^(b*c)\n\n\n        if (n0.type == \"node_op\" && n0.value == \"op_exp\") {\n          node.children = [n0.children[0], this.createNode(\"node_op\", \"op_mul\", n0.children[1], n1)];\n          return node;\n        }\n\n        break;\n    }\n\n    switch (node.value) {\n      // const_1 + const_2 -> (const_1 + const_2)\n      // a + a -> 2*a\n      // a + (-b) = a - b\n      case \"op_add\":\n        n0 = node.children[0];\n        n1 = node.children[1];\n\n        if (n0.type == \"node_const\" && n1.type == \"node_const\" && n0.value == n1.value) {\n          n0.value += n1.value;\n          return n0;\n        }\n\n        if (n0.type == \"node_var\" && n1.type == \"node_var\" && n0.value == n1.value) {\n          node.children[0] = this.createNode(\"node_const\", 2.0);\n          node.value = \"op_mul\";\n          return node;\n        }\n\n        if (n0.type == \"node_op\" && n0.value == \"op_neg\") {\n          node.value = \"op_sub\";\n          node.children[0] = n1;\n          node.children[1] = n0.children[0];\n          this.mayNotBeSimplified = true;\n          return node;\n        }\n\n        if (n1.type == \"node_op\" && n1.value == \"op_neg\") {\n          node.value = \"op_sub\";\n          node.children[1] = n1.children[0];\n          this.mayNotBeSimplified = true;\n          return node;\n        } // const * a + const * a -> const * a\n\n\n        if (n0.type == \"node_op\" && n0.value == \"op_mul\" && n1.type == \"node_op\" && n1.value == \"op_mul\") {\n          n0.children[1].hash = this.parser.compile(n0.children[1]);\n          n1.children[1].hash = this.parser.compile(n1.children[1]);\n\n          if (n0.children[1].hash === n1.children[1].hash) {\n            node.value = \"op_mul\";\n            node.children = [this.createNode(\"node_op\", \"op_add\", n0.children[0], n1.children[0]), n0.children[1]];\n            this.mayNotBeSimplified = true;\n            return node;\n          }\n        } // const * a + a -> (const + 1) * a\n\n\n        if (n0.type == \"node_op\" && n0.value == \"op_mul\") {\n          n0.children[1].hash = this.parser.compile(n0.children[1]);\n          n1.hash = this.parser.compile(n1);\n\n          if (n0.children[1].hash === n1.hash) {\n            node.value = \"op_mul\";\n            node.children = [this.createNode(\"node_op\", \"op_add\", n0.children[0], this.createNode(\"node_const\", 1.0)), n1];\n            this.mayNotBeSimplified = true;\n            return node;\n          }\n        } // a + const*a -> (const + 1) * a\n\n\n        if (n1.type == \"node_op\" && n1.value == \"op_mul\") {\n          n1.children[1].hash = this.parser.compile(n1.children[1]);\n          n0.hash = this.parser.compile(n0);\n\n          if (n1.children[1].hash === n0.hash) {\n            node.value = \"op_mul\";\n            node.children = [this.createNode(\"node_op\", \"op_add\", this.createNode(\"node_const\", 1.0), n1.children[0]), n0];\n            this.mayNotBeSimplified = true;\n            return node;\n          }\n        }\n\n        break;\n      // a - (-b) = a + b\n\n      case \"op_sub\":\n        n0 = node.children[0];\n        n1 = node.children[1];\n\n        if (n1.type == \"node_op\" && n1.value == \"op_neg\") {\n          node.value = \"op_add\";\n          node.children[1] = n1.children[0];\n          this.mayNotBeSimplified = true;\n          return node;\n        }\n\n        break;\n\n      case \"op_execfun\":\n        return this.simplifyElementary(node);\n    }\n\n    return node;\n  },\n  simplifyElementary: function (node) {\n    var fun = node.children[0].value,\n        arg = node.children[1]; // Catch errors of the form sin()\n\n    if (arg.length == 0) {\n      return node;\n    }\n\n    switch (fun) {\n      // sin(0) -> 0\n      // sin(PI) -> 0\n      // sin (int * PI) -> 0\n      // sin (PI * int) -> 0\n      // Same for tan()\n      case \"sin\":\n      case \"tan\":\n        if (arg[0].type == \"node_const\" && arg[0].value === 0) {\n          node.type = \"node_const\";\n          node.value = 0.0;\n          return node;\n        }\n\n        if (arg[0].type == \"node_var\" && arg[0].value == \"PI\") {\n          node.type = \"node_const\";\n          node.value = 0.0;\n          return node;\n        }\n\n        if (arg[0].type == \"node_op\" && arg[0].value == \"op_mul\" && arg[0].children[0].type == \"node_const\" && arg[0].children[0].value % 1 === 0 && arg[0].children[1].type == \"node_var\" && arg[0].children[1].value == \"PI\") {\n          node.type = \"node_const\";\n          node.value = 0.0;\n          return node;\n        }\n\n        break;\n      // cos(0) -> 1.0\n      // cos(PI) -> -1.0\n      // cos(int * PI) -> +/- 1.0\n      // cos(PI * int) -> +/- 1.0\n\n      case \"cos\":\n        if (arg[0].type == \"node_const\" && arg[0].value === 0) {\n          node.type = \"node_const\";\n          node.value = 1.0;\n          return node;\n        }\n\n        if (arg[0].type == \"node_var\" && arg[0].value == \"PI\") {\n          node.type = \"node_op\";\n          node.value = \"op_neg\";\n          node.children = [this.createNode(\"node_const\", 1.0)];\n          return node;\n        }\n        /*\n        if (arg[0].type == 'node_op' && arg[0].value == 'op_mul' &&\n            ((arg[0].children[0].type == 'node_const' && arg[0].children[0].value % 1 === 0 &&\n             arg[0].children[1].type == 'node_var' && arg[0].children[1].value == 'PI') ||\n             (arg[0].children[1].type == 'node_const' && arg[0].children[1].value % 1 === 0 &&\n              arg[0].children[0].type == 'node_var' && arg[0].children[0].value == 'PI'))) {\n            node.type = 'node_const';\n            node.value = 1.0;\n            return node;\n        }\n        */\n\n\n        break;\n      // exp(0) -> 1\n\n      case \"exp\":\n        if (arg[0].type == \"node_const\" && arg[0].value === 0) {\n          node.type = \"node_const\";\n          node.value = 1.0;\n          return node;\n        }\n\n        break;\n      // pow(a, 0) -> 1\n\n      case \"pow\":\n        if (arg[1].type == \"node_const\" && arg[1].value === 0) {\n          node.type = \"node_const\";\n          node.value = 1.0;\n          return node;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n});\n\nvar _default = _jxg.default.CA;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_jxg","_type","CA","_jxg.default.CA","node","createNode","parser","extend","prototype","findMapNode","mapname","i","children","len","length","ret","setMath","type","isMath","deriveElementary","varname","fun","arg","newNode","deepCopy","derivative","console","log","Error","line","expandDerivatives","parent","ast","j","col","isArray","mapName","mapNode","vArray","codeNode","order","removeTrivialNodes","node2","mayNotBeSimplified","n0","n1","swap","hash","compile","Infinity","simplifyElementary"]
}
