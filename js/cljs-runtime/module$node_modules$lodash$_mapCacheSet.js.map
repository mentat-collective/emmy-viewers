{
"version":3,
"file":"module$node_modules$lodash$_mapCacheSet.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACpG,IAAIC,WAAaH,OAAA,CAAQ,wCAAR,CAqBjBC,OAAOC,CAAAA,OAAP,CATAE,QAAoB,CAACC,GAAD,CAAMC,KAAN,CAAa,CAAA,IAC3BC,KAAOJ,UAAA,CAAW,IAAX,CAAiBE,GAAjB,CADoB,CAE3BG,KAAOD,IAAKC,CAAAA,IAEhBD,KAAKE,CAAAA,GAAL,CAASJ,GAAT,CAAcC,KAAd,CACA,KAAKE,CAAAA,IAAL,EAAaD,IAAKC,CAAAA,IAAL,EAAaA,IAAb,CAAoB,CAApB,CAAwB,CACrC,OAAO,KANwB,CAbmE;",
"sources":["node_modules/lodash/_mapCacheSet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_mapCacheSet\"] = function(global,require,module,exports) {\nvar getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n\n};"],
"names":["shadow$provide","global","require","module","exports","getMapData","mapCacheSet","key","value","data","size","set"]
}
