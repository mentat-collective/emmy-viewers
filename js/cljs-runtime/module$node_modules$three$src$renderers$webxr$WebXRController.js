shadow$provide.module$node_modules$three$src$renderers$webxr$WebXRController=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.WebXRController=void 0;var _Vector=require("module$node_modules$three$src$math$Vector3"),_Group=require("module$node_modules$three$src$objects$Group");const _moveEvent={type:"move"};class WebXRController{constructor(){this._hand=this._grip=this._targetRay=null}getHandSpace(){null===this._hand&&(this._hand=new _Group.Group,
this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1});return this._hand}getTargetRaySpace(){null===this._targetRay&&(this._targetRay=new _Group.Group,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new _Vector.Vector3,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new _Vector.Vector3);return this._targetRay}getGripSpace(){null===this._grip&&
(this._grip=new _Group.Group,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new _Vector.Vector3,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new _Vector.Vector3);return this._grip}dispatchEvent(event){null!==this._targetRay&&this._targetRay.dispatchEvent(event);null!==this._grip&&this._grip.dispatchEvent(event);null!==this._hand&&this._hand.dispatchEvent(event);return this}disconnect(inputSource){this.dispatchEvent({type:"disconnected",
data:inputSource});null!==this._targetRay&&(this._targetRay.visible=!1);null!==this._grip&&(this._grip.visible=!1);null!==this._hand&&(this._hand.visible=!1);return this}update(inputSource,frame,referenceSpace){let inputPose=null,gripPose=null,handPose=null;const targetRay=this._targetRay,grip=this._grip,hand=this._hand;if(inputSource&&"visible-blurred"!==frame.session.visibilityState)if(null!==targetRay&&(inputPose=frame.getPose(inputSource.targetRaySpace,referenceSpace),null!==inputPose&&(targetRay.matrix.fromArray(inputPose.transform.matrix),
targetRay.matrix.decompose(targetRay.position,targetRay.rotation,targetRay.scale),inputPose.linearVelocity?(targetRay.hasLinearVelocity=!0,targetRay.linearVelocity.copy(inputPose.linearVelocity)):targetRay.hasLinearVelocity=!1,inputPose.angularVelocity?(targetRay.hasAngularVelocity=!0,targetRay.angularVelocity.copy(inputPose.angularVelocity)):targetRay.hasAngularVelocity=!1,this.dispatchEvent(_moveEvent))),hand&&inputSource.hand){handPose=!0;for(const inputjoint of inputSource.hand.values()){const jointPose=
frame.getJointPose(inputjoint,referenceSpace);if(void 0===hand.joints[inputjoint.jointName]){var joint=new _Group.Group;joint.matrixAutoUpdate=!1;joint.visible=!1;hand.joints[inputjoint.jointName]=joint;hand.add(joint)}joint=hand.joints[inputjoint.jointName];null!==jointPose&&(joint.matrix.fromArray(jointPose.transform.matrix),joint.matrix.decompose(joint.position,joint.rotation,joint.scale),joint.jointRadius=jointPose.radius);joint.visible=null!==jointPose}frame=hand.joints["index-finger-tip"].position.distanceTo(hand.joints["thumb-tip"].position);
hand.inputState.pinching&&.025<frame?(hand.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:inputSource.handedness,target:this})):!hand.inputState.pinching&&.015>=frame&&(hand.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:inputSource.handedness,target:this}))}else null!==grip&&inputSource.gripSpace&&(gripPose=frame.getPose(inputSource.gripSpace,referenceSpace),null!==gripPose&&(grip.matrix.fromArray(gripPose.transform.matrix),grip.matrix.decompose(grip.position,
grip.rotation,grip.scale),gripPose.linearVelocity?(grip.hasLinearVelocity=!0,grip.linearVelocity.copy(gripPose.linearVelocity)):grip.hasLinearVelocity=!1,gripPose.angularVelocity?(grip.hasAngularVelocity=!0,grip.angularVelocity.copy(gripPose.angularVelocity)):grip.hasAngularVelocity=!1));null!==targetRay&&(targetRay.visible=null!==inputPose);null!==grip&&(grip.visible=null!==gripPose);null!==hand&&(hand.visible=null!==handPose);return this}}exports.WebXRController=WebXRController}
//# sourceMappingURL=module$node_modules$three$src$renderers$webxr$WebXRController.js.map
