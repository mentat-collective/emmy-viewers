shadow$provide.module$node_modules$mathbox$build$esm$render$meshes$screen=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Screen=void 0;global=require("module$node_modules$mathbox$build$esm$render$meshes$base");var _constants=require("module$node_modules$three$src$constants"),_Mesh=require("module$node_modules$three$src$objects$Mesh"),_screengeometry=require("module$node_modules$mathbox$build$esm$render$geometry$screengeometry");class Screen extends global.Base{constructor(renderer,
shaders,options){super(renderer,shaders,options);let {uniforms}=options;const {map,combine,stpq,linear}=options;null==uniforms&&(uniforms={});renderer=null!=uniforms.styleColor;this.geometry=new _screengeometry.ScreenGeometry({width:options.width,height:options.height});this._adopt(uniforms);this._adopt(this.geometry.uniforms);shaders=shaders.material();options=shaders.vertex;options.pipe("raw.position.scale",this.uniforms);options.fan();options.pipe("stpq.xyzw.2d",this.uniforms);options.next();options.pipe("screen.position",
this.uniforms);options.join();shaders.fragment=renderer=this._fragmentColor(renderer,!1,null,null,map,2,stpq,combine,linear);renderer.pipe("fragment.color",this.uniforms);renderer=shaders.link({side:_constants.DoubleSide});this.material=this._material(renderer);shaders=new _Mesh.Mesh(this.geometry,this.material);shaders.frustumCulled=!1;shaders.userData=renderer;this._raw(shaders);this.renders=[shaders]}dispose(){this.geometry.dispose();this.material.dispose();this.renders=this.geometry=this.material=
null;return super.dispose()}}exports.Screen=Screen}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$render$meshes$screen.js.map
