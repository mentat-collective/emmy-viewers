{"version":3,"sources":["rewrite_clj/parser/keyword.cljc"],"mappings":";;AAMA,2CAAA,3CAAMA,8FACkBC;AADxB,AAEE,AAACC,0BAAcD;;AACf,IAAAE,qBAAW,AAACE,wBAAYJ;AAAxB,AAAA,oBAAAE;AAAA,QAAAA,JAASC;AAAT,AACE,GAAI,+CAAA,/CAACE,6CAAEF;AACL,AACE,AAACG,wBAAYN;;AACb,mHAAA,5GAACO,oEACA,AAACC,gCAAoBR;;AAExB,OAACO,oEAAsB,AAACC,gCAAoBR;;;AAC9C,8CAAA,vCAACS,gCAAoBT","names":["rewrite-clj.parser.keyword/parse-keyword","reader","rewrite-clj.reader/ignore","temp__5751__auto__","c","rewrite-clj.reader/peek","cljs.core._EQ_","rewrite-clj.reader/next","rewrite_clj.node.keyword.keyword_node","rewrite-clj.reader/read-keyword","rewrite-clj.reader/throw-reader"],"sourcesContent":["(ns ^:no-doc rewrite-clj.parser.keyword\n  (:require [rewrite-clj.node.keyword :as nkeyword]\n            [rewrite-clj.reader :as reader]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn parse-keyword\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader)\n  (if-let [c (reader/peek reader)]\n    (if (= c \\:)\n      (do\n        (reader/next reader)\n        (nkeyword/keyword-node\n         (reader/read-keyword reader)\n         true))\n      (nkeyword/keyword-node (reader/read-keyword reader)))\n    (reader/throw-reader reader \"unexpected EOF while reading keyword.\")))\n"]}