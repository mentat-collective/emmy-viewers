{"version":3,"sources":["devtools/hints.cljs"],"mappings":";;AAQA,AAEA,kCAAA,lCAAgBA;AAAhB,AAAA;;AA0BA,uCAAA,vCAAeC;AACf,2DAAA,3DAAeC;AACf,qEAAA,rEAAeC;AAEf,AAAKC,kCAAiB,yBAAA,zBAACC;AAIvB,4CAAA,5CAAMC,gGAAuBC;AAA7B,AACE,OAACC,uBAAQJ,gCAAiBG;;AAE5B,4CAAA,5CAAME;AAAN,AACE,IAAAC,qBAAA,AAAAC,gBAAcP;AAAd,AAAA,oBAAAM;AAAA,UAAAA,NAASH;AAAT,AACEA;;AACA,GAAI,QAAAK;AACF,OAACN,0CAAsB,KAAAM;;AADzB;;;;AAKJ,8BAAA,9BAAMC,oEAAcC;AAApB,AACE,GAAI,AAACC,uBAAOD;AAAZ;;AAAqBA;;;AAEvB,6BAAA,7BAAME,kEAAaC;AAAnB,AACE,IAAMC,MAAI,KAAAC;AAAV,AACE,SAAA,UAAA,nBAAOD,eAAUD;;AACjB,AAAOC;;AACP,OAACL,4BAAa,AAAgBK;;AAElC,4CAAA,5CAAME,gGAA4BC;AAAlC,AACE,IAAMC,SAAO,iBAAAC,mBAAI,oBAAA,pBAACC;AAAL,AAAA,oBAAAD;AAAAA;;AAAwBP;;;AAArC,AACE,QAACM,uCAAAA,8CAAAA,TAAOD,0BAAAA;;AAEZ,0BAAA,1BAAMI,4DAAUC,MAAMC;AAAtB,AACE,QAAgBD,MAAM,eAAA,dAAKC;;AAE7B,gCAAA,hCAAMC,wEAAgBC,QAAQH,MAAMC,YAAYG;AAAhD,AACE,GAAI,EAAI,CAAG,AAACC,gBAAMF,WAASC,iBACnB,GAAK,eAAA,dAAMH;AACjBE;;AACA,IAAMG,mBAAiB,eAAA,dAAKL;IACtBM,YAAU,AAACR,wBAASC,MAAMM;IAC1BE,cAAY,wDAAA,XAAKD,4DAAeJ;AAFtC,AAGE,QAACD,8DAAAA,6GAAAA,jDAAeM,yFAAAA,7EAAYR,yFAAAA,nFAAMM,yFAAAA,xEAAiBF,yFAAAA;;;AAEzD,4CAAA,5CAAMK,gGAA4BC,KAAKC;AAAvC,AACE,IAAMC,IAAE,UAAA,TAAKD;IACPE,SAAO,eAAA,fAAYH,mBAAOE;IAC1BE,UAAQ,AAAYJ,eAAKE;AAF/B,AAGE,4DAAA,RAAKC,mFAA4BC;;AAErC,8CAAA,9CAAMC,oGAA8BC,KAAKf,YAAYU;AAArD,AACE,IAAMR,UAAQ,AAACT,0CAA2BsB;IACpChB,QAAM,cAAA,dAAQG;IACdO,OAAK,AAACX,wBAASC,MAAMC;IACrBgB,cAAY,AAACR,0CAA2BC,KAAKC;IAC7CP,aAAW,iBAAAP,mBAAI,oBAAA,pBAACC;AAAL,AAAA,oBAAAD;AAAAA;;AAAA;;;AAJjB,AAKE,OAACK,8BAAee,YAAYjB,MAAMC,YAAYG;;AAElD,yCAAA,zCAAMc,0FAAyBC,QAAQH,KAAKf,YAAYU;AAAxD,AACE,oBACE,qBAAA,rBAACS,wDAA+CD;AAAS,OAACJ,4CAA6BC,KAAKf,YAAYU;;AAD1G,AAAA;;;;AAIF,kCAAA,lCAAMU,4EAAkBC;AAAxB,AACE,sEAAA,sDAAA,2CAAA,gEAAA,iEAAA,2CAAA,iEAAA,7YAACC,kGAA+BD;;AAElC,oCAAA,pCAAME,gFAAoBC;AAA1B,AACE,IAAA,AACE,IAAMH,qBAAmB,AAASG;IAC5BK,cAAY,AAACT,gCAAiBC;IAC9BS,WAAS,AAACC,iBAAOF;IAFvBH,aAGiCI;IAHjCJ,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAGcX;WAHd,AAAAa,4CAAAF,eAAA,lEAGmBjB;aAHnB,AAAAmB,4CAAAF,eAAA,pEAGwBhB;AAHxB,AAIE,OAACO,uCAAwB,AAAWO,cAAOT,KAAKN,KAAKC;gBALzD,SAAAe,LAMkBO;AANlB,AAAA;;AAUF,sCAAA,tCAAMC,oFAAsBC;AAA5B,AACE,IAAAnD,2BAAqB,AAACD;AAAtB,AAAA,oBAAAC;AAAA,wBAAAA,pBAASoD;AAAT,AACE,oBAAU,AAAMA,sBAAYD;AAA5B;AAAA,AACE,AAAMC,sBAAYD;;AAClB,IAAAE,2BAAiB,AAACb,kCAAmBW;AAArC,AAAA,oBAAAE;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,CAAM,AAAWH,eAAM,2DAAA,dAAK,AAAWA,+EAA2BG;;AADpE;;;AAHJ;;AAKA,OAAO7D,wEAA0C0D;;AAEnD,sCAAA,tCAAMI,oFAAsBpB,QAAQ5B,IAAImB,KAAKC,OAAOc;AAApD,AACE,IAAMe,MAAI,8KAAA,5JAAIhE,0DACF,AAACA,mEAAgC2C,QAAQ5B,IAAImB,KAAKC,OAAOc;AADrE,AAEE,GAAA,AAAAgB,cAAQD;AACN,IAAAH,qBAAiB,AAACb,kCAAmBC;AAArC,AAAA,oBAAAY;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,6CAAA,7CAAO,AAACI,4FAAoEJ;;AAD9E;;AAAA;;;AADF;;;AAMJ,6CAAA,7CAAMK;AAAN,AACE,CAAMnE,2DAAgC,AAAW,AAACoE;;AAClD,CAAM,AAAW,AAACA,+CAAmBL;;AACrC,IAAMM,YAAU,AAAaC;AAA7B,AACE,CAAMrE,qEAA0C,AAAYoE;;AAC5D,6BAAA,rBAAM,AAAYA;AAAlB,AAA8B,WAAA,PAASV;AAAT,AAAc,OAACD,oCAAqBC;;;AAItE,kCAAA,lCAAMY;AAAN,AACExE;;AAEF,+BAAA,/BAAMyE;AAAN,AACE,oBAAUzE;AAAV;;AAAA,AACE,wCAAA,vCAAMA;;AACN,AAACoE;;AAFH;;;AAKF,iCAAA,jCAAMM;AAAN,AACE,oBAAM1E;AAAN,AACE,wCAAA,vCAAMA;;AACN,oBAAQE;AAAR;AAAA,AAAA,MAAA,KAAAyE,MAAA;;;AACA,CAAM,AAAW,AAACN,+CAAmBpE;;AACrC,IAAMqE,YAAU,AAAaC;AAA7B,AACE,QAAM,AAAYD,qBAAWpE;;AALjC","names":["devtools.hints/available?","devtools.hints/*installed*","devtools.hints/*original-global-error-handler*","devtools.hints/*original-type-error-prototype-to-string*","devtools.hints/processed-errors","cljs.core/volatile!","devtools.hints/set-processed-errors!","val","cljs.core/vreset!","devtools.hints/get-processed-errors!","temp__5751__auto__","cljs.core/deref","js/WeakSet","devtools.hints/empty-as-nil","str","cljs.core/empty?","devtools.hints/ajax-reader","url","xhr","js/XMLHttpRequest","devtools.hints/retrieve-javascript-source","where","reader","or__5045__auto__","devtools.prefs/pref","devtools.hints/get-line","lines","line-number","devtools.hints/extend-content","content","min-length","cljs.core/count","prev-line-number","prev-line","new-content","devtools.hints/mark-call-closed-at-column","line","column","n","prefix","postfix","devtools.hints/mark-null-call-site-location","file","marked-line","devtools.hints/make-sense-of-the-error","message","cljs.core/re-matches","devtools.hints/parse-stacktrace","native-stack-trace","cljs.stacktrace/parse-stacktrace","devtools.hints/error-object-sense","error","e63961","map__63965","cljs.core/--destructure-map","cljs.core.get","stack-trace","top-item","cljs.core/second","_e","devtools.hints/type-error-to-string","self","seen-errors","temp__5753__auto__","sense","devtools.hints/global-error-handler","res","cljs.core/not","devtools.context/get-console","devtools.hints/install-type-error-enhancer","devtools.context/get-root","prototype","js/TypeError","devtools.hints/installed?","devtools.hints/install!","devtools.hints/uninstall!","js/Error"],"sourcesContent":["(ns devtools.hints\n  (:require-macros [devtools.compiler :refer [check-compiler-options!]]\n                   [devtools.oops :refer [unchecked-aget]])\n  (:require [devtools.prefs :refer [pref]]\n            [devtools.context :as context]\n            [cljs.stacktrace :as stacktrace]))\n\n; cljs.stacktrace does not play well in :advanced mode optimizations, see https://github.com/binaryage/cljs-devtools/issues/37\n(check-compiler-options!)\n\n(defn ^:dynamic available? []\n  true)\n\n; Question: How much time have you lost staring at \"Cannot read property 'call' of null\" kind of errors?\n;\n; ---------------------------------------------------------------------------------------------------------------------------\n;\n; The idea is to try enhance error object's .stack and .message fields with additional info about\n; the call site causing null type error. With optimizations :none the name of the null call site can be seen.\n;\n; The enhancing handler function tries to:\n; 1) parse error's stack trace.\n; 2) look original javascript source file up (via sync AJAX fetch by default).\n; 3) locate reported line and column.\n; 4) presents problematic line with a column hint as addition to .stack or .message strings.\n\n; Technically the trick here is to override TypeError.prototype.toString\n; and global window.onerror handler to enhance uncaught errors.\n;\n; With that we should handle two situations:\n; 1) either error gets printed (typically in user's catch via console), so patched toString() method gets called.\n; 2) or it is uncaught and our global error handler should take care of possible enhancement\n;    before devtools present it to the user themselves.\n;\n; note: Tested under Chrome only\n\n(def ^:dynamic *installed* false)\n(def ^:dynamic *original-global-error-handler* nil)\n(def ^:dynamic *original-type-error-prototype-to-string* nil)\n\n(def processed-errors (volatile! nil))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn set-processed-errors! [val]\n  (vreset! processed-errors val))\n\n(defn get-processed-errors! []\n  (if-let [val @processed-errors]\n    val\n    (if (exists? js/WeakSet)\n      (set-processed-errors! (js/WeakSet.)))))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn empty-as-nil [str]\n  (if (empty? str) nil str))\n\n(defn ajax-reader [url]\n  (let [xhr (js/XMLHttpRequest.)]\n    (.open xhr \"GET\" url false)\n    (.send xhr)\n    (empty-as-nil (.-responseText xhr))))\n\n(defn retrieve-javascript-source [where]\n  (let [reader (or (pref :file-reader) ajax-reader)]\n    (reader where)))\n\n(defn get-line [lines line-number]\n  (unchecked-aget lines (dec line-number)))                                                                                   ; line numbering is 1-based\n\n(defn extend-content [content lines line-number min-length]\n  (if (or (> (count content) min-length)\n          (not (pos? line-number)))\n    content\n    (let [prev-line-number (dec line-number)\n          prev-line (get-line lines prev-line-number)\n          new-content (str prev-line \"\\n\" content)]\n      (extend-content new-content lines prev-line-number min-length))))\n\n(defn mark-call-closed-at-column [line column]\n  (let [n (dec column)                                                                                                        ; column number is 1-based\n        prefix (.substring line 0 n)\n        postfix (.substring line n)]\n    (str prefix \" <<< \u2622 NULL \u2622 <<< \" postfix)))\n\n(defn mark-null-call-site-location [file line-number column]\n  (let [content (retrieve-javascript-source file)\n        lines (.split content \"\\n\")\n        line (get-line lines line-number)\n        marked-line (mark-call-closed-at-column line column)\n        min-length (or (pref :sanity-hint-min-length) 128)]\n    (extend-content marked-line lines line-number min-length)))\n\n(defn make-sense-of-the-error [message file line-number column]\n  (cond\n    (re-matches #\"Cannot read property 'call' of.*\" message) (mark-null-call-site-location file line-number column)\n    :else nil))\n\n(defn parse-stacktrace [native-stack-trace]\n  (stacktrace/parse-stacktrace {} native-stack-trace {:ua-product :chrome} {:asset-root \"\"}))\n\n(defn error-object-sense [error]\n  (try\n    (let [native-stack-trace (.-stack error)\n          stack-trace (parse-stacktrace native-stack-trace)\n          top-item (second stack-trace)                                                                                       ; first line is just an error message\n          {:keys [file line column]} top-item]\n      (make-sense-of-the-error (.-message error) file line column))\n    (catch :default _e\n      ; silently fail in case of troubles parsing stack trace\n      false)))\n\n(defn type-error-to-string [self]\n  (if-let [seen-errors (get-processed-errors!)]\n    (when-not (.has seen-errors self)\n      (.add seen-errors self)\n      (when-let [sense (error-object-sense self)]\n        (set! (.-message self) (str (.-message self) \", a sanity hint:\\n\" sense)))))                                          ; this is dirty, patch message field before it gets used\n  (.call *original-type-error-prototype-to-string* self))\n\n(defn global-error-handler [message url line column error]\n  (let [res (if *original-global-error-handler*\n              (*original-global-error-handler* message url line column error))]\n    (if-not res\n      (when-let [sense (error-object-sense error)]\n        (.info (context/get-console) \"A sanity hint for incoming uncaught error:\\n\" sense)\n        false)\n      true)))\n\n(defn install-type-error-enhancer []\n  (set! *original-global-error-handler* (.-onerror (context/get-root)))\n  (set! (.-onerror (context/get-root)) global-error-handler)\n  (let [prototype (.-prototype js/TypeError)]\n    (set! *original-type-error-prototype-to-string* (.-toString prototype))\n    (set! (.-toString prototype) #(this-as self (type-error-to-string self)))))                                               ; work around http://dev.clojure.org/jira/browse/CLJS-1545\n\n; -- installation -----------------------------------------------------------------------------------------------------------\n\n(defn installed? []\n  *installed*)\n\n(defn install! []\n  (when-not *installed*\n    (set! *installed* true)\n    (install-type-error-enhancer)\n    true))\n\n(defn uninstall! []\n  (when *installed*\n    (set! *installed* false)\n    (assert *original-type-error-prototype-to-string*)\n    (set! (.-onerror (context/get-root)) *original-global-error-handler*)\n    (let [prototype (.-prototype js/TypeError)]\n      (set! (.-toString prototype) *original-type-error-prototype-to-string*))))\n"]}