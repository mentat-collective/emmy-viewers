shadow$provide.module$node_modules$three$src$renderers$shaders$ShaderLib$depth_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.vertex="\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\n\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include \x3cuv_vertex\x3e\n\n\t#include \x3cskinbase_vertex\x3e\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include \x3cbeginnormal_vertex\x3e\n\t\t#include \x3cmorphnormal_vertex\x3e\n\t\t#include \x3cskinnormal_vertex\x3e\n\n\t#endif\n\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\n\tvHighPrecisionZW \x3d gl_Position.zw;\n\n}\n";
exports.fragment="\n#if DEPTH_PACKING \x3d\x3d 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3calphatest_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include \x3cclipping_planes_fragment\x3e\n\n\tvec4 diffuseColor \x3d vec4( 1.0 );\n\n\t#if DEPTH_PACKING \x3d\x3d 3200\n\n\t\tdiffuseColor.a \x3d opacity;\n\n\t#endif\n\n\t#include \x3cmap_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\n\t#include \x3clogdepthbuf_fragment\x3e\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ \x3d 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING \x3d\x3d 3200\n\n\t\tgl_FragColor \x3d vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\n\t#elif DEPTH_PACKING \x3d\x3d 3201\n\n\t\tgl_FragColor \x3d packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n"}
//# sourceMappingURL=module$node_modules$three$src$renderers$shaders$ShaderLib$depth_glsl.js.map
