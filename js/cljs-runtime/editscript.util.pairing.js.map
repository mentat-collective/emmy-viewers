{"version":3,"sources":["editscript/util/pairing.cljc"],"mappings":"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","names":["editscript$util$pairing$IHeapNode$get_left$dyn","x__5393__auto__","m__5394__auto__","editscript.util.pairing/get-left","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","editscript$util$pairing$IHeapNode$get_right$dyn","editscript.util.pairing/get-right","editscript$util$pairing$IHeapNode$set_right$dyn","editscript.util.pairing/set-right","editscript$util$pairing$IHeapNode$add_child$dyn","editscript.util.pairing/add-child","editscript.util.pairing/IHeapNode","this","right","node","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","editscript.util.pairing/HeapNode","editscript.util.pairing/->HeapNode","item","priority","left","_","r","editscript.util.pairing/merge-nodes","a","b","editscript.util.pairing/insert","editscript.util.pairing/two-pass","n","editscript.util.pairing/PriorityMap","editscript.util.pairing/->PriorityMap","heap","map","cljs.core/seq","e","vec__75202","cljs.core.nth","cljs.core.assoc","cljs.core/contains?","cljs.core.dissoc","var_args","G__75212","editscript.util.pairing/priority-map","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","js/Error","seq75210","self__5755__auto__","keyvals","cljs.core/even?","cljs.core/count","cljs.core.reduce","cljs.core/conj","editscript.util.pairing.priority_map","cljs.core.partition"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.util.pairing\n  #?(:clj\n     (:import [clojure.lang IPersistentStack IPersistentMap IPersistentCollection]\n              [java.io Writer])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defprotocol IHeapNode\n  (get-left [this] \"Get the left child node\")\n  (get-right [this] \"Get the right sibling node\")\n  (set-right [this right] \"Set the right sibling\")\n  (add-child [this node] \"Add a child to a node\"))\n\n(deftype HeapNode [item\n                   priority\n                   ^:unsynchronized-mutable left\n                   ^:unsynchronized-mutable right]\n  IHeapNode\n  (get-left [_] left)\n  (get-right [_] right)\n  (set-right [_ r] (set! right r))\n  (add-child [this node]\n    (when left (set-right node left))\n    (set! left node)\n    this))\n\n#?(:clj (defmethod print-method HeapNode\n          [x ^Writer writer]\n          (print-method {:item     (.-item ^HeapNode x)\n                         :priority (.-priority ^HeapNode x)\n                         :left     (get-left x)\n                         :right    (get-right x)}\n                        writer)))\n\n(defn merge-nodes\n  [^HeapNode a ^HeapNode b]\n  (cond\n    (nil? a)                          b\n    (nil? b)                          a\n    (< (.-priority a) (.-priority b)) (add-child a b)\n    :else                             (add-child b a)))\n\n(defn insert\n  [^HeapNode node item priority]\n  (merge-nodes node (->HeapNode item priority nil nil)))\n\n(defn two-pass\n  [^HeapNode node]\n  (if (or (nil? node) (nil? (get-right node)))\n    node\n    (let [a node\n          b (get-right node)\n          n (get-right b)]\n      (set-right a nil)\n      (set-right b nil)\n      (merge-nodes (merge-nodes a b) (two-pass n)))))\n\n#?(:clj\n   (deftype PriorityMap [^:unsynchronized-mutable ^HeapNode heap\n                         ^:unsynchronized-mutable map]\n     IPersistentCollection\n     (count [_] (count map))\n     (cons [this e]\n       (let [[item priority] e]\n         (set! map (assoc map item priority))\n         (set! heap (insert heap item priority))\n         this))\n     (empty [this]\n       (set! heap nil)\n       (set! map {})\n       this)\n     (equiv [this o] (identical? this o))\n\n     IPersistentMap\n     (assoc [this item priority]\n       (set! map (assoc map item priority))\n       (set! heap (insert heap item priority))\n       this)\n     (hashCode [_] (hash map))\n     (equals [this o] (identical? this o))\n     (containsKey [_ item] (contains? map item))\n     (entryAt [_ k] (find map k))\n     (seq [_] (seq map))\n     (without [this item] (dissoc map item) this)\n\n     IPersistentStack\n     (peek [_] [(.-item heap) (.-priority heap)])\n     (pop [this]\n       (let [n (two-pass (get-left heap))]\n         (set! map (dissoc map (.-item heap)))\n         (set! heap n)\n         this)))\n\n   :cljs\n   (deftype PriorityMap [^:mutable ^HeapNode heap\n                         ^:mutable map]\n\n     ISeqable\n     (-seq [_] (seq map))\n\n     ICollection\n     (-conj [this e]\n       (let [[item priority] e]\n         (set! map (assoc map item priority))\n         (set! heap (insert heap item priority))\n         this))\n\n     IAssociative\n     (-assoc [this item priority]\n       (set! map (assoc map item priority))\n       (set! heap (insert heap item priority))\n       this)\n     (-contains-key? [_ item] (contains? map item))\n\n     IMap\n     (-dissoc [this item] (dissoc map item) this)\n\n     IStack\n     (-peek [_] [(.-item heap) (.-priority heap)])\n     (-pop [this]\n       (let [n (two-pass (get-left heap))]\n         (set! map (dissoc map (.-item heap)))\n         (set! heap n)\n         this))))\n\n(defn priority-map\n  \"A priority queue that also functions as a map.\n  Backed by a pairing heap implementation, and a regular map.\n  NB. We do not implement `decrease-key` for the pairing heap,\n  instead just insert the item again with a new priority.\"\n  ([]\n   (->PriorityMap nil {}))\n  ([& keyvals]\n   {:pre [(even? (count keyvals))]}\n   (reduce conj (priority-map) (partition 2 keyvals))))\n"]}