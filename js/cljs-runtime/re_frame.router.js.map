{"version":3,"sources":["re_frame/router.cljc"],"mappings":"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","names":["re-frame.router/later-fns","f","G__87448","re-frame.interop/after-render","re-frame.interop/next-tick","re-frame$router$IEventQueue$push$dyn","x__4550__auto__","m__4551__auto__","re-frame.router/push","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","re-frame$router$IEventQueue$add_post_event_callback$dyn","re-frame.router/add-post-event-callback","re-frame$router$IEventQueue$remove_post_event_callback$dyn","re-frame.router/remove-post-event-callback","re-frame$router$IEventQueue$purge$dyn","re-frame.router/purge","re-frame$router$IEventQueue$_fsm_trigger$dyn","re-frame.router/-fsm-trigger","re-frame$router$IEventQueue$_add_event$dyn","re-frame.router/-add-event","re-frame$router$IEventQueue$_process_1st_event_in_queue$dyn","re-frame.router/-process-1st-event-in-queue","re-frame$router$IEventQueue$_run_next_tick$dyn","re-frame.router/-run-next-tick","re-frame$router$IEventQueue$_run_queue$dyn","re-frame.router/-run-queue","re-frame$router$IEventQueue$_exception$dyn","re-frame.router/-exception","re-frame$router$IEventQueue$_pause$dyn","re-frame.router/-pause","re-frame$router$IEventQueue$_resume$dyn","re-frame.router/-resume","re-frame$router$IEventQueue$_call_post_event_callbacks$dyn","re-frame.router/-call-post-event-callbacks","re-frame.router/IEventQueue","this","event","id","callack","trigger","arg","ex","later-fn","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","re-frame.router/EventQueue","re-frame.router/->EventQueue","fsm-state","queue","post-event-callback-fns","frame","_","callback-fn","cljs.core/contains?","re_frame.loggers.console","cljs.core.assoc","cljs.core.dissoc","re-frame.interop/empty-queue","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__87476","re-frame.trace/*current-trace*","*current-trace*-temp-val__87477","re-frame.trace/start-trace","end__87216__auto__","re-frame.interop/now","duration__87217__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","re-frame.trace/run-tracing-callbacks!","vec__87480","cljs.core.nth","vec__87485","new-fsm-state","action-fn","G__87483","cljs.core._EQ_","G__87488","cljs.core/empty?","cljs.core.ex_info","new-trace__87218__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.conj","event-v","cljs.core/peek","e87492","re-frame.events/handle","cljs.core/pop","G__87475","n","cljs.core/count","temp__5751__auto__","cljs.core/some","cljs.core/meta","cljs.core/keys","G__87489","seq__87493","cljs.core/seq","chunk__87494","count__87495","i__87496","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","callback","cljs.core/vals","js/Error","re-frame.router/dispatch","event-queue","lambdaisland.glogi.log","cljs.core/identity","re-frame.router/dispatch-sync"],"sourcesContent":["(ns re-frame.router\n  (:require [re-frame.events :as ev]\n            [re-frame.interop :refer [after-render empty-queue next-tick]]\n            [re-frame.loggers :refer [console]]\n            [re-frame.trace :as trace :include-macros true]\n            [lambdaisland.glogi :as log]))\n\n\n;; -- Router Loop ------------------------------------------------------------\n;;\n;; A call to \"re-frame.core/dispatch\" places an event on a queue for processing.\n;; A short time later, the handler registered to handle this event will be run.\n;; What follows is the implementation of this process.\n;;\n;; The task is to process queued events in a perpetual loop, one after\n;; the other, FIFO, calling the registered event-handler for each, being idle when\n;; there are no events, and firing up when one arrives.\n;;\n;; But browsers only have a single thread of control and we must be\n;; careful to not hog the CPU. When processing events one after another, we\n;; must regularly hand back control to the browser, so it can redraw, process\n;; websockets, etc. But not too regularly! If we are in a de-focused browser\n;; tab, our app will be CPU throttled. Each time we get back control, we have\n;; to process all queued events, or else something like a bursty websocket\n;; (producing events) might overwhelm the queue. So there's a balance.\n;;\n;; The processing/handling of an event happens \"asynchronously\" sometime after\n;; that event was enqueued via \"dispatch\". The original implementation of this router loop\n;; used `core.async`. As a result, it was fairly simple, and it mostly worked,\n;; but it did not give enough control. So now we hand-roll our own,\n;; finite-state-machine and all.\n;;\n;; In what follows, the strategy is this:\n;;   - maintain a FIFO queue of `dispatched` events.\n;;   - when a new event arrives, \"schedule\" processing of this queue using\n;;     goog.async.nextTick, which means it will happen \"very soon\".\n;;   - when processing events, one after the other, do ALL the currently\n;;     queued events. Don't stop. Don't yield to the browser. Hog that CPU.\n;;   - but if any new events are dispatched during this cycle of processing,\n;;     don't do them immediately. Leave them queued. Yield first to the browser,\n;;     and do these new events in the next processing cycle. That way we drain\n;;     the queue up to a point, but we never hog the CPU forever. In\n;;     particular, we handle the case where handling one event will beget\n;;     another event. The freshly begotten event will be handled next cycle,\n;;     with yielding in-between.\n;;   - In some cases, an event should not be handled until after the GUI has been\n;;     updated, i.e., after the next Reagent animation frame. In such a case,\n;;     the event should be dispatched with :flush-dom metadata like this:\n;;       (dispatch ^:flush-dom [:event-id other params])\n;;     Such an event will temporarily block all further processing because\n;;     events are processed sequentially: we handle one event completely\n;;     before we handle the ones behind it.\n;;\n;; Implementation notes:\n;;   - queue processing can be in a number of states: scheduled, running, paused\n;;     etc. So it is modeled as a Finite State Machine.\n;;     See \"-fsm-trigger\" (below) for the states and transitions.\n;;   - the scheduling is done via \"goog.async.nextTick\" which is pretty quick\n;;   - when the event has :flush-dom metadata we schedule via\n;;       \"reagent.core.after-render\"\n;;     which will run event processing after the next Reagent animation frame.\n;;\n\n;; Events can have metadata which says to pause event processing.\n;; event metadata -> \"run later\" functions\n(def later-fns\n  {:flush-dom (fn [f] (after-render #(next-tick f)))   ;; one tick after the end of the next annimation frame\n   :yield     next-tick})               ;; almost immediately\n\n\n;; Event Queue Abstraction\n(defprotocol IEventQueue\n\n  ;; -- API\n  (push [this event])\n  (add-post-event-callback [this id callack])\n  (remove-post-event-callback [this f])\n  (purge [this])\n\n  ;; -- Implementation via a Finite State Machine\n  (-fsm-trigger [this trigger arg])\n\n  ;; -- Finite State Machine actions\n  (-add-event [this event])\n  (-process-1st-event-in-queue [this])\n  (-run-next-tick [this])\n  (-run-queue [this])\n  (-exception [this ex])\n  (-pause [this later-fn])\n  (-resume [this])\n  (-call-post-event-callbacks [this event]))\n\n\n;; Concrete implementation of IEventQueue\n(deftype EventQueue [#?(:cljs ^:mutable fsm-state               :clj ^:volatile-mutable fsm-state)\n                     #?(:cljs ^:mutable queue                   :clj ^:volatile-mutable queue)\n                     #?(:cljs ^:mutable post-event-callback-fns :clj ^:volatile-mutable post-event-callback-fns)\n                     #?(:cljs ^:mutable frame                   :clj ^:volatile-mutable frame)]\n  IEventQueue\n\n  ;; -- API ------------------------------------------------------------------\n\n  (push [this event]         ;; presumably called by dispatch\n    (-fsm-trigger this :add-event event))\n\n  ;; register a callback function which will be called after each event is processed\n  (add-post-event-callback [_ id callback-fn]\n    (when (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: overwriting existing post event call back with id:\" id))\n    (->> (assoc post-event-callback-fns id callback-fn)\n         (set! post-event-callback-fns)))\n\n  (remove-post-event-callback [_ id]\n    (if-not (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: could not remove post event call back with id:\" id)\n      (->> (dissoc post-event-callback-fns id)\n           (set! post-event-callback-fns))))\n\n  (purge [_]\n    (set! queue empty-queue))\n\n  ;; -- FSM Implementation ---------------------------------------------------\n\n  (-fsm-trigger\n    [this trigger arg]\n\n    ;; The following \"case\" implements the Finite State Machine.\n    ;; Given a \"trigger\", and the existing FSM state, it computes the\n    ;; new FSM state and the transition action (function).\n\n    (locking this\n      (trace/with-trace {:op-type ::fsm-trigger}\n        (let [[new-fsm-state action-fn]\n              (case [fsm-state trigger]\n\n                ;; You should read the following \"case\" as:\n                ;; [current-FSM-state trigger] -> [new-FSM-state action-fn]\n                ;;\n                ;; So, for example, the next line should be interpreted as:\n                ;; if you are in state \":idle\" and a trigger \":add-event\"\n                ;; happens, then move the FSM to state \":scheduled\" and execute\n                ;; that two-part \"do\" function.\n                [:idle :add-event] [:scheduled #(do (-add-event this arg)\n                                                    (-run-next-tick this))]\n\n                ;; State: :scheduled  (the queue is scheduled to run, soon)\n                [:scheduled :add-event] [:scheduled #(-add-event this arg)]\n                [:scheduled :run-queue] [:running #(-run-queue this)]\n\n                ;; State: :running (the queue is being processed one event after another)\n                [:running :add-event] [:running #(-add-event this arg)]\n                [:running :pause] [:paused #(-pause this arg)]\n                [:running :exception] [:idle #(-exception this arg)]\n                [:running :finish-run] (if (empty? queue)     ;; FSM guard\n                                         [:idle]\n                                         [:scheduled #(-run-next-tick this)])\n\n                ;; State: :paused (:flush-dom metadata on an event has caused a temporary pause in processing)\n                [:paused :add-event] [:paused #(-add-event this arg)]\n                [:paused :resume] [:running #(-resume this)]\n\n                (throw (ex-info (str \"re-frame: router state transition not found. \" fsm-state \" \" trigger)\n                                {:fsm-state fsm-state, :trigger trigger})))]\n\n          ;; The \"case\" above computed both the new FSM state, and the action. Now, make it happen.\n\n          (trace/merge-trace! {:operation [fsm-state trigger]\n                               :tags      {:current-state fsm-state\n                                           :new-state     new-fsm-state}})\n          (set! fsm-state new-fsm-state)\n          (when action-fn (action-fn))))))\n\n  (-add-event\n    [_ event]\n    (set! queue (conj queue event)))\n\n  (-process-1st-event-in-queue\n    [this]\n    (let [event-v (peek queue)]\n      (try\n        (ev/handle frame event-v)\n        (set! queue (pop queue))\n        (-call-post-event-callbacks this event-v)\n        (catch #?(:cljs :default :clj Exception) ex\n          (-fsm-trigger this :exception ex)))))\n\n  (-run-next-tick\n    [this]\n    (next-tick #(-fsm-trigger this :run-queue nil)))\n\n  ;; Process all the events currently in the queue, but not any new ones.\n  ;; Be aware that events might have metadata which will pause processing.\n  (-run-queue\n    [this]\n    (loop [n (count queue)]\n      (if (zero? n)\n        (-fsm-trigger this :finish-run nil)\n        (if-let [later-fn (some later-fns (-> queue peek meta keys))]  ;; any metadata which causes pausing?\n          (-fsm-trigger this :pause later-fn)\n          (do (-process-1st-event-in-queue this)\n              (recur (dec n)))))))\n\n  (-exception\n    [this ex]\n    (purge this)   ;; purge the queue\n    (throw ex))\n\n  (-pause\n    [this later-fn]\n    (later-fn #(-fsm-trigger this :resume nil)))\n\n  (-call-post-event-callbacks\n    [_ event-v]\n    (doseq [callback (vals post-event-callback-fns)]\n      (callback event-v queue)))\n\n  (-resume\n    [this]\n    (-process-1st-event-in-queue this)  ;; do the event which paused processing\n    (-run-queue this)))                 ;; do the rest of the queued events\n\n\n;; ---------------------------------------------------------------------------\n;; Event Queue\n;; When \"dispatch\" is called, the event is added into this event queue.  Later,\n;;  the queue will \"run\" and the event will be \"handled\" by the registered function.\n;;\n;; (def event-queue (->EventQueue :idle empty-queue {}))\n\n\n;; ---------------------------------------------------------------------------\n;; Dispatching\n;;\n\n(defn dispatch\n  \"Enqueue `event` for processing by event handling machinery.\n\n  `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n\n  Note: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch event-queue [:order-pizza {:supreme 2 :meatlovers 1 :veg 1})\"\n  [event-queue event]\n  {:pre [event-queue]}\n  (log/trace :dispatch event :frame-id (:frame-id (.-frame event-queue)))\n  (if (nil? event)\n    (throw (ex-info \"re-frame: you called \\\"dispatch\\\" without an event vector.\" {}))\n    (push event-queue event))\n  nil)                                           ;; Ensure nil return. See https://github.com/day8/re-frame/wiki/Beware-Returning-False\n\n\n(defn dispatch-sync\n  \"Synchronously (immediately) process `event`. Do not queue.\n\n  Generally, don't use this. Instead use `dispatch`. It is an error\n  to use `dispatch-sync` within an event handler.\n\n  Useful when any delay in processing is a problem:\n     1. the `:on-change` handler of a text field where we are expecting fast typing.\n     2  when initialising your app - see 'main' in todomvc examples\n     3. in a unit test where we don't want the action 'later'\n\n  Usage:\n     (dispatch-sync event-queue registry [:sing :falsetto 634])\"\n  [frame event-v]\n  (log/trace :dispatch-sync event-v :frame-id (:frame-id frame))\n\n  (ev/handle frame event-v)\n\n  ;; slightly ugly hack. Run the registered post event callbacks.\n  (-call-post-event-callbacks (:event-queue frame) event-v)\n\n  ;; Ensure nil return. See https://github.com/day8/re-frame/wiki/Beware-Returning-False\n  nil)\n"]}