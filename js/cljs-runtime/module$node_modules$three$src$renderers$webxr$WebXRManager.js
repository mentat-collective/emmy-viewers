shadow$provide.module$node_modules$three$src$renderers$webxr$WebXRManager=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.WebXRManager=void 0;var _ArrayCamera=require("module$node_modules$three$src$cameras$ArrayCamera");global=require("module$node_modules$three$src$core$EventDispatcher");var _PerspectiveCamera=require("module$node_modules$three$src$cameras$PerspectiveCamera"),_Vector=require("module$node_modules$three$src$math$Vector3"),_Vector2=
require("module$node_modules$three$src$math$Vector4"),_WebGLAnimation=require("module$node_modules$three$src$renderers$webgl$WebGLAnimation"),_WebGLRenderTarget=require("module$node_modules$three$src$renderers$WebGLRenderTarget"),_WebXRController=require("module$node_modules$three$src$renderers$webxr$WebXRController"),_DepthTexture=require("module$node_modules$three$src$textures$DepthTexture"),_constants=require("module$node_modules$three$src$constants");class WebXRManager extends global.EventDispatcher{constructor(renderer,
gl){function onSessionEvent(event){var controllerIndex=controllerInputSources.indexOf(event.inputSource);-1!==controllerIndex&&(controllerIndex=controllers[controllerIndex],void 0!==controllerIndex&&controllerIndex.dispatchEvent({type:event.type,data:event.inputSource}))}function onSessionEnd(){session.removeEventListener("select",onSessionEvent);session.removeEventListener("selectstart",onSessionEvent);session.removeEventListener("selectend",onSessionEvent);session.removeEventListener("squeeze",
onSessionEvent);session.removeEventListener("squeezestart",onSessionEvent);session.removeEventListener("squeezeend",onSessionEvent);session.removeEventListener("end",onSessionEnd);session.removeEventListener("inputsourceschange",onInputSourcesChange);for(let i=0;i<controllers.length;i++){const inputSource=controllerInputSources[i];null!==inputSource&&(controllerInputSources[i]=null,controllers[i].disconnect(inputSource))}_currentDepthFar=_currentDepthNear=null;renderer.setRenderTarget(initialRenderTarget);
newRenderTarget=session=glBinding=glProjLayer=glBaseLayer=null;animation.stop();scope.isPresenting=!1;scope.dispatchEvent({type:"sessionend"})}function onInputSourcesChange(event){for(var i$jscomp$0=0;i$jscomp$0<event.removed.length;i$jscomp$0++){var inputSource=event.removed[i$jscomp$0],index=controllerInputSources.indexOf(inputSource);0<=index&&(controllerInputSources[index]=null,controllers[index].dispatchEvent({type:"disconnected",data:inputSource}))}for(i$jscomp$0=0;i$jscomp$0<event.added.length;i$jscomp$0++){inputSource=
event.added[i$jscomp$0];index=controllerInputSources.indexOf(inputSource);if(-1===index){for(let i=0;i<controllers.length;i++)if(i>=controllerInputSources.length){controllerInputSources.push(inputSource);index=i;break}else if(null===controllerInputSources[i]){controllerInputSources[i]=inputSource;index=i;break}if(-1===index)break}(index=controllers[index])&&index.dispatchEvent({type:"connected",data:inputSource})}}function updateCamera(camera,parent){null===parent?camera.matrixWorld.copy(camera.matrix):
camera.matrixWorld.multiplyMatrices(parent.matrixWorld,camera.matrix);camera.matrixWorldInverse.copy(camera.matrixWorld).invert()}super();const scope=this;let session=null,framebufferScaleFactor=1,referenceSpace=null,referenceSpaceType="local-floor",customReferenceSpace=null,pose=null,glBinding=null,glProjLayer=null,glBaseLayer=null,xrFrame=null;const attributes=gl.getContextAttributes();let initialRenderTarget=null,newRenderTarget=null;const controllers=[],controllerInputSources=[],cameraL=new _PerspectiveCamera.PerspectiveCamera;
cameraL.layers.enable(1);cameraL.viewport=new _Vector2.Vector4;const cameraR=new _PerspectiveCamera.PerspectiveCamera;cameraR.layers.enable(2);cameraR.viewport=new _Vector2.Vector4;const cameras$jscomp$0=[cameraL,cameraR],cameraVR=new _ArrayCamera.ArrayCamera;cameraVR.layers.enable(1);cameraVR.layers.enable(2);let _currentDepthNear=null,_currentDepthFar=null;this.cameraAutoUpdate=!0;this.isPresenting=this.enabled=!1;this.getController=function(index){let controller=controllers[index];void 0===controller&&
(controller=new _WebXRController.WebXRController,controllers[index]=controller);return controller.getTargetRaySpace()};this.getControllerGrip=function(index){let controller=controllers[index];void 0===controller&&(controller=new _WebXRController.WebXRController,controllers[index]=controller);return controller.getGripSpace()};this.getHand=function(index){let controller=controllers[index];void 0===controller&&(controller=new _WebXRController.WebXRController,controllers[index]=controller);return controller.getHandSpace()};
this.setFramebufferScaleFactor=function(value){framebufferScaleFactor=value;!0===scope.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")};this.setReferenceSpaceType=function(value){referenceSpaceType=value;!0===scope.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")};this.getReferenceSpace=function(){return customReferenceSpace||referenceSpace};this.setReferenceSpace=function(space){customReferenceSpace=
space};this.getBaseLayer=function(){return null!==glProjLayer?glProjLayer:glBaseLayer};this.getBinding=function(){return glBinding};this.getFrame=function(){return xrFrame};this.getSession=function(){return session};this.setSession=function(value){const $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){session=value;if(null!==session){initialRenderTarget=renderer.getRenderTarget();session.addEventListener("select",onSessionEvent);session.addEventListener("selectstart",
onSessionEvent);session.addEventListener("selectend",onSessionEvent);session.addEventListener("squeeze",onSessionEvent);session.addEventListener("squeezestart",onSessionEvent);session.addEventListener("squeezeend",onSessionEvent);session.addEventListener("end",onSessionEnd);session.addEventListener("inputsourceschange",onInputSourcesChange);!0!==attributes.xrCompatible&&(yield gl.makeXRCompatible());if(void 0===session.renderState.layers||!1===renderer.capabilities.isWebGL2)glBaseLayer=new XRWebGLLayer(session,
gl,{antialias:void 0===session.renderState.layers?attributes.antialias:!0,alpha:attributes.alpha,depth:attributes.depth,stencil:attributes.stencil,framebufferScaleFactor}),session.updateRenderState({baseLayer:glBaseLayer}),newRenderTarget=new _WebGLRenderTarget.WebGLRenderTarget(glBaseLayer.framebufferWidth,glBaseLayer.framebufferHeight,{format:_constants.RGBAFormat,type:_constants.UnsignedByteType,encoding:renderer.outputEncoding,stencilBuffer:attributes.stencil});else{let depthFormat=null,depthType=
null;var glDepthFormat=null;attributes.depth&&(glDepthFormat=attributes.stencil?gl.DEPTH24_STENCIL8:gl.DEPTH_COMPONENT24,depthFormat=attributes.stencil?_constants.DepthStencilFormat:_constants.DepthFormat,depthType=attributes.stencil?_constants.UnsignedInt248Type:_constants.UnsignedIntType);glDepthFormat={colorFormat:gl.RGBA8,depthFormat:glDepthFormat,scaleFactor:framebufferScaleFactor};glBinding=new XRWebGLBinding(session,gl);glProjLayer=glBinding.createProjectionLayer(glDepthFormat);session.updateRenderState({layers:[glProjLayer]});
newRenderTarget=new _WebGLRenderTarget.WebGLRenderTarget(glProjLayer.textureWidth,glProjLayer.textureHeight,{format:_constants.RGBAFormat,type:_constants.UnsignedByteType,depthTexture:new _DepthTexture.DepthTexture(glProjLayer.textureWidth,glProjLayer.textureHeight,depthType,void 0,void 0,void 0,void 0,void 0,void 0,depthFormat),stencilBuffer:attributes.stencil,encoding:renderer.outputEncoding,samples:attributes.antialias?4:0});renderer.properties.get(newRenderTarget).__ignoreDepthValues=glProjLayer.ignoreDepthValues}newRenderTarget.isXRRenderTarget=
!0;$jscomp$async$this.setFoveation(1);customReferenceSpace=null;referenceSpace=yield session.requestReferenceSpace(referenceSpaceType);animation.setContext(session);animation.start();scope.isPresenting=!0;scope.dispatchEvent({type:"sessionstart"})}})};const cameraLPos=new _Vector.Vector3,cameraRPos=new _Vector.Vector3;this.updateCamera=function(camera){if(null!==session){cameraVR.near=cameraR.near=cameraL.near=camera.near;cameraVR.far=cameraR.far=cameraL.far=camera.far;if(_currentDepthNear!==cameraVR.near||
_currentDepthFar!==cameraVR.far)session.updateRenderState({depthNear:cameraVR.near,depthFar:cameraVR.far}),_currentDepthNear=cameraVR.near,_currentDepthFar=cameraVR.far;var parent=camera.parent,cameras=cameraVR.cameras;updateCamera(cameraVR,parent);for(var i$jscomp$0=0;i$jscomp$0<cameras.length;i$jscomp$0++)updateCamera(cameras[i$jscomp$0],parent);cameraVR.matrixWorld.decompose(cameraVR.position,cameraVR.quaternion,cameraVR.scale);camera.matrix.copy(cameraVR.matrix);camera.matrix.decompose(camera.position,
camera.quaternion,camera.scale);camera=camera.children;for(let i=0,l=camera.length;i<l;i++)camera[i].updateMatrixWorld(!0);if(2===cameras.length){cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);cameras=cameraLPos.distanceTo(cameraRPos);var projL=cameraL.projectionMatrix.elements,projR=cameraR.projectionMatrix.elements,near=projL[14]/(projL[10]-1);camera=projL[14]/(projL[10]+1);parent=(projL[9]+1)/projL[5];i$jscomp$0=(projL[9]-1)/projL[5];
var leftFov=(projL[8]-1)/projL[0],rightFov=(projR[8]+1)/projR[0];projR=near*leftFov;projL=near*rightFov;rightFov=cameras/(-leftFov+rightFov);leftFov=rightFov*-leftFov;cameraL.matrixWorld.decompose(cameraVR.position,cameraVR.quaternion,cameraVR.scale);cameraVR.translateX(leftFov);cameraVR.translateZ(rightFov);cameraVR.matrixWorld.compose(cameraVR.position,cameraVR.quaternion,cameraVR.scale);cameraVR.matrixWorldInverse.copy(cameraVR.matrixWorld).invert();near+=rightFov;rightFov=camera+rightFov;cameraVR.projectionMatrix.makePerspective(projR-
leftFov,projL+(cameras-leftFov),parent*camera/rightFov*near,i$jscomp$0*camera/rightFov*near,near,rightFov)}else cameraVR.projectionMatrix.copy(cameraL.projectionMatrix)}};this.getCamera=function(){return cameraVR};this.getFoveation=function(){if(null!==glProjLayer)return glProjLayer.fixedFoveation;if(null!==glBaseLayer)return glBaseLayer.fixedFoveation};this.setFoveation=function(foveation){null!==glProjLayer&&(glProjLayer.fixedFoveation=foveation);null!==glBaseLayer&&void 0!==glBaseLayer.fixedFoveation&&
(glBaseLayer.fixedFoveation=foveation)};let onAnimationFrameCallback=null;const animation=new _WebGLAnimation.WebGLAnimation;animation.setAnimationLoop(function(time,frame){pose=frame.getViewerPose(customReferenceSpace||referenceSpace);xrFrame=frame;if(null!==pose){var views=pose.views;null!==glBaseLayer&&(renderer.setRenderTargetFramebuffer(newRenderTarget,glBaseLayer.framebuffer),renderer.setRenderTarget(newRenderTarget));var cameraVRNeedsUpdate=!1;views.length!==cameraVR.cameras.length&&(cameraVR.cameras.length=
0,cameraVRNeedsUpdate=!0);for(var i=0;i<views.length;i++){const view=views[i];let viewport;if(null!==glBaseLayer)viewport=glBaseLayer.getViewport(view);else{var glSubImage=glBinding.getViewSubImage(glProjLayer,view);viewport=glSubImage.viewport;0===i&&(renderer.setRenderTargetTextures(newRenderTarget,glSubImage.colorTexture,glProjLayer.ignoreDepthValues?void 0:glSubImage.depthStencilTexture),renderer.setRenderTarget(newRenderTarget))}glSubImage=cameras$jscomp$0[i];void 0===glSubImage&&(glSubImage=
new _PerspectiveCamera.PerspectiveCamera,glSubImage.layers.enable(i),glSubImage.viewport=new _Vector2.Vector4,cameras$jscomp$0[i]=glSubImage);glSubImage.matrix.fromArray(view.transform.matrix);glSubImage.projectionMatrix.fromArray(view.projectionMatrix);glSubImage.viewport.set(viewport.x,viewport.y,viewport.width,viewport.height);0===i&&cameraVR.matrix.copy(glSubImage.matrix);!0===cameraVRNeedsUpdate&&cameraVR.cameras.push(glSubImage)}}for(views=0;views<controllers.length;views++)cameraVRNeedsUpdate=
controllerInputSources[views],i=controllers[views],null!==cameraVRNeedsUpdate&&void 0!==i&&i.update(cameraVRNeedsUpdate,frame,customReferenceSpace||referenceSpace);onAnimationFrameCallback&&onAnimationFrameCallback(time,frame);xrFrame=null});this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback};this.dispose=function(){}}}exports.WebXRManager=WebXRManager}
//# sourceMappingURL=module$node_modules$three$src$renderers$webxr$WebXRManager.js.map
