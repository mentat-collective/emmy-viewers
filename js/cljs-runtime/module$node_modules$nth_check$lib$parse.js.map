{
"version":3,
"file":"module$node_modules$nth_check$lib$parse.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,KAAR,CAAgB,IAAK,EAErB,KAAIC,WAAa,IAAIC,GAAJ,CAAQ,CAAC,CAAD,CAAI,EAAJ,CAAQ,EAAR,CAAY,EAAZ,CAAgB,EAAhB,CAAR,CAsEjBN,QAAQI,CAAAA,KAAR,CA5DAA,QAAc,CAACG,OAAD,CAAU,CA+BpBC,QAASA,SAAQ,EAAG,CAChB,GAA4B,GAA5B,GAAID,OAAQE,CAAAA,MAAR,CAAeC,GAAf,CAAJ,CAEI,MADAA,IAAA,EACO,CAAA,CAAC,CAEgB,IAA5B,GAAIH,OAAQE,CAAAA,MAAR,CAAeC,GAAf,CAAJ,EACIA,GAAA,EAEJ,OAAO,EARS,CAUpBC,QAASA,WAAU,EAAG,CAGlB,IAFA,IAAIC,MAAQF,GAAZ,CACIP,MAAQ,CACZ,CAAOO,GAAP,CAAaH,OAAQM,CAAAA,MAArB,EArDGC,EAqDH,EACIP,OAAQQ,CAAAA,UAAR,CAAmBL,GAAnB,CADJ,EApDGM,EAoDH,EAEIT,OAAQQ,CAAAA,UAAR,CAAmBL,GAAnB,CAFJ,CAAA,CAGIP,KACA,CADgB,EAChB,CADQA,KACR,EADsBI,OAAQQ,CAAAA,UAAR,CAAmBL,GAAnB,CACtB;AAzDDI,EAyDC,EAAAJ,GAAA,EAGJ,OAAOA,IAAA,GAAQE,KAAR,CAAgB,IAAhB,CAAuBT,KAVZ,CAYtBc,QAASA,eAAc,EAAG,CACtB,IAAA,CAAOP,GAAP,CAAaH,OAAQM,CAAAA,MAArB,EACIR,UAAWa,CAAAA,GAAX,CAAeX,OAAQQ,CAAAA,UAAR,CAAmBL,GAAnB,CAAf,CADJ,CAAA,CAEIA,GAAA,EAHkB,CApD1BH,OAAA,CAAUA,OAAQY,CAAAA,IAAR,EAAeC,CAAAA,WAAf,EACV,IAAgB,MAAhB,GAAIb,OAAJ,CACI,MAAO,CAAC,CAAD,CAAI,CAAJ,CAEN,IAAgB,KAAhB,GAAIA,OAAJ,CACD,MAAO,CAAC,CAAD,CAAI,CAAJ,CAGX,KAAIG,IAAM,CAAV,CACIW,EAAI,CADR,CAEIC,KAAOd,QAAA,EAFX,CAGIe,OAASZ,UAAA,EACTD,IAAJ,CAAUH,OAAQM,CAAAA,MAAlB,EAAoD,GAApD,GAA4BN,OAAQE,CAAAA,MAAR,CAAeC,GAAf,CAA5B,GACIA,GAAA,EAGA,CAFAW,CAEA,CAFIC,IAEJ,EAFuB,IAAX,GAAAC,MAAA,EAA8B,IAAK,EAAnC,GAAmBA,MAAnB,CAAuCA,MAAvC,CAAgD,CAE5D,EADAN,cAAA,EACA,CAAIP,GAAJ,CAAUH,OAAQM,CAAAA,MAAlB,EACIS,IAEA,CAFOd,QAAA,EAEP,CADAS,cAAA,EACA,CAAAM,MAAA,CAASZ,UAAA,EAHb,EAMIW,IANJ,CAMWC,MANX,CAMoB,CAVxB,CAcA,IAAe,IAAf;AAAIA,MAAJ,EAAuBb,GAAvB,CAA6BH,OAAQM,CAAAA,MAArC,CACI,KAAUW,MAAJ,CAAU,iCAAV,CAA8CjB,OAA9C,CAAwD,IAAxD,CAAN,CAEJ,MAAO,CAACc,CAAD,CAAIC,IAAJ,CAAWC,MAAX,CA9Ba,CAhB4E;",
"sources":["node_modules/nth-check/lib/parse.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$nth_check$lib$parse\"] = function(global,require,module,exports) {\n\"use strict\";\n// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = void 0;\n// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\nvar whitespace = new Set([9, 10, 12, 13, 32]);\nvar ZERO = \"0\".charCodeAt(0);\nvar NINE = \"9\".charCodeAt(0);\n/**\n * Parses an expression.\n *\n * @throws An `Error` if parsing fails.\n * @returns An array containing the integer step size and the integer offset of the nth rule.\n * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n */\nfunction parse(formula) {\n    formula = formula.trim().toLowerCase();\n    if (formula === \"even\") {\n        return [2, 0];\n    }\n    else if (formula === \"odd\") {\n        return [2, 1];\n    }\n    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n    var idx = 0;\n    var a = 0;\n    var sign = readSign();\n    var number = readNumber();\n    if (idx < formula.length && formula.charAt(idx) === \"n\") {\n        idx++;\n        a = sign * (number !== null && number !== void 0 ? number : 1);\n        skipWhitespace();\n        if (idx < formula.length) {\n            sign = readSign();\n            skipWhitespace();\n            number = readNumber();\n        }\n        else {\n            sign = number = 0;\n        }\n    }\n    // Throw if there is anything else\n    if (number === null || idx < formula.length) {\n        throw new Error(\"n-th rule couldn't be parsed ('\" + formula + \"')\");\n    }\n    return [a, sign * number];\n    function readSign() {\n        if (formula.charAt(idx) === \"-\") {\n            idx++;\n            return -1;\n        }\n        if (formula.charAt(idx) === \"+\") {\n            idx++;\n        }\n        return 1;\n    }\n    function readNumber() {\n        var start = idx;\n        var value = 0;\n        while (idx < formula.length &&\n            formula.charCodeAt(idx) >= ZERO &&\n            formula.charCodeAt(idx) <= NINE) {\n            value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n            idx++;\n        }\n        // Return `null` if we didn't read anything.\n        return idx === start ? null : value;\n    }\n    function skipWhitespace() {\n        while (idx < formula.length &&\n            whitespace.has(formula.charCodeAt(idx))) {\n            idx++;\n        }\n    }\n}\nexports.parse = parse;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","parse","whitespace","Set","formula","readSign","charAt","idx","readNumber","start","length","ZERO","charCodeAt","NINE","skipWhitespace","has","trim","toLowerCase","a","sign","number","Error"]
}
