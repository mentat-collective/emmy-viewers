shadow$provide.module$node_modules$shadergraph$src$factory$material=function(global,require,module,exports){function _getRequireWildcardCache(nodeInterop$jscomp$0){if("function"!==typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop$jscomp$0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.Material=void 0;var Visualize=function(obj,
nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!==typeof obj&&"function"!==typeof obj)return{default:obj};if((nodeInterop=_getRequireWildcardCache(nodeInterop))&&nodeInterop.has(obj))return nodeInterop.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor,key;for(key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;
desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj;nodeInterop&&nodeInterop.set(obj,newObj);return newObj}(require("module$node_modules$shadergraph$src$visualize$index"));class Material{constructor(vertex,fragment){this.vertex=vertex;this.fragment=fragment}build(options){return this.link(options)}link(options){null==options&&(options={});const uniforms={},varyings={},attributes={},vertex=this.vertex.link("main"),fragment=this.fragment.link("main");
for(const shader of[vertex,fragment]){for(const key in shader.uniforms)uniforms[key]=shader.uniforms[key];for(const key in shader.varyings)varyings[key]=shader.varyings[key];for(const key in shader.attributes)attributes[key]=shader.attributes[key]}options.vertexShader=vertex.code;options.vertexGraph=vertex.graph;options.fragmentShader=fragment.code;options.fragmentGraph=fragment.graph;options.attributes=attributes;options.uniforms=uniforms;options.varyings=varyings;options.inspect=()=>Visualize.inspect("Vertex Shader",
vertex,"Fragment Shader",fragment.graph);return options}inspect(){return Visualize.inspect("Vertex Shader",this.vertex,"Fragment Shader",this.fragment.graph)}}exports.Material=Material}
//# sourceMappingURL=module$node_modules$shadergraph$src$factory$material.js.map
