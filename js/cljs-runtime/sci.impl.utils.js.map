{"version":3,"sources":["sci/impl/utils.cljc"],"mappings":"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","names":["cljs.core.derive","sci.impl.utils/constant?","x","cljs.core/Keyword","cljs.core/boolean?","js/RegExp","var_args","G__89788","sci.impl.utils/throw-error-with-location","js/Error","msg","iobj","sci.impl.utils.throw_error_with_location","data","map__89792","cljs.core/--destructure-map","line","cljs.core.get","column","file","cljs.core/deref","sci.impl.utils/current-file","cljs.core/meta","cljs.core.ex_info","cljs.core.merge","sci.impl.utils/*in-try*","sci.impl.utils/macro?","f","temp__5757__auto__","m","or__4253__auto__","sci.impl.utils/allowed-append","cljs.core.symbol","sci.impl.utils/demunge","s","cljs.core/demunge","G__89801","sci.impl.utils/rethrow-with-location-of-node","ctx","e","raw-node","sci.impl.utils.rethrow_with_location_of_node","_bindings","stack","sci.impl.types/stack","env","id","d","cljs.core/ex-data","st","temp__5753__auto__","cljs.core/volatile!","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj","wrapping-sci-error?","and__4251__auto__","cljs.core.isa_QMARK_","map__89805","ex-msg","G__89806","cljs.core/last","phase","new-exception","new-d","G__89807","cljs.core.assoc","sci.impl.utils/iobj?","obj","cljs.core/PROTOCOL_SENTINEL","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sci.impl.utils/vary-meta*","seq89809","G__89810","cljs.core/first","cljs.core/next","G__89811","self__4851__auto__","args","cljs.core.apply","cljs.core/vary-meta","sci.impl.utils/strip-core-ns","sym","G__89824","cljs.core/namespace","cljs.core/name","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/var-unbound","js/Object","sci.impl.utils/namespace-object","ns-sym","create?","attr-map","env*","ns-map","cljs.core.get_in","ns-obj","sci.lang/->Namespace","cljs.core.swap_BANG_","cljs.core/assoc-in","sci.impl.utils/set-namespace!","sci.impl.types/setVal","sci.impl.utils/current-ns","sci.impl.utils/eval-form-state","sci.impl.utils/eval-require-state","sci.impl.utils/eval-use-state","sci.impl.utils/eval-resolve-state","sci.impl.utils/eval-refer-state","sci.impl.utils/macroexpand*","sci.impl.utils/macroexpand-1*","sci.impl.utils/eval-string*","sci.impl.utils/lookup","sci.impl.utils/analyze","sci.impl.utils/eval","sci-ctx","form","fexpr__89838","sci.impl.utils/split-when","pred","coll","cljs.core/LazySeq","cljs.core/seq","fst","cljs.core/complement","run","cljs.core/cons","p1__89839#","cljs.core.take_while","G__89840","G__89841","cljs.core.drop","cljs.core/count","sci.impl.utils/ana-macros","sci.impl.utils/maybe-destructured","params","body","cljs.core/every?","cljs.core/symbol?","new-params","cljs.core/with-meta","lets","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/Symbol","gparam","cljs.core.gensym","sci.impl.utils/unqualify-symbol","sci.impl.vars/unqualify-symbol","G__89846","sci.impl.utils/make-stack","expr-meta","sci.impl.utils.make_stack","special?","G__89847","sci.impl.utils/log","seq89848","self__4852__auto__","xs","js/console","clojure.string.join","G__89882","sci.impl.utils/dynamic-var","name","sci.impl.utils.dynamic_var","init-val","meta","sci.lang/Var","sci.impl.utils/user-ns","sci.impl.utils/clojure-core-ns","sci.impl.utils/current-ns-name","sci.impl.types/getName","G__89899","sci.impl.utils/new-var","G__89910","sci.impl.utils.new_var","sci.impl.vars/unbind","ctx?","sci.impl.utils/var?","sci.impl.utils/namespace?","sci.lang/Namespace"],"sourcesContent":["(ns sci.impl.utils\n  {:no-doc true}\n  (:refer-clojure :exclude [eval demunge var?])\n  (:require [clojure.string :as str]\n            [sci.impl.macros :as macros]\n            [sci.impl.types :as t]\n            [sci.impl.vars :as vars]\n            [sci.lang :as lang])\n  #?(:cljs (:require-macros [sci.impl.utils :refer [kw-identical?]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(derive :sci.error/realized-beyond-max :sci/error)\n(derive :sci.error/parse :sci/error)\n\n(defn constant? [x]\n  (or (nil? x)\n      (number? x)\n      (string? x)\n      (keyword? x)\n      (boolean? x)\n      #?(:clj\n         (instance? java.util.regex.Pattern x)\n         :cljs\n         (instance? js/RegExp x))))\n\n(defmacro kw-identical? [k v]\n  (macros/?\n   :clj `(identical? ~k ~v)\n   :cljs `(cljs.core/keyword-identical? ~k ~v)))\n\n(declare current-file current-ns)\n\n(defn throw-error-with-location\n  ([msg iobj] (throw-error-with-location msg iobj {}))\n  ([msg iobj data]\n   (let [{:keys [:line :column :file]\n          :or {file @current-file}} (meta iobj)]\n     (throw (ex-info msg (merge {:type :sci/error\n                                 :line line\n                                 :column column\n                                 :file file} data))))))\n\n(def ^:dynamic *in-try* false)\n\n(defn macro? [f]\n  (when-some [m (meta f)]\n    (or (:sci/macro m)\n        (:macro m))))\n\n#?(:cljs\n   (def allowed-append \"used for allowing interop in with-out-str\"\n     (symbol \"append\")))\n\n(defn demunge [s]\n  #?(:clj (clojure.lang.Compiler/demunge s)\n     :cljs (cljs.core/demunge s)))\n\n#?(:clj\n   (defn rewrite-ex-msg [ex-msg env fm]\n     (when ex-msg\n       (if-let [[_ printed-fn] (re-matches #\"Wrong number of args \\(\\d+\\) passed to: (.*)\" ex-msg)]\n         (let [fn-pat #\"(sci\\.impl\\.)?fns/fun/arity-([0-9])+--\\d+\"\n               [fn-match prefix arity] (re-find fn-pat ex-msg)\n               friendly-name (when arity (str \"function of arity \" arity))]\n           (if (:name fm)\n             (let [ns (symbol (str (:ns fm)))\n                   var-name (:name fm)\n                   var (get-in @env [:namespaces ns var-name])\n                   fstr (when var (let [varf (if (instance? clojure.lang.IDeref var)\n                                               (deref var)\n                                               var)\n                                        varf (or\n                                              ;; resolve macro inner fn for comparison\n                                              (some-> varf meta :sci.impl/inner-fn)\n                                              varf)\n                                        fstr (clojure.lang.Compiler/demunge (str varf))\n                                        fstr (first (str/split fstr #\"@\"))\n                                        fstr (if prefix\n                                               fstr\n                                               (str/replace fstr #\"^sci\\.impl\\.\" \"\"))]\n                                    fstr))]\n               (cond (and fstr printed-fn (= fstr printed-fn))\n                     (str/replace ex-msg printed-fn\n                                  (str (:ns fm) \"/\" (:name fm)))\n                     friendly-name (str/replace ex-msg fn-match friendly-name)\n                     :else ex-msg))\n             ex-msg))\n         ex-msg))))\n\n(defn rethrow-with-location-of-node\n  ([ctx ^Throwable e raw-node] (rethrow-with-location-of-node ctx (:bindings ctx) e raw-node))\n  ([ctx _bindings ^Throwable e raw-node]\n   (if #?(:clj (or *in-try*\n                   (not= (:main-thread-id ctx)\n                         (.getId (Thread/currentThread))))\n          :cljs *in-try*) (throw e)\n       (let [stack (t/stack raw-node)\n             #?@(:clj [fm (:sci.impl/f-meta stack)])\n             env (:env ctx)\n             id (:id ctx)\n             d (ex-data e)\n             st (or (when-let [st (:sci.impl/callstack d)]\n                      st)\n                    (volatile! '()))]\n         (when stack\n           (vswap! st conj stack))\n         (let [d (ex-data e)\n               ;; st (:sci.impl/callstack d)\n               wrapping-sci-error? (and (isa? (:type d) :sci/error)\n                                        (:sci.impl/callstack d))]\n           (if wrapping-sci-error?\n             (throw e)\n             (let [ex-msg #?(:clj (.getMessage e)\n                             :cljs (.-message e))\n                   {:keys [:line :column :file]}\n                   (or stack\n                       (some-> env deref\n                               :sci.impl/callstack (get id)\n                               deref last meta)\n                       #_(meta node))]\n               (if (and line column)\n                 (let [ex-msg #?(:clj (rewrite-ex-msg ex-msg env fm)\n                                 :cljs ex-msg)\n                       phase (:phase d)\n                       new-exception\n                       (let [new-d (cond-> {:type :sci/error\n                                            :line line\n                                            :column column\n                                            :message ex-msg\n                                            :sci.impl/callstack st\n                                            :file file}\n                                     phase (assoc :phase phase))]\n                         (ex-info ex-msg new-d e))]\n                   (throw new-exception))\n                 (throw e)))))))))\n\n(defn- iobj? [obj]\n  (and #?(:clj (instance? clojure.lang.IObj obj)\n          :cljs (implements? IWithMeta obj))\n       (meta obj)))\n\n(defn vary-meta*\n  \"Only adds metadata to obj if d is not nil and if obj already has meta\"\n  [obj f & args]\n  (if (iobj? obj)\n    (apply vary-meta obj f args)\n    obj))\n\n(defn strip-core-ns [sym]\n  (case (namespace sym)\n    (\"clojure.core\" \"cljs.core\") (symbol (name sym))\n    sym))\n\n(def allowed-loop (symbol \"loop\"))\n(def allowed-recur (symbol \"recur\"))\n(def var-unbound #?(:clj (Object.)\n                    :cljs (js/Object.)))\n\n(defn namespace-object\n  \"Fetches namespaces from env if it exists. Else, if `create?`,\n  produces one regardless of the existince of the namespace in env and\n  adds it to env before returning it.\"\n  [env ns-sym create? attr-map]\n  (let [env* @env\n        ns-map (get-in env* [:namespaces ns-sym])]\n    (or (:obj ns-map)\n        (when (or ns-map create?)\n          (let [ns-obj (lang/->Namespace ns-sym attr-map)]\n            (swap! env assoc-in [:namespaces ns-sym :obj] ns-obj)\n            ns-obj)))))\n\n(defn set-namespace! [ctx ns-sym attr-map]\n  (let [env (:env ctx)\n        attr-map (merge (meta ns-sym) attr-map)\n        ns-obj (namespace-object env ns-sym true attr-map)]\n    (t/setVal current-ns ns-obj)))\n\n(def eval-form-state (volatile! nil))\n(def eval-require-state (volatile! nil))\n(def eval-use-state (volatile! nil))\n(def eval-resolve-state (volatile! nil))\n(def eval-refer-state (volatile! nil))\n(def macroexpand* (volatile! nil))\n(def macroexpand-1* (volatile! nil))\n(def eval-string* (volatile! nil))\n(def lookup (volatile! nil))\n(def analyze (volatile! nil))\n\n(defn eval [sci-ctx form]\n  (@eval-form-state sci-ctx form))\n\n(defn split-when\n  \"Like partition-by but splits collection only when `pred` returns\n  a truthy value. E.g. `(split-when odd? [1 2 3 4 5]) => ((1 2) (3 4) (5))`\"\n  [pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [fst (first s)\n           f (complement pred)\n           run (cons fst (take-while #(f %) (next s)))]\n       (cons run (split-when pred (lazy-seq (drop (count run) s))))))))\n\n(def ana-macros\n  '#{do if and or let fn fn* def defn\n     loop lazy-seq case try defmacro\n     expand-dot* expand-constructor new . import in-ns ns var\n     set! resolve})\n\n(defn maybe-destructured\n  [params body]\n  (if (every? symbol? params)\n    {:params params\n     :body body}\n    (loop [params params\n           new-params (with-meta [] (meta params))\n           lets []]\n      (if params\n        (if (symbol? (first params))\n          (recur (next params) (conj new-params (first params)) lets)\n          (let [gparam (gensym \"p__\")]\n            (recur (next params) (conj new-params gparam)\n                   (-> lets (conj (first params)) (conj gparam)))))\n        {:params new-params\n         :body [`(let ~lets\n                   ~@body)]}))))\n\n(def unqualify-symbol vars/unqualify-symbol)\n\n(defn make-stack\n  ([expr-meta] (make-stack expr-meta false))\n  ([expr-meta special?]\n   (cond-> (assoc expr-meta\n                  :ns @current-ns\n                  :file @current-file)\n     special? (assoc :special true))))\n\n(defn log [& xs]\n  #?(:clj (.println System/err (str/join \" \" xs))\n     :cljs (.log js/console (str/join \" \" xs))))\n\n(defn dynamic-var\n  ([name]\n   (dynamic-var name nil (meta name)))\n  ([name init-val]\n   (dynamic-var name init-val (meta name)))\n  ([name init-val meta]\n   (let [meta (assoc meta :dynamic true :name (unqualify-symbol name))]\n     (sci.lang.Var. init-val name meta false false))))\n\n;; foundational namespaces\n(def user-ns (lang/->Namespace 'user nil))\n\n(def clojure-core-ns (lang/->Namespace 'clojure.core nil))\n\n(def current-file\n  (dynamic-var '*file* nil\n               {:doc \"The path of the file being evaluated, as a String.\\n\\n  When there is no file, e.g. in the REPL, the value is not defined.\"\n                :ns clojure-core-ns}))\n\n(def current-ns\n  (dynamic-var '*ns* user-ns\n               {:ns clojure-core-ns\n                :doc \"A sci.lang.Namespace object representing the current namespace.\"}))\n\n(defn current-ns-name []\n  (t/getName @current-ns))\n\n(defn new-var\n  \"Returns a new sci var.\"\n  ([name] (doto (new-var name nil nil false)\n            (vars/unbind)))\n  ([name init-val] (new-var name init-val (meta name) false))\n  ([name init-val meta] (new-var name init-val meta false))\n  ([name init-val meta ctx?] (sci.lang.Var. init-val name (assoc meta :name (unqualify-symbol name)) false ctx?)))\n\n(defn var? [x]\n  (instance? sci.lang.Var x))\n\n(defn namespace? [x]\n  (instance? #?(:clj sci.lang.Namespace\n                :cljs sci.lang/Namespace) x))\n"]}