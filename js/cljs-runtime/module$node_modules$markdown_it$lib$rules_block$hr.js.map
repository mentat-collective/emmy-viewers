{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_block$hr.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAK/G,IAAIC,QAAUH,OAAA,CAAQ,kDAAR,CAA2BG,CAAAA,OAGzCF,OAAOC,CAAAA,OAAP,CAAiBE,QAAW,CAACC,KAAD,CAAQC,SAAR,CAAmBC,OAAnB,CAA4BC,MAA5B,CAAoC,CAAA,IAClDC,GADkD,CAE1DC,IAAML,KAAMM,CAAAA,MAAN,CAAaL,SAAb,CAANI,CAAgCL,KAAMO,CAAAA,MAAN,CAAaN,SAAb,CAF0B,CAG1DO,IAAMR,KAAMS,CAAAA,MAAN,CAAaR,SAAb,CAGV,IAAiD,CAAjD,EAAID,KAAMU,CAAAA,MAAN,CAAaT,SAAb,CAAJ,CAA8BD,KAAMW,CAAAA,SAApC,CAAsD,MAAO,CAAA,CAE7DC,QAAA,CAASZ,KAAMa,CAAAA,GAAIC,CAAAA,UAAV,CAAqBT,GAAA,EAArB,CAGT,IAAe,EAAf,GAAIO,OAAJ,EACe,EADf,GACIA,OADJ,EAEe,EAFf,GAEIA,OAFJ,CAGE,MAAO,CAAA,CAMT,KADAR,GACA,CADM,CACN,CAAOC,GAAP,CAAaG,GAAb,CAAA,CAAkB,CAChB,IAAAO;AAAKf,KAAMa,CAAAA,GAAIC,CAAAA,UAAV,CAAqBT,GAAA,EAArB,CACL,IAAIU,EAAJ,GAAWH,OAAX,EAAqB,CAACd,OAAA,CAAQiB,EAAR,CAAtB,CAAqC,MAAO,CAAA,CACxCA,GAAJ,GAAWH,OAAX,EAAqBR,GAAA,EAHL,CAMlB,GAAU,CAAV,CAAIA,GAAJ,CAAe,MAAO,CAAA,CAEtB,IAAID,MAAJ,CAAc,MAAO,CAAA,CAErBH,MAAMgB,CAAAA,IAAN,CAAaf,SAAb,CAAyB,CAEzBgB,OAAA,CAAejB,KAAMkB,CAAAA,IAAN,CAAW,IAAX,CAAiB,IAAjB,CAAuB,CAAvB,CACfD,OAAME,CAAAA,GAAN,CAAe,CAAElB,SAAF,CAAaD,KAAMgB,CAAAA,IAAnB,CACfC,OAAMG,CAAAA,MAAN,CAAeC,KAAA,CAAMjB,GAAN,CAAY,CAAZ,CAAekB,CAAAA,IAAf,CAAoBC,MAAOC,CAAAA,YAAP,CAAoBZ,OAApB,CAApB,CAEf,OAAO,CAAA,CApCuD,CAR+C;",
"sources":["node_modules/markdown-it/lib/rules_block/hr.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_block$hr\"] = function(global,require,module,exports) {\n// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","isSpace","module.exports","state","startLine","endLine","silent","cnt","pos","bMarks","tShift","max","eMarks","sCount","blkIndent","marker","src","charCodeAt","ch","line","token","push","map","markup","Array","join","String","fromCharCode"]
}
