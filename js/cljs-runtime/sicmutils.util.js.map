{"version":3,"sources":["sicmutils/util.cljc"],"mappings":";;;;AAcA,AAAA;;;;;;yBAAA,iCAAAA,1DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uDAAA,vDAAMD,kEAKFE;AALJ,AAKO,8DAAA,vDAACC,qDAAQD;;;AALhB,CAAA,uDAAA,vDAAMF,kEAMFE,EAAEE;AANN,AAOG,IAAMC,QAAM,AAACC,6CAAKF;AAAlB,AAAA,0FACGC,MAAM,WAAKE;AAAL,AACE,AAACC,mDAAMH,MAAMI;;AACb,QAACP,kCAAAA,qCAAAA,LAAEK,iBAAAA;;;;AAVjB,CAAA,iDAAA,jDAAMP;;AAAN,AAYA,AAAKU,8BAAmCC;AACxC,AAAKC,8BAAmCC;AACxC,AAAKC,6BAAiCC;AACtC,AAAKC,4BAAgCC;AACrC,AAAKC,yBAA8BC;AACnC,AAAKC,0BAA4BC;AAEjC,wBAAA,xBAAMC,wDAAQC;AAAd,AACE,oDAAA,7CAACC,+EAAS,AAACC,eAAKF;;AAElB;;;;0BAAA,1BAAMG,4DAGHxB,EAAEqB;AAHL,AAIE,OAACI,oBAAU,WAAKC,IAAIC,EAAEC;AAAX,AACE,OAACC,8CAAMH,IAAIC,EAAE,CAAC3B,kCAAAA,qCAAAA,LAAE4B,iBAAAA;GAClB,AAACE,gBAAMT,GACPA;;AAEb;;;mCAAA,nCAAMU,8EAEHC,GAAGC;AAFN,AAIW,OAAOD,QAAGC;;AAErB,wBAAA,xBAAMC,wDAAQ7B;AAAd,AAEW,OAACU,OAAUV;;AAEtB;;;+BAAA,/BAAM8B,sEAEH9B;AAFH,AAIW,oDAAA,7CAAC+B,sDAAW,AAACC,YAAYhC;;AAEpC,8BAAA,9BAAMqC,oEAAcrC;AAApB,AAAA,OAAAiC,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,yFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,OAAA,KAAA,IAAA,XACYpC;;AAEZ,4BAAA,5BAAMsC,gEAAYtC;AAAlB,AAEW,OAACU,OAAUV;;AAEtB,sBAAA,tBAAMuC,mDAAKvC;AAAX,AAEW,OAACwC,6BAA6BxC;;AAEzC,uBAAA,vBAAMyC,qDAAMzC;AAAZ,AAEW,OAAC0C,qDAA0B1C;;AAEtC,yBAAA,zBAAM2C,yDAAQ3C;AAAd,AAEW,GAAI,OAASA;AAAGA;;AAAE,OAAC4C,OAAU5C;;;AAExC,6BAAA,7BAAM6C,kEAAajB;AAAnB,AACE,MAEU,AAAClC,MAASkC;;AAEtB,2BAAA,3BAAMkB,8DAAWlB;AAAjB,AACE,MAEU,AAAClC,MAASkC;;AAEtB;;;sBAAA,tBAAMmB;AAAN,AAGE,mDAEU,AAACC;;AAEb,yBAAA,zBAAMC,0DAASrB;AAAf,AACE,MAEU,AAAClC,MAASkC;;AAEtB,+BAAA,/BAAMsB,sEAAetB;AAArB,AACE,MAEU,AAAClC,MAASkC;;AAEtB,+BAAA,/BAAMuB,sEAAevB;AAArB,AACE,MAEU,AAAClC,MAASkC;;AAEtB,4BAAA,5BAAMwB,gEAAYxB;AAAlB,AACE,MAEU,AAAClC,MAASkC;;AAEtB,qCAAA,rCAAMyB,kFAAqBzB;AAA3B,AACE,MAEU,AAAClC,MAASkC","names":["var_args","G__95362","sicmutils.util/counted","js/Error","f","sicmutils.util.counted","initial-count","count","cljs.core.atom","x","cljs.core.swap_BANG_","cljs.core/inc","sicmutils.util/compute-sqrt","Math/sqrt","sicmutils.util/compute-expt","Math/pow","sicmutils.util/compute-abs","Math/abs","sicmutils.util/biginttype","js/BigInt","sicmutils.util/inttype","js/goog.math.Integer","sicmutils.util/longtype","sicmutils.util.goog$module$goog$math$Long","sicmutils.util/keyset","m","cljs.core.into","cljs.core/keys","sicmutils.util/map-vals","cljs.core/reduce-kv","acc","k","v","cljs.core.assoc","cljs.core/empty","sicmutils.util/re-matches?","re","s","sicmutils.util/bigint","sicmutils.util/bigint?","cljs.core._EQ_","goog/typeOf","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","sicmutils.util/parse-bigint","sicmutils.util/biginteger","sicmutils.util/int","goog.math.Integer/fromNumber","sicmutils.util/long","sicmutils.util.goog$module$goog$math$Long.fromNumber","sicmutils.util/double","js/Number","sicmutils.util/unsupported","sicmutils.util/exception","sicmutils.util/uuid","cljs.core/random-uuid","sicmutils.util/illegal","sicmutils.util/illegal-state","sicmutils.util/arithmetic-ex","sicmutils.util/timeout-ex","sicmutils.util/failure-to-converge"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.util\n  \"Shared utilities between clojure and clojurescript.\"\n  (:refer-clojure :exclude [bigint biginteger double long int uuid])\n  (:require #?(:clj [clojure.core :as core])\n            #?(:clj [clojure.math.numeric-tower :as nt])\n            #?(:cljs goog.math.Integer)\n            #?(:cljs goog.math.Long))\n  #?(:clj\n     (:import (clojure.lang BigInt)\n              (java.util UUID)\n              (java.util.concurrent TimeoutException))))\n\n(defn counted\n  \"Takes a function and returns a pair of:\n\n  - an atom that keeps track of fn invocation counts,\n  - the instrumented fn\"\n  ([f] (counted f 0))\n  ([f initial-count]\n   (let [count (atom initial-count)]\n     [count (fn [x]\n              (swap! count inc)\n              (f x))])))\n\n(def compute-sqrt #?(:clj nt/sqrt :cljs Math/sqrt))\n(def compute-expt #?(:clj nt/expt :cljs Math/pow))\n(def compute-abs #?(:clj nt/abs :cljs Math/abs))\n(def biginttype #?(:clj BigInt :cljs js/BigInt))\n(def inttype #?(:clj Integer :cljs goog.math.Integer))\n(def longtype #?(:clj Long :cljs goog.math.Long))\n\n(defn keyset [m]\n  (into #{} (keys m)))\n\n(defn map-vals\n  \"Returns a map of identical type and key set to `m`, with each value `v`\n  transformed by the supplied function`f` into `(f v)`.\"\n  [f m]\n  (reduce-kv (fn [acc k v]\n               (assoc acc k (f v)))\n             (empty m)\n             m))\n\n(defn re-matches?\n  \"Returns true if s matches the regex pattern re, false otherwise.\"\n  [re s]\n  #?(:clj  (.matches (re-matcher re s))\n     :cljs (.test re s)))\n\n(defn bigint [x]\n  #?(:clj (core/bigint x)\n     :cljs (js/BigInt x)))\n\n(defn bigint?\n  \"Returns true if the supplied `x` is a `BigInt`, false otherwise.\"\n  [x]\n  #?(:clj  (instance? BigInt x)\n     :cljs (= \"bigint\" (goog/typeOf x))))\n\n(defn parse-bigint [x]\n  `(bigint ~x))\n\n(defn biginteger [x]\n  #?(:clj (core/biginteger x)\n     :cljs (js/BigInt x)))\n\n(defn int [x]\n  #?(:clj (core/int x)\n     :cljs (goog.math.Integer/fromNumber x)))\n\n(defn long [x]\n  #?(:clj (core/long x)\n     :cljs (goog.math.Long/fromNumber x)))\n\n(defn double [x]\n  #?(:clj (core/double x)\n     :cljs (if (number? x) x (js/Number x))))\n\n(defn unsupported [s]\n  (throw\n   #?(:clj (UnsupportedOperationException. ^String s)\n      :cljs (js/Error s))))\n\n(defn exception [s]\n  (throw\n   #?(:clj (Exception. ^String s)\n      :cljs (js/Error s))))\n\n(defn uuid\n  \"Returns a string containing a randomly generated unique identifier.\"\n  []\n  (str\n   #?(:clj (UUID/randomUUID)\n      :cljs (random-uuid))))\n\n(defn illegal [s]\n  (throw\n   #?(:clj (IllegalArgumentException. ^String s)\n      :cljs (js/Error s))))\n\n(defn illegal-state [s]\n  (throw\n   #?(:clj (IllegalStateException. ^String s)\n      :cljs (js/Error s))))\n\n(defn arithmetic-ex [s]\n  (throw\n   #?(:clj (ArithmeticException. s)\n      :cljs (js/Error s))))\n\n(defn timeout-ex [s]\n  (throw\n   #?(:clj (TimeoutException. s)\n      :cljs (js/Error s))))\n\n(defn failure-to-converge [s]\n  (throw\n   #?(:clj (Exception. ^String s)\n      :cljs (js/Error s))))\n"]}