shadow$provide.module$node_modules$style_value_types$dist$valueTypes_cjs=function(global,require,module,exports){function isString(v){return"string"===typeof v}function analyse(v){"number"===typeof v&&(v=`${v}`);const values=[];let numColors=0;var colors=v.match(colorRegex);colors&&(numColors=colors.length,v=v.replace(colorRegex,"${c}"),values.push(...colors.map(color.parse)));if(colors=v.match(floatRegex))v=v.replace(floatRegex,"${n}"),values.push(...colors.map(number$jscomp$0.parse));return{values,
numColors,tokenised:v}}function parse(v){return analyse(v).values}function createTransformer(v$jscomp$0){const {values,numColors,tokenised}=analyse(v$jscomp$0),numValues=values.length;return v=>{let output=tokenised;for(let i=0;i<numValues;i++)output=output.replace(i<numColors?"${c}":"${n}",i<numColors?color.transform(v[i]):sanitize(v[i]));return output}}function applyDefaultFilter(v){let [name,value]=v.slice(0,-1).split("(");if("drop-shadow"===name)return v;const [number]=value.match(floatRegex)||
[];if(!number)return v;v=value.replace(number,"");let defaultValue=maxDefaults.has(name)?1:0;number!==value&&(defaultValue*=100);return name+"("+defaultValue+v+")"}Object.defineProperty(exports,"__esModule",{value:!0});var clamp=(min,max)=>v=>Math.max(Math.min(v,max),min);const sanitize=v=>v%1?Number(v.toFixed(5)):v,floatRegex=/(-)?([\d]*\.?[\d])+/g,colorRegex=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi,singleColorRegex=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i,
number$jscomp$0={test:v=>"number"===typeof v,parse:parseFloat,transform:v=>v},alpha$jscomp$0=Object.assign(Object.assign({},number$jscomp$0),{transform:clamp(0,1)});global=Object.assign(Object.assign({},number$jscomp$0),{default:1});var createUnitType=unit=>({test:v=>isString(v)&&v.endsWith(unit)&&1===v.split(" ").length,parse:parseFloat,transform:v=>`${v}${unit}`});require=createUnitType("deg");const percent=createUnitType("%");module=createUnitType("px");const vh=createUnitType("vh");createUnitType=
createUnitType("vw");const progressPercentage=Object.assign(Object.assign({},percent),{parse:v=>percent.parse(v)/100,transform:v=>percent.transform(100*v)});var isColorString=(type,testProp)=>v=>!!(isString(v)&&singleColorRegex.test(v)&&v.startsWith(type)||testProp&&Object.prototype.hasOwnProperty.call(v,testProp));const splitColor=(aName,bName,cName)=>v=>{if(!isString(v))return v;const [a,b,c,alpha]=v.match(floatRegex);return{[aName]:parseFloat(a),[bName]:parseFloat(b),[cName]:parseFloat(c),alpha:void 0!==
alpha?parseFloat(alpha):1}},hsla={test:isColorString("hsl","hue"),parse:splitColor("hue","saturation","lightness"),transform:({hue,saturation,lightness,alpha:alpha$1=1})=>"hsla("+Math.round(hue)+", "+percent.transform(sanitize(saturation))+", "+percent.transform(sanitize(lightness))+", "+sanitize(alpha$jscomp$0.transform(alpha$1))+")"},clampRgbUnit=clamp(0,255),rgbUnit=Object.assign(Object.assign({},number$jscomp$0),{transform:v=>Math.round(clampRgbUnit(v))}),rgba={test:isColorString("rgb","red"),
parse:splitColor("red","green","blue"),transform:({red,green,blue,alpha:alpha$1=1})=>"rgba("+rgbUnit.transform(red)+", "+rgbUnit.transform(green)+", "+rgbUnit.transform(blue)+", "+sanitize(alpha$jscomp$0.transform(alpha$1))+")"},hex={test:isColorString("#"),parse:function(v){let r,g,b;5<v.length?(r=v.substr(1,2),g=v.substr(3,2),b=v.substr(5,2),v=v.substr(7,2)):(r=v.substr(1,1),g=v.substr(2,1),b=v.substr(3,1),v=v.substr(4,1),r+=r,g+=g,b+=b,v+=v);return{red:parseInt(r,16),green:parseInt(g,16),blue:parseInt(b,
16),alpha:v?parseInt(v,16)/255:1}},transform:rgba.transform},color={test:v=>rgba.test(v)||hex.test(v)||hsla.test(v),parse:v=>rgba.test(v)?rgba.parse(v):hsla.test(v)?hsla.parse(v):hex.parse(v),transform:v=>isString(v)?v:v.hasOwnProperty("red")?rgba.transform(v):hsla.transform(v)},convertNumbersToZero=v=>"number"===typeof v?0:v;clamp={test:function(v){var _a,_b,_c,_d;return isNaN(v)&&isString(v)&&0<(null!==(_b=null===(_a=v.match(floatRegex))||void 0===_a?void 0:_a.length)&&void 0!==_b?_b:0)+(null!==
(_d=null===(_c=v.match(colorRegex))||void 0===_c?void 0:_c.length)&&void 0!==_d?_d:0)},parse,createTransformer,getAnimatableNone:function(v){const parsed=parse(v);return createTransformer(v)(parsed.map(convertNumbersToZero))}};const maxDefaults=new Set(["brightness","contrast","saturate","opacity"]),functionRegex=/([a-z-]*)\(.*?\)/g;isColorString=Object.assign(Object.assign({},clamp),{getAnimatableNone:v=>{const functions=v.match(functionRegex);return functions?functions.map(applyDefaultFilter).join(" "):
v}});exports.alpha=alpha$jscomp$0;exports.color=color;exports.complex=clamp;exports.degrees=require;exports.filter=isColorString;exports.hex=hex;exports.hsla=hsla;exports.number=number$jscomp$0;exports.percent=percent;exports.progressPercentage=progressPercentage;exports.px=module;exports.rgbUnit=rgbUnit;exports.rgba=rgba;exports.scale=global;exports.vh=vh;exports.vw=createUnitType}
//# sourceMappingURL=module$node_modules$style_value_types$dist$valueTypes_cjs.js.map
