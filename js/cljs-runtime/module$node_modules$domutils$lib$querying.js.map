{
"version":3,
"file":"module$node_modules$domutils$lib$querying.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/domutils/lib/querying.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$domutils$lib$querying\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Search a node and its children for nodes passing a test function.\n *\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction filter(test, node, recurse, limit) {\n    if (recurse === void 0) { recurse = true; }\n    if (limit === void 0) { limit = Infinity; }\n    if (!Array.isArray(node))\n        node = [node];\n    return find(test, node, recurse, limit);\n}\nexports.filter = filter;\n/**\n * Search an array of node and its children for nodes passing a test function.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction find(test, nodes, recurse, limit) {\n    var result = [];\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n        var elem = nodes_1[_i];\n        if (test(elem)) {\n            result.push(elem);\n            if (--limit <= 0)\n                break;\n        }\n        if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n            var children = find(test, elem.children, recurse, limit);\n            result.push.apply(result, children);\n            limit -= children.length;\n            if (limit <= 0)\n                break;\n        }\n    }\n    return result;\n}\nexports.find = find;\n/**\n * Finds the first element inside of an array that matches a test function.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n */\nfunction findOneChild(test, nodes) {\n    return nodes.find(test);\n}\nexports.findOneChild = findOneChild;\n/**\n * Finds one element in a tree that passes a test.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first child node that passes `test`.\n */\nfunction findOne(test, nodes, recurse) {\n    if (recurse === void 0) { recurse = true; }\n    var elem = null;\n    for (var i = 0; i < nodes.length && !elem; i++) {\n        var checked = nodes[i];\n        if (!(0, domhandler_1.isTag)(checked)) {\n            continue;\n        }\n        else if (test(checked)) {\n            elem = checked;\n        }\n        else if (recurse && checked.children.length > 0) {\n            elem = findOne(test, checked.children);\n        }\n    }\n    return elem;\n}\nexports.findOne = findOne;\n/**\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing a test.\n */\nfunction existsOne(test, nodes) {\n    return nodes.some(function (checked) {\n        return (0, domhandler_1.isTag)(checked) &&\n            (test(checked) ||\n                (checked.children.length > 0 &&\n                    existsOne(test, checked.children)));\n    });\n}\nexports.existsOne = existsOne;\n/**\n * Search and array of nodes and its children for nodes passing a test function.\n *\n * Same as `find`, only with less options, leading to reduced complexity.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nfunction findAll(test, nodes) {\n    var _a;\n    var result = [];\n    var stack = nodes.filter(domhandler_1.isTag);\n    var elem;\n    while ((elem = stack.shift())) {\n        var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1.isTag);\n        if (children && children.length > 0) {\n            stack.unshift.apply(stack, children);\n        }\n        if (test(elem))\n            result.push(elem);\n    }\n    return result;\n}\nexports.findAll = findAll;\n\n};"],
"names":["shadow$provide","global","require","module","exports","find","test","nodes","recurse","limit","result","_i","length","elem","push","domhandler_1","hasChildren","children","apply","findOne","i","checked","isTag","existsOne","some","Object","defineProperty","value","findAll","findOneChild","filter","node","Infinity","Array","isArray","_a","stack","shift","unshift"]
}
