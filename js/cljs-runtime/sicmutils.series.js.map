{"version":3,"sources":["sicmutils/series.cljc"],"mappings":"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AAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,C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","names":["cljs.core/PROTOCOL_SENTINEL","unused__43952__auto__","self__","G__97743","js/Error","args97707","cljs.core/aclone","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sicmutils.series/Series","sicmutils.series/->Series","xs","m","_","sicmutils.function/arity","cljs.core/first","s","old","new","G__97853","p1__97679#","G__97854","sicmutils.series/fmap","sicmutils.differential/replace-tag","tag","G__97856","p1__97680#","G__97857","sicmutils.differential/extract-tangent","sicmutils.series/s-zero","sicmutils.series/s-one","sicmutils.series/s-identity","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","prefix","sicmutils.value/freeze","sicmutils.generic/simplify","cljs.core.take","S","meta","x","writer","cljs.core.write_all","G__97762","G__97763","sicmutils.series/series-value","a","G__97768","G__97769","b","G__97771","G__97772","c","G__97774","G__97775","d","G__97777","G__97778","e","G__97779","G__97780","f","G__97783","G__97784","g","G__97787","G__97788","h","G__97791","G__97792","i","G__97793","G__97794","j","G__97796","G__97797","k","G__97799","G__97800","l","G__97804","G__97805","G__97808","G__97809","n","G__97811","G__97812","o","G__97815","G__97816","p","G__97819","G__97820","q","G__97825","G__97826","r","G__97829","G__97830","G__97831","G__97832","t","G__97837","G__97838","rest","G__97843","G__97844","G__97895","args97869","sicmutils.series/PowerSeries","sicmutils.series/->PowerSeries","G__97900","p1__97867#","G__97901","G__97902","p1__97868#","G__97903","sicmutils.series/zero","sicmutils.series/one","sicmutils.series/identity","cljs.core.filter","cljs.core/complement","sicmutils.value/zero?","cljs.core.map_indexed","sicmutils.value/one?","sicmutils.series/power-series-value","this","sicmutils.series/series?","sicmutils.series/power-series?","sicmutils.series/-make","sicmutils.series/kind->make","kind","G__97920","cljs.core/Keyword","sicmutils.util/illegal","sicmutils.series/series*","sicmutils.series.impl/->series","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.series/series","seq97928","self__4852__auto__","sicmutils.series/power-series*","sicmutils.series/power-series","seq97937","G__97943","sicmutils.series/constant","G__97945","G__97946","fexpr__97944","sicmutils.series/xpow","cljs.core.repeat","G__97951","sicmutils.series/generate","cljs.core.map","cljs.core.range","G__97955","G__97956","fexpr__97954","sicmutils.series/->function","cljs.core/meta","G__97963","sicmutils.series/function->","args-arr__4885__auto__","argseq__4886__auto__","seq97961","G__97962","cljs.core/next","self__4851__auto__","sicmutils.series.function__GT_","fact-n","cljs.core/LazySeq","cljs.core/cons","sicmutils.generic._SLASH_","cljs.core.apply","gen","sicmutils.generic/partial-derivative","one","sicmutils.value/one-like","powers","p1__97965#","cljs.core/iterate","sicmutils.generic._STAR_","sicmutils.generic/*","result","vec__97970","seq__97971","first__97972","r-tail","sicmutils.series.impl/seq:+","collect","cljs.core/rest","sicmutils.series/value","G__97975","G__97976","fexpr__97974","sicmutils.series/inflate","zero","sicmutils.value/zero-like","zeros","G__97978","G__97979","fexpr__97977","cljs.core/concat","sicmutils.series/partial-sums","G__97983","G__97984","fexpr__97982","cljs.core.reductions","sicmutils.generic/+","sicmutils.series/sum","cljs.core.transduce","sicmutils.series/compose","sicmutils.series.impl/compose","sicmutils.series/revert","sicmutils.series.impl/revert","G__97987","sicmutils.series/integral","sicmutils.series.integral","constant","sicmutils.series.impl.integral","sicmutils.series/arg-scale","factors","cljs.core._EQ_","cljs.core/count","p1__97988#","sicmutils.series/arg-shift","shifts","sicmutils.function/arg-shift","p1__97989#","sicmutils.series/exp-series","sicmutils.series.impl/expx","sicmutils.series/sin-series","sicmutils.series.impl/sinx","sicmutils.series/cos-series","sicmutils.series.impl/cosx","sicmutils.series/tan-series","sicmutils.series.impl/tanx","sicmutils.series/sec-series","sicmutils.series.impl/secx","sicmutils.series/asin-series","sicmutils.series.impl/asinx","sicmutils.series/acos-series","sicmutils.series.impl/acosx","sicmutils.series/atan-series","sicmutils.series.impl/atanx","sicmutils.series/acot-series","sicmutils.series.impl/acotx","sicmutils.series/sinh-series","sicmutils.series.impl/sinhx","sicmutils.series/cosh-series","sicmutils.series.impl/coshx","sicmutils.series/tanh-series","sicmutils.series.impl/tanhx","sicmutils.series/asinh-series","sicmutils.series.impl/asinhx","sicmutils.series/atanh-series","sicmutils.series.impl/atanhx","sicmutils.series/log1+x-series","sicmutils.series.impl/log1+x","sicmutils.series/log1-x-series","sicmutils.series.impl/log1-x","sicmutils.series/binomial-series","alpha","sicmutils.series.impl/binomial","sicmutils.series/fib-series","sicmutils.series.impl/fib","sicmutils.series/catalan-series","sicmutils.series.impl/catalan","sicmutils.series/harmonic-series","sicmutils.series.impl/harmonic","sicmutils.series/bell-series","sicmutils.series.impl/bell","cljs.core.derive","seq__97999","chunk__98000","count__98001","i__98002","vec__98118","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__98167","ctor","sicmutils.generic/add","G__98122","G__98123","G__98172","G__98173","G__98124","G__98125","G__98177","G__98178","sicmutils.series.impl/c+seq","G__98126","G__98127","G__98179","G__98180","sicmutils.series.impl/seq+c","sicmutils.generic/negate","G__98128","G__98129","G__98181","G__98182","sicmutils.series.impl/negate","sicmutils.generic/sub","G__98130","G__98131","G__98183","G__98184","sicmutils.series.impl/seq:-","G__98132","G__98133","G__98185","G__98186","sicmutils.series.impl/c-seq","G__98134","G__98135","G__98189","G__98190","sicmutils.series.impl/seq-c","sicmutils.generic/mul","G__98136","G__98137","G__98192","G__98193","sicmutils.series.impl/seq:*","G__98138","G__98139","G__98197","G__98198","sicmutils.series.impl/c*seq","G__98141","G__98142","G__98199","G__98200","sicmutils.series.impl/seq*c","sicmutils.generic/square","G__98145","G__98146","G__98201","G__98202","sicmutils.generic/cube","G__98149","G__98150","G__98203","G__98204","sicmutils.generic/expt","G__98153","G__98154","G__98206","G__98207","sicmutils.series.impl/expt","sicmutils.generic/invert","G__98155","G__98156","G__98210","G__98211","sicmutils.series.impl/invert","sicmutils.generic/div","G__98157","G__98158","G__98216","G__98217","sicmutils.series.impl/c-div-seq","G__98159","G__98160","G__98218","G__98219","sicmutils.series.impl/seq-div-c","G__98161","G__98162","G__98222","G__98223","sicmutils.series.impl/div","sicmutils.generic/solve-linear-right","sicmutils.generic/solve-linear","sicmutils.generic/sqrt","G__98165","G__98166","G__98226","G__98227","sicmutils.series.impl/sqrt","sicmutils.generic/exp","sicmutils.generic/cos","sicmutils.generic/sin","sicmutils.generic/tan","sicmutils.generic/sec","sicmutils.generic/asin","sicmutils.generic/acos","sicmutils.generic/atan","sicmutils.generic/acot","sicmutils.generic/cosh","sicmutils.generic/sinh","sicmutils.generic/tanh","sicmutils.generic/asinh","sicmutils.generic/atanh","sicmutils.value/seqtype","selectors","p1__98242#","cljs.core/empty?","sicmutils.series.impl/deriv"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.series\n  \"This namespace contains an implementation of two data types:\n\n  - [[Series]], which represents a generic infinite series of arbitrary values, and\n  - [[PowerSeries]], a series that represents a power series in a single\n  variable; in other words, a series where the nth entry is interpreted as\n  the coefficient of $x^n$:\n\n  ```\n  $$[a b c d ...] == $a + bx + cx^2 + dx^3 + ...$$\n  ```\n\n  Many of the functions below draw on the [[sicmutils.series.impl]] namespace,\n  which implements many of these operations on bare Clojure sequences.\n\n  The implementation follows Doug McIlroy's beautiful paper, [\\\"Power Series,\n  Power\n  Serious\\\"](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.333.3156&rep=rep1&type=pdf).\n\n  Doug also has a 10-line version in Haskell on [his\n  website](https://www.cs.dartmouth.edu/~doug/powser.html).\"\n  (:refer-clojure :exclude [identity])\n  (:require [sicmutils.differential :as d]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g]\n            [sicmutils.series.impl :as i]\n            [sicmutils.util :as u]\n            [sicmutils.value :as v])\n  #?(:clj\n     (:import (clojure.lang AFn IFn IObj Seqable Sequential))))\n\n(declare fmap s-zero s-one s-identity series-value)\n\n(deftype Series [xs m]\n  f/IArity\n  (arity [_] (f/arity (first xs)))\n\n  d/IPerturbed\n  (perturbed? [_] false)\n  (replace-tag [s old new] (fmap #(d/replace-tag % old new) s))\n  (extract-tangent [s tag] (fmap #(d/extract-tangent % tag) s))\n\n  v/Value\n  (zero? [_] false)\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [_] s-zero)\n  (one-like [_] s-one)\n\n  ;; This is suspect, since [[Series]], unlike [[PowerSeries]], are general\n  ;; infinite sequences and not necessarily interpreted as polynomials. This\n  ;; decision follows `scmutils` convention.\n  (identity-like [_] s-identity)\n  (exact? [_] false)\n  (freeze [_]\n    (let [prefix (v/freeze\n                  (g/simplify (take 4 xs)))]\n      `(~'+ ~@prefix ~'...)))\n  (kind [_] ::series)\n\n  Object\n  (toString [S] (str (v/freeze S)))\n\n  #?@\n  (:clj\n   [IObj\n    (meta [_] m)\n    (withMeta [_ meta] (Series. xs meta))\n\n    Sequential\n\n    Seqable\n    (seq [_] xs)\n\n    IFn\n    ;; Invoking a series uses `series-value` to generate a new series.\n    (invoke [_]\n            (Series. (series-value xs []) nil))\n    (invoke [_ a]\n            (Series. (series-value xs [a]) nil))\n    (invoke [_ a b]\n            (Series. (series-value xs [a b]) nil))\n    (invoke [_ a b c]\n            (Series. (series-value xs [a b c]) nil))\n    (invoke [_ a b c d]\n            (Series. (series-value xs [a b c d]) nil))\n    (invoke [_ a b c d e]\n            (Series. (series-value xs [a b c d e]) nil))\n    (invoke [_ a b c d e f]\n            (Series. (series-value xs [a b c d e f]) nil))\n    (invoke [_ a b c d e f g]\n            (Series. (series-value xs [a b c d e f g]) nil))\n    (invoke [_ a b c d e f g h]\n            (Series. (series-value xs [a b c d e f g h]) nil))\n    (invoke [_ a b c d e f g h i]\n            (Series. (series-value xs [a b c d e f g h i]) nil))\n    (invoke [_ a b c d e f g h i j]\n            (Series. (series-value xs [a b c d e f g h i j]) nil))\n    (invoke [_ a b c d e f g h i j k]\n            (Series. (series-value xs [a b c d e f g h i j k]) nil))\n    (invoke [_ a b c d e f g h i j k l]\n            (Series. (series-value xs [a b c d e f g h i j k l]) nil))\n    (invoke [_ a b c d e f g h i j k l m]\n            (Series. (series-value xs [a b c d e f g h i j k l m]) nil))\n    (invoke [_ a b c d e f g h i j k l m n]\n            (Series. (series-value xs [a b c d e f g h i j k l m n]) nil))\n    (invoke [_ a b c d e f g h i j k l m n o]\n            (Series. (series-value xs [a b c d e f g h i j k l m n o]) nil))\n    (invoke [_ a b c d e f g h i j k l m n o p]\n            (Series. (series-value xs [a b c d e f g h i j k l m n o p]) nil))\n    (invoke [_ a b c d e f g h i j k l m n o p q]\n            (Series. (series-value xs [a b c d e f g h i j k l m n o p q]) nil))\n    (invoke [_ a b c d e f g h i j k l m n o p q r]\n            (Series. (series-value xs [a b c d e f g h i j k l m n o p q r]) nil))\n    (invoke [_ a b c d e f g h i j k l m n o p q r s]\n            (Series. (series-value xs [a b c d e f g h i j k l m n o p q r s]) nil))\n    (invoke [_ a b c d e f g h i j k l m n o p q r s t]\n            (Series. (series-value xs [a b c d e f g h i j k l m n o p q r s t]) nil))\n    (invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n            (Series. (series-value xs (concat [a b c d e f g h i j k l m n o p q r s t] rest)) nil))\n    (applyTo [s xs] (AFn/applyToHelper s xs))]\n\n   :cljs\n   [IMeta\n    (-meta [_] m)\n\n    IWithMeta\n    (-with-meta [_ meta] (Series. xs meta))\n\n    ISequential\n\n    ISeqable\n    (-seq [_] xs)\n\n    IPrintWithWriter\n    (-pr-writer [x writer _]\n                (write-all writer\n                           \"#object[sicmutils.series.Series \\\"\"\n                           (.toString x)\n                           \"\\\"]\"))\n\n    IFn\n    (-invoke [_]\n             (Series. (series-value xs []) nil))\n    (-invoke [_ a]\n             (Series. (series-value xs [a]) nil))\n    (-invoke [_ a b]\n             (Series. (series-value xs [a b]) nil))\n    (-invoke [_ a b c]\n             (Series. (series-value xs [a b c]) nil))\n    (-invoke [_ a b c d]\n             (Series. (series-value xs [a b c d]) nil))\n    (-invoke [_ a b c d e]\n             (Series. (series-value xs [a b c d e]) nil))\n    (-invoke [_ a b c d e f]\n             (Series. (series-value xs [a b c d e f]) nil))\n    (-invoke [_ a b c d e f g]\n             (Series. (series-value xs [a b c d e f g]) nil))\n    (-invoke [_ a b c d e f g h]\n             (Series. (series-value xs [a b c d e f g h]) nil))\n    (-invoke [_ a b c d e f g h i]\n             (Series. (series-value xs [a b c d e f g h i]) nil))\n    (-invoke [_ a b c d e f g h i j]\n             (Series. (series-value xs [a b c d e f g h i j]) nil))\n    (-invoke [_ a b c d e f g h i j k]\n             (Series. (series-value xs [a b c d e f g h i j k]) nil))\n    (-invoke [_ a b c d e f g h i j k l]\n             (Series. (series-value xs [a b c d e f g h i j k l]) nil))\n    (-invoke [_ a b c d e f g h i j k l m]\n             (Series. (series-value xs [a b c d e f g h i j k l m]) nil))\n    (-invoke [_ a b c d e f g h i j k l m n]\n             (Series. (series-value xs [a b c d e f g h i j k l m n]) nil))\n    (-invoke [_ a b c d e f g h i j k l m n o]\n             (Series. (series-value xs [a b c d e f g h i j k l m n o]) nil))\n    (-invoke [_ a b c d e f g h i j k l m n o p]\n             (Series. (series-value xs [a b c d e f g h i j k l m n o p]) nil))\n    (-invoke [_ a b c d e f g h i j k l m n o p q]\n             (Series. (series-value xs [a b c d e f g h i j k l m n o p q]) nil))\n    (-invoke [_ a b c d e f g h i j k l m n o p q r]\n             (Series. (series-value xs [a b c d e f g h i j k l m n o p q r]) nil))\n    (-invoke [_ a b c d e f g h i j k l m n o p q r s]\n             (Series. (series-value xs [a b c d e f g h i j k l m n o p q r s]) nil))\n    (-invoke [_ a b c d e f g h i j k l m n o p q r s t]\n             (Series. (series-value xs [a b c d e f g h i j k l m n o p q r s t]) nil))\n    (-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n             (Series. (series-value xs (concat [a b c d e f g h i j k l m n o p q r s t] rest)) nil))]))\n\n;; Unmap the auto-generated constructor and replace it with a better one.\n\n#?(:clj\n   (defmethod print-method Series [^Series s ^java.io.Writer w]\n     (.write w (str \"#object[sicmutils.series.Series \\\"\"\n                    (.toString s)\n                    \"\\\"]\"))))\n\n;; ### Power Series\n;;\n;; The primary difference from `Series` is the `IFn` implementation; application\n;; of a power series multiples each coefficient by a successively larger power\n;; of its (single, for now) argument.\n;;\n;; TODO Modify this description once we implement multivariable power series!\n\n(declare zero one identity power-series-value)\n\n(deftype PowerSeries [xs m]\n  f/IArity\n  (arity [_] [:exactly 1])\n\n  d/IPerturbed\n  (perturbed? [_] false)\n  (replace-tag [s old new] (fmap #(d/replace-tag % old new) s))\n  (extract-tangent [s tag] (fmap #(d/extract-tangent % tag) s))\n\n  v/Value\n  (zero? [_] false)\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [_] zero)\n  (one-like [_] one)\n  (identity-like [_] identity)\n  (exact? [_] false)\n  (freeze [_]\n    (let [prefix (->> (g/simplify (take 4 xs))\n                      (v/freeze)\n                      (filter (complement v/zero?))\n                      (map-indexed\n                       (fn [n a]\n                         (if (v/one? a)\n                           `(~'expt ~'_ ~n)\n                           `(~'* ~a (~'expt ~'_ ~n))))))]\n      `(~'+ ~@prefix ~'...)))\n  (kind [_] ::power-series)\n\n  Object\n  (toString [S] (str (v/freeze S)))\n\n  #?@\n  (:clj\n   [IObj\n    (meta [_] m)\n    (withMeta [_ meta] (PowerSeries. xs meta))\n\n    Sequential\n\n    Seqable\n    (seq [_] xs)\n\n    IFn\n    (invoke [_ a] (Series. (power-series-value xs a) nil))\n    (applyTo [s xs] (AFn/applyToHelper s xs))]\n\n   :cljs\n   [IMeta\n    (-meta [_] m)\n\n    IWithMeta\n    (-with-meta [_ meta] (PowerSeries. xs meta))\n\n    ISequential\n\n    ISeqable\n    (-seq [_] xs)\n\n    IFn\n    (-invoke [_ a] (Series. (power-series-value xs a) nil))\n\n    IPrintWithWriter\n    (-pr-writer [this writer _]\n                (write-all writer\n                           \"#object[sicmutils.series.PowerSeries \\\"\"\n                           (.toString this)\n                           \"\\\"]\"))]))\n\n#?(:clj\n   (defmethod print-method PowerSeries [^PowerSeries s ^java.io.Writer w]\n     (.write w (str \"#object[sicmutils.series.PowerSeries \\\"\"\n                    (.toString s)\n                    \"\\\"]\"))))\n\n;; ## Constructors\n\n(defn series?\n  \"Returns true if `s` is either a [[Series]] or a [[PowerSeries]], false\n  otherwise.\"\n  [s]\n  (or (instance? Series s)\n      (instance? PowerSeries s)))\n\n(defn power-series?\n  \"Returns true if `s` is specifically a [[PowerSeries]], false otherwise.\"\n  [s]\n  (instance? PowerSeries s))\n\n(defn- -make\n  \"Takes a [[series?]]-true object and returns the appropriate, more specific\n  constructor.\"\n  [s]\n  (if (power-series? s)\n    ->PowerSeries\n    ->Series))\n\n(defn- kind->make\n  \"Takes a keyword - either `::series` or `::power-series` - and returns the\n  appropriate series constructor. Throws if neither of these are supplied.\"\n  [kind]\n  (case kind\n    ::series ->Series\n    ::power-series ->PowerSeries\n    (u/illegal (str \"Unsupported kind: \" kind))))\n\n(defn series*\n  \"Given a sequence, returns a new [[Series]] object that wraps that\n  sequence (potentially padding its tail with zeros if it's finite).\"\n  [prefix]\n  (->Series (i/->series prefix) nil))\n\n(defn series\n  \"Return a [[Series]] starting with the supplied values. The remainder of the\n  series will be filled with the zero-value corresponding to the first of the\n  given values.\n\n  If you have a sequence already, prefer [[series*]].\"\n  [& prefix]\n  (series* prefix))\n\n(defn power-series*\n  \"Given a sequence, returns a new [[PowerSeries]] object that wraps that\n  sequence (potentially padding its tail with zeros if it's finite).\"\n  [prefix]\n  (->PowerSeries (i/->series prefix) nil))\n\n(defn power-series\n  \"Return a [[PowerSeries]] starting with the supplied values. The remainder of\n  the series will be filled with the zero-value corresponding to the first of\n  the given values.\n\n  If you have a sequence already, prefer [[power-series*]].\"\n  [& prefix]\n  (power-series* prefix))\n\n(def ^:private s-zero (series* [0]))\n(def ^:private s-one (series* [1]))\n(def ^:private s-identity (series* [0 1]))\n\n;; These exposed objects are `PowerSeries` instances, because the concepts of\n;; zero, one and identity don't make sense unless you interpret these as\n;; coefficients on a power series.\n\n(def ^{:doc \"[[PowerSeries]] instance representing the constant 0.\"}\n  zero\n  (power-series* [0]))\n\n(def ^{:doc \"[[PowerSeries]] instance representing the constant 1.\"}\n  one\n  (power-series* [1]))\n\n(def ^{:doc \"[[PowerSeries]] instance representing the identity function.\"}\n  identity\n  (power-series* [0 1]))\n\n(defn constant\n  \"Returns a [[PowerSeries]] representing the supplied constant term.\n\n  Optionally, pass `kind` of either `::series` or `::power-series` to specify\n  the type of series returned.\"\n  ([c] (power-series* [c]))\n  ([c kind] ((kind->make kind) (i/->series [c]) nil)))\n\n(defn xpow\n  \"Returns a [[PowerSeries]] instance representing $x^n$.\"\n  [n]\n  {:pre [(>= n 0)]}\n  (power-series* (concat (repeat n 0) [1])))\n\n(defn generate\n  \"Returns a [[PowerSeries]] generated by `(f i)` for `i` in `0, 1, ...`\n\n  Optionally, pass `kind` of either `::series` or `::power-series` to specify\n  the type of series returned.\"\n  ([f] (->PowerSeries (map f (range)) nil))\n  ([f kind]\n   ((kind->make kind) (map f (range)) nil)))\n\n(defn ->function\n  \"Accepts a [[Series]] or [[PowerSeries]] and coerces the input to\n  a [[PowerSeries]] without any application. Returns the coerced [[PowerSeries]]\n  instance.\n\n  Supplying a non-series will throw.\"\n  [s]\n  (cond (power-series? s) s\n        (series? s) (->PowerSeries (seq s) (meta s))\n        :else (u/illegal \"non-series provided to ->function.\")))\n\n;; To go the other way we need Taylor's theorem to give us a power series:\n\n(defn function->\n  \"Returns a [[PowerSeries]] representing the [Taylor\n  series](https://en.wikipedia.org/wiki/Taylor_series) expansion of `f` at the\n  point specified by `xs`. Multiple arguments are allowed. If no arguments `xs`\n  are supplied, the expansion point defaults to 0.\n\n  The expansion at 0 is also called a 'Maclaurin series'.\n\n  NOTE: this function takes derivatives internally, so if you pass a function\n  make sure you require [[sicmutils.calculus.derivative]] to install the\n  derivative implementation for functions. If you pass some other callable,\n  differentiable function-like thing, like a polynomial, this is not necessary.\n\n  NOTE: The typical definition of a Taylor series of `f` expanded around some\n  point `x` is\n\n  $$T(p) = f(x) + \\\\frac{f'(x)}{1!}(p-x) + \\\\frac{f''(x)}{2!} (p-x)^2 + \\\\ldots,$$\n\n  where `p` is the evaluation point. When `(= p x)`, all derivatives of the\n  Taylor series expansion of `f` will exactly match the derivatives of `f`\n  itself.\n\n  The Taylor series returned here (call it $T'$) is actually a function of `dx`,\n  where\n\n  $$T'(dx) = T(x+dx) = f(x) + \\\\frac{f'(x)}{1!}(dx) + \\\\frac{f''(x)}{2!} (dx)^2 + \\\\ldots.$$\"\n  ([f] (function-> f 0))\n  ([f & xs]\n   (letfn [(gen [i f fact-n]\n             (lazy-seq\n              (cons (g// (apply f xs) fact-n)\n                    (gen (inc i)\n                         (g/partial-derivative f [])\n                         (* fact-n i)))))]\n     (->PowerSeries (gen 1 f 1) nil))))\n\n;; ## Application\n;;\n;; Given some power series $F$, we can \"apply\" the series to a value $x$ by\n;; multiplying each entry $f_n$ by $x^n$:\n\n(defn- power-series-value\n  \"Evaluates the power series, and converts it back down to a normal series.\"\n  [f x]\n  (let [one    (v/one-like x)\n        powers (iterate #(g/* x %) one)]\n    (map g/* f powers)))\n\n;; Once a `PowerSeries` has been applied, it becomes a `Series`.\n;;\n;; What does it mean to apply a `Series`? The concept only makes sense if the\n;; series contains \"applicables\", or objects that can act as functions\n;; themselves.\n;;\n;; If it does, then application of a series to some argument list `xs` means\n;; applying each series element to `xs`.\n;;\n;; One further wrinkle occurs if the applicable in some position returns a\n;; series. `value` should combine all of these resulting series, with each\n;; series shifted by its initial position in the first series.\n;; Concretely, suppose that $F$ has the form:\n;;\n;; $$(x => (A1, A2, A3, ...), x => (B1, B2, B3, ...) x => (C1, C2, C3, ...), ...)$$\n\n;; Then, this series applied to x should yield the series of values\n;; (A1, (+ A2 B1), (+ A3 B2 C1), ...)\n;;\n;; Here's the implementation:\n\n(defn- series-value [f xs]\n  (letfn [(collect [f]\n            (let [result (apply (first f) xs)]\n              (if (series? result)\n                (lazy-seq\n                 (let [[r & r-tail] result]\n                   (cons r (i/seq:+ r-tail (collect (rest f))))))\n\n                ;; note that we have already realized first-result,\n                ;; so it does not need to be behind lazy-seq.\n                (cons result (lazy-seq (collect (rest f)))))))]\n    (collect (seq f))))\n\n(defn value\n  \"Returns the value of the supplied [[Series]] or [[PowerSeries]] applied to `xs`.\n\n  If a [[PowerSeries]] is supplied, `xs` (despite its name) must be a single\n  value. Returns a [[Series]] generated by multiplying each `i`th term in `s` by\n  $x^i$, where $x$ is the `xs` argument.\n\n  If a [[Series]] `s` is supplied:\n\n  Assumes that `s` is a series of applicables of arity equal to the count of\n  `xs`. If, in fact, `s` is a series of series-valued applicables, then the\n  result will be a sort of layered sum of the values.\n\n  Concretely, suppose that `s` has the form:\n\n  ```\n  [x => [A1 A2 A3...], x => [B1 B2 B3...], x => [C1 C2 C3...], ...]\n  ```\n\n  Then, this series applied to x will yield the new series:\n\n  ```\n  [A1 (+ A2 B1) (+ A3 B2 C1) ...]\n  ```\n\n  The way to think about this is, that if a power series has some other series\n  as the coefficient of the $x^n$ term, the series must shift by $n$ positions\n  before being added into the final total.\"\n  [s xs]\n  (cond (power-series? s) (power-series-value s xs)\n        (series? s) (series-value s xs)\n        :else\n        (u/illegal (str \"value only works on `Series` or `PowerSeries`; received \" s))))\n\n(defn fmap\n  \"Returns a new series generated by applying the supplied `f` to each element in\n  the input series `s`. The returned series will be the same type as the input\n  series, either [[Series]] or [[PowerSeries]].\n\n  NOTE scmutils calls this `series:elementwise`.\"\n  [f s]\n  ((-make s) (map f s) (meta s)))\n\n(defn inflate\n  \"Accepts an input series `s` and an exponent `n`, and expands the series in the\n  `n`th power of its argument. Every term `i` maps to position `i*n`, with zeros\n  padded in the new missing slots.\n\n  For example:\n\n  ```clojure\n  (inflate identity 3)\n  ;; => (series 0 0 0 1)\n\n  (take 6 (inflate (generate inc) 3))\n  ;; => (1 0 2 0 3 0)\n  ```\n\n  NOTE this operation makes sense as described for a [[PowerSeries]], where each\n  entry represents the coefficient of some power of `x`; functionally it still\n  works with [[Series]] objects.\"\n  [s n]\n  (if (<= n 1)\n    s\n    (let [zero  (v/zero-like (first s))\n          zeros (repeat (dec n) zero)]\n      ((-make s)\n       (->> (map cons s (repeat zeros))\n            (apply concat))\n       (meta s)))))\n\n(defn partial-sums\n  \"Returns a series (of the same type as the input) of partial sums of the terms\n  in the supplied series `s`.\"\n  [s]\n  ((-make s) (reductions g/+ s) (meta s)))\n\n(defn sum\n  \"Returns the sum of all elements in the input series `s` up to order\n  `n` (inclusive). For example:\n\n  ```clojure\n  (sum (series 1 1 1 1 1 1 1) 3)\n  ;; => 4\n  ```\n\n  NOTE that [[sum]] sums the first `n + 1` terms, since a series starts with an\n  order 0 term.\"\n  [s n]\n  (transduce (take (inc n)) g/+ s))\n\n;; ## Power Series Specific Functions\n\n(defn compose\n  \"Returns a new [[PowerSeries]] $U$ that represents the composition of the two\n  input power series $S$ and $T$, where $U$ evaluates like:\n\n  ```\n  $$U(x) = S(T(x))$$\n  ```\"\n  [s t]\n  {:pre [(power-series? s)\n         (power-series? t)]}\n  (->PowerSeries (i/compose (seq s) (seq t))\n                 nil))\n\n(defn revert\n  \"Returns a new [[PowerSeries]] $U$ that represents the compositional inverse (the\n  'reversion') of the input power series $S$, satisfying:\n\n  ```\n  $$S(U(x)) = x$$\n  ```\"\n  [s]\n  {:pre [(power-series? s)]}\n  (->PowerSeries (i/revert (seq s))\n                 (meta s)))\n\n(defn integral\n  \"Returns a [[PowerSeries]] $U$ that represents the definite integral of the\n  input power series $S$ with constant term $c$:\n\n  ```\n  $$U = c + \\\\int_0^{\\\\infty} S$$\n  ```\"\n  ([s] (integral s 0))\n  ([s constant]\n   {:pre [(power-series? s)]}\n   (->PowerSeries (i/integral (seq s) constant)\n                  (meta s))))\n\n(defn arg-scale\n  \"Given a univariate [[PowerSeries]] and a singleton sequence of `factors`,\n  returns a new [[PowerSeries]] that scales its argument by `(first factor)` on\n  application.\n\n  Given a [[Series]], recursively applies [[arg-scale]] to each element, making\n  this ONLY appropriate in its current form for a [[Series]] of [[PowerSeries]]\n  instances.\"\n  [s factors]\n  (if (power-series? s)\n    (do (assert (= (count factors) 1) \"Only univariate [[PowerSeries]] are allowed.\")\n        (compose s (power-series* [0 (first factors)])))\n    (fmap #(arg-scale % factors) s)))\n\n(defn arg-shift\n  \"Given a univariate [[PowerSeries]] and a singleton sequence of `shifts`,\n  returns a function that, when applied, returns a value equivalent to calling\n  the original `s` with its argument shifted by `(first shifts)`.\n\n  NOTE: [[arg-shift]] can't return a [[PowerSeries]] instance because the\n  implementation of [[compose]] does not currently allow a constant element in\n  the right-hand series.\n\n  Given a [[Series]], recursively applies [[arg-shift]] to each element, making\n  this ONLY appropriate in its current form for a [[Series]] of [[PowerSeries]]\n  instances. Returns a [[Series]] of functions.\"\n  [s shifts]\n  (if (power-series? s)\n    (do (assert (= (count shifts) 1) \"Only univariate [[PowerSeries]] are allowed.\")\n        (apply f/arg-shift s shifts))\n    (fmap #(arg-shift % shifts) s)))\n\n;; ## Built In Series\n;;\n;; The following section defines a number of built in series that come up often\n;; enough to be included. There are, of course, far more! Please feel free to\n;; open a PR if you have a series you think should be included.\n\n(def exp-series (->PowerSeries i/expx nil))\n(def sin-series (->PowerSeries i/sinx nil))\n(def cos-series (->PowerSeries i/cosx nil))\n(def tan-series (->PowerSeries i/tanx nil))\n(def sec-series (->PowerSeries i/secx nil))\n\n(def asin-series (->PowerSeries i/asinx nil))\n(def acos-series (->PowerSeries i/acosx nil))\n(def atan-series (->PowerSeries i/atanx nil))\n(def acot-series (->PowerSeries i/acotx nil))\n\n(def sinh-series (->PowerSeries i/sinhx nil))\n(def cosh-series (->PowerSeries i/coshx nil))\n(def tanh-series (->PowerSeries i/tanhx nil))\n(def asinh-series (->PowerSeries i/asinhx nil))\n(def atanh-series (->PowerSeries i/atanhx nil))\n\n(def log1+x-series (->PowerSeries i/log1+x nil))\n(def log1-x-series (->PowerSeries i/log1-x nil))\n\n(defn binomial-series\n  \"Returns a [[PowerSeries]] instance representing a\n  [Binomial series](https://en.wikipedia.org/wiki/Binomial_series), ie, the\n  taylor series of the function $f$ given by\n\n  ```\n  $$f(x) = (1 + x)^\\\\alpha$$\n  ```\"\n  [alpha]\n  (->PowerSeries (i/binomial alpha) nil))\n\n;; ## Series (vs PowerSeries)\n;;\n;; These are interesting sequences, not taylor series, but nice to have in a\n;; library like SICMUtils.\n\n(def fib-series (->Series i/fib nil))\n(def catalan-series (->Series i/catalan nil))\n(def harmonic-series (->Series i/harmonic nil))\n(def bell-series (->Series i/bell nil))\n\n;; ## Generic Implementations\n;;\n;; This section installs `Series` and `PowerSeries` into the SICMUtils generic\n;; arithmetic system.\n;;\n;; A key idea here is that all \"coefficients\" of a series must be some kind\n;; derived from `::coseries`. This is /not/ true in the Scheme scmutils library;\n;; in that library, anything that responds false to `series?` is game for\n;; interaction with series objects.\n;;\n;; NOTE This might be the right way to go. Feel free to experiment.\n\n(derive ::v/scalar ::coseries)\n(derive ::v/function ::coseries)\n\n;; All generic methods:\n;;\n;; - unwrap the supplied series instances,\n;; - operate directly on their backing sequences\n;; - repackage the result using the appropriate constructor\n;;\n;; This section does /not/ define methods that coerce `Series` => `PowerSeries`\n;; or vice versa. Users should do this explicitly.\n\n(doseq [[ctor kind] [[->Series ::series]\n                     [->PowerSeries ::power-series]]]\n  (defmethod g/add [kind kind] [s t]\n    (ctor (i/seq:+ (seq s) (seq t)) nil))\n\n  (defmethod g/add [::coseries kind] [c s]\n    (ctor (i/c+seq c (seq s))\n          (meta s)))\n\n  (defmethod g/add [kind ::coseries] [s c]\n    (ctor (i/seq+c (seq s) c)\n          (meta s)))\n\n  (defmethod g/negate [kind] [s]\n    (ctor (i/negate (seq s))\n          (meta s)))\n\n  (defmethod g/sub [kind kind] [s t]\n    (ctor (i/seq:- (seq s) (seq t)) nil))\n\n  (defmethod g/sub [::coseries kind] [c s]\n    (ctor (i/c-seq c (seq s))\n          (meta s)))\n\n  (defmethod g/sub [kind ::coseries] [s c]\n    (ctor (i/seq-c (seq s) c)\n          (meta s)))\n\n  (defmethod g/mul [kind kind] [s t]\n    (ctor (i/seq:* (seq s) (seq t)) nil))\n\n  (defmethod g/mul [::coseries kind] [c s]\n    (ctor (i/c*seq c (seq s))\n          (meta s)))\n\n  (defmethod g/mul [kind ::coseries] [s c]\n    (ctor (i/seq*c (seq s) c)\n          (meta s)))\n\n  (defmethod g/square [kind] [s]\n    (let [xs (seq s)]\n      (ctor (i/seq:* xs xs)\n            (meta s))))\n\n  (defmethod g/cube [kind] [s]\n    (let [xs (seq s)]\n      (ctor (i/seq:* (i/seq:* xs xs) xs)\n            (meta s))))\n\n  (defmethod g/expt [kind ::v/native-integral] [s e]\n    (ctor (i/expt (seq s) e)\n          (meta s)))\n\n  (defmethod g/invert [kind] [s]\n    (ctor (i/invert (seq s))\n          (meta s)))\n\n  (defmethod g/div [::coseries kind] [c s]\n    (ctor (i/c-div-seq c (seq s))\n          (meta s)))\n\n  (defmethod g/div [kind ::coseries] [s c]\n    (ctor (i/seq-div-c (seq s) c)\n          (meta s)))\n\n  (defmethod g/div [kind kind] [s t]\n    (ctor (i/div (seq s) (seq t)) nil))\n\n  (defmethod g/solve-linear-right [::coseries kind] [c s] (g/div c s))\n  (defmethod g/solve-linear-right [kind ::coseries] [s c] (g/div s c))\n  (defmethod g/solve-linear-right [kind kind] [s t] (g/div s t))\n\n  ;; `g/solve-linear` acts identically to `g/div` with arguments reversed.\n  (defmethod g/solve-linear [::coseries kind] [c s] (g/div s c))\n  (defmethod g/solve-linear [kind ::coseries] [s c] (g/div c s))\n  (defmethod g/solve-linear [kind kind] [s t] (g/div t s))\n\n  (defmethod g/sqrt [kind] [s]\n    (ctor (i/sqrt (seq s))\n          (meta s)))\n\n  (defmethod g/simplify [kind] [s]\n    (fmap g/simplify s)))\n\n;; ## Power Series Generic Extensions\n;;\n;; A `PowerSeries` is a single variable function; we extend the following\n;; methods to `PowerSeries` in the same style as they're extended for functions.\n;; Each of the following act like function composition, and compose their\n;; operation with the function represented by the `PowerSeries`.\n;;\n;; If `s` is a `PowerSeries` that applies as `(s x)`, `(g/exp s)` returns a\n;; series that represents `(g/exp (s x))`.\n\n(defmethod g/exp [::power-series] [s]\n  (->PowerSeries (i/compose i/expx (seq s))\n                 (meta s)))\n\n(defmethod g/cos [::power-series] [s]\n  (->PowerSeries (i/compose i/cosx (seq s))\n                 (meta s)))\n\n(defmethod g/sin [::power-series] [s]\n  (->PowerSeries (i/compose i/sinx (seq s))\n                 (meta s)))\n\n(defmethod g/tan [::power-series] [s]\n  (->PowerSeries (i/compose i/tanx (seq s))\n                 (meta s)))\n\n(defmethod g/sec [::power-series] [s]\n  (->PowerSeries (i/compose i/secx (seq s))\n                 (meta s)))\n\n(defmethod g/asin [::power-series] [s]\n  (->PowerSeries (i/compose i/asinx (seq s))\n                 (meta s)))\n\n(defmethod g/acos [::power-series] [s]\n  (->PowerSeries (i/compose i/acosx (seq s))\n                 (meta s)))\n\n(defmethod g/atan [::power-series] [s]\n  (->PowerSeries (i/compose i/atanx (seq s))\n                 (meta s)))\n\n(defmethod g/acot [::power-series] [s]\n  (->PowerSeries (i/compose i/acotx (seq s))\n                 (meta s)))\n\n(defmethod g/cosh [::power-series] [s]\n  (->PowerSeries (i/compose i/coshx (seq s))\n                 (meta s)))\n\n(defmethod g/sinh [::power-series] [s]\n  (->PowerSeries (i/compose i/sinhx (seq s))\n                 (meta s)))\n\n(defmethod g/tanh [::power-series] [s]\n  (->PowerSeries (i/compose i/tanhx (seq s))\n                 (meta s)))\n\n(defmethod g/asinh [::power-series] [s]\n  (->PowerSeries (i/compose i/asinhx (seq s))\n                 (meta s)))\n\n(defmethod g/atanh [::power-series] [s]\n  (->PowerSeries (i/compose i/atanhx (seq s))\n                 (meta s)))\n\n;; ## Derivatives\n;;\n;; For a `Series`, the derivative operation assumes that the series contains\n;; applicables that can take their own partial derivatives.\n\n(defmethod g/partial-derivative [::series v/seqtype] [^Series s selectors]\n  (->Series (map #(g/partial-derivative % selectors)\n                 (.-xs s))\n            (.-m s)))\n\n;; A `PowerSeries` is itself a single-variable function, so\n;; `g/partial-derivative` simply takes the series derivative of the contained\n;; sequence.\n\n(defmethod g/partial-derivative [::power-series v/seqtype] [^PowerSeries s selectors]\n  (if (empty? selectors)\n    (->PowerSeries (i/deriv (.-xs s))\n                   (.-m s))\n    (u/illegal\n     (str \"Cannot yet take partial derivatives of a power series: \" s selectors))))\n"]}