{
"version":3,
"file":"module$node_modules$$mentatcollective$jsxgraph$src$math$geometry.js",
"lineCount":78,
"mappings":"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",
"sources":["node_modules/@mentatcollective/jsxgraph/src/math/geometry.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mentatcollective$jsxgraph$src$math$geometry\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jxg = _interopRequireDefault(require(\"../jxg\"));\n\nvar _constants = _interopRequireDefault(require(\"../base/constants\"));\n\nvar _coords = _interopRequireDefault(require(\"../base/coords\"));\n\nvar _math = _interopRequireDefault(require(\"./math\"));\n\nvar _numerics = _interopRequireDefault(require(\"./numerics\"));\n\nvar _type = _interopRequireDefault(require(\"../utils/type\"));\n\nvar _expect = _interopRequireDefault(require(\"../utils/expect\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n    Copyright 2008-2022\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Andreas Walter,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <http://www.gnu.org/licenses/>\n    and <http://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview This file contains the Math.Geometry namespace for calculating algebraic/geometric\n * stuff like intersection points, angles, midpoint, and so on.\n */\n\n/**\n * Math.Geometry namespace definition. This namespace holds geometrical algorithms,\n * especially intersection algorithms.\n * @name JXG.Math.Geometry\n * @namespace\n */\n_math.default.Geometry = {}; // the splitting is necessary due to the shortcut for the circumcircleMidpoint method to circumcenter.\n\n_jxg.default.extend(_math.default.Geometry,\n/** @lends JXG.Math.Geometry */\n{\n  /* ***************************************/\n\n  /* *** GENERAL GEOMETRIC CALCULATIONS ****/\n\n  /* ***************************************/\n\n  /**\n   * Calculates the angle defined by the points A, B, C.\n   * @param {JXG.Point,Array} A A point  or [x,y] array.\n   * @param {JXG.Point,Array} B Another point or [x,y] array.\n   * @param {JXG.Point,Array} C A circle - no, of course the third point or [x,y] array.\n   * @deprecated Use {@link JXG.Math.Geometry.rad} instead.\n   * @see #rad\n   * @see #trueAngle\n   * @returns {Number} The angle in radian measure.\n   */\n  angle: function (A, B, C) {\n    var u,\n        v,\n        s,\n        t,\n        a = [],\n        b = [],\n        c = [];\n\n    _jxg.default.deprecated(\"Geometry.angle()\", \"Geometry.rad()\");\n\n    if (A.coords) {\n      a[0] = A.coords.usrCoords[1];\n      a[1] = A.coords.usrCoords[2];\n    } else {\n      a[0] = A[0];\n      a[1] = A[1];\n    }\n\n    if (B.coords) {\n      b[0] = B.coords.usrCoords[1];\n      b[1] = B.coords.usrCoords[2];\n    } else {\n      b[0] = B[0];\n      b[1] = B[1];\n    }\n\n    if (C.coords) {\n      c[0] = C.coords.usrCoords[1];\n      c[1] = C.coords.usrCoords[2];\n    } else {\n      c[0] = C[0];\n      c[1] = C[1];\n    }\n\n    u = a[0] - b[0];\n    v = a[1] - b[1];\n    s = c[0] - b[0];\n    t = c[1] - b[1];\n    return Math.atan2(u * t - v * s, u * s + v * t);\n  },\n\n  /**\n   * Calculates the angle defined by the three points A, B, C if you're going from A to C around B counterclockwise.\n   * @param {JXG.Point,Array} A Point or [x,y] array\n   * @param {JXG.Point,Array} B Point or [x,y] array\n   * @param {JXG.Point,Array} C Point or [x,y] array\n   * @see #rad\n   * @returns {Number} The angle in degrees.\n   */\n  trueAngle: function (A, B, C) {\n    return this.rad(A, B, C) * 57.295779513082323; // *180.0/Math.PI;\n  },\n\n  /**\n   * Calculates the internal angle defined by the three points A, B, C if you're going from A to C around B counterclockwise.\n   * @param {JXG.Point,Array} A Point or [x,y] array\n   * @param {JXG.Point,Array} B Point or [x,y] array\n   * @param {JXG.Point,Array} C Point or [x,y] array\n   * @see #trueAngle\n   * @returns {Number} Angle in radians.\n   */\n  rad: function (A, B, C) {\n    var ax, ay, bx, by, cx, cy, phi;\n\n    if (A.coords) {\n      ax = A.coords.usrCoords[1];\n      ay = A.coords.usrCoords[2];\n    } else {\n      ax = A[0];\n      ay = A[1];\n    }\n\n    if (B.coords) {\n      bx = B.coords.usrCoords[1];\n      by = B.coords.usrCoords[2];\n    } else {\n      bx = B[0];\n      by = B[1];\n    }\n\n    if (C.coords) {\n      cx = C.coords.usrCoords[1];\n      cy = C.coords.usrCoords[2];\n    } else {\n      cx = C[0];\n      cy = C[1];\n    }\n\n    phi = Math.atan2(cy - by, cx - bx) - Math.atan2(ay - by, ax - bx);\n\n    if (phi < 0) {\n      phi += 6.2831853071795862;\n    }\n\n    return phi;\n  },\n\n  /**\n   * Calculates a point on the bisection line between the three points A, B, C.\n   * As a result, the bisection line is defined by two points:\n   * Parameter B and the point with the coordinates calculated in this function.\n   * Does not work for ideal points.\n   * @param {JXG.Point} A Point\n   * @param {JXG.Point} B Point\n   * @param {JXG.Point} C Point\n   * @param [board=A.board] Reference to the board\n   * @returns {JXG.Coords} Coordinates of the second point defining the bisection.\n   */\n  angleBisector: function (A, B, C, board) {\n    var phiA,\n        phiC,\n        phi,\n        Ac = A.coords.usrCoords,\n        Bc = B.coords.usrCoords,\n        Cc = C.coords.usrCoords,\n        x,\n        y;\n\n    if (!_type.default.exists(board)) {\n      board = A.board;\n    } // Parallel lines\n\n\n    if (Bc[0] === 0) {\n      return new _coords.default(_constants.default.COORDS_BY_USER, [1, (Ac[1] + Cc[1]) * 0.5, (Ac[2] + Cc[2]) * 0.5], board);\n    } // Non-parallel lines\n\n\n    x = Ac[1] - Bc[1];\n    y = Ac[2] - Bc[2];\n    phiA = Math.atan2(y, x);\n    x = Cc[1] - Bc[1];\n    y = Cc[2] - Bc[2];\n    phiC = Math.atan2(y, x);\n    phi = (phiA + phiC) * 0.5;\n\n    if (phiA > phiC) {\n      phi += Math.PI;\n    }\n\n    x = Math.cos(phi) + Bc[1];\n    y = Math.sin(phi) + Bc[2];\n    return new _coords.default(_constants.default.COORDS_BY_USER, [1, x, y], board);\n  },\n  // /**\n  //  * Calculates a point on the m-section line between the three points A, B, C.\n  //  * As a result, the m-section line is defined by two points:\n  //  * Parameter B and the point with the coordinates calculated in this function.\n  //  * The m-section generalizes the bisector to any real number.\n  //  * For example, the trisectors of an angle are simply the 1/3-sector and the 2/3-sector.\n  //  * Does not work for ideal points.\n  //  * @param {JXG.Point} A Point\n  //  * @param {JXG.Point} B Point\n  //  * @param {JXG.Point} C Point\n  //  * @param {Number} m Number\n  //  * @param [board=A.board] Reference to the board\n  //  * @returns {JXG.Coords} Coordinates of the second point defining the bisection.\n  //  */\n  // angleMsector: function (A, B, C, m, board) {\n  //     var phiA, phiC, phi,\n  //         Ac = A.coords.usrCoords,\n  //         Bc = B.coords.usrCoords,\n  //         Cc = C.coords.usrCoords,\n  //         x, y;\n  //     if (!Type.exists(board)) {\n  //         board = A.board;\n  //     }\n  //     // Parallel lines\n  //     if (Bc[0] === 0) {\n  //         return new Coords(Const.COORDS_BY_USER,\n  //             [1, (Ac[1] + Cc[1]) * m, (Ac[2] + Cc[2]) * m], board);\n  //     }\n  //     // Non-parallel lines\n  //     x = Ac[1] - Bc[1];\n  //     y = Ac[2] - Bc[2];\n  //     phiA =  Math.atan2(y, x);\n  //     x = Cc[1] - Bc[1];\n  //     y = Cc[2] - Bc[2];\n  //     phiC =  Math.atan2(y, x);\n  //     phi = phiA + ((phiC - phiA) * m);\n  //     if (phiA - phiC > Math.PI) {\n  //         phi += 2*m*Math.PI;\n  //     }\n  //     x = Math.cos(phi) + Bc[1];\n  //     y = Math.sin(phi) + Bc[2];\n  //     return new Coords(Const.COORDS_BY_USER, [1, x, y], board);\n  // },\n\n  /**\n   * Reflects the point along the line.\n   * @param {JXG.Line} line Axis of reflection.\n   * @param {JXG.Point} point Point to reflect.\n   * @param [board=point.board] Reference to the board\n   * @returns {JXG.Coords} Coordinates of the reflected point.\n   */\n  reflection: function (line, point, board) {\n    // (v,w) defines the slope of the line\n    var x0,\n        y0,\n        x1,\n        y1,\n        v,\n        w,\n        mu,\n        pc = point.coords.usrCoords,\n        p1c = line.point1.coords.usrCoords,\n        p2c = line.point2.coords.usrCoords;\n\n    if (!_type.default.exists(board)) {\n      board = point.board;\n    }\n\n    v = p2c[1] - p1c[1];\n    w = p2c[2] - p1c[2];\n    x0 = pc[1] - p1c[1];\n    y0 = pc[2] - p1c[2];\n    mu = (v * y0 - w * x0) / (v * v + w * w); // point + mu*(-y,x) is the perpendicular foot\n\n    x1 = pc[1] + 2 * mu * w;\n    y1 = pc[2] - 2 * mu * v;\n    return new _coords.default(_constants.default.COORDS_BY_USER, [x1, y1], board);\n  },\n\n  /**\n   * Computes the new position of a point which is rotated\n   * around a second point (called rotpoint) by the angle phi.\n   * @param {JXG.Point} rotpoint Center of the rotation\n   * @param {JXG.Point} point point to be rotated\n   * @param {Number} phi rotation angle in arc length\n   * @param {JXG.Board} [board=point.board] Reference to the board\n   * @returns {JXG.Coords} Coordinates of the new position.\n   */\n  rotation: function (rotpoint, point, phi, board) {\n    var x0,\n        y0,\n        c,\n        s,\n        x1,\n        y1,\n        pc = point.coords.usrCoords,\n        rotpc = rotpoint.coords.usrCoords;\n\n    if (!_type.default.exists(board)) {\n      board = point.board;\n    }\n\n    x0 = pc[1] - rotpc[1];\n    y0 = pc[2] - rotpc[2];\n    c = Math.cos(phi);\n    s = Math.sin(phi);\n    x1 = x0 * c - y0 * s + rotpc[1];\n    y1 = x0 * s + y0 * c + rotpc[2];\n    return new _coords.default(_constants.default.COORDS_BY_USER, [x1, y1], board);\n  },\n\n  /**\n   * Calculates the coordinates of a point on the perpendicular to the given line through\n   * the given point.\n   * @param {JXG.Line} line A line.\n   * @param {JXG.Point} point Point which is projected to the line.\n   * @param {JXG.Board} [board=point.board] Reference to the board\n   * @returns {Array} Array of length two containing coordinates of a point on the perpendicular to the given line\n   *                  through the given point and boolean flag \"change\".\n   */\n  perpendicular: function (line, point, board) {\n    var x,\n        y,\n        change,\n        c,\n        z,\n        A = line.point1.coords.usrCoords,\n        B = line.point2.coords.usrCoords,\n        C = point.coords.usrCoords;\n\n    if (!_type.default.exists(board)) {\n      board = point.board;\n    } // special case: point is the first point of the line\n\n\n    if (point === line.point1) {\n      x = A[1] + B[2] - A[2];\n      y = A[2] - B[1] + A[1];\n      z = A[0] * B[0];\n\n      if (Math.abs(z) < _math.default.eps) {\n        x = B[2];\n        y = -B[1];\n      }\n\n      c = [z, x, y];\n      change = true; // special case: point is the second point of the line\n    } else if (point === line.point2) {\n      x = B[1] + A[2] - B[2];\n      y = B[2] - A[1] + B[1];\n      z = A[0] * B[0];\n\n      if (Math.abs(z) < _math.default.eps) {\n        x = A[2];\n        y = -A[1];\n      }\n\n      c = [z, x, y];\n      change = false; // special case: point lies somewhere else on the line\n    } else if (Math.abs(_math.default.innerProduct(C, line.stdform, 3)) < _math.default.eps) {\n      x = C[1] + B[2] - C[2];\n      y = C[2] - B[1] + C[1];\n      z = B[0];\n\n      if (Math.abs(z) < _math.default.eps) {\n        x = B[2];\n        y = -B[1];\n      }\n\n      change = true;\n\n      if (Math.abs(z) > _math.default.eps && Math.abs(x - C[1]) < _math.default.eps && Math.abs(y - C[2]) < _math.default.eps) {\n        x = C[1] + A[2] - C[2];\n        y = C[2] - A[1] + C[1];\n        change = false;\n      }\n\n      c = [z, x, y]; // general case: point does not lie on the line\n      // -> calculate the foot of the dropped perpendicular\n    } else {\n      c = [0, line.stdform[1], line.stdform[2]];\n      c = _math.default.crossProduct(c, C); // perpendicuar to line\n\n      c = _math.default.crossProduct(c, line.stdform); // intersection of line and perpendicular\n\n      change = true;\n    }\n\n    return [new _coords.default(_constants.default.COORDS_BY_USER, c, board), change];\n  },\n\n  /**\n   * @deprecated Please use {@link JXG.Math.Geometry.circumcenter} instead.\n   */\n  circumcenterMidpoint: function () {\n    _jxg.default.deprecated(\"Geometry.circumcenterMidpoint()\", \"Geometry.circumcenter()\");\n\n    this.circumcenter.apply(this, arguments);\n  },\n\n  /**\n   * Calculates the center of the circumcircle of the three given points.\n   * @param {JXG.Point} point1 Point\n   * @param {JXG.Point} point2 Point\n   * @param {JXG.Point} point3 Point\n   * @param {JXG.Board} [board=point1.board] Reference to the board\n   * @returns {JXG.Coords} Coordinates of the center of the circumcircle of the given points.\n   */\n  circumcenter: function (point1, point2, point3, board) {\n    var u,\n        v,\n        m1,\n        m2,\n        A = point1.coords.usrCoords,\n        B = point2.coords.usrCoords,\n        C = point3.coords.usrCoords;\n\n    if (!_type.default.exists(board)) {\n      board = point1.board;\n    }\n\n    u = [B[0] - A[0], -B[2] + A[2], B[1] - A[1]];\n    v = [(A[0] + B[0]) * 0.5, (A[1] + B[1]) * 0.5, (A[2] + B[2]) * 0.5];\n    m1 = _math.default.crossProduct(u, v);\n    u = [C[0] - B[0], -C[2] + B[2], C[1] - B[1]];\n    v = [(B[0] + C[0]) * 0.5, (B[1] + C[1]) * 0.5, (B[2] + C[2]) * 0.5];\n    m2 = _math.default.crossProduct(u, v);\n    return new _coords.default(_constants.default.COORDS_BY_USER, _math.default.crossProduct(m1, m2), board);\n  },\n\n  /**\n   * Calculates the Euclidean distance for two given arrays of the same length.\n   * @param {Array} array1 Array of Number\n   * @param {Array} array2 Array of Number\n   * @param {Number} [n] Length of the arrays. Default is the minimum length of the given arrays.\n   * @returns {Number} Euclidean distance of the given vectors.\n   */\n  distance: function (array1, array2, n) {\n    var i,\n        sum = 0;\n\n    if (!n) {\n      n = Math.min(array1.length, array2.length);\n    }\n\n    for (i = 0; i < n; i++) {\n      sum += (array1[i] - array2[i]) * (array1[i] - array2[i]);\n    }\n\n    return Math.sqrt(sum);\n  },\n\n  /**\n   * Calculates Euclidean distance for two given arrays of the same length.\n   * If one of the arrays contains a zero in the first coordinate, and the Euclidean distance\n   * is different from zero it is a point at infinity and we return Infinity.\n   * @param {Array} array1 Array containing elements of type number.\n   * @param {Array} array2 Array containing elements of type number.\n   * @param {Number} [n] Length of the arrays. Default is the minimum length of the given arrays.\n   * @returns {Number} Euclidean (affine) distance of the given vectors.\n   */\n  affineDistance: function (array1, array2, n) {\n    var d;\n    d = this.distance(array1, array2, n);\n\n    if (d > _math.default.eps && (Math.abs(array1[0]) < _math.default.eps || Math.abs(array2[0]) < _math.default.eps)) {\n      return Infinity;\n    }\n\n    return d;\n  },\n\n  /**\n   * Affine ratio of three collinear points a, b, c: (c - a) / (b - a).\n   * If r > 1 or r < 0 then c is outside of the segment ab.\n   *\n   * @param {Array|JXG.Coords} a\n   * @param {Array|JXG.Coords} b\n   * @param {Array|JXG.Coords} c\n   * @returns {Number} affine ratio (c - a) / (b - a)\n   */\n  affineRatio: function (a, b, c) {\n    var r = 0.0,\n        dx;\n\n    if (_type.default.exists(a.usrCoords)) {\n      a = a.usrCoords;\n    }\n\n    if (_type.default.exists(b.usrCoords)) {\n      b = b.usrCoords;\n    }\n\n    if (_type.default.exists(c.usrCoords)) {\n      c = c.usrCoords;\n    }\n\n    dx = b[1] - a[1];\n\n    if (Math.abs(dx) > _math.default.eps) {\n      r = (c[1] - a[1]) / dx;\n    } else {\n      r = (c[2] - a[2]) / (b[2] - a[2]);\n    }\n\n    return r;\n  },\n\n  /**\n   * Sort vertices counter clockwise starting with the first point.\n   *\n   * @param {Array} p An array containing {@link JXG.Point}, {@link JXG.Coords}, and/or arrays.\n   *\n   * @returns {Array}\n   */\n  sortVertices: function (p) {\n    var ll,\n        ps = _expect.default.each(p, _expect.default.coordsArray),\n        N = ps.length,\n        lastPoint = null; // If the last point equals the first point, we take the last point out of the array.\n    // It may be that the several points at the end of the array are equal to the first point.\n    // The polygonal chain is been closed by JSXGraph, but this may also have been done by the user.\n    // Therefore, we use a while lopp to pop the last points.\n\n\n    while (ps[0][0] === ps[N - 1][0] && ps[0][1] === ps[N - 1][1] && ps[0][2] === ps[N - 1][2]) {\n      lastPoint = ps.pop();\n      N--;\n    } // Find the point with the lowest y value\n    // for (i = 1; i < N; i++) {\n    //     if ((ps[i][2] < ps[0][2]) ||\n    //         // if the current and the lowest point have the same y value, pick the one with\n    //         // the lowest x value.\n    //         (Math.abs(ps[i][2] - ps[0][2]) < Mat.eps && ps[i][1] < ps[0][1])) {\n    //         console.log(i, 0);\n    //         ps = Type.swap(ps, i, 0);\n    //     }\n    // }\n\n\n    ll = ps[0]; // Sort ps in increasing order of the angle between a point and the first point ll.\n    // If a point is equal to the first point ll, the angle is defined to be -Infinity.\n    // Otherwise, atan2 would return zero, which is a value which also attained by points\n    // on the same horizontal line.\n\n    ps.sort(function (a, b) {\n      var rad1 = a[2] === ll[2] && a[1] === ll[1] ? -Infinity : Math.atan2(a[2] - ll[2], a[1] - ll[1]),\n          rad2 = b[2] === ll[2] && b[1] === ll[1] ? -Infinity : Math.atan2(b[2] - ll[2], b[1] - ll[1]);\n      return rad1 - rad2;\n    }); // If the last point has been taken out of the array, we put it in again.\n\n    if (lastPoint !== null) {\n      ps.push(lastPoint);\n    }\n\n    return ps;\n  },\n\n  /**\n   * Signed triangle area of the three points given.\n   *\n   * @param {JXG.Point|JXG.Coords|Array} p1\n   * @param {JXG.Point|JXG.Coords|Array} p2\n   * @param {JXG.Point|JXG.Coords|Array} p3\n   *\n   * @returns {Number}\n   */\n  signedTriangle: function (p1, p2, p3) {\n    var A = _expect.default.coordsArray(p1),\n        B = _expect.default.coordsArray(p2),\n        C = _expect.default.coordsArray(p3);\n\n    return 0.5 * ((B[1] - A[1]) * (C[2] - A[2]) - (B[2] - A[2]) * (C[1] - A[1]));\n  },\n\n  /**\n   * Determine the signed area of a non-selfintersecting polygon.\n   * Surveyor's Formula\n   *\n   * @param {Array} p An array containing {@link JXG.Point}, {@link JXG.Coords}, and/or arrays.\n   * @param {Boolean} [sort=true]\n   *\n   * @returns {Number}\n   */\n  signedPolygon: function (p, sort) {\n    var i,\n        N,\n        A = 0,\n        ps = _expect.default.each(p, _expect.default.coordsArray);\n\n    if (sort === undefined) {\n      sort = true;\n    }\n\n    if (!sort) {\n      ps = this.sortVertices(ps);\n    } else {\n      // Make sure the polygon is closed. If it is already closed this won't change the sum because the last\n      // summand will be 0.\n      ps.unshift(ps[ps.length - 1]);\n    }\n\n    N = ps.length;\n\n    for (i = 1; i < N; i++) {\n      A += ps[i - 1][1] * ps[i][2] - ps[i][1] * ps[i - 1][2];\n    }\n\n    return 0.5 * A;\n  },\n\n  /**\n   * Calculate the complex hull of a point cloud.\n   *\n   * @param {Array} points An array containing {@link JXG.Point}, {@link JXG.Coords}, and/or arrays.\n   *\n   * @returns {Array}\n   */\n  GrahamScan: function (points) {\n    var i,\n        M = 1,\n        ps = _expect.default.each(points, _expect.default.coordsArray),\n        N = ps.length;\n\n    ps = this.sortVertices(ps);\n    N = ps.length;\n\n    for (i = 2; i < N; i++) {\n      while (this.signedTriangle(ps[M - 1], ps[M], ps[i]) <= 0) {\n        if (M > 1) {\n          M -= 1;\n        } else if (i === N - 1) {\n          break;\n        }\n\n        i += 1;\n      }\n\n      M += 1;\n      ps = _type.default.swap(ps, M, i);\n    }\n\n    return ps.slice(0, M);\n  },\n\n  /**\n   * A line can be a segment, a straight, or a ray. So it is not always delimited by point1 and point2\n   * calcStraight determines the visual start point and end point of the line. A segment is only drawn\n   * from start to end point, a straight line is drawn until it meets the boards boundaries.\n   * @param {JXG.Line} el Reference to a line object, that needs calculation of start and end point.\n   * @param {JXG.Coords} point1 Coordinates of the point where line drawing begins. This value is calculated and\n   * set by this method.\n   * @param {JXG.Coords} point2 Coordinates of the point where line drawing ends. This value is calculated and set\n   * by this method.\n   * @param {Number} margin Optional margin, to avoid the display of the small sides of lines.\n   * @returns null\n   * @see Line\n   * @see JXG.Line\n   */\n  calcStraight: function (el, point1, point2, margin) {\n    var takePoint1, takePoint2, intersection, intersect1, intersect2, straightFirst, straightLast, c, p1, p2;\n\n    if (!_type.default.exists(margin)) {\n      // Enlarge the drawable region slightly. This hides the small sides\n      // of thick lines in most cases.\n      margin = 10;\n    }\n\n    straightFirst = _type.default.evaluate(el.visProp.straightfirst);\n    straightLast = _type.default.evaluate(el.visProp.straightlast); // If one of the point is an ideal point in homogeneous coordinates\n    // drawing of line segments or rays are not possible.\n\n    if (Math.abs(point1.scrCoords[0]) < _math.default.eps) {\n      straightFirst = true;\n    }\n\n    if (Math.abs(point2.scrCoords[0]) < _math.default.eps) {\n      straightLast = true;\n    } // Do nothing in case of line segments (inside or outside of the board)\n\n\n    if (!straightFirst && !straightLast) {\n      return;\n    } // Compute the stdform of the line in screen coordinates.\n\n\n    c = [];\n    c[0] = el.stdform[0] - el.stdform[1] * el.board.origin.scrCoords[1] / el.board.unitX + el.stdform[2] * el.board.origin.scrCoords[2] / el.board.unitY;\n    c[1] = el.stdform[1] / el.board.unitX;\n    c[2] = -el.stdform[2] / el.board.unitY; // p1=p2\n\n    if (isNaN(c[0] + c[1] + c[2])) {\n      return;\n    }\n\n    takePoint1 = false;\n    takePoint2 = false; // Line starts at point1 and point1 is inside the board\n\n    takePoint1 = !straightFirst && Math.abs(point1.usrCoords[0]) >= _math.default.eps && point1.scrCoords[1] >= 0.0 && point1.scrCoords[1] <= el.board.canvasWidth && point1.scrCoords[2] >= 0.0 && point1.scrCoords[2] <= el.board.canvasHeight; // Line ends at point2 and point2 is inside the board\n\n    takePoint2 = !straightLast && Math.abs(point2.usrCoords[0]) >= _math.default.eps && point2.scrCoords[1] >= 0.0 && point2.scrCoords[1] <= el.board.canvasWidth && point2.scrCoords[2] >= 0.0 && point2.scrCoords[2] <= el.board.canvasHeight; // Intersect the line with the four borders of the board.\n\n    intersection = this.meetLineBoard(c, el.board, margin);\n    intersect1 = intersection[0];\n    intersect2 = intersection[1];\n    /**\n     * At this point we have four points:\n     * point1 and point2 are the first and the second defining point on the line,\n     * intersect1, intersect2 are the intersections of the line with border around the board.\n     */\n\n    /*\n     * Here we handle rays where both defining points are outside of the board.\n     */\n    // If both points are outside and the complete ray is outside we do nothing\n\n    if (!takePoint1 && !takePoint2) {\n      // Ray starting at point 1\n      if (!straightFirst && straightLast && !this.isSameDirection(point1, point2, intersect1) && !this.isSameDirection(point1, point2, intersect2)) {\n        return;\n      } // Ray starting at point 2\n\n\n      if (straightFirst && !straightLast && !this.isSameDirection(point2, point1, intersect1) && !this.isSameDirection(point2, point1, intersect2)) {\n        return;\n      }\n    }\n    /*\n     * If at least one of the defining points is outside of the board\n     * we take intersect1 or intersect2 as one of the end points\n     * The order is also important for arrows of axes\n     */\n\n\n    if (!takePoint1) {\n      if (!takePoint2) {\n        // Two border intersection points are used\n        if (this.isSameDir(point1, point2, intersect1, intersect2)) {\n          p1 = intersect1;\n          p2 = intersect2;\n        } else {\n          p2 = intersect1;\n          p1 = intersect2;\n        }\n      } else {\n        // One border intersection points is used\n        if (this.isSameDir(point1, point2, intersect1, intersect2)) {\n          p1 = intersect1;\n        } else {\n          p1 = intersect2;\n        }\n      }\n    } else {\n      if (!takePoint2) {\n        // One border intersection points is used\n        if (this.isSameDir(point1, point2, intersect1, intersect2)) {\n          p2 = intersect2;\n        } else {\n          p2 = intersect1;\n        }\n      }\n    }\n\n    if (p1) {\n      //point1.setCoordinates(Const.COORDS_BY_USER, p1.usrCoords.slice(1));\n      point1.setCoordinates(_constants.default.COORDS_BY_USER, p1.usrCoords);\n    }\n\n    if (p2) {\n      //point2.setCoordinates(Const.COORDS_BY_USER, p2.usrCoords.slice(1));\n      point2.setCoordinates(_constants.default.COORDS_BY_USER, p2.usrCoords);\n    }\n  },\n\n  /**\n   * A line can be a segment, a straight, or a ray. so it is not always delimited by point1 and point2.\n   *\n   * This method adjusts the line's delimiting points taking into account its nature, the viewport defined\n   * by the board.\n   *\n   * A segment is delimited by start and end point, a straight line or ray is delimited until it meets the\n   * boards boundaries. However, if the line has infinite ticks, it will be delimited by the projection of\n   * the boards vertices onto itself.\n   *\n   * @param {JXG.Line} el Reference to a line object, that needs calculation of start and end point.\n   * @param {JXG.Coords} point1 Coordinates of the point where line drawing begins. This value is calculated and\n   * set by this method.\n   * @param {JXG.Coords} point2 Coordinates of the point where line drawing ends. This value is calculated and set\n   * by this method.\n   * @see Line\n   * @see JXG.Line\n   */\n  calcLineDelimitingPoints: function (el, point1, point2) {\n    var distP1P2,\n        boundingBox,\n        lineSlope,\n        intersect1,\n        intersect2,\n        straightFirst,\n        straightLast,\n        c,\n        p1,\n        p2,\n        takePoint1 = false,\n        takePoint2 = false;\n    straightFirst = _type.default.evaluate(el.visProp.straightfirst);\n    straightLast = _type.default.evaluate(el.visProp.straightlast); // If one of the point is an ideal point in homogeneous coordinates\n    // drawing of line segments or rays are not possible.\n\n    if (Math.abs(point1.scrCoords[0]) < _math.default.eps) {\n      straightFirst = true;\n    }\n\n    if (Math.abs(point2.scrCoords[0]) < _math.default.eps) {\n      straightLast = true;\n    } // Compute the stdform of the line in screen coordinates.\n\n\n    c = [];\n    c[0] = el.stdform[0] - el.stdform[1] * el.board.origin.scrCoords[1] / el.board.unitX + el.stdform[2] * el.board.origin.scrCoords[2] / el.board.unitY;\n    c[1] = el.stdform[1] / el.board.unitX;\n    c[2] = -el.stdform[2] / el.board.unitY; // p1=p2\n\n    if (isNaN(c[0] + c[1] + c[2])) {\n      return;\n    }\n\n    takePoint1 = !straightFirst;\n    takePoint2 = !straightLast; // Intersect the board vertices on the line to establish the available visual space for the infinite ticks\n    // Based on the slope of the line we can optimise and only project the two outer vertices\n    // boundingBox = [x1, y1, x2, y2] upper left, lower right vertices\n\n    boundingBox = el.board.getBoundingBox();\n    lineSlope = el.getSlope();\n\n    if (lineSlope >= 0) {\n      // project vertices (x2,y1) (x1, y2)\n      intersect1 = this.projectPointToLine({\n        coords: {\n          usrCoords: [1, boundingBox[2], boundingBox[1]]\n        }\n      }, el, el.board);\n      intersect2 = this.projectPointToLine({\n        coords: {\n          usrCoords: [1, boundingBox[0], boundingBox[3]]\n        }\n      }, el, el.board);\n    } else {\n      // project vertices (x1, y1) (x2, y2)\n      intersect1 = this.projectPointToLine({\n        coords: {\n          usrCoords: [1, boundingBox[0], boundingBox[1]]\n        }\n      }, el, el.board);\n      intersect2 = this.projectPointToLine({\n        coords: {\n          usrCoords: [1, boundingBox[2], boundingBox[3]]\n        }\n      }, el, el.board);\n    }\n    /**\n     * we have four points:\n     * point1 and point2 are the first and the second defining point on the line,\n     * intersect1, intersect2 are the intersections of the line with border around the board.\n     */\n\n    /*\n     * Here we handle rays/segments where both defining points are outside of the board.\n     */\n\n\n    if (!takePoint1 && !takePoint2) {\n      // Segment, if segment does not cross the board, do nothing\n      if (!straightFirst && !straightLast) {\n        distP1P2 = point1.distance(_constants.default.COORDS_BY_USER, point2); // if  intersect1 not between point1 and point2\n\n        if (Math.abs(point1.distance(_constants.default.COORDS_BY_USER, intersect1) + intersect1.distance(_constants.default.COORDS_BY_USER, point2) - distP1P2) > _math.default.eps) {\n          return;\n        } // if insersect2 not between point1 and point2\n\n\n        if (Math.abs(point1.distance(_constants.default.COORDS_BY_USER, intersect2) + intersect2.distance(_constants.default.COORDS_BY_USER, point2) - distP1P2) > _math.default.eps) {\n          return;\n        }\n      } // If both points are outside and the complete ray is outside we do nothing\n      // Ray starting at point 1\n\n\n      if (!straightFirst && straightLast && !this.isSameDirection(point1, point2, intersect1) && !this.isSameDirection(point1, point2, intersect2)) {\n        return;\n      } // Ray starting at point 2\n\n\n      if (straightFirst && !straightLast && !this.isSameDirection(point2, point1, intersect1) && !this.isSameDirection(point2, point1, intersect2)) {\n        return;\n      }\n    }\n    /*\n     * If at least one of the defining points is outside of the board\n     * we take intersect1 or intersect2 as one of the end points\n     * The order is also important for arrows of axes\n     */\n\n\n    if (!takePoint1) {\n      if (!takePoint2) {\n        // Two border intersection points are used\n        if (this.isSameDir(point1, point2, intersect1, intersect2)) {\n          p1 = intersect1;\n          p2 = intersect2;\n        } else {\n          p2 = intersect1;\n          p1 = intersect2;\n        }\n      } else {\n        // One border intersection points is used\n        if (this.isSameDir(point1, point2, intersect1, intersect2)) {\n          p1 = intersect1;\n        } else {\n          p1 = intersect2;\n        }\n      }\n    } else {\n      if (!takePoint2) {\n        // One border intersection points is used\n        if (this.isSameDir(point1, point2, intersect1, intersect2)) {\n          p2 = intersect2;\n        } else {\n          p2 = intersect1;\n        }\n      }\n    }\n\n    if (p1) {\n      //point1.setCoordinates(Const.COORDS_BY_USER, p1.usrCoords.slice(1));\n      point1.setCoordinates(_constants.default.COORDS_BY_USER, p1.usrCoords);\n    }\n\n    if (p2) {\n      //point2.setCoordinates(Const.COORDS_BY_USER, p2.usrCoords.slice(1));\n      point2.setCoordinates(_constants.default.COORDS_BY_USER, p2.usrCoords);\n    }\n  },\n\n  /**\n   * Calculates the visProp.position corresponding to a given angle.\n   * @param {number} angle angle in radians. Must be in range (-2pi,2pi).\n   */\n  calcLabelQuadrant: function (angle) {\n    var q;\n\n    if (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n\n    q = Math.floor((angle + Math.PI / 8) / (Math.PI / 4)) % 8;\n    return [\"rt\", \"urt\", \"top\", \"ulft\", \"lft\", \"llft\", \"lrt\"][q];\n  },\n\n  /**\n   * The vectors <tt>p2-p1</tt> and <tt>i2-i1</tt> are supposed to be collinear. If their cosine is positive\n   * they point into the same direction otherwise they point in opposite direction.\n   * @param {JXG.Coords} p1\n   * @param {JXG.Coords} p2\n   * @param {JXG.Coords} i1\n   * @param {JXG.Coords} i2\n   * @returns {Boolean} True, if <tt>p2-p1</tt> and <tt>i2-i1</tt> point into the same direction\n   */\n  isSameDir: function (p1, p2, i1, i2) {\n    var dpx = p2.usrCoords[1] - p1.usrCoords[1],\n        dpy = p2.usrCoords[2] - p1.usrCoords[2],\n        dix = i2.usrCoords[1] - i1.usrCoords[1],\n        diy = i2.usrCoords[2] - i1.usrCoords[2];\n\n    if (Math.abs(p2.usrCoords[0]) < _math.default.eps) {\n      dpx = p2.usrCoords[1];\n      dpy = p2.usrCoords[2];\n    }\n\n    if (Math.abs(p1.usrCoords[0]) < _math.default.eps) {\n      dpx = -p1.usrCoords[1];\n      dpy = -p1.usrCoords[2];\n    }\n\n    return dpx * dix + dpy * diy >= 0;\n  },\n\n  /**\n   * If you're looking from point \"start\" towards point \"s\" and you can see the point \"p\", return true.\n   * Otherwise return false.\n   * @param {JXG.Coords} start The point you're standing on.\n   * @param {JXG.Coords} p The point in which direction you're looking.\n   * @param {JXG.Coords} s The point that should be visible.\n   * @returns {Boolean} True, if from start the point p is in the same direction as s is, that means s-start = k*(p-start) with k>=0.\n   */\n  isSameDirection: function (start, p, s) {\n    var dx,\n        dy,\n        sx,\n        sy,\n        r = false;\n    dx = p.usrCoords[1] - start.usrCoords[1];\n    dy = p.usrCoords[2] - start.usrCoords[2];\n    sx = s.usrCoords[1] - start.usrCoords[1];\n    sy = s.usrCoords[2] - start.usrCoords[2];\n\n    if (Math.abs(dx) < _math.default.eps) {\n      dx = 0;\n    }\n\n    if (Math.abs(dy) < _math.default.eps) {\n      dy = 0;\n    }\n\n    if (Math.abs(sx) < _math.default.eps) {\n      sx = 0;\n    }\n\n    if (Math.abs(sy) < _math.default.eps) {\n      sy = 0;\n    }\n\n    if (dx >= 0 && sx >= 0) {\n      r = dy >= 0 && sy >= 0 || dy <= 0 && sy <= 0;\n    } else if (dx <= 0 && sx <= 0) {\n      r = dy >= 0 && sy >= 0 || dy <= 0 && sy <= 0;\n    }\n\n    return r;\n  },\n\n  /**\n   * Determinant of three points in the Euclidean plane.\n   * Zero, if the points are collinear. Used to determine of a point q is left or\n   * right to a segment defined by points p1 and p2.\n   *\n   * @param  {Array} p1 Coordinates of the first point of the segment. Array of length 3. First coordinate is equal to 1.\n   * @param  {Array} p2 Coordinates of the second point of the segment. Array of length 3. First coordinate is equal to 1.\n   * @param  {Array} q Coordinates of the point. Array of length 3. First coordinate is equal to 1.\n   * @return {Number} Signed area of the triangle formed by these three points.\n   *\n   * @see #windingNumber\n   */\n  det3p: function (p1, p2, q) {\n    return (p1[1] - q[1]) * (p2[2] - q[2]) - (p2[1] - q[1]) * (p1[2] - q[2]);\n  },\n\n  /**\n   * Winding number of a point in respect to a polygon path.\n   *\n   * The point is regarded outside if the winding number is zero,\n   * inside otherwise. The algorithm tries to find degenerate cases, i.e.\n   * if the point is on the path. This is regarded as \"outside\".\n   * If the point is a vertex of the path, it is regarded as \"inside\".\n   *\n   * Implementation of algorithm 7 from \"The point in polygon problem for\n   * arbitrary polygons\" by Kai Hormann and Alexander Agathos, Computational Geometry,\n   * Volume 20, Issue 3, November 2001, Pages 131-144.\n   *\n   * @param  {Array} usrCoords Homogenous coordinates of the point\n   * @param  {Array} path      Array of points / coords determining a path, i.e. the vertices of the polygon / path. The array elements\n   * do not have to be full points, but have to have a subobject \"coords\" or should be of type JXG.Coords.\n   * @param  {Boolean} [doNotClosePath=false] If true the last point of the path is not connected to the first point.\n   * This is necessary if the path consists of two or more closed subpaths, e.g. if the figure has a hole.\n   *\n   * @return {Number}          Winding number of the point. The point is\n   *                           regarded outside if the winding number is zero,\n   *                           inside otherwise.\n   */\n  windingNumber: function (usrCoords, path, doNotClosePath) {\n    var wn = 0,\n        le = path.length,\n        x = usrCoords[1],\n        y = usrCoords[2],\n        p0,\n        p1,\n        p2,\n        d,\n        sign,\n        i,\n        off = 0;\n\n    if (le === 0) {\n      return 0;\n    }\n\n    doNotClosePath = doNotClosePath || false;\n\n    if (doNotClosePath) {\n      off = 1;\n    } // Infinite points are declared outside\n\n\n    if (isNaN(x) || isNaN(y)) {\n      return 1;\n    }\n\n    if (_type.default.exists(path[0].coords)) {\n      p0 = path[0].coords;\n      p1 = path[le - 1].coords;\n    } else {\n      p0 = path[0];\n      p1 = path[le - 1];\n    } // Handle the case if the point is the first vertex of the path, i.e. inside.\n\n\n    if (p0.usrCoords[1] === x && p0.usrCoords[2] === y) {\n      return 1;\n    }\n\n    for (i = 0; i < le - off; i++) {\n      // Consider the edge from p1 = path[i] to p2 = path[i+1]isClosedPath\n      if (_type.default.exists(path[i].coords)) {\n        p1 = path[i].coords.usrCoords;\n        p2 = path[(i + 1) % le].coords.usrCoords;\n      } else {\n        p1 = path[i].usrCoords;\n        p2 = path[(i + 1) % le].usrCoords;\n      } // If one of the two points p1, p2 is undefined or infinite,\n      // move on.\n\n\n      if (p1[0] === 0 || p2[0] === 0 || isNaN(p1[1]) || isNaN(p2[1]) || isNaN(p1[2]) || isNaN(p2[2])) {\n        continue;\n      }\n\n      if (p2[2] === y) {\n        if (p2[1] === x) {\n          return 1;\n        }\n\n        if (p1[2] === y && p2[1] > x === p1[1] < x) {\n          return 0;\n        }\n      }\n\n      if (p1[2] < y !== p2[2] < y) {\n        // Crossing\n        sign = 2 * (p2[2] > p1[2] ? 1 : 0) - 1;\n\n        if (p1[1] >= x) {\n          if (p2[1] > x) {\n            wn += sign;\n          } else {\n            d = this.det3p(p1, p2, usrCoords);\n\n            if (d === 0) {\n              // Point is on line, i.e. outside\n              return 0;\n            }\n\n            if (d > 0 + _math.default.eps === p2[2] > p1[2]) {\n              // Right crossing\n              wn += sign;\n            }\n          }\n        } else {\n          if (p2[1] > x) {\n            d = this.det3p(p1, p2, usrCoords);\n\n            if (d > 0 + _math.default.eps === p2[2] > p1[2]) {\n              // Right crossing\n              wn += sign;\n            }\n          }\n        }\n      }\n    }\n\n    return wn;\n  },\n\n  /**\n   * Decides if a point (x,y) is inside of a path / polygon.\n   * Does not work correct if the path has hole. In this case, windingNumber is the preferred method.\n   * Implements W. Randolf Franklin's pnpoly method.\n   *\n   * See <a href=\"https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\">https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html</a>.\n   *\n   * @param {Number} x_in x-coordinate (screen or user coordinates)\n   * @param {Number} y_in y-coordinate (screen or user coordinates)\n   * @param  {Array} path  Array of points / coords determining a path, i.e. the vertices of the polygon / path. The array elements\n   * do not have to be full points, but have to have a subobject \"coords\" or should be of type JXG.Coords.\n   * @param {Number} [coord_type=JXG.COORDS_BY_SCREEN] Type of coordinates used here.\n   *   Possible values are <b>JXG.COORDS_BY_USER</b> and <b>JXG.COORDS_BY_SCREEN</b>.\n   *   Default value is JXG.COORDS_BY_SCREEN.\n   *\n   * @returns {Boolean} if (x_in, y_in) is inside of the polygon.\n   * @see JXG.Polygon.hasPoint\n   * @see JXG.Polygon.pnpoly\n   * @see #windingNumber\n   *\n   * @example\n   * var pol = board.create('polygon', [[-1,2], [2,2], [-1,4]]);\n   * var p = board.create('point', [4, 3]);\n   * var txt = board.create('text', [-1, 0.5, function() {\n   *   return 'Point A is inside of the polygon = ' +\n   *     JXG.Math.Geometry.pnpoly(p.X(), p.Y(), JXG.COORDS_BY_USER, pol.vertices);\n   * }]);\n   *\n   * </pre><div id=\"JXG4656ed42-f965-4e35-bb66-c334a4529683\" class=\"jxgbox\" style=\"width: 300px; height: 300px;\"></div>\n   * <script type=\"text/javascript\">\n   *     (function() {\n   *         var board = JXG.JSXGraph.initBoard('JXG4656ed42-f965-4e35-bb66-c334a4529683',\n   *             {boundingbox: [-2, 5, 5,-2], axis: true, showcopyright: false, shownavigation: false});\n   *     var pol = board.create('polygon', [[-1,2], [2,2], [-1,4]]);\n   *     var p = board.create('point', [4, 3]);\n   *     var txt = board.create('text', [-1, 0.5, function() {\n   *     \t\treturn 'Point A is inside of the polygon = ' + JXG.Math.Geometry.pnpoly(p.X(), p.Y(), JXG.COORDS_BY_USER, pol.vertices);\n   *     }]);\n   *\n   *     })();\n   *\n   * \u003c/script><pre>\n   *\n   */\n  pnpoly: function (x_in, y_in, path, coord_type) {\n    var i,\n        j,\n        len,\n        x,\n        y,\n        crds,\n        v = path,\n        vi,\n        vj,\n        isIn = false;\n\n    if (coord_type === _constants.default.COORDS_BY_USER) {\n      crds = new _coords.default(_constants.default.COORDS_BY_USER, [x_in, y_in], this.board);\n      x = crds.scrCoords[1];\n      y = crds.scrCoords[2];\n    } else {\n      x = x_in;\n      y = y_in;\n    }\n\n    len = path.length;\n\n    for (i = 0, j = len - 2; i < len - 1; j = i++) {\n      vi = _type.default.exists(v[i].coords) ? v[i].coords : v[i];\n      vj = _type.default.exists(v[j].coords) ? v[j].coords : v[j];\n\n      if (vi.scrCoords[2] > y !== vj.scrCoords[2] > y && x < (vj.scrCoords[1] - vi.scrCoords[1]) * (y - vi.scrCoords[2]) / (vj.scrCoords[2] - vi.scrCoords[2]) + vi.scrCoords[1]) {\n        isIn = !isIn;\n      }\n    }\n\n    return isIn;\n  },\n\n  /****************************************/\n\n  /****          INTERSECTIONS         ****/\n\n  /****************************************/\n\n  /**\n   * Generate the function which computes the coordinates of the intersection point.\n   * Primarily used in {@link JXG.Point#createIntersectionPoint}.\n   * @param {JXG.Board} board object\n   * @param {JXG.Line,JXG.Circle_JXG.Line,JXG.Circle_Number} el1,el2,i The result will be a intersection point on el1 and el2.\n   * i determines the intersection point if two points are available: <ul>\n   *   <li>i==0: use the positive square root,</li>\n   *   <li>i==1: use the negative square root.</li></ul>\n   * See further {@link JXG.Point#createIntersectionPoint}.\n   * @param {Boolean} alwaysintersect. Flag that determines if segments and arc can have an outer intersection point\n   * on their defining line or circle.\n   * @returns {Function} Function returning a {@link JXG.Coords} object that determines\n   * the intersection point.\n   */\n  intersectionFunction: function (board, el1, el2, i, j, alwaysintersect) {\n    var func,\n        that = this,\n        el1_isArcType = false,\n        el2_isArcType = false;\n    el1_isArcType = el1.elementClass === _constants.default.OBJECT_CLASS_CURVE && (el1.type === _constants.default.OBJECT_TYPE_ARC || el1.type === _constants.default.OBJECT_TYPE_SECTOR) ? true : false;\n    el2_isArcType = el2.elementClass === _constants.default.OBJECT_CLASS_CURVE && (el2.type === _constants.default.OBJECT_TYPE_ARC || el2.type === _constants.default.OBJECT_TYPE_SECTOR) ? true : false;\n\n    if ((el1.elementClass === _constants.default.OBJECT_CLASS_CURVE || el2.elementClass === _constants.default.OBJECT_CLASS_CURVE) && (el1.elementClass === _constants.default.OBJECT_CLASS_CURVE || el1.elementClass === _constants.default.OBJECT_CLASS_CIRCLE) && (el2.elementClass === _constants.default.OBJECT_CLASS_CURVE || el2.elementClass === _constants.default.OBJECT_CLASS_CIRCLE)\n    /*&&\n    !(el1_isArcType && el2_isArcType)*/\n    ) {\n      // curve - curve\n      // with the exception that both elements are arc types\n\n      /** @ignore */\n      func = function () {\n        return that.meetCurveCurve(el1, el2, i, j, el1.board);\n      };\n    } else if (el1.elementClass === _constants.default.OBJECT_CLASS_CURVE && !el1_isArcType && el2.elementClass === _constants.default.OBJECT_CLASS_LINE || el2.elementClass === _constants.default.OBJECT_CLASS_CURVE && !el2_isArcType && el1.elementClass === _constants.default.OBJECT_CLASS_LINE) {\n      // curve - line (this includes intersections between conic sections and lines)\n      // with the exception that the curve is of arc type\n\n      /** @ignore */\n      func = function () {\n        return that.meetCurveLine(el1, el2, i, el1.board, alwaysintersect);\n      };\n    } else if (el1.type === _constants.default.OBJECT_TYPE_POLYGON || el2.type === _constants.default.OBJECT_TYPE_POLYGON) {\n      // polygon - other\n      // Uses the Greiner-Hormann clipping algorithm\n      // Not implemented: polygon - point\n      if (el1.elementClass === _constants.default.OBJECT_CLASS_LINE) {\n        // line - path\n\n        /** @ignore */\n        func = function () {\n          return that.meetPolygonLine(el2, el1, i, el1.board, alwaysintersect);\n        };\n      } else if (el2.elementClass === _constants.default.OBJECT_CLASS_LINE) {\n        // path - line\n        func = function () {\n          return that.meetPolygonLine(el1, el2, i, el1.board, alwaysintersect);\n        };\n      } else {\n        // path - path\n\n        /** @ignore */\n        func = function () {\n          return that.meetPathPath(el1, el2, i, el1.board);\n        };\n      }\n    } else if (el1.elementClass === _constants.default.OBJECT_CLASS_LINE && el2.elementClass === _constants.default.OBJECT_CLASS_LINE) {\n      // line - line, lines may also be segments.\n\n      /** @ignore */\n      func = function () {\n        var res,\n            c,\n            first1 = _type.default.evaluate(el1.visProp.straightfirst),\n            last1 = _type.default.evaluate(el1.visProp.straightlast),\n            first2 = _type.default.evaluate(el2.visProp.straightfirst),\n            last2 = _type.default.evaluate(el2.visProp.straightlast);\n        /**\n         * If one of the lines is a segment or ray and\n         * the intersection point should disappear if outside\n         * of the segment or ray we call\n         * meetSegmentSegment\n         */\n\n\n        if (!_type.default.evaluate(alwaysintersect) && (!first1 || !last1 || !first2 || !last2)) {\n          res = that.meetSegmentSegment(el1.point1.coords.usrCoords, el1.point2.coords.usrCoords, el2.point1.coords.usrCoords, el2.point2.coords.usrCoords);\n\n          if (!first1 && res[1] < 0 || !last1 && res[1] > 1 || !first2 && res[2] < 0 || !last2 && res[2] > 1) {\n            // Non-existent\n            c = [0, NaN, NaN];\n          } else {\n            c = res[0];\n          }\n\n          return new _coords.default(_constants.default.COORDS_BY_USER, c, el1.board);\n        }\n\n        return that.meet(el1.stdform, el2.stdform, i, el1.board);\n      };\n    } else {\n      // All other combinations of circles and lines,\n      // Arc types are treated as circles.\n\n      /** @ignore */\n      func = function () {\n        var res = that.meet(el1.stdform, el2.stdform, i, el1.board),\n            has = true,\n            first,\n            last,\n            r,\n            dx;\n\n        if (alwaysintersect) {\n          return res;\n        }\n\n        if (el1.elementClass === _constants.default.OBJECT_CLASS_LINE) {\n          first = _type.default.evaluate(el1.visProp.straightfirst);\n          last = _type.default.evaluate(el1.visProp.straightlast);\n\n          if (!first || !last) {\n            r = that.affineRatio(el1.point1.coords, el1.point2.coords, res);\n\n            if (!last && r > 1 + _math.default.eps || !first && r < 0 - _math.default.eps) {\n              return new _coords.default(_jxg.default.COORDS_BY_USER, [0, NaN, NaN], el1.board);\n            }\n          }\n        }\n\n        if (el2.elementClass === _constants.default.OBJECT_CLASS_LINE) {\n          first = _type.default.evaluate(el2.visProp.straightfirst);\n          last = _type.default.evaluate(el2.visProp.straightlast);\n\n          if (!first || !last) {\n            r = that.affineRatio(el2.point1.coords, el2.point2.coords, res);\n\n            if (!last && r > 1 + _math.default.eps || !first && r < 0 - _math.default.eps) {\n              return new _coords.default(_jxg.default.COORDS_BY_USER, [0, NaN, NaN], el1.board);\n            }\n          }\n        }\n\n        if (el1_isArcType) {\n          has = that.coordsOnArc(el1, res);\n\n          if (has && el2_isArcType) {\n            has = that.coordsOnArc(el2, res);\n          }\n\n          if (!has) {\n            return new _coords.default(_jxg.default.COORDS_BY_USER, [0, NaN, NaN], el1.board);\n          }\n        }\n\n        return res;\n      };\n    }\n\n    return func;\n  },\n\n  /**\n   * Returns true if the coordinates are on the arc element,\n   * false otherwise. Usually, coords is an intersection\n   * on the circle line. Now it is decided if coords are on the\n   * circle restricted to the arc line.\n   * @param  {Arc} arc arc or sector element\n   * @param  {JXG.Coords} coords Coords object of an intersection\n   * @returns {Boolean}\n   * @private\n   */\n  coordsOnArc: function (arc, coords) {\n    var angle = this.rad(arc.radiuspoint, arc.center, coords.usrCoords.slice(1)),\n        alpha = 0.0,\n        beta = this.rad(arc.radiuspoint, arc.center, arc.anglepoint),\n        ev_s = _type.default.evaluate(arc.visProp.selection);\n\n    if (ev_s === \"minor\" && beta > Math.PI || ev_s === \"major\" && beta < Math.PI) {\n      alpha = beta;\n      beta = 2 * Math.PI;\n    }\n\n    if (angle < alpha || angle > beta) {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * Computes the intersection of a pair of lines, circles or both.\n   * It uses the internal data array stdform of these elements.\n   * @param {Array} el1 stdform of the first element (line or circle)\n   * @param {Array} el2 stdform of the second element (line or circle)\n   * @param {Number} i Index of the intersection point that should be returned.\n   * @param board Reference to the board.\n   * @returns {JXG.Coords} Coordinates of one of the possible two or more intersection points.\n   * Which point will be returned is determined by i.\n   */\n  meet: function (el1, el2, i, board) {\n    var result,\n        eps = _math.default.eps; // line line\n\n    if (Math.abs(el1[3]) < eps && Math.abs(el2[3]) < eps) {\n      result = this.meetLineLine(el1, el2, i, board); // circle line\n    } else if (Math.abs(el1[3]) >= eps && Math.abs(el2[3]) < eps) {\n      result = this.meetLineCircle(el2, el1, i, board); // line circle\n    } else if (Math.abs(el1[3]) < eps && Math.abs(el2[3]) >= eps) {\n      result = this.meetLineCircle(el1, el2, i, board); // circle circle\n    } else {\n      result = this.meetCircleCircle(el1, el2, i, board);\n    }\n\n    return result;\n  },\n\n  /**\n   * Intersection of the line with the board\n   * @param  {Array}     line   stdform of the line in screen coordinates\n   * @param  {JXG.Board} board  reference to a board.\n   * @param  {Number}    margin optional margin, to avoid the display of the small sides of lines.\n   * @returns {Array}            [intersection coords 1, intersection coords 2]\n   */\n  meetLineBoard: function (line, board, margin) {\n    // Intersect the line with the four borders of the board.\n    var s = [],\n        intersect1,\n        intersect2,\n        i,\n        j;\n\n    if (!_type.default.exists(margin)) {\n      margin = 0;\n    } // top\n\n\n    s[0] = _math.default.crossProduct(line, [margin, 0, 1]); // left\n\n    s[1] = _math.default.crossProduct(line, [margin, 1, 0]); // bottom\n\n    s[2] = _math.default.crossProduct(line, [-margin - board.canvasHeight, 0, 1]); // right\n\n    s[3] = _math.default.crossProduct(line, [-margin - board.canvasWidth, 1, 0]); // Normalize the intersections\n\n    for (i = 0; i < 4; i++) {\n      if (Math.abs(s[i][0]) > _math.default.eps) {\n        for (j = 2; j > 0; j--) {\n          s[i][j] /= s[i][0];\n        }\n\n        s[i][0] = 1.0;\n      }\n    } // line is parallel to \"left\", take \"top\" and \"bottom\"\n\n\n    if (Math.abs(s[1][0]) < _math.default.eps) {\n      intersect1 = s[0]; // top\n\n      intersect2 = s[2]; // bottom\n      // line is parallel to \"top\", take \"left\" and \"right\"\n    } else if (Math.abs(s[0][0]) < _math.default.eps) {\n      intersect1 = s[1]; // left\n\n      intersect2 = s[3]; // right\n      // left intersection out of board (above)\n    } else if (s[1][2] < 0) {\n      intersect1 = s[0]; // top\n      // right intersection out of board (below)\n\n      if (s[3][2] > board.canvasHeight) {\n        intersect2 = s[2]; // bottom\n      } else {\n        intersect2 = s[3]; // right\n      } // left intersection out of board (below)\n\n    } else if (s[1][2] > board.canvasHeight) {\n      intersect1 = s[2]; // bottom\n      // right intersection out of board (above)\n\n      if (s[3][2] < 0) {\n        intersect2 = s[0]; // top\n      } else {\n        intersect2 = s[3]; // right\n      }\n    } else {\n      intersect1 = s[1]; // left\n      // right intersection out of board (above)\n\n      if (s[3][2] < 0) {\n        intersect2 = s[0]; // top\n        // right intersection out of board (below)\n      } else if (s[3][2] > board.canvasHeight) {\n        intersect2 = s[2]; // bottom\n      } else {\n        intersect2 = s[3]; // right\n      }\n    }\n\n    intersect1 = new _coords.default(_constants.default.COORDS_BY_SCREEN, intersect1.slice(1), board);\n    intersect2 = new _coords.default(_constants.default.COORDS_BY_SCREEN, intersect2.slice(1), board);\n    return [intersect1, intersect2];\n  },\n\n  /**\n   * Intersection of two lines.\n   * @param {Array} l1 stdform of the first line\n   * @param {Array} l2 stdform of the second line\n   * @param {number} i unused\n   * @param {JXG.Board} board Reference to the board.\n   * @returns {JXG.Coords} Coordinates of the intersection point.\n   */\n  meetLineLine: function (l1, l2, i, board) {\n    /*\n    var s = Mat.crossProduct(l1, l2);\n     if (Math.abs(s[0]) > Mat.eps) {\n        s[1] /= s[0];\n        s[2] /= s[0];\n        s[0] = 1.0;\n    }\n    */\n    var s = isNaN(l1[5] + l2[5]) ? [0, 0, 0] : _math.default.crossProduct(l1, l2);\n    return new _coords.default(_constants.default.COORDS_BY_USER, s, board);\n  },\n\n  /**\n   * Intersection of line and circle.\n   * @param {Array} lin stdform of the line\n   * @param {Array} circ stdform of the circle\n   * @param {number} i number of the returned intersection point.\n   *   i==0: use the positive square root,\n   *   i==1: use the negative square root.\n   * @param {JXG.Board} board Reference to a board.\n   * @returns {JXG.Coords} Coordinates of the intersection point\n   */\n  meetLineCircle: function (lin, circ, i, board) {\n    var a, b, c, d, n, A, B, C, k, t; // Radius is zero, return center of circle\n\n    if (circ[4] < _math.default.eps) {\n      if (Math.abs(_math.default.innerProduct([1, circ[6], circ[7]], lin, 3)) < _math.default.eps) {\n        return new _coords.default(_constants.default.COORDS_BY_USER, circ.slice(6, 8), board);\n      }\n\n      return new _coords.default(_constants.default.COORDS_BY_USER, [NaN, NaN], board);\n    }\n\n    c = circ[0];\n    b = circ.slice(1, 3);\n    a = circ[3];\n    d = lin[0];\n    n = lin.slice(1, 3); // Line is assumed to be normalized. Therefore, nn==1 and we can skip some operations:\n\n    /*\n     var nn = n[0]*n[0]+n[1]*n[1];\n     A = a*nn;\n     B = (b[0]*n[1]-b[1]*n[0])*nn;\n     C = a*d*d - (b[0]*n[0]+b[1]*n[1])*d + c*nn;\n     */\n\n    A = a;\n    B = b[0] * n[1] - b[1] * n[0];\n    C = a * d * d - (b[0] * n[0] + b[1] * n[1]) * d + c;\n    k = B * B - 4 * A * C;\n\n    if (k > -_math.default.eps * _math.default.eps) {\n      k = Math.sqrt(Math.abs(k));\n      t = [(-B + k) / (2 * A), (-B - k) / (2 * A)];\n      return i === 0 ? new _coords.default(_constants.default.COORDS_BY_USER, [-t[0] * -n[1] - d * n[0], -t[0] * n[0] - d * n[1]], board) : new _coords.default(_constants.default.COORDS_BY_USER, [-t[1] * -n[1] - d * n[0], -t[1] * n[0] - d * n[1]], board);\n    }\n\n    return new _coords.default(_constants.default.COORDS_BY_USER, [0, 0, 0], board);\n  },\n\n  /**\n   * Intersection of two circles.\n   * @param {Array} circ1 stdform of the first circle\n   * @param {Array} circ2 stdform of the second circle\n   * @param {number} i number of the returned intersection point.\n   *   i==0: use the positive square root,\n   *   i==1: use the negative square root.\n   * @param {JXG.Board} board Reference to the board.\n   * @returns {JXG.Coords} Coordinates of the intersection point\n   */\n  meetCircleCircle: function (circ1, circ2, i, board) {\n    var radicalAxis; // Radius is zero, return center of circle, if on other circle\n\n    if (circ1[4] < _math.default.eps) {\n      if (Math.abs(this.distance(circ1.slice(6, 2), circ2.slice(6, 8)) - circ2[4]) < _math.default.eps) {\n        return new _coords.default(_constants.default.COORDS_BY_USER, circ1.slice(6, 8), board);\n      }\n\n      return new _coords.default(_constants.default.COORDS_BY_USER, [0, 0, 0], board);\n    } // Radius is zero, return center of circle, if on other circle\n\n\n    if (circ2[4] < _math.default.eps) {\n      if (Math.abs(this.distance(circ2.slice(6, 2), circ1.slice(6, 8)) - circ1[4]) < _math.default.eps) {\n        return new _coords.default(_constants.default.COORDS_BY_USER, circ2.slice(6, 8), board);\n      }\n\n      return new _coords.default(_constants.default.COORDS_BY_USER, [0, 0, 0], board);\n    }\n\n    radicalAxis = [circ2[3] * circ1[0] - circ1[3] * circ2[0], circ2[3] * circ1[1] - circ1[3] * circ2[1], circ2[3] * circ1[2] - circ1[3] * circ2[2], 0, 1, Infinity, Infinity, Infinity];\n    radicalAxis = _math.default.normalize(radicalAxis);\n    return this.meetLineCircle(radicalAxis, circ1, i, board);\n  },\n\n  /**\n   * Compute an intersection of the curves c1 and c2.\n   * We want to find values t1, t2 such that\n   * c1(t1) = c2(t2), i.e. (c1_x(t1)-c2_x(t2),c1_y(t1)-c2_y(t2)) = (0,0).\n   *\n   * Methods: segment-wise intersections (default) or generalized Newton method.\n   * @param {JXG.Curve} c1 Curve, Line or Circle\n   * @param {JXG.Curve} c2 Curve, Line or Circle\n   * @param {Number} nr the nr-th intersection point will be returned.\n   * @param {Number} t2ini not longer used.\n   * @param {JXG.Board} [board=c1.board] Reference to a board object.\n   * @param {String} [method='segment'] Intersection method, possible values are 'newton' and 'segment'.\n   * @returns {JXG.Coords} intersection point\n   */\n  meetCurveCurve: function (c1, c2, nr, t2ini, board, method) {\n    var co;\n\n    if (_type.default.exists(method) && method === \"newton\") {\n      co = _numerics.default.generalizedNewton(c1, c2, nr, t2ini);\n    } else {\n      if (c1.bezierDegree === 3 || c2.bezierDegree === 3) {\n        co = this.meetBezierCurveRedBlueSegments(c1, c2, nr);\n      } else {\n        co = this.meetCurveRedBlueSegments(c1, c2, nr);\n      }\n    }\n\n    return new _coords.default(_constants.default.COORDS_BY_USER, co, board);\n  },\n\n  /**\n   * Intersection of curve with line,\n   * Order of input does not matter for el1 and el2.\n   * From version 0.99.7 on this method calls\n   * {@link JXG.Math.Geometry.meetCurveLineDiscrete}.\n   * If higher precision is needed, {@link JXG.Math.Geometry.meetCurveLineContinuous}\n   * has to be used.\n   *\n   * @param {JXG.Curve,JXG.Line} el1 Curve or Line\n   * @param {JXG.Curve,JXG.Line} el2 Curve or Line\n   * @param {Number} nr the nr-th intersection point will be returned.\n   * @param {JXG.Board} [board=el1.board] Reference to a board object.\n   * @param {Boolean} alwaysIntersect If false just the segment between the two defining points are tested for intersection\n   * @returns {JXG.Coords} Intersection point. In case no intersection point is detected,\n   * the ideal point [0,1,0] is returned.\n   */\n  meetCurveLine: function (el1, el2, nr, board, alwaysIntersect) {\n    var v = [0, NaN, NaN],\n        cu,\n        li;\n\n    if (!_type.default.exists(board)) {\n      board = el1.board;\n    }\n\n    if (el1.elementClass === _constants.default.OBJECT_CLASS_CURVE) {\n      cu = el1;\n      li = el2;\n    } else {\n      cu = el2;\n      li = el1;\n    }\n\n    v = this.meetCurveLineDiscrete(cu, li, nr, board, !alwaysIntersect);\n    return v;\n  },\n\n  /**\n   * Intersection of line and curve, continuous case.\n   * Finds the nr-the intersection point\n   * Uses {@link JXG.Math.Geometry.meetCurveLineDiscrete} as a first approximation.\n   * A more exact solution is then found with {@link JXG.Math.Numerics.root}.\n   *\n   * @param {JXG.Curve} cu Curve\n   * @param {JXG.Line} li Line\n   * @param {Number} nr Will return the nr-th intersection point.\n   * @param {JXG.Board} board\n   * @param {Boolean} testSegment Test if intersection has to be inside of the segment or somewhere on the\n   * line defined by the segment\n   * @returns {JXG.Coords} Coords object containing the intersection.\n   */\n  meetCurveLineContinuous: function (cu, li, nr, board, testSegment) {\n    var t,\n        func0,\n        func1,\n        v,\n        x,\n        y,\n        z,\n        eps = _math.default.eps,\n        epsLow = _math.default.eps,\n        steps,\n        delta,\n        tnew,\n        i,\n        tmin,\n        fmin,\n        ft;\n    v = this.meetCurveLineDiscrete(cu, li, nr, board, testSegment);\n    x = v.usrCoords[1];\n    y = v.usrCoords[2];\n\n    func0 = function (t) {\n      var c1, c2;\n\n      if (t > cu.maxX() || t < cu.minX()) {\n        return Infinity;\n      }\n\n      c1 = x - cu.X(t);\n      c2 = y - cu.Y(t);\n      return c1 * c1 + c2 * c2;\n    };\n\n    func1 = function (t) {\n      var v = li.stdform[0] + li.stdform[1] * cu.X(t) + li.stdform[2] * cu.Y(t);\n      return v * v;\n    }; // Find t\n\n\n    steps = 50;\n    delta = (cu.maxX() - cu.minX()) / steps;\n    tnew = cu.minX();\n    fmin = 0.0001; //eps;\n\n    tmin = NaN;\n\n    for (i = 0; i < steps; i++) {\n      t = _numerics.default.root(func0, [Math.max(tnew, cu.minX()), Math.min(tnew + delta, cu.maxX())]);\n      ft = Math.abs(func0(t));\n\n      if (ft <= fmin) {\n        fmin = ft;\n        tmin = t;\n\n        if (fmin < eps) {\n          break;\n        }\n      }\n\n      tnew += delta;\n    }\n\n    t = tmin; // Compute \"exact\" t\n\n    t = _numerics.default.root(func1, [Math.max(t - delta, cu.minX()), Math.min(t + delta, cu.maxX())]);\n    ft = func1(t); // Is the point on the line?\n\n    if (isNaN(ft) || Math.abs(ft) > epsLow) {\n      z = 0.0; //NaN;\n    } else {\n      z = 1.0;\n    }\n\n    return new _coords.default(_constants.default.COORDS_BY_USER, [z, cu.X(t), cu.Y(t)], board);\n  },\n\n  /**\n   * Intersection of line and curve, discrete case.\n   * Segments are treated as lines.\n   * Finding the nr-th intersection point should work for all nr.\n   * @param {JXG.Curve} cu\n   * @param {JXG.Line} li\n   * @param {Number} nr\n   * @param {JXG.Board} board\n   * @param {Boolean} testSegment Test if intersection has to be inside of the segment or somewhere on the\n   * line defined by the segment\n   *\n   * @returns {JXG.Coords} Intersection point. In case no intersection point is detected,\n   * the ideal point [0,1,0] is returned.\n   */\n  meetCurveLineDiscrete: function (cu, li, nr, board, testSegment) {\n    var i,\n        j,\n        p1,\n        p2,\n        p,\n        q,\n        lip1 = li.point1.coords.usrCoords,\n        lip2 = li.point2.coords.usrCoords,\n        d,\n        res,\n        cnt = 0,\n        len = cu.numberPoints,\n        ev_sf = _type.default.evaluate(li.visProp.straightfirst),\n        ev_sl = _type.default.evaluate(li.visProp.straightlast); // In case, no intersection will be found we will take this\n\n\n    q = new _coords.default(_constants.default.COORDS_BY_USER, [0, NaN, NaN], board);\n\n    if (lip1[0] === 0.0) {\n      lip1 = [1, lip2[1] + li.stdform[2], lip2[2] - li.stdform[1]];\n    } else if (lip2[0] === 0.0) {\n      lip2 = [1, lip1[1] + li.stdform[2], lip1[2] - li.stdform[1]];\n    }\n\n    p2 = cu.points[0].usrCoords;\n\n    for (i = 1; i < len; i += cu.bezierDegree) {\n      p1 = p2.slice(0);\n      p2 = cu.points[i].usrCoords;\n      d = this.distance(p1, p2); // The defining points are not identical\n\n      if (d > _math.default.eps) {\n        if (cu.bezierDegree === 3) {\n          res = this.meetBeziersegmentBeziersegment([cu.points[i - 1].usrCoords.slice(1), cu.points[i].usrCoords.slice(1), cu.points[i + 1].usrCoords.slice(1), cu.points[i + 2].usrCoords.slice(1)], [lip1.slice(1), lip2.slice(1)], testSegment);\n        } else {\n          res = [this.meetSegmentSegment(p1, p2, lip1, lip2)];\n        }\n\n        for (j = 0; j < res.length; j++) {\n          p = res[j];\n\n          if (0 <= p[1] && p[1] <= 1) {\n            if (cnt === nr) {\n              /**\n               * If the intersection point is not part of the segment,\n               * this intersection point is set to non-existent.\n               * This prevents jumping behavior of the intersection points.\n               * But it may be discussed if it is the desired behavior.\n               */\n              if (testSegment && (!ev_sf && p[2] < 0 || !ev_sl && p[2] > 1)) {\n                return q; // break;\n              }\n\n              q = new _coords.default(_constants.default.COORDS_BY_USER, p[0], board);\n              return q; // break;\n            }\n\n            cnt += 1;\n          }\n        }\n      }\n    }\n\n    return q;\n  },\n\n  /**\n   * Find the n-th intersection point of two curves named red (first parameter) and blue (second parameter).\n   * We go through each segment of the red curve and search if there is an intersection with a segemnt of the blue curve.\n   * This double loop, i.e. the outer loop runs along the red curve and the inner loop runs along the blue curve, defines\n   * the n-th intersection point. The segments are either line segments or Bezier curves of degree 3. This depends on\n   * the property bezierDegree of the curves.\n   * <p>\n   * This method works also for transformed curves, since only the already\n   * transformed points are used.\n   *\n   * @param {JXG.Curve} red\n   * @param {JXG.Curve} blue\n   * @param {Number} nr\n   */\n  meetCurveRedBlueSegments: function (red, blue, nr) {\n    var i,\n        j,\n        red1,\n        red2,\n        blue1,\n        blue2,\n        m,\n        minX,\n        maxX,\n        iFound = 0,\n        lenBlue = blue.numberPoints,\n        //points.length,\n    lenRed = red.numberPoints; //points.length;\n\n    if (lenBlue <= 1 || lenRed <= 1) {\n      return [0, NaN, NaN];\n    }\n\n    for (i = 1; i < lenRed; i++) {\n      red1 = red.points[i - 1].usrCoords;\n      red2 = red.points[i].usrCoords;\n      minX = Math.min(red1[1], red2[1]);\n      maxX = Math.max(red1[1], red2[1]);\n      blue2 = blue.points[0].usrCoords;\n\n      for (j = 1; j < lenBlue; j++) {\n        blue1 = blue2;\n        blue2 = blue.points[j].usrCoords;\n\n        if (Math.min(blue1[1], blue2[1]) < maxX && Math.max(blue1[1], blue2[1]) > minX) {\n          m = this.meetSegmentSegment(red1, red2, blue1, blue2);\n\n          if (m[1] >= 0.0 && m[2] >= 0.0 && (m[1] < 1.0 && m[2] < 1.0 || i === lenRed - 1 && m[1] === 1.0 || j === lenBlue - 1 && m[2] === 1.0)) {\n            if (iFound === nr) {\n              return m[0];\n            }\n\n            iFound++;\n          }\n        }\n      }\n    }\n\n    return [0, NaN, NaN];\n  },\n\n  /**\n   * (Virtual) Intersection of two segments.\n   * @param {Array} p1 First point of segment 1 using normalized homogeneous coordinates [1,x,y]\n   * @param {Array} p2 Second point or direction of segment 1 using normalized homogeneous coordinates [1,x,y] or point at infinity [0,x,y], respectively\n   * @param {Array} q1 First point of segment 2 using normalized homogeneous coordinates [1,x,y]\n   * @param {Array} q2 Second point or direction of segment 2 using normalized homogeneous coordinates [1,x,y] or point at infinity [0,x,y], respectively\n   * @returns {Array} [Intersection point, t, u] The first entry contains the homogeneous coordinates\n   * of the intersection point. The second and third entry give the position of the intersection with respect\n   * to the definiting parameters. For example, the second entry t is defined by: intersection point = p1 + t * deltaP, where\n   * deltaP = (p2 - p1) when both parameters are coordinates, and deltaP = p2 if p2 is a point at infinity.\n   * If the two segments are collinear, [[0,0,0], Infinity, Infinity] is returned.\n   **/\n  meetSegmentSegment: function (p1, p2, q1, q2) {\n    var t,\n        u,\n        i,\n        d,\n        li1 = _math.default.crossProduct(p1, p2),\n        li2 = _math.default.crossProduct(q1, q2),\n        c = _math.default.crossProduct(li1, li2);\n\n    if (Math.abs(c[0]) < _math.default.eps) {\n      return [c, Infinity, Infinity];\n    } // Normalize the intersection coordinates\n\n\n    c[1] /= c[0];\n    c[2] /= c[0];\n    c[0] /= c[0]; // Now compute in principle:\n    //    t = dist(c - p1) / dist(p2 - p1) and\n    //    u = dist(c - q1) / dist(q2 - q1)\n    // However: the points q1, q2, p1, p2 might be ideal points - or in general - the\n    // coordinates might be not normalized.\n    // Note that the z-coordinates of p2 and q2 are used to determine whether it should be interpreted\n    // as a segment coordinate or a direction.\n\n    i = Math.abs(p2[1] - p2[0] * p1[1]) < _math.default.eps ? 2 : 1;\n    d = p1[i] / p1[0];\n    t = (c[i] - d) / (p2[0] !== 0 ? p2[i] / p2[0] - d : p2[i]);\n    i = Math.abs(q2[1] - q2[0] * q1[1]) < _math.default.eps ? 2 : 1;\n    d = q1[i] / q1[0];\n    u = (c[i] - d) / (q2[0] !== 0 ? q2[i] / q2[0] - d : q2[i]);\n    return [c, t, u];\n  },\n\n  /**\n   * Find the n-th intersection point of two pathes, usually given by polygons. Uses parts of the\n   * Greiner-Hormann algorithm in JXG.Math.Clip.\n   *\n   * @param {JXG.Circle|JXG.Curve|JXG.Polygon} path1\n   * @param {JXG.Circle|JXG.Curve|JXG.Polygon} path2\n   * @param {Number} n\n   * @param {JXG.Board} board\n   *\n   * @returns {JXG.Coords} Intersection point. In case no intersection point is detected,\n   * the ideal point [0,0,0] is returned.\n   *\n   */\n  meetPathPath: function (path1, path2, nr, board) {\n    var S, C, len, intersections;\n    S = _jxg.default.Math.Clip._getPath(path1, board);\n    len = S.length;\n\n    if (len > 0 && this.distance(S[0].coords.usrCoords, S[len - 1].coords.usrCoords, 3) < _math.default.eps) {\n      S.pop();\n    }\n\n    C = _jxg.default.Math.Clip._getPath(path2, board);\n    len = C.length;\n\n    if (len > 0 && this.distance(C[0].coords.usrCoords, C[len - 1].coords.usrCoords, 3) < _math.default.eps * _math.default.eps) {\n      C.pop();\n    } // Handle cases where at least one of the paths is empty\n\n\n    if (nr < 0 || _jxg.default.Math.Clip.isEmptyCase(S, C, \"intersection\")) {\n      return new _coords.default(_constants.default.COORDS_BY_USER, [0, 0, 0], board);\n    }\n\n    _jxg.default.Math.Clip.makeDoublyLinkedList(S);\n\n    _jxg.default.Math.Clip.makeDoublyLinkedList(C);\n\n    intersections = _jxg.default.Math.Clip.findIntersections(S, C, board)[0];\n\n    if (nr < intersections.length) {\n      return intersections[nr].coords;\n    }\n\n    return new _coords.default(_constants.default.COORDS_BY_USER, [0, 0, 0], board);\n  },\n\n  /**\n   * Find the n-th intersection point between a polygon and a line.\n   * @param {JXG.Polygon} path\n   * @param {JXG.Line} line\n   * @param {Number} nr\n   * @param {JXG.Board} board\n   * @param {Boolean} alwaysIntersect If false just the segment between the two defining points of the line are tested for intersection.\n   *\n   * @returns {JXG.Coords} Intersection point. In case no intersection point is detected,\n   * the ideal point [0,0,0] is returned.\n   */\n  meetPolygonLine: function (path, line, nr, board, alwaysIntersect) {\n    var i,\n        res,\n        border,\n        crds = [0, 0, 0],\n        len = path.borders.length,\n        intersections = [];\n\n    for (i = 0; i < len; i++) {\n      border = path.borders[i];\n      res = this.meetSegmentSegment(border.point1.coords.usrCoords, border.point2.coords.usrCoords, line.point1.coords.usrCoords, line.point2.coords.usrCoords);\n\n      if ((!alwaysIntersect || res[2] >= 0 && res[2] < 1) && res[1] >= 0 && res[1] < 1) {\n        intersections.push(res[0]);\n      }\n    }\n\n    if (nr >= 0 && nr < intersections.length) {\n      crds = intersections[nr];\n    }\n\n    return new _coords.default(_constants.default.COORDS_BY_USER, crds, board);\n  },\n\n  /****************************************/\n\n  /****   BEZIER CURVE ALGORITHMS      ****/\n\n  /****************************************/\n\n  /**\n   * Splits a Bezier curve segment defined by four points into\n   * two Bezier curve segments. Dissection point is t=1/2.\n   * @param {Array} curve Array of four coordinate arrays of length 2 defining a\n   * Bezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].\n   * @returns {Array} Array consisting of two coordinate arrays for Bezier curves.\n   */\n  _bezierSplit: function (curve) {\n    var p0, p1, p2, p00, p22, p000;\n    p0 = [(curve[0][0] + curve[1][0]) * 0.5, (curve[0][1] + curve[1][1]) * 0.5];\n    p1 = [(curve[1][0] + curve[2][0]) * 0.5, (curve[1][1] + curve[2][1]) * 0.5];\n    p2 = [(curve[2][0] + curve[3][0]) * 0.5, (curve[2][1] + curve[3][1]) * 0.5];\n    p00 = [(p0[0] + p1[0]) * 0.5, (p0[1] + p1[1]) * 0.5];\n    p22 = [(p1[0] + p2[0]) * 0.5, (p1[1] + p2[1]) * 0.5];\n    p000 = [(p00[0] + p22[0]) * 0.5, (p00[1] + p22[1]) * 0.5];\n    return [[curve[0], p0, p00, p000], [p000, p22, p2, curve[3]]];\n  },\n\n  /**\n   * Computes the bounding box [minX, maxY, maxX, minY] of a Bezier curve segment\n   * from its control points.\n   * @param {Array} curve Array of four coordinate arrays of length 2 defining a\n   * Bezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].\n   * @returns {Array} Bounding box [minX, maxY, maxX, minY]\n   */\n  _bezierBbox: function (curve) {\n    var bb = [];\n\n    if (curve.length === 4) {\n      // bezierDegree == 3\n      bb[0] = Math.min(curve[0][0], curve[1][0], curve[2][0], curve[3][0]); // minX\n\n      bb[1] = Math.max(curve[0][1], curve[1][1], curve[2][1], curve[3][1]); // maxY\n\n      bb[2] = Math.max(curve[0][0], curve[1][0], curve[2][0], curve[3][0]); // maxX\n\n      bb[3] = Math.min(curve[0][1], curve[1][1], curve[2][1], curve[3][1]); // minY\n    } else {\n      // bezierDegree == 1\n      bb[0] = Math.min(curve[0][0], curve[1][0]); // minX\n\n      bb[1] = Math.max(curve[0][1], curve[1][1]); // maxY\n\n      bb[2] = Math.max(curve[0][0], curve[1][0]); // maxX\n\n      bb[3] = Math.min(curve[0][1], curve[1][1]); // minY\n    }\n\n    return bb;\n  },\n\n  /**\n   * Decide if two Bezier curve segments overlap by comparing their bounding boxes.\n   * @param {Array} bb1 Bounding box of the first Bezier curve segment\n   * @param {Array} bb2 Bounding box of the second Bezier curve segment\n   * @returns {Boolean} true if the bounding boxes overlap, false otherwise.\n   */\n  _bezierOverlap: function (bb1, bb2) {\n    return bb1[2] >= bb2[0] && bb1[0] <= bb2[2] && bb1[1] >= bb2[3] && bb1[3] <= bb2[1];\n  },\n\n  /**\n   * Append list of intersection points to a list.\n   * @private\n   */\n  _bezierListConcat: function (L, Lnew, t1, t2) {\n    var i,\n        t2exists = _type.default.exists(t2),\n        start = 0,\n        len = Lnew.length,\n        le = L.length;\n\n    if (le > 0 && len > 0 && (L[le - 1][1] === 1 && Lnew[0][1] === 0 || t2exists && L[le - 1][2] === 1 && Lnew[0][2] === 0)) {\n      start = 1;\n    }\n\n    for (i = start; i < len; i++) {\n      if (t2exists) {\n        Lnew[i][2] *= 0.5;\n        Lnew[i][2] += t2;\n      }\n\n      Lnew[i][1] *= 0.5;\n      Lnew[i][1] += t1;\n      L.push(Lnew[i]);\n    }\n  },\n\n  /**\n   * Find intersections of two Bezier curve segments by recursive subdivision.\n   * Below maxlevel determine intersections by intersection line segments.\n   * @param {Array} red Array of four coordinate arrays of length 2 defining the first\n   * Bezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].\n   * @param {Array} blue Array of four coordinate arrays of length 2 defining the second\n   * Bezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].\n   * @param {Number} level Recursion level\n   * @returns {Array} List of intersection points (up to nine). Each intersection point is an\n   * array of length three (homogeneous coordinates) plus preimages.\n   */\n  _bezierMeetSubdivision: function (red, blue, level) {\n    var bbb,\n        bbr,\n        ar,\n        b0,\n        b1,\n        r0,\n        r1,\n        m,\n        p0,\n        p1,\n        q0,\n        q1,\n        L = [],\n        maxLev = 5; // Maximum recursion level\n\n    bbr = this._bezierBbox(blue);\n    bbb = this._bezierBbox(red);\n\n    if (!this._bezierOverlap(bbr, bbb)) {\n      return [];\n    }\n\n    if (level < maxLev) {\n      ar = this._bezierSplit(red);\n      r0 = ar[0];\n      r1 = ar[1];\n      ar = this._bezierSplit(blue);\n      b0 = ar[0];\n      b1 = ar[1];\n\n      this._bezierListConcat(L, this._bezierMeetSubdivision(r0, b0, level + 1), 0.0, 0.0);\n\n      this._bezierListConcat(L, this._bezierMeetSubdivision(r0, b1, level + 1), 0, 0.5);\n\n      this._bezierListConcat(L, this._bezierMeetSubdivision(r1, b0, level + 1), 0.5, 0.0);\n\n      this._bezierListConcat(L, this._bezierMeetSubdivision(r1, b1, level + 1), 0.5, 0.5);\n\n      return L;\n    } // Make homogeneous coordinates\n\n\n    q0 = [1].concat(red[0]);\n    q1 = [1].concat(red[3]);\n    p0 = [1].concat(blue[0]);\n    p1 = [1].concat(blue[3]);\n    m = this.meetSegmentSegment(q0, q1, p0, p1);\n\n    if (m[1] >= 0.0 && m[2] >= 0.0 && m[1] <= 1.0 && m[2] <= 1.0) {\n      return [m];\n    }\n\n    return [];\n  },\n\n  /**\n   * @param {Boolean} testSegment Test if intersection has to be inside of the segment or somewhere on the line defined by the segment\n   */\n  _bezierLineMeetSubdivision: function (red, blue, level, testSegment) {\n    var bbb,\n        bbr,\n        ar,\n        r0,\n        r1,\n        m,\n        p0,\n        p1,\n        q0,\n        q1,\n        L = [],\n        maxLev = 5; // Maximum recursion level\n\n    bbb = this._bezierBbox(blue);\n    bbr = this._bezierBbox(red);\n\n    if (testSegment && !this._bezierOverlap(bbr, bbb)) {\n      return [];\n    }\n\n    if (level < maxLev) {\n      ar = this._bezierSplit(red);\n      r0 = ar[0];\n      r1 = ar[1];\n\n      this._bezierListConcat(L, this._bezierLineMeetSubdivision(r0, blue, level + 1), 0.0);\n\n      this._bezierListConcat(L, this._bezierLineMeetSubdivision(r1, blue, level + 1), 0.5);\n\n      return L;\n    } // Make homogeneous coordinates\n\n\n    q0 = [1].concat(red[0]);\n    q1 = [1].concat(red[3]);\n    p0 = [1].concat(blue[0]);\n    p1 = [1].concat(blue[1]);\n    m = this.meetSegmentSegment(q0, q1, p0, p1);\n\n    if (m[1] >= 0.0 && m[1] <= 1.0) {\n      if (!testSegment || m[2] >= 0.0 && m[2] <= 1.0) {\n        return [m];\n      }\n    }\n\n    return [];\n  },\n\n  /**\n   * Find the nr-th intersection point of two Bezier curve segments.\n   * @param {Array} red Array of four coordinate arrays of length 2 defining the first\n   * Bezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].\n   * @param {Array} blue Array of four coordinate arrays of length 2 defining the second\n   * Bezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].\n   * @param {Boolean} testSegment Test if intersection has to be inside of the segment or somewhere on the line defined by the segment\n   * @returns {Array} Array containing the list of all intersection points as homogeneous coordinate arrays plus\n   * preimages [x,y], t_1, t_2] of the two Bezier curve segments.\n   *\n   */\n  meetBeziersegmentBeziersegment: function (red, blue, testSegment) {\n    var L, L2, i;\n\n    if (red.length === 4 && blue.length === 4) {\n      L = this._bezierMeetSubdivision(red, blue, 0);\n    } else {\n      L = this._bezierLineMeetSubdivision(red, blue, 0, testSegment);\n    }\n\n    L.sort(function (a, b) {\n      return (a[1] - b[1]) * 10000000.0 + (a[2] - b[2]);\n    });\n    L2 = [];\n\n    for (i = 0; i < L.length; i++) {\n      // Only push entries different from their predecessor\n      if (i === 0 || L[i][1] !== L[i - 1][1] || L[i][2] !== L[i - 1][2]) {\n        L2.push(L[i]);\n      }\n    }\n\n    return L2;\n  },\n\n  /**\n   * Find the nr-th intersection point of two Bezier curves, i.e. curves with bezierDegree == 3.\n   * @param {JXG.Curve} red Curve with bezierDegree == 3\n   * @param {JXG.Curve} blue Curve with bezierDegree == 3\n   * @param {Number} nr The number of the intersection point which should be returned.\n   * @returns {Array} The homogeneous coordinates of the nr-th intersection point.\n   */\n  meetBezierCurveRedBlueSegments: function (red, blue, nr) {\n    var p,\n        i,\n        j,\n        k,\n        po,\n        redArr,\n        blueArr,\n        bbr,\n        bbb,\n        intersections,\n        startRed = 0,\n        startBlue = 0,\n        lenBlue = blue.numberPoints,\n        lenRed = red.numberPoints,\n        L = [];\n\n    if (lenBlue < blue.bezierDegree + 1 || lenRed < red.bezierDegree + 1) {\n      return [0, NaN, NaN];\n    }\n\n    lenBlue -= blue.bezierDegree;\n    lenRed -= red.bezierDegree; // For sectors, we ignore the \"legs\"\n\n    if (red.type === _constants.default.OBJECT_TYPE_SECTOR) {\n      startRed = 3;\n      lenRed -= 3;\n    }\n\n    if (blue.type === _constants.default.OBJECT_TYPE_SECTOR) {\n      startBlue = 3;\n      lenBlue -= 3;\n    }\n\n    for (i = startRed; i < lenRed; i += red.bezierDegree) {\n      p = red.points;\n      redArr = [p[i].usrCoords.slice(1), p[i + 1].usrCoords.slice(1)];\n\n      if (red.bezierDegree === 3) {\n        redArr[2] = p[i + 2].usrCoords.slice(1);\n        redArr[3] = p[i + 3].usrCoords.slice(1);\n      }\n\n      bbr = this._bezierBbox(redArr);\n\n      for (j = startBlue; j < lenBlue; j += blue.bezierDegree) {\n        p = blue.points;\n        blueArr = [p[j].usrCoords.slice(1), p[j + 1].usrCoords.slice(1)];\n\n        if (blue.bezierDegree === 3) {\n          blueArr[2] = p[j + 2].usrCoords.slice(1);\n          blueArr[3] = p[j + 3].usrCoords.slice(1);\n        }\n\n        bbb = this._bezierBbox(blueArr);\n\n        if (this._bezierOverlap(bbr, bbb)) {\n          intersections = this.meetBeziersegmentBeziersegment(redArr, blueArr);\n\n          if (intersections.length === 0) {\n            continue;\n          }\n\n          for (k = 0; k < intersections.length; k++) {\n            po = intersections[k];\n\n            if (po[1] < -_math.default.eps || po[1] > 1 + _math.default.eps || po[2] < -_math.default.eps || po[2] > 1 + _math.default.eps) {\n              continue;\n            }\n\n            L.push(po);\n          }\n\n          if (L.length > nr) {\n            return L[nr][0];\n          }\n        }\n      }\n    }\n\n    if (L.length > nr) {\n      return L[nr][0];\n    }\n\n    return [0, NaN, NaN];\n  },\n  bezierSegmentEval: function (t, curve) {\n    var f,\n        x,\n        y,\n        t1 = 1.0 - t;\n    x = 0;\n    y = 0;\n    f = t1 * t1 * t1;\n    x += f * curve[0][0];\n    y += f * curve[0][1];\n    f = 3.0 * t * t1 * t1;\n    x += f * curve[1][0];\n    y += f * curve[1][1];\n    f = 3.0 * t * t * t1;\n    x += f * curve[2][0];\n    y += f * curve[2][1];\n    f = t * t * t;\n    x += f * curve[3][0];\n    y += f * curve[3][1];\n    return [1.0, x, y];\n  },\n\n  /**\n   * Generate the defining points of a 3rd degree bezier curve that approximates\n   * a circle sector defined by three coordinate points A, B, C, each defined by an array of length three.\n   * The coordinate arrays are given in homogeneous coordinates.\n   * @param {Array} A First point\n   * @param {Array} B Second point (intersection point)\n   * @param {Array} C Third point\n   * @param {Boolean} withLegs Flag. If true the legs to the intersection point are part of the curve.\n   * @param {Number} sgn Wither 1 or -1. Needed for minor and major arcs. In case of doubt, use 1.\n   */\n  bezierArc: function (A, B, C, withLegs, sgn) {\n    var p1,\n        p2,\n        p3,\n        p4,\n        r,\n        phi,\n        beta,\n        PI2 = Math.PI * 0.5,\n        x = B[1],\n        y = B[2],\n        z = B[0],\n        dataX = [],\n        dataY = [],\n        co,\n        si,\n        ax,\n        ay,\n        bx,\n        by,\n        k,\n        v,\n        d,\n        matrix;\n    r = this.distance(B, A); // x,y, z is intersection point. Normalize it.\n\n    x /= z;\n    y /= z;\n    phi = this.rad(A.slice(1), B.slice(1), C.slice(1));\n\n    if (sgn === -1) {\n      phi = 2 * Math.PI - phi;\n    }\n\n    p1 = A;\n    p1[1] /= p1[0];\n    p1[2] /= p1[0];\n    p1[0] /= p1[0];\n    p4 = p1.slice(0);\n\n    if (withLegs) {\n      dataX = [x, x + 0.333 * (p1[1] - x), x + 0.666 * (p1[1] - x), p1[1]];\n      dataY = [y, y + 0.333 * (p1[2] - y), y + 0.666 * (p1[2] - y), p1[2]];\n    } else {\n      dataX = [p1[1]];\n      dataY = [p1[2]];\n    }\n\n    while (phi > _math.default.eps) {\n      if (phi > PI2) {\n        beta = PI2;\n        phi -= PI2;\n      } else {\n        beta = phi;\n        phi = 0;\n      }\n\n      co = Math.cos(sgn * beta);\n      si = Math.sin(sgn * beta);\n      matrix = [[1, 0, 0], [x * (1 - co) + y * si, co, -si], [y * (1 - co) - x * si, si, co]];\n      v = _math.default.matVecMult(matrix, p1);\n      p4 = [v[0] / v[0], v[1] / v[0], v[2] / v[0]];\n      ax = p1[1] - x;\n      ay = p1[2] - y;\n      bx = p4[1] - x;\n      by = p4[2] - y;\n      d = Math.sqrt((ax + bx) * (ax + bx) + (ay + by) * (ay + by));\n\n      if (Math.abs(by - ay) > _math.default.eps) {\n        k = (ax + bx) * (r / d - 0.5) / (by - ay) * 8 / 3;\n      } else {\n        k = (ay + by) * (r / d - 0.5) / (ax - bx) * 8 / 3;\n      }\n\n      p2 = [1, p1[1] - k * ay, p1[2] + k * ax];\n      p3 = [1, p4[1] + k * by, p4[2] - k * bx];\n      dataX = dataX.concat([p2[1], p3[1], p4[1]]);\n      dataY = dataY.concat([p2[2], p3[2], p4[2]]);\n      p1 = p4.slice(0);\n    }\n\n    if (withLegs) {\n      dataX = dataX.concat([p4[1] + 0.333 * (x - p4[1]), p4[1] + 0.666 * (x - p4[1]), x]);\n      dataY = dataY.concat([p4[2] + 0.333 * (y - p4[2]), p4[2] + 0.666 * (y - p4[2]), y]);\n    }\n\n    return [dataX, dataY];\n  },\n\n  /****************************************/\n\n  /****           PROJECTIONS          ****/\n\n  /****************************************/\n\n  /**\n   * Calculates the coordinates of the projection of a given point on a given circle. I.o.w. the\n   * nearest one of the two intersection points of the line through the given point and the circles\n   * center.\n   * @param {JXG.Point,JXG.Coords} point Point to project or coords object to project.\n   * @param {JXG.Circle} circle Circle on that the point is projected.\n   * @param {JXG.Board} [board=point.board] Reference to the board\n   * @returns {JXG.Coords} The coordinates of the projection of the given point on the given circle.\n   */\n  projectPointToCircle: function (point, circle, board) {\n    var dist,\n        P,\n        x,\n        y,\n        factor,\n        M = circle.center.coords.usrCoords;\n\n    if (!_type.default.exists(board)) {\n      board = point.board;\n    } // gave us a point\n\n\n    if (_type.default.isPoint(point)) {\n      dist = point.coords.distance(_constants.default.COORDS_BY_USER, circle.center.coords);\n      P = point.coords.usrCoords; // gave us coords\n    } else {\n      dist = point.distance(_constants.default.COORDS_BY_USER, circle.center.coords);\n      P = point.usrCoords;\n    }\n\n    if (Math.abs(dist) < _math.default.eps) {\n      dist = _math.default.eps;\n    }\n\n    factor = circle.Radius() / dist;\n    x = M[1] + factor * (P[1] - M[1]);\n    y = M[2] + factor * (P[2] - M[2]);\n    return new _coords.default(_constants.default.COORDS_BY_USER, [x, y], board);\n  },\n\n  /**\n   * Calculates the coordinates of the orthogonal projection of a given point on a given line. I.o.w. the\n   * intersection point of the given line and its perpendicular through the given point.\n   * @param {JXG.Point|JXG.Coords} point Point to project.\n   * @param {JXG.Line} line Line on that the point is projected.\n   * @param {JXG.Board} [board=point.board|board=line.board] Reference to a board.\n   * @returns {JXG.Coords} The coordinates of the projection of the given point on the given line.\n   */\n  projectPointToLine: function (point, line, board) {\n    var v = [0, line.stdform[1], line.stdform[2]],\n        coords;\n\n    if (!_type.default.exists(board)) {\n      if (_type.default.exists(point.coords)) {\n        board = point.board;\n      } else {\n        board = line.board;\n      }\n    }\n\n    if (_type.default.exists(point.coords)) {\n      coords = point.coords.usrCoords;\n    } else {\n      coords = point.usrCoords;\n    }\n\n    v = _math.default.crossProduct(v, coords);\n    return new _coords.default(_constants.default.COORDS_BY_USER, _math.default.crossProduct(v, line.stdform), board);\n  },\n\n  /**\n   * Calculates the coordinates of the orthogonal projection of a given coordinate array on a given line\n   * segment defined by two coordinate arrays.\n   * @param {Array} p Point to project.\n   * @param {Array} q1 Start point of the line segment on that the point is projected.\n   * @param {Array} q2 End point of the line segment on that the point is projected.\n   * @returns {Array} The coordinates of the projection of the given point on the given segment\n   * and the factor that determines the projected point as a convex combination of the\n   * two endpoints q1 and q2 of the segment.\n   */\n  projectCoordsToSegment: function (p, q1, q2) {\n    var t,\n        denom,\n        s = [q2[1] - q1[1], q2[2] - q1[2]],\n        v = [p[1] - q1[1], p[2] - q1[2]];\n    /**\n     * If the segment has length 0, i.e. is a point,\n     * the projection is equal to that point.\n     */\n\n    if (Math.abs(s[0]) < _math.default.eps && Math.abs(s[1]) < _math.default.eps) {\n      return [q1, 0];\n    }\n\n    t = _math.default.innerProduct(v, s);\n    denom = _math.default.innerProduct(s, s);\n    t /= denom;\n    return [[1, t * s[0] + q1[1], t * s[1] + q1[2]], t];\n  },\n\n  /**\n   * Finds the coordinates of the closest point on a Bezier segment of a\n   * {@link JXG.Curve} to a given coordinate array.\n   * @param {Array} pos Point to project in homogeneous coordinates.\n   * @param {JXG.Curve} curve Curve of type \"plot\" having Bezier degree 3.\n   * @param {Number} start Number of the Bezier segment of the curve.\n   * @returns {Array} The coordinates of the projection of the given point\n   * on the given Bezier segment and the preimage of the curve which\n   * determines the closest point.\n   */\n  projectCoordsToBeziersegment: function (pos, curve, start) {\n    var t0,\n\n    /** @ignore */\n    minfunc = function (t) {\n      var z = [1, curve.X(start + t), curve.Y(start + t)];\n      z[1] -= pos[1];\n      z[2] -= pos[2];\n      return z[1] * z[1] + z[2] * z[2];\n    };\n\n    t0 = _jxg.default.Math.Numerics.fminbr(minfunc, [0.0, 1.0]);\n    return [[1, curve.X(t0 + start), curve.Y(t0 + start)], t0];\n  },\n\n  /**\n   * Calculates the coordinates of the projection of a given point on a given curve.\n   * Uses {@link JXG.Math.Geometry.projectCoordsToCurve}.\n   *\n   * @param {JXG.Point} point Point to project.\n   * @param {JXG.Curve} curve Curve on that the point is projected.\n   * @param {JXG.Board} [board=point.board] Reference to a board.\n   * @see #projectCoordsToCurve\n   * @returns {Array} [JXG.Coords, position] The coordinates of the projection of the given\n   * point on the given graph and the relative position on the curve (real number).\n   */\n  projectPointToCurve: function (point, curve, board) {\n    if (!_type.default.exists(board)) {\n      board = point.board;\n    }\n\n    var x = point.X(),\n        y = point.Y(),\n        t = point.position || 0.0,\n        result = this.projectCoordsToCurve(x, y, t, curve, board); // point.position = result[1];\n\n    return result;\n  },\n\n  /**\n   * Calculates the coordinates of the projection of a coordinates pair on a given curve. In case of\n   * function graphs this is the\n   * intersection point of the curve and the parallel to y-axis through the given point.\n   * @param {Number} x coordinate to project.\n   * @param {Number} y coordinate to project.\n   * @param {Number} t start value for newtons method\n   * @param {JXG.Curve} curve Curve on that the point is projected.\n   * @param {JXG.Board} [board=curve.board] Reference to a board.\n   * @see #projectPointToCurve\n   * @returns {JXG.Coords} Array containing the coordinates of the projection of the given point on the given curve and\n   * the position on the curve.\n   */\n  projectCoordsToCurve: function (x, y, t, curve, board) {\n    var newCoords,\n        newCoordsObj,\n        i,\n        j,\n        mindist,\n        dist,\n        lbda,\n        v,\n        coords,\n        d,\n        p1,\n        p2,\n        res,\n        minfunc,\n        t_new,\n        f_new,\n        f_old,\n        delta,\n        steps,\n        minX,\n        maxX,\n        infty = Number.POSITIVE_INFINITY;\n\n    if (!_type.default.exists(board)) {\n      board = curve.board;\n    }\n\n    if (_type.default.evaluate(curve.visProp.curvetype) === \"plot\") {\n      t = 0;\n      mindist = infty;\n\n      if (curve.numberPoints === 0) {\n        newCoords = [0, 1, 1];\n      } else {\n        newCoords = [curve.Z(0), curve.X(0), curve.Y(0)];\n      }\n\n      if (curve.numberPoints > 1) {\n        v = [1, x, y];\n\n        if (curve.bezierDegree === 3) {\n          j = 0;\n        } else {\n          p1 = [curve.Z(0), curve.X(0), curve.Y(0)];\n        }\n\n        for (i = 0; i < curve.numberPoints - 1; i++) {\n          if (curve.bezierDegree === 3) {\n            res = this.projectCoordsToBeziersegment(v, curve, j);\n          } else {\n            p2 = [curve.Z(i + 1), curve.X(i + 1), curve.Y(i + 1)];\n            res = this.projectCoordsToSegment(v, p1, p2);\n          }\n\n          lbda = res[1];\n          coords = res[0];\n\n          if (0.0 <= lbda && lbda <= 1.0) {\n            dist = this.distance(coords, v);\n            d = i + lbda;\n          } else if (lbda < 0.0) {\n            coords = p1;\n            dist = this.distance(p1, v);\n            d = i;\n          } else if (lbda > 1.0 && i === curve.numberPoints - 2) {\n            coords = p2;\n            dist = this.distance(coords, v);\n            d = curve.numberPoints - 1;\n          }\n\n          if (dist < mindist) {\n            mindist = dist;\n            t = d;\n            newCoords = coords;\n          }\n\n          if (curve.bezierDegree === 3) {\n            j++;\n            i += 2;\n          } else {\n            p1 = p2;\n          }\n        }\n      }\n\n      newCoordsObj = new _coords.default(_constants.default.COORDS_BY_USER, newCoords, board);\n    } else {\n      // 'parameter', 'polar', 'functiongraph'\n\n      /** @ignore */\n      minfunc = function (t) {\n        var dx, dy;\n\n        if (t < curve.minX() || t > curve.maxX()) {\n          return Infinity;\n        }\n\n        dx = x - curve.X(t);\n        dy = y - curve.Y(t);\n        return dx * dx + dy * dy;\n      };\n\n      f_old = minfunc(t);\n      steps = 50;\n      minX = curve.minX();\n      maxX = curve.maxX();\n      delta = (maxX - minX) / steps;\n      t_new = minX;\n\n      for (i = 0; i < steps; i++) {\n        f_new = minfunc(t_new);\n\n        if (f_new < f_old || f_old === Infinity || isNaN(f_old)) {\n          t = t_new;\n          f_old = f_new;\n        }\n\n        t_new += delta;\n      } //t = Numerics.root(Numerics.D(minfunc), t);\n\n\n      t = _numerics.default.fminbr(minfunc, [Math.max(t - delta, minX), Math.min(t + delta, maxX)]); // Distinction between closed and open curves is not necessary.\n      // If closed, the cyclic projection shift will work anyhow\n      // if (Math.abs(curve.X(minX) - curve.X(maxX)) < Mat.eps &&\n      //     Math.abs(curve.Y(minX) - curve.Y(maxX)) < Mat.eps) {\n      //     // Cyclically\n      //     if (t < minX) {\n      //         t = maxX + t - minX;\n      //     }\n      //     if (t > maxX) {\n      //         t = minX + t - maxX;\n      //     }\n      // } else {\n\n      t = t < minX ? minX : t;\n      t = t > maxX ? maxX : t; // }\n\n      newCoordsObj = new _coords.default(_constants.default.COORDS_BY_USER, [curve.X(t), curve.Y(t)], board);\n    }\n\n    return [curve.updateTransform(newCoordsObj), t];\n  },\n\n  /**\n   * Calculates the coordinates of the closest orthogonal projection of a given coordinate array onto the\n   * border of a polygon.\n   * @param {Array} p Point to project.\n   * @param {JXG.Polygon} pol Polygon element\n   * @returns {Array} The coordinates of the closest projection of the given point to the border of the polygon.\n   */\n  projectCoordsToPolygon: function (p, pol) {\n    var i,\n        len = pol.vertices.length,\n        d_best = Infinity,\n        d,\n        projection,\n        proj,\n        bestprojection;\n\n    for (i = 0; i < len - 1; i++) {\n      projection = _jxg.default.Math.Geometry.projectCoordsToSegment(p, pol.vertices[i].coords.usrCoords, pol.vertices[i + 1].coords.usrCoords);\n\n      if (0 <= projection[1] && projection[1] <= 1) {\n        d = _jxg.default.Math.Geometry.distance(projection[0], p, 3);\n        proj = projection[0];\n      } else if (projection[1] < 0) {\n        d = _jxg.default.Math.Geometry.distance(pol.vertices[i].coords.usrCoords, p, 3);\n        proj = pol.vertices[i].coords.usrCoords;\n      } else {\n        d = _jxg.default.Math.Geometry.distance(pol.vertices[i + 1].coords.usrCoords, p, 3);\n        proj = pol.vertices[i + 1].coords.usrCoords;\n      }\n\n      if (d < d_best) {\n        bestprojection = proj.slice(0);\n        d_best = d;\n      }\n    }\n\n    return bestprojection;\n  },\n\n  /**\n   * Calculates the coordinates of the projection of a given point on a given turtle. A turtle consists of\n   * one or more curves of curveType 'plot'. Uses {@link JXG.Math.Geometry.projectPointToCurve}.\n   * @param {JXG.Point} point Point to project.\n   * @param {JXG.Turtle} turtle on that the point is projected.\n   * @param {JXG.Board} [board=point.board] Reference to a board.\n   * @returns {Array} [JXG.Coords, position] Array containing the coordinates of the projection of the given point on the turtle and\n   * the position on the turtle.\n   */\n  projectPointToTurtle: function (point, turtle, board) {\n    var newCoords,\n        t,\n        x,\n        y,\n        i,\n        dist,\n        el,\n        minEl,\n        res,\n        newPos,\n        np = 0,\n        npmin = 0,\n        mindist = Number.POSITIVE_INFINITY,\n        len = turtle.objects.length;\n\n    if (!_type.default.exists(board)) {\n      board = point.board;\n    } // run through all curves of this turtle\n\n\n    for (i = 0; i < len; i++) {\n      el = turtle.objects[i];\n\n      if (el.elementClass === _constants.default.OBJECT_CLASS_CURVE) {\n        res = this.projectPointToCurve(point, el);\n        newCoords = res[0];\n        newPos = res[1];\n        dist = this.distance(newCoords.usrCoords, point.coords.usrCoords);\n\n        if (dist < mindist) {\n          x = newCoords.usrCoords[1];\n          y = newCoords.usrCoords[2];\n          t = newPos;\n          mindist = dist;\n          minEl = el;\n          npmin = np;\n        }\n\n        np += el.numberPoints;\n      }\n    }\n\n    newCoords = new _coords.default(_constants.default.COORDS_BY_USER, [x, y], board); // point.position = t + npmin;\n    // return minEl.updateTransform(newCoords);\n\n    return [minEl.updateTransform(newCoords), t + npmin];\n  },\n\n  /**\n   * Trivial projection of a point to another point.\n   * @param {JXG.Point} point Point to project (not used).\n   * @param {JXG.Point} dest Point on that the point is projected.\n   * @returns {JXG.Coords} The coordinates of the projection of the given point on the given circle.\n   */\n  projectPointToPoint: function (point, dest) {\n    return dest.coords;\n  },\n\n  /**\n   *\n   * @param {JXG.Point|JXG.Coords} point\n   * @param {JXG.Board} [board]\n   */\n  projectPointToBoard: function (point, board) {\n    var i,\n        l,\n        c,\n        brd = board || point.board,\n        // comparison factor, point coord idx, bbox idx, 1st bbox corner x & y idx, 2nd bbox corner x & y idx\n    config = [// left\n    [1, 1, 0, 0, 3, 0, 1], // top\n    [-1, 2, 1, 0, 1, 2, 1], // right\n    [-1, 1, 2, 2, 1, 2, 3], // bottom\n    [1, 2, 3, 0, 3, 2, 3]],\n        coords = point.coords || point,\n        bbox = brd.getBoundingBox();\n\n    for (i = 0; i < 4; i++) {\n      c = config[i];\n\n      if (c[0] * coords.usrCoords[c[1]] < c[0] * bbox[c[2]]) {\n        // define border\n        l = _math.default.crossProduct([1, bbox[c[3]], bbox[c[4]]], [1, bbox[c[5]], bbox[c[6]]]);\n        l[3] = 0;\n        l = _math.default.normalize(l); // project point\n\n        coords = this.projectPointToLine({\n          coords: coords\n        }, {\n          stdform: l\n        }, brd);\n      }\n    }\n\n    return coords;\n  },\n\n  /**\n   * Calculates the distance of a point to a line. The point and the line are given by homogeneous\n   * coordinates. For lines this can be line.stdform.\n   * @param {Array} point Homogeneous coordinates of a point.\n   * @param {Array} line Homogeneous coordinates of a line ([C,A,B] where A*x+B*y+C*z=0).\n   * @returns {Number} Distance of the point to the line.\n   */\n  distPointLine: function (point, line) {\n    var a = line[1],\n        b = line[2],\n        c = line[0],\n        nom;\n\n    if (Math.abs(a) + Math.abs(b) < _math.default.eps) {\n      return Number.POSITIVE_INFINITY;\n    }\n\n    nom = a * point[1] + b * point[2] + c;\n    a *= a;\n    b *= b;\n    return Math.abs(nom) / Math.sqrt(a + b);\n  },\n\n  /**\n   * Helper function to create curve which displays a Reuleaux polygons.\n   * @param {Array} points Array of points which should be the vertices of the Reuleaux polygon. Typically,\n   * these point list is the array vertices of a regular polygon.\n   * @param {Number} nr Number of vertices\n   * @returns {Array} An array containing the two functions defining the Reuleaux polygon and the two values\n   * for the start and the end of the paramtric curve. array may be used as parent array of a\n   * {@link JXG.Curve}.\n   *\n   * @example\n   * var A = brd.create('point',[-2,-2]);\n   * var B = brd.create('point',[0,1]);\n   * var pol = brd.create('regularpolygon',[A,B,3], {withLines:false, fillColor:'none', highlightFillColor:'none', fillOpacity:0.0});\n   * var reuleauxTriangle = brd.create('curve', JXG.Math.Geometry.reuleauxPolygon(pol.vertices, 3),\n   *                          {strokeWidth:6, strokeColor:'#d66d55', fillColor:'#ad5544', highlightFillColor:'#ad5544'});\n   *\n   * </pre><div class=\"jxgbox\" id=\"JXG2543a843-46a9-4372-abc1-94d9ad2db7ac\" style=\"width: 300px; height: 300px;\"></div>\n   * <script type=\"text/javascript\">\n   * var brd = JXG.JSXGraph.initBoard('JXG2543a843-46a9-4372-abc1-94d9ad2db7ac', {boundingbox: [-5, 5, 5, -5], axis: true, showcopyright:false, shownavigation: false});\n   * var A = brd.create('point',[-2,-2]);\n   * var B = brd.create('point',[0,1]);\n   * var pol = brd.create('regularpolygon',[A,B,3], {withLines:false, fillColor:'none', highlightFillColor:'none', fillOpacity:0.0});\n   * var reuleauxTriangle = brd.create('curve', JXG.Math.Geometry.reuleauxPolygon(pol.vertices, 3),\n   *                          {strokeWidth:6, strokeColor:'#d66d55', fillColor:'#ad5544', highlightFillColor:'#ad5544'});\n   * \u003c/script><pre>\n   */\n  reuleauxPolygon: function (points, nr) {\n    var beta,\n        pi2 = Math.PI * 2,\n        pi2_n = pi2 / nr,\n        diag = (nr - 1) / 2,\n        d = 0,\n        makeFct = function (which, trig) {\n      return function (t, suspendUpdate) {\n        var t1 = (t % pi2 + pi2) % pi2,\n            j = Math.floor(t1 / pi2_n) % nr;\n\n        if (!suspendUpdate) {\n          d = points[0].Dist(points[diag]);\n          beta = _math.default.Geometry.rad([points[0].X() + 1, points[0].Y()], points[0], points[diag % nr]);\n        }\n\n        if (isNaN(j)) {\n          return j;\n        }\n\n        t1 = t1 * 0.5 + j * pi2_n * 0.5 + beta;\n        return points[j][which]() + d * Math[trig](t1);\n      };\n    };\n\n    return [makeFct(\"X\", \"cos\"), makeFct(\"Y\", \"sin\"), 0, pi2];\n  },\n  meet3Planes: function (n1, d1, n2, d2, n3, d3) {\n    var p = [0, 0, 0],\n        n31,\n        n12,\n        n23,\n        denom,\n        i;\n    n31 = _math.default.crossProduct(n3, n1);\n    n12 = _math.default.crossProduct(n1, n2);\n    n23 = _math.default.crossProduct(n2, n3);\n    denom = _math.default.innerProduct(n1, n23, 3);\n\n    for (i = 0; i < 3; i++) {\n      p[i] = (d1 * n23[i] + d2 * n31[i] + d3 * n12[i]) / denom;\n    }\n\n    return p;\n  },\n  meetPlanePlane: function (v11, v12, v21, v22) {\n    var i,\n        no1,\n        no2,\n        v = [0, 0, 0],\n        w = [0, 0, 0];\n\n    for (i = 0; i < 3; i++) {\n      v[i] = _type.default.evaluate(v11[i]);\n      w[i] = _type.default.evaluate(v12[i]);\n    }\n\n    no1 = _math.default.crossProduct(v, w);\n\n    for (i = 0; i < 3; i++) {\n      v[i] = _type.default.evaluate(v21[i]);\n      w[i] = _type.default.evaluate(v22[i]);\n    }\n\n    no2 = _math.default.crossProduct(v, w);\n    return _math.default.crossProduct(no1, no2);\n  },\n  project3DTo3DPlane: function (point, normal, foot) {\n    // TODO: homogeneous 3D coordinates\n    var sol = [0, 0, 0],\n        le,\n        d1,\n        d2,\n        lbda;\n    foot = foot || [0, 0, 0];\n    le = _math.default.norm(normal);\n    d1 = _math.default.innerProduct(point, normal, 3);\n    d2 = _math.default.innerProduct(foot, normal, 3); // (point - lbda * normal / le) * normal / le == foot * normal / le\n    // => (point * normal - foot * normal) ==  lbda * le\n\n    lbda = (d1 - d2) / le;\n    sol = _math.default.axpy(-lbda, normal, point);\n    return sol;\n  },\n  getPlaneBounds: function (v1, v2, q, s, e) {\n    var s1, s2, e1, e2, mat, rhs, sol;\n\n    if (v1[2] + v2[0] !== 0) {\n      mat = [[v1[0], v2[0]], [v1[1], v2[1]]];\n      rhs = [s - q[0], s - q[1]];\n      sol = _numerics.default.Gauss(mat, rhs);\n      s1 = sol[0];\n      s2 = sol[1];\n      rhs = [e - q[0], e - q[1]];\n      sol = _numerics.default.Gauss(mat, rhs);\n      e1 = sol[0];\n      e2 = sol[1];\n      return [s1, e1, s2, e2];\n    }\n\n    return null;\n  }\n});\n\nvar _default = _math.default.Geometry;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_jxg","_constants","_coords","_math","_numerics","_type","_expect","Geometry","extend","angle","A","B","C","a","b","c","deprecated","coords","usrCoords","u","v","s","t","Math","atan2","trueAngle","rad","ax","ay","bx","by","cx","cy","phi","angleBisector","board","Ac","Bc","Cc","exists","COORDS_BY_USER","x","y","phiA","phiC","PI","cos","sin","reflection","line","point","pc","p1c","point1","p2c","point2","w","mu","rotation","rotpoint","rotpc","x0","y0","perpendicular","z","abs","eps","change","innerProduct","stdform","crossProduct","circumcenterMidpoint","circumcenter","apply","arguments","point3","m1","m2","distance","array1","array2","n","i","sum","min","length","sqrt","affineDistance","d","Infinity","affineRatio","dx","r","sortVertices","p","ps","each","coordsArray","N","lastPoint","pop","ll","sort","rad1","rad2","push","signedTriangle","p1","p2","p3","signedPolygon","undefined","unshift","GrahamScan","points","M","swap","slice","calcStraight","el","margin","straightFirst","evaluate","visProp","straightfirst","straightLast","straightlast","scrCoords","origin","unitX","unitY","isNaN","takePoint1","canvasWidth","canvasHeight","takePoint2","intersection","meetLineBoard","intersect1","intersect2","isSameDirection","isSameDir","setCoordinates","calcLineDelimitingPoints","boundingBox","getBoundingBox","getSlope","lineSlope","projectPointToLine","distP1P2","calcLabelQuadrant","floor","i1","i2","dpx","dpy","dix","diy","start","dy","sx","sy","det3p","q","windingNumber","path","doNotClosePath","wn","le","off","p0","sign","pnpoly","x_in","y_in","coord_type","j","isIn","crds","len","vi","vj","intersectionFunction","el1","el2","alwaysintersect","that","el1_isArcType","el2_isArcType","elementClass","OBJECT_CLASS_CURVE","type","OBJECT_TYPE_ARC","OBJECT_TYPE_SECTOR","func","OBJECT_CLASS_CIRCLE","OBJECT_CLASS_LINE","meetCurveLine","OBJECT_TYPE_POLYGON","meetPolygonLine","meetPathPath","first1","last1","first2","last2","res","meetSegmentSegment","NaN","meet","first","last","has","coordsOnArc","meetCurveCurve","arc","radiuspoint","center","alpha","beta","anglepoint","ev_s","selection","result","meetLineLine","meetLineCircle","meetCircleCircle","COORDS_BY_SCREEN","l1","l2","lin","circ","k","circ1","circ2","radicalAxis","normalize","c1","c2","nr","t2ini","method","co","generalizedNewton","bezierDegree","meetBezierCurveRedBlueSegments","meetCurveRedBlueSegments","alwaysIntersect","cu","li","meetCurveLineDiscrete","meetCurveLineContinuous","testSegment","epsLow","func0","maxX","minX","X","Y","func1","delta","steps","tnew","fmin","tmin","root","max","ft","lip1","lip2","cnt","numberPoints","ev_sf","ev_sl","meetBeziersegmentBeziersegment","red","blue","iFound","lenBlue","lenRed","red1","red2","blue2","blue1","m","q1","q2","li1","li2","path1","path2","S","Clip","_getPath","isEmptyCase","makeDoublyLinkedList","intersections","findIntersections","borders","border","_bezierSplit","curve","p00","p22","p000","_bezierBbox","bb","_bezierOverlap","bb1","bb2","_bezierListConcat","L","Lnew","t1","t2","t2exists","_bezierMeetSubdivision","level","bbr","bbb","maxLev","ar","r0","r1","b0","b1","q0","concat","_bezierLineMeetSubdivision","L2","startBlue","startRed","redArr","blueArr","po","bezierSegmentEval","f","bezierArc","withLegs","sgn","PI2","p4","dataX","dataY","si","matrix","matVecMult","projectPointToCircle","circle","isPoint","dist","P","factor","Radius","projectCoordsToSegment","denom","projectCoordsToBeziersegment","pos","t0","Numerics","fminbr","minfunc","projectPointToCurve","projectCoordsToCurve","position","infty","Number","POSITIVE_INFINITY","curvetype","mindist","newCoords","Z","lbda","newCoordsObj","f_old","t_new","f_new","updateTransform","projectCoordsToPolygon","pol","vertices","d_best","projection","proj","bestprojection","projectPointToTurtle","turtle","np","npmin","objects","newPos","minEl","projectPointToPoint","dest","projectPointToBoard","brd","config","bbox","l","distPointLine","reuleauxPolygon","pi2","pi2_n","diag","makeFct","which","trig","suspendUpdate","Dist","meet3Planes","n1","d1","n2","d2","n3","d3","n31","n12","n23","meetPlanePlane","v11","v12","v21","v22","no1","no2","project3DTo3DPlane","normal","foot","norm","axpy","sol","getPlaneBounds","v1","v2","e","mat","rhs","Gauss","s1","s2","e1","e2"]
}
