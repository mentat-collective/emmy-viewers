{"version":3,"sources":["sci/impl/protocols.cljc"],"mappings":"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","names":["sci.impl.protocols/extend-default-val","sci.impl.protocols/default?","_ctx","sym","cljs.core._EQ_","sci.impl.protocols/->sigs","signatures","cljs.core.into","cljs.core.map","p__89994","vec__89995","seq__89996","cljs.core/seq","first__89997","cljs.core/first","cljs.core/next","name","arglists","vec__89999","cljs.core.nth","l","cljs.core/last","doc","cljs.core/butlast","cljs.core.keyword","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sci.impl.protocols/defprotocol","seq90016","G__90017","G__90018","G__90019","G__90020","self__4851__auto__","_","protocol-name","vec__90021","vec__90024","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/array-map","cljs.core/hash-set","docstring","sig","cljs.core/rest","opts","opt","cljs.core/Keyword","cljs.core/second","cljs.core/nnext","sigs-map","current-ns","sci.impl.utils/current-ns-name","fq-name","cljs.core.symbol","extend-meta","expansion","cljs.core/with-meta","p__90027","vec__90028","seq__90029","first__90030","method-name","cljs.core/vec","method-meta","cljs.core/select-keys","cljs.core.get","cljs.core.update","a","impls","cljs.core.conj","sci.impl.protocols/extend","seq90067","G__90068","G__90069","ctx","atype","proto+mmaps","seq__90074","chunk__90076","count__90077","i__90078","vec__90583","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__90631","proto","mmap","cljs.core.partition","extend-via-metadata","proto-ns","pns","sci.impl.types/getName","pns-str","seq__90606","chunk__90607","count__90608","i__90609","vec__90624","vec__90627","seq__90638","chunk__90639","count__90640","i__90641","vec__90660","vec__90667","meth-name","f","cljs.core/deref","meth-str","cljs.core/name","meth-sym","env","multi-method-var","cljs.core.get_in","multi-method","sci.impl.multimethods/multi-fn-add-method-impl","fq","this","args","temp__5751__auto__","m","cljs.core/meta","meth","p__90691","vec__90695","seq__90696","first__90697","sci.impl.protocols/process-single-extend-meta","body","default-method?","p__90814","vec__90815","seq__90816","first__90817","sci.impl.protocols/process-single","sci.impl.protocols/process-methods","type","meths","protocol-ns","p__90831","vec__90832","seq__90833","first__90834","fn-body","cljs.core/vector?","p1__90825#","p1__90826#","sci.impl.protocols/cljs-type-symbols","sci.impl.protocols/type->str","t","sci.impl.protocols/extend-protocol","seq90842","G__90843","G__90844","G__90845","G__90846","form","print-writer?","p1__90839#","sci.impl.utils/split-when","cljs.core/seq?","protocol-var","or__4253__auto__","G__90850","G__90851","G__90852","fexpr__90849","sci.impl.utils/eval-resolve-state","sci.impl.utils.throw_error_with_location","protocol-data","sci.impl.utils/var?","p__90857","vec__90858","seq__90859","first__90860","sci.impl.protocols/extend-type","seq90867","G__90868","G__90869","G__90870","G__90871","_env","proto+meths","p1__90862#","p__90872","vec__90873","seq__90874","first__90875","G__90877","G__90878","G__90879","fexpr__90876","proto-data","sci.impl.protocols/find-matching-non-default-method","protocol","obj","sats","cljs.core/contains?","sci.impl.types/type-impl","cljs.core/boolean","p1__90880#","cljs.core/some","cljs.core/get-method","ms","cljs.core/methods","default","sci.impl.protocols/satisfies?","sci.impl.types/Reified","p","and__4251__auto__","pred__90881","expr__90882","js/Error","cljs.core/=","cljs.core/IDeref","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/ISwap","cljs.core/IReset","cljs.core/IRecord","sci.impl.protocols/instance-impl","clazz","x","sci.lang/Type","cljs.core/map?","sci.impl.protocols/extends?","p1__90889#"],"sourcesContent":["(ns sci.impl.protocols\n  {:no-doc true}\n  (:refer-clojure :exclude [defprotocol extend-protocol\n                            extend extend-type reify satisfies?\n                            extends? implements? type->str])\n  (:require\n   #?(:clj [sci.impl.interop :as interop])\n   [sci.impl.deftype]\n   [sci.impl.multimethods :as mms]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils]\n   [sci.lang]))\n\n#?(:cljs\n   (def extend-default-val (str `default)))\n\n(defn default? [#?(:clj ctx\n                   :cljs _ctx) sym]\n  #?(:clj (and (or (= 'Object sym)\n                   (= 'java.lang.Object type))\n               (= Object (interop/resolve-class ctx 'Object)))\n     :cljs (= extend-default-val sym)))\n\n(defn ->sigs [signatures]\n  (into {}\n        (map (fn [[name & arglists]]\n               (let [l (last arglists)\n                     [arglists doc] (if (string? l)\n                                      [(butlast arglists) l]\n                                      [arglists nil])]\n                 [(keyword name) {:name name :arglists arglists :doc doc}])) signatures)))\n\n(defn defprotocol [_ _ _ctx protocol-name & signatures]\n  (let [[docstring signatures]\n        (let [sig (first signatures)]\n          (if (string? sig) [sig (rest signatures)]\n              [nil signatures]))\n        [opts signatures]\n        (let [opt (first signatures)]\n          (if (keyword? opt) [{opt (second signatures)} (nnext signatures)]\n              [nil signatures]))\n        sigs-map (->sigs signatures)\n        current-ns (str (utils/current-ns-name))\n        fq-name (symbol current-ns (str protocol-name))\n        extend-meta (:extend-via-metadata opts)\n        expansion\n        `(do\n           (def  ~(with-meta protocol-name\n                    {:doc docstring}) (cond->\n                                          {:methods #{}\n                                           :name '~fq-name\n                                           :ns *ns*\n                                           :sigs ~(list 'quote sigs-map)\n                                           :var (var ~fq-name)}\n                                        ~extend-meta (assoc :extend-via-metadata true)))\n           ~@(map (fn [[method-name & _]]\n                    (let [fq-name (symbol (str current-ns) (str method-name))\n                          method-meta (select-keys (get sigs-map (keyword method-name)) [:doc :arglists])\n                          ; re-quote arglists\n                          method-meta (update method-meta :arglists (fn [a] (list 'quote a)))\n                          impls [`(defmulti ~method-name ~method-meta clojure.core/protocol-type-impl)\n                                 `(defmethod ~method-name :sci.impl.protocols/reified [x# & args#]\n                                    (let [methods# (clojure.core/-reified-methods x#)]\n                                      (if-let [m# (get methods# '~method-name)]\n                                        (apply m# x# args#)\n                                        (if-let [default# (get-method ~method-name :default)]\n                                          (apply default# x# args#)\n                                          (throw (ex-info \"No method \" '~method-name \" found for: \" (type x#)))))))]\n                          impls (if extend-meta\n                                  (conj impls\n                                        `(defmethod ~method-name :default [x# & args#]\n                                           (let [meta# (meta x#)\n                                                 method# (get meta# '~fq-name)]\n                                             (if method#\n                                               (apply method# x# args#)\n                                               (let [method# (get-method ~method-name (#?(:clj class :cljs type) x#))\n                                                     default# (get-method ~method-name :default)]\n                                                 (if (not= method# default#)\n                                                   (apply method# x# args#)\n                                                   (throw (new #?(:clj IllegalArgumentException\n                                                                  :cljs js/Error)\n                                                               (str \"No implementation of method: \"\n                                                                    ~(keyword method-name) \" of protocol: \"\n                                                                    (var ~protocol-name) \" found for: \"\n                                                                    (clojure.core/protocol-type-impl x#))))))))))\n                                  (conj impls\n                                        ;; fallback method for extension on IRecord\n                                        `(defmethod ~method-name :default [x# & args#]\n                                           (let [method# (get-method ~method-name (#?(:clj class :cljs type) x#))\n                                                 default# (get-method ~method-name :default)]\n                                             (if (not= method# default#)\n                                               (apply method# x# args#)\n                                               (throw (new #?(:clj IllegalArgumentException\n                                                              :cljs js/Error)\n                                                           (str \"No implementation of method: \"\n                                                                ~(keyword method-name) \" of protocol: \"\n                                                                (var ~protocol-name) \" found for: \"\n                                                                (clojure.core/protocol-type-impl x#)))))))))]\n                      `(do\n                         ~@impls\n                         #?(:clj (alter-var-root (var ~protocol-name)\n                                                 update :methods conj ~method-name)\n                            :cljs (def ~protocol-name\n                                    (update ~protocol-name :methods conj ~method-name))))))\n                  signatures\n                  )\n           ~(list 'quote protocol-name))]\n    expansion))\n\n;; TODO: apply patches for default override for records\n(defn extend [ctx atype & proto+mmaps]\n  (doseq [[proto mmap] (partition 2 proto+mmaps)\n          :let [extend-via-metadata (:extend-via-metadata proto)\n                proto-ns (:ns proto)\n                pns (types/getName proto-ns)\n                pns-str (when extend-via-metadata (str pns))]]\n    (doseq [[meth-name f] mmap]\n      (let [meth-str (name meth-name)\n            meth-sym (symbol meth-str)\n            env @(:env ctx)\n            multi-method-var (get-in env [:namespaces pns meth-sym])\n            multi-method @multi-method-var]\n        (mms/multi-fn-add-method-impl\n         multi-method atype\n         (if extend-via-metadata\n           (let [fq (symbol pns-str meth-str)]\n             (fn [this & args]\n               (if-let [m (meta this)]\n                 (if-let [meth (get m fq)]\n                   (apply meth this args)\n                   (apply f this args))\n                 (apply f this args))))\n           f))))))\n\n(defn process-single-extend-meta\n  \"Processes single args+body pair for extending via metadata\"\n  [fq [args & body] default-method?]\n  (list args (if default-method?\n               `(let [farg# ~(first args)]\n                  (if-let [m# (meta farg#)]\n                    (if-let [meth# (get m# '~fq)]\n                      (apply meth# ~args)\n                      ;; look for type specific method\n                      (let [meth# (get-method ~fq (#?(:clj class :cljs type) farg#))\n                            default# (get-method ~fq :default)]\n                        (if (not= default# meth#)\n                          (apply meth# ~args)\n                          (do ~@body))))\n                    (let [meth# (get-method ~fq (#?(:clj class :cljs type) farg#))\n                          default# (get-method ~fq :default)]\n                      (if (not= default# meth#)\n                        (apply meth# ~args)\n                        (do ~@body)))))\n               `(let [farg# ~(first args)]\n                  (if-let [m# (meta farg#)]\n                    (if-let [meth# (get m# '~fq)]\n                      (apply meth# ~args)\n                      (do ~@body))\n                    (do ~@body))))))\n\n(defn process-single\n  [fq [args & body]]\n  (list args `(let [farg# ~(first args)]\n                (let [meth# (get-method ~fq (#?(:clj class :cljs type) farg#))\n                      default# (get-method ~fq :default)]\n                  (if (not= default# meth#)\n                    (apply meth# ~args)\n                    (do ~@body))))))\n\n(defn process-methods [ctx type meths protocol-ns extend-via-metadata]\n  (let [default-method? (default? ctx type)]\n    (map\n     (fn [[meth-name & fn-body]]\n       (let [fq (symbol protocol-ns (name meth-name))\n             fn-body (cond extend-via-metadata\n                           (if (vector? (first fn-body))\n                             (process-single-extend-meta fq fn-body default-method?)\n                             (map #(process-single-extend-meta fq % default-method?) fn-body))\n                           default-method?\n                           (if (vector? (first fn-body))\n                             (process-single fq fn-body)\n                             (map #(process-single fq %) fn-body))\n                           :else fn-body)]\n         (if default-method?\n           `(defmethod ~fq\n              :default\n              ~@fn-body)\n           `(defmethod ~fq\n              ~type\n              ~@fn-body))))\n     meths)))\n\n\n#?(:cljs\n   (def cljs-type-symbols\n     {'default extend-default-val\n      'object 'js/Object\n      'string 'js/String\n      'number 'js/Number\n      'array 'js/Array\n      'function 'js/Function\n      'boolean 'js/Boolean}))\n\n(defn type->str\n  [t]\n  (str t))\n\n(defn extend-protocol [form _ ctx protocol-name & impls]\n  (let [#?@(:cljs [print-writer? (= 'IPrintWithWriter protocol-name)])\n        impls (utils/split-when #(not (seq? %)) impls)\n        protocol-var\n        (or (@utils/eval-resolve-state ctx (:bindingx ctx) protocol-name)\n            #?(:cljs (when print-writer?\n                       ::IPrintWithWriter))\n            (utils/throw-error-with-location (str \"Protocol not found: \" protocol-name) form))\n        protocol-data (when (utils/var? protocol-var)\n                        (deref protocol-var))\n        extend-via-metadata (:extend-via-metadata protocol-data)\n        protocol-ns (:ns protocol-data)\n        pns (if (keyword? protocol-var)\n              \"sci.impl.protocols\"\n              (str (types/getName protocol-ns)))\n        expansion\n        `(do\n           ~@(map (fn [[type & meths]]\n                    (let [type #?(:clj type\n                                  :cljs (get cljs-type-symbols type type))]\n                      (if #?(:cljs print-writer?\n                             :clj false)\n                        #?(:cljs\n                           `(clojure.core/alter-meta!\n                             (var ~type) assoc :sci.impl/print-method (fn ~@(rest (first meths))))\n                           :clj nil)\n                        `(do\n                           (clojure.core/alter-var-root\n                            (var ~protocol-name) update :satisfies (fnil conj #{})\n                            (type->str ~type))\n                           ~@(process-methods ctx type meths pns extend-via-metadata)))))\n                  impls))]\n    expansion))\n\n(defn extend-type [form _env ctx atype & proto+meths]\n  (let [#?@(:cljs [atype (get cljs-type-symbols atype atype)])\n        proto+meths (utils/split-when #(not (seq? %)) proto+meths)]\n    `(do ~@(map\n            (fn [[proto & meths]]\n              (let [protocol-var (or (@utils/eval-resolve-state ctx (:bindingx ctx) proto)\n                                     (utils/throw-error-with-location (str \"Protocol not found: \" proto) form))\n                    proto-data (deref protocol-var)\n                    protocol-ns (:ns proto-data)\n                    pns (str (types/getName protocol-ns))\n                    extend-via-metadata (:extend-via-metadata proto-data)]\n                `(do\n                   (clojure.core/alter-var-root\n                    (var ~proto) update :satisfies (fnil conj #{})\n                    (type->str ~atype))\n                   ~@(process-methods ctx atype meths pns extend-via-metadata)))) proto+meths))))\n\n;; IAtom can be implemented as a protocol on reify and defrecords in sci\n\n(defn find-matching-non-default-method [protocol obj]\n  (or (when-let [sats (:satisfies protocol)]\n        (or #?(:clj (contains? sats \"class java.lang.Object\")\n               :cljs (contains? sats extend-default-val))\n            (when-let [t (types/type-impl obj)]\n              (contains? sats (type->str t)))))\n      (boolean (some #(when-let [m (get-method % (types/type-impl obj))]\n                        (let [ms (methods %)\n                              default (get ms :default)]\n                          (not (identical? m default))))\n                     (:methods protocol)))))\n\n(defn satisfies? [protocol obj]\n  (if #?(:clj (instance? sci.impl.types.IReified obj)\n         ;; in CLJS we currently don't support mixing \"classes\" and protocols,\n         ;; hence, the instance is always a Reified, thus we can avoid calling\n         ;; the slower satisfies?\n         :cljs (instance? sci.impl.types/Reified obj))\n    (contains? (types/getProtocols obj) protocol)\n    ;; can be record that is implementing this protocol\n    ;; or a type like String, etc. that implements a protocol via extend-type, etc.\n    #?(:cljs (let [p (:protocol protocol)]\n               (or\n                (and p\n                     (condp = p\n                       IDeref (cljs.core/satisfies? IDeref obj)\n                       ISwap (cljs.core/satisfies? ISwap obj)\n                       IReset (cljs.core/satisfies? IReset obj)\n                       IRecord (cljs.core/satisfies? IRecord obj)))\n                (find-matching-non-default-method protocol obj)))\n       ;; NOTE: what if the protocol doesn't have any methods?\n       ;; This probably needs fixing\n       :clj (or\n             (when-let [p (:protocol protocol)]\n               (clojure.core/satisfies? p obj))\n             (find-matching-non-default-method protocol obj)))))\n\n(defn instance-impl [clazz x]\n  (cond\n    ;; fast path for Clojure when using normal clazz\n    #?@(:clj [(class? clazz)\n              (instance? clazz x)])\n    (instance? sci.lang.Type clazz)\n    (if (#?(:clj instance?\n            :cljs cljs.core/implements?) sci.impl.types.SciTypeInstance x)\n      (= clazz (sci.impl.types/-get-type x))\n      (= clazz (-> x meta :type)))\n    ;; only in Clojure, we could be referring to clojure.lang.IDeref as a sci protocol\n    (map? clazz)\n    #?(:clj (if-let [c (:class clazz)]\n              ;; this is a protocol which is an interface on the JVM\n              (or (satisfies? clazz x)\n                  ;; this is the fallback because we excluded defaults for the core protocols\n                  (instance? c x))\n              (satisfies? clazz x))\n       :cljs (satisfies? clazz x))\n    ;; could we have a fast path for CLJS too? please let me know!\n    :else (instance? clazz x)))\n\n(defn extends?\n  \"Returns true if atype extends protocol\"\n  [protocol atype]\n  (boolean (some #(get-method % atype) (:methods protocol))))\n"]}