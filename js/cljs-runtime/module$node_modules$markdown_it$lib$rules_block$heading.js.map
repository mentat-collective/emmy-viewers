{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_block$heading.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAKpH,IAAIC,QAAUH,OAAA,CAAQ,kDAAR,CAA2BG,CAAAA,OAGzCF,OAAOC,CAAAA,OAAP,CAAiBE,QAAgB,CAACC,KAAD,CAAQC,SAAR,CAAmBC,OAAnB,CAA4BC,MAA5B,CAAoC,CAAA,IAE/DC,IAAMJ,KAAMK,CAAAA,MAAN,CAAaJ,SAAb,CAANG,CAAgCJ,KAAMM,CAAAA,MAAN,CAAaL,SAAb,CAF+B,CAG/DM,IAAMP,KAAMQ,CAAAA,MAAN,CAAaP,SAAb,CAGV,IAAiD,CAAjD,EAAID,KAAMS,CAAAA,MAAN,CAAaR,SAAb,CAAJ,CAA8BD,KAAMU,CAAAA,SAApC,CAAsD,MAAO,CAAA,CAE7D,KAAAC,GAAMX,KAAMY,CAAAA,GAAIC,CAAAA,UAAV,CAAqBT,GAArB,CAEN,IAAW,EAAX,GAAIO,EAAJ,EAA0BP,GAA1B,EAAiCG,GAAjC,CAAwC,MAAO,CAAA,CAG/CO,QAAA,CAAQ,CAER,KADAH,EACA,CADKX,KAAMY,CAAAA,GAAIC,CAAAA,UAAV,CAAqB,EAAET,GAAvB,CACL,CAAc,EAAd,GAAOO,EAAP;AAA6BP,GAA7B,CAAmCG,GAAnC,EAAmD,CAAnD,EAA0CO,OAA1C,CAAA,CACEA,OAAA,EACA,CAAAH,EAAA,CAAKX,KAAMY,CAAAA,GAAIC,CAAAA,UAAV,CAAqB,EAAET,GAAvB,CAGP,IAAY,CAAZ,CAAIU,OAAJ,EAAkBV,GAAlB,CAAwBG,GAAxB,EAA+B,CAACT,OAAA,CAAQa,EAAR,CAAhC,CAAgD,MAAO,CAAA,CAEvD,IAAIR,MAAJ,CAAc,MAAO,CAAA,CAIrBI,IAAA,CAAMP,KAAMe,CAAAA,cAAN,CAAqBR,GAArB,CAA0BH,GAA1B,CACNY,OAAA,CAAMhB,KAAMiB,CAAAA,aAAN,CAAoBV,GAApB,CAAyB,EAAzB,CAA+BH,GAA/B,CACFY,OAAJ,CAAUZ,GAAV,EAAiBN,OAAA,CAAQE,KAAMY,CAAAA,GAAIC,CAAAA,UAAV,CAAqBG,MAArB,CAA2B,CAA3B,CAAR,CAAjB,GACET,GADF,CACQS,MADR,CAIAhB,MAAMkB,CAAAA,IAAN,CAAajB,SAAb,CAAyB,CAEzBkB,OAAA,CAAenB,KAAMoB,CAAAA,IAAN,CAAW,cAAX,CAA2B,GAA3B,CAAiCC,MAAA,CAAOP,OAAP,CAAjC,CAAgD,CAAhD,CACfK,OAAMG,CAAAA,MAAN,CAAe,UAAWC,CAAAA,KAAX,CAAiB,CAAjB,CAAoBT,OAApB,CACfK,OAAMK,CAAAA,GAAN,CAAe,CAAEvB,SAAF,CAAaD,KAAMkB,CAAAA,IAAnB,CAEfC,OAAA,CAAiBnB,KAAMoB,CAAAA,IAAN,CAAW,QAAX,CAAqB,EAArB,CAAyB,CAAzB,CACjBD,OAAMM,CAAAA,OAAN,CAAiBzB,KAAMY,CAAAA,GAAIW,CAAAA,KAAV,CAAgBnB,GAAhB,CAAqBG,GAArB,CAA0BmB,CAAAA,IAA1B,EACjBP,OAAMK,CAAAA,GAAN;AAAiB,CAAEvB,SAAF,CAAaD,KAAMkB,CAAAA,IAAnB,CACjBC,OAAMQ,CAAAA,QAAN,CAAiB,EAEjBR,OAAA,CAAenB,KAAMoB,CAAAA,IAAN,CAAW,eAAX,CAA4B,GAA5B,CAAkCC,MAAA,CAAOP,OAAP,CAAlC,CAAiD,CAAC,CAAlD,CACfK,OAAMG,CAAAA,MAAN,CAAe,UAAWC,CAAAA,KAAX,CAAiB,CAAjB,CAAoBT,OAApB,CAEf,OAAO,CAAA,CA9C4D,CAR+C;",
"sources":["node_modules/markdown-it/lib/rules_block/heading.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_block$heading\"] = function(global,require,module,exports) {\n// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","isSpace","module.exports","state","startLine","endLine","silent","pos","bMarks","tShift","max","eMarks","sCount","blkIndent","ch","src","charCodeAt","level","skipSpacesBack","tmp","skipCharsBack","line","token","push","String","markup","slice","map","content","trim","children"]
}
