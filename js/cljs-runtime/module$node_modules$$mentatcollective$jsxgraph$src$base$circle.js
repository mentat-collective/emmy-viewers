shadow$provide.module$node_modules$$mentatcollective$jsxgraph$src$base$circle=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _jxg=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$jxg"));global=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$element"));var _coords=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$coords")),
_constants=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$constants")),_conic=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$element$conic")),_geonext=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$parser$geonext")),_type=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$utils$type"));_jxg.default.Circle=function(board,method,par1,par2,attributes){this.constructor(board,
attributes,_constants.default.OBJECT_TYPE_CIRCLE,_constants.default.OBJECT_CLASS_CIRCLE);this.method=method;this.midpoint=this.board.select(par1);this.center=this.board.select(par1);this.point2=null;this.radius=0;this.circle=this.line=null;this.points=[];"twoPoints"===method?(this.point2=board.select(par2),this.radius=this.Radius()):"pointRadius"===method?(this.gxtterm=par2,this.updateRadius=_type.default.createFunction(par2,this.board,null,!0),this.updateRadius()):"pointLine"===method?(this.line=
board.select(par2),this.radius=this.line.point1.coords.distance(_constants.default.COORDS_BY_USER,this.line.point2.coords)):"pointCircle"===method&&(this.circle=board.select(par2),this.radius=this.circle.Radius());this.id=this.board.setId(this,"C");this.board.renderer.drawEllipse(this);this.board.finalizeAdding(this);this.createGradient();this.elType="circle";this.createLabel();_type.default.exists(this.center._is_new)?(this.addChild(this.center),delete this.center._is_new):this.center.addChild(this);
"pointRadius"===method?this.notifyParents(par2):"pointLine"===method?this.line.addChild(this):"pointCircle"===method?this.circle.addChild(this):"twoPoints"===method&&(_type.default.exists(this.point2._is_new)?(this.addChild(this.point2),delete this.point2._is_new):this.point2.addChild(this));this.methodMap=_type.default.deepCopy(this.methodMap,{setRadius:"setRadius",getRadius:"getRadius",Area:"Area",area:"Area",radius:"Radius",center:"center",line:"line",point2:"point2"})};_jxg.default.Circle.prototype=
new global.default;_jxg.default.extend(_jxg.default.Circle.prototype,{hasPoint:function(x,y){var mp=this.center.coords.usrCoords,p=new _coords.default(_constants.default.COORDS_BY_SCREEN,[x,y],this.board);x=this.Radius();_type.default.isObject(_type.default.evaluate(this.visProp.precision))?(y=this.board._inputDevice,y=_type.default.evaluate(this.visProp.precision[y])):y=this.board.options.precision.hasPoint;var dx=mp[1]-p.usrCoords[1];mp=mp[2]-p.usrCoords[2];mp=Math.sqrt(dx*dx+mp*mp);y+=.5*_type.default.evaluate(this.visProp.strokewidth);
y/=Math.sqrt(this.board.unitX*this.board.unitY);return _type.default.evaluate(this.visProp.hasinnerpoints)?mp<x+y:Math.abs(mp-x)<y},generatePolynomial:function(p){var m1=this.center.symbolic.x,m2=this.center.symbolic.y,g1=p.symbolic.x;p=p.symbolic.y;var rsq=this.generateRadiusSquared();return""===rsq?[]:["(("+g1+")-("+m1+"))^2 + (("+p+")-("+m2+"))^2 - ("+rsq+")"]},generateRadiusSquared:function(){var p1="";if("twoPoints"===this.method){var m1=this.center.symbolic.x;var m2=this.center.symbolic.y;p1=
this.point2.symbolic.x;var p2=this.point2.symbolic.y;p1="(("+p1+")-("+m1+"))^2 + (("+p2+")-("+m2+"))^2"}else"pointRadius"===this.method?_type.default.isNumber(this.radius)&&(p1=(this.radius*this.radius).toString()):"pointLine"===this.method?(p1=this.line.point1.symbolic.x,p2=this.line.point1.symbolic.y,m1=this.line.point2.symbolic.x,m2=this.line.point2.symbolic.y,p1="(("+p1+")-("+m1+"))^2 + (("+p2+")-("+m2+"))^2"):"pointCircle"===this.method&&(p1=this.circle.Radius());return p1},update:function(){if(this.needsUpdate){_type.default.evaluate(this.visProp.trace)&&
this.cloneToBackground(!0);"pointLine"===this.method?this.radius=this.line.point1.coords.distance(_constants.default.COORDS_BY_USER,this.line.point2.coords):"pointCircle"===this.method?this.radius=this.circle.Radius():"pointRadius"===this.method&&(this.radius=this.updateRadius());this.updateStdform();this.updateQuadraticform();var y=this.center.coords.usrCoords[0];var x=this.center.coords.usrCoords[1]/y;y=this.center.coords.usrCoords[2]/y;var r=this.Radius();this.numberPoints=13;this.dataX=[x+r,x+
r,x+.551915024494*r,x,x-.551915024494*r,x-r,x-r,x-r,x-.551915024494*r,x,x+.551915024494*r,x+r,x+r];this.dataY=[y,y+.551915024494*r,y+r,y+r,y+r,y+.551915024494*r,y,y-.551915024494*r,y-r,y-r,y-r,y-.551915024494*r,y];this.bezierDegree=3;for(x=0;x<this.numberPoints;x++)this.points[x]=new _coords.default(_constants.default.COORDS_BY_USER,[this.dataX[x],this.dataY[x]],this.board)}return this},updateQuadraticform:function(){var m=this.center,mX=m.X();m=m.Y();var r=this.Radius();this.quadraticform=[[mX*mX+
m*m-r*r,-mX,-m],[-mX,1,0],[-m,0,1]]},updateStdform:function(){this.stdform[3]=.5;this.stdform[4]=this.Radius();this.stdform[1]=-this.center.coords.usrCoords[1];this.stdform[2]=-this.center.coords.usrCoords[2];isFinite(this.stdform[4])||(this.stdform[0]=_type.default.exists(this.point2)?-(this.stdform[1]*this.point2.coords.usrCoords[1]+this.stdform[2]*this.point2.coords.usrCoords[2]):0);this.normalize()},updateRenderer:function(){if(!this.needsUpdate)return this;this.visPropCalc.visible&&((this.isReal=
!isNaN(this.center.coords.usrCoords[1]+this.center.coords.usrCoords[2]+this.Radius())&&this.center.isReal)||this.updateVisibility(!1));this.visPropCalc.visible&&this.board.renderer.updateEllipse(this);this.hasLabel&&this.visPropCalc.visible&&this.label&&this.label.visPropCalc.visible&&this.isReal&&(this.label.update(),this.board.renderer.updateText(this.label));this.setDisplayRendNode();this.needsUpdate=!1;return this},notifyParents:function(contentStr){_type.default.isString(contentStr)&&_geonext.default.findDependencies(this,
contentStr,this.board)},setRadius:function(r){this.updateRadius=_type.default.createFunction(r,this.board,null,!0);this.board.update();return this},Radius:function(value){return _type.default.exists(value)?(this.setRadius(value),this.Radius()):"twoPoints"===this.method?_type.default.cmpArrays(this.point2.coords.usrCoords,[0,0,0])||_type.default.cmpArrays(this.center.coords.usrCoords,[0,0,0])?NaN:this.center.Dist(this.point2):"pointLine"===this.method||"pointCircle"===this.method?this.radius:"pointRadius"===
this.method?this.updateRadius():NaN},getRadius:function(){_jxg.default.deprecated("Circle.getRadius()","Circle.Radius()");return this.Radius()},getTextAnchor:function(){return this.center.coords},getLabelAnchor:function(){var y=this.Radius();var c=this.center.coords.usrCoords;switch(_type.default.evaluate(this.visProp.label.position)){case "lft":var x=c[1]-y;y=c[2];break;case "llft":x=c[1]-.7071067811865476*y;y=c[2]-.7071067811865476*y;break;case "rt":x=c[1]+y;y=c[2];break;case "lrt":x=c[1]+.7071067811865476*
y;y=c[2]-.7071067811865476*y;break;case "urt":x=c[1]+.7071067811865476*y;y=c[2]+.7071067811865476*y;break;case "top":x=c[1];y=c[2]+y;break;case "bot":x=c[1];y=c[2]-y;break;default:x=c[1]-.7071067811865476*y,y=c[2]+.7071067811865476*y}return new _coords.default(_constants.default.COORDS_BY_USER,[x,y],this.board)},cloneToBackground:function(){var r=this.Radius(),copy={id:this.id+"T"+this.numTraces,elementClass:_constants.default.OBJECT_CLASS_CIRCLE,center:{coords:this.center.coords},Radius:function(){return r},
getRadius:function(){return r},board:this.board,visProp:_type.default.deepCopy(this.visProp,this.visProp.traceattributes,!0)};copy.visProp.layer=this.board.options.layer.trace;this.numTraces++;_type.default.clearVisPropOld(copy);copy.visPropCalc={visible:_type.default.evaluate(copy.visProp.visible)};var er=this.board.renderer.enhancedRendering;this.board.renderer.enhancedRendering=!0;this.board.renderer.drawEllipse(copy);this.board.renderer.enhancedRendering=er;this.traces[copy.id]=copy.rendNode;
return this},addTransform:function(transform){var list=_type.default.isArray(transform)?transform:[transform],len=list.length;for(transform=0;transform<len;transform++)this.center.transformations.push(list[transform]),"twoPoints"===this.method&&this.point2.transformations.push(list[transform]);return this},snapToGrid:function(){var forceIt=_type.default.evaluate(this.visProp.snaptogrid);this.center.handleSnapToGrid(forceIt,!0);"twoPoints"===this.method&&this.point2.handleSnapToGrid(forceIt,!0);return this},
snapToPoints:function(){var forceIt=_type.default.evaluate(this.visProp.snaptopoints);this.center.handleSnapToPoints(forceIt);"twoPoints"===this.method&&this.point2.handleSnapToPoints(forceIt);return this},X:function(t){return this.Radius()*Math.cos(2*t*Math.PI)+this.center.coords.usrCoords[1]},Y:function(t){return this.Radius()*Math.sin(2*t*Math.PI)+this.center.coords.usrCoords[2]},Z:function(t){return 1},minX:function(){return 0},maxX:function(){return 1},Area:function(){var r=this.Radius();return r*
r*Math.PI},bounds:function(){var uc=this.center.coords.usrCoords,r=this.Radius();return[uc[1]-r,uc[2]+r,uc[1]+r,uc[2]-r]},getParents:function(){return 1===this.parents.length?this.parents.concat(this.radius):this.parents}});_jxg.default.createCircle=function(board,parents,attributes){var point_style=["center","point2"];var p=[];var obj=board.select(parents[0]);if(_type.default.isObject(obj)&&obj.elementClass===_constants.default.OBJECT_CLASS_CIRCLE&&_type.default.isTransformationOrArray(parents[1])){var i=
_type.default.copyAttributes(attributes,board.options,"circle");board=_conic.default.createEllipse(board,[obj.center,obj.center,function(){return 2*obj.Radius()}],i);board.addTransform(parents[1]);return board}for(i=0;i<parents.length;i++)if(_type.default.isPointType(board,parents[i])){if(p=p.concat(_type.default.providePoints(board,[parents[i]],attributes,"circle",[point_style[i]])),!1===p[p.length-1])throw Error("JSXGraph: Can't create circle from this type. Please provide a point type.");}else p.push(parents[i]);
i=_type.default.copyAttributes(attributes,board.options,"circle");if(2===p.length&&_type.default.isPoint(p[0])&&_type.default.isPoint(p[1]))board=new _jxg.default.Circle(board,"twoPoints",p[0],p[1],i);else if((_type.default.isNumber(p[0])||_type.default.isFunction(p[0])||_type.default.isString(p[0]))&&_type.default.isPoint(p[1]))board=new _jxg.default.Circle(board,"pointRadius",p[1],p[0],i);else if((_type.default.isNumber(p[1])||_type.default.isFunction(p[1])||_type.default.isString(p[1]))&&_type.default.isPoint(p[0]))board=
new _jxg.default.Circle(board,"pointRadius",p[0],p[1],i);else if(p[0].elementClass===_constants.default.OBJECT_CLASS_CIRCLE&&_type.default.isPoint(p[1]))board=new _jxg.default.Circle(board,"pointCircle",p[1],p[0],i);else if(p[1].elementClass===_constants.default.OBJECT_CLASS_CIRCLE&&_type.default.isPoint(p[0]))board=new _jxg.default.Circle(board,"pointCircle",p[0],p[1],i);else if(p[0].elementClass===_constants.default.OBJECT_CLASS_LINE&&_type.default.isPoint(p[1]))board=new _jxg.default.Circle(board,
"pointLine",p[1],p[0],i);else if(p[1].elementClass===_constants.default.OBJECT_CLASS_LINE&&_type.default.isPoint(p[0]))board=new _jxg.default.Circle(board,"pointLine",p[0],p[1],i);else if(3===parents.length&&_type.default.isPoint(p[0])&&_type.default.isPoint(p[1])&&_type.default.isPoint(p[2]))if(_jxg.default.elements.circumcircle)board=_jxg.default.elements.circumcircle(board,p,i);else throw Error("JSXGraph: Can't create circle with three points. Please include the circumcircle element (element/composition).");
else throw Error("JSXGraph: Can't create circle with parent types '"+typeof parents[0]+"' and '"+typeof parents[1]+"'.\nPossible parent types: [point,point], [point,number], [point,function], [point,circle], [point,point,point], [circle,transformation]");board.isDraggable=!0;board.setParents(p);board.elType="circle";for(i=0;i<p.length;i++)_type.default.isPoint(p[i])&&board.inherits.push(p[i]);return board};_jxg.default.registerElement("circle",_jxg.default.createCircle);exports.default={Circle:_jxg.default.Circle,
createCircle:_jxg.default.createCircle}}
//# sourceMappingURL=module$node_modules$$mentatcollective$jsxgraph$src$base$circle.js.map
