{
"version":3,
"file":"module$node_modules$lodash$isSet.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,gCAAA,CAAqD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACzFC,MAAAA,CAAYH,OAAA,CAAQ,uCAAR,CACZI,QAAAA,CAAYJ,OAAA,CAAQ,uCAAR,CAuBZK,QAAAA,CAAQ,CAnBRC,OAmBQ,EAtBRC,OAsBQ,CAtBGP,OAAA,CAAQ,sCAAR,CAsBH,GAnBgBO,OAASF,CAAAA,KAmBzB,EAAYD,OAAA,CAAUE,OAAV,CAAZ,CAAmCH,MAE/CF,OAAOC,CAAAA,OAAP,CAAiBG,OA3B4E;",
"sources":["node_modules/lodash/isSet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$isSet\"] = function(global,require,module,exports) {\nvar baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseIsSet","baseUnary","isSet","nodeIsSet","nodeUtil"]
}
