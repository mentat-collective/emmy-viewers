{
"version":3,
"file":"module$node_modules$mathbox$build$esm$primitives$types$present$present.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/mathbox/build/esm/primitives/types/present/present.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathbox$build$esm$primitives$types$present$present\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Present = void 0;\n\nvar _parent = require(\"../base/parent.js\");\n\n// TODO: This file was created by bulk-decaffeinate.\n// Sanity-check the conversion and remove this comment.\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS104: Avoid inline assignments\n * DS202: Simplify dynamic range loops\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS206: Consider reworking classes to avoid initClass\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass Present extends _parent.Parent {\n  static initClass() {\n    this.traits = [\"node\", \"present\"];\n  }\n\n  init() {}\n\n  make() {\n    this.nodes = [];\n    this.steps = [];\n    this.length = 0;\n    this.last = [];\n    this.index = 0;\n    this.dirty = [];\n\n    this._listen(\"root\", \"root.update\", this.update);\n\n    return this._compute(\"present.length\", () => this.length);\n  }\n\n  adopt(controller) {\n    const {\n      node\n    } = controller;\n\n    if (this.nodes.indexOf(controller) < 0) {\n      this.nodes.push(node);\n    }\n\n    return this.dirty.push(controller);\n  }\n\n  unadopt(controller) {\n    this.nodes = this.nodes.filter(x => x !== controller);\n    return this.dirty.push(controller);\n  }\n\n  update() {\n    if (!this.dirty.length) {\n      return;\n    }\n\n    for (const controller of Array.from(this.dirty)) {\n      this.slideReset(controller);\n    }\n\n    [this.steps, this.indices] = Array.from(this.process(this.nodes));\n    this.length = this.steps.length;\n    this.index = null;\n    this.go(this.props.index);\n    return this.dirty = [];\n  }\n\n  slideLatch(controller, enabled, step) {\n    return controller.slideLatch(enabled, step);\n  }\n\n  slideStep(controller, index, step) {\n    return controller.slideStep(this.mapIndex(controller, index), step);\n  }\n\n  slideRelease(controller, _step) {\n    return controller.slideRelease();\n  }\n\n  slideReset(controller) {\n    return controller.slideReset();\n  }\n\n  mapIndex(controller, index) {\n    return index - this.indices[controller.node._id];\n  }\n\n  process(nodes) {\n    // Grab nodes' path of slide parents\n    const slides = nodes => Array.from(nodes).map(el => parents(el).filter(isSlide));\n\n    const traverse = map => el => (() => {\n      let ref, ref1;\n      const result = [];\n\n      while (el && ([el, ref] = Array.from(ref1 = [map(el), el]), ref1)) {\n        result.push(ref);\n      }\n\n      return result;\n    })();\n\n    const parents = traverse(function (el) {\n      if (el.parent.traits.hash.present) {\n        return null;\n      } else {\n        return el.parent;\n      }\n    }); // Helpers\n\n    const isSlide = el => nodes.indexOf(el) >= 0; // Order paths (leaf -> parent slide -> ...)\n\n\n    const order = paths => paths.sort(function (a, b) {\n      // Path lengths\n      const c = a.length;\n      const d = b.length; // Compare from outside in\n\n      let e = Math.min(c, d);\n\n      for (let i = 1, end = e, asc = 1 <= end; asc ? i <= end : i >= end; asc ? i++ : i--) {\n        // inclusive end\n        const nodeA = a[c - i];\n        const nodeB = b[d - i]; // Explicit sibling order (natural)\n\n        const f = nodeA.props.order;\n        const g = nodeB.props.order;\n\n        if (f != null || g != null) {\n          if (f != null && g != null && (e = f - g) !== 0) {\n            return e;\n          }\n\n          if (f != null) {\n            return -1;\n          }\n\n          if (g != null) {\n            return 1;\n          }\n        } // Document sibling order (inverted)\n\n\n        if (nodeB.order !== nodeA.order) {\n          return nodeB.order - nodeA.order;\n        }\n      } // Different tree level\n\n\n      e = c - d;\n\n      if (e !== 0) {\n        return e;\n      } // Equal\n\n\n      return 0;\n    });\n\n    const split = function (steps) {\n      const relative = [];\n      const absolute = [];\n\n      for (const step of Array.from(steps)) {\n        (step[0].props.steps != null ? relative : absolute).push(step);\n      }\n\n      return [relative, absolute];\n    };\n\n    const expand = function (lists) {\n      let step;\n      const [relative, absolute] = Array.from(lists);\n      const limit = 100;\n      const indices = {};\n      let steps = [];\n\n      const slide = function (step, index) {\n        let node;\n        const {\n          props\n        } = node = step[0];\n        const parent = step[1];\n        const parentIndex = parent != null ? indices[parent._id] : 0; //throw \"parent index missing\" if !parentIndex?\n\n        const childIndex = index;\n        let from = props.from != null ? parentIndex + props.from : childIndex - props.early;\n        let to = props.to != null ? parentIndex + props.to : childIndex + props.steps + props.late;\n        from = Math.max(0, from);\n        to = Math.min(limit, to);\n\n        if (indices[node._id] == null) {\n          indices[node._id] = from;\n        }\n\n        for (let i = from, end = to, asc = from <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n          steps[i] = (steps[i] != null ? steps[i] : steps[i] = []).concat(step);\n        }\n\n        return props.steps;\n      };\n\n      let i = 0;\n\n      for (step of Array.from(relative)) {\n        i += slide(step, i);\n      }\n\n      for (step of Array.from(absolute)) {\n        slide(step, 0);\n      } // Dedupe and order\n\n\n      steps = (() => {\n        const result = [];\n\n        for (step of Array.from(steps)) {\n          result.push(finalize(dedupe(step)));\n        }\n\n        return result;\n      })();\n\n      return [steps, indices];\n    }; // Remove duplicates\n\n\n    const dedupe = function (step) {\n      if (step) {\n        return (() => {\n          const result = [];\n\n          for (let i = 0; i < step.length; i++) {\n            const node = step[i];\n\n            if (step.indexOf(node) === i) {\n              result.push(node);\n            }\n          }\n\n          return result;\n        })();\n      } else {\n        return [];\n      }\n    }; // Finalize individual step by document order\n\n\n    const finalize = step => step.sort((a, b) => a.order - b.order);\n\n    const paths = slides(nodes);\n    const steps = order(paths);\n    return expand(split(steps));\n  }\n\n  go(index) {\n    // Pad with an empty slide before and after for initial enter/final exit\n    let left;\n    let node;\n    index = Math.max(0, Math.min(this.length + 1, +index || 0));\n    const active = (left = this.steps[index - 1]) != null ? left : [];\n    const step = this.props.directed ? index - this.index : 1;\n    this.index = index;\n\n    const enter = (() => {\n      const result = [];\n\n      for (node of Array.from(active)) {\n        if (this.last.indexOf(node) < 0) {\n          result.push(node);\n        }\n      }\n\n      return result;\n    })();\n\n    const exit = (() => {\n      const result1 = [];\n\n      for (node of Array.from(this.last)) {\n        if (active.indexOf(node) < 0) {\n          result1.push(node);\n        }\n      }\n\n      return result1;\n    })();\n\n    const stay = (() => {\n      const result2 = [];\n\n      for (node of Array.from(active)) {\n        if (enter.indexOf(node) < 0 && exit.indexOf(node) < 0) {\n          result2.push(node);\n        }\n      }\n\n      return result2;\n    })();\n\n    const ascend = nodes => nodes.sort((a, b) => a.order - b.order);\n\n    const descend = nodes => nodes.sort((a, b) => b.order - a.order); //const toStr = (x) => x.toString();\n    //console.log '============================================================'\n    //console.log 'go',  index, {enter: enter.map(toStr), stay: stay.map(toStr), exit: exit.map(toStr)}\n\n\n    for (node of Array.from(ascend(enter))) {\n      this.slideLatch(node.controller, true, step);\n    }\n\n    for (node of Array.from(ascend(stay))) {\n      this.slideLatch(node.controller, null, step);\n    }\n\n    for (node of Array.from(ascend(exit))) {\n      this.slideLatch(node.controller, false, step);\n    }\n\n    for (node of Array.from(enter)) {\n      this.slideStep(node.controller, index, step);\n    }\n\n    for (node of Array.from(stay)) {\n      this.slideStep(node.controller, index, step);\n    }\n\n    for (node of Array.from(exit)) {\n      this.slideStep(node.controller, index, step);\n    }\n\n    for (node of Array.from(descend(enter))) {\n      this.slideRelease(node.controller);\n    }\n\n    for (node of Array.from(descend(stay))) {\n      this.slideRelease(node.controller);\n    }\n\n    for (node of Array.from(descend(exit))) {\n      this.slideRelease(node.controller);\n    }\n\n    this.last = active;\n  }\n\n  change(changed, touched, init) {\n    if (changed[\"present.index\"] || init) {\n      return this.go(this.props.index);\n    }\n  }\n\n}\n\nexports.Present = Present;\nPresent.initClass();\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Present","_parent","Parent","initClass","traits","init","make","nodes","steps","length","last","index","dirty","_listen","update","_compute","adopt","controller","node","indexOf","push","unadopt","filter","x","Array","from","slideReset","indices","process","go","props","slideLatch","enabled","step","slideStep","mapIndex","slideRelease","_step","_id","parents","traverse","map","el","ref","ref1","result","parent","hash","present","isSlide","finalize","sort","a","b","order","expand","lists","relative","absolute","slide","parentIndex","early","to","late","Math","max","min","limit","i","end","asc","concat","split","paths","c","d","e","nodeA","nodeB","f","g","slides","left","active","directed","enter","exit","result1","stay","result2","ascend","descend","change","changed","touched"]
}
