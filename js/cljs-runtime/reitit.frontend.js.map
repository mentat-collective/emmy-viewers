{"version":3,"sources":["reitit/frontend.cljs"],"mappings":"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","names":["reitit.frontend/query-param","q","k","vs","cljs.core/vec","reitit.frontend/query-params","uri","cljs.core.map","p1__77066#","cljs.core.juxt","cljs.core/keyword","cljs.core.into","reitit.frontend/match-by-path","router","path","js/goog.Uri","temp__5751__auto__","match","reitit.core/match-by-path","cljs.core.assoc","parameters","or__4253__auto__","reitit.coercion/coerce!","var_args","G__77080","reitit.frontend/match-by-name","js/Error","name","reitit.frontend.match_by_name","path-params","reitit.core/match-by-name","G__77082","reitit.frontend/router","raw-routes","reitit.frontend.router","opts","reitit.core.router","cljs.core.merge","reitit.coercion/compile-request-coercers","G__77086","reitit.frontend/match-by-name!","reitit.frontend.match_by_name_BANG_","reitit.core/partial-match?","p1__77084#","cljs.core/every?","cljs.core/contains?","defined","cljs.core/keys","cljs.core/set","missing","clojure.set.difference","js/console.warn"],"sourcesContent":["(ns reitit.frontend\n  (:require [clojure.set :as set]\n            [reitit.coercion :as coercion]\n            [reitit.core :as r])\n  (:import goog.Uri\n           goog.Uri.QueryData))\n\n(defn- query-param [^QueryData q k]\n  (let [vs (.getValues q k)]\n    (if (< (alength vs) 2)\n      (aget vs 0)\n      (vec vs))))\n\n(defn query-params\n  \"Given goog.Uri, read query parameters into Clojure map.\"\n  [^Uri uri]\n  (let [q (.getQueryData uri)]\n    (->> q\n         (.getKeys)\n         (map (juxt keyword #(query-param q %)))\n         (into {}))))\n\n(defn match-by-path\n  \"Given routing tree and current path, return match with possibly\n  coerced parameters. Return nil if no match found.\"\n  [router path]\n  (let [uri (.parse Uri path)]\n    (if-let [match (r/match-by-path router (.getPath uri))]\n      (let [q (query-params uri)\n            match (assoc match :query-params q)\n            ;; Return uncoerced values if coercion is not enabled - so\n            ;; that tha parameters are always accessible from same property.\n            parameters (or (coercion/coerce! match)\n                           {:path (:path-params match)\n                            :query q})]\n        (assoc match :parameters parameters)))))\n\n(defn match-by-name\n  \"Given a router, route name and optionally path-parameters,\n  will return a Match (exact match), PartialMatch (missing path-parameters)\n  or `nil` (no match).\"\n  ([router name]\n   (match-by-name router name {}))\n  ([router name path-params]\n   (r/match-by-name router name path-params)))\n\n(defn router\n  \"Create a `reitit.core.router` from raw route data and optionally an options map.\n  Enables request coercion. See [[reitit.core/router]] for details on options.\"\n  ([raw-routes]\n   (router raw-routes {}))\n  ([raw-routes opts]\n   (r/router raw-routes (merge {:compile coercion/compile-request-coercers} opts))))\n\n(defn match-by-name!\n  \"Logs problems using console.warn\"\n  ([router name]\n   (match-by-name! router name {}))\n  ([router name path-params]\n   (if-let [match (match-by-name router name path-params)]\n     (if (r/partial-match? match)\n       (if (every? #(contains? path-params %) (:required match))\n         match\n         (let [defined (-> path-params keys set)\n               missing (set/difference (:required match) defined)]\n           (js/console.warn\n             \"missing path-params for route\" name\n             {:template (:template match)\n              :missing missing\n              :path-params path-params\n              :required (:required match)})\n           nil))\n       match)\n     (do (js/console.warn \"missing route\" name)\n         nil))))\n"]}