{"version":3,"sources":["sicmutils/matrix.cljc"],"mappings":"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A,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,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","names":["cljs.core.derive","cljs.core/PROTOCOL_SENTINEL","unused__20572__auto__","self__","G__86924","js/Error","args86920","cljs.core/aclone","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sicmutils.matrix/Matrix","sicmutils.matrix/->Matrix","r","c","v","_","p1__86855#","cljs.core/every?","sicmutils.value/zero?","m","sicmutils.matrix/identity?","this","sicmutils.matrix/fmap","sicmutils.value/zero-like","sicmutils.matrix/identity-like","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core._EQ_","cljs.core.map","cljs.core.comp","sicmutils.value/freeze","cljs.core/first","p1__86857#","sicmutils.value/exact?","cljs.core/boolean","cljs.core/some","sicmutils.differential/perturbed?","M","old","new","G__86987","p1__86858#","G__86988","sicmutils.differential/replace-tag","tag","G__86995","p1__86859#","G__86996","sicmutils.differential/extract-tangent","cljs.core.transduce","sicmutils.function/seq-arity","sicmutils.function/combine-arities","cljs.core.pr_str","x","writer","cljs.core.write_all","that","sicmutils.matrix/m:=","cljs.core/-seq","cljs.core/-count","n","cljs.core/-nth","not-found","k","cljs.core/-lookup","entry","cljs.core/-assoc","cljs.core/-contains-key?","cljs.core/-find","a","cljs.core.mapv","row","p1__86887#","b","p1__86888#","cx","p1__86889#","d","p1__86890#","e","p1__86891#","f","p1__86898#","g","p1__86899#","h","p1__86900#","i","p1__86901#","j","p1__86904#","p1__86905#","l","p1__86906#","p1__86907#","p1__86908#","o","p1__86910#","p","p1__86911#","q","p1__86912#","rx","p1__86913#","s","p1__86914#","t","p1__86915#","rest","p1__86916#","cljs.core.apply","sicmutils.matrix/matrix?","sicmutils.matrix/num-rows","sicmutils.util/illegal","sicmutils.matrix/num-cols","sicmutils.matrix/matrix->vector","cljs.core/vector?","sicmutils.matrix/square?","sicmutils.matrix/column?","sicmutils.matrix/row?","and__4251__auto__","sicmutils.value/=","sicmutils.matrix/matrix=scalar","G__87000","G__87001","sicmutils.matrix/make-diagonal","sicmutils.matrix/scalar=matrix","G__87002","G__87003","var_args","G__87005","sicmutils.matrix/generate","sicmutils.matrix.generate","cljs.core.range","G__87008","sicmutils.matrix/literal-matrix","sym","nrows","sicmutils.matrix.literal_matrix","ncols","prefix","cljs.core.symbol","sicmutils.matrix/literal-column-matrix","sicmutils.matrix/literal-row-matrix","sicmutils.matrix/get-in","is","cljs.core.get_in","cljs.core/count","sicmutils.matrix/some","cljs.core/flatten","p1__87014#","sicmutils.matrix/fmap-indexed","cljs.core.into","cljs.core.map_indexed","elem","new-rows","process-row","sicmutils.matrix/well-formed?","vs","counts","p1__87015#","cljs.core/next","sicmutils.matrix/by-rows*","rows","cljs.core/vec","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.matrix/by-rows","seq87016","self__4852__auto__","sicmutils.matrix/by-cols*","cols","cljs.core/mapv","cljs.core/vector","sicmutils.matrix/by-cols","seq87017","sicmutils.matrix/row*","xs","cljs.core/not-empty","sicmutils.matrix/row","seq87019","sicmutils.matrix/column*","sicmutils.matrix/column","seq87026","sicmutils.matrix/transpose","p1__87028#","p2__87027#","G__87031","sicmutils.matrix/->structure","sicmutils.matrix.__GT_structure","outer-orientation","inner-orientation","t?","sicmutils.structure/valid-orientation?","m'","sicmutils.structure/make","p1__87029#","sicmutils.matrix/seq->","sicmutils.structure/up*","sicmutils.matrix/mul","ra","rb","ca","cb","p1__87033#","p2__87034#","cljs.core.reduce","sicmutils.generic/+","iter__4652__auto__","s__87037","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__87039","cljs.core/chunk-buffer","i__87038","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__87036","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","sicmutils.generic._STAR_","sicmutils.matrix/scalar*matrix","p1__87043#","sicmutils.matrix/matrix*scalar","p1__87052#","sicmutils.matrix/elementwise","cljs.core.not_EQ_","p1__87056#","p2__87057#","G__87065","G__87066","sicmutils.matrix/two-tensor->","cont","temp__5751__auto__","map__87072","cljs.core/--destructure-map","cljs.core.get","inner-size","outer-size","sicmutils.structure/two-tensor-info","vec__87073","cljs.core.nth","transpose?","major-size","minor-size","path","restore-fn","sicmutils.matrix/two-tensor-operation","->s","G__87092","sicmutils.matrix/structure->matrix","sicmutils.matrix/M*u","u","row-i","G__87107","G__87108","G__87109","sicmutils.util.aggregate/generic-sum","sicmutils.matrix/d*M","sicmutils.structure/down*","G__87113","G__87114","G__87115","sicmutils.matrix/*careful-conversion*","G__87117","sicmutils.matrix/s->m","ms","rs","ls","sicmutils.structure/compatible-shape","sicmutils.matrix.s__GT_m","sicmutils.value/numerical?","ndowns","sicmutils.structure/dimension","nups","sicmutils.structure.unflatten","sicmutils.structure.basis_unit","sicmutils.matrix/as-matrix","F","sicmutils.matrix/nth-row","sicmutils.matrix/nth-col","p1__87124#","sicmutils.matrix/diagonal","p1__87125#","sicmutils.matrix/up->column-matrix","sicmutils.structure/up?","sicmutils.matrix/column-matrix->up","sicmutils.matrix/column-matrix->vector","sicmutils.matrix/down->row-matrix","sicmutils.structure/down?","sicmutils.matrix.by_rows","sicmutils.structure/structure->vector","sicmutils.matrix/row-matrix->down","sicmutils.matrix/row-matrix->vector","sicmutils.matrix/m->s","col-shape","s__87138","b__87140","i__87139","iter__87137","G__87160","sicmutils.matrix/s:transpose","sicmutils.matrix.s_COLON_transpose","sicmutils.matrix/s:transpose-orientation","ret","sicmutils.structure/orientation","sicmutils.structure/transpose","sicmutils.matrix/s:invert","sicmutils.matrix/invert","sicmutils.matrix/delete","cljs.core.subvec","G__87161","G__87162","sicmutils.matrix/with-substituted-row","cljs.core.assoc","sicmutils.matrix/submatrix","lowrow","hirow","lowcol","hicol","sicmutils.structure/structure?","sicmutils.matrix/without","p1__87163#","sicmutils.matrix/checkerboard-negate","cljs.core/even?","sicmutils.generic/negate","sicmutils.matrix/dimension","sicmutils.matrix/trace","p1__87164#","sicmutils.matrix/general-determinant","add","sub","mul","zero?","zero","c-det","cljs.core.atom","p__87174","vec__87175","seq__87176","first__87177","col","active-cols","cljs.core/not","idx","remaining-cols","answer","term","without-i","delta","G__87178","G__87179","G__87181","G__87182","fexpr__87180","cljs.core/deref","cljs.core/reset!","cljs.core/memoize","c-det*","G__87184","G__87185","fexpr__87183","sicmutils.matrix/determinant","sicmutils.generic/-","sicmutils.generic/*","sicmutils.value/numeric-zero?","sicmutils.matrix/cofactors","vec__87186","vec__87189","vec__87192","sicmutils.matrix/classical-adjoint-formula","div","det","A","dim","G__87195","-d","denom","G__87196","G__87197","sicmutils.generic//","sicmutils.matrix/m-div-m","m1","m2","sicmutils.matrix/m-div-c","sicmutils.generic/invert","sicmutils.matrix/c-div-m","G__87199","sicmutils.matrix/s:inverse","sicmutils.matrix.s_COLON_inverse","sicmutils.matrix/s:solve-linear-left","product","cp","cr","sicmutils.structure/s:*","sicmutils.matrix/s:solve-linear-right","sicmutils.matrix/s:divide-by-structure","rv","G__87201","sicmutils.matrix/make-zero","sicmutils.matrix.make_zero","cljs.core/constantly","sicmutils.matrix/I","sicmutils.structure/kronecker","sicmutils.value/one-like","cljs.core/true?","s__87203","xs__6308__auto__","iterys__4648__auto__","s__87205","b__87207","i__87206","iter__87204","fs__4649__auto__","iter__87202","sicmutils.value/one?","G__87211","p1__87208#","p2__87209#","sicmutils.matrix/diagonal?","s__87213","s__87215","b__87217","i__87216","iter__87214","iter__87212","sicmutils.matrix/symmetric?","sicmutils.generic/simplify","sicmutils.generic/sub","sicmutils.matrix/antisymmetric?","sicmutils.generic/add","G__87219","sicmutils.matrix/characteristic-polynomial","sicmutils.matrix.characteristic_polynomial","sicmutils.polynomial.identity","Ix","sicmutils.matrix.make_diagonal","sicmutils.generic._","sicmutils.matrix/cramers-rule","bv","bn","At","G__87220","G__87221","sicmutils.matrix/solve","sicmutils.matrix/rsolve","sicmutils.generic/mul","sicmutils.generic/div","sicmutils.generic/exp","sicmutils.series/exp-series","sicmutils.generic/cos","sicmutils.series/cos-series","sicmutils.generic/sin","sicmutils.series/sin-series","sicmutils.generic/tan","sicmutils.series/tan-series","sicmutils.generic/sec","sicmutils.series/sec-series","sicmutils.generic/acos","sicmutils.series/acos-series","sicmutils.generic/asin","sicmutils.series/asin-series","sicmutils.generic/atan","sicmutils.series/atan-series","sicmutils.generic/acot","sicmutils.series/acot-series","sicmutils.generic/cosh","sicmutils.series/cosh-series","sicmutils.generic/sinh","sicmutils.series/sinh-series","sicmutils.generic/tanh","sicmutils.series/tanh-series","sicmutils.generic/asinh","sicmutils.series/asinh-series","sicmutils.generic/atanh","sicmutils.series/atanh-series","sicmutils.generic/make-rectangular","sicmutils.generic/make-polar","sicmutils.generic/real-part","sicmutils.generic/imag-part","sicmutils.generic/conjugate","sicmutils.generic/transpose","sicmutils.generic/determinant","sicmutils.generic/trace","sicmutils.generic/solve-linear","sicmutils.structure/structure*scalar","sicmutils.generic/solve-linear-right","sicmutils.structure/scalar*structure","sicmutils.generic/dimension","sicmutils.generic/dot-product","sicmutils.generic/inner-product","sicmutils.generic/cross-product","sicmutils.generic/outer-product","sicmutils.generic/partial-derivative","sicmutils.value/seqtype","selectors","p1__87234#","cljs.core/chunk-first"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.matrix\n  \"This namespace contains an implementation of a [[Matrix]] datatype and various\n  operations for creating and working with [[Matrix]] instances.\n\n  [[sicmutils.matrix]] also extends many SICMUtils generic operations\n  to the [[Matrix]] datatype.\"\n  (:refer-clojure :exclude [get-in some])\n  (:require [clojure.core :as core]\n            [sicmutils.differential :as d]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g]\n            [sicmutils.polynomial :as poly]\n            [sicmutils.series :as series]\n            [sicmutils.structure :as s]\n            [sicmutils.util :as u]\n            [sicmutils.util.aggregate :as ua]\n            [sicmutils.value :as v])\n  #?(:clj\n     (:import (clojure.lang Associative AFn IFn Sequential))))\n\n(declare fmap identity-like identity? m:=)\n\n(derive ::square-matrix ::matrix)\n(derive ::column-matrix ::matrix)\n(derive ::row-matrix ::matrix)\n(derive ::matrix ::f/cofunction)\n\n(deftype Matrix [r c v]\n  v/Value\n  (zero? [_] (every? #(every? v/zero? %) v))\n  (one? [_] false)\n  (identity? [m] (identity? m))\n  (zero-like [this] (fmap v/zero-like this))\n  (one-like [this] (identity-like this))\n  (identity-like [this] (identity-like this))\n\n  (freeze [_] (if (= c 1)\n                `(~'column-matrix ~@(map (comp v/freeze first) v))\n                `(~'matrix-by-rows ~@(map v/freeze v))))\n  (exact? [_] (every? #(every? v/exact? %) v))\n  (kind [_] (cond (= r c) ::square-matrix\n                  (= r 1) ::row-matrix\n                  (= c 1) ::column-matrix\n                  :else ::matrix))\n\n  d/IPerturbed\n  (perturbed? [_] (boolean (core/some d/perturbed? v)))\n  (replace-tag [M old new] (fmap #(d/replace-tag % old new) M))\n  (extract-tangent [M tag] (fmap #(d/extract-tangent % tag) M))\n\n  f/IArity\n  (arity [_] (transduce (map f/seq-arity) f/combine-arities v))\n\n  #?@(:clj\n      [Object\n       (equals [this that] (m:= this that))\n       (toString [_] (pr-str v))\n\n       Sequential\n\n       Associative\n       (assoc [_ k entry] (Matrix. r c (assoc v k entry)))\n       (containsKey [_ k] (contains? v k))\n       (entryAt [_ k] (.entryAt ^Associative v k))\n       (count [_] (count v))\n       (seq [_] (seq v))\n       (valAt [_ key] (get v key))\n       (valAt [_ key default] (get v key default))\n       (empty [this] (fmap v/zero-like this))\n       (equiv [this that] (m:= this that))\n\n       IFn\n       (invoke [_ a]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a) row)) v)))\n       (invoke [_ a b]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b) row)) v)))\n       (invoke [_ a b cx]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx) row)) v)))\n       (invoke [_ a b cx d]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d) row)) v)))\n       (invoke [_ a b cx d e]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e) row)) v)))\n       (invoke [_ a b cx d e f]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f) row)) v)))\n       (invoke [_ a b cx d e f g]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g) row)) v)))\n       (invoke [_ a b cx d e f g h]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h) row)) v)))\n       (invoke [_ a b cx d e f g h i]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i) row)) v)))\n       (invoke [_ a b cx d e f g h i j]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j) row)) v)))\n       (invoke [_ a b cx d e f g h i j k]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k) row)) v)))\n       (invoke [_ a b cx d e f g h i j k l]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l) row)) v)))\n       (invoke [_ a b cx d e f g h i j k l m]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m) row)) v)))\n       (invoke [_ a b cx d e f g h i j k l m n]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n) row)) v)))\n       (invoke [_ a b cx d e f g h i j k l m n o]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o) row)) v)))\n       (invoke [_ a b cx d e f g h i j k l m n o p]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o p) row)) v)))\n       (invoke [_ a b cx d e f g h i j k l m n o p q]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o p q) row)) v)))\n       (invoke [_ a b cx d e f g h i j k l m n o p q rx]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o p q rx) row)) v)))\n       (invoke [_ a b cx d e f g h i j k l m n o p q rx s]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o p q rx s) row)) v)))\n       (invoke [_ a b cx d e f g h i j k l m n o p q rx s t]\n               (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o p q rx s t) row)) v)))\n       (invoke [_ a b cx d e f g h i j k l m n o p q rx s t rest]\n               (Matrix. r c (mapv (fn [row] (mapv #(apply % a b cx d e f g h i j k l m n o p q rx s t rest) row)) v)))\n       (applyTo [m xs]\n                (AFn/applyToHelper m xs))]\n\n      :cljs\n      [Object\n       (toString [_] (pr-str v))\n\n       IPrintWithWriter\n       (-pr-writer [x writer _]\n                   (write-all writer\n                              \"#object[sicmutils.structure.Matrix \\\"\"\n                              (.toString x)\n                              \"\\\"]\"))\n\n       IEmptyableCollection\n       (-empty [this] (v/zero-like this))\n\n       ISequential\n\n       IEquiv\n       (-equiv [this that] (m:= this that))\n\n       ISeqable\n       (-seq [_] (-seq v))\n\n       ICounted\n       (-count [_] (-count v))\n\n       IIndexed\n       (-nth [_ n] (-nth v n))\n       (-nth [_ n not-found] (-nth v n not-found))\n\n       ILookup\n       (-lookup [_ k] (-lookup v k))\n       (-lookup [_ k not-found] (-lookup v k not-found))\n\n       IAssociative\n       (-assoc [_ k entry] (Matrix. r c (-assoc v k entry)))\n       (-contains-key? [_ k] (-contains-key? v k))\n\n       IFind\n       (-find [_ n] (-find v n))\n\n       IFn\n       (-invoke [_ a]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a) row)) v)))\n       (-invoke [_ a b]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b) row)) v)))\n       (-invoke [_ a b cx]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx) row)) v)))\n       (-invoke [_ a b cx d]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d) row)) v)))\n       (-invoke [_ a b cx d e]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e) row)) v)))\n       (-invoke [_ a b cx d e f]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f) row)) v)))\n       (-invoke [_ a b cx d e f g]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g) row)) v)))\n       (-invoke [_ a b cx d e f g h]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h) row)) v)))\n       (-invoke [_ a b cx d e f g h i]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i) row)) v)))\n       (-invoke [_ a b cx d e f g h i j]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k l]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k l m]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k l m n]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k l m n o]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k l m n o p]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o p) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k l m n o p q]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o p q) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k l m n o p q rx]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o p q rx) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k l m n o p q rx s]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o p q rx s) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k l m n o p q rx s t]\n                (Matrix. r c (mapv (fn [row] (mapv #(% a b cx d e f g h i j k l m n o p q rx s t) row)) v)))\n       (-invoke [_ a b cx d e f g h i j k l m n o p q rx s t rest]\n                (Matrix. r c (mapv (fn [row] (mapv #(apply % a b cx d e f g h i j k l m n o p q rx s t rest) row)) v)))]))\n\n(defn matrix?\n  \"Returns true if the supplied `m` is an instance of [[Matrix]], false\n  otherwise.\"\n  [m]\n  (instance? Matrix m))\n\n(defn num-rows\n  \"Returns the number of rows of the supplied matrix `m`. Throws if a\n  non-matrix is supplied.\"\n  [m]\n  (if (matrix? m)\n    (.-r ^Matrix m)\n    (u/illegal (str \"non-matrix supplied: \" m))))\n\n(defn num-cols\n  \"Returns the number of columns of the supplied matrix `m`. Throws if a\n  non-matrix is supplied.\"\n  [m]\n  (if (matrix? m)\n    (.-c ^Matrix m)\n    (u/illegal (str \"non-matrix supplied: \" m))))\n\n(defn matrix->vector\n  \"If `m` is already a vector, acts as identity. Else, returns the matrix as a\n  vector of rows (or throws if neither of these types is passed).\"\n  [m]\n  (cond (vector? m) m\n        (matrix? m) (.-v ^Matrix m)\n        :else\n        (u/illegal (str \"non-matrix supplied: \" m))))\n\n(defn square?\n  \"Returns true if `m` is a square matrix, false otherwise.\"\n  [m]\n  (and (matrix? m)\n       (= (num-rows m)\n          (num-cols m))))\n\n(defn column?\n  \"Returns true if `m` is a matrix with a single column (a 'column matrix'),\n  false otherwise.\"\n  [m]\n  (and (matrix? m)\n       (= (num-cols m) 1)))\n\n(defn row?\n  \"Returns true if `m` is a matrix with a single row (a 'row matrix'), false\n  otherwise.\"\n  [m]\n  (and (matrix? m)\n       (= (num-rows m) 1)))\n\n(defn- m:=\n  \"Returns true if the matrices `this` and `that` are of identical shape and\n  return `v/=` for all entries, false otherwise.\"\n  [^Matrix this that]\n  (and (instance? Matrix that)\n       (let [^Matrix m that]\n         (and (= (.-r this) (.-r m))\n              (= (.-c this) (.-c m))\n              (v/= (.-v this) (.-v m))))))\n\n(declare make-diagonal)\n\n(defn- matrix=scalar\n  \"Returns true if the matrix `m` is a diagonal matrix with all diagonal elements\n  equal to `c`, false otherwise.\"\n  [m c]\n  (and (square? m)\n       (m:= m (make-diagonal (num-rows m) c))))\n\n(defn- scalar=matrix\n  \"Returns true if the matrix `m` is a diagonal matrix with all diagonal elements\n  equal to `c`, false otherwise.\"\n  [c m]\n  (and (square? m)\n       (m:= (make-diagonal (num-rows m) c) m)))\n\n(defn generate\n  \"Returns a matrix with `r` rows and `c` columns, whose entries are generated by\n  the supplied function `f`.\n\n  If you only supply one dimension `n` the returned matrix will be square.\n\n  The entry in the `i`th row and `j`-th column is `(f i j)`.\"\n  ([n f]\n   (generate n n f))\n  ([r c f]\n   (->Matrix r c\n             (mapv (fn [i]\n                     (mapv (fn [j]\n                             (f i j))\n                           (range c)))\n                   (range r)))))\n\n(defn literal-matrix\n  \"Generates a `nrows` x `ncols` matrix of symbolic entries, each prefixed by the\n  supplied symbol `sym`.\n\n  If `ncols` (the third argument) is not supplied, returns a square matrix of\n  size `nrows` x `nrows`.\n\n  NOTE: The symbols in the returned matrix record their Einstein-notation path\n  into the structure that this matrix represents; a `down` of `up` columns. This\n  means that the returned indices embedded in the symbols look flipped, `ji` vs\n  `ij`.\n\n  For example:\n\n  ```clojure\n  (= (literal-matrix 'x 2 2)\n     (by-rows ['x_0\u21910 'x_1\u21910]\n              ['x_0\u21911 'x_1\u21911]))\n  ```\"\n  ([sym nrows]\n   (literal-matrix sym nrows nrows))\n  ([sym nrows ncols]\n   (let [prefix (str sym \"_\")]\n     (generate nrows ncols\n               (fn [i j]\n                 (symbol (str prefix j \"\u2191\" i)))))))\n\n(defn literal-column-matrix\n  \"Returns a column matrix of `nrows` symbolic entries, each prefixed by the\n  supplied symbol `sym`.\n\n  For example:\n\n  ```clojure\n  (= (literal-column-matrix 'x 3)\n     (by-cols ['x\u21910 'x\u21911 'x\u21912]))\n  ```\"\n  [sym nrows]\n  (generate nrows 1\n            (fn [i _]\n              (symbol\n               (str sym \"\u2191\" i)))))\n\n(defn literal-row-matrix\n  \"Returns a row matrix of `ncols` symbolic entries, each prefixed by the\n  supplied symbol `sym`.\n\n  For example:\n\n  ```clojure\n  (= (literal-row-matrix 'x 3)\n     (by-rows ['x_0 'x_1 'x_2]))\n  ```\"\n  [sym ncols]\n  (generate 1 ncols\n            (fn [_ j]\n              (symbol\n               (str sym \"_\" j)))))\n\n(defn get-in\n  \"Like [[clojure.core/get-in]] for matrices, but obeying the scmutils convention:\n  only one index is required to get an unboxed element from a column vector.\n\n  NOTE that this is perhaps an unprincipled exception...\"\n  [m is]\n  (let [e (core/get-in m is)]\n    (if (and (column? m)\n             (= 1 (count is)))\n      (e 0)\n      e)))\n\n(defn some\n  \"Returns true if `f` is true for some element of the matrix `m`, false\n  otherwise. (Also works on arbitrary nested sequences.)\"\n  [f m]\n  (core/some f (flatten m)))\n\n(defn fmap\n  \"Maps `f` over the elements of the matrix `m` returning a new matrix of the same\n  dimensions as `m`.\"\n  [f m]\n  (->Matrix (num-rows m)\n            (num-cols m)\n            (mapv #(mapv f %) m)))\n\n(defn fmap-indexed\n  \"Maps `f` over three arguments:\n\n  - each element of the matrix `m`\n  - its row `i`\n  - its column `j`\n\n  and returns a new matrix of the same dimensions as `m`. \"\n  [f m]\n  (letfn [(process-row [i row]\n            (into [] (map-indexed\n                      (fn [j elem] (f elem i j))\n                      row)))]\n    (let [new-rows (into [] (map-indexed\n                             process-row m))]\n      (->Matrix (num-rows m)\n                (num-cols m)\n                new-rows))))\n\n(defn- well-formed?\n  \"Returns true if the supplied sequence contains only sequences of the same\n  length (that could be transformed into columns of a matrix), false otherwise\"\n  [vs]\n  {:pre [(seq vs) (every? seq vs)]}\n  (let [counts (map count vs)]\n    (every? #(= % (first counts))\n            (next counts))))\n\n(defn by-rows*\n  \"Returns a matrix whose rows consist of the supplied sequence of `rows`. These\n  all must be the same length.\n\n  for a variadic equivalent, see [[by-rows]].\"\n  [rows]\n  (if (well-formed? rows)\n    (->Matrix (count rows)\n              (count (first rows))\n              (mapv vec rows))\n    (u/illegal \"malformed matrix\")))\n\n(defn by-rows\n  \"Returns a matrix whose rows consist of the supplied sequence of `rows`. These\n  all must be the same length.\n\n  Variadic equivalent to [[by-rows*]].\"\n  [& rows]\n  (by-rows* rows))\n\n(defn by-cols*\n  \"Returns a matrix whose columns consist of the supplied sequence of `cols`.\n  These all must be the same length.\n\n  for a variadic equivalent, see [[by-cols]].\"\n  [cols]\n  (if (well-formed? cols)\n    (->Matrix (count (first cols))\n              (count cols)\n              (apply mapv vector cols))\n    (u/illegal \"malformed matrix\")))\n\n(defn by-cols\n  \"Returns a matrix whose columns consist of the supplied sequence of `cols`.\n  These all must be the same length.\n\n  Variadic equivalent to [[by-cols*]].\"\n  [& cols]\n  (by-cols* cols))\n\n(defn row*\n  \"Returns a row matrix populated by the supplied `xs`. For a variadic equivalent,\n  see [[row]].\"\n  [xs]\n  {:pre [(not-empty xs)]}\n  (->Matrix 1 (count xs) [(vec xs)]))\n\n(defn row\n  \"Returns a row matrix populated by the supplied `xs`. Variadic equivalent\n  to [[row*]].\"\n  [& xs]\n  (row* xs))\n\n(defn column*\n  \"Returns a column matrix populated by the supplied `xs`. For a variadic equivalent,\n  see [[column]].\"\n  [xs]\n  {:pre [(not-empty xs)]}\n  (->Matrix (count xs) 1 (mapv vector xs)))\n\n(defn column\n  \"Returns a column matrix populated by the supplied `xs`. Variadic equivalent\n  to [[column*]].\"\n  [& xs]\n  (column* xs))\n\n(defn transpose\n  \"Returns the transpose of the matrix `m`. The transpose is the original matrix,\n  with rows and columns swapped.\"\n  [m]\n  (generate (num-cols m)\n            (num-rows m)\n            #(core/get-in m [%2 %1])))\n\n(defn ->structure\n  \"Returns a structure generated by converting `m` into a nested structure with\n  the supplied `outer-orientation` and `inner-orientation`.\n\n  If `t?` is true, the columns of `m` will form the inner tuples. If `t?` is\n  false, the rows of `m` will form the inner tuples.\n\n  By default, if you supply a single argument (the matrix `m`), a matrix turns\n  into a single outer `::s/down` of inner columns represented as `::up`\n  structures.\"\n  ([m] (->structure m ::s/down ::s/up true))\n  ([m outer-orientation inner-orientation t?]\n   {:pre [(s/valid-orientation? outer-orientation)\n          (s/valid-orientation? inner-orientation)]}\n   (let [m'   (if t? (transpose m) m)]\n     (s/make outer-orientation\n             (mapv #(s/make inner-orientation %)\n                   m')))))\n\n(defn seq->\n  \"Convert a sequence `xs` (typically, of function arguments) to an up-structure.\n\n  Any matrix present in the argument list will be converted to row of columns\n  via [[->structure]].\"\n  [xs]\n  (s/up* (map (fn [m]\n                (if (matrix? m)\n                  (->structure m)\n                  m))\n              xs)))\n\n(defn- mul\n  \"Returns the matrix product of `a` and `b`. Throws if `a` and `b` are\n  incompatible for multiplication.\"\n  [a b]\n  (let [ra (num-rows a)\n        rb (num-rows b)\n        ca (num-cols a)\n        cb (num-cols b)]\n    (when-not (= ca rb)\n      (u/illegal \"matrices incompatible for multiplication\"))\n    (generate ra cb #(reduce\n                      g/+ (for [k (range ca)]\n                            (g/* (core/get-in a [%1 k])\n                                 (core/get-in b [k %2])))))))\n\n(defn- scalar*matrix\n  \"Returns a matrix of the same dimensions as matrix `m` with each entry\n  multiplied (on the left) by the scalar quantity `c`.\"\n  [c m]\n  (fmap #(g/* c %) m))\n\n(defn- matrix*scalar\n  \"Returns a matrix of the same dimensions as matrix `m` with each entry\n  multiplied (on the right) by the scalar quantity `c`.\"\n  [m c]\n  (fmap #(g/* % c) m))\n\n(defn ^:no-doc elementwise\n  \"Applies `f` elementwise between the matrices `a` and `b`. Throws if `a` and `b`\n  don't have the same dimensions.\"\n  [f a b]\n  (let [ra (num-rows a)\n        rb (num-rows b)\n        ca (num-cols a)\n        cb (num-cols b)]\n    (when (or (not= ra rb)\n              (not= ca cb))\n      (u/illegal \"matrices incompatible for operation\"))\n    (generate ra ca #(f (core/get-in a [%1 %2])\n                        (core/get-in b [%1 %2])))))\n\n(defn two-tensor->\n  \"Converts the square structure `s` into a matrix, and calls the supplied\n  continuation `cont` with\n\n  - the generated matrix\n  - a function which will restore a matrix to a structure with the same inner\n    and outer orientations as s\n\n  Returns the result of the continuation call.\"\n  [s cont]\n  (if-let [{:keys [inner-size\n                   outer-size\n                   inner-orientation\n                   outer-orientation]}\n           (s/two-tensor-info s)]\n    (let [transpose? (= inner-orientation ::s/up)\n          [major-size minor-size]\n          (if transpose?\n            [inner-size outer-size]\n            [outer-size inner-size])\n          M (generate major-size minor-size\n                      (fn [i j]\n                        (let [path (if transpose? [j i] [i j])]\n                          (core/get-in s path))))\n          restore-fn (fn [m]\n                       (->structure\n                        m outer-orientation inner-orientation transpose?))]\n      (cont M restore-fn))\n    (u/illegal (str \"structure \" s \" is not a 2-tensor\"))))\n\n(defn two-tensor-operation\n  \"Applies matrix operation `f` to square structure `s` and returns a structure of\n  the same type as the supplied structure.\"\n  [s f]\n  (two-tensor-> s (fn [m ->s] (->s (f m)))))\n\n(defn structure->matrix\n  \"Given some 2-tensor-shaped structure `s`, returns the corresponding matrix.\n\n  The outer orientation is ignored; If the inner structures are `up`, they're\n  treated as columns. Inner `down` structures are treated as rows.\"\n  [s]\n  (two-tensor-> s (fn [m _] m)))\n\n(defn- M*u\n  \"Multiply a matrix by an up structure on the right. The return value is up.\"\n  [m u]\n  (when (not= (num-cols m) (count u))\n    (u/illegal \"matrix and tuple incompatible for multiplication\"))\n  (s/up*\n   (map (fn [i]\n          (let [row-i (nth m i)]\n            (ua/generic-sum\n             (fn [k]\n               (g/* (nth row-i k)\n                    (nth u k)))\n             0 (num-cols m))))\n        (range (num-rows m)))))\n\n(defn- d*M\n  \"Multiply a matrix `m` by down tuple `d` on the left. The return value has\n  orientation `down`.\"\n  [d m]\n  (when (not= (count d) (num-rows m))\n    (u/illegal \"matrix and tuple incompatible for multiplication\"))\n  (s/down*\n   (map (fn [i]\n          (ua/generic-sum\n           (fn [k]\n             (g/* (get d k)\n                  (core/get-in m [k i])))\n           0 (num-rows m)))\n        (range (num-cols m)))))\n\n(def ^{:dynamic true\n       :doc \"Set this dynamic variable to `false` to allow [[s->m]] to operate\n  on structures for which `(* ls ms rs)` does NOT yield a numerical value.\"}\n  *careful-conversion* true)\n\n(defn s->m\n  \"Convert the structure `ms`, which would be a scalar if the (compatible)\n  multiplication `(* ls ms rs)` were performed, to a matrix.\"\n  ([ms rs]\n   (let [ls (s/compatible-shape (g/* ms rs))]\n     (s->m ls ms rs)))\n  ([ls ms rs]\n   (when *careful-conversion*\n     (assert (v/numerical? (g/* ls (g/* ms rs)))))\n   (let [ndowns (s/dimension ls)\n         nups   (s/dimension rs)]\n     (generate ndowns nups\n               (fn [i j]\n                 (g/* (s/unflatten\n                       (s/basis-unit ndowns i) ls)\n                      (g/* ms (s/unflatten\n                               (s/basis-unit nups j) rs))))))))\n\n(defn as-matrix\n  \"Any one argument function of a structure can be seen as a matrix. This is only\n  useful if the function has a linear multiplier (e.g. derivative)\"\n  [F]\n  (fn [s]\n    (let [v (F s)]\n      (s->m v s))))\n\n(defn nth-row\n  \"Returns the `n`-th row of the supplied matrix `m` as a `down` structure.\"\n  [m n]\n  (s/down* (get m n)))\n\n(defn nth-col\n  \"Returns the `n`-th column of the supplied matrix `m` as an `up` structure.\"\n  [m n]\n  (s/up* (map #(% n) m)))\n\n(defn diagonal\n  \"Returns the diagonal of the supplied matrix `m` as an up structure. Errors if a\n  type other than a diagonal matrix is supplied.\"\n  [m]\n  {:pre [(square? m)]}\n  (let [rows  (num-rows m)]\n    (s/up* (map #(core/get-in m [% %])\n                (range 0 rows)))))\n\n(defn up->column-matrix\n  \"Returns a column matrix with the contents of the supplied `up` structure.\n  Errors if any other type is provided.\"\n  [v]\n  {:pre [(s/up? v)]}\n  (column* v))\n\n(defn column-matrix->up\n  \"Returns the single column from the supplied column matrix as an `up`. Errors if\n  some other type is supplied.\"\n  [m]\n  {:pre [(column? m)]}\n  (nth-col m 0))\n\n(defn column-matrix->vector\n  \"Returns the single column from the supplied column matrix as a vector. Errors\n  if some other type is supplied.\"\n  [m]\n  {:pre [(column? m)]}\n  (mapv first m))\n\n(defn down->row-matrix\n  \"Returns a row matrix with the contents of the supplied `down` structure.\n  Errors if any other type is provided.\"\n  [v]\n  {:pre [(s/down? v)]}\n  (by-rows (s/structure->vector v)))\n\n(defn row-matrix->down\n  \"Returns the single row from the supplied row matrix as a `down`. Errors if some\n  other type is supplied.\"\n  [m]\n  {:pre [(row? m)]}\n  (nth-row m 0))\n\n(defn row-matrix->vector\n  \"Returns the single row from the supplied row matrix as a vector. Errors if some\n  other type is supplied.\"\n  [m]\n  {:pre [(row? m)]}\n  (nth m 0))\n\n(defn m->s\n  \"Convert the matrix `m` into a structure `S`, guided by the requirement that `(*\n  ls S rs)` should be a scalar.\"\n  [ls m rs]\n  (let [ncols     (num-cols m)\n        col-shape (s/compatible-shape ls)\n        ms (s/unflatten (for [j (range ncols)]\n                          (s/unflatten (nth-col m j) col-shape))\n                        (s/compatible-shape rs))]\n    (when *careful-conversion*\n      (assert (v/numerical? (g/* ls (g/* ms rs)))\n              (str \"product is not numerical: \" ls ms rs)))\n    ms))\n\n(defn s:transpose\n  \"Given structural inputs `ls` (optional), `ms` and `rs`, constrained such\n  that `(* ls ms rs)` returns a numerical quantity, returns a result such that\n  the following relationship remains true:\n\n  ```clj\n  (* <ls| (* ms |rs>)) = (* <rs| (* (s:transpose ms) |ls>))\n  ```\n\n  For example:\n\n  ```clj\n  (let [ls (s/up 1 2)\n      ms (s/up (s/down 1 2) (s/down 3 4))\n      rs (s/down 1 2)]\n  (g/* ls (g/* ms rs))\n  ;;=> 27\n\n  (g/* rs (g/* (s:transpose ls ms rs) ls))\n  ;;=> 27\n  )\n  ```\n\n  `ls` is optional. If `ls` is not supplied, a compatible shape is generated\n  internally.\"\n  ([ms rs]\n   (let [ls (s/compatible-shape (g/* ms rs))]\n     (s:transpose ls ms rs)))\n  ([ls ms rs]\n   (m->s rs (transpose (s->m ls ms rs)) ls)))\n\n(defn s:transpose-orientation\n  \"Given some 2 tensor `s`, returns a structure with elements 'transposed' by\n  swapping the inner and outer orientations and dimensions, like a matrix\n  transpose.\n\n  Orientations are only flipped if they are different in the input. If the inner\n  and outer orientations of `s` are the same, the returned structure has this\n  identical orientation.\n\n  For example:\n\n  ```clj\n  ;; opposite orientation gets flipped:\n  (s:transpose-orientation (s/up (s/down 1 2 3) (s/down 4 5 6)))\n  ;;=> (down (up 1 4) (up 2 5) (up 3 6))\n\n  ;; same orientation stays the same:\n  (s:transpose-orientation (s/down (s/down 1 2 3) (s/down 4 5 6)))\n  ;;=> (down (down 1 4) (down 2 5) (down 3 6))\n  ```\n\n  See [[structure/two-tensor?]] for more detail on 2 tensors.\n\n  NOTE: In scmutils, this function is called `s:transpose2`.\"\n  [s]\n  (let [ret (two-tensor-operation s transpose)]\n    (if (= (s/orientation ret)\n           (s/orientation (first ret)))\n      ret\n      (s/transpose ret))))\n\n(declare invert)\n\n(defn s:invert\n  \"Given some 2-tensor `s` (a 'square' nested structure), returns a structure\n  that represents the multiplicative inverse of the supplied structure. The\n  inner and outer structure orientations of `(s:invert s)` are the SAME as `s`.\n\n  If `s` is an up-of-downs or down-of-ups, `(g/* s (s:invert s))`\n  and `(g/* (s:invert s) s)` will evaluate to an identity-matrix-shaped\n  up-of-downs or down-of-ups.\n\n  If `s` is an up-of-ups or down-of-downs, multiplying `s` `(s:invert s)` will\n  result in a scalar, as both structures collapse.\n\n  NOTE: I DO NOT yet understand the meaning of this scalar! If you do, please\n  open a pull request and explain it here.\"\n  [s]\n  (let [ret (two-tensor-operation s invert)]\n    (if (= (s/orientation ret)\n           (s/orientation (first ret)))\n      (s/transpose ret)\n      ret)))\n\n(defn- delete\n  \"Returns the vector formed by deleting the `i`'th element of the given vector\n  `v`.\"\n  [v i]\n  (if (vector? v)\n    (into (subvec v 0 i)\n          (subvec v (inc i)))\n    (delete (into [] v) i)))\n\n(defn with-substituted-row\n  \"Returns a new matrix of identical shape to `m`, with the vector `v` substituted\n  for the `i`th row.\"\n  [m i v]\n  {:pre [(matrix? m)\n         (<= 0 i)\n         (< i (num-rows m))\n         (= (num-cols m)\n            (count v))]}\n  (assoc m i v))\n\n(defn submatrix\n  \"Returns the submatrix of the matrix (or matrix-like structure) `s` generated by\n  taking\n\n  - rows    from `lowrow` -> `hirow` (inclusive)\n  - columns from `lowcol` -> `hicol` (inclusive)\"\n  [x lowrow hirow lowcol hicol]\n  (let [m (if (s/structure? x)\n            (two-tensor-> x (fn [m _] m))\n            x)]\n    (generate (inc (- hirow lowrow))\n              (inc (- hicol lowcol))\n              (fn [i j]\n                (core/get-in m [(+ i lowrow)\n                                (+ j lowcol)])))))\n\n(defn without\n  \"Returns the matrix formed by deleting the `i`-th row and `j`-th column of the\n  given matrix `m`.\n\n  This is also called the 'minor' of m.\"\n  [m i j]\n  (->Matrix\n   (dec (num-rows m))\n   (dec (num-cols m))\n   (mapv #(delete % j)\n         (delete (matrix->vector m) i))) )\n\n(defn- checkerboard-negate [s i j]\n  (if (even? (+ i j))\n    s\n    (g/negate s)))\n\n(defn dimension\n  \"Returns the 'dimension', ie, the number of rows & columns, of the supplied\n  square matrix. Errors if some other type is supplied.\"\n  [m]\n  {:pre [(square? m)]}\n  (num-rows m))\n\n(defn trace\n  \"Returns the trace (the sum of diagonal elements) of the square matrix `m`.\n\n  Generic operations are used, so this works on symbolic square matrices.\"\n  [m]\n  {:pre [(square? m)]}\n  (let [rows  (num-rows m)]\n    (transduce (map #(core/get-in m [% %]))\n               g/+\n               (range 0 rows))))\n\n;; Note from GJS in scmutils: \"Kleanthes Koniaris determinant routine, slightly\n;; edited by GJS\"\n\n(defn general-determinant\n  \"Given coefficient procedures `add`, `sub`, `mul` and `zero?`, returns a\n  procedure that efficiently computes the determinant of the supplied square\n  matrix `m`.\n\n  [[general-determinant]] is useful for generating fast type-specific\n  determinant routines. See [[determinant]] for a default using generic\n  arithmetic.\"\n  [add sub mul zero?]\n  (let [zero (add)]\n    (fn [m]\n      {:pre [(square? m)]}\n      (let [c-det (atom nil)]\n        (letfn [(c-det* [row [col & cols :as active-cols]]\n                  (if-not cols\n                    ;; one active column\n                    (core/get-in m [row col])\n                    (loop [idx 0\n                           remaining-cols active-cols\n                           answer zero]\n                      (if-not (seq remaining-cols)\n                        answer\n                        (let [term (core/get-in m [row (first remaining-cols)])]\n                          (if (zero? term)\n                            (recur (inc idx)\n                                   (rest remaining-cols)\n                                   answer)\n                            (let [without-i (delete active-cols idx)\n                                  delta (mul term (@c-det (inc row) without-i))]\n                              (recur (inc idx)\n                                     (rest remaining-cols)\n                                     (if (even? idx)\n                                       (add answer delta)\n                                       (sub answer delta))))))))))]\n          (reset! c-det (memoize c-det*))\n          (@c-det 0 (range (dimension m))))))))\n\n(def ^{:doc \"Returns the determinant of the supplied square matrix `m`.\n\n  Generic operations are used, so this works on symbolic square matrices.\"\n       :arglists '([m])}\n  determinant\n  (general-determinant g/+ g/- g/* v/numeric-zero?))\n\n(defn cofactors\n  \"Returns the matrix of cofactors of the supplied square matrix `m`.\"\n  [m]\n  {:pre [(square? m)]}\n  (let [r (num-rows m)]\n    (cond (< r 2) m\n          (= r 2) (let [[[a b] [c d]] m]\n                    (->Matrix 2 2 [[d (g/negate c)]\n                                   [(g/negate b) a]]))\n          :else (generate r r\n                          (fn [i j]\n                            (-> (without m i j)\n                                (determinant)\n                                (checkerboard-negate i j)))))))\n\n;;; The following implements the classical adjoint formula for the inverse of a\n;;; matrix. This may be useful for symbolic applications.\n\n(defn classical-adjoint-formula\n  \"Given coefficient procedures `add`, `sub`, `mul` and `zero?`, returns a\n  procedure that efficiently computes the inverse of the supplied square\n  matrix `m`.\n\n  [[classical-adjoint-formula]] is useful for generating fast type-specific\n  matrix inversion routines. See [[invert]] for a default using generic\n  arithmetic.\"\n  [add sub mul div zero?]\n  (let [det (general-determinant add sub mul zero?)]\n    (fn inv [A]\n      (let [dim (dimension A)]\n        (if (= dim 1)\n          (->Matrix 1 1 [[(div (core/get-in A [0 0]))]])\n          (let* [d  (det A)\n                 -d (sub d)]\n            (generate dim dim\n                      (fn [i j]\n                        (let [denom (if (even? (+ i j)) d -d)]\n                          (div (det (without A j i)) denom))))))))))\n\n(def ^{:doc \"Returns the inverse of the supplied square matrix `m`.\"\n       :arglists '([A])}\n  invert\n  (classical-adjoint-formula g/+ g/- g/* g// v/numeric-zero?))\n\n(defn- m-div-m [m1 m2]\n  (mul m1 (invert m2)))\n\n(defn- m-div-c\n  \"Returns the result of multiplying (on the right) the scalar `c` by the inverse\n  of matrix `m`.\"\n  [m c]\n  (matrix*scalar m (g/invert c)))\n\n(defn- c-div-m\n  \"Returns the result of multiplying (on the left) the scalar `c` by the inverse\n  of matrix `m`.\"\n  [c m]\n  (scalar*matrix c (invert m)))\n\n(defn s:inverse\n  ([ms rs]\n   (let [ls (s/compatible-shape (g/* ms rs))]\n     (s:inverse ls ms rs)))\n  ([ls ms rs]\n   (m->s (s/compatible-shape rs)\n         (invert (s->m ls ms rs))\n         (s/compatible-shape ls))))\n\n(defn s:solve-linear-left [M product]\n  (let [cp (s/compatible-shape product)\n        cr (s/compatible-shape (s/s:* cp M))]\n    (s/s:* (s:inverse cp M cr) product)))\n\n(defn s:solve-linear-right [product M]\n  (let [cp (s/compatible-shape product)\n        cr (s/compatible-shape (s/s:* M cp))]\n    (s/s:* product (s:inverse cr M cp))))\n\n(defn s:divide-by-structure [rv s]\n  (s:solve-linear-left s rv))\n\n(defn make-zero\n  \"Return a zero-valued matrix of `m` rows and `n` columns (`nXn` if only `n` is\n  supplied).\"\n  ([n] (make-zero n n))\n  ([m n] (generate m n (constantly 0))))\n\n(defn I\n  \"Return the identity matrix of order `n`.\"\n  [n]\n  (generate n n s/kronecker))\n\n(defn identity-like\n  \"Return an identity matrix whose ones and zeros match the types of the supplied\n  square matrix `M`. Errors if a non-square matrix `M` is supplied.\"\n  [M]\n  (if-not (square? M)\n    (u/illegal \"identity-like on non-square\")\n    (fmap-indexed (fn [elem i j]\n                    (if (= i j)\n                      (v/one-like elem)\n                      (v/zero-like elem)))\n                  M)))\n\n(defn identity?\n  \"Returns true if the supplied matrix `m` is an identity matrix, false\n  otherwise.\"\n  [m]\n  (and (square? m)\n       (let [n (dimension m)]\n         (every? true?\n                 (for [i (range n)\n                       j (range n)\n                       :let [entry (core/get-in m [i j])]]\n                   (if (= i j)\n                     (v/one? entry)\n                     (v/zero? entry)))))))\n\n(defn make-diagonal\n  \"Given a single (sequential) argument `v`, returns the diagonal matrix of\n  order `(count v)` with the elements of the sequence `v` along the diagonal.\n\n  Given two arguments `n` and some constant `x`, returns a diagonal `n` by `n`\n  matrix with `x` in every entry of the diagonal.\n\n  `(make-diagonal <n> 1)` is equivalent to `(I n)`.\"\n  ([v]\n   (let [v (vec v)\n         n (count v)]\n     (generate n n (fn [i j]\n                     (if (= i j) (v i) 0)))))\n  ([n x]\n   (generate n n #(if (= %1 %2) x 0))))\n\n(defn diagonal?\n  \"Returns true if `m` is a diagonal matrix (ie, a square matrix where every\n  non-diagonal element is zero), false otherwise.\"\n  [m]\n  (and (square? m)\n       (let [n (dimension m)]\n         (every? true?\n                 (for [i (range n)\n                       j (range n)\n                       :when (not= i j)\n                       :let [entry (core/get-in m [i j])]]\n                   (v/zero? entry))))))\n\n(defn symmetric?\n  \"Returns true if the supplied matrix `M` is equal to its own transpose (ie,\n  symmetric), false otherwise.\"\n  [M]\n  (v/zero?\n   (g/simplify\n    (g/sub (transpose M) M))))\n\n(defn antisymmetric?\n  \"Returns true if the supplied matrix `M` is equal to the negation of its own\n  transpose (ie, antisymmetric), false otherwise.\"\n  [M]\n  (v/zero?\n   (g/simplify\n    (g/add (transpose M) M))))\n\n(defn characteristic-polynomial\n  \"Returns the [characteristic\n  polynomial](https://en.wikipedia.org/wiki/Characteristic_polynomial) of the\n  square matrix `m`.\n\n  If only `m` is supplied, returns a [[polynomial/Polynomial]] instance\n  representing the matrix `m`'s characteristic polynomial.\n\n  If `x` is supplied, returns the value of the characteristic polynomial of `m`\n  evaluated at `x`.\n\n  Typically `x` will be a symbolic variable, but if you wanted to get the value\n  of the characteristic polynomial at some particular numerical point `x` you\n  could pass that too.\"\n  ([m]\n   (characteristic-polynomial m (poly/identity)))\n  ([m x]\n   (let [r (num-rows m)\n         c (num-cols m)]\n     (when-not (= r c) (u/illegal \"not square\"))\n     (let [Ix (make-diagonal r x)]\n       (determinant\n        (g/- Ix m))))))\n\n;; ## Solving\n\n(defn cramers-rule\n  \"Given coefficient procedures `add`, `sub`, `mul`, `div` and `zero?`, returns a\n  procedure that efficiently computes the solution to an inhomogeneous system of\n  linear equations, `A*x=b`, where the matrix `A` and the column matrix `b` are\n  given. The returned procedure returns the column matrix `x`.\n\n  Unlike LU decomposition, Cramer's rule generalizes to symbolic solutions.\n\n  [[cramers-rule]] is useful for generating fast type-specific linear equation\n  solvers. See [[solve]] for a default using generic arithmetic.\"\n  [add sub mul div zero?]\n  (let [det (general-determinant add sub mul zero?)]\n    (fn solve [A b]\n      {:pre [(square? A)\n             (column? b)\n             (= (dimension A)\n                (num-rows b))]}\n      (let [bv (nth-col b 0)\n            bn (num-rows b)\n            d  (det A)\n            At (transpose A)]\n        (column*\n         (mapv (fn [i]\n                 (div (det (with-substituted-row At i bv))\n                      d))\n               (range bn)))))))\n\n(def ^{:doc \"Given a matrix `A` and a column matrix `b`, computes the solution\n  to an inhomogeneous system of linear equations, `A*x=b`, where the matrix `A`\n  and the column matrix `b` are given.\n\n Returns the column matrix `x`.\n\n Unlike LU decomposition, Cramer's rule generalizes to symbolic solutions.\"\n       :arglists '([A b])}\n  solve\n  (cramers-rule g/+ g/- g/* g// v/numeric-zero?))\n\n(defn rsolve\n  \"Generalization of [[solve]] that can handle `up` and `down` structures, as well\n  as `row` and `column` matrices.\n\n  Given `row` or `down` values for `b`, `A` is appropriately transposed before\n  solving.\"\n  [b A]\n  (cond (s/up? b)   (column-matrix->up\n                     (solve A (up->column-matrix b)))\n        (column? b) (solve A b)\n        (s/down? b) (row-matrix->down\n                     (transpose\n                      (solve (transpose A)\n                             (transpose\n                              (down->row-matrix b)))))\n        (row? b)\n        (transpose\n         (solve (transpose A)\n                (transpose b)))\n        :else (u/illegal (str \"I don't know how to solve:\" b A))))\n\n;; ## Generic Operation Installation\n\n(defmethod v/= [::matrix ::matrix] [a b] (m:= a b))\n(defmethod v/= [::square-matrix ::v/scalar] [m c] (matrix=scalar m c))\n(defmethod v/= [::v/scalar ::square-matrix] [c m] (scalar=matrix c m))\n\n(defmethod g/negate [::matrix] [a] (fmap g/negate a))\n\n(defmethod g/sub [::matrix ::matrix] [a b] (elementwise g/- a b))\n(defmethod g/sub [::square-matrix ::v/scalar] [a b]\n  (elementwise g/- a (make-diagonal (num-rows a) b)))\n\n(defmethod g/sub [::v/scalar ::square-matrix] [a b]\n  (elementwise g/- (make-diagonal (num-rows b) a) b))\n\n(defmethod g/add [::matrix ::matrix] [a b] (elementwise g/+ a b))\n(defmethod g/add [::square-matrix ::v/scalar] [a b]\n  (elementwise g/+ a (make-diagonal (num-rows a) b)))\n\n(defmethod g/add [::v/scalar ::square-matrix] [a b]\n  (elementwise g/+ (make-diagonal (num-rows b) a) b))\n\n(defmethod g/mul [::matrix ::matrix] [a b] (mul a b))\n(defmethod g/mul [::v/scalar ::matrix] [n a] (scalar*matrix n a))\n(defmethod g/mul [::matrix ::v/scalar] [a n] (matrix*scalar a n))\n\n(defmethod g/mul [::matrix ::s/up] [m u] (M*u m u))\n(defmethod g/mul [::s/down ::matrix] [d m] (d*M d m))\n\n(defmethod g/div [::matrix ::v/scalar] [m c] (m-div-c m c))\n(defmethod g/div [::v/scalar ::square-matrix] [c m] (c-div-m c m))\n(defmethod g/div [::column-matrix ::square-matrix] [c m] (rsolve c m))\n(defmethod g/div [::row-matrix ::square-matrix] [r m] (rsolve r m))\n(defmethod g/div [::s/up ::square-matrix] [u m] (rsolve u m))\n(defmethod g/div [::s/down ::square-matrix] [d m] (rsolve d m))\n(defmethod g/div [::matrix ::square-matrix] [d m] (m-div-m d m))\n\n(defmethod g/exp [::square-matrix] [m] (series/exp-series m))\n(defmethod g/cos [::square-matrix] [m] (series/cos-series m))\n(defmethod g/sin [::square-matrix] [m] (series/sin-series m))\n(defmethod g/tan [::square-matrix] [m] (series/tan-series m))\n(defmethod g/sec [::square-matrix] [m] (series/sec-series m))\n(defmethod g/acos [::square-matrix] [m] (series/acos-series m))\n(defmethod g/asin [::square-matrix] [m] (series/asin-series m))\n(defmethod g/atan [::square-matrix] [m] (series/atan-series m))\n(defmethod g/acot [::square-matrix] [m] (series/acot-series m))\n(defmethod g/cosh [::square-matrix] [m] (series/cosh-series m))\n(defmethod g/sinh [::square-matrix] [m] (series/sinh-series m))\n(defmethod g/tanh [::square-matrix] [m] (series/tanh-series m))\n(defmethod g/asinh [::square-matrix] [m] (series/asinh-series m))\n(defmethod g/atanh [::square-matrix] [m] (series/atanh-series m))\n(defmethod g/simplify [::matrix] [m] (fmap g/simplify m))\n\n(defmethod g/invert [::matrix] [m] (invert m))\n\n(defmethod g/make-rectangular [::matrix ::matrix] [a b]\n  (elementwise g/make-rectangular a b))\n\n(defmethod g/make-polar [::matrix ::matrix] [a b]\n  (elementwise g/make-polar a b))\n\n(defmethod g/real-part [::matrix] [m] (fmap g/real-part m))\n(defmethod g/imag-part [::matrix] [m] (fmap g/imag-part m))\n(defmethod g/conjugate [::matrix] [m]  (fmap g/conjugate m))\n\n(defmethod g/transpose [::matrix] [m] (transpose m))\n\n(defmethod g/determinant [::square-matrix] [m] (determinant m))\n(defmethod g/determinant [::s/structure] [s]\n  (two-tensor-> s (fn [m _] (determinant m))))\n\n(defmethod g/trace [::square-matrix] [m] (trace m))\n(defmethod g/trace [::s/structure] [s]\n  (two-tensor-> s (fn [m _] (trace m))))\n\n(defmethod g/invert [::s/structure] [a]\n  (s:invert a))\n\n(defmethod g/div [::s/structure ::s/structure] [rv s]\n  (s:divide-by-structure rv s))\n\n(defmethod g/solve-linear [::square-matrix ::s/up] [A b] (rsolve b A))\n(defmethod g/solve-linear [::square-matrix ::s/down] [A b] (rsolve b A))\n(defmethod g/solve-linear [::square-matrix ::column-matrix] [A b] (rsolve b A))\n(defmethod g/solve-linear [::square-matrix ::row-matrix] [A b] (rsolve b A))\n(defmethod g/solve-linear [::s/structure ::s/structure] [s product]\n  (s:solve-linear-left s product))\n\n(defmethod g/solve-linear [::s/structure ::v/scalar] [s c]\n  (s/structure*scalar (s:invert s) c))\n\n(defmethod g/solve-linear-right [::row-matrix ::square-matrix] [b A] (rsolve b A))\n(defmethod g/solve-linear-right [::down ::square-matrix] [b A] (rsolve b A))\n(defmethod g/solve-linear-right [::s/structure ::s/structure] [product s]\n  (s:solve-linear-right product s))\n\n(defmethod g/solve-linear-right [::v/scalar ::s/structure] [c s]\n  (s/scalar*structure c (s:invert s)))\n\n(defmethod g/dimension [::square-matrix] [m] (dimension m))\n(defmethod g/dimension [::column-matrix] [m] (num-rows m))\n(defmethod g/dimension [::row-matrix] [m] (num-cols m))\n\n;; ## Column / Row Matrices only...\n\n(defmethod g/dot-product [::row-matrix ::row-matrix] [a b]\n  (g/dot-product (row-matrix->down a)\n                 (row-matrix->down b)))\n\n(defmethod g/dot-product [::column-matrix ::column-matrix] [a b]\n  (g/dot-product (column-matrix->up a)\n                 (column-matrix->up b)))\n\n(defmethod g/inner-product [::row-matrix ::row-matrix] [a b]\n  (g/inner-product (row-matrix->vector a)\n                   (row-matrix->vector b)))\n\n(defmethod g/inner-product [::column-matrix ::column-matrix] [a b]\n  (g/inner-product (column-matrix->up a)\n                   (column-matrix->up b)))\n\n(defmethod g/cross-product [::row-matrix ::row-matrix] [a b]\n  (by-rows\n   (s/structure->vector\n    (g/cross-product (row-matrix->vector a)\n                     (row-matrix->vector b)))))\n\n(defmethod g/cross-product [::column-matrix ::column-matrix] [a b]\n  (up->column-matrix\n   (g/cross-product (column-matrix->up a)\n                    (column-matrix->up b))))\n\n(defmethod g/outer-product [::column-matrix ::row-matrix] [a b] (mul a b))\n\n(defmethod g/partial-derivative [::matrix v/seqtype] [M selectors]\n  (fmap #(g/partial-derivative % selectors)\n        M))\n"]}