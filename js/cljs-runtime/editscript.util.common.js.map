{"version":3,"sources":["editscript/util/common.cljc"],"mappings":"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","names":["editscript.util.common/szudzik","x","y","editscript.util.common/current-time","js/Date","editscript.util.common/vec-edits*","a","b","n","m","timeout","delta","snake","k","ax","cljs.core.get","by","cljs.core._EQ_","cljs.core/type","fp-fn","fp","vec__75245","cljs.core.nth","vec__75248","dk-1","vk-1","dk+1","vk+1","x__5130__auto__","y__5131__auto__","sk","ops","es","cljs.core.conj","cljs.core.assoc_BANG_","begin","p","cljs.core/transient","and__5043__auto__","cljs.core/persistent!","p1__75242#","cljs.core/rest","editscript.util.common/swap-ops","edits","cljs.core.mapv","op","G__75253","cljs.core/Keyword","editscript.util.common/min+plus->replace","v","cljs.core.into","cljs.core.comp","cljs.core.partition_by","cljs.core/integer?","cljs.core.mapcat","coll","cljs.core/count","vec__75258","ms","ps","p1__75254#","cljs.core/split-with","mc","pc","Math/abs","rs","cljs.core.repeat","cljs.core.concat","p__75263","map__75264","cljs.core/--destructure-map","editscript.util.common/vec-edits","vec-timeout","cljs.core/vec","e","editscript.util.common/group-strs","level","sf","cljs.core/subs","cljs.core/subvec","i","cljs.core/volatile!","cljs.core/identity","c","cljs.core.partial","cljs.core/+","s","G__75269","G__75270","cljs.core/deref","G__75271","G__75276","G__75277","G__75278","editscript.util.common/transform-str","G__75291","clojure.string.split","clojure.string/split-lines","cljs.core.ex_info","p__75297","map__75298","editscript.util.common/diff-str","script","path","str-change-limit","str-diff","opts","a'","b'","editscript.edit/replace-data","ca","unchanged","cljs.core.transduce","cljs.core.filter","edits'","editscript.edit/replace-str"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.util.common\n  (:refer-clojure :exclude [slurp])\n  (:require [editscript.edit :as e]\n            [clojure.string :as s]))\n\n#?(:clj (set! *warn-on-reflection* true))\n#?(:clj (set! *unchecked-math* :warn-on-boxed))\n\n(defn szudzik\n  \"Szudzik's paring function\"\n  [^long x ^long y]\n  (if (> y x)\n    (+ x (* y y))\n    (+ x y (* x x))))\n\n(defmacro coll-case\n  [a b script path type diff-fn opts]\n  `(case (e/get-type ~b)\n     :nil  (e/delete-data ~script ~path)\n     ~type (~diff-fn ~script ~path ~a ~b ~opts)\n     (e/replace-data ~script ~path ~b)))\n\n(defn current-time\n  ^long []\n  #?(:clj (System/currentTimeMillis) :cljs (.getTime (js/Date.))))\n\n(defn- vec-edits*\n  \"Based on 'Wu, S. et al., 1990, An O(NP) Sequence Comparison Algorithm,\n  Information Processing Letters, 35:6, p317-23.'\n\n  A greedy algorithm, attempting to get to the furthest points with a given\n  number of edits. Very fast. However, it does not have replacement operations,\n  so it is not very useful for nested trees. It can also only do unit cost for\n  addition and deletion. \"\n  [a b n m timeout]\n  (let [^long n n\n        ^long m m\n        delta   (- n m)\n        snake   (fn [^long k ^long x]\n                  (loop [x x y (- x k)]\n                    (let [ax (get a x) by (get b y)]\n                      (if (and (< x n)\n                               (< y m)\n                               (= (type ax) (type by))\n                               (= ax by))\n                        (recur (inc x) (inc y))\n                        x))))\n        fp-fn   (fn [fp ^long k]\n                  (let [[dk-1 vk-1] (get fp (dec k) [-1 []])\n                        dk-1        (inc ^long dk-1)\n                        [dk+1 vk+1] (get fp (inc k) [-1 []])\n                        x           (max dk-1 ^long dk+1)\n                        ^long sk    (snake k x)\n                        ops         (let [es (if (> dk-1 ^long dk+1)\n                                               (conj vk-1 :-)\n                                               (conj vk+1 :+))]\n                                      (if (> sk x)\n                                        (conj es (- sk x))\n                                        es))]\n                    (assoc! fp k [sk ops])))\n        begin   (current-time)]\n    (loop [p 0 fp (transient {})]\n      (let [fp (loop [k (* -1 p) fp fp]\n                 (if (< k delta)\n                   (recur (inc k) (fp-fn fp k))\n                   fp))\n            fp (loop [k (+ delta p) fp fp]\n                 (if (< delta k)\n                   (recur (dec k) (fp-fn fp k))\n                   fp))\n            fp (fp-fn fp delta)]\n        (cond\n          (and timeout (< ^long timeout (- (current-time) begin)))\n          :timeout\n          (= n (nth (get fp delta) 0))\n          (-> (persistent! fp) (get delta) (#(nth % 1)) rest)\n          :else\n          (recur (inc p) fp))))))\n\n(defn- swap-ops\n  [edits]\n  (mapv (fn [op] (case op :+ :- :- :+ op)) edits))\n\n(defn min+plus->replace\n  \"Aggressively turn :- and :+ into replacements.\"\n  [v]\n  (into []\n        (comp\n          (partition-by integer?)\n          (mapcat\n            (fn [coll]\n              (let [m (nth coll 0)]\n                (if (or (integer? m) (= 1 (count coll)))\n                  coll\n                  (let [p       (if (= m :-) :+ :-)\n                        [ms ps] (split-with #(= % m) coll)\n                        mc      (count ms)\n                        pc      (count ps)\n                        delta   (Math/abs (- mc pc))\n                        rs      (repeat (- (max mc pc) delta) :r)]\n                    (cond\n                      (< mc pc) (concat rs (repeat delta p))\n                      (= mc pc) rs\n                      :else     (concat (repeat delta m) rs))))))))\n        v))\n\n(defn vec-edits\n  [a b {:keys [vec-timeout]\n        :or   {vec-timeout 1000}}]\n  (let [a (vec a)\n        b (vec b)\n        n (count a)\n        m (count b)\n        e (if (< n m)\n            (vec-edits* b a m n vec-timeout)\n            (vec-edits* a b n m vec-timeout))]\n    (if (= e :timeout)\n      e\n      (min+plus->replace (if (< n m) (swap-ops e) e)))))\n\n(defn- group-strs\n  [edits b level]\n  (let [sf (if (= level :character) subs subvec)\n        i  (volatile! 0)]\n    (into []\n          (comp\n            (partition-by identity)\n            (mapcat\n              (fn [coll]\n                (let [x (nth coll 0)\n                      c (count coll)]\n                  (cond\n                    (integer? x) (do (vswap! i (partial + x)) coll)\n                    (= :- x)     [[x c]]\n                    (= :r x)     (let [s (sf b @i (+ ^long @i c))]\n                                   (vswap! i (partial + c))\n                                   [[x s]])\n                    (= :+ x)     (let [s (sf b @i (+ ^long @i c))]\n                                   (vswap! i (partial + c))\n                                   [[x s]]))))))\n          edits)))\n\n(defn transform-str\n  [s level]\n  (case level\n    :character s\n    :word      (vec (s/split s #\" \"))\n    :line      (vec (s/split-lines s))\n    (throw (ex-info \"Unknown string diff level\" {:str-diff level}))))\n\n(defn diff-str\n  [script path a b {:keys [str-change-limit str-diff]\n                    :or   {str-change-limit 0.2}\n                    :as   opts}]\n  (let [a'    (transform-str a str-diff)\n        b'    (transform-str b str-diff)\n        edits (vec-edits a' b' opts)]\n    (if (= edits :timeout)\n      (e/replace-data script path b)\n      (let [ca        (count a')\n            unchanged (double (transduce (filter integer?) + edits))]\n        (if (and (< 0 str-change-limit 1.0)\n                 (< (* ca (- 1.0 ^double str-change-limit)) unchanged))\n          (let [edits' (group-strs edits b' str-diff)]\n            (e/replace-str script path edits' str-diff))\n          (e/replace-data script path b'))))))\n\n#?(:clj (defmacro vslurp\n          [file]\n          (clojure.core/slurp file)))\n"]}