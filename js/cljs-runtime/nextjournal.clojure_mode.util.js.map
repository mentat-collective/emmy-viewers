{"version":3,"sources":["nextjournal/clojure_mode/util.cljs"],"mappings":"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","names":["js/goog.define","nextjournal.clojure-mode.util/node-js?","nextjournal.clojure-mode.util/user-event-annotation","event-name","js/module$node_modules$$codemirror$state$dist$index_cjs.Transaction","nextjournal.clojure-mode.util/get-user-event-annotation","tr","nextjournal.clojure-mode.util/guard","x","f","nextjournal.clojure-mode.util/from-to","p1","p2","nextjournal.clojure-mode.util/dispatch-some","view","var_args","G__88446","nextjournal.clojure-mode.util/insertion","js/Error","from","s","nextjournal.clojure_mode.util.insertion","to","G__88448","nextjournal.clojure-mode.util/deletion","nextjournal.clojure_mode.util.deletion","x__4336__auto__","y__4337__auto__","cljs.core._EQ_","nextjournal.clojure-mode.util/line-content-at","state","parent__83650__auto__","f__83651__auto__","obj__83643__auto__","f__83644__auto__","nextjournal.clojure-mode.util/map-cursor","original-range","update-map","cljs.core/map?","map__88452","cljs.core/--destructure-map","cljs.core.get","mapped","cursor","from-to","range","changes","change-desc","cljs.core/clj->js","G__88453","or__4253__auto__","nextjournal.clojure-mode.selections/cursor","nextjournal.clojure_mode.selections.range","obj88454","G__88458","nextjournal.clojure-mode.util/update-ranges","nextjournal.clojure_mode.util.update_ranges","tr-specs","temp__5757__auto__","result","p1__88455#","applied_science.js_interop.extend_BANG_","nextjournal.clojure-mode.util/dispatch-changes","dispatch","G__88461","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","nextjournal.clojure-mode.util/update-lines","p__88466","vec__88467","map__88470","cljs.core.nth","seq88462","G__88463","cljs.core/first","cljs.core/next","G__88464","self__4851__auto__","spec","iterator","from-pos","line-num","map__88482","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj88484","js/undefined","obj88485","obj88486","done","lineBreak","value","temp__5751__auto__","change","and__4251__auto__","cljs.core/not","Array88488","G__88489","nextjournal.clojure-mode.util/update-selected-lines","at-line","cljs.core.atom","doc","p__88495","map__88497","obj88501","obj88502","obj88503","obj88504","anchor","head","line","map__88511","obj88513","obj88514","line-number","line-to","cljs.core/deref","cljs.core/reset!","next-line","p1__88490#","change-set","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorSelection","p__88518","map__88530","map__88531","obj88539","obj88544","obj88545","obj88547","obj88550","nextjournal.clojure-mode.util/iter-changed-lines","effects","selection","next-changes","_","from-a","to-a","from-b","to-b","inserted","map__88554","obj88559","obj88563","next-changeset","cljs.core/seq","obj88581","out88582","k__83550__auto__","applied-science.js-interop.impl/in?*","obj88596","obj88600","obj88601","obj88577","obj88605","G__88575","obj88611","obj88612","obj88615","obj88616","js/module$node_modules$$codemirror$state$dist$index_cjs.StateEffect","p__88623","map__88625","map__88626","obj88628","obj88631","nextjournal.clojure-mode.util/something-selected?","ranges","p1__88622#","cljs.core/every?","p__88635","map__88636","obj88639","obj88642","nextjournal.clojure-mode.util/range-str"],"sourcesContent":["(ns nextjournal.clojure-mode.util\n  (:require [applied-science.js-interop :as j]\n            [\"@codemirror/state\" :refer [EditorSelection\n                                         ChangeSet\n                                         ChangeDesc\n                                         TransactionSpec\n                                         StrictTransactionSpec\n                                         StateEffect\n                                         Transaction]]\n            [nextjournal.clojure-mode.selections :as sel]))\n\n(goog-define node-js? false)\n\n(defn user-event-annotation [event-name]\n  (.. Transaction -userEvent (of event-name)))\n\n(defn get-user-event-annotation [tr]\n  (.annotation ^Transaction tr (.-userEvent Transaction)))\n\n(defn guard [x f] (when (f x) x))\n\n(defn ^js from-to [p1 p2]\n  (if (> p1 p2) #js{:from p2 :to p1} #js{:from p1 :to p2}))\n\n(defn dispatch-some\n  \"If passed a transaction, dispatch to view and return true to stop processing commands.\"\n  [^js view tr]\n  (if tr\n    (do (.dispatch view tr)\n        true)\n    false))\n\n(defn insertion\n  \"Returns a `change` that inserts string `s` at position `from` and moves cursor to end of insertion.\"\n  ([from s] (insertion from from s))\n  ([from to ^string s]\n   {:changes {:insert s\n              :from   from\n              :to     to}\n    :cursor  (+ from (count s))}))\n\n(defn deletion\n  ([from] (deletion (max 0 (dec from)) from))\n  ([from to]\n   (let [from (if (= from to)\n                (max 0 (dec from))\n                from)]\n     {:cursor  from\n      :changes {:from from :to to}})))\n\n(defn line-content-at [state from]\n  (-> state\n      (j/call-in [:doc :lineAt] from)\n      (j/call :slice)))\n\n(defn map-cursor [^js original-range ^js state update-map]\n  {:pre [(map? update-map)]}\n  (let [{:keys [cursor/mapped\n                cursor\n                from-to\n                range\n                changes]} (guard update-map map?)\n        change-desc (when changes (.changes state (clj->js changes)))]\n    (cond-> #js{:range (or range\n                           (cond mapped (sel/cursor (.mapPos change-desc mapped))\n                                 cursor (sel/cursor cursor)\n                                 from-to (sel/range (from-to 0) (from-to 1)))\n                           original-range)}\n      change-desc (j/!set :changes change-desc))))\n\n(defn update-ranges\n  \"Applies `f` to each range in `state` (see `changeByRange`)\"\n  ([state f]\n   (update-ranges state nil f))\n  ([^js state tr-specs f ]\n   (->> (fn [range]\n          (or (when-some [result (f range)]\n                (map-cursor range state result))\n              #js{:range range}))\n        (.changeByRange state)\n        (#(j/extend! % tr-specs))\n        (.update state))))\n\n(defn dispatch-changes [^js state dispatch ^js changes]\n  (when-not (.-empty changes)\n    (dispatch (.update state #js{:changes changes}))))\n\n(defn update-lines\n  [^js state f & [{:keys [from to spec]\n                   :or {from 0}}]]\n  (let [iterator (.. state -doc iter)]\n    (loop [result (.next iterator)\n           changes #js[]\n           from-pos from\n           line-num 1]\n      (j/let [^:js {:keys [done lineBreak ^string value]} result]\n        (if (or done\n                (> from to))\n          (.update state (j/extend! #js{:changes (.changes state changes)} spec))\n          (recur (.next iterator)\n                 (if-let [change (and (not lineBreak) (f from-pos value line-num))]\n                   (j/push! changes change)\n                   changes)\n                 (+ from-pos (count value))\n                 (cond-> line-num lineBreak inc)))))))\n\n(defn update-selected-lines\n  \"`f` will be called for each selected line with args [line, changes-array, range]\n   and should *mutate* changes-array\"\n  [^js state f]\n  (let [at-line (atom -1)\n        doc (.-doc state)]\n    (->> (j/fn [^:js {:as range :keys [from to anchor head]}]\n           (j/let [changes #js[]]\n             (loop [^js line (.lineAt doc from)]\n               (j/let [^:js {line-number :number line-to :to} line]\n                 (when (> (.-number line) @at-line)\n                   (reset! at-line line-number)\n                   (f line changes range))\n                 (if-let [next-line (and (> to line-to)\n                                         (guard (.lineAt doc (inc line-to))\n                                                #(> (.-number ^js %) line-number)))]\n                   (recur next-line)\n                   (let [^js change-set (.changes state changes)]\n                     #js{:changes changes\n                         :range (.range EditorSelection\n                                        (.mapPos change-set anchor 1)\n                                        (.mapPos change-set head 1))}))))))\n         (.changeByRange state))))\n\n\n(j/defn iter-changed-lines\n  \"`f` will be called for each changed line with args [line, changes-array]\n   and should *mutate* changes-array. Selections will be mapped through the resulting changeset.\"\n  [^:js {:as tr\n         :keys [^js changes ^js effects selection]\n         {:as ^js state :keys [^js doc]} :state} f]\n  (let [at-line (atom -1)\n        next-changes #js[]\n        _ (.iterChanges\n           changes\n           (fn [from-a to-a from-b to-b inserted]\n             (j/let [^:js {:as line line-number :number line-to :to} (.lineAt doc from-b)]\n               (loop [line line]\n                 (when (> line-number @at-line)\n                   (reset! at-line line-number)\n                   (f line next-changes))\n                 (when-not (<= to-b line-to)\n                   (let [next-line (.lineAt doc (inc line-to))]\n                     (when (and next-line (> (.-number next-line) (.-number line)))\n                       (recur next-line))))))))\n        next-changeset (.changes state next-changes)]\n    (if (seq next-changes)\n      (-> (j/select-keys tr [:annotations\n                             :scrollIntoView\n                             :reconfigure])\n          (j/assoc! :changes (.compose changes next-changeset))\n          (cond->\n            selection\n            (j/assoc! :selection (.. state -selection (map next-changeset)))\n            effects\n            (j/assoc! :effects (.mapEffects StateEffect effects next-changeset))))\n      tr)))\n\n(j/defn something-selected? [^:js {{:keys [ranges]} :selection}]\n  (not (every? #(.-empty ^js %) ranges)))\n\n(j/defn range-str [state ^:js {:as selection :keys [from to]}]\n  (str (j/call-in state [:doc :slice] from to)))\n"]}