{"version":3,"sources":["sicmutils/operator.cljc"],"mappings":"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AAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA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","names":["sicmutils.operator/simplify-operator-name","pattern.rule.rule_simplifier","sicmutils.simplify.rules.associative","sicmutils.simplify.rules/exponent-contract","sicmutils.simplify.rules.unary_elimination","cljs.core/PROTOCOL_SENTINEL","unused__43952__auto__","self__","G__99619","js/Error","args99605","cljs.core/aclone","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sicmutils.operator/Operator","sicmutils.operator/->Operator","o","arity","name","context","m","this","temp__5751__auto__","z-fn","cljs.core._EQ_","sicmutils.value/zero-like","one-fn","id-fn","cljs.core/identity","_","G__99612","sicmutils.value/freeze","old","new","sicmutils.differential/replace-tag","tag","sicmutils.differential/extract-tangent","n","cljs.core/seqable?","cljs.core/seq","meta","k","sicmutils.operator/op:get","sicmutils.util/illegal","a","b","c","d","e","f","g","h","i","j","l","o-arg","p","q","r","s","t","rest","cljs.core.apply","x","writer","cljs.core.write_all","sicmutils.operator/operator?","sicmutils.operator/procedure","op","sicmutils.operator/arity","sicmutils.operator/name","sicmutils.operator/context","sicmutils.operator/with-context","ctx","var_args","G__99622","sicmutils.operator/make-operator","sicmutils.operator.make_operator","sicmutils.function/arity","cljs.core.into","cljs.core.sequence","cljs.core.concat","cljs.core/List","sicmutils.function$.get","sicmutils.operator/identity","sicmutils.operator/joint-context","cljs.core/reduce-kv","joint-ctx","v","cv","cljs.core.isa_QMARK_","cljs.core.assoc","sicmutils.operator/combine-f-op","sym","sicmutils.function/coerce-to-fn","G__99623","G__99624","sicmutils.function$.compose","sicmutils.operator/combine-op-f","G__99625","G__99626","sicmutils.operator/negate","fs","sicmutils.generic/negate","cljs.core/meta","sicmutils.operator/o:-","sicmutils.value/zero?","xs","sicmutils.generic/sub","sicmutils.function/joint-arity","sicmutils.operator/f-o","sicmutils.operator/o-f","sicmutils.operator/o:+","sicmutils.generic/add","sicmutils.operator/f+o","sicmutils.operator/o+f","G__99628","sicmutils.operator/o:*","sicmutils.value/identity?","sicmutils.operator/f*o","gs","sicmutils.generic/mul","sicmutils.operator/o*f","cljs.core.map","sicmutils.operator/o-div-n","sicmutils.generic/invert","sicmutils.operator/commutator","sicmutils.generic._","sicmutils.generic._STAR_","sicmutils.operator/anticommutator","sicmutils.generic._PLUS_","sicmutils.operator/exp","sicmutils.series/exp-series","G__99630","sicmutils.operator/expn","sicmutils.series/inflate","cljs.core.derive","seq__99631","chunk__99632","count__99633","i__99634","vec__99641","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__99644","cljs.core/first","cljs.core/next","sicmutils.generic/exp","sicmutils.generic/cos","sicmutils.series/cos-series","sicmutils.generic/sin","sicmutils.series/sin-series","sicmutils.generic/tan","sicmutils.series/tan-series","sicmutils.generic/sec","sicmutils.series/sec-series","sicmutils.generic/acos","sicmutils.series/acos-series","sicmutils.generic/asin","sicmutils.series/asin-series","sicmutils.generic/atan","sicmutils.series/atan-series","sicmutils.generic/acot","sicmutils.series/acot-series","sicmutils.generic/cosh","sicmutils.series/cosh-series","sicmutils.generic/sinh","sicmutils.series/sinh-series","sicmutils.generic/tanh","sicmutils.series/tanh-series","sicmutils.generic/asinh","sicmutils.series/asinh-series","sicmutils.generic/atanh","sicmutils.series/atanh-series","assert-str","sicmutils.operator.o_COLON__STAR_","sicmutils.generic/square","sicmutils.generic/cube","sicmutils.generic/expt","cljs.core/not","sicmutils.generic/negative?","cljs.core.reduce","cljs.core.repeat","sicmutils.generic/div","sicmutils.generic/solve-linear-right","sicmutils.generic/solve-linear"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.operator\n  (:refer-clojure :exclude [get identity name])\n  (:require [clojure.core :as core]\n            [pattern.rule :refer [rule-simplifier] :include-macros true]\n            [sicmutils.differential :as d]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g]\n            [sicmutils.series :as series]\n            [sicmutils.simplify.rules :as rules]\n            [sicmutils.util :as u]\n            [sicmutils.value :as v])\n  #?(:clj\n     (:import (clojure.lang IFn ILookup IObj))))\n\n(def ^{:private true\n       :doc \"Simplifier that acts on associative products and sums, and collects\n  products into exponents. Operator multiplication is NOT associative, so only\n  adjacent products are collected.\"}\n  simplify-operator-name\n  (rule-simplifier\n   (rules/associative '+ '*)\n   rules/exponent-contract\n   (rules/unary-elimination '+ '*)))\n\n(declare op:get)\n\n(deftype Operator [o arity name context m]\n  v/Value\n  (zero? [this]\n    (if-let [z-fn (:zero? context)]\n      (z-fn this)\n      (= o v/zero-like)))\n\n  ;; NOTE: `one?` is the multiplicative identity; by default, we return false\n  ;; because the system doesn't currently check if the types match for\n  ;; multiplicative identity. So `(* o:identity 5)` would return 5, which is\n  ;; incorrect. (We should get back a new operator that carries the scale-by-5\n  ;; along until the final function resolves.)\n  (one? [this]\n    (if-let [one-fn (:one? context)]\n      (one-fn this)\n      false))\n\n  (identity? [this]\n    (if-let [id-fn (:identity? context)]\n      (id-fn this)\n      (= o core/identity)))\n\n  (zero-like [this]\n    (if-let [z-fn (:zero-like context)]\n      (z-fn this)\n      (Operator. v/zero-like arity 'zero context m)))\n\n  (one-like [this]\n    (if-let [one-fn (:one-like context)]\n      (one-fn this)\n      (Operator. core/identity arity 'identity context m)))\n\n  (identity-like [this]\n    (if-let [id-fn (:identity-like context)]\n      (id-fn this)\n      (Operator. core/identity arity 'identity context m)))\n\n  (freeze [_]\n    (simplify-operator-name\n     (v/freeze name)))\n\n  (kind [_] (:subtype context))\n\n  f/IArity\n  (arity [_] arity)\n\n  d/IPerturbed\n  (perturbed? [_] false)\n  (replace-tag [_ old new]\n    (Operator. (d/replace-tag o old new) arity name context m))\n  (extract-tangent [_ tag]\n    (Operator. (d/extract-tangent o tag) arity name context m))\n\n  #?@(:clj\n      [ILookup\n       (valAt [this k] (op:get this k))\n       (valAt [_ _ _]\n              (u/illegal \"Operators don't support the not-found arity of get!\"))])\n\n  Object\n  (toString [o]\n    (let [n (v/freeze o)]\n      (str (if (seqable? n)\n             (seq n)\n             n))))\n\n  #?@(:clj\n      [IObj\n       (meta [_] m)\n       (withMeta [_ meta] (Operator. o arity name context meta))\n\n       IFn\n       (invoke [_ f] (o f))\n       (invoke [_ f g] (o f g))\n       (invoke [_ f g h] (o f g h))\n       (invoke [_ f g h i] (o f g h i))\n       (applyTo [_ fns] (apply o fns))]\n\n      :cljs\n      [IMeta\n       (-meta [_] m)\n\n       IWithMeta\n       (-with-meta [_ meta] (Operator. o arity name context meta))\n\n       ILookup\n       (-lookup [this k] (op:get this k))\n       (-lookup [_ _ _]\n                (u/illegal \"Operators don't support the not-found arity of get!\"))\n\n       IFn\n       (-invoke [_ a] (o a))\n       (-invoke [_ a b] (o a b))\n       (-invoke [_ a b c] (o a b c))\n       (-invoke [_ a b c d] (o a b c d))\n       (-invoke [_ a b c d e] (o a b c d e))\n       (-invoke [_ a b c d e f] (o a b c d e f))\n       (-invoke [_ a b c d e f g] (o a b c d e f g))\n       (-invoke [_ a b c d e f g h] (o a b c d e f g h))\n       (-invoke [_ a b c d e f g h i] (o a b c d e f g h i))\n       (-invoke [_ a b c d e f g h i j] (o a b c d e f g h i j))\n       (-invoke [_ a b c d e f g h i j k] (o a b c d e f g h i j k))\n       (-invoke [_ a b c d e f g h i j k l] (o a b c d e f g h i j k l))\n       (-invoke [_ a b c d e f g h i j k l m]\n                (o a b c d e f g h i j k l m))\n       (-invoke [_ a b c d e f g h i j k l m n]\n                (o a b c d e f g h i j k l m n))\n       (-invoke [_ a b c d e f g h i j k l m n o-arg]\n                (o a b c d e f g h i j k l m n o-arg))\n       (-invoke [_ a b c d e f g h i j k l m n o-arg p]\n                (o a b c d e f g h i j k l m n o-arg p))\n       (-invoke [_ a b c d e f g h i j k l m n o-arg p q]\n                (o a b c d e f g h i j k l m n o-arg p q))\n       (-invoke [_ a b c d e f g h i j k l m n o-arg p q r]\n                (o a b c d e f g h i j k l m n o-arg p q r))\n       (-invoke [_ a b c d e f g h i j k l m n o-arg p q r s]\n                (o a b c d e f g h i j k l m n o-arg p q r s))\n       (-invoke [_ a b c d e f g h i j k l m n o-arg p q r s t]\n                (o a b c d e f g h i j k l m n o-arg p q r s t))\n       (-invoke [_ a b c d e f g h i j k l m n o-arg p q r s t rest]\n                (apply o a b c d e f g h i j k l m n o-arg p q r s t rest))]))\n\n#?(:cljs\n   (extend-type Operator\n     IPrintWithWriter\n     (-pr-writer [x writer _]\n       (write-all writer (.toString x)))))\n\n#?(:clj\n   (defmethod print-method Operator [^Operator op ^java.io.Writer w]\n     (.write w (.toString op))))\n\n(defn operator?\n  \"Returns true if the supplied `x` is an instance of [[Operator]], false\n  otherwise.\"\n  [x]\n  (instance? Operator x))\n\n(defn procedure\n  \"Returns the backing procedure of the supplied [[Operator]]. Errors if a\n  non-[[Operator]] is supplied.\"\n  [op]\n  (if (operator? op)\n    (.-o ^Operator op)\n    (u/illegal (str \"non-operator supplied: \" op))))\n\n(defn arity\n  \"Returns the arity of the supplied [[Operator]]. Errors if a non-[[Operator]] is\n  supplied.\"\n  [op]\n  (if (operator? op)\n    (.-arity ^Operator op)\n    (u/illegal (str \"non-operator supplied: \" op))))\n\n(defn name\n  \"Returns the stored name of the supplied [[Operator]]. Errors if a\n  non-[[Operator]] is supplied.\"\n  [op]\n  (if (operator? op)\n    (.-name ^Operator op)\n    (u/illegal (str \"non-operator supplied: \" op))))\n\n(defn context\n  \"Returns the context field of the supplied [[Operator]]. Errors if a\n  non-[[Operator]] is supplied.\"\n  [op]\n  (if (operator? op)\n    (.-context ^Operator op)\n    (u/illegal (str \"non-operator supplied: \" op))))\n\n(defn ^:no-doc with-context\n  \"Returns a copy of the supplied operator with `ctx` substituted for its\n  context.\"\n  [op ctx]\n  (if (operator? op)\n    (let [op ^Operator op]\n      (->Operator (.-o op) (.-arity op) (.-name op)\n                  ctx\n                  (.-m op)))\n    (u/illegal (str \"non-operator supplied: \" op))))\n\n(defn make-operator\n  \"Returns an [[Operator]] wrapping the supplied procedure `f` with the symbolic\n  name `name`. (`name` defaults to `'???`.)\n\n  Optionally accepts a `context` map that will be stored inside the\n  returned [[Operator]].\"\n  ([f]\n   (make-operator f '??? {}))\n  ([f name]\n   (make-operator f name {}))\n  ([f name context]\n   (->Operator f\n               (:arity context (f/arity f))\n               name\n               (into {:subtype ::operator} context)\n               nil)))\n\n(defn- op:get\n  \"Returns an [[Operator]] that composes a lookup of the form `#(get % k)` with\n  the wrapped procedure of the [[Operator]] `o`.\"\n  [o k]\n  (make-operator\n   (f/get (procedure o) k)\n   `(~'compose (~'component ~k)\n     ~(name o))))\n\n(def ^{:doc \"Identity operator. Returns its argument unchanged.\"}\n  identity\n  (make-operator core/identity 'identity))\n\n(defn- joint-context\n  \"Merges type context maps of the two operators. Where the maps have keys in\n  common, they must agree; disjoint keys become part of the new joint context.\n\n  The exception is the :subtype key; if the values aren't\n  equal, [[joint-context]] chooses the parent if one derives from the other, or\n  throws if not.\"\n  [o p]\n  {:pre [(operator? o)\n         (operator? p)]}\n  (reduce-kv (fn [joint-ctx k v]\n               (if-let [cv (k joint-ctx)]\n                 (cond (= v cv)  joint-ctx\n\n                       (and (= k :subtype) (isa? cv v))\n                       (assoc joint-ctx k v)\n\n                       (and (= k :subtype) (isa? v cv))\n                       joint-ctx\n\n                       :else\n                       (u/illegal\n                        (str \"incompatible operator context: \"\n                             (context o) (context p)\n                             \" at key: \" k)))\n                 (assoc joint-ctx k v)))\n             (context o)\n             (context p)))\n\n(defn- combine-f-op\n  \"Returns a new operator generated by combining a non-operator `f` on the left\n  with an operator `o` on the right, using the binary operation `op`.\n\n  `sym` is used to generate a proper symbolic name for the new operator.\n\n  The combination occurs by coercing `f` to an operator that composes with its\n  argument before combining with `operator`. As an example, the following two\n  expressions are equivalent:\n\n  (+ <f> <operator>)\n\n  (+ (make-operator (fn [g] (comp <f> g)) <name>)\n     <operator>)\n\n  If `f` isn't already a function it's coerced to a function via `(constantly\n  <f>)`.\"\n  [op sym f o]\n  (let [h (f/coerce-to-fn f [:exactly 1])]\n    (->Operator (fn [g] (op (f/compose h g) (o g)))\n                (arity o)\n\t              `(~sym ~(v/freeze f) ~(name o))\n                (context o)\n                nil)))\n\n(defn- combine-op-f\n  \"Returns a new operator generated by combining an operator `o` on the left with\n  a non-operator `f` on the right, using the binary operation `op`.\n\n  `sym` is used to generate a proper symbolic name for the new operator.\n\n  The combination occurs by coercing `f` to an operator that composes with its\n  argument before combining with `operator`. As an example, the following two\n  expressions are equivalent:\n\n  (+ <operator> <f>)\n\n  (+ <operator>\n     (make-operator (fn [g] (comp <f> g)) <name>))\n\n  If `f` isn't already a function it's coerced to a function via `(constantly\n  <f>)`.\"\n  [op sym o f]\n  (let [h (f/coerce-to-fn f [:exactly 1])]\n    (->Operator (fn [g] (op (o g) (f/compose h g)))\n                (arity o)\n\t              `(~sym ~(name o) ~(v/freeze f))\n                (context o)\n                nil)))\n\n(defn- negate\n  \"Returns a new operator that composes [[g/negate]] with its own wrapped\n  operation. Equivalent to:\n\n  (g/* (make-operator g/negate 'negate) o)\"\n  [o]\n  (->Operator (fn [& fs]\n                (g/negate (apply o fs)))\n              (arity o)\n              (list '- (name o))\n\t            (context o)\n              (meta o)))\n\n(defn- o:-\n  \"Subtract one operator from another. Produces an operator which computes the\n  difference of applying the supplied operators.\"\n  [o p]\n  (let [ctx (joint-context o p)]\n    (if (v/zero? p)\n      (with-context o ctx)\n      (->Operator (fn [& xs]\n                    (g/sub (apply o xs)\n                           (apply p xs)))\n                  (f/joint-arity [(arity o) (arity p)])\n                  `(~'- ~(name o) ~(name p))\n                  ctx\n                  nil))))\n\n(defn- f-o [f o] (combine-f-op g/sub '- f o))\n(defn- o-f [o f] (combine-op-f g/sub '- o f))\n\n(defn- o:+\n  \"Add two operators. Produces an operator which adds the result of applying the\n  given operators.\"\n  [o p]\n  (let [ctx (joint-context o p)]\n    (cond (v/zero? o) (with-context p ctx)\n          (v/zero? p) (with-context o ctx)\n          :else\n          (->Operator (fn [& xs]\n                        (g/add (apply o xs)\n                               (apply p xs)))\n                      (f/joint-arity [(f/arity o) (f/arity p)])\n                      `(~'+ ~(name o) ~(name p))\n                      ctx\n                      nil))))\n\n(defn- f+o [f o] (combine-f-op g/add '+ f o))\n(defn- o+f [o f] (combine-op-f g/add '+ o f))\n\n(defn- o:*\n  \"Multiplication of operators is defined as their composition.\"\n  ([] identity)\n  ([o] o)\n  ([o p]\n   (let [ctx (joint-context o p)]\n     (cond (v/identity? o) (with-context p ctx)\n           (v/identity? p) (with-context o ctx)\n           (v/zero? o)     (with-context o ctx)\n           :else\n           (->Operator (f/compose o p)\n                       (arity p)\n                       `(~'* ~(name o) ~(name p))\n                       ctx\n                       nil)))))\n\n(defn- f*o\n  \"Multiply an operator by a non-operator on the left. The non-operator acts on\n  its argument by multiplication.\"\n  [f o]\n  (->Operator (fn [& gs]\n                (g/mul f (apply o gs)))\n              (arity o)\n              `(~'* ~(v/freeze f) ~(name o))\n              (context o)\n              (meta o)))\n\n(defn- o*f\n  \"Multiply an operator by a non-operator on the right. The non-operator acts on\n  its argument by multiplication.\"\n  [o f]\n  (->Operator (fn [& gs]\n                (apply o (map (fn [g] (g/mul f g)) gs)))\n              (arity o)\n              `(~'* ~(name o) ~(v/freeze f))\n              (context o)\n              (meta o)))\n\n(defn- o-div-n\n  \"Returns a new operator that multiplies the output of `o` by the inverse of\n  `n`.\"\n  [o n]\n  (->Operator (fn [& gs]\n                (g/mul (g/invert n) (apply o gs)))\n              (arity o)\n\t            `(~'/ ~(name o) ~n)\n              (context o)\n              (meta o)))\n\n(defn commutator [o p]\n  (g/- (g/* o p) (g/* p o)))\n\n(defn anticommutator [o p]\n  (g/+ (g/* o p) (g/* p o)))\n\n(defn exp\n  \"Returns an operator represented by a Taylor series expansion of $e^x$, applied\n  to `op`. This expanded series of operators is itself an operator that applies\n  each element to its argument.\n\n  Put another way: `(exp g)` to an operator g means forming the power series\n\n  ```\n  I + g + 1/2 g^2 + ... + 1/n! g^n\n  ```\n\n  where (as elsewhere) exponentiating the operator means `n`-fold composition.\"\n  [op]\n  (assert (= (arity op) [:exactly 1]) \"sicmutils.operator/exp\")\n  (->Operator (series/exp-series op)\n              [:exactly 1]\n              `(~'exp ~(name op))\n              (context op)\n              (meta op)))\n\n(defn expn\n  \"Similar to `exp`, but takes an optional argument `n` that defines an order for\n  each term of the taylor series expansion.\"\n  ([op] (exp op))\n  ([op n]\n   (assert (= (arity op) [:exactly 1]) \"sicmutils.operator/expn\")\n   (->Operator (-> (series/exp-series op)\n                   (series/inflate n))\n               [:exactly 1]\n               `(~'exp ~(name op))\n               (context op)\n               (meta op))))\n\n(derive ::v/scalar ::co-operator)\n(derive ::v/function ::co-operator)\n\n(doseq [[op f sym] [[g/exp series/exp-series 'exp]\n                    [g/cos series/cos-series 'cos]\n                    [g/sin series/sin-series 'sin]\n                    [g/tan series/tan-series 'tan]\n                    [g/sec series/sec-series 'sec]\n                    [g/acos series/acos-series 'acos]\n                    [g/asin series/asin-series 'asin]\n                    [g/atan series/atan-series 'atan]\n                    [g/acot series/acot-series 'acot]\n                    [g/cosh series/cosh-series 'cosh]\n                    [g/sinh series/sinh-series 'sinh]\n                    [g/tanh series/tanh-series 'tanh]\n                    [g/asinh series/asinh-series 'asinh]\n                    [g/atanh series/atanh-series 'atanh]]]\n  (let [assert-str (str \"g/\" sym \" :sicmutils.operator/operator\")]\n    (defmethod op [::operator] [g]\n      (assert (= (arity g) [:exactly 1]) assert-str)\n      (->Operator (f g)\n                  [:exactly 1]\n                  `(~sym ~(name g))\n                  (context g)\n                  nil))))\n\n(defmethod g/add [::operator ::operator] [o p] (o:+ o p))\n(defmethod g/add [::operator ::co-operator] [o f] (o+f o f))\n(defmethod g/add [::co-operator ::operator] [f o] (f+o f o))\n\n(defmethod g/negate [::operator] [o] (negate o))\n\n(defmethod g/sub [::operator ::operator] [o p] (o:- o p))\n(defmethod g/sub [::operator ::co-operator] [o f] (o-f o f))\n(defmethod g/sub [::co-operator ::operator] [f o] (f-o f o))\n\n(defmethod g/mul [::operator ::operator] [o p] (o:* o p))\n(defmethod g/mul [::operator ::co-operator] [o f] (o*f o f))\n(defmethod g/mul [::co-operator ::operator] [f o] (f*o f o))\n\n(defmethod g/square [::operator] [o] (o:* o o))\n(defmethod g/cube [::operator] [o] (o:* o (o:* o o)))\n(defmethod g/expt [::operator ::v/native-integral] [o n]\n  {:pre [(not (g/negative? n))]}\n  (reduce o:* (repeat n o)))\n\n(defmethod g/div [::operator ::v/scalar] [o n] (o-div-n o n))\n(defmethod g/solve-linear-right [::operator ::v/scalar] [o n] (o-div-n o n))\n(defmethod g/solve-linear [::v/scalar ::operator] [n o] (o-div-n o n))\n"]}