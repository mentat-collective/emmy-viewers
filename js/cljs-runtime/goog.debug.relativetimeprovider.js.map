{
"version":3,
"file":"goog.debug.relativetimeprovider.js",
"lineCount":21,
"mappings":"AAUAA,IAAKC,CAAAA,OAAL,CAAa,iCAAb,CAAA;AAeAD,IAAKE,CAAAA,KAAMC,CAAAA,oBAAX,GAAkCC,QAAQ,EAAG;AAO3C,MAAKC,CAAAA,kBAAL,GAA0BL,IAAKM,CAAAA,GAAL,EAA1B;AAP2C,CAA7C;AAgBAN,IAAKE,CAAAA,KAAMC,CAAAA,oBAAqBI,CAAAA,gBAAhC,GAAmD,IAAnD;AAOAP,IAAKE,CAAAA,KAAMC,CAAAA,oBAAqBK,CAAAA,SAAUC,CAAAA,GAA1C,GAAgDC,QAAQ,CAACC,SAAD,CAAY;AAElE,MAAKN,CAAAA,kBAAL,GAA0BM,SAA1B;AAFkE,CAApE;AASAX,IAAKE,CAAAA,KAAMC,CAAAA,oBAAqBK,CAAAA,SAAUI,CAAAA,KAA1C,GAAkDC,QAAQ,EAAG;AAE3D,MAAKJ,CAAAA,GAAL,CAAST,IAAKM,CAAAA,GAAL,EAAT,CAAA;AAF2D,CAA7D;AASAN,IAAKE,CAAAA,KAAMC,CAAAA,oBAAqBK,CAAAA,SAAUM,CAAAA,GAA1C,GAAgDC,QAAQ,EAAG;AAEzD,SAAO,IAAKV,CAAAA,kBAAZ;AAFyD,CAA3D;AASAL,IAAKE,CAAAA,KAAMC,CAAAA,oBAAqBa,CAAAA,kBAAhC,GAAqDC,QAAQ,EAAG;AAE9D,MAAI,CAACjB,IAAKE,CAAAA,KAAMC,CAAAA,oBAAqBI,CAAAA,gBAArC;AACEP,QAAKE,CAAAA,KAAMC,CAAAA,oBAAqBI,CAAAA,gBAAhC,GACI,IAAIP,IAAKE,CAAAA,KAAMC,CAAAA,oBAAf,EADJ;AADF;AAIA,SAAOH,IAAKE,CAAAA,KAAMC,CAAAA,oBAAqBI,CAAAA,gBAAvC;AAN8D,CAAhE;;",
"sources":["goog/debug/relativetimeprovider.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Definition the goog.debug.RelativeTimeProvider class.\n */\n\ngoog.provide('goog.debug.RelativeTimeProvider');\n\n\n\n/**\n * A simple object to keep track of a timestamp considered the start of\n * something. The main use is for the logger system to maintain a start time\n * that is occasionally reset. For example, in Gmail, we reset this relative\n * time at the start of a user action so that timings are offset from the\n * beginning of the action. This class also provides a singleton as the default\n * behavior for most use cases is to share the same start time.\n *\n * @constructor\n * @final\n */\ngoog.debug.RelativeTimeProvider = function() {\n  'use strict';\n  /**\n   * The start time.\n   * @type {number}\n   * @private\n   */\n  this.relativeTimeStart_ = goog.now();\n};\n\n\n/**\n * Default instance.\n * @type {?goog.debug.RelativeTimeProvider}\n * @private\n */\ngoog.debug.RelativeTimeProvider.defaultInstance_ = null;\n\n\n/**\n * Sets the start time to the specified time.\n * @param {number} timeStamp The start time.\n */\ngoog.debug.RelativeTimeProvider.prototype.set = function(timeStamp) {\n  'use strict';\n  this.relativeTimeStart_ = timeStamp;\n};\n\n\n/**\n * Resets the start time to now.\n */\ngoog.debug.RelativeTimeProvider.prototype.reset = function() {\n  'use strict';\n  this.set(goog.now());\n};\n\n\n/**\n * @return {number} The start time.\n */\ngoog.debug.RelativeTimeProvider.prototype.get = function() {\n  'use strict';\n  return this.relativeTimeStart_;\n};\n\n\n/**\n * @return {!goog.debug.RelativeTimeProvider} The default instance.\n */\ngoog.debug.RelativeTimeProvider.getDefaultInstance = function() {\n  'use strict';\n  if (!goog.debug.RelativeTimeProvider.defaultInstance_) {\n    goog.debug.RelativeTimeProvider.defaultInstance_ =\n        new goog.debug.RelativeTimeProvider();\n  }\n  return goog.debug.RelativeTimeProvider.defaultInstance_;\n};\n"],
"names":["goog","provide","debug","RelativeTimeProvider","goog.debug.RelativeTimeProvider","relativeTimeStart_","now","defaultInstance_","prototype","set","goog.debug.RelativeTimeProvider.prototype.set","timeStamp","reset","goog.debug.RelativeTimeProvider.prototype.reset","get","goog.debug.RelativeTimeProvider.prototype.get","getDefaultInstance","goog.debug.RelativeTimeProvider.getDefaultInstance"]
}
