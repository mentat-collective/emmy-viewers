{
"version":3,
"file":"module$node_modules$mdurl$encode.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/mdurl/encode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mdurl$encode\"] = function(global,require,module,exports) {\n\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n\n};"],
"names":["shadow$provide","global","require","module","exports","encode","string","exclude","keepEscaped","l","result","defaultChars","cache","encodeCache","i","ch","String","fromCharCode","test","push","slice","toString","toUpperCase","length","charCodeAt","code","nextCode","encodeURIComponent","componentChars"]
}
