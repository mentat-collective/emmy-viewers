shadow$provide.module$node_modules$$mentatcollective$jsxgraph$src$base$turtle=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _jxg=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$jxg")),_constants=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$constants"));global=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$element"));
var _type=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$utils$type"));_jxg.default.Turtle=function(board,parents,attributes){this.constructor(board,attributes,_constants.default.OBJECT_TYPE_TURTLE,_constants.default.OBJECT_CLASS_OTHER);this.turtleIsHidden=!1;this.board=board;this.visProp.curveType="plot";this._attributes=_type.default.copyAttributes(this.visProp,board.options,"turtle");delete this._attributes.id;attributes=board=0;var dir=90;0!==parents.length&&
(3===parents.length?(board=parents[0],attributes=parents[1],dir=parents[2]):2===parents.length?_type.default.isArray(parents[0])?(board=parents[0][0],attributes=parents[0][1],dir=parents[1]):(board=parents[0],attributes=parents[1]):(board=parents[0][0],attributes=parents[0][1]));this.init(board,attributes,dir);this.methodMap=_type.default.deepCopy(this.methodMap,{forward:"forward",fd:"forward",back:"back",bk:"back",right:"right",rt:"right",left:"left",lt:"left",penUp:"penUp",pu:"penUp",penDown:"penDown",
pd:"penDown",clearScreen:"clearScreen",cs:"clearScreen",clean:"clean",setPos:"setPos",home:"home",hideTurtle:"hideTurtle",ht:"hideTurtle",showTurtle:"showTurtle",st:"showTurtle",penSize:"setPenSize",penColor:"setPenColor",pushTurtle:"pushTurtle",push:"pushTurtle",popTurtle:"popTurtle",pop:"popTurtle",lookTo:"lookTo",pos:"pos",moveTo:"moveTo",X:"X",Y:"Y"});return this};_jxg.default.Turtle.prototype=new global.default;_jxg.default.extend(_jxg.default.Turtle.prototype,{init:function(x,y,dir){var hiddenPointAttr=
{fixed:!0,name:"",visible:!1,withLabel:!1};this.arrowLen=20/Math.sqrt(this.board.unitX*this.board.unitX+this.board.unitY*this.board.unitY);this.pos=[x,y];this.isPenDown=!0;this.dir=90;this.stack=[];this.objects=[];this.curve=this.board.create("curve",[[this.pos[0]],[this.pos[1]]],this._attributes);this.objects.push(this.curve);this.turtle=this.board.create("point",this.pos,hiddenPointAttr);this.objects.push(this.turtle);this.turtle2=this.board.create("point",[this.pos[0],this.pos[1]+this.arrowLen],
hiddenPointAttr);this.objects.push(this.turtle2);this.visProp.arrow.lastArrow=!0;this.visProp.arrow.straightFirst=!1;this.visProp.arrow.straightLast=!1;this.arrow=this.board.create("line",[this.turtle,this.turtle2],this.visProp.arrow);this.objects.push(this.arrow);this.subs={arrow:this.arrow};this.inherits.push(this.arrow);this.right(90-dir);this.board.update()},forward:function(len){if(0===len)return this;var dx=len*Math.cos(this.dir*Math.PI/180),dy=len*Math.sin(this.dir*Math.PI/180);this.turtleIsHidden||
(len=this.board.create("transform",[dx,dy],{type:"translate"}),len.applyOnce(this.turtle),len.applyOnce(this.turtle2));this.isPenDown&&8192<=this.curve.dataX.length&&(this.curve=this.board.create("curve",[[this.pos[0]],[this.pos[1]]],this._attributes),this.objects.push(this.curve));this.pos[0]+=dx;this.pos[1]+=dy;this.isPenDown&&(this.curve.dataX.push(this.pos[0]),this.curve.dataY.push(this.pos[1]));this.board.update();return this},back:function(len){return this.forward(-len)},right:function(angle){this.dir-=
angle;this.dir%=360;this.turtleIsHidden||this.board.create("transform",[-angle*Math.PI/180,this.turtle],{type:"rotate"}).applyOnce(this.turtle2);this.board.update();return this},left:function(angle){return this.right(-angle)},penUp:function(){this.isPenDown=!1;return this},penDown:function(){this.isPenDown=!0;this.curve=this.board.create("curve",[[this.pos[0]],[this.pos[1]]],this._attributes);this.objects.push(this.curve);return this},clean:function(){var i;for(i=0;i<this.objects.length;i++){var el=
this.objects[i];el.type===_constants.default.OBJECT_TYPE_CURVE&&(this.board.removeObject(el),this.objects.splice(i,1))}this.curve=this.board.create("curve",[[this.pos[0]],[this.pos[1]]],this._attributes);this.objects.push(this.curve);this.board.update();return this},clearScreen:function(){var i,len=this.objects.length;for(i=0;i<len;i++){var el=this.objects[i];this.board.removeObject(el)}this.init(0,0,90);return this},setPos:function(x,y){_type.default.isArray(x)?this.pos=x:this.pos=[x,y];this.turtleIsHidden||
(this.turtle.setPositionDirectly(_constants.default.COORDS_BY_USER,[x,y]),this.turtle2.setPositionDirectly(_constants.default.COORDS_BY_USER,[x,y+this.arrowLen]),x=this.board.create("transform",[-(this.dir-90)*Math.PI/180,this.turtle],{type:"rotate"}),x.applyOnce(this.turtle2));this.curve=this.board.create("curve",[[this.pos[0]],[this.pos[1]]],this._attributes);this.objects.push(this.curve);this.board.update();return this},setPenSize:function(size){this.curve=this.board.create("curve",[[this.pos[0]],
[this.pos[1]]],this.copyAttr("strokeWidth",size));this.objects.push(this.curve);return this},setPenColor:function(color){this.curve=this.board.create("curve",[[this.pos[0]],[this.pos[1]]],this.copyAttr("strokeColor",color));this.objects.push(this.curve);return this},setHighlightPenColor:function(color){this.curve=this.board.create("curve",[[this.pos[0]],[this.pos[1]]],this.copyAttr("highlightStrokeColor",color));this.objects.push(this.curve);return this},setAttribute:function(attributes){var i,len=
this.objects.length;for(i=0;i<len;i++){var el=this.objects[i];el.type===_constants.default.OBJECT_TYPE_CURVE&&el.setAttribute(attributes)}attributes=this.visProp.id;this.visProp=_type.default.deepCopy(this.curve.visProp);this.visProp.id=attributes;this._attributes=_type.default.deepCopy(this.visProp);delete this._attributes.id;return this},copyAttr:function(key,val){this._attributes[key.toLowerCase()]=val;return this._attributes},showTurtle:function(){this.turtleIsHidden=!1;this.arrow.setAttribute({visible:!0});
this.visProp.arrow.visible=!1;this.setPos(this.pos[0],this.pos[1]);this.board.update();return this},hideTurtle:function(){this.turtleIsHidden=!0;this.arrow.setAttribute({visible:!1});this.visProp.arrow.visible=!1;this.board.update();return this},home:function(){this.pos=[0,0];this.setPos(this.pos[0],this.pos[1]);return this},pushTurtle:function(){this.stack.push([this.pos[0],this.pos[1],this.dir]);return this},popTurtle:function(){var status=this.stack.pop();this.pos[0]=status[0];this.pos[1]=status[1];
this.dir=status[2];this.setPos(this.pos[0],this.pos[1]);return this},lookTo:function(target){if(_type.default.isArray(target)){var ax=this.pos[0];var ay=this.pos[1];var bx=target[0];target=target[1];ax=Math.atan2(target-ay,bx-ax);this.right(this.dir-180*ax/Math.PI)}else _type.default.isNumber(target)&&this.right(this.dir-target);return this},moveTo:function(target){if(_type.default.isArray(target)){var dx=target[0]-this.pos[0];var dy=target[1]-this.pos[1];this.turtleIsHidden||(dx=this.board.create("transform",
[dx,dy],{type:"translate"}),dx.applyOnce(this.turtle),dx.applyOnce(this.turtle2));this.isPenDown&&8192<=this.curve.dataX.length&&(this.curve=this.board.create("curve",[[this.pos[0]],[this.pos[1]]],this._attributes),this.objects.push(this.curve));this.pos[0]=target[0];this.pos[1]=target[1];this.isPenDown&&(this.curve.dataX.push(this.pos[0]),this.curve.dataY.push(this.pos[1]));this.board.update()}return this},fd:function(len){return this.forward(len)},bk:function(len){return this.back(len)},lt:function(angle){return this.left(angle)},
rt:function(angle){return this.right(angle)},pu:function(){return this.penUp()},pd:function(){return this.penDown()},ht:function(){return this.hideTurtle()},st:function(){return this.showTurtle()},cs:function(){return this.clearScreen()},push:function(){return this.pushTurtle()},pop:function(){return this.popTurtle()},evalAt:function(t,co){var i,j,len=this.objects.length;for(j=i=0;i<len;i++){var el=this.objects[i];if(el.elementClass===_constants.default.OBJECT_CLASS_CURVE){if(j<=t&&t<j+el.numberPoints)return t-=
j,el[co](t);j+=el.numberPoints}}return this[co]()},X:function(t){return _type.default.exists(t)?this.evalAt(t,"X"):this.pos[0]},Y:function(t){return _type.default.exists(t)?this.evalAt(t,"Y"):this.pos[1]},Z:function(t){return 1},minX:function(){return 0},maxX:function(){var i,len=this.objects.length,np=0;for(i=0;i<len;i++){var el=this.objects[i];el.elementClass===_constants.default.OBJECT_CLASS_CURVE&&(np+=this.objects[i].numberPoints)}return np},hasPoint:function(x,y){var i;for(i=0;i<this.objects.length;i++){var el=
this.objects[i];if(el.type===_constants.default.OBJECT_TYPE_CURVE&&el.hasPoint(x,y))return!0}return!1}});_jxg.default.createTurtle=function(board,parents,attributes){parents=parents||[];attributes=_type.default.copyAttributes(attributes,board.options,"turtle");return new _jxg.default.Turtle(board,parents,attributes)};_jxg.default.registerElement("turtle",_jxg.default.createTurtle);exports.default={Turtle:_jxg.default.Turtle,createTurtle:_jxg.default.createTurtle}}
//# sourceMappingURL=module$node_modules$$mentatcollective$jsxgraph$src$base$turtle.js.map
