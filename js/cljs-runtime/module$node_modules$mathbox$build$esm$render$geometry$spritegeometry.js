shadow$provide.module$node_modules$mathbox$build$esm$render$geometry$spritegeometry=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.SpriteGeometry=void 0;var _BufferAttribute=require("module$node_modules$three$src$core$BufferAttribute");global=require("module$node_modules$mathbox$build$esm$render$geometry$clipgeometry");class SpriteGeometry extends global.ClipGeometry{constructor(options){let height,items,width;super(options);this._clipUniforms();
this.items=items=+options.items||2;this.width=width=+options.width||1;this.height=height=+options.height||1;this.depth=options=+options.depth||1;const samples=items*width*height*options;var points=4*samples;this.setIndex(new _BufferAttribute.BufferAttribute(new Uint32Array(6*samples),1));this.setAttribute("position4",new _BufferAttribute.BufferAttribute(new Float32Array(4*points),4));this.setAttribute("sprite",new _BufferAttribute.BufferAttribute(new Float32Array(2*points),2));points=this._emitter("index");
const position=this._emitter("position4"),sprite=this._emitter("sprite"),quad=[[-1,-1],[-1,1],[1,-1],[1,1]];let base=0;for(let i=0,end=samples,asc=0<=end;asc?i<end:i>end;asc?i++:i--)points(base),points(base+1),points(base+2),points(base+1),points(base+2),points(base+3),base+=4;for(let z=0,end1=options,asc1=0<=end1;asc1?z<end1:z>end1;asc1?z++:z--)for(let y=0,end2=height,asc2=0<=end2;asc2?y<end2:y>end2;asc2?y++:y--)for(let x=0,end3=width,asc3=0<=end3;asc3?x<end3:x>end3;asc3?x++:x--)for(let l=0,end4=
items,asc4=0<=end4;asc4?l<end4:l>end4;asc4?l++:l--)for(const v of Array.from(quad))position(x,y,z,l),sprite(v[0],v[1]);this._finalize();this.clip()}clip(width,height,depth,items){null==width&&({width}=this);null==height&&({height}=this);null==depth&&({depth}=this);null==items&&({items}=this);this._clipGeometry(width,height,depth,items);return this._clipOffsets(6,width,height,depth,items,this.width,this.height,this.depth,this.items)}}exports.SpriteGeometry=SpriteGeometry}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$render$geometry$spritegeometry.js.map
