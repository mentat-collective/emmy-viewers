{"version":3,"sources":["sicmutils/numerical/multimin/nelder_mead.cljc"],"mappings":";AAKA;;;mDAAA,nDAAOA,8GAEJC,EAAEC;AAFL,AAGE,OAACC,6CAAKC,iBAAEH,EAAEC;;AAEZ;;;8CAAA,9CAAOG,oGAEJJ,EAAEC;AAFL,AAGE,OAACC,6CAAKG,YAAEL,EAAEC;;AAEZ;;;mDAAA,nDAAOK,8GAEJC,EAAEC;AAFL,AAGE,oDAAA,WAAAC,xDAACP;AAAD,AAAO,YAAAO,JAAGF;GAAKC;;AAEjB;;;;2DAAA,sEAAAE,jIAAgBI,8HAGbC;AAHH,AAAA,IAAAJ,cAAAD;IAAAC,kBAAA,AAAAC,4BAAAD;oBAAA,AAAAE,4CAAAF,gBAAA,uEAAA,nJAGcK;iBAHd,AAAAH,4CAAAF,gBAAA,kEAAA,3IAG4BM;AAH5B,AAME,IAAMF,SAAG,AAACG,cAAIH;IACRI,QAAM,iBAAA,hBAAKH;IACXI,IAAE,WAAKC,EAAEC;AAAP,AACE,IAAMC,YAAU,EAAI,QAAA,PAAOD,aACTL,WACA,CAAGE,QAAMG;AAF3B,AAGE,OAACE,8CAAMT,OAAGM,EAAEE;;AANxB,AAOE,oDAAA,7CAACE,gIAAMV,eAAI,AAACW,oDAAYN,EAAEL;;AAE9B;;;;oDAAA,4DAAAY,hHAAgBG;AAAhB,AAAA,IAAAF,cAAAD;SAAA,AAAAE,4CAAAD,YAAA,IAAA,jEAGIb;cAHJa,VAGWG;AAHX,AAIE,IAAMC,SAAO,EAAI,AAACC,4BAAYlB,KACf,sDAAA,WAAAmB,jEAACC;AAAD,AAAS,mDAAAD,5CAAC9B,8DAAKW;qDAAIgB,cACnB,4CAAA,WAAAK,vDAACC;AAAD,AAAM,QAAAD,oBAAKrB;GAAIgB;AAF9B,AAGE,OAACO,+CAAOC,cAAI,AAACF,4CAAIG,2BAAcR;;AAEnC;;;;;mDAAA,nDAAgBS,8GAIbrB;AAJH,AAKE,IAAMsB,QAAM,6CAAA,7CAACC;AAAb,AAAA,0FACGD,MAAM,WAAKE;AAAL,AACE,AAACC,mDAAMH,MAAMI;;AACb,QAAC1B,kCAAAA,qCAAAA,LAAEwB,iBAAAA;;;AAEhB,AAAA;;;;;qDAAA,6DAAAG,lHAAgBE;AAAhB,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mFAAA,nFAAgBD,8FAIZlB,QAAQoB;AAJZ,AAKG,OAACC,iFAAUrB,QAAQoB,UAAU,AAACE,gBAAM,AAACC,eAAKvB;;;AAL7C,CAAA,mFAAA,nFAAgBkB,8FAMZlB,QAAQoB,UAAUI;AANtB,AAOG,IAAMC,eAAa,AAACC,gDAAQ,AAACC,gDAAQC,cAAIR,WACb,8CAAA,9CAACS,kDAAQ,aAAA,ZAAKL;IACpCM,iBAAgB,AAAC3D,6CAAK6B,QAAQyB;IAC9BM,kBAAgB,AAAC5D,6CAAKiD,UAAUK;AAHtC,AAAA,0FAIGK,eAAeC;;;AAXrB,CAAA,6EAAA,7EAAgBb;;AAAhB,AAaA;;;;;;yDAAA,2EAAAc,pIAAgBE,0HAKbV;AALH,AAAA,IAAAS,cAAAD;IAAAC,kBAAA,AAAApD,4BAAAoD;QAAAA,JAOkBG;sBAPlB,AAAAtD,4CAAAmD,gBAAA,+DAAA,7IAKqBE;AALrB,AAQE,IAAME,OAAK,mCAAA,2CAAA,wDAAA,IAAA,8EAAA,0FAAA,wFAAA,2CAAA,wDAAA,IAAA,oDAAA,IAAA,uDAAA,IAAA,sDAAA,xoBAAIF,4KAEK,CAAA,MAAO,CAAA,MAAOX,mEACb,CAAA,OAAQ,CAAA,MAAG,CAAA,MAAOA,mEAClB,CAAA,MAAO,CAAA,MAAGA;AAJ/B,AASE,OAACc,uGAAMD,KAAK,wBAAA,mFAAA,wDAAA,oDAAA,uDAAA,9QAACE,sBAAYH;;AAE7B;;;;;;;;;;;;;;;;mDAAA,nDAAgBI,8GAeZnD,EAAEmC,UAAUiB;AAfhB,AAgBG,IAAAC,cAAuC,AAACR,uDAAcV,UAAUiB;IAAhEC,kBAAA,AAAA7D,4BAAA6D;YAAA,AAAA5D,4CAAA4D,gBAAA,pEAAcC;WAAd,AAAA7D,4CAAA4D,gBAAA,nEAAoBE;YAApB,AAAA9D,4CAAA4D,gBAAA,pEAAyBG;YAAzB,AAAA/D,4CAAA4D,gBAAA,pEAA+BI;AAA/B,AACE,kBAAA,yEAAsB9C;AAAtB,AACU,OAACzB,iDAAG,CAAA,MAAGiD,WAAW,AAACjB,+CAAOvC,iDAAG,AAACsF,cAAItD;;cAD5C,qEAKkBA,QAAQuD;AAL1B,AAMU,OAAClF,4CAAG,AAACE,iDAAG,SAAA,RAAKoE,aAAOY,UAChB,AAAChF,iDAAGoE,MAAM,AAACpB,eAAKvB;;qBAP9B,4EAYyBA,QAAQuD;AAZjC,AAaU,OAAClF,4CAAG,AAACE,iDAAG,kBAAA,jBAAK,CAAGoE,QAAMC,aAAOW,UACzB,AAAChF,iDAAG,CAAGoE,QAAMC,MAAM,AAACrB,eAAKvB;;uBAdvC,8EAkB2BA,QAAQuD;AAlBnC,AAmBU,OAAClF,4CAAG,AAACE,iDAAG,mBAAA,lBAAK,CAAGuE,QAAMH,cAAQY,UAC1B,AAAChF,iDAAG,CAAGuE,QAAMH,OAAO,AAACpB,eAAKvB;;eApBxC,sEAwBmBA,QAAQuD;AAxB3B,AAyBU,OAACvF,iDAAG,AAACO,iDAAG,CAAA,MAAKuE,OAAOS,UAChB,AAAChF,iDAAGuE,MAAM,AAACvB,eAAKvB;;aA1B9B,oEAAA+C;AAAA,AAAA,IAAAC,cAAAD;IAAAE,cAAA,AAAAC,cAAAF;IAAAG,gBAAA,AAAAC,gBAAAH;IAAAA,kBAAA,AAAAI,eAAAJ;SAAAE,LAgCkBK;WAhClBP,PAgCuBQ;AAhCvB,AAiCU,sBAAA,WAAAC,7BAAMC;AAAN,AAAuB,OAAC3F,iDAAGwF,GAAG,AAACjF,iDAAGsE,MAAM,4CAAAa,5CAACrF,8DAAKmF;;IACxChF,IAAE,6CAAA,7CAACkB,gIAAM8D,WAAI,AAAClD,4CAAIqD,gBAAgBF;AADxC,AAEE,OAACpC,iFAAU7C,EAAE,AAACL,6CAAKkB,EAAEb,GAAGgD;;AAnCpC,AAqCE,0BAAAoC,RAAK5D;AAAL,AAAA,IAAA6D,cAAAD;aAAA,AAAA9D,4CAAA+D,YAAA,IAAA,rEAAcG;gBAAdH,ZAAyBzC;AAAzB,AAAA,oBAES,AAAC6C,8CAAMC,mBAAG9C;AAFnB;AAAA,AAAA,MAAA,KAAAD,MAAA;;;AAAA,IAAA2C,YAIE,iBAAMM,aAAW,WAAKC,KAAKC;AAAV,AACE,IAAM9F,IAAG,AAAC+F,6CAAK,AAACjB,cAAItD,SAASqE;IACvBG,KAAG,AAACD,6CAAK,AAACjB,cAAIlC,WAAWkD;AAD/B,AAEE,OAACjD,iFAAU7C,EAAEgG,GAAGhD;;IAC/BiD,UAAW,AAAClD,eAAKH;IACjBsD,aAAW,AAACnD,eAAK,AAAC+B,cAAIlC;IACtBmC,WAAW,AAACoB,YAAY3E;IACxB4E,YAAW,AAACC,QAAQ7E,QAAQuD;IAC5BuB,KAAW,CAACzF,kCAAAA,6CAAAA,bAAEuF,yBAAAA;AARpB,AASE,GAME,CAAGE,KAAGd;AACN,IAAMe,WAAS,AAACC,eAAehF,QAAQuD;IACjC0B,KAAG,CAAC5F,kCAAAA,4CAAAA,ZAAE0F,wBAAAA;AADZ,AAEE,GAAI,CAAGE,KAAGH;AACR,OAACV,WAAWW,SAASE;;AACrB,OAACb,WAAWQ,UAAUE;;;AAX5B,GAiBE,CAAGA,KAAGJ;AACN,OAACN,WAAWQ,UAAUE;;AAlBxB,GA0BE,CAAGA,KAAGL;AACN,IAAMS,eAAa,AAACC,iBAAiBnF,QAAQuD;IACvC6B,MAAI,CAAC/F,kCAAAA,gDAAAA,hBAAE6F,4BAAAA;AADb,AAEE,GAAI,CAAIE,OAAIN;AACV,OAACV,WAAWc,aAAaE;;AACzB,OAACC,OAAOrF;;;AA/Bd,AAuCE,IAAMsF,aAAW,AAACC,SAASvF,QAAQuD;IAC7BiC,KAAG,CAACnG,kCAAAA,8CAAAA,dAAEiG,0BAAAA;AADZ,AAEE,GAAI,CAAGE,KAAGf;AACR,OAACL,WAAWkB,WAAWE;;AACvB,OAACH,OAAOrF;;;;;;;AAxDlB,AAAA,oBAAA,WAAA+D;AAAA,AAGW,OAACE,8CAAMC,mBAAG,iBAAAH,jBAACI;;AAHtB;AAAA,AAAA,MAAA,KAAAhD,MAAA;;;AAAA2C;;;AA0DP;;;;0DAAA,kEAAA2B,5HAAgBE;AAAhB,AAAA,IAAAD,cAAAD;IAAAC,kBAAA,AAAA7G,4BAAA6G;wBAAA,AAAA5G,4CAAA4G,gBAAA,+EAAA,/JAGWE;mBAHX,AAAA9G,4CAAA4G,gBAAA,sEAAA,jJAG6BG;AAH7B,AAME,kBAAK7F,QAAQoB;AAAb,AACE,SAAK,CAAI,AAACrB,kDAASC,YAAW4F,wBACzB,CAAI,AAAC7F,kDAASqB,cAAWyE;;;AAElC;;;;;;mDAAA,+EAAAC,lIAAgBE,8GAKbC,UAAUzE;AALb,AAAA,IAAAuE,cAAAD;IAAAC,kBAAA,AAAAlH,4BAAAkH;cAAA,AAAAjH,4CAAAiH,gBAAA,tEAK+BG;aAL/B,AAAApH,4CAAAiH,gBAAA,rEAKuCI;AALvC,AAME,IAAMD,cAAQ,iBAAAE,mBAAIF;AAAJ,AAAA,oBAAAE;AAAAA;;AAAY,oBAAA,ZAAG5E;;;IACvB2E,aAAQ,iBAAAC,mBAAID;AAAJ,AAAA,oBAAAC;AAAAA;;AAAW,oBAAA,ZAAG5E;;;AAD5B,AAEE,kBAAK6E;AAAL,AACE,SAAI,CAAGA,aAAWH,kBACd,CAAA,AAAAI,gBAAIL,aAAUE;;;AAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDAAA,uEAAAI,9HAAME,sHAkDHC,KAAK1H;AAlDR,AAAA,IAAAwH,cAAAD;IAAAC,kBAAA,AAAA3H,4BAAA2H;WAAAA,PAkDiC/D;eAlDjC,AAAA3D,4CAAA0H,gBAAA,vEAkDmBG;AAlDnB,AAmDE,IAAMA,eAAc,iBAAAP,mBAAIO;AAAJ,AAAA,oBAAAP;AAAAA;;AAAa,4BAAA,rBAACS;;;IAC5BrF,YAAc,AAACF,gBAAMtC;IAD3B4H,cAEoB,AAAClG,iDAAQgG;gBAF7B,AAAA5G,4CAAA8G,YAAA,IAAA,xEAEOX;QAFP,AAAAnG,4CAAA8G,YAAA,IAAA,hEAEiBvH;IACXyH,OAAc,AAACtE,iDAAQnD,EAAEmC,UAAUiB;IACnCsE,qBAAc,AAACpB,wDAAelD;IAC9BuE,cAAc,AAAChB,iDAAQC,UAAUzE,UAAUiB;IAC3CzC,UAAc,AAACjB,yDAAgBC,GAAGyD;IAClCrB,YAAc,AAACjD,6CAAKkB,EAAEW;AAP5B,AAQE,IAAAiH,YAA6C,AAAC5F,iFAAUrB,QAAQoB,UAAUI;IAA1E0F,cAAAD;IAAAE,cAAA,AAAArH,4CAAAoH,YAAA,IAAA;SAAA,AAAApH,4CAAAqH,YAAA,IAAA,jEAAS3D;kBAAT2D,dAAgBnH;IAAhBoH,cAAA,AAAAtH,4CAAAoH,YAAA,IAAA;SAAA,AAAApH,4CAAAsH,YAAA,IAAA,jEAA0BI;oBAA1BJ,hBAAiChG;gBAAjC,ZACOqG;AADP,AAAA,IAAAR,gBAAAA;IACOQ,gBAAAA;;AADP,AAAA,IAAAJ,cAAAJ;IAAAK,cAAA,AAAAxH,4CAAAuH,YAAA,IAAA;aAAA,AAAAvH,4CAAAwH,YAAA,IAAA,rEAAS9D;kBAAT8D,dAAgBtH;IAAhBuH,cAAA,AAAAzH,4CAAAuH,YAAA,IAAA;aAAA,AAAAvH,4CAAAyH,YAAA,IAAA,rEAA0BC;oBAA1BD,hBAAiCnG;IAC1BqG,gBAAAA;AADP,AAEE,CAACd,6CAAAA,0EAAAA,/BAASc,sDAAAA,xCAAUjE,sDAAAA,/CAAGgE,sDAAAA;;AACvB,IAAME,mBAAW,AAACX,mBAAa/G,YAAQoB;AAAvC,AACE,oBAAI,iBAAAgF,mBAAIsB;AAAJ,AAAA,oBAAAtB;AAAAA;;AAAe,OAACY,YAAMS;;;AAA1B,kDAAA,gEAAA,6DAAA,kFAAA,gFAAA,0DAAA,AAAAnB,hSACW9C,6DACDgE,wEACKE,mFACAD,wFACFxB;;AACX,gBAAO,CAACa,qCAAAA,gEAAAA,7BAAK9G,4CAAAA,hCAAQoB,4CAAAA;gBACd,iBAAA,hBAAKqG","names":["sicmutils.numerical.multimin.nelder-mead/v+","l","r","cljs.core.mapv","cljs.core/+","sicmutils.numerical.multimin.nelder-mead/v-","cljs.core/-","sicmutils.numerical.multimin.nelder-mead/v*","s","v","p1__101890#","p__101894","map__101895","cljs.core/--destructure-map","cljs.core.get","sicmutils.numerical.multimin.nelder-mead/initial-simplex","x0","nonzero-delta","zero-delta","cljs.core/vec","scale","f","i","xi","perturbed","cljs.core.assoc","cljs.core.into","cljs.core.map_indexed","p__101917","vec__101921","cljs.core.nth","sicmutils.numerical.multimin.nelder-mead/sup-norm","simplex","coords","cljs.core/sequential?","p1__101910#","cljs.core.mapcat","p1__101911#","cljs.core.map","cljs.core.reduce","cljs.core/max","sicmutils.util/compute-abs","sicmutils.numerical.multimin.nelder-mead/counted","count","cljs.core.atom","x","cljs.core.swap_BANG_","cljs.core/inc","var_args","G__101977","sicmutils.numerical.multimin.nelder-mead/sort-by-f","js/Error","f-simplex","sicmutils.numerical.multimin.nelder_mead.sort_by_f","cljs.core/count","cljs.core/peek","dimension","indices-by-f","cljs.core.sort_by","cljs.core.partial","cljs.core/nth","cljs.core.range","sorted-simplex","sorted-fsimplex","p__101991","map__101993","sicmutils.numerical.multimin.nelder-mead/step-defaults","adaptive?","m","base","cljs.core.merge","cljs.core/select-keys","sicmutils.numerical.multimin.nelder-mead/step-fn","opts","map__101997","alpha","beta","sigma","gamma","p__102008","vec__102009","seq__102010","cljs.core/seq","first__102011","cljs.core/first","cljs.core/next","cljs.core/pop","centroid","s0","rest","p1__101995#","scale-toward-s0","p__102013","vec__102015","%","p1__101996#","f-best","cljs.core.apply","cljs.core/<=","cljs.core/second","swap-worst","elem","f-elem","cljs.core.conj","fs","f-worst","f-butworst","centroid-pt","reflected","reflect","fr","expanded","reflect-expand","fe","r-contracted","reflect-contract","frc","shrink","contracted","contract","fc","p__102033","map__102036","sicmutils.numerical.multimin.nelder-mead/convergence-fn","simplex-tolerance","fn-tolerance","p__102046","map__102047","sicmutils.numerical.multimin.nelder-mead/stop-fn","f-counter","maxiter","maxfun","or__4253__auto__","iterations","cljs.core/deref","p__102055","map__102057","sicmutils.numerical.multimin.nelder-mead/nelder-mead","func","callback","vec__102058","cljs.core/constantly","step","convergence?","stop?","G__102070","vec__102072","vec__102075","vec__102078","vec__102095","vec__102098","vec__102101","f0","iteration","converged?"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.numerical.multimin.nelder-mead\n  (:require [sicmutils.util :as u]))\n\n(defn- v+\n  \"add two vectors elementwise.\"\n  [l r]\n  (mapv + l r))\n\n(defn- v-\n  \"subtract two vectors elementwise.\"\n  [l r]\n  (mapv - l r))\n\n(defn- v*\n  \"multiply vector v by scalar s.\"\n  [s v]\n  (mapv #(* s %) v))\n\n(defn ^:private initial-simplex\n  \"Takes an n-vector x0 and returns a list of n+1 n-vectors, of which x0 is the\n  first, and the remainder are formed by perturbing each coordinate in turn.\"\n  [x0 {:keys [nonzero-delta zero-delta]\n       :or {nonzero-delta 0.05\n            zero-delta 0.00025}}]\n  (let [x0 (vec x0)\n        scale (inc nonzero-delta)\n        f (fn [i xi]\n            (let [perturbed (if (zero? xi)\n                              zero-delta\n                              (* scale xi))]\n              (assoc x0 i perturbed)))]\n    (into [x0] (map-indexed f x0))))\n\n(defn ^:private sup-norm\n  \"Returns the absolute value of the distance of the individual coordinate in any\n  simplex farthest from its corresponding point in x0.\"\n  [[x0 :as simplex]]\n  (let [coords (if (sequential? x0)\n                 (mapcat #(v- % x0) simplex)\n                 (map #(- % x0) simplex))]\n    (reduce max (map u/compute-abs coords))))\n\n(defn ^:private counted\n  \"Takes a function and returns a pair of:\n  - an atom that keeps track of fn invocation counts,\n  - the instrumented fn\"\n  [f]\n  (let [count (atom 0)]\n    [count (fn [x]\n             (swap! count inc)\n             (f x))]))\n\n(defn ^:private sort-by-f\n  \"Returns the two inputs `simplex` and `f(simplex)` sorted in ascending order by\n  function value.\n  Dimension must == the length of each element in the simplex.\"\n  ([simplex f-simplex]\n   (sort-by-f simplex f-simplex (count (peek simplex))))\n  ([simplex f-simplex dimension]\n   (let [indices-by-f (sort-by (partial nth f-simplex)\n                               (range 0 (inc dimension)))\n         sorted-simplex  (mapv simplex indices-by-f)\n         sorted-fsimplex (mapv f-simplex indices-by-f)]\n     [sorted-simplex sorted-fsimplex])))\n\n(defn ^:private step-defaults\n  \"Generates the options required for a step of Nelder-Mead.\n\n  `:adaptive?` controls the set of defaults. If true, they're generated using\n  the supplied dimension; else, they're static.\"\n  [dimension {:keys [adaptive?]\n              :or {adaptive? true}\n              :as m}]\n  (let [base (if adaptive?\n               {:alpha 1.0\n                :beta (+ 1.0 (/ 2.0 dimension))\n                :gamma (- 0.75 (/ (* 2.0 dimension)))\n                :sigma (- 1.0 (/ dimension))}\n               {:alpha 1.0\n                :beta 2.0\n                :gamma 0.5\n                :sigma 0.5})]\n    (merge base (select-keys m [:alpha :beta :gamma :sigma]))))\n\n(defn ^:private step-fn\n  \"Returns a function that performs a single step of nelder-mead. The function\n  expects a sorted simplex and f-simplex, and returns sorted results - a pair of\n  - [simplex, f(simplex)]\n  [This Scholarpedia\n  page](http://www.scholarpedia.org/article/Nelder-Mead_algorithm) provides a\n  nice overview of the algorithm.\n  The parameters in opts follow the convention from [Gao and Han's\n  paper](https://www.researchgate.net/publication/225691623_Implementing_the_Nelder-Mead_simplex_algorithm_with_adaptive_parameters)\n  introducing the adaptive parameter version of Nelder-Mead:\n  :alpha - reflection cefficient\n  :beta  - expansion coefficient\n  :gamma - contraction coefficient\n  :sigma - shrink coefficient\n  \"\n  ([f dimension opts]\n   (let [{:keys [alpha beta sigma gamma]} (step-defaults dimension opts)]\n     (letfn [(centroid-pt [simplex]\n               (v* (/ dimension) (reduce v+ (pop simplex))))\n\n             ;; Returns the point generated by reflecting the worst point across\n             ;; the centroid of the simplex.\n             (reflect [simplex centroid]\n               (v- (v* (inc alpha) centroid)\n                   (v* alpha (peek simplex))))\n\n             ;; Returns the point generated by reflecting the worst point across\n             ;; the centroid, and then stretching it in that direction by a factor\n             ;; of beta.\n             (reflect-expand [simplex centroid]\n               (v- (v* (inc (* alpha beta)) centroid)\n                   (v* (* alpha beta) (peek simplex))))\n\n             ;; Returns the point generated by reflecting the worst point, then\n             ;; shrinking it toward the centroid by a factor of gamma.\n             (reflect-contract [simplex centroid]\n               (v- (v* (inc (* gamma alpha)) centroid)\n                   (v* (* gamma alpha) (peek simplex))))\n\n             ;; Returns the point generated by shrinking the current worst point\n             ;; toward the centroid by a factor of gamma.\n             (contract [simplex centroid]\n               (v+ (v* (- 1 gamma) centroid)\n                   (v* gamma (peek simplex))))\n\n             ;; Returns a simplex generated by scaling each point toward the best\n             ;; point by the shrink factor $\\sigma$; ie, by replacing all\n             ;; points (except the best point $s_1$) with $s_i = s_1 + \\sigma (\\s_i\n             ;; - s_1)$.\n             (shrink [[s0 & rest]]\n               (let [scale-toward-s0 #(v+ s0 (v* sigma (v- % s0)))\n                     s (into [s0] (map scale-toward-s0 rest))]\n                 (sort-by-f s (mapv f s) dimension)))]\n\n       (fn [simplex [f-best :as f-simplex]]\n         ;; Verify that inputs and outputs remain sorted by f value.\n         {:pre [(apply <= f-simplex)]\n          :post [#(apply <= (second %))]}\n         (let [swap-worst (fn [elem f-elem]\n                            (let [s  (conj (pop simplex) elem)\n                                  fs (conj (pop f-simplex) f-elem)]\n                              (sort-by-f s fs dimension)))\n               f-worst    (peek f-simplex)\n               f-butworst (peek (pop f-simplex))\n               centroid   (centroid-pt simplex)\n               reflected  (reflect simplex centroid)\n               fr         (f reflected)]\n           (cond\n             ;; If the reflected point is the best (minimal) point so far, replace\n             ;; the worst point with either an expansion of the simplex around that\n             ;; point, or the reflected point itself.\n             ;;\n             ;; f(reflected worst) < f(best)\n             (< fr f-best)\n             (let [expanded (reflect-expand simplex centroid)\n                   fe (f expanded)]\n               (if (< fe fr)\n                 (swap-worst expanded fe)\n                 (swap-worst reflected fr)))\n\n             ;; f(best) <= f(reflected worst) < f(second worst)\n             ;;\n             ;; Else, if the reflected worst point is better than the second worst\n             ;; point, swap it for the worst point.\n             (< fr f-butworst)\n             (swap-worst reflected fr)\n\n             ;; f(butworst) <= f(reflected worst) < f(worst)\n             ;;\n             ;; If the reflected point is still better than the worst point,\n             ;; generated a point by shrinking the reflected point toward the\n             ;; centroid. If this is better than (or equivalent to) the reflected\n             ;; point, replace it. Else, shrink the whole simplex.\n             (< fr f-worst)\n             (let [r-contracted (reflect-contract simplex centroid)\n                   frc (f r-contracted)]\n               (if (<= frc fr)\n                 (swap-worst r-contracted frc)\n                 (shrink simplex)))\n\n             ;; f(worst) <= f(reflected worst)\n             ;;\n             ;; Else, attempt to contrast the existing worst point toward the\n             ;; centroid. If that improves performance, swap the new point; else,\n             ;; shrink the whole simplex.\n             :else\n             (let [contracted (contract simplex centroid)\n                   fc (f contracted)]\n               (if (< fc f-worst)\n                 (swap-worst contracted fc)\n                 (shrink simplex))))))))))\n\n(defn ^:private convergence-fn\n  \"Returns a function that returns true if the supplied simplex and simplex\n  evaluations signal convergence, false otherwise.\"\n  [{:keys [simplex-tolerance fn-tolerance]\n    :or {simplex-tolerance 1e-4\n         fn-tolerance 1e-4}}]\n  (fn [simplex f-simplex]\n    (and (<= (sup-norm simplex)   simplex-tolerance)\n         (<= (sup-norm f-simplex) fn-tolerance))))\n\n(defn ^:private stop-fn\n  \"Takes an atom that, when dereferenced, returns a function call count, and the\n  dimension of the simplex.\n  Returns a function of `iterations` that returns true if the iteration and\n  function call limits signal stopping, false otherwise.\"\n  [f-counter dimension {:keys [maxiter maxfun]}]\n  (let [maxiter (or maxiter (* dimension 200))\n        maxfun  (or maxfun (* dimension 200))]\n    (fn [iterations]\n      (or (> iterations maxiter)\n          (> @f-counter maxfun)))))\n\n(defn nelder-mead\n  \"Find the minimum of the function f: R^n -> R, given an initial point q \u2208 R^n.\n  Supports the following optional keyword arguments:\n\n  `:callback` if supplied, the supplied fn will be invoked with iteration count,\n  the values of X and the value of f(X) at each intermediate point of\n  evaluation.\n\n  `:info?` if true, wraps the result with evaluation information.\n\n  `:adaptive?` if true, the Nelder-Mead parameters for contraction, expansion,\n  reflection and shrinking will be set adaptively, as functions of the number of\n  dimensions. If false they stay constant.\n\n  `:alpha` sets the reflection coefficient used for each step of Nelder-Mead.\n\n  `:beta` sets the expansion coefficient used for each step of Nelder-Mead.\n\n  `:gamma` sets the contraction coefficient used for each step of Nelder-Mead.\n\n  `:sigma` sets the shrink coefficient used for each step of Nelder-Mead.\n\n  `:maxiter` Maximum number of iterations allowed for the minimizer. Defaults to\n  200*dimension.\n\n  `:maxfun` Maximum number of times the function can be evaluated before exiting.\n  Defaults to 200*dimension.\n\n  `:simplex-tolerance` When the absolute value of the max difference between the\n  best point and any point in the simplex falls below this tolerance, the\n  minimizer stops. Defaults to 1e-4.\n\n  `:fn-tolerance` When the absolute value of the max difference between the best\n  point's function value and the fn value of any point in the simplex falls\n  below this tolerance, the minimizer stops. Defaults to 1e-4.\n\n  `:zero-delta` controls the value to which 0 entries in the initial vector are\n  set during initial simplex generation. Defaults to 0.00025.\n\n  `:nonzero-delta` factor by which entries in the initial vector are perturbed to\n  generate the initial simplex. Defaults to 0.05.\n\n  See Gao, F. and Han, L.\n      Implementing the Nelder-Mead simplex algorithm with adaptive\n      parameters. 2012. Computational Optimization and Applications.\n      51:1, pp. 259-277\n  I gratefully acknowledge the [Python implementation in\n  SciPy](https://github.com/scipy/scipy/blob/589c9afe41774ee96ec121f1867361146add8276/scipy/optimize/optimize.py#L556:5)\n  which I have imitated here.\n  \"\n  [func x0 {:keys [callback] :as opts}]\n  (let [callback      (or callback (constantly nil))\n        dimension     (count x0)\n        [f-counter f] (counted func)\n        step          (step-fn f dimension opts)\n        convergence?  (convergence-fn opts)\n        stop?         (stop-fn f-counter dimension opts)\n        simplex       (initial-simplex x0 opts)\n        f-simplex     (mapv f simplex)]\n    (loop [[[s0 :as simplex] [f0 :as f-simplex]] (sort-by-f simplex f-simplex dimension)\n           iteration 0]\n      (callback iteration s0 f0)\n      (let [converged? (convergence? simplex f-simplex)]\n        (if (or converged? (stop? iteration))\n          {:result s0\n           :value f0\n           :converged? converged?\n           :iterations iteration\n           :fncalls @f-counter}\n          (recur (step simplex f-simplex)\n                 (inc iteration)))))))\n"]}