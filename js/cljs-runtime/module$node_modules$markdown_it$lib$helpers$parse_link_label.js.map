{
"version":3,
"file":"module$node_modules$markdown_it$lib$helpers$parse_link_label.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQzHD,MAAOC,CAAAA,OAAP,CAAiBC,QAAuB,CAACC,KAAD,CAAQC,KAAR,CAAeC,aAAf,CAA8B,CAAA,IAEhEC,SAAW,CAAC,CAFoD,CAGhEC,IAAMJ,KAAMK,CAAAA,MAHoD,CAIhEC,OAASN,KAAMO,CAAAA,GAEnBP,MAAMO,CAAAA,GAAN,CAAYN,KAAZ,CAAoB,CAGpB,KAFAO,KAEA,CAFQ,CAER,CAAOR,KAAMO,CAAAA,GAAb,CAAmBH,GAAnB,CAAA,CAAwB,CACtB,IAAAK,OAAST,KAAMU,CAAAA,GAAIC,CAAAA,UAAV,CAAqBX,KAAMO,CAAAA,GAA3B,CACT,IAAe,EAAf,GAAIE,MAAJ,GACED,KAAA,EACI,CAAU,CAAV,GAAAA,KAFN,EAEmB,CACf,IAAAI,MAAQ,CAAA,CACR,MAFe,CAMnB,IAAAC,QAAUb,KAAMO,CAAAA,GAChBP,MAAMc,CAAAA,EAAGC,CAAAA,MAAOC,CAAAA,SAAhB,CAA0BhB,KAA1B,CACA,IAAe,EAAf,GAAIS,MAAJ,CACE,GAAII,OAAJ,GAAgBb,KAAMO,CAAAA,GAAtB,CAA4B,CAA5B,CAEEC,KAAA,EAFF,KAGO,IAAIN,aAAJ,CAEL,MADAF,MAAMO,CAAAA,GACC;AADKD,MACL,CAAA,CAAC,CAlBU,CAuBpBM,KAAJ,GACET,QADF,CACaH,KAAMO,CAAAA,GADnB,CAKAP,MAAMO,CAAAA,GAAN,CAAYD,MAEZ,OAAOH,SAvC6D,CARmD;",
"sources":["node_modules/markdown-it/lib/helpers/parse_link_label.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$helpers$parse_link_label\"] = function(global,require,module,exports) {\n// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","state","start","disableNested","labelEnd","max","posMax","oldPos","pos","level","marker","src","charCodeAt","found","prevPos","md","inline","skipToken"]
}
