shadow$provide.module$node_modules$mathbox$build$esm$render$buffer$texture$rendertarget=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.RenderTarget=void 0;var _constants=require("module$node_modules$three$src$constants"),_Vector=require("module$node_modules$three$src$math$Vector2"),_WebGLRenderTarget=require("module$node_modules$three$src$renderers$WebGLRenderTarget");class RenderTarget{constructor(gl,width,height,frames,options){this.gl=gl;
null==options&&(options={});null==options.minFilter&&(options.minFilter=_constants.NearestFilter);null==options.magFilter&&(options.magFilter=_constants.NearestFilter);null==options.format&&(options.format=_constants.RGBAFormat);null==options.type&&(options.type=_constants.UnsignedByteType);this.options=options;this.width=width||1;this.height=height||1;this.frames=frames||1;this.buffers=this.frames+1;this.build()}build(){let i;const make=()=>new _WebGLRenderTarget.WebGLRenderTarget(this.width,this.height,
this.options);this.targets=(()=>{let asc,end;const result=[];i=0;end=this.buffers;for(asc=0<=end;asc?i<end:i>end;asc?i++:i--)result.push(make());return result})();const acc=[];this.targets.forEach(target=>acc.push(target.texture));this.reads=acc;this.write=this.targets[this.buffers-1];this.uniforms={dataResolution:{type:"v2",value:new _Vector.Vector2(1/this.width,1/this.height)},dataTexture:{type:"t",value:this.reads[0]},dataTextures:{type:"tv",value:this.reads}}}cycle(){this.targets.unshift(this.targets.pop());
this.write=this.targets[this.buffers-1];this.reads.unshift(this.reads.pop());this.uniforms.dataTexture.value=this.reads[0]}warmup(callback){return(()=>{const result=[];for(let i=0,end=this.buffers,asc=0<=end;asc?i<end:i>end;asc?i++:i--)callback(this.write),result.push(this.cycle());return result})()}dispose(){for(const target of Array.from(this.targets))target.dispose();return this.targets=this.reads=this.write=null}}exports.RenderTarget=RenderTarget}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$render$buffer$texture$rendertarget.js.map
