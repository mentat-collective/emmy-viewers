{
"version":3,
"file":"module$node_modules$$motionone$dom$dist$animate$utils$transforms_cjs.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,MAAQN,OAAA,CAAQ,qDAAR,CAAZ,CACIO,KAAOP,OAAA,CAAQ,0DAAR,CAMX,OAAMQ,KAAO,CAAC,EAAD,CAAK,GAAL,CAAU,GAAV,CAAe,GAAf,CAAb,CAMMC,eAAiB,CACnBC,EAAG,YADgB,CAEnBC,EAAG,YAFgB,CAGnBC,EAAG,YAHgB,CAKjBC,OAAAA,CAAW,CACbC,OAAQ,eADK,CAEbC,aAAc,MAFD,CAGbC,cAAgBC,CAADD,EAAOC,CAAPD,CAAW,KAHb,CAKjB,OAAME;AAA0B,CAC5BC,UAAW,CACPL,OAAQ,2BADD,CAEPC,aAAc,KAFP,CAGPC,cAAgBC,CAADD,EAAOC,CAAPD,CAAW,IAHnB,CADiB,CAM5BI,OAAQP,MANoB,CAO5BQ,MAAO,CACHP,OAAQ,gBADL,CAEHC,aAAc,CAFX,CAGHC,cAAeV,KAAMgB,CAAAA,UAHlB,CAPqB,CAY5BC,KAAMV,MAZsB,CAAhC,CAcMW,qBAAuB,IAAIC,GAdjC,CAmBMC,WAAa,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CA9BLC,EAAC,WAADA,CAAc,OAAdA,CAAuB,QAAvBA,CAAiC,MAAjCA,CA+BRC,CAAAA,OAAN,CAAeC,IAAD,EAAU,CACpBrB,IAAKoB,CAAAA,OAAL,CAAcE,IAAD,EAAU,CACnBJ,UAAWK,CAAAA,IAAX,CAAgBF,IAAhB,CAAuBC,IAAvB,CACAN,qBAAqBQ,CAAAA,GAArB,CAR4B,YAQeH,IARf,CAQsBC,IARtB,EAQ5B,CAAyDZ,uBAAA,CAAwBW,IAAxB,CAAzD,CAFmB,CAAvB,CADoB,CAAxB,CASA,OAAMI,sBAAwB,CAACC,CAAD,CAAIC,CAAJ,CAAAF,EAAUP,UAAWU,CAAAA,OAAX,CAAmBF,CAAnB,CAAVD,CAAkCP,UAAWU,CAAAA,OAAX,CAAmBD,CAAnB,CAAhE;AAIME,gBAAkB,IAAIC,GAAJ,CAAQZ,UAAR,CAJxB,CAkBMa,uBAA0Bb,UAADa,EAAgBb,UAC1Cc,CAAAA,IAD0C,CACrCP,qBADqC,CAE1CQ,CAAAA,MAF0C,CAEnCC,qBAFmC,CAEZ,EAFY,CAG1CC,CAAAA,IAH0C,EAlB/C,CAsBMD,sBAAwB,CAACE,QAAD,CAAWf,IAAX,CAAAa,EAAoB,GAAGE,QAAH,IAAef,IAAf,QApCd,YAoC2DA,IApC3D,EAoCc,IAElD3B,QAAQ2C,CAAAA,qBAAR,CAlB8B,CAACC,OAAD,CAAUjB,IAAV,CAAAgB,EAAmB,CAEzCpC,cAAA,CAAeoB,IAAf,CAAJ,GACIA,IADJ,CACWpB,cAAA,CAAeoB,IAAf,CADX,CAEA,OAAM,CAAEH,UAAF,CAAA,CAAiBnB,IAAKwC,CAAAA,gBAAL,CAAsBD,OAAtB,CACvBxC,MAAM0C,CAAAA,aAAN,CAAoBtB,UAApB,CAAgCG,IAAhC,CAKAiB,QAAQG,CAAAA,KAAMC,CAAAA,SAAd,CAA0BX,sBAAA,CAAuBb,UAAvB,CAVmB,CAmBjDxB,QAAQiD,CAAAA,iBAAR;AAvC2BtB,IAADsB,EAAU,YAAYtB,IAAZ,EAwCpC3B,QAAQM,CAAAA,IAAR,CAAeA,IACfN,QAAQqC,CAAAA,sBAAR,CAAiCA,sBACjCrC,QAAQ+B,CAAAA,qBAAR,CAAgCA,qBAChC/B,QAAQkD,CAAAA,WAAR,CAxBqBvB,IAADuB,EAAUf,eAAgBgB,CAAAA,GAAhB,CAAoBxB,IAApB,CAyB9B3B,QAAQO,CAAAA,cAAR,CAAyBA,cACzBP,QAAQsB,CAAAA,oBAAR,CAA+BA,oBAxFkG;",
"sources":["node_modules/@motionone/dom/dist/animate/utils/transforms.cjs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$motionone$dom$dist$animate$utils$transforms_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('@motionone/utils');\nvar data = require('../data.cjs.js');\n\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nconst transformAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n};\nconst rotation = {\n    syntax: \"<angle>\",\n    initialValue: \"0deg\",\n    toDefaultUnit: (v) => v + \"deg\",\n};\nconst baseTransformProperties = {\n    translate: {\n        syntax: \"<length-percentage>\",\n        initialValue: \"0px\",\n        toDefaultUnit: (v) => v + \"px\",\n    },\n    rotate: rotation,\n    scale: {\n        syntax: \"<number>\",\n        initialValue: 1,\n        toDefaultUnit: utils.noopReturn,\n    },\n    skew: rotation,\n};\nconst transformDefinitions = new Map();\nconst asTransformCssVar = (name) => `--motion-${name}`;\n/**\n * Generate a list of every possible transform key\n */\nconst transforms = [\"x\", \"y\", \"z\"];\norder.forEach((name) => {\n    axes.forEach((axis) => {\n        transforms.push(name + axis);\n        transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n    });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\n/**\n * Provide a quick way to check if a string is the name of a transform\n */\nconst transformLookup = new Set(transforms);\nconst isTransform = (name) => transformLookup.has(name);\nconst addTransformToElement = (element, name) => {\n    // Map x to translateX etc\n    if (transformAlias[name])\n        name = transformAlias[name];\n    const { transforms } = data.getAnimationData(element);\n    utils.addUniqueItem(transforms, name);\n    /**\n     * TODO: An optimisation here could be to cache the transform in element data\n     * and only update if this has changed.\n     */\n    element.style.transform = buildTransformTemplate(transforms);\n};\nconst buildTransformTemplate = (transforms) => transforms\n    .sort(compareTransformOrder)\n    .reduce(transformListToString, \"\")\n    .trim();\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\n\nexports.addTransformToElement = addTransformToElement;\nexports.asTransformCssVar = asTransformCssVar;\nexports.axes = axes;\nexports.buildTransformTemplate = buildTransformTemplate;\nexports.compareTransformOrder = compareTransformOrder;\nexports.isTransform = isTransform;\nexports.transformAlias = transformAlias;\nexports.transformDefinitions = transformDefinitions;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","data","axes","transformAlias","x","y","z","rotation","syntax","initialValue","toDefaultUnit","v","baseTransformProperties","translate","rotate","scale","noopReturn","skew","transformDefinitions","Map","transforms","order","forEach","name","axis","push","set","compareTransformOrder","a","b","indexOf","transformLookup","Set","buildTransformTemplate","sort","reduce","transformListToString","trim","template","addTransformToElement","element","getAnimationData","addUniqueItem","style","transform","asTransformCssVar","isTransform","has"]
}
