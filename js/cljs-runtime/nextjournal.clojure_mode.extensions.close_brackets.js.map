{"version":3,"sources":["nextjournal/clojure_mode/extensions/close_brackets.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.extensions.close-brackets/in-string?","state","pos","G__89370","fexpr__89369","nextjournal.clojure-mode.node/name","nextjournal.clojure_mode.node.tree","nextjournal.clojure-mode.extensions.close-brackets/escaped?","cljs.core._EQ_","x__4336__auto__","y__4337__auto__","nextjournal.clojure-mode.extensions.close-brackets/backspace-backoff","from","to","and__4251__auto__","G__89374","nextjournal.clojure-mode.node/node|","nextjournal.clojure-mode.util/guard","nextjournal.clojure-mode.node/line-comment?","clojure.string/blank?","nextjournal.clojure-mode.util/line-content-at","nextjournal.clojure_mode.util.deletion","p__89386","map__89389","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj89391","js/undefined","nextjournal.clojure-mode.extensions.close-brackets/handle-backspace","doc","range","obj89396","obj89395","obj89394","nextjournal.clojure_mode.util.update_ranges","nextjournal.clojure-mode.util/user-event-annotation","p__89408","map__89410","obj89416","obj89417","obj89421","head","empty","anchor","map__89423","obj89426","obj89428","nextjournal.clojure-mode.util/from-to","node|","parent","or__4253__auto__","cljs.core/not","nextjournal.clojure-mode.node/balanced?","nextjournal.clojure-mode.node/left-edge?","nextjournal.clojure-mode.node/right-edge?","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/start-edge?","nextjournal.clojure-mode.node/same-edge?","nextjournal.clojure-mode.node/start","nextjournal.clojure-mode.node/empty?","nextjournal.clojure-mode.node/up","nextjournal.clojure-mode.extensions.close-brackets/coll-pairs","nextjournal.clojure-mode.extensions.close-brackets/handle-open","open","close","p__89430","map__89431","obj89434","obj89435","obj89436","obj89437","obj89438","nextjournal.clojure_mode.util.insertion","nextjournal.clojure-mode.extensions.close-brackets/handle-close","key-name","p__89447","map__89448","obj89452","obj89454","obj89455","obj89457","unbalanced","G__89459","nextjournal.clojure-mode.node/ancestors","cljs.core.filter","cljs.core.every_pred","nextjournal.clojure-mode.node/coll?","cljs.core/complement","cljs.core/first","closing","G__89461","nextjournal.clojure-mode.node/down","nextjournal.clojure-mode.node/closed-by","G__89462","temp__5753__auto__","close-node-end","cursor","nextjournal.clojure-mode.node/terminal-cursor","nextjournal.clojure-mode.node/right-edge-type?","p__89470","map__89472","obj89474","nextjournal.clojure-mode.extensions.close-brackets/handle-backspace-cmd","view","nextjournal.clojure-mode.util/dispatch-some","nextjournal.clojure-mode.extensions.close-brackets/handle-open-cmd","p__89476","map__89477","obj89479","nextjournal.clojure-mode.extensions.close-brackets/handle-close-cmd","p__89480","map__89481","obj89484","nextjournal.clojure-mode.extensions.close-brackets/extension","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","p__89488","map__89490","obj89513"],"sourcesContent":["(ns nextjournal.clojure-mode.extensions.close-brackets\n  (:require [\"w3c-keyname\" :refer [keyName]]\n            [\"@codemirror/view\" :as view]\n            [\"@codemirror/state\" :refer [EditorState\n                                         EditorSelection\n                                         Transaction\n                                         CharCategory\n                                         Extension]]\n            [applied-science.js-interop :as j]\n            [nextjournal.clojure-mode.node :as n]\n            [nextjournal.clojure-mode.util :as u :refer [from-to]]\n            [clojure.string :as str]))\n\n(defn in-string? [state pos]\n  (#{\"StringContent\" \"String\"} (n/name (n/tree state pos))))\n\n(defn escaped? [state pos]\n  (= \\\\ (.. state -doc (slice (max 0 (dec pos)) pos) toString)))\n\n(defn backspace-backoff [state from to]\n  (if\n   ;; handle line-comments (backspace should not drag forms up into line comments)\n   (and\n    ;; we are directly in front of a line-comment\n    (some-> (n/node| state (dec from)) (u/guard n/line-comment?))\n    ;; current line is blank\n    (not (str/blank? (u/line-content-at state from))))\n    {:cursor (dec from)}\n    (u/deletion from to)))\n\n(j/defn handle-backspace\n  \"- skips over closing brackets\n   - when deleting an opening bracket of an empty list, removes both brackets\"\n  [^:js {:as ^EditorState state :keys [doc]}]\n  (when-not (and (= 1 (.. state -selection -ranges -length))\n                 (let [^js range (j/get-in state [:selection :ranges 0])]\n                   (and (.-empty range) (= 0 (.-from range)))))\n    (u/update-ranges state\n      #js{:annotations (u/user-event-annotation \"delete\")}\n      (j/fn [^:js {:as range :keys [head empty anchor]}]\n        (j/let [^:js {:as range from :from to :to} (from-to head anchor)\n                ^js node| (.resolve (n/tree state) from -1) ;; node immediately to the left of cursor\n                ^js parent (.-parent node|)]\n          (cond\n\n            (or (not empty)                                 ;; selection\n                (= \"StringContent\" (n/name (n/tree state from -1))) ;; inside a string\n                (and parent (not (n/balanced? parent)) (n/left-edge? node|))) ;; unbalanced left-paren\n            (u/deletion from to)\n\n            ;; entering right edge of collection - skip\n            (and (n/right-edge? node|) (== from (n/end parent)))\n            {:cursor (dec from)}\n\n            ;; inside left edge of collection - remove or stop\n            (and (or (n/start-edge? node|)\n                     (n/same-edge? node|)) (== (n/start node|) (n/start parent)))\n            (if (n/empty? (n/up node|))\n              ;; remove empty collection\n              {:cursor  (n/start parent)\n               :changes [(from-to (n/start parent) (n/end parent))]}\n              ;; stop cursor at inner-left of collection\n              {:cursor from})\n\n            :else (backspace-backoff state from to)))))))\n\n(def coll-pairs {\"(\" \")\"\n                 \"[\" \"]\"\n                 \"{\" \"}\"\n                 \\\" \\\"})\n\n(defn handle-open [^EditorState state ^string open]\n  (let [^string close (coll-pairs open)]\n    (u/update-ranges state\n      #js{:annotations (u/user-event-annotation \"input\")}\n      (j/fn [^:js {:keys [from to head anchor empty]}]\n        (cond\n          (in-string? state from)\n          (if (= open \\\")\n            (u/insertion head \"\\\\\\\"\")\n            (u/insertion from to open))\n          ;; allow typing escaped bracket\n          (escaped? state from)\n          (u/insertion from to open)\n          :else\n          (if empty\n            {:changes {:insert (str open close)\n                       :from   head}\n             :cursor  (+ head (count open))}\n            ;; wrap selections with brackets\n            {:changes [{:insert open :from from}\n                       {:insert close :from to}]\n             :from-to [(+ anchor (count open)) (+ head (count open))]}))))))\n\n(defn handle-close [state key-name]\n  (u/update-ranges state\n    #js{:annotations (u/user-event-annotation \"input\")}\n    (j/fn [^:js {:as range :keys [empty head from to]}]\n      (if (or (in-string? state from)\n              (escaped? state from))\n        (u/insertion from to key-name)\n        (when empty\n          (or\n           ;; close unbalanced (open) collection\n           (let [unbalanced (some->\n                             (n/tree state head -1)\n                             (n/ancestors)\n                             (->> (filter (every-pred n/coll? (complement n/balanced?))))\n                             first)\n                 closing (some-> unbalanced n/down n/closed-by)\n                 pos (some-> unbalanced n/end)]\n             (when (and closing (= closing key-name))\n               {:changes {:from   pos\n                          :insert closing}\n                :cursor  (inc pos)}))\n\n           ;; jump to next closing bracket\n           (when-let [close-node-end\n                      (when-let [^js cursor (-> state n/tree\n                                                (n/terminal-cursor head 1))]\n                        (loop []\n                          (if (n/right-edge-type? (.-type cursor))\n                            (n/end cursor)\n                            (when (.next cursor)\n                              (recur)))))]\n             {:cursor close-node-end})\n           ;; no-op\n           {:cursor head}\n           #_(u/insertion head key-name)))))))\n\n(j/defn handle-backspace-cmd [^:js {:as view :keys [state]}]\n  (u/dispatch-some view (handle-backspace state)))\n\n(defn handle-open-cmd [key-name]\n  (j/fn [^:js {:as view :keys [state]}]\n    (u/dispatch-some view (handle-open state key-name))))\n\n(defn handle-close-cmd [key-name]\n  (j/fn [^:js {:as view :keys [state]}]\n    (u/dispatch-some view (handle-close state key-name))))\n\n(defn extension []\n  (.of view/keymap\n       (j/lit\n        [{:key \"Backspace\"\n          :run (j/fn [^:js {:as view :keys [state]}]\n                 (u/dispatch-some view (handle-backspace state)))}\n         {:key \"(\" :run (handle-open-cmd \"(\")}\n         {:key \"[\" :run (handle-open-cmd \"[\")}\n         {:key \"{\" :run (handle-open-cmd \"{\")}\n         {:key \\\" :run (handle-open-cmd \\\")}\n         {:key \\) :run (handle-close-cmd \\))}\n         {:key \\] :run (handle-close-cmd \\])}\n         {:key \\} :run (handle-close-cmd \\})}])))\n"]}