{"version":3,"sources":["sicmutils/util/vector_set.cljc"],"mappings":"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","names":["sicmutils.util.vector-set/empty-set","sicmutils.util.vector-set/make","xs","cljs.core.into","cljs.core.dedupe","cljs.core.sort","sicmutils.util.vector-set/union","x","y","i","cljs.core/long","j","r","cljs.core/transient","xi","cljs.core.nth","yj","cljs.core/not","cljs.core/persistent!","cljs.core.subvec","cljs.core.conj_BANG_","sicmutils.util.vector-set/intersection","and__4251__auto__","sicmutils.util.vector-set/difference","sicmutils.util.vector-set/symmetric-difference","sicmutils.util.vector-set/contains?","vset","cljs.core/boolean","cljs.core/seq","sicmutils.util.vector-set/conj","cljs.core/empty?","cljs.core/peek","cljs.core.conj","cljs.core._EQ_","sicmutils.util/illegal","sicmutils.util.vector-set/disj"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.util.vector-set\n  \"Contains an implementation and API for an 'ordered set' data structure backed\n  by a persistent vector.\"\n  (:refer-clojure :exclude [contains? disj conj])\n  (:require [clojure.core :as core]\n            [sicmutils.util :as u]))\n\n(def empty-set [])\n\n(defn make\n  \"Returns a new `vector-set`, ie, a vector with the distinct elements of the\n  supplied sequence `xs` stored in sorted order.\"\n  [xs]\n  (into [] (dedupe) (sort xs)))\n\n(defn union\n  \"Returns a vector-set containing all elements present in either sequence `x` and\n  `y`.\"\n  [x y]\n  (loop [i (long 0)\n         j (long 0)\n         r (transient [])]\n    (let [xi (nth x i nil)\n          yj (nth y j nil)]\n      (cond (and (not xi) (not yj)) (persistent! r)\n            (not xi)  (into (persistent! r) (subvec y j))\n            (not yj)  (into (persistent! r) (subvec x i))\n            (< xi yj) (recur (inc i) j (conj! r xi))\n            (> xi yj) (recur i (inc j) (conj! r yj))\n            :else     (recur (inc i) (inc j) (conj! r xi))))))\n\n(defn intersection\n  \"Returns a vector-set that contains all elements present in BOTH vector-sets `x`\n  and `y`.\n\n  `x` and `y` must be vector sets, ie, sorted and containing only distinct\n  entries.\"\n  [x y]\n  (loop [i (long 0)\n         j (long 0)\n         r (transient [])]\n    (let [xi (nth x i nil)\n          yj (nth y j nil)]\n      (cond (not (and xi yj)) (persistent! r)\n            (< xi yj) (recur (inc i) j r)\n            (> xi yj) (recur i (inc j) r)\n            :else     (recur (inc i) (inc j) (conj! r xi))))))\n\n(defn difference\n  \"Returns a vector-set that contains all elements present in vector-set `x` and\n  NOT in vector-set `y`.\n\n  `x` and `y` must be vector sets, ie, sorted and containing only distinct\n  entries.\"\n  [x y]\n  (loop [i (long 0)\n         j (long 0)\n         r (transient [])]\n    (let [xi (nth x i nil)\n          yj (nth y j nil)]\n      (cond (not xi) (persistent! r)\n            (not yj) (into (persistent! r) (subvec x i))\n            (< xi yj) (recur (inc i) j (conj! r xi))\n            (> xi yj) (recur i (inc j) r)\n            :else     (recur (inc i) (inc j) r)))))\n\n(defn symmetric-difference\n  \"Returns a vector-set that contains all elements present in vector-set `x` and\n  vector-set `y`, but not in both.\n\n  `x` and `y` must be vector sets, ie, sorted and containing only distinct\n  entries.\"\n  [x y]\n  (loop [i (long 0)\n         j (long 0)\n         r (transient [])]\n    (let [xi (nth x i nil)\n          yj (nth y j nil)]\n      (cond (not xi) (into (persistent! r) (subvec y j))\n            (not yj) (into (persistent! r) (subvec x i))\n            (< xi yj) (recur (inc i) j (conj! r xi))\n            (> xi yj) (recur i (inc j) (conj! r yj))\n            :else     (recur (inc i) (inc j) r)))))\n\n(defn contains?\n  \"Return true if the element `x` is present in the supplied vector `vset`, false\n  otherwise.\"\n  [vset x]\n  (boolean\n   (seq (intersection vset [x]))))\n\n(defn conj\n  \"Returns a vector-set generated by inserting `x` into the appropriate position\n  in the sorted, distinct vector-set `vset`. The invariant is that if `vset` is\n  sorted and contains distinct elements, the return value will contain `x` and\n  also be sorted.\n\n  Attempting to insert an element `x` already contained in `vset` throws an\n  exception.\"\n  [vset x]\n  (cond (empty? vset)      [x]\n        (< x (nth vset 0)) (into [x] vset)\n        (> x (peek vset))  (core/conj vset x)\n        :else\n        (loop [i (long 0)\n               r (transient [])]\n          (let [xi (nth vset i nil)]\n            (cond (not xi) (persistent! (conj! r x))\n                  (< x xi) (into (persistent! (conj! r x))\n                                 (subvec vset i))\n                  (= x xi)\n                  (u/illegal (str \"elem \" x \"already present in \" vset))\n                  :else (recur (inc i) (conj! r xi)))))))\n\n(defn disj\n  \"Returns a vector-set generated by dropping `x` from the supplied vector-set\n  `vset`. If `x` is not present in `vset`, acts as identity.\"\n  [vset x]\n  (cond (empty? vset) empty-set\n        (or (< x (nth vset 0))\n            (> x (peek vset)))\n        vset\n        :else (loop [i (long 0)\n                     r (transient [])]\n                (let [xi (nth vset i nil)]\n                  (cond (or (not xi) (< x xi))\n                        (persistent! r)\n                        (= x xi) (into (persistent! r)\n                                       (subvec vset (inc i)))\n                        :else (recur (inc i) (conj! r xi)))))))\n"]}