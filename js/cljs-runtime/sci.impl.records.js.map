{"version":3,"sources":["sci/impl/records.cljc"],"mappings":"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","names":["js/sci","js/sci.impl","js/sci.impl.records","js/sci.impl.records.to-string","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__89991","cljs.core/MultiFn","cljs.core.symbol","sci.impl.records/to-string","sci.impl.types/type-impl","this","t","cljs.core/namespace","cljs.core/name","cljs.core/hash","sci.impl.records/clojure-str","v","cljs.core.into","sci$impl$records$SciPrintMethod$_sci_print_method$dyn","x__4550__auto__","m__4551__auto__","sci.impl.records/-sci-print-method","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","sci.impl.records/SciPrintMethod","x","w","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sci.impl.records/SciRecord","sci.impl.records/->SciRecord","rec-name","type","var","ext-map","my_hash","_","hq","type-hash","cljs.core/munge","h","cljs.core/hash-unordered-coll","other","cljs.core._EQ_","cljs.core/meta","m","cljs.core/with-meta","k","cljs.core/-lookup","else","cljs.core/count","entry","cljs.core/vector?","cljs.core/-nth","cljs.core.reduce","cljs.core/-conj","cljs.core/-contains-key?","cljs.core.assoc","cljs.core.dissoc","cljs.core/-seq","cljs.core/-iterator","opts","temp__5751__auto__","rv","pm","cljs.core.write_all","f","init","p__90109","vec__90111","cljs.core.nth","ret","sci.impl.records/->record-impl","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sci.impl.records/defrecord","p__90133","vec__90134","seq__90135","cljs.core/seq","first__90136","cljs.core/first","cljs.core/next","seq90127","G__90128","G__90129","G__90130","G__90131","G__90132","self__4851__auto__","fname","form","ctx","record-name","fields","raw-protocol-impls","cljs.core/cons","cljs.core/rest","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","factory-fn-str","factory-fn-sym","map-factory-sym","keys","cljs.core.mapv","cljs.core/keyword","rec-type","sci.impl.utils/current-ns-name","protocol-impls","sci.impl.utils/split-when","cljs.core/symbol?","field-set","cljs.core/set","cljs.core.mapcat","p__90137","vec__90138","seq__90139","first__90140","protocol-name","impls","expr","p1__90123#","cljs.core/group-by","protocol","G__90142","G__90143","G__90144","fexpr__90141","cljs.core/deref","sci.impl.utils/eval-resolve-state","or__4253__auto__","sci.impl.utils.throw_error_with_location","sci.impl.utils/var?","protocol-var","sci.impl.vars.alter_var_root","cljs.core/update","cljs.core.fnil","cljs.core/conj","sci.impl.protocols/type->str","protocol-ns","pns","sci.impl.types/getName","fq-meth-name","cljs.core/simple-symbol?","cljs.core.map","p__90148","vec__90149","method-name","bodies","impl","args","body","destr","sci.impl.utils/maybe-destructured","orig-this-sym","rest-args","shadows-this?","p1__90124#","cljs.core/some","this-sym","cljs.core.gensym","bindings","field","cljs.core.keyword","cljs.core/disj","G__90155","sci.impl.records/resolve-record-or-protocol-class","js/Error","sym","sym-str","last-dot","clojure.string.last_index_of","class-name","cljs.core.subs","namespace","sci.impl.records.resolve_record_or_protocol_class","package","class","clojure.string/replace","temp__5753__auto__","sci-var","ns","cljs.core.get_in","sci.impl.records/resolve-record-class","class-sym","sci.lang/Type"],"sourcesContent":["(ns sci.impl.records\n  {:no-doc true}\n  (:refer-clojure :exclude [defrecord record?])\n  (:require [clojure.string :as str]\n            [sci.impl.protocols :as protocols]\n            [sci.impl.types :as types]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]\n            [sci.lang]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n#?(:clj\n   (defn assert-no-jvm-interface [protocol protocol-name expr]\n     (when (and (class? protocol)\n                (not (= Object protocol)))\n       (utils/throw-error-with-location\n        (str \"defrecord/deftypecurrently only support protocol implementations, found: \" protocol-name)\n        expr))))\n\n(defmulti to-string types/type-impl)\n(defmethod to-string :default [this]\n  (let [t (types/type-impl this)]\n    (str (namespace t) \".\" (name t) \"@\"\n         #?(:clj (Integer/toHexString (hash this))\n            :cljs (.toString (hash this) 16)))))\n\n(defn clojure-str [v]\n  (let [t (types/type-impl v)]\n    (str \"#\" t (into {} v))))\n\n(defprotocol SciPrintMethod\n  (-sci-print-method [x w]))\n\n#?(:clj\n   (deftype SciRecord [rec-name\n                       type\n                       var ext-map\n                       ^:unsynchronized-mutable my_hash\n                       ^:unsynchronized-mutable my_hasheq]\n     clojure.lang.IRecord ;; marker interface\n\n     clojure.lang.IHashEq\n     (hasheq [_]\n       (let [hq my_hasheq]\n         (if (zero? hq)\n           (let [type-hash (hash rec-name)\n                 h (int (bit-xor type-hash (clojure.lang.APersistentMap/mapHasheq ext-map)))]\n             (set! my_hasheq h)\n             h)\n           hq)))\n     (hashCode [_]\n       (let [hq my_hash]\n         (if (zero? hq)\n           (let [h (int (clojure.lang.APersistentMap/mapHash ext-map))]\n             (set! my_hash h)\n             h)\n           hq)))\n     (equals [this other]\n       (clojure.lang.APersistentMap/mapEquals this other))\n\n     clojure.lang.IObj\n     (meta [_]\n       (meta ext-map))\n     (withMeta [_ m]\n       (SciRecord.\n        rec-name type var (with-meta ext-map m) 0 0))\n\n     clojure.lang.ILookup\n     (valAt [_this k]\n       (.valAt ^clojure.lang.ILookup ext-map k))\n     (valAt [_ k else]\n       (.valAt ^clojure.lang.ILookup ext-map k else))\n\n     clojure.lang.IPersistentMap\n     (count [_]\n       (.count ^clojure.lang.IPersistentMap ext-map))\n     (empty [_]\n       (throw (UnsupportedOperationException. (str \"Can't create empty: \" (str rec-name)))))\n     (cons [this e]\n       ((var clojure.core/imap-cons) this e))\n     (equiv [this gs]\n       (boolean\n        (or (identical? this gs)\n            (when (instance? SciRecord gs)\n              (and (identical? rec-name (.-rec-name ^SciRecord gs))\n                   (= ext-map (.-ext-map ^SciRecord gs)))))))\n     (containsKey [_this k]\n       (.containsKey ^clojure.lang.IPersistentMap ext-map k))\n     (entryAt [_this k]\n       (.entryAt ^clojure.lang.IPersistentMap ext-map k))\n     (seq [_this] (.seq ^clojure.lang.IPersistentMap ext-map))\n     (iterator [_this]\n       (clojure.lang.RT/iter ext-map))\n     (assoc [_this k v]\n       (SciRecord. rec-name type var (assoc ext-map k v) 0 0))\n     (without [_this k]\n       (SciRecord. rec-name type var (dissoc ext-map k) 0 0))\n\n     java.util.Map\n     java.io.Serializable\n     (size [_this]\n       (.size ^java.util.Map ext-map))\n     (isEmpty [_this]\n       (.isEmpty ^java.util.Map ext-map))\n     (containsValue [_this v]\n       (.containsValue ^java.util.Map ext-map v))\n     (get [_this k]\n       (.get ^java.util.Map ext-map k))\n     (put [_this _k _v]\n       (throw (UnsupportedOperationException.)))\n     (remove [_this _k]\n       (throw (UnsupportedOperationException.)))\n     (putAll [_this _m]\n       (throw (UnsupportedOperationException.)))\n     (clear [_this]\n       (throw (UnsupportedOperationException.)))\n     (keySet [_this]\n       (.keySet ^java.util.Map ext-map))\n     (values [_this]\n       (.values ^java.util.Map ext-map))\n     (entrySet [_this]\n       (.entrySet ^java.util.Map ext-map))\n\n     Object\n     (toString [this]\n       (to-string this))\n\n     SciPrintMethod\n     (-sci-print-method [this w]\n       (if-let [rv var]\n         (let [m (meta rv)]\n           (if-let [pm (:sci.impl/print-method m)]\n             (pm this w)\n             (.write ^java.io.Writer w ^String (clojure-str this))))\n         (.write ^java.io.Writer w ^String (clojure-str this))))\n\n     sci.impl.types/SciTypeInstance\n     (-get-type [_]\n       type)))\n\n;; See https://github.com/clojure/clojurescript/blob/9562ae11422243e0648a12c39e7c990ef3f94260/src/main/clojure/cljs/core.cljc#L1804\n#?(:cljs\n   (deftype SciRecord [rec-name\n                       type\n                       var ext-map\n                       ^:mutable my_hash]\n     IRecord ;; marker interface\n\n     ICloneable\n     (-clone [_]\n       (new SciRecord rec-name type var ext-map my_hash))\n\n     IHash\n     (-hash [_]\n       (let [hq my_hash]\n         (if (not (nil? hq))\n           (let [type-hash (hash (-> rec-name munge str))\n                 h (bit-xor type-hash (hash-unordered-coll ext-map))]\n             (set! my_hash h)\n             h)\n           hq)))\n\n     IEquiv\n     (-equiv [this other]\n       (and (some? other)\n            (identical? (.-constructor this)\n                        (.-constructor other))\n            (= rec-name (.-rec-name ^SciRecord other))\n            (= (.-ext-map this) (.-ext-map ^SciRecord other))))\n\n     IMeta\n     (-meta [_]\n       (meta ext-map))\n\n     IWithMeta\n     (-with-meta [_ m]\n       (new SciRecord\n            rec-name type var (with-meta ext-map m) my_hash))\n\n     ILookup\n     (-lookup [_ k]\n       (-lookup ext-map k))\n     (-lookup [_ k else]\n       (-lookup ext-map k else))\n\n     ICounted\n     (-count [_]\n       (count ext-map))\n\n     ICollection\n     (-conj [this entry]\n       (if (vector? entry)\n         (-assoc this (-nth entry 0) (-nth entry 1))\n         (reduce -conj\n                 this\n                 entry)))\n\n     IAssociative\n     (-contains-key? [_ k]\n       (-contains-key? ext-map k))\n     (-assoc [_ k v]\n       (new SciRecord rec-name type var (assoc ext-map k v) nil))\n\n     IMap\n     (-dissoc [_ k]\n       (new SciRecord rec-name type var (dissoc ext-map k) nil))\n\n     ISeqable\n     (-seq [_]\n       (-seq ext-map))\n\n     IIterable\n     (-iterator [_]\n       (-iterator ext-map))\n\n     IPrintWithWriter\n     ;; see https://www.mail-archive.com/clojure@googlegroups.com/msg99560.html\n     (-pr-writer [this w opts]\n       (if-let [rv var]\n         (let [m (meta rv)]\n           (if-let [pm (:sci.impl/print-method m)]\n             (pm this w opts)\n             (write-all w (clojure-str this))))\n         (write-all w (clojure-str this))))\n\n     IKVReduce\n     (-kv-reduce [this f init]\n       (reduce (fn [ret [k v]]\n                 (f ret k v)) init this))\n\n     sci.impl.types/SciTypeInstance\n     (-get-type [_]\n       type)\n\n     Object\n     (toString [this]\n       (to-string this))))\n\n#?(:clj\n   (defmethod print-method SciRecord [v w]\n     (-sci-print-method v w)))\n\n#?(:clj (defn ->record-impl [rec-name type var m]\n          (SciRecord. rec-name type var m 0 0))\n   :cljs (defn ->record-impl [rec-name type var m]\n           (SciRecord. rec-name type var m nil)))\n\n(defn defrecord [[fname & _ :as form] _ ctx record-name fields & raw-protocol-impls]\n  (if (:sci.impl/macroexpanding ctx)\n    (cons 'clojure.core/defrecord (rest form))\n    (let [factory-fn-str (str \"->\" record-name)\n          factory-fn-sym (symbol factory-fn-str)\n          map-factory-sym (symbol (str \"map\" factory-fn-str))\n          keys (mapv keyword fields)\n          rec-type (symbol (str (munge (utils/current-ns-name)) \".\" (str record-name)))\n          protocol-impls (utils/split-when symbol? raw-protocol-impls)\n          field-set (set fields)\n          protocol-impls\n          (mapcat\n           (fn [[protocol-name & impls] #?(:clj expr :cljs expr)]\n             (let [impls (group-by first impls)\n                   protocol (@utils/eval-resolve-state ctx (:bindings ctx) protocol-name)\n                   ;; _ (prn :protocol protocol)\n                   #?@(:cljs [protocol (or protocol\n                                           (when (= 'Object protocol-name)\n                                             ::object))])\n                   _ (when-not protocol\n                       (utils/throw-error-with-location\n                        (str \"Protocol not found: \" protocol-name)\n                        expr))\n                   #?@(:clj [_ (assert-no-jvm-interface protocol protocol-name expr)])\n                   protocol (if (utils/var? protocol) @protocol protocol)\n                   protocol-var (:var protocol)\n                   _ (when protocol-var\n                       ;; TODO: not all externally defined protocols might have the :var already\n                       (vars/alter-var-root protocol-var update :satisfies\n                                            (fnil conj #{}) (protocols/type->str rec-type)))\n                   protocol-ns (:ns protocol)\n                   pns (cond protocol-ns (str (types/getName protocol-ns))\n                             (= #?(:clj Object :cljs ::object) protocol) \"sci.impl.records\")\n                   fq-meth-name #(if (simple-symbol? %)\n                                   (symbol pns (str %))\n                                   %)]\n               (map (fn [[method-name bodies]]\n                      (let [bodies (map rest bodies)\n                            bodies (mapv (fn [impl]\n                                           (let [args (first impl)\n                                                 body (rest impl)\n                                                 destr (utils/maybe-destructured args body)\n                                                 args (:params destr)\n                                                 body (:body destr)\n                                                 orig-this-sym (first args)\n                                                 rest-args (rest args)\n                                                 shadows-this? (some #(= orig-this-sym %) rest-args)\n                                                 this-sym (if shadows-this?\n                                                            (gensym \"this_\")\n                                                            orig-this-sym)\n                                                 args (if shadows-this?\n                                                        (vec (cons this-sym rest-args))\n                                                        args)\n                                                 bindings (mapcat (fn [field]\n                                                                    [field (list (keyword field) this-sym)])\n                                                                  (reduce disj field-set args))\n                                                 bindings (if shadows-this?\n                                                            (concat bindings [orig-this-sym this-sym])\n                                                            bindings)\n                                                 bindings (vec bindings)]\n                                             `(~args\n                                               (let ~bindings\n                                                 ~@body)))) bodies)]\n                        `(defmethod ~(fq-meth-name method-name) ~rec-type ~@bodies)))\n                    impls)))\n           protocol-impls\n           raw-protocol-impls)]\n      `(do\n         (declare ~record-name ~factory-fn-sym)\n         (declare ~map-factory-sym)\n         (def ~(with-meta record-name\n                 {:sci/record true})\n           (sci.impl.records/-create-record-type\n            ~{:sci.impl/type-name (list 'quote rec-type)\n              :sci.impl/record true\n              :sci.impl/constructor (list 'var factory-fn-sym)\n              :sci.impl/var (list 'var record-name)\n              :sci.impl.record/map-constructor (list 'var map-factory-sym)}))\n         (defn ~factory-fn-sym [& args#]\n           (sci.impl.records/->record-impl '~rec-type ~rec-type (var ~record-name) (zipmap ~keys args#)))\n         (defn ~map-factory-sym [m#]\n           (sci.impl.records/->record-impl '~rec-type ~rec-type (var ~record-name) m#))\n         ~@protocol-impls\n         ~record-name))))\n\n(defn resolve-record-or-protocol-class\n  \"A record class is represented by a symbol with metadata (currently). This is only an implementation detail.\n   A protocol is represented by a map with :ns, :methods and optionally :class. This is also an implementation detail.\"\n  ;; TODO: we should probably use munging here for namespaces with hyphens in them.\n  ([ctx sym]\n   (let [sym-str (str sym)\n         last-dot (str/last-index-of sym-str \".\")\n         class-name (if last-dot\n                      (subs sym-str (inc last-dot) (count sym-str))\n                      sym-str)\n         namespace (if last-dot\n                     (symbol (subs sym-str 0 last-dot))\n                     (utils/current-ns-name))]\n     (resolve-record-or-protocol-class ctx namespace (symbol class-name))))\n  ([ctx package class]\n   (let [namespace (-> package str (str/replace \"_\" \"-\") symbol)]\n     (when-let [sci-var (let [ns (get-in @(:env ctx) [:namespaces namespace])]\n                          (or (get ns class)\n                              (get (:refers ns) class)))]\n       (if (utils/var? sci-var)\n         @sci-var\n         sci-var)))))\n\n(defn resolve-record-class\n  [ctx class-sym]\n  (when-let [x (resolve-record-or-protocol-class ctx class-sym)]\n    (when (instance? sci.lang.Type x) x)))\n"]}