{"version":3,"sources":["nextjournal/clerk/sci_viewer.cljs"],"mappings":"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","names":["nextjournal.clerk.sci-viewer/color-classes","selected?","nextjournal.clerk.sci-viewer/nbsp","goog.string/unescapeEntities","nextjournal.clerk.sci-viewer/toc-items","items","cljs.core.reduce","p__93311","map__93314","cljs.core/--destructure-map","cljs.core.get","acc","item","content","children","title","nextjournal.markdown.transform/->text","lambdaisland.uri.normalize/normalize-fragment","cljs.core.conj","cljs.core/vec","G__93324","nextjournal.clerk.sci-viewer/dark-mode-toggle","!state","map__93334","cljs.core/deref","dark-mode?","spring","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/not","nextjournal.ui.components.motion/svg","nextjournal.ui.components.motion/path","nextjournal.ui.components.motion/circle","nextjournal.ui.components.motion/g","nextjournal.clerk.sci-viewer/local-storage-dark-mode-key","nextjournal.clerk.sci-viewer/set-dark-mode!","class-list","js/document.querySelector","nextjournal.ui.components.localstorage/set-item!","nextjournal.clerk.sci-viewer/setup-dark-mode!","map__93338","cljs.core/add-watch","p__93341","map__93342","_","old","cljs.core.not_EQ_","js/nextjournal","js/nextjournal.clerk","js/nextjournal.clerk.sci-viewer","js/nextjournal.clerk.sci-viewer.!eval-counter","nextjournal.clerk.sci-viewer/!eval-counter","reagent.core.atom","p__93351","map__93352","nextjournal.clerk.sci-viewer/notebook","_doc","xs","toc","toc-visibility","with-let93353","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__85371__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init93354","p1__93348#","p1__93349#","res93355","local-storage-key","nextjournal.ui.components.localstorage/get-item","temp__5755__auto__","stored-open?","root-ref-fn","ref-fn","map__93362","md-toc","cljs.core._EQ_","G__93364","nextjournal.clerk.sci-viewer/html","and__4251__auto__","nextjournal.ui.components.navbar/toggle-button","nextjournal.ui.components.icon/menu","nextjournal.ui.components.navbar/panel","nextjournal.ui.components.navbar/navbar","cljs.core.doall","cljs.core.map_indexed","idx","x","map__93366","viewer-name","nextjournal.clerk.viewer/->viewer","inner-viewer-name","G__93367","nextjournal.clerk.viewer/->value","cljs.core/name","G__93368","cljs.core/Keyword","or__4253__auto__","nextjournal.clerk.viewer/width","G__93369","nextjournal.clerk.sci-viewer/inspect-presented","nextjournal.clerk.sci-viewer/eval-viewer-fn","eval-f","form","e93373","js/Error","e","cljs.core.ex_info","js/nextjournal.clerk.sci-viewer.!edamame-opts","nextjournal.clerk.sci-viewer/!edamame-opts","cljs.core.atom","cljs.core/seq?","tag","cljs.core.partial","nextjournal.clerk.viewer/->viewer-fn","cljs.core/*eval*","value","nextjournal.clerk.viewer.with_viewer","cljs.core/vector?","G__93378","cljs.core/second","cljs.core.update","memory-address","nextjournal.clerk.sci-viewer/read-string","s","edamame.core.parse_string","nextjournal.clerk.sci-viewer/opts->query","opts","p1__93379#","cljs.core.map","clojure.string/join","clojure.string.join","nextjournal.clerk.sci-viewer/unreadable-edn-viewer","edn","G__93380","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","nextjournal.clerk.sci-viewer/error-badge","seq93384","self__4852__auto__","cljs.core/seq","cljs.core.into","nextjournal.clerk.sci-viewer/error-view","error","e93386","clojure.string/split-lines","cljs.core.drop","cljs.core.mapv","clojure.string/trim","data","nextjournal.clerk.sci-viewer/inspect","nextjournal.clerk.sci-viewer/error-boundary","seq93387","G__93388","cljs.core/first","cljs.core/next","self__4851__auto__","!error","reagent.core.create_class","_info","cljs.core/reset!","_error","temp__5751__auto__","p__93402","map__93403","nextjournal.clerk.sci-viewer/fetch!","blob-id","js/fetch","p1__93397#","p1__93399#","e93406","js/console.error","p__93407","map__93408","nextjournal.clerk.sci-viewer/read-result","string","e93409","p__93412","map__93414","nextjournal.clerk.sci-viewer/result-viewer","result","fetch-opts","hash","_opts","G__93418","with-let93419","init93420","p1__93410#","res93421","!hash","!desc","!fetch-opts","fetch-fn","more","nextjournal.clerk.viewer/merge-presentations","!expanded-at","on-key-down","event","cljs.core/dissoc","on-key-up","js/document","js/document.addEventListener","js/document.removeEventListener","nextjournal.view.context/provide","nextjournal.clerk.sci-viewer/toggle-expanded","path","map__93427","hover-path","prompt-multi-expand?","hover-path-count","cljs.core/count","hover-path-expanded?","expanded-at","p__93432","vec__93433","cljs.core.nth","expanded?","cljs.core/coll?","cljs.core.assoc","cljs.core/update","nextjournal.clerk.sci-viewer/expandable?","nextjournal.clerk.sci-viewer/inspect-children","G__93440","G__93441","cljs.core.fnil","cljs.core/conj","nextjournal.clerk.sci-viewer/expand-style","nextjournal.clerk.sci-viewer/triangle","nextjournal.clerk.sci-viewer/triangle-spacer","nextjournal.clerk.sci-viewer/expand-button","opening-paren","map__93446","multi-expand?","p__93448","map__93450","nextjournal.clerk.sci-viewer/coll-view","viewer","map__93451","closing-paren","cljs.core.comp","cljs.core.interpose","G__93453","cljs.core/list?","nextjournal.clerk.sci-viewer/coll-viewer","G__93454","p__93455","map__93456","nextjournal.clerk.sci-viewer/elision-viewer","total","offset","unbounded?","G__93457","nextjournal.view.context/consume","cljs.core/fn?","p__93459","map__93460","nextjournal.clerk.sci-viewer/map-view","map__93462","G__93463","nextjournal.clerk.sci-viewer/map-viewer","G__93464","p__93466","map__93467","nextjournal.clerk.sci-viewer/string-viewer","G__93468","p1__93465#","p__93471","map__93472","nextjournal.clerk.sci-viewer/quoted-string-viewer","map__93473","G__93474","p1__93470#","cljs.core/some","clojure.string/includes?","nextjournal.clerk.sci-viewer/number-viewer","num","G__93475","js/Number.isNaN","nextjournal.clerk.sci-viewer/sort!","!sort","i","k","map__93476","sort-key","sort-order","p__93482","p__93483","map__93484","map__93485","nextjournal.clerk.sci-viewer/sort-data","sort-index","head","rows","G__93486","p1__93477#","cljs.core.sort_by","G__93487","cljs.core/val","clojure.string/lower-case","p1__93478#","p2__93479#","p1__93481#","p2__93480#","cljs.core/compare","nextjournal.clerk.sci-viewer/x-icon","nextjournal.clerk.sci-viewer/check-icon","p__93491","vec__93492","nextjournal.clerk.sci-viewer/table-error","G__93495","p__93496","map__93497","nextjournal.clerk.sci-viewer/throwable-view","via","trace","p__93498","map__93499","_ex","type","message","_trace","p__93500","vec__93501","call","_x","file","line","nextjournal.clerk.sci-viewer/throwable-viewer","ex","G__93505","G__93507","nextjournal.clerk.sci-viewer/tagged-value","p__93508","map__93509","nextjournal.clerk.sci_viewer.tagged_value","space?","nextjournal.clerk.sci-viewer/normalize-viewer-meta","cljs.core/meta","fexpr__93510","nextjournal.clerk.sci-viewer/html-viewer","nextjournal.clerk.sci-viewer/reagent-viewer","js/nextjournal.clerk.sci-viewer.!doc","nextjournal.clerk.sci-viewer/!doc","reagent.ratom.atom","js/nextjournal.clerk.sci-viewer.!error","nextjournal.clerk.sci-viewer/!error","js/nextjournal.clerk.sci-viewer.!viewers","nextjournal.clerk.sci-viewer/!viewers","nextjournal.clerk.viewer/!viewers","nextjournal.clerk.sci-viewer/set-viewers!","scope","viewers","nextjournal.clerk.sci-viewer/render-with-viewer","nextjournal.clerk.viewer/viewer-fn?","cljs.core/map?","G__93536","G__93537","G__93538","G__93539","nextjournal.clerk.sci_viewer.error_badge","cljs.core.pr_str","nextjournal.clerk.sci-viewer/valid-react-element?","js/module$node_modules$react$index.isValidElement","G__93541","with-let93542","init93543","res93544","nextjournal.clerk.sci_viewer.inspect_presented","cljs.core.merge","nextjournal.clerk.sci-viewer/in-process-fetch","js/Promise","nextjournal.clerk.viewer.present","with-let93545","init93546","res93547","nextjournal.clerk.sci-viewer/root","p__93581","map__93582","nextjournal.clerk.sci-viewer/set-state","state","doc","remount?","cljs.core/inc","cljs.core/contains?","nextjournal.clerk.sci-viewer/mount","temp__5753__auto__","el","js/document.getElementById","reagent.dom.render","nextjournal.clerk.sci-viewer/clerk-eval","goog/global","p__93589","map__93590","nextjournal.clerk.sci-viewer/katex-viewer","tex-string","inline?","G__93591","nextjournal.viewer.katex.to_html_string","nextjournal.clerk.sci-viewer/html-render","markup","reagent.core.as_element","nextjournal.clerk.viewer/with-viewer","G__93592","cljs.core/PersistentVector","p__93598","map__93599","nextjournal.clerk.sci-viewer/with-d3-require","package","then","loading-view","cljs.core/identity","f","with-let93600","init93601","res93602","!package","js/module$node_modules$d3_require$dist$d3_require.require","cljs.core.apply","p1__93593#","p1__93594#","map__93603","loading","nextjournal.clerk.sci-viewer/vega-lite-viewer","embed","cljs.core/clj->js","cljs.core.dissoc","p1__93604#","vega-el","nextjournal.clerk.sci-viewer/plotly-viewer","plotly","js/document.createElement","p1__93608#","plotly-el","nextjournal.clerk.sci-viewer/mathjax-viewer","nextjournal.viewer.mathjax/viewer","nextjournal.clerk.sci-viewer/code-viewer","nextjournal.viewer.code/viewer","nextjournal.clerk.sci-viewer/expand-icon","nextjournal.clerk.sci-viewer/foldable-code-viewer","code-string","with-let93618","init93619","res93620","!hidden?","p__93624","map__93625","nextjournal.clerk.sci-viewer/url-for","src","nextjournal.clerk.sci-viewer/doc-url","sci.core.new_var","nextjournal.clerk.sci-viewer/sci-viewer-namespace","nextjournal.clerk.viewer/code","nextjournal.clerk.viewer/col","nextjournal.clerk.viewer/md","nextjournal.clerk.viewer/plotly","nextjournal.clerk.viewer/row","nextjournal.clerk.viewer/table","nextjournal.clerk.viewer/tex","nextjournal.clerk.viewer/vl","nextjournal.clerk.viewer/present","nextjournal.clerk.viewer/with-viewers","js/nextjournal.clerk.sci-viewer.!sci-ctx","nextjournal.clerk.sci-viewer/!sci-ctx","sci.core/init","js/module$node_modules$framer_motion$dist$cjs$index","sci.configs.applied-science.js-interop/namespaces","sci.configs.reagent.reagent/namespaces","nextjournal.clerk.sci-viewer/eval-form","sci.core/eval-form","nextjournal.clerk.sci-viewer/get-rgba","y","img-width","img-data","coord","nextjournal.clerk.sci-viewer/white?","nextjournal.clerk.sci-viewer/scan-y","from-top?","img-height","colored-col","nextjournal.clerk.sci-viewer/scan-x","from-left?","colored-row","G__93634","nextjournal.clerk.sci-viewer/trim-image","p__93635","map__93636","img","nextjournal.clerk.sci_viewer.trim_image","padding","canvas","ctx","x1","y1","x2","y2","dx","dy","trimmed-data","result-img","nextjournal.clerk.sci-viewer/append-trimmed-image","base64","id","trimmed-img"],"sourcesContent":["(ns nextjournal.clerk.sci-viewer\n  (:require [\"d3-require\" :as d3-require]\n            [\"framer-motion\" :as framer-motion]\n            [\"react\" :as react]\n            [applied-science.js-interop :as j]\n            [cljs.reader]\n            [clojure.string :as str]\n            [edamame.core :as edamame]\n            [goog.object]\n            [goog.string :as gstring]\n            [lambdaisland.uri.normalize :as uri.normalize]\n            [nextjournal.clerk.viewer :as viewer :refer [code md plotly tex table vl row col with-viewer with-viewers]]\n            [nextjournal.markdown.transform :as md.transform]\n            [nextjournal.ui.components.icon :as icon]\n            [nextjournal.ui.components.localstorage :as ls]\n            [nextjournal.ui.components.motion :as motion]\n            [nextjournal.ui.components.navbar :as navbar]\n            [nextjournal.view.context :as view-context]\n            [nextjournal.viewer.code :as code]\n            [nextjournal.viewer.katex :as katex]\n            [nextjournal.viewer.mathjax :as mathjax]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [reagent.ratom :as ratom]\n            [sci.configs.applied-science.js-interop :as sci.configs.js-interop]\n            [sci.configs.reagent.reagent :as sci.configs.reagent]\n            [sci.core :as sci]))\n\n(defn color-classes [selected?]\n  {:value-color (if selected? \"white-90\" \"dark-green\")\n   :symbol-color (if selected? \"white-90\" \"dark-blue\")\n   :prefix-color (if selected? \"white-50\" \"black-30\")\n   :label-color (if selected? \"white-90\" \"black-60\")\n   :badge-background-color (if selected? \"bg-white-20\" \"bg-black-10\")})\n\n(declare inspect inspect-presented reagent-viewer)\n\n(def nbsp (gstring/unescapeEntities \"&nbsp;\"))\n\n(declare html html-viewer)\n\n(defn toc-items [items]\n  (reduce\n   (fn [acc {:as item :keys [content children]}]\n     (if content\n       (let [title (md.transform/->text item)]\n         (->> {:title title\n               :path (str \"#\" (uri.normalize/normalize-fragment title))\n               :items (toc-items children)}\n              (conj acc)\n              vec))\n       (toc-items (:children item))))\n   []\n   items))\n\n(defn dark-mode-toggle [!state]\n  (let [{:keys [dark-mode?]} @!state\n        spring {:type :spring :stiffness 200 :damping 10}]\n    [:div.relative.dark-mode-toggle\n     [:button.text-slate-400.hover:text-slate-600.dark:hover:text-white.cursor-pointer\n      {:on-click #(swap! !state assoc :dark-mode? (not dark-mode?))}\n      (if dark-mode?\n        [:> motion/svg\n         {:xmlns \"http://www.w3.org/2000/svg\"\n          :class \"w-5 h-5 md:w-4 md:h-4\"\n          :viewBox \"0 0 50 50\"\n          :key \"moon\"}\n         [:> motion/path\n          {:d \"M 43.81 29.354 C 43.688 28.958 43.413 28.626 43.046 28.432 C 42.679 28.238 42.251 28.198 41.854 28.321 C 36.161 29.886 30.067 28.272 25.894 24.096 C 21.722 19.92 20.113 13.824 21.683 8.133 C 21.848 7.582 21.697 6.985 21.29 6.578 C 20.884 6.172 20.287 6.022 19.736 6.187 C 10.659 8.728 4.691 17.389 5.55 26.776 C 6.408 36.163 13.847 43.598 23.235 44.451 C 32.622 45.304 41.28 39.332 43.816 30.253 C 43.902 29.96 43.9 29.647 43.81 29.354 Z\"\n           :fill \"currentColor\"\n           :initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:scale 0.6 :rotate 90}\n                      :animate {:scale 1 :rotate 0 :transition spring}}}]]\n        [:> motion/svg\n         {:key \"sun\"\n          :class \"w-5 h-5 md:w-4 md:h-4\"\n          :viewBox \"0 0 24 24\"\n          :fill \"none\"\n          :xmlns \"http://www.w3.org/2000/svg\"}\n         [:> motion/circle\n          {:cx \"11.9998\"\n           :cy \"11.9998\"\n           :r \"5.75375\"\n           :fill \"currentColor\"\n           :initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:scale 1.5}\n                      :animate {:scale 1 :transition spring}}}]\n         [:> motion/g\n          {:initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:rotate 45}\n                      :animate {:rotate 0 :transition spring}}}\n          [:circle {:cx \"3.08982\" :cy \"6.85502\" :r \"1.71143\" :transform \"rotate(-60 3.08982 6.85502)\" :fill \"currentColor\"}]\n          [:circle {:cx \"3.0903\" :cy \"17.1436\" :r \"1.71143\" :transform \"rotate(-120 3.0903 17.1436)\" :fill \"currentColor\"}]\n          [:circle {:cx \"12\" :cy \"22.2881\" :r \"1.71143\" :fill \"currentColor\"}]\n          [:circle {:cx \"20.9101\" :cy \"17.1436\" :r \"1.71143\" :transform \"rotate(-60 20.9101 17.1436)\" :fill \"currentColor\"}]\n          [:circle {:cx \"20.9101\" :cy \"6.8555\" :r \"1.71143\" :transform \"rotate(-120 20.9101 6.8555)\" :fill \"currentColor\"}]\n          [:circle {:cx \"12\" :cy \"1.71143\" :r \"1.71143\" :fill \"currentColor\"}]]])]]))\n\n(def local-storage-dark-mode-key \"clerk-darkmode\")\n\n(defn set-dark-mode! [dark-mode?]\n  (let [class-list (.-classList (js/document.querySelector \"html\"))]\n    (if dark-mode?\n      (.add class-list \"dark\")\n      (.remove class-list \"dark\")))\n  (ls/set-item! local-storage-dark-mode-key dark-mode?))\n\n(defn setup-dark-mode! [!state]\n  (let [{:keys [dark-mode?]} @!state]\n    (add-watch !state ::dark-mode\n               (fn [_ _ old {:keys [dark-mode?]}]\n                 (when (not= (:dark-mode? old) dark-mode?)\n                   (set-dark-mode! dark-mode?))))\n    (when dark-mode?\n      (set-dark-mode! dark-mode?))))\n\n(defonce !eval-counter (r/atom 0))\n\n(defn notebook [{:as _doc xs :blocks :keys [toc toc-visibility]}]\n  (r/with-let [local-storage-key \"clerk-navbar\"\n               !state (r/atom {:toc (toc-items (:children toc))\n                               :md-toc toc\n                               :dark-mode? (ls/get-item local-storage-dark-mode-key)\n                               :theme {:slide-over \"bg-slate-100 dark:bg-gray-800 font-sans border-r dark:border-slate-900\"}\n                               :width 220\n                               :mobile-width 300\n                               :local-storage-key local-storage-key\n                               :open? (if-some [stored-open? (ls/get-item local-storage-key)]\n                                        stored-open?\n                                        (not= :collapsed toc-visibility))})\n               root-ref-fn #(when % (setup-dark-mode! !state))\n               ref-fn #(when % (swap! !state assoc :scroll-el %))]\n    (let [{:keys [md-toc]} @!state]\n      (when-not (= md-toc toc)\n        (swap! !state assoc :toc (toc-items (:children toc)) :md-toc toc :open? (not= :collapsed toc-visibility)))\n      (html\n       [:div.flex\n        {:ref root-ref-fn}\n        [:div.fixed.top-2.left-2.md:left-auto.md:right-2.z-10\n         [dark-mode-toggle !state]]\n        (when (and toc toc-visibility)\n          [:<>\n           [navbar/toggle-button !state\n            [:<>\n             [icon/menu {:size 20}]\n             [:span.uppercase.tracking-wider.ml-1.font-bold\n              {:class \"text-[12px]\"} \"ToC\"]]\n            {:class \"z-10 fixed right-2 top-2 md:right-auto md:left-3 md:top-3 text-slate-400 font-sans text-xs hover:underline cursor-pointer flex items-center bg-white dark:bg-gray-900 py-1 px-3 md:p-0 rounded-full md:rounded-none border md:border-0 border-slate-200 dark:border-gray-500 shadow md:shadow-none dark:text-slate-400 dark:hover:text-white\"}]\n           [navbar/panel !state [navbar/navbar !state]]])\n        [:div.flex-auto.h-screen.overflow-y-auto.scroll-container\n         {:ref ref-fn}\n         [:div.flex.flex-col.items-center.viewer-notebook.flex-auto\n          (doall\n           (map-indexed (fn [idx x]\n                          (let [{viewer-name :name} (viewer/->viewer x)\n                                inner-viewer-name (some-> x viewer/->value viewer/->viewer :name)]\n                            ^{:key (str idx \"-\" @!eval-counter)}\n                            [:div {:class [\"viewer\"\n                                           (when viewer-name (str \"viewer-\" (name viewer-name)))\n                                           (when inner-viewer-name (str \"viewer-\" (name inner-viewer-name)))\n                                           (case (or (viewer/width x) (case viewer-name (:code :code-folded) :wide :prose))\n                                             :wide \"w-full max-w-wide\"\n                                             :full \"w-full\"\n                                             \"w-full max-w-prose px-8\")]}\n                             [inspect-presented x]]))\n                        xs))]]]))))\n\n\n(defn eval-viewer-fn [eval-f form]\n  (try (eval-f form)\n       (catch js/Error e\n         (throw (ex-info (str \"error in render-fn: \" (.-message e)) {:render-fn form} e)))))\n\n(defonce !edamame-opts\n  (atom {:all true\n         :row-key :line\n         :col-key :column\n         :location? seq?\n         :end-location false\n         :read-cond :allow\n         :readers\n         (fn [tag]\n           (or (get {'viewer-fn   (partial eval-viewer-fn viewer/->viewer-fn)\n                     'viewer-eval (partial eval-viewer-fn *eval*)} tag)\n               (fn [value]\n                 (with-viewer :tagged-value\n                   {:tag tag\n                    :space? (not (vector? value))\n                    :value (cond-> value\n                             (and (vector? value) (number? (second value)))\n                             (update 1 (fn [memory-address]\n                                         (with-viewer :number-hex memory-address))))}))))\n         :features #{:clj}}))\n\n\n(defn ^:export read-string [s]\n  (edamame/parse-string s @!edamame-opts))\n\n(defn opts->query [opts]\n  (->> opts\n       (map #(update % 0 name))\n       (map (partial str/join \"=\"))\n       (str/join \"&\")))\n\n\n\n#_(opts->query {:s 12 :num 42})\n\n(defn unreadable-edn-viewer [edn]\n  (html [:span.inspected-value.whitespace-nowrap.cmt-default edn]))\n\n(defn error-badge [& content]\n  [:div.bg-red-50.rounded-sm.text-xs.text-red-400.px-2.py-1.items-center.sans-serif.inline-flex\n   [:svg.h-4.w-4.text-red-400 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\" :aria-hidden \"true\"}\n    [:path {:fill-rule \"evenodd\" :d \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" :clip-rule \"evenodd\"}]]\n   (into [:div.ml-2.font-bold] content)])\n\n(defn error-view [error]\n  [:div.bg-red-100.dark:bg-gray-800.px-6.py-4.rounded-md.text-xs.dark:border-2.dark:border-red-300.not-prose\n   [:p.font-mono.text-red-600.dark:text-red-300.font-bold (.-message error)]\n   [:pre.text-red-600.dark:text-red-300.w-full.overflow-auto.mt-2\n    {:class \"text-[11px] max-h-[155px]\"}\n    (try\n      (->> (.-stack error)\n           str/split-lines\n           (drop 1)\n           (mapv str/trim)\n           (str/join \"\\n\"))\n      (catch js/Error _ nil))]\n   (when-some [data (.-data error)]\n     [:div.mt-2 [inspect data]])])\n\n(defn error-boundary [!error & _]\n  (r/create-class\n   {:constructor (fn [_ _])\n    :component-did-catch (fn [_ e _info] (reset! !error e))\n    :get-derived-state-from-error (fn [e] (reset! !error e) #js {})\n    :reagent-render (fn [_error & children]\n                      (if-let [error @!error]\n                        (error-view error)\n                        (into [:<>] children)))}))\n\n(defn fetch! [{:keys [blob-id]} opts]\n  #_(js/console.log :fetch! blob-id opts)\n  (-> (js/fetch (str \"_blob/\" blob-id (when (seq opts)\n                                        (str \"?\" (opts->query opts)))))\n      (.then #(.text %))\n      (.then #(try (read-string %)\n                   (catch js/Error e\n                     (js/console.error #js {:message \"sci read error\" :blob-id blob-id :code-string % :error e })\n                     (unreadable-edn-viewer %))))))\n\n(defn read-result [{:nextjournal/keys [edn string]} !error]\n  (if edn\n    (try\n      (read-string edn)\n      (catch js/Error e\n        (reset! !error e)))\n    (unreadable-edn-viewer string)))\n\n(defn result-viewer [{:as result :nextjournal/keys [fetch-opts hash]} _opts]\n  (html (r/with-let [!hash (atom hash)\n                     !error (atom nil)\n                     !desc (r/atom (read-result result !error))\n                     !fetch-opts (atom fetch-opts)\n                     fetch-fn (when @!fetch-opts\n                                (fn [opts]\n                                  (.then (fetch! @!fetch-opts opts)\n                                         (fn [more]\n                                           (swap! !desc viewer/merge-presentations more opts)))))\n                     !expanded-at (r/atom (get @!desc :nextjournal/expanded-at {}))\n                     on-key-down (fn [event]\n                                   (if (.-altKey event)\n                                     (swap! !expanded-at assoc :prompt-multi-expand? true)\n                                     (swap! !expanded-at dissoc :prompt-multi-expand?)))\n                     on-key-up #(swap! !expanded-at dissoc :prompt-multi-expand?)\n                     ref-fn #(if %\n                               (when (exists? js/document)\n                                 (js/document.addEventListener \"keydown\" on-key-down)\n                                 (js/document.addEventListener \"keyup\" on-key-up))\n                               (when (exists? js/document)\n                                 (js/document.removeEventListener \"keydown\" on-key-down)\n                                 (js/document.removeEventListener \"up\" on-key-up)))]\n          (when-not (= hash @!hash)\n            ;; TODO: simplify\n            (reset! !hash hash)\n            (reset! !fetch-opts fetch-opts)\n            (reset! !desc (read-result result !error))\n            (reset! !error nil))\n          [view-context/provide {:fetch-fn fetch-fn}\n           [error-boundary\n            !error\n            [:div.relative\n             [:div.overflow-y-hidden\n              {:ref ref-fn}\n              [inspect-presented {:!expanded-at !expanded-at} @!desc]]]]])))\n\n(defn toggle-expanded [!expanded-at path event]\n  (.preventDefault event)\n  (.stopPropagation event)\n  (let [{:keys [hover-path prompt-multi-expand?]} @!expanded-at\n        hover-path-count (count hover-path)\n        hover-path-expanded? (get @!expanded-at path)]\n    (if (and hover-path prompt-multi-expand? (= (count path) hover-path-count))\n      (swap! !expanded-at (fn [expanded-at]\n                            (reduce\n                              (fn [acc [path expanded?]]\n                                (if (and (coll? path) (vector? path) (= (count path) hover-path-count))\n                                  (assoc acc path (not hover-path-expanded?))\n                                  (assoc acc path expanded?)))\n                              {}\n                              expanded-at)))\n      (swap! !expanded-at update path not))))\n\n(defn expandable? [xs]\n  (< 1 (count xs)))\n\n\n(defn inspect-children [opts]\n  ;; TODO: move update function onto viewer\n  (map-indexed (fn [idx x]\n                 (inspect-presented (update opts :path (fnil conj []) idx) x))))\n\n(def expand-style\n  [\"cursor-pointer\"\n   \"bg-indigo-50\"\n   \"hover:bg-indigo-100\"\n   \"border-b\"\n   \"border-gray-400\"\n   \"hover:border-gray-500\"\n   \"dark:bg-gray-900\"\n   \"dark:hover:bg-slate-700\"\n   \"dark:border-slate-600\"\n   \"dark:hover:border-slate-500\"])\n\n(defn triangle [expanded?]\n  [:svg {:viewBox \"0 0 100 100\"\n         :class (str \"w-[7px] h-[7px] fill-current inline-block transition-all mr-[1px] -mt-[2px] \"\n                     (if expanded? \"rotate-180\" \"rotate-90\"))}\n   [:polygon {:points \"5.9,88.2 50,11.8 94.1,88.2 \"}]])\n\n(def triangle-spacer [:span {:class \"inline-block w-[8px]\"}])\n\n(defn expand-button [!expanded-at opening-paren path]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [hover-path prompt-multi-expand?]} @!expanded-at\n        multi-expand? (and hover-path prompt-multi-expand? (= (count path) (count hover-path)))]\n    [:span.group.hover:bg-indigo-100.rounded-sm.hover:shadow.cursor-pointer\n     {:class (when multi-expand? \"bg-indigo-100 shadow \")\n      :on-click (partial toggle-expanded !expanded-at path)\n      :on-mouse-enter #(swap! !expanded-at assoc :hover-path path)\n      :on-mouse-leave #(swap! !expanded-at dissoc :hover-path)}\n     [:span.text-slate-400.group-hover:text-indigo-700\n      {:class (when multi-expand? \"text-indigo-700 \")}\n      [triangle expanded?]]\n     [:span.group-hover:text-indigo-700 opening-paren]]))\n\n(defn coll-view [xs {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [opening-paren closing-paren]} viewer]\n    [:span.inspected-value.whitespace-nowrap\n     {:class (when expanded? \"inline-flex\")}\n     [:span\n      (if (< 1 (count xs))\n        [expand-button !expanded-at opening-paren path]\n        [:span opening-paren])\n      (into [:<>]\n            (comp (inspect-children opts)\n                  (interpose (if expanded? [:<> [:br] triangle-spacer nbsp (when (= 2 (count opening-paren)) nbsp)] \" \")))\n            xs)\n      [:span\n       (cond->> closing-paren (list? closing-paren) (into [:<>]))]]]))\n\n(defn coll-viewer [xs opts] (html (coll-view xs opts)))\n\n(defn elision-viewer [{:as fetch-opts :keys [total offset unbounded?]} _]\n  (html [view-context/consume :fetch-fn\n         (fn [fetch-fn]\n           [:span.sans-serif.relative.whitespace-nowrap\n            {:style {:border-radius 2 :padding (when (fn? fetch-fn) \"1px 3px\") :font-size 11 :top -1}\n             :class (if (fn? fetch-fn)\n                      \"cursor-pointer bg-indigo-200 hover:bg-indigo-300 dark:bg-gray-700 dark:hover:bg-slate-600 text-gray-900 dark:text-white\"\n                      \"text-gray-400 dark:text-slate-300\")\n             :on-click #(when (fn? fetch-fn)\n                          (fetch-fn fetch-opts))} (- total offset) (when unbounded? \"+\") (if (fn? fetch-fn) \" more\u2026\" \" more elided\")])]))\n\n(defn map-view [xs {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [closing-paren]} viewer]\n    [:span.inspected-value.whitespace-nowrap\n     {:class (when expanded? \"inline-flex\")}\n     [:span\n      (if (expandable? xs)\n        [expand-button !expanded-at \"{\" path]\n        [:span \"{\"])\n      (into [:<>]\n            (comp (inspect-children opts)\n                  (interpose (if expanded? [:<> [:br] triangle-spacer nbsp #_(repeat (inc (count path)) nbsp)] \" \")))\n            xs)\n      (cond->> closing-paren (list? closing-paren) (into [:<>]))]]))\n\n(defn map-viewer [xs opts] (html (map-view xs opts)))\n\n(defn string-viewer [s {:as opts :keys [path !expanded-at] :or {path []}}]\n  (html\n   (let [expanded? (get @!expanded-at path)]\n     (into [:span]\n           (map #(if (string? %)\n                   (if expanded?\n                     (into [:<>] (interpose [:<> [:br]] (str/split-lines %)))\n                     (into [:<>] (interpose [:span.text-slate-400 \"\u21a9\ufe0e\"] (str/split-lines %))))\n                   (inspect-presented opts %)))\n           (if (string? s) [s] s)))))\n\n(defn quoted-string-viewer [s {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [{:keys [closing-paren]} viewer]\n    (html [:span.cmt-string.inspected-value.whitespace-nowrap.inline-flex\n           [:span\n            (if (some #(and (string? %) (str/includes? % \"\\n\")) (if (string? s) [s] s))\n              [expand-button !expanded-at \"\\\"\" path]\n              [:span \"\\\"\"])]\n           [:div\n            (viewer/->value (string-viewer s opts))\n            \"\\\"\"\n            closing-paren]])))\n\n(defn number-viewer [num]\n  (html [:span.cmt-number.inspected-value\n         (if (js/Number.isNaN num) \"NaN\" (str num))]))\n\n(defn sort! [!sort i k]\n  (let [{:keys [sort-key sort-order]} @!sort]\n    (reset! !sort {:sort-index i\n                   :sort-key k\n                   :sort-order (if (= sort-key k) (if (= sort-order :asc) :desc :asc) :asc)})))\n\n(defn sort-data [{:keys [sort-index sort-order]} {:as data :keys [head rows]}]\n  (cond-> data\n    head (assoc :rows (->> rows\n                           (sort-by #(cond-> (get % sort-index)\n                                       (string? val) str/lower-case)\n                                    (if (= sort-order :asc) #(compare %1 %2) #(compare %2 %1)))\n                           vec))))\n\n(def x-icon\n  [:svg.h-4.w-4 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\"}\n   [:path {:fill-rule \"evenodd\" :d \"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" :clip-rule \"evenodd\"}]])\n\n(def check-icon\n  [:svg.h-4.w-4 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\"}\n   [:path {:fill-rule \"evenodd\" :d \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" :clip-rule \"evenodd\"}]])\n\n(defn table-error [[data]]\n  ;; currently boxing the value in a vector to retain the type info\n  ;; TODO: find a better way to do this\n  (html\n   [:div.bg-red-100.dark:bg-gray-800.px-6.py-4.rounded-md.text-xs.dark:border-2.dark:border-red-400.not-prose\n    [:h4.mt-0.uppercase.text-xs.dark:text-red-400.tracking-wide \"Table Error\"]\n    [:p.mt-4.font-medium \"Clerk\u2019s table viewer does not recognize the format of your data:\"]\n    [:div.mt-2.flex\n     [:div.text-red-500.mr-2 x-icon]\n     [inspect-presented data]]\n    [:p.mt-4.font-medium \"Currently, the following formats are supported:\"]\n    [:div.mt-2.flex.items-center\n     [:div.text-green-500.mr-2 check-icon]\n     [inspect {:column-1 [1 2]\n                         :column-2 [3 4]}]]\n    [:div.mt-2.flex.items-center\n     [:div.text-green-500.mr-2 check-icon]\n     [inspect [{:column-1 1 :column-2 3} {:column-1 2 :column-2 4}]]]\n    [:div.mt-2.flex.items-center\n     [:div.text-green-500.mr-2 check-icon]\n     [inspect [[1 3] [2 4]]]]\n    [:div.mt-2.flex.items-center\n     [:div.text-green-500.mr-2 check-icon]\n     [inspect {:head [:column-1 :column-2]\n                         :rows [[1 3] [2 4]]}]]]))\n\n\n(defn throwable-view [{:keys [via trace]}]\n  [:div.bg-white.max-w-6xl.mx-auto.text-xs.monospace.not-prose\n   (into\n    [:div]\n    (map\n     (fn [{:as _ex :keys [type message data _trace]}]\n       [:div.p-4.bg-red-100.border-b.border-b-gray-300\n        [:div.font-bold \"Unhandled \" type]\n        [:div.font-bold.mt-1 message]\n        [:div.mt-1 [inspect data]]])\n     via))\n   [:div.py-6.overflow-x-auto\n    [:table.w-full\n     (into [:tbody]\n           (map (fn [[call _x file line]]\n                  [:tr.hover:bg-red-100.leading-tight\n                   [:td.text-right.px-6 file \":\"]\n                   [:td.text-right.pr-6 line]\n                   [:td.py-1.pr-6 call]]))\n           trace)]]])\n\n(defn throwable-viewer [ex]\n  (html [throwable-view ex]))\n\n(defn tagged-value\n  ([tag value] (tagged-value {:space? true} tag value))\n  ([{:keys [space?]} tag value]\n   [:span.inspected-value.whitespace-nowrap\n    [:span.cmt-meta tag] (when space? nbsp) value]))\n\n(defn normalize-viewer-meta [x]\n  (if-let [viewer (-> x meta :nextjournal/viewer)]\n    (with-viewer ({:html html-viewer\n                   :reagent reagent-viewer} viewer viewer) x)\n    x))\n\n(defonce !doc (ratom/atom nil))\n(defonce !error (ratom/atom nil))\n(defonce !viewers viewer/!viewers)\n\n(defn set-viewers! [scope viewers]\n  #_(js/console.log :set-viewers! {:scope scope :viewers viewers})\n  (swap! !viewers assoc scope (vec viewers))\n  'set-viewers!)\n\n(declare default-viewers)\n\n(defn render-with-viewer [opts viewer value]\n  #_(js/console.log :render-with-viewer {:value value :viewer viewer :opts opts})\n  (cond (or (fn? viewer) (viewer/viewer-fn? viewer))\n        (viewer value opts)\n\n        (and (map? viewer) (:render-fn viewer))\n        (render-with-viewer opts (:render-fn viewer) value)\n\n        #_#_ ;; TODO: maybe bring this back\n        (keyword? viewer)\n        (if-let [{:keys [fetch-opts render-fn]} (viewer/find-named-viewer viewers viewer)]\n          (if-not render-fn\n            (html (error-badge \"no render function for viewer named \" (str viewer)))\n            (render-fn value (assoc opts :fetch-opts fetch-opts)))\n          (html (error-badge \"cannot find viewer named \" (str viewer))))\n\n        :else\n        (html (error-badge \"unusable viewer `\" (pr-str viewer) \"`, value `\" (pr-str value) \"`\"))))\n\n(defn valid-react-element? [x] (react/isValidElement x))\n\n(defn inspect-presented\n  ([x]\n   (r/with-let [!expanded-at (r/atom (:nextjournal/expanded-at x))]\n     [inspect-presented {:!expanded-at !expanded-at} x]))\n  ([opts x]\n   (if (valid-react-element? x)\n     x\n     (let [value (viewer/->value x)\n           viewer (viewer/->viewer x)]\n       #_(prn :inspect value :valid-element? (react/isValidElement value) :viewer (viewer/->viewer x))\n       (inspect-presented opts (render-with-viewer (merge opts {:viewer viewer} (:nextjournal/opts x)) viewer value))))))\n\n(defn in-process-fetch [value opts]\n  (.resolve js/Promise (viewer/present value opts)))\n\n(defn inspect [value]\n  (r/with-let [!state (r/atom nil)]\n    (when (not= (:value @!state ::not-found) value)\n      (swap! !state assoc :value value :desc (viewer/present value)))\n    [view-context/provide {:fetch-fn (fn [fetch-opts]\n                                       (.then (in-process-fetch value fetch-opts)\n                                              (fn [more]\n                                                (swap! !state update :desc viewer/merge-presentations more fetch-opts))))}\n     [inspect-presented (:desc @!state)]]))\n\n(defn root []\n  [:<>\n   [inspect-presented @!doc]\n   (when @!error\n     [:div.fixed.top-0.left-0.w-full.h-full\n      [inspect-presented @!error]])])\n\n(declare mount)\n\n(defn ^:export set-state [{:as state :keys [doc error remount?]}]\n  (when remount?\n    (swap! !eval-counter inc))\n  (when (contains? state :doc)\n    (reset! !doc doc))\n  (reset! !error error)\n  (when-some [title (and (exists? js/document) (-> doc viewer/->value :title))]\n    (set! (.-title js/document) title)))\n\n(defn ^:export ^:dev/after-load mount []\n  (when-let [el (and (exists? js/document) (js/document.getElementById \"clerk\"))]\n    #_(rdom/unmount-component-at-node el)\n    (rdom/render [root] el)))\n\n(defn clerk-eval [form]\n  (.ws_send ^js goog/global (pr-str form)))\n\n(defn katex-viewer [tex-string {:keys [inline?]}]\n  (html (katex/to-html-string tex-string (j/obj :displayMode (not inline?)))))\n\n(defn html-render [markup]\n  (r/as-element\n   (if (string? markup)\n     [:span {:dangerouslySetInnerHTML {:__html markup}}]\n     markup)))\n\n(def html-viewer\n  {:render-fn html-render})\n\n(def html\n  (partial with-viewer html-viewer))\n\n(defn reagent-viewer [x]\n  (r/as-element (cond-> x (fn? x) vector)))\n\n(defn with-d3-require [{:keys [package then loading-view]\n                        :or {loading-view \"Loading...\" then identity}} f]\n  (r/with-let [!package (r/atom {:loading loading-view})\n               _ (-> (if (string? package)\n                       (d3-require/require package)\n                       (apply d3-require/require package))\n                     (.then then)\n                     (.then f)\n                     (.then #(reset! !package {:value %}))\n                     (.catch #(reset! !package {:error %})))]\n    (let [{:keys [loading error value]} @!package]\n      (cond\n        loading loading\n        error [error-view error]\n        value value))))\n\n(defn vega-lite-viewer [value]\n  (when value\n    (html ^{:key value}\n          [with-d3-require {:package [\"vega-embed@6.11.1\"]\n                            :then (fn [embed] (.container embed (clj->js (dissoc value :embed/opts)) (clj->js (:embed/opts value {}))))}\n           (j/fn [vega-el]\n             [:div {:style {:overflow-x \"auto\"}}\n              [:div.vega-lite {:ref #(when %\n                                       (.appendChild % vega-el))}]])])))\n\n(defn plotly-viewer [value]\n  (when value\n    (html ^{:key value}\n          [with-d3-require {:package [\"plotly.js-dist@2.15.1\"]\n                            :then (fn [^js plotly]\n                                    (let [el (js/document.createElement \"div\")]\n                                      (.newPlot plotly el (clj->js value))\n                                      el))}\n           (j/fn [plotly-el]\n             [:div {:style {:overflow-x \"auto\"}}\n              [:div.plotly {:ref #(when %\n                                    (.appendChild % plotly-el))}]])])))\n\n(def mathjax-viewer (comp normalize-viewer-meta mathjax/viewer))\n(def code-viewer (comp normalize-viewer-meta code/viewer))\n\n(def expand-icon\n  [:svg {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\" :width 12 :height 12}\n   [:path {:fill-rule \"evenodd\" :d \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" :clip-rule \"evenodd\"}]])\n\n(defn foldable-code-viewer [code-string]\n  (r/with-let [!hidden? (r/atom true)]\n    (html (if @!hidden?\n            [:div.relative.pl-12.font-sans.text-slate-400.cursor-pointer.flex.overflow-y-hidden.group\n             [:span.hover:text-slate-500\n              {:class \"text-[10px]\"\n               :on-click #(swap! !hidden? not)}\n              \"show code\"]\n             #_#_#_[:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.hover:text-slate-500\n              {:class \"text-[10px]\"}\n              \"hide result\"]\n             [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-75.hover:text-slate-500\n              {:class \"text-[10px]\"}\n              \"cached in memory\"]\n             [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-150.hover:text-slate-500\n              {:class \"text-[10px]\"}\n              \"evaluated in 0.2s\"]]\n            [:<>\n             [:div.relative.pl-12.font-sans.text-slate-400.cursor-pointer.flex.overflow-y-hidden.group.mb-1\n              [:span.hover:text-slate-500\n               {:class \"text-[10px]\"\n                :on-click #(swap! !hidden? not)}\n               \"hide code\"]\n              #_#_#_[:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.hover:text-slate-500\n               {:class \"text-[10px]\"}\n               \"hide result\"]\n              [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-75.hover:text-slate-500\n               {:class \"text-[10px]\"}\n               \"cached in memory\"]\n              [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-150.hover:text-slate-500\n               {:class \"text-[10px]\"}\n               \"evaluated in 0.2s\"]]\n             [:div.viewer-code.mb-2.relative {:style {:margin-top 0}}\n              [inspect-presented (code-viewer code-string)]]]))))\n\n\n(defn url-for [{:as src :keys [blob-id]}]\n  (if (string? src)\n    src\n    (str \"/_blob/\" blob-id (when-let [opts (seq (dissoc src :blob-id))]\n                             (str \"?\" (opts->query opts))))))\n\n(def ^{:doc \"Stub implementation to be replaced during static site generation. Clerk is only serving one page currently.\"}\n  doc-url\n  (sci/new-var 'doc-url (fn [x] (str \"#\" x))))\n\n(def sci-viewer-namespace\n  {'inspect-presented inspect-presented\n   'inspect inspect\n   'valid-react-element? valid-react-element?\n   'result-viewer result-viewer\n   'coll-view coll-view\n   'coll-viewer coll-viewer\n   'map-view map-view\n   'map-viewer map-viewer\n   'elision-viewer elision-viewer\n   'tagged-value tagged-value\n   'inspect-children inspect-children\n   'set-viewers! set-viewers!\n   'string-viewer string-viewer\n   'quoted-string-viewer quoted-string-viewer\n   'number-viewer number-viewer\n   'table-error table-error\n   'with-d3-require with-d3-require\n   'clerk-eval clerk-eval\n   'consume-view-context view-context/consume\n\n   'throwable-viewer throwable-viewer\n   'notebook-viewer notebook\n   'katex-viewer katex-viewer\n   'mathjax-viewer mathjax-viewer\n   'code-viewer code-viewer\n   'foldable-code-viewer foldable-code-viewer\n   'plotly-viewer plotly-viewer\n   'vega-lite-viewer vega-lite-viewer\n   'reagent-viewer reagent-viewer\n   'unreadable-edn-viewer unreadable-edn-viewer\n\n   'doc-url doc-url\n   'url-for url-for\n   'read-string read-string\n\n   ;; clerk viewer API\n   'code code\n   'col col\n   'html html-render\n   'md md\n   'plotly plotly\n   'row row\n   'table table\n   'tex tex\n   'vl vl\n   'present viewer/present\n   'with-viewer with-viewer\n   'with-viewers with-viewers})\n\n(defonce !sci-ctx\n  (atom (sci/init {:async? true\n                   :disable-arity-checks true\n                   :classes {'js goog/global\n                             'framer-motion framer-motion\n                             :allow :all}\n                   :aliases {'j 'applied-science.js-interop\n                             'reagent 'reagent.core\n                             'v 'nextjournal.clerk.sci-viewer}\n                   :namespaces (merge {'nextjournal.clerk.sci-viewer sci-viewer-namespace}\n                                      sci.configs.js-interop/namespaces\n                                      sci.configs.reagent/namespaces)})))\n\n(defn ^:export eval-form [f]\n  (sci/eval-form @!sci-ctx f))\n\n(defn get-rgba [x y img-width img-data]\n  (let [coord (* (+ (* img-width y) x) 4)]\n    {:r (.at img-data coord)\n     :g (.at img-data (+ coord 1))\n     :b (.at img-data (+ coord 2))\n     :a (.at img-data (+ coord 3))}))\n\n(defn white? [x y img-width img-data]\n  (= {:r 255 :g 255 :b 255 :a 255} (get-rgba x y img-width img-data)))\n\n(defn scan-y [from-top? img-width img-height img-data]\n  (loop [y (if from-top? 0 (dec img-height))\n         colored-col nil]\n    (if (and (not colored-col) (if from-top? (< y img-height) (< -1 y)))\n      (recur\n       (if from-top? (inc y) (dec y))\n       (loop [x 0]\n         (cond\n           (not (white? x y img-width img-data)) y\n           (< x (dec img-width)) (recur (inc x)))))\n      colored-col)))\n\n(defn scan-x [from-left? img-width img-height img-data]\n  (loop [x (if from-left? 0 (dec img-width))\n         colored-row nil]\n    (if (and (not colored-row) (if from-left? (< x img-width) (<= 0 x)))\n      (recur\n       (if from-left? (inc x) (dec x))\n       (loop [y 0]\n         (cond\n           (not (white? x y img-width img-data)) x\n           (< y (dec img-height)) (recur (inc y)))))\n      colored-row)))\n\n(defn ^:export trim-image\n  ([img] (trim-image img {}))\n  ([img {:keys [padding] :or {padding 0}}]\n   (let [canvas (js/document.createElement \"canvas\")\n         ctx (.getContext canvas \"2d\")\n         img-width (.-naturalWidth img)\n         img-height (.-naturalHeight img)\n         _ (.setAttribute canvas \"width\" img-width)\n         _ (.setAttribute canvas \"height\" img-height)\n         _ (.drawImage ctx img 0 0 img-width img-height)\n         img-data (.-data (.getImageData ctx 0 0 img-width img-height))\n         x1 (scan-x true img-width img-height img-data)\n         y1 (scan-y true img-width img-height img-data)\n         x2 (scan-x false img-width img-height img-data)\n         y2 (scan-y false img-width img-height img-data)\n         dx (inc (- x2 x1))\n         dy (inc (- y2 y1))\n         trimmed-data (.getImageData ctx x1 y1 dx dy)\n         _ (.setAttribute canvas \"width\" (+ dx (* padding 2)))\n         _ (.setAttribute canvas \"height\" (+ dy (* padding 2)))\n         _ (.clearRect ctx 0 0 (+ dx padding) (+ dy padding))\n         _ (set! (.-fillStyle ctx) \"white\")\n         _ (.fillRect ctx 0 0 (.-width canvas) (.-height canvas))\n         _ (.putImageData ctx trimmed-data padding padding)\n         result-img (js/document.createElement \"img\")]\n     (.setAttribute result-img \"src\" (.toDataURL canvas \"image/png\"))\n     result-img)))\n\n(defn ^:export append-trimmed-image [base64 id]\n  (let [img (js/document.createElement \"img\")]\n    (.addEventListener img \"load\" (fn [event]\n                                    (let [trimmed-img (trim-image (.-target event) {:padding 20})]\n                                      (.setAttribute trimmed-img \"id\" id)\n                                      (.. js/document -body (appendChild trimmed-img)))))\n    (.setAttribute img \"src\" base64)))\n\n(set! *eval* eval-form)\n"]}