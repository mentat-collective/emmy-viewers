{
"version":3,
"file":"module$node_modules$mathbox$build$esm$render$meshes$memoscreen.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/mathbox/build/esm/render/meshes/memoscreen.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathbox$build$esm$render$meshes$memoscreen\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MemoScreen = void 0;\n\nvar _screen = require(\"./screen.js\");\n\nvar _Vector = require(\"three/src/math/Vector2.js\");\n\nvar _Vector2 = require(\"three/src/math/Vector4.js\");\n\n// TODO: This file was created by bulk-decaffeinate.\n// Sanity-check the conversion and remove this comment.\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass MemoScreen extends _screen.Screen {\n  constructor(renderer, shaders, options) {\n    const {\n      items,\n      width,\n      height,\n      depth,\n      stpq\n    } = options;\n\n    const inv = x => 1 / Math.max(1, x);\n\n    const inv1 = x => 1 / Math.max(1, x - 1);\n\n    const uniforms = {\n      remapUVScale: {\n        type: \"v2\",\n        value: new _Vector.Vector2(items * width, height * depth)\n      },\n      remapModulus: {\n        type: \"v2\",\n        value: new _Vector.Vector2(items, height)\n      },\n      remapModulusInv: {\n        type: \"v2\",\n        value: new _Vector.Vector2(inv(items), inv(height))\n      },\n      remapSTPQScale: {\n        type: \"v4\",\n        value: new _Vector2.Vector4(inv1(width), inv1(height), inv1(depth), inv1(items))\n      }\n    };\n    const map = shaders.shader();\n    map.pipe(\"screen.map.xyzw\", uniforms);\n\n    if (options.map != null) {\n      // Need artifical STPQs because the screen is not the real geometry\n      if (stpq) {\n        map.pipe(\"screen.map.stpq\", uniforms);\n      }\n\n      map.pipe(options.map);\n    }\n\n    super(renderer, shaders, {\n      map,\n      linear: true\n    });\n    this.memo = options;\n    this.uniforms = uniforms;\n\n    for (const object of Array.from(this.renders)) {\n      object.transparent = false;\n    }\n  }\n\n  cover(width, height, depth, items) {\n    if (width == null) {\n      ({\n        width\n      } = this.memo);\n    }\n\n    if (height == null) {\n      ({\n        height\n      } = this.memo);\n    }\n\n    if (depth == null) {\n      ({\n        depth\n      } = this.memo);\n    }\n\n    if (items == null) {\n      ({\n        items\n      } = this.memo);\n    }\n\n    const inv1 = x => 1 / Math.max(1, x - 1);\n\n    this.uniforms.remapSTPQScale.value.set(inv1(width), inv1(height), inv1(depth), inv1(items));\n    const x = width / this.memo.width;\n    let y = depth / this.memo.depth;\n\n    if (this.memo.depth === 1) {\n      y = height / this.memo.height;\n    }\n\n    return this.geometry.cover(x, y);\n  }\n\n}\n\nexports.MemoScreen = MemoScreen;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","MemoScreen","_screen","_Vector","_Vector2","Screen","constructor","renderer","shaders","options","items","width","height","depth","stpq","uniforms","remapUVScale","type","Vector2","remapModulus","remapModulusInv","Math","max","remapSTPQScale","Vector4","map","shader","pipe","linear","memo","object","Array","from","renders","transparent","cover","set","x","y","geometry"]
}
