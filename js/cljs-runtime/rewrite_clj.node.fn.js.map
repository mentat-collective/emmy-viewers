{"version":3,"sources":["rewrite_clj/node/fn.cljc"],"mappings":";;AAUA;;;mCAAA,nCAAOA,8EAEJC,eAAeC,WAAWC;AAF7B,AAGE,YAAAC,eAAA,KAAA,AAAA,uDAAA,KAAAA,eAAA,mQAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,3TAEE,AAACC,cACC,AAACC,+CACCL,eACA,8BAAA,4IAAA,xJAAMC,YACJ,KAAAE,eAAA,KAAA,AAAA,oDAAA,KAAAA,eAAA,gBAAA,KAAA,IAAA,OAAA,IAAA,/BAASF,uEACfC;;AAEJ;;;;gCAAA,hCAAOI,wEAGJC;AAHH,AAIE,GAAM,+CAAA,/CAACC,6CAAED;AAAT;;AAAA,GACM,+CAAA,/CAACC,6CAAED;AADT;;AAAA,oBAEM,qBAAA,rBAACE,2BAAkBF;AAAG,OAACG,gCAAiBH;;AAF9C,AAGY,MAAO,gDAAA,yCAAA,zFAACI;;;;;;AAEtB;;;4CAAA,5CAAOC,gGAEJC,WAAWC,cAAQC,kBAAkBC;AAFxC,AAGE,GAAM,gBAAAC,fAASD;AAAf,AACE,IAAME,KAAG,AAACC,eAAKH;AAAf,AACE,GAAM,qCAAA,rCAACI,kCAAoBF;AAA3B,AACE,IAAMG,YAAU,AAACf,8BAAU,gDAAA,hDAACgB,6CAAKJ;AAAjC,AACE,GAAM,EAAK,uDAAA,vDAACV,6CAAEa,oBAAa,cAAA,AAAAE,dAACC,8BAAKV;AAAjC,AACE,oCAAA,pCAACW,sBAAOX;;AADV;;AAEA,AAACY,mDAAMX,kBAAkBY,cAAIN;;AAC7B,OAACO,4CAAIf,WAAWQ;;AALpB;;;AAFJ;;;AASF;;;8BAAA,9BAAOQ,oEAEJC;AAFH,AAGE,IAAMC,UAAQ,iBAAAC,qBAAA,oDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA85EmC,AAAA6G,sBAAAlH;IA95EnCM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMU;AAAN,AAAA,IACYE,OAAK,uDAAA,rDAAI,+CAAA,/CAAC/C,6CAAE6C,iBAEL,CAAA,mDAAA,HAASA;IAChBG,IAAE,AAACrC,eAAK,AAACsC,+CAAOF;AAJ5B,AAAA,AAAA,AAAAV,uBAAAJ,SAKE,AAACiB,+CAAO,GAAA,FAAKF;;AALf,eAAA,CAAAb,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,0CAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAS,gBAAAjB,pBAAMoB;AAAN,AAAA,IACYE,OAAK,uDAAA,rDAAI,+CAAA,/CAAC/C,6CAAE6C,iBAEL,CAAA,mDAAA,HAASA;IAChBG,IAAE,AAACrC,eAAK,AAACsC,+CAAOF;AAJ5B,AAAA,OAAAJ,gFAAA,AAAAH,0CAAA,AAAAI,eAAAnB,1HAKE,AAACyB,+CAAO,GAAA,FAAKF;;;AALf;;;;GAAA,KAAA;;AAAA,AAAA,OAAAxB,mBAAQ,AAACsB;;IAMjBvC,oBAAkB,6CAAA,7CAAC4C;IACnB7C,gBAAQ,6CAAA,7CAAC6C;IACTzD,OAAK,qBAAA,WAAA0D,hCAACC;AAAD,AACE,IAAAC,mBAAI,kFAAAF,lFAAChD,0CAAmBmB,QAAQjB,cAAQC;AAAxC,AAAA,oBAAA+C;AAAAA;;AAAAF;;GACD9B;AAVZ,AAWE,OAAC/B,iCACA,6CAAA,AAAAwB,7CAACwC,6DAAMhD,mBAAkB,AAACqC,eAAKrB,UAC/B,kBAAA,AAAAR,gCAAA,yBAAA,zCAAOT,gBACL,AAACoC,gBAAMnB,eACT7B;;AAIL,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,gDAAA,hDAAW8H;;AAAX,AAAA,WAAA,PAoBae;AApBb,AAqBI,OAAaA;;;AArBjB,CAAA,AAAA,yEAAA,WAAA/E,mBAAAC,vGAAW+D;;AAAX,AAAA,IAAAhE,yBAAA;AAAA,AAAA,OAAAA,8DAAAC,gBAAA;;;AAAA,CAAA,AAAA,yEAAA,WAAAC,mBAAAC,OAAAC,9GAAW4D;;AAAX,AAAA,IAAA9D,yBAAA;AAAA,AAAA,IAAAG,WAAAF;IAAAE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAAE;;;;AAAA,OAAAC,4CAAAC,gBAAAN,OAAAC;;;;;AAAA,CAAA,AAAA,8EAAA,WAAAM,mBAAAC,gBAAAC,5HAAWoD;;AAAX,AAAA,IAAAtD,yBAAA;AAAA,AAAA,OAAAG,+CAAA,WAAAC,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,kBAAA,AAAArD,4CAAAoD,WAAA,IAAA;IAAAE,kBAAA,AAAAtD,4CAAAoD,WAAA,IAAA;AAAA,AAAA,QAAAL,gDAAAA,8CAAAG,kBAAAG,gBAAAC,mBAAAP,0BAAAG,kBAAAG,gBAAAC;GAAAN,mBAAAF;;;AAAA,CAAA,AAAA,qFAAA,WAAAS,mBAAAC,qBAAAC,xIAAW2C;;AAAX,AAAA,IAAA7C,yBAAA;AAAA,AAAA,IAAAG,wBAAA,WAAAC;AAAA,AAAA,OAAAC,+BAAAJ,qBAAA,oBAAA,GAAA,IAAA,GAAAC,mBAAAE;;AAAA,AAAA,OAAAC,+BAAAJ,qBAAAE,sBAAA,+BAAA,KAAA,IAAAD,mBAAA,AAAAhF,+CAAA,mFAAA,KAAAoF,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,6DAAAlB,iBAAA,eAAAE;;;AAAA,CAAA,AAAA,6EAAA,WAAAiB,xFAAWsC;;AAAX,AAAA,IAAAtC,eAAA;AAAA,AAAA,YAAAC,qBAAA,IAAAD,aAAA,EAAA,mFAAA,qEAAA,kBAAAjB,iBAAA,AAAAmB,oBAAAnB,iBAAA,AAAAoB;;;AAAA,CAAA,AAAA,qEAAA,WAAAC,hFAAWkC;;AAAX,AAAA,IAAAlC,yBAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,2EAAA,WAAAC,tFAAWgC;;AAAX,AAAA,IAAAhC,yBAAA;AAAA,AAAA,uCAAAzB,gBAAAwB,cAAAtB,gBAAAwB,zEAAW+B;;;AAAX,CAAA,AAAA,yEAAA,WAAA9B,pFAAW8B;;AAAX,AAAA,IAAA9B,yBAAA;AAAA,AAAA,QAAA,IAAA,AAAA1D,gBAAAiC;;;AAAA,CAAA,AAAA,qEAAA,WAAA0B,hFAAW6B;;AAAX,AAAA,IAAA7B,yBAAA;AAAA,AAAA,IAAAC,kBAAAH;AAAA,AAAA,GAAA,GAAA,CAAAG,mBAAA;AAAAA;;AAAA,IAAAA,sBAAA,AAAA,WAAAC;AAAA,AAAA,QAAA,cAAA,AAAAC,8BAAAD;GAAAF;AAAA,AAAA,CAAAF,gBAAAG;;AAAAA;;;;AAAA,CAAA,AAAA,uEAAA,WAAAG,UAAAC,5FAAWwB;;AAAX,AAAA,IAAAzB,gBAAA;AAAA,AAAA,SAAA,GAAA,CAAAC,cAAA,aAAA,EAAA,CAAA,AAAAD,8BAAA,AAAAC,6BAAA,EAAA,AAAAhG,6CAAA,AAAA+F,uBAAA,AAAAC,0BAAA,AAAAhG,6CAAA,AAAA+F,uBAAA,AAAAC;;;AAAA,CAAA,AAAA,wEAAAC,xEAAWuB;;AAAX,CAAA,AAAA,mFAAA,nFAAWA,8FAEHU;;AAFR,AAAA,gBAAA,ZAEQA;AAFR,AAAA;;;AAAA,CAAA,AAAA,yFAAA,zFAAWV,oGAGGU;;AAHd,AAAA,gBAAA,ZAGcA;AAHd,AAAA;;;AAAA,CAAA,AAAA,qGAAA,rGAAWV,gHAISU;;AAJpB,AAAA,gBAAA,ZAIoBA;AAJpB,AAAA;;;AAAA,CAAA,AAAA,2FAAA,3FAAWV,sGAKAU,MAAMC;;AALjB,AAAA,gBAAA,ZAKWD;AALX,AAMI,OAAC7G,4BAAQ,AAAC+G,gEAAYrE,gBAASoE;;;AANnC,CAAA,AAAA,sFAAA,tFAAWX,iGAOAU;;AAPX,AAAA,gBAAA,ZAOWA;AAPX,AAQI,QAAA,MAAK,AAACG,uCAAiBtE;;;AAR3B,CAAA,AAAA,sFAAA,tFAAWyD,iGASAU;;AATX,AAAA,gBAAA,ZASWA;AATX,AAUI,QAAA,6GAAA,5DAAU,AAACI,0CAAoBvE;;;AAVnC,CAAA,AAAA,sEAAA,WAAAmC,mBAAAC,pGAAWqB;;AAAX,AAAA,IAAAtB,yBAAA;AAAA,AAAA,GAAA,AAAAE,0BAAA,iFAAA,iFAAAD;AAAA,OAAAE,+CAAA,AAAAC,qBAAA,AAAAC,6CAAA,mCAAAL,wBAAAX,eAAAY;;AAAA,uCAAApC,gBAAAwB,cAAA,AAAAiB,oBAAA,AAAAH,+CAAApC,gBAAAkC,kBAAA,9JAAWqB;;;;AAAX,CAAA,AAAA,6EAAAvB,7EAAWuB;;AAAX,CAAA,AAAA,iGAAA,jGAAWA,4GAaAU;;AAbX,AAAA,gBAAA,ZAaWA;AAbX,AAAA;;;AAAA,CAAA,AAAA,6FAAA,7FAAWV,wGAcEU;;AAdb,AAAA,gBAAA,ZAcaA;AAdb,AAcoBnE;;;AAdpB,CAAA,AAAA,qGAAA,rGAAWyD,gHAeUe,KAAKC;;AAf1B,AAAA,eAAA,XAeqBD;AAfrB,AAgBI,8DAAA,vDAACvB,8CAAMuB,sEAAeC;;;AAhB1B,CAAA,AAAA,kGAAA,lGAAWhB,6GAiBOU;;AAjBlB,AAAA,gBAAA,ZAiBkBA;AAjBlB,AAAA;;;AAAA,CAAA,AAAA,2FAAA,WAAAzB,mBAAA9C,zHAAW6D;;AAAX,AAAA,IAAAf,yBAAA;AAAA,AAAA,IAAAC,WAAA/C;IAAA+C,eAAA,EAAA,CAAAA,oBAAA5C,oBAAA,AAAA4C,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;;AAAA,OAAAN,0BAAAnC,gBAAAN;;;;;AAAA,CAAA,AAAA,6EAAA,WAAAgD,mBAAAC,gBAAA1B,3HAAWsC;;AAAX,AAAA,IAAAb,yBAAA;AAAA,AAAA,IAAAE,cAAAC;IAAAC,cAAAH;AAAA,AAAA,oBAAA,CAAAC,4CAAAA,0CAAA,6DAAAE,eAAAF,sBAAA,6DAAAE;AAAA,uCAAA7B,SAAAK,cAAAtB,gBAAA,lEAAWuD;;AAAX,uCAAAzD,gBAAAwB,cAAA,AAAAyB,8CAAA/C,gBAAA2C,gBAAA1B,UAAA,jJAAWsC;;;;AAAX,CAAA,AAAA,uEAAA,WAAAP,lFAAWO;;AAAX,AAAA,IAAAP,yBAAA;AAAA,AAAA,OAAArF,cAAA,AAAA/B,+CAAA,mFAAA,KAAAqH,mBAAA,6DAAAnD,gBAAA,eAAAE;;;AAAA,CAAA,AAAA,8EAAA,WAAAkD,mBAAAjC,5GAAWsC;;AAAX,AAAA,IAAAL,yBAAA;AAAA,AAAA,uCAAApD,gBAAAmB,SAAAjB,gBAAAwB,pEAAW+B;;;AAAX,CAAA,AAAA,2EAAA,WAAAJ,mBAAAC,zGAAWG;;AAAX,AAAA,IAAAJ,yBAAA;AAAA,AAAA,GAAA,AAAAE,wBAAAD;AAAA,OAAAD,kEAAA,AAAAhF,eAAAiF,oBAAA,KAAA,AAAAjF,eAAAiF,oBAAA;;AAAA,OAAAhD,+CAAAkD,gBAAAH,uBAAAC;;;;AAAA,CAAA,AAAAG,sCAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,4CAAA;;AAAA,CAAA,AAAAA,iDAAA,WAAAC;AAAA,AAAA,YAAA9H,eAAA,KAAA,6BAAA,KAAA,IAAA;;;AAAA,CAAA,AAAA6H,oDAAA,WAAAC,mBAAAC;AAAA,AAAA,OAAAC,iBAAAD,qBAAA;;;AAAA;;;kCAAA,lCAAWM,4EAAQjE;AAAnB,AAAA,YAAAyD,oCAAA,KAAA,KAAA,nBAAmBzD;;;AAAnB;;;qCAAA,6CAAA6D,lFAAWK;AAAX,AAAA,IAAAJ,uBAAA,iBAAAC,WAAA,AAAAzB,+CAAAuB,SAAA;AAAA,AAAA,GAAA,AAAAG,wBAAAH;AAAA,OAAArB,6CAAA,mCAAAuB;;AAAAA;;;AAAA,AAAA,YAAAN,2BAAA,AAAA,2FAAAI,UAAA,KAAA,AAAApB,oBAAAqB,sBAAA;;;AAAAL,AAuBA,AAACiB,gDAAqBjB;AAItB;;;;;;;;;;;;;;;8BAAA,9BAAMkB,oEAcH3E;AAdH,AAeE,OAACiE,gCAASjE","names":["rewrite-clj.node.fn/construct-fn","fixed-arg-syms","vararg-sym","body","cljs.core/List","cljs.core/vec","cljs.core.concat","rewrite-clj.node.fn/arg-index","n","cljs.core._EQ_","cljs.core/re-matches","rewrite-clj.interop/str->int","cljs.core.ex_info","rewrite-clj.node.fn/arg-symbol->gensym","gensym-seq","vararg?","max-fixed-arg-ndx","sym","cljs.core/Symbol","nm","cljs.core/name","clojure.string/starts-with?","param-ndx","cljs.core.subs","cljs.core/deref","cljs.core/not","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/max","cljs.core.nth","rewrite-clj.node.fn/fn-walk","form","sym-seq","iter__5523__auto__","s__74177","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__74179","cljs.core/chunk-buffer","i__74178","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__74176","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","base","s","cljs.core.gensym","cljs.core.symbol","cljs.core.atom","p1__74168#","clojure.walk/prewalk","or__5045__auto__","cljs.core.take","this__5343__auto__","k__5344__auto__","this__5345__auto__","k74223","else__5346__auto__","G__74229","cljs.core/Keyword","children","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__74232","vec__74239","k__5367__auto__","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__74222","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this74224","other74225","cljs.core/PROTOCOL_SENTINEL","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__74256","this__5351__auto__","k__5352__auto__","pred__74262","cljs.core/keyword-identical?","expr__74263","cljs.core.assoc","this__5356__auto__","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-conj","rewrite-clj.node.fn/FnNode","this__5389__auto__","writer__5390__auto__","cljs.core/-write","G__74227","extmap__5385__auto__","G__74279","cljs.core/record?","rewrite-clj.node.fn/->FnNode","rewrite-clj.node.fn/map->FnNode","_node","opts","rewrite_clj.node.protocols.sexprs","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","node","children'","rewrite-clj.node.protocols/make-printable!","rewrite-clj.node.fn/fn-node","cljs.core/chunk-first"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.fn\n  (:require [clojure.string :as string]\n            [clojure.walk :as w]\n            [rewrite-clj.interop :as interop]\n            [rewrite-clj.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Conversion\n\n(defn- construct-fn\n  \"Construct function form.\"\n  [fixed-arg-syms vararg-sym body]\n  (list\n    'fn*\n    (vec\n      (concat\n        fixed-arg-syms\n        (when vararg-sym\n          (list '& vararg-sym))))\n    body))\n\n(defn- arg-index\n  \"Get index based on the substring following the arg's `%`.\n   Zero means vararg.\"\n  [n]\n  (cond (= n \"&\") 0\n        (= n \"\") 1\n        (re-matches #\"\\d+\" n) (interop/str->int n)\n        :else (throw (ex-info \"arg literal must be %, %& or %integer.\" {}))))\n\n(defn- arg-symbol->gensym\n  \"If symbol starting with `%`, convert to respective gensym.\"\n  [gensym-seq vararg? max-fixed-arg-ndx sym]\n  (when (symbol? sym)\n    (let [nm (name sym)]\n      (when (string/starts-with? nm \"%\")\n        (let [param-ndx (arg-index (subs nm 1))]\n          (when (and (= param-ndx 0) (not @vararg?))\n            (reset! vararg? true))\n          (swap! max-fixed-arg-ndx max param-ndx)\n          (nth gensym-seq param-ndx))))))\n\n(defn- fn-walk\n  \"Walk the form and create an expand function form.\"\n  [form]\n  (let [sym-seq (for [i (range)\n                      :let [base (if (= i 0)\n                                   \"rest__\"\n                                   (str \"p\" i \"__\"))\n                            s (name (gensym base))]]\n                  (symbol (str s \"#\")))\n        max-fixed-arg-ndx (atom 0)\n        vararg? (atom false)\n        body (w/prewalk\n              #(or (arg-symbol->gensym sym-seq vararg? max-fixed-arg-ndx %) %)\n              form)]\n    (construct-fn\n     (take @max-fixed-arg-ndx (rest sym-seq))\n     (when @vararg?\n       (first sym-seq))\n     body)))\n\n;; ## Node\n\n(defrecord FnNode [children]\n  node/Node\n  (tag [_node] :fn)\n  (node-type [_node] :fn)\n  (printable-only? [_node] false)\n  (sexpr* [_node opts]\n    (fn-walk (node/sexprs children opts)))\n  (length [_node]\n    (+ 3 (node/sum-lengths children)))\n  (string [_node]\n    (str \"#(\" (node/concat-strings children) \")\"))\n\n  node/InnerNode\n  (inner? [_node] true)\n  (children [_node] children)\n  (replace-children [node children']\n    (assoc node :children children'))\n  (leader-length [_node] 2)\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! FnNode)\n\n;; ## Constructor\n\n(defn fn-node\n  \"Create node representing an anonymous function with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/fn-node [(n/token-node '+)\n                   (n/spaces 1)\n                   (n/token-node 1)\n                   (n/spaces 1)\n                   (n/token-node '%1)])\n       n/string)\n   ;; => \\\"#(+ 1 %1)\\\"\n   ```\"\n  [children]\n  (->FnNode children))\n"]}