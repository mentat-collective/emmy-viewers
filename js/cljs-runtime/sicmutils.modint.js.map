{"version":3,"sources":["sicmutils/modint.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sicmutils.modint/ModInt","sicmutils.modint/->ModInt","i","m","_","sicmutils.value/zero?","sicmutils.value/one?","sicmutils.value/zero-like","sicmutils.value/one-like","cljs.core/List","this","that","sicmutils.modint/mod:=","x","writer","cljs.core.write_all","sicmutils.modint/modint?","sicmutils.modint/residue","sicmutils.modint/modulus","and__4251__auto__","cljs.core._EQ_","sicmutils.value/=","sicmutils.value/number?","sicmutils.generic/modulo","js/Error","sicmutils.modint/make","sicmutils.value/integral?","sicmutils.modint/modular-binop","op","a","b","sicmutils.util/arithmetic-ex","G__96854","G__96855","var_args","G__96857","sicmutils.modint/invert","sicmutils.modint.invert","modulus","vec__96858","cljs.core.nth","g","sicmutils.euclid/extended-gcd","sicmutils.modint/mod-expt","base","pow","sicmutils.generic/expt","sicmutils.util/bigint","js/Number","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.modint/chinese-remainder","seq96862","self__4852__auto__","cljs.core/seq","modints","prod","cljs.core.transduce","cljs.core.map","sicmutils.generic/*","xform","mi","c","sicmutils.generic/quotient","sicmutils.generic._STAR_","sicmutils.generic/+","sicmutils.modint/add","sicmutils.generic/add","sicmutils.modint/sub","sicmutils.generic/sub","sicmutils.modint/mul","sicmutils.generic/mul","sicmutils.modint/remainder","sicmutils.generic/remainder","sicmutils.modint/modulo","sicmutils.modint/div","l","r","sicmutils.generic/integer-part","sicmutils.generic/fractional-part","sicmutils.generic/floor","sicmutils.generic/ceiling","sicmutils.generic/div","sicmutils.generic/negate","sicmutils.generic/invert","sicmutils.generic/magnitude","sicmutils.generic/abs","sicmutils.generic/negative?","sicmutils.generic/exact-divide","sicmutils.generic/solve-linear","sicmutils.generic/solve-linear-right","seq__96877","chunk__96878","count__96879","i__96880","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","G__96889","G__96890","G__96893","G__96894","G__96891","G__96892","G__96895","G__96896","seq__96897","chunk__96898","count__96899","i__96900","G__96909","G__96910","G__96915","G__96916","G__96912","G__96913","G__96917","G__96918"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.modint\n  \"This namespace contains an implementation of a [[ModInt]] datatype and various\n  operations for creating and working with [[ModInt]] instances. See [\\\"Modular\n  Arithmetic\\\"](https://en.wikipedia.org/wiki/Modular_arithmetic) on Wikipedia\n  for more details about modular arithmetic.\n\n  [[sicmutils.modint]] also extends many SICMUtils generic operations\n  to the [[ModInt]] datatype.\"\n  (:require #?(:cljs [sicmutils.euclid :as e])\n            [sicmutils.generic :as g]\n            [sicmutils.util :as u]\n            [sicmutils.value :as v]))\n\n(declare mod:=)\n\n(deftype ModInt [i m]\n  v/Value\n  (zero? [_] (v/zero? i))\n  (one? [_] (v/one? i))\n  (identity? [_] (v/one? i))\n  (zero-like [_] (ModInt. (v/zero-like i) m))\n  (one-like [_] (ModInt. (v/one-like i) m))\n  (identity-like [_] (ModInt. (v/one-like i) m))\n  (freeze [_] (list 'modint i m))\n  (exact? [_] true)\n  (kind [_] ::modint)\n\n  #?@(:clj\n      [Object\n       (equals [this that] (mod:= this that))\n       (toString [_] (str \"[\" i \" mod \" m \"]\"))]\n\n      :cljs\n      [IEquiv\n       (-equiv [this that] (mod:= this that))\n\n       Object\n       (toString [_] (str \"[\" i \" mod \" m \"]\"))\n\n       IPrintWithWriter\n       (-pr-writer [x writer _]\n                   (write-all writer\n                              \"#object[sicmutils.modint.ModInt \\\"\"\n                              (.toString x)\n                              \"\\\"]\"))]))\n\n(defn modint?\n  \"Returns true if `x` is an instance of [[ModInt]], false otherwise.\"\n  [x]\n  (instance? ModInt x))\n\n(defn residue [x]\n  (.-i ^ModInt x))\n\n(defn modulus [x]\n  (.-m ^ModInt x))\n\n(defn- mod:= [this that]\n  (cond (modint? that)\n        (and (= (modulus this)\n                (modulus that))\n             (v/= (residue this)\n                  (residue that)))\n\n        (v/number? that)\n        (v/= (residue this)\n             (g/modulo that (modulus this)))\n\n        :else false))\n\n(defn make\n  \"Returns an instance of [[ModInt]] that represents integer `i` with integral\n  modulus `m`.\"\n  [i m]\n  {:pre [(v/integral? i)\n         (v/integral? m)]}\n  (->ModInt (g/modulo i m) m))\n\n(defn- modular-binop [op]\n  (fn [a b]\n    (if-not (= (modulus a) (modulus b))\n      (u/arithmetic-ex \"unequal moduli\")\n      (make (op (residue a) (residue b)) (modulus a)))))\n\n(defn- invert\n  \"Modular inverse. JVM implementation uses the native BigInt implementation.\"\n  ([m] (invert (residue m) (modulus m)))\n  ([i modulus]\n   #?(:clj\n      (try (-> (biginteger i)\n               (.modInverse (biginteger modulus))\n               (int)\n               (->ModInt modulus))\n           (catch ArithmeticException _\n             (u/arithmetic-ex (str i \" is not invertible mod \" modulus))))\n\n      :cljs\n      (let [[g a _] (e/extended-gcd i modulus)]\n        (if (< g 2)\n          (make a modulus)\n          (u/arithmetic-ex (str i \" is not invertible mod \" modulus)))))))\n\n(defn- mod-expt\n  \"Modular exponentiation, more efficient on the JVM.\"\n  [base pow modulus]\n  #?(:clj (let [base (if (neg? pow)\n                       (residue (invert base modulus))\n                       base)]\n            (-> (.modPow (biginteger base)\n                         (.abs (biginteger pow))\n                         (biginteger modulus))\n                (int)\n                (->ModInt modulus)))\n\n     :cljs (-> (g/expt (u/bigint base)\n                       (u/bigint pow))\n               (g/modulo modulus)\n               (js/Number)\n               (->ModInt modulus))))\n\n(defn chinese-remainder\n  \"[Chinese Remainder Algorithm](https://en.wikipedia.org/wiki/Chinese_remainder_theorem).\n\n  Accepts a sequence of [[ModInt]] instances (where the `modulus` of\n  all [[ModInt]] instances are relatively prime), and returns a [[ModInt]] `x`\n  such that `(residue input) == (mod x (modulus input))`.\n\n  For example:\n\n  ```clojure\n  (let [a1 (m/make 2 5)\n        a2 (m/make 3 13)]\n    [(= 42 (chinese-remainder a1 a2))\n     (= (residue a1) (mod cr (modulus a1)))\n     (= (residue a2) (mod cr (modulus a2)))])\n  ;;=> [true true true]\n  ```\"\n  [& modints]\n  (let [prod  (transduce (map modulus) g/* modints)\n        xform (map (fn [mi]\n\t\t                 (let [i (residue mi)\n                           m (modulus mi)\n                           c (g/quotient prod m)]\n                       (g/* i c (residue (invert c m))))))]\n    (-> (transduce xform g/+ modints)\n        (g/modulo prod))))\n\n(def ^:private add (modular-binop g/add))\n(def ^:private sub (modular-binop g/sub))\n(def ^:private mul (modular-binop g/mul))\n(def ^:private remainder (modular-binop g/remainder))\n(def ^:private modulo (modular-binop g/modulo))\n\n(defn- div [a b]\n  (mul a (invert b)))\n\n(defmethod v/= [::v/number ::modint] [l r] (mod:= r l))\n(defmethod v/= [::modint ::v/number] [l r] (mod:= l r))\n\n(defmethod g/integer-part [::modint] [a] (residue a))\n(defmethod g/fractional-part [::modint] [_] 0)\n(defmethod g/floor [::modint] [a] a)\n(defmethod g/ceiling [::modint] [a] a)\n(defmethod g/add [::modint ::modint] [a b] (add a b))\n(defmethod g/mul [::modint ::modint] [a b] (mul a b))\n(defmethod g/div [::modint ::modint] [a b] (div a b))\n(defmethod g/sub [::modint ::modint] [a b] (sub a b))\n(defmethod g/negate [::modint] [a] (make (g/negate (residue a)) (modulus a)))\n(defmethod g/invert [::modint] [a] (invert a))\n(defmethod g/magnitude [::modint] [a]\n  (g/modulo (residue a)\n            (modulus a)))\n\n(defmethod g/abs [::modint] [a]\n  (let [i (residue a)]\n    (if (g/negative? i)\n      (make i (modulus a))\n      a)))\n\n(defmethod g/quotient [::modint ::modint] [a b] (mul a (invert b)))\n(defmethod g/remainder [::modint ::modint] [a b] (remainder a b))\n(defmethod g/modulo [::modint ::modint] [a b] (modulo a b))\n(defmethod g/exact-divide [::modint ::modint] [a b] (mul a (invert b)))\n(defmethod g/negative? [::modint] [a] (g/negative? (residue a)))\n\n;; A more efficient exponent implementation is available on the JVM.\n(defmethod g/expt [::v/integral ::modint] [a b](mod-expt a (residue b) (modulus b)))\n(defmethod g/expt [::modint ::v/integral] [a b] (mod-expt (residue a) b (modulus a)))\n\n(defmethod g/solve-linear [::modint ::modint] [a b] (div b a))\n(defmethod g/solve-linear-right [::modint ::modint] [a b] (div a b))\n\n;; Methods that allow interaction with other integral types. The first block is\n;; perhaps slightly more efficient:\n(doseq [op [g/add g/mul g/sub]]\n  (defmethod op [::v/integral ::modint] [a b] (make (op a (residue b)) (modulus b)))\n  (defmethod op [::modint ::v/integral] [a b] (make (op (residue a) b) (modulus a))))\n\n;; The second block promotes any integral type to a ModInt before operating.\n(doseq [op [g/div g/solve-linear g/solve-linear-right\n            g/quotient g/remainder g/exact-divide]]\n  (defmethod op [::v/integral ::modint] [a b] (op (make a (modulus b)) b))\n  (defmethod op [::modint ::v/integral] [a b] (op a (make b (modulus a)))))\n"]}