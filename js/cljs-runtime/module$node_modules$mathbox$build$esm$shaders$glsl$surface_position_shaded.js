shadow$provide.module$node_modules$mathbox$build$esm$shaders$glsl$surface_position_shaded=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;exports.default="uniform vec4 mapSize;\nuniform vec4 geometryResolution;\nuniform vec4 geometryClip;\nattribute vec4 position4;\n\n// External\nvec3 getPosition(vec4 xyzw, float canonical);\n\nvec4 wrapAround(vec4 xyzw) {\n#ifdef SURFACE_CLOSED_X\n  float gx \x3d geometryClip.x;\n  if (xyzw.x \x3c 0.0) xyzw.x +\x3d gx;\n  if (xyzw.x \x3e\x3d gx) xyzw.x -\x3d gx;\n#endif\n#ifdef SURFACE_CLOSED_Y\n  float gy \x3d geometryClip.y;\n  if (xyzw.y \x3c 0.0) xyzw.y +\x3d gy;\n  if (xyzw.y \x3e\x3d gy) xyzw.y -\x3d gy;\n#endif\n  return xyzw;\n}\n\nvoid getSurfaceGeometry(vec4 xyzw, float edgeX, float edgeY, out vec3 left, out vec3 center, out vec3 right, out vec3 up, out vec3 down) {\n  vec4 deltaX \x3d vec4(1.0, 0.0, 0.0, 0.0);\n  vec4 deltaY \x3d vec4(0.0, 1.0, 0.0, 0.0);\n\n  center \x3d                  getPosition(xyzw, 1.0);\n  left   \x3d                  center;\n  down   \x3d                  center;\n  right  \x3d (edgeX \x3c 0.5)  ? getPosition(wrapAround(xyzw + deltaX), 0.0) : (2.0 * center - getPosition(xyzw - deltaX, 0.0));\n  up     \x3d (edgeY \x3c 0.5)  ? getPosition(wrapAround(xyzw + deltaY), 0.0) : (2.0 * center - getPosition(xyzw - deltaY, 0.0));\n}\n\nvec3 getSurfaceNormal(vec3 left, vec3 center, vec3 right, vec3 up, vec3 down) {\n  vec3 dx \x3d right - left;\n  vec3 dy \x3d up    - down;\n  vec3 n \x3d cross(dy, dx);\n  if (length(n) \x3e 0.0) {\n    return normalize(n);\n  }\n  return vec3(0.0, 1.0, 0.0);\n}\n\nvarying vec3 vNormal;\nvarying vec3 vLight;\nvarying vec3 vPosition;\n\nvec3 getSurfacePositionShaded() {\n  vec3 left, center, right, up, down;\n\n  vec4 p \x3d min(geometryClip, position4);\n  vec2 surface \x3d vec2(0.0);\n#ifdef SURFACE_CLOSED_X\n  if (p.x \x3d\x3d geometryClip.x) p.x \x3d 0.0;\n#else\n  if (p.x \x3d\x3d geometryClip.x) surface.x \x3d 1.0;\n  //if (p.x \x3d\x3d 0.0) surface.x \x3d -1.0;\n#endif\n#ifdef SURFACE_CLOSED_Y\n  if (p.y \x3d\x3d geometryClip.y) p.y \x3d 0.0;\n#else\n  if (p.y \x3d\x3d geometryClip.y) surface.y \x3d 1.0;\n  //if (p.y \x3d\x3d 0.0) surface.y \x3d -1.0;\n#endif\n\n  getSurfaceGeometry(p, surface.x, surface.y, left, center, right, up, down);\n  vNormal   \x3d getSurfaceNormal(left, center, right, up, down);\n  vLight    \x3d normalize((viewMatrix * vec4(1.0, 2.0, 2.0, 0.0)).xyz); // hardcoded directional light\n  vPosition \x3d -center;\n\n#ifdef POSITION_UV\n#ifdef POSITION_UV_INT\n  vUV \x3d -.5 + (position4.xy * geometryResolution.xy) * mapSize.xy;\n#else\n  vUV \x3d position4.xy * geometryResolution.xy;\n#endif\n#endif\n\n  return center;\n}\n"}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$shaders$glsl$surface_position_shaded.js.map
