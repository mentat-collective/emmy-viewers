shadow$provide.module$node_modules$mathbox$build$esm$primitives$types$operator$join=function(global,require,module,exports){function _getRequireWildcardCache(nodeInterop$jscomp$0){if("function"!==typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop$jscomp$0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.Join=void 0;var UGLSL=
function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!==typeof obj&&"function"!==typeof obj)return{default:obj};if((nodeInterop=_getRequireWildcardCache(nodeInterop))&&nodeInterop.has(obj))return nodeInterop.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor,key;for(key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,
key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj;nodeInterop&&nodeInterop.set(obj,newObj);return newObj}(require("module$node_modules$mathbox$build$esm$util$glsl"));global=require("module$node_modules$mathbox$build$esm$primitives$types$operator$operator");class Join extends global.Operator{static initClass(){this.traits="node bind operator source index join".split(" ")}indexShader(shader){shader.pipe(this.operator);return super.indexShader(shader)}sourceShader(shader){shader.pipe(this.operator);
return super.sourceShader(shader)}getDimensions(){return this._resample(this.bind.source.getDimensions())}getActiveDimensions(){return this._resample(this.bind.source.getActiveDimensions())}getFutureDimensions(){return this._resample(this.bind.source.getFutureDimensions())}getIndexDimensions(){return this._resample(this.bind.source.getIndexDimensions())}_resample(dims){var left;let dim;const {order,axis,stride}=this,labels=["width","height","depth","items"],mapped=order.map(x=>labels[x-1]);var index=
order.indexOf(axis);let set=(()=>{const result=[];for(dim of Array.from(mapped))result.push(dims[dim]);return result})();const product=(null!=(left=set[index+1])?left:1)*stride;set.splice(index,2,product);set=set.slice(0,3);set.push(1);left={};for(index=0;index<mapped.length;index++)dim=mapped[index],left[dim]=set[index];return left}make(){super.make();if(null!=this.bind.source){var {order}=this.props,{axis}=this.props,{overlap}=this.props,permute=order.join("");null==axis&&(axis=order[0]);var index=
permute.indexOf(axis);permute=permute.replace(axis,"00").substring(0,4);var major=[null,"width","height","depth","items"][axis];major=this.bind.source.getDimensions()[major];overlap=Math.min(major-1,overlap);var stride=major-overlap,uniforms={joinStride:this._attributes.make(this._types.number(stride)),joinStrideInv:this._attributes.make(this._types.number(1/stride))},transform=this._shaders.shader();transform.require(UGLSL.swizzleVec4(axis,1));transform.require(UGLSL.swizzleVec4(permute,4));transform.require(UGLSL.injectVec4([index,
index+1]));transform.pipe("join.position",uniforms);transform.pipe(UGLSL.invertSwizzleVec4(order));this.operator=transform;this.order=order;this.axis=axis;this.overlap=overlap;this.length=major;return this.stride=stride}}unmake(){return super.unmake()}change(changed,touched,_init){if(touched.join||touched.operator)return this.rebuild()}}exports.Join=Join;Join.initClass()}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$primitives$types$operator$join.js.map
