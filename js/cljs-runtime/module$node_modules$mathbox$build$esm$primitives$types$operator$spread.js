shadow$provide.module$node_modules$mathbox$build$esm$primitives$types$operator$spread=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Spread=void 0;global=require("module$node_modules$mathbox$build$esm$primitives$types$operator$operator");class Spread extends global.Operator{static initClass(){this.traits="node bind operator source index spread".split(" ")}sourceShader(shader){return shader.pipe(this.operator)}make(){super.make();if(null!=this.bind.source){var uniforms=
{spreadMatrix:this._attributes.make(this._types.mat4()),spreadOffset:this._attributes.make(this._types.vec4())};this.spreadMatrix=uniforms.spreadMatrix;this.spreadOffset=uniforms.spreadOffset;var transform=this._shaders.shader();transform.require(this.bind.source.sourceShader(this._shaders.shader()));transform.pipe("spread.position",uniforms);return this.operator=transform}}unmake(){return super.unmake()}resize(){this.update();return super.resize()}update(){let key$jscomp$0,i$jscomp$0,k$jscomp$0,
v$jscomp$0;const dims=this.bind.source.getFutureDimensions(),els=this.spreadMatrix.value.elements,order=["width","height","depth","items"],align=["alignWidth","alignHeight","alignDepth","alignItems"],{unit}=this.props,unitEnum=this.node.attributes["spread.unit"].enum,map=(()=>{switch(unit){case unitEnum.relative:return(key,i,k,v)=>els[4*i+k]=v/Math.max(1,dims[key]-1);case unitEnum.absolute:return(key,i,k,v)=>els[4*i+k]=v}})();return(()=>{const result=[];for(i$jscomp$0=0;i$jscomp$0<order.length;i$jscomp$0++){key$jscomp$0=
order[i$jscomp$0];const spread=this.props[key$jscomp$0];var anchor=this.props[align[i$jscomp$0]];this.spreadOffset.value.setComponent(i$jscomp$0,null!=spread?-((null!=dims[key$jscomp$0]?dims[key$jscomp$0]:1)-1)*(.5-.5*anchor):0);anchor=result;var JSCompiler_temp_const=anchor.push;const result1=[];for(k$jscomp$0=0;3>=k$jscomp$0;k$jscomp$0++){let left;v$jscomp$0=null!=(left=null!=spread?spread.getComponent(k$jscomp$0):void 0)?left:0;result1.push(els[4*i$jscomp$0+k$jscomp$0]=map(key$jscomp$0,i$jscomp$0,
k$jscomp$0,v$jscomp$0))}JSCompiler_temp_const.call(anchor,result1)}return result})()}change(changed,touched,_init){if(touched.operator)return this.rebuild();if(touched.spread)return this.update()}}exports.Spread=Spread;Spread.initClass()}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$primitives$types$operator$spread.js.map
