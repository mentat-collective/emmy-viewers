{"version":3,"sources":["rewrite_clj/node/meta.cljc"],"mappings":"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","names":["this__5343__auto__","k__5344__auto__","this__5345__auto__","k74968","else__5346__auto__","G__74979","cljs.core/Keyword","tag","prefix","children","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__74980","vec__74981","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__74967","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this74969","other74970","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__74996","this__5351__auto__","k__5352__auto__","pred__74997","cljs.core/keyword-identical?","expr__74998","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.meta/MetaNode","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__74972","extmap__5385__auto__","G__75004","cljs.core/record?","rewrite-clj.node.meta/->MetaNode","rewrite-clj.node.meta/map->MetaNode","_node","opts","vec__74989","mta","data","rewrite_clj.node.protocols.sexprs","js/Error","rewrite-clj.interop/meta-available?","cljs.core.pr_str","cljs.core.vary_meta","cljs.core/merge","cljs.core/map?","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","this","children'","rewrite-clj.node.protocols/assert-sexpr-count","node","rewrite-clj.node.protocols/make-printable!","var_args","G__75006","rewrite-clj.node.meta/meta-node","metadata","rewrite_clj.node.meta.meta_node","rewrite-clj.node.whitespace/spaces","G__75019","rewrite-clj.node.meta/raw-meta-node","rewrite_clj.node.meta.raw_meta_node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.meta\n  (:require [rewrite-clj.interop :as interop]\n            [rewrite-clj.node.protocols :as node]\n            [rewrite-clj.node.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defrecord MetaNode [tag prefix children]\n  node/Node\n  (tag [_node] tag)\n  (node-type [_node] :meta)\n  (printable-only? [_node] false)\n  (sexpr* [_node opts]\n    (let [[mta data] (node/sexprs children opts)]\n      (assert (interop/meta-available? data)\n              (str \"cannot attach metadata to: \" (pr-str data)))\n      (vary-meta data merge (if (map? mta) mta {mta true}))))\n  (length [_node]\n    (+ (count prefix) (node/sum-lengths children)))\n  (string [_node]\n    (str prefix (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_node] true)\n  (children [_node] children)\n  (replace-children [this children']\n    (node/assert-sexpr-count children' 2)\n    (assoc this :children children'))\n  (leader-length [_node]\n    (count prefix))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! MetaNode)\n\n;; ## Constructor\n\n(defn meta-node\n  \"Create a node representing a form with metadata.\n\n   When creating manually, you can specify `metadata` and `data` and spacing between the 2 elems will be included:\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/meta-node (n/keyword-node :foo)\n                    (n/vector-node [(n/token-node 1)]))\n       n/string)\n   ;; => \\\"^:foo [1]\\\"\n\n   (-> (n/meta-node (n/map-node [:foo (n/spaces 1) 42])\n                    (n/vector-node [(n/token-node 1)]))\n       n/string)\n   ;; => \\\"^{:foo 42} [1]\\\"\n   ```\n   When specifying a sequence of `children`, spacing is explicit:\n\n   ```Clojure\n   (-> (n/meta-node [(n/keyword-node :foo)\n                     (n/spaces 1)\n                     (n/vector-node [(n/token-node 1)])])\n       n/string)\n   ;; => \\\"^:foo [1]\\\"\n   ```\n   See also: [[raw-meta-node]]\"\n  ([children]\n   (node/assert-sexpr-count children 2)\n   (->MetaNode :meta \"^\" children))\n  ([metadata data]\n   (meta-node [metadata (ws/spaces 1) data])))\n\n(defn raw-meta-node\n  \"Create a node representing a form with metadata that renders to the reader syntax.\n\n   When creating manually, you can specify `metadata` and `data` and spacing between the 2 elems will be included:\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/raw-meta-node (n/keyword-node :foo)\n                        (n/vector-node [(n/token-node 2)]))\n        n/string)\n   ;; => \\\"#^:foo [2]\\\"\n\n   (-> (n/raw-meta-node (n/map-node [:foo (n/spaces 1) 42])\n                        (n/vector-node [(n/token-node 2)]))\n       n/string)\n   ;; => \\\"#^{:foo 42} [2]\\\"\n   ```\n   When specifying a sequence of `children`, spacing is explicit:\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/raw-meta-node [(n/keyword-node :foo)\n                         (n/spaces 1)\n                         (n/vector-node [(n/token-node 2)])])\n       n/string)\n   ;; => \\\"#^:foo [2]\\\"\n   ```\n   See also: [[meta-node]]\"\n  ([children]\n   (node/assert-sexpr-count children 2)\n   (->MetaNode :meta* \"#^\" children))\n  ([metadata data]\n   (raw-meta-node [metadata (ws/spaces 1) data])))\n"]}