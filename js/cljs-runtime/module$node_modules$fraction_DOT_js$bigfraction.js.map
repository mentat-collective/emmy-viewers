{
"version":3,
"file":"module$node_modules$fraction_DOT_js$bigfraction.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/fraction_DOT_js/bigfraction.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fraction_DOT_js$bigfraction\"] = function(global,require,module,exports) {\n/**\n * @license Fraction.js v4.2.0 23/05/2021\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * let f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Set Identity function to downgrade BigInt to Number if needed\n  if (!BigInt) BigInt = function(n) { if (isNaN(n)) throw new Error(\"\"); return n; };\n\n  const C_ONE = BigInt(1);\n  const C_ZERO = BigInt(0);\n  const C_TEN = BigInt(10);\n  const C_TWO = BigInt(2);\n  const C_FIVE = BigInt(5);\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  const MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  const P = {\n    \"s\": C_ONE,\n    \"n\": C_ZERO,\n    \"d\": C_ONE\n  };\n\n  function assign(n, s) {\n\n    try {\n      n = BigInt(n);\n    } catch (e) {\n      throw Fraction['InvalidParameter'];\n    }\n    return n * s;\n  }\n\n  // Creates a new Fraction internally without the need of the bulky constructor\n  function newFraction(n, d) {\n\n    if (d === C_ZERO) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    const f = Object.create(Fraction.prototype);\n    f[\"s\"] = n < C_ZERO ? -C_ONE : C_ONE;\n\n    n = n < C_ZERO ? -n : n;\n\n    const a = gcd(n, d);\n\n    f[\"n\"] = n / a;\n    f[\"d\"] = d / a;\n    return f;\n  }\n\n  function factorize(num) {\n\n    const factors = {};\n\n    let n = num;\n    let i = C_TWO;\n    let s = C_FIVE - C_ONE;\n\n    while (s <= n) {\n\n      while (n % i === C_ZERO) {\n        n/= i;\n        factors[i] = (factors[i] || C_ZERO) + C_ONE;\n      }\n      s+= C_ONE + C_TWO * i++;\n    }\n\n    if (n !== num) {\n      if (n > 1)\n        factors[n] = (factors[n] || C_ZERO) + C_ONE;\n    } else {\n      factors[num] = (factors[num] || C_ZERO) + C_ONE;\n    }\n    return factors;\n  }\n\n  const parse = function(p1, p2) {\n\n    let n = C_ZERO, d = C_ONE, s = C_ONE;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = BigInt(p1);\n      d = BigInt(p2);\n      s = n * d;\n\n      if (n % C_ONE !== C_ZERO || d % C_ONE !== C_ZERO) {\n        throw Fraction['NonIntegerParameter'];\n      }\n\n    } else if (typeof p1 === \"object\") {\n      if (\"d\" in p1 && \"n\" in p1) {\n        n = BigInt(p1[\"n\"]);\n        d = BigInt(p1[\"d\"]);\n        if (\"s\" in p1)\n          n*= BigInt(p1[\"s\"]);\n      } else if (0 in p1) {\n        n = BigInt(p1[0]);\n        if (1 in p1)\n          d = BigInt(p1[1]);\n      } else if (p1 instanceof BigInt) {\n        n = BigInt(p1);\n      } else {\n        throw Fraction['InvalidParameter'];\n      }\n      s = n * d;\n    } else if (typeof p1 === \"bigint\") {\n      n = p1;\n      s = p1;\n      d = BigInt(1);\n    } else if (typeof p1 === \"number\") {\n\n      if (isNaN(p1)) {\n        throw Fraction['InvalidParameter'];\n      }\n\n      if (p1 < 0) {\n        s = -C_ONE;\n        p1 = -p1;\n      }\n\n      if (p1 % 1 === 0) {\n        n = BigInt(p1);\n      } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n        let z = 1;\n\n        let A = 0, B = 1;\n        let C = 1, D = 1;\n\n        let N = 10000000;\n\n        if (p1 >= 1) {\n          z = 10 ** Math.floor(1 + Math.log10(p1));\n          p1/= z;\n        }\n\n        // Using Farey Sequences\n\n        while (B <= N && D <= N) {\n          let M = (A + C) / (B + D);\n\n          if (p1 === M) {\n            if (B + D <= N) {\n              n = A + C;\n              d = B + D;\n            } else if (D > B) {\n              n = C;\n              d = D;\n            } else {\n              n = A;\n              d = B;\n            }\n            break;\n\n          } else {\n\n            if (p1 > M) {\n              A+= C;\n              B+= D;\n            } else {\n              C+= A;\n              D+= B;\n            }\n\n            if (B > N) {\n              n = C;\n              d = D;\n            } else {\n              n = A;\n              d = B;\n            }\n          }\n        }\n        n = BigInt(n) * BigInt(z);\n        d = BigInt(d);\n\n      }\n\n    } else if (typeof p1 === \"string\") {\n\n      let ndx = 0;\n\n      let v = C_ZERO, w = C_ZERO, x = C_ZERO, y = C_ONE, z = C_ONE;\n\n      let match = p1.match(/\\d+|./g);\n\n      if (match === null)\n        throw Fraction['InvalidParameter'];\n\n      if (match[ndx] === '-') {// Check for minus sign at the beginning\n        s = -C_ONE;\n        ndx++;\n      } else if (match[ndx] === '+') {// Check for plus sign at the beginning\n        ndx++;\n      }\n\n      if (match.length === ndx + 1) { // Check if it's just a simple number \"1234\"\n        w = assign(match[ndx++], s);\n      } else if (match[ndx + 1] === '.' || match[ndx] === '.') { // Check if it's a decimal number\n\n        if (match[ndx] !== '.') { // Handle 0.5 and .5\n          v = assign(match[ndx++], s);\n        }\n        ndx++;\n\n        // Check for decimal places\n        if (ndx + 1 === match.length || match[ndx + 1] === '(' && match[ndx + 3] === ')' || match[ndx + 1] === \"'\" && match[ndx + 3] === \"'\") {\n          w = assign(match[ndx], s);\n          y = C_TEN ** BigInt(match[ndx].length);\n          ndx++;\n        }\n\n        // Check for repeating places\n        if (match[ndx] === '(' && match[ndx + 2] === ')' || match[ndx] === \"'\" && match[ndx + 2] === \"'\") {\n          x = assign(match[ndx + 1], s);\n          z = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;\n          ndx+= 3;\n        }\n\n      } else if (match[ndx + 1] === '/' || match[ndx + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n        w = assign(match[ndx], s);\n        y = assign(match[ndx + 2], C_ONE);\n        ndx+= 3;\n      } else if (match[ndx + 3] === '/' && match[ndx + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n        v = assign(match[ndx], s);\n        w = assign(match[ndx + 2], s);\n        y = assign(match[ndx + 4], C_ONE);\n        ndx+= 5;\n      }\n\n      if (match.length <= ndx) { // Check for more tokens on the stack\n        d = y * z;\n        s = /* void */\n        n = x + d * v + z * w;\n      } else {\n        throw Fraction['InvalidParameter'];\n      }\n\n    } else {\n      throw Fraction['InvalidParameter'];\n    }\n\n    if (d === C_ZERO) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    P[\"s\"] = s < C_ZERO ? -C_ONE : C_ONE;\n    P[\"n\"] = n < C_ZERO ? -n : n;\n    P[\"d\"] = d < C_ZERO ? -d : d;\n  };\n\n  function modpow(b, e, m) {\n\n    let r = C_ONE;\n    for (; e > C_ZERO; b = (b * b) % m, e >>= C_ONE) {\n\n      if (e & C_ONE) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n  function cycleLen(n, d) {\n\n    for (; d % C_TWO === C_ZERO;\n      d/= C_TWO) {\n    }\n\n    for (; d % C_FIVE === C_ZERO;\n      d/= C_FIVE) {\n    }\n\n    if (d === C_ONE) // Catch non-cyclic numbers\n      return C_ZERO;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    let rem = C_TEN % d;\n    let t = 1;\n\n    for (; rem !== C_ONE; t++) {\n      rem = rem * C_TEN % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return C_ZERO; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return BigInt(t);\n  }\n\n  function cycleStart(n, d, len) {\n\n    let rem1 = C_ONE;\n    let rem2 = modpow(C_TEN, len, d);\n\n    for (let t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return BigInt(t);\n\n      rem1 = rem1 * C_TEN % d;\n      rem2 = rem2 * C_TEN % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a%= b;\n      if (!a)\n        return b;\n      b%= a;\n      if (!b)\n        return a;\n    }\n  }\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    parse(a, b);\n\n    if (this instanceof Fraction) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n      this[\"s\"] = P[\"s\"];\n      this[\"n\"] = P[\"n\"] / a;\n      this[\"d\"] = P[\"d\"] / a;\n    } else {\n      return newFraction(P['s'] * P['n'], P['d']);\n    }\n  }\n\n  Fraction['DivisionByZero'] = new Error(\"Division by Zero\");\n  Fraction['InvalidParameter'] = new Error(\"Invalid argument\");\n  Fraction['NonIntegerParameter'] = new Error(\"Parameters must be integer\");\n\n  Fraction.prototype = {\n\n    \"s\": C_ONE,\n    \"n\": C_ZERO,\n    \"d\": C_ONE,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return newFraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return newFraction(this['s'] * this['n'], this['d']);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (a === undefined) {\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], C_ONE);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        throw Fraction['DivisionByZero'];\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return newFraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === C_ZERO && this[\"n\"] === C_ZERO) {\n        return newFraction(C_ZERO, C_ONE);\n      }\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(a, b) {\n\n      parse(a, b);\n\n      // Trivial case when exp is an integer\n\n      if (P['d'] === C_ONE) {\n\n        if (P['s'] < C_ZERO) {\n          return newFraction((this['s'] * this[\"d\"]) ** P['n'], this[\"n\"] ** P['n']);\n        } else {\n          return newFraction((this['s'] * this[\"n\"]) ** P['n'], this[\"d\"] ** P['n']);\n        }\n      }\n\n      // Negative roots become complex\n      //     (-a/b)^(c/d) = x\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula\n      // From which follows that only for c=0 the root is non-complex\n      if (this['s'] < C_ZERO) return null;\n\n      // Now prime factor n and d\n      let N = factorize(this['n']);\n      let D = factorize(this['d']);\n\n      // Exponentiate and take root for n and d individually\n      let n = C_ONE;\n      let d = C_ONE;\n      for (let k in N) {\n        if (k === '1') continue;\n        if (k === '0') {\n          n = C_ZERO;\n          break;\n        }\n        N[k]*= P['n'];\n\n        if (N[k] % P['d'] === C_ZERO) {\n          N[k]/= P['d'];\n        } else return null;\n        n*= BigInt(k) ** N[k];\n      }\n\n      for (let k in D) {\n        if (k === '1') continue;\n        D[k]*= P['n'];\n\n        if (D[k] % P['d'] === C_ZERO) {\n          D[k]/= P['d'];\n        } else return null;\n        d*= BigInt(k) ** D[k];\n      }\n\n      if (P['s'] < C_ZERO) {\n        return newFraction(d, n);\n      }\n      return newFraction(n, d);\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      let t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n\n      return (C_ZERO < t) - (t < C_ZERO);\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = C_TEN ** BigInt(places || 0);\n\n      return newFraction(this[\"s\"] * places * this[\"n\"] / this[\"d\"] +\n        (places * this[\"n\"] % this[\"d\"] > C_ZERO && this[\"s\"] >= C_ZERO ? C_ONE : C_ZERO),\n        places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = C_TEN ** BigInt(places || 0);\n\n      return newFraction(this[\"s\"] * places * this[\"n\"] / this[\"d\"] -\n        (places * this[\"n\"] % this[\"d\"] > C_ZERO && this[\"s\"] < C_ZERO ? C_ONE : C_ZERO),\n        places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = C_TEN ** BigInt(places || 0);\n\n      /* Derivation:\n\n      s >= 0:\n        round(n / d) = trunc(n / d) + (n % d) / d >= 0.5 ? 1 : 0\n                     = trunc(n / d) + 2(n % d) >= d ? 1 : 0\n      s < 0:\n        round(n / d) =-trunc(n / d) - (n % d) / d > 0.5 ? 1 : 0\n                     =-trunc(n / d) - 2(n % d) > d ? 1 : 0\n\n      =>:\n\n      round(s * n / d) = s * trunc(n / d) + s * (C + 2(n % d) > d ? 1 : 0)\n          where C = s >= 0 ? 1 : 0, to fix the >= for the positve case.\n      */\n\n      return newFraction(this[\"s\"] * places * this[\"n\"] / this[\"d\"] +\n        this[\"s\"] * ((this[\"s\"] >= C_ZERO ? C_ONE : C_ZERO) + C_TWO * (places * this[\"n\"] % this[\"d\"]) > this[\"d\"] ? C_ONE : C_ZERO),\n        places);\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n      // Best we can do so far\n      return Number(this[\"s\"] * this[\"n\"]) / Number(this[\"d\"]);\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      let N = this[\"n\"];\n      let D = this[\"d\"];\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      let cycLen = cycleLen(N, D); // Cycle length\n      let cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n      // Append integer part\n      str+= N / D;\n\n      N%= D;\n      N*= C_TEN;\n\n      if (N)\n        str+= \".\";\n\n      if (cycLen) {\n\n        for (let i = cycOff; i--;) {\n          str+= N / D;\n          N%= D;\n          N*= C_TEN;\n        }\n        str+= \"(\";\n        for (let i = cycLen; i--;) {\n          str+= N / D;\n          N%= D;\n          N*= C_TEN;\n        }\n        str+= \")\";\n      } else {\n        for (let i = dec; N && i--;) {\n          str+= N / D;\n          N%= D;\n          N*= C_TEN;\n        }\n      }\n      return str;\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      let n = this[\"n\"];\n      let d = this[\"d\"];\n      let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n      if (d === C_ONE) {\n        str+= n;\n      } else {\n        let whole = n / d;\n        if (excludeWhole && whole > C_ZERO) {\n          str+= whole;\n          str+= \" \";\n          n%= d;\n        }\n\n        str+= n;\n        str+= '/';\n        str+= d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      let n = this[\"n\"];\n      let d = this[\"d\"];\n      let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n      if (d === C_ONE) {\n        str+= n;\n      } else {\n        let whole = n / d;\n        if (excludeWhole && whole > C_ZERO) {\n          str+= whole;\n          n%= d;\n        }\n\n        str+= \"\\\\frac{\";\n        str+= n;\n        str+= '}{';\n        str+= d;\n        str+= '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      let a = this['n'];\n      let b = this['d'];\n      let res = [];\n\n      do {\n        res.push(a / b);\n        let t = a % b;\n        a = b;\n        b = t;\n      } while (a !== C_ONE);\n\n      return res;\n    },\n\n    \"simplify\": function(eps) {\n\n      eps = eps || 0.001;\n\n      const thisABS = this['abs']();\n      const cont = thisABS['toContinued']();\n\n      for (let i = 1; i < cont.length; i++) {\n\n        let s = newFraction(cont[i - 1], C_ONE);\n        for (let k = i - 2; k >= 0; k--) {\n          s = s['inverse']()['add'](cont[k]);\n        }\n\n        if (s['sub'](thisABS)['abs']().valueOf() < eps) {\n          return s['mul'](this['s']);\n        }\n      }\n      return this;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(exports, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n\n};"],
"names":["shadow$provide","global","require","module","exports","root","assign","n","s","BigInt","e","Fraction","newFraction","d","C_ZERO","f","Object","create","prototype","C_ONE","a","gcd","factorize","num","factors","i","C_TWO","C_FIVE","b","parse","P","isNaN","Error","C_TEN","p1","p2","undefined","z","A","B","C","D","Math","floor","log10","N","M","ndx","x","w","v","y","match","length","abs","neg","add","sub","mul","div","clone","mod","lcm","inverse","pow","k","equals","compare","t","ceil","places","round","divisible","valueOf","Number","toString","dec","rem","MAX_CYCLE_LEN","rem1","cycLen","r","rem2","cycOff","str","toFraction","excludeWhole","whole","toLatex","toContinued","res","push","simplify","eps","thisABS","cont","define","defineProperty"]
}
