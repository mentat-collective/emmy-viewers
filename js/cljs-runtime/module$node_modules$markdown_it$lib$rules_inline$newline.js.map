{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_inline$newline.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAKrH,IAAIC,QAAUH,OAAA,CAAQ,kDAAR,CAA2BG,CAAAA,OAGzCF,OAAOC,CAAAA,OAAP,CAAiBE,QAAgB,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAAA,IAC5BC,IAAMF,KAAME,CAAAA,GAE/B,IAAkC,EAAlC,GAAIF,KAAMG,CAAAA,GAAIC,CAAAA,UAAV,CAAqBF,GAArB,CAAJ,CAAkD,MAAO,CAAA,CAEzD,KAAAG,KAAOL,KAAMM,CAAAA,OAAQC,CAAAA,MAArBF,CAA8B,CAC9B,KAAAG,IAAMR,KAAMS,CAAAA,MAMZ,IAAI,CAACR,MAAL,CACE,GAAY,CAAZ,EAAII,IAAJ,EAAoD,EAApD,GAAiBL,KAAMM,CAAAA,OAAQF,CAAAA,UAAd,CAAyBC,IAAzB,CAAjB,CACE,GAAY,CAAZ,EAAIA,IAAJ,EAAwD,EAAxD,GAAiBL,KAAMM,CAAAA,OAAQF,CAAAA,UAAd,CAAyBC,IAAzB,CAAgC,CAAhC,CAAjB,CAA8D,CAG5D,IADAK,MACA,CADKL,IACL,CADY,CACZ,CAAa,CAAb,EAAOK,MAAP,EAAuD,EAAvD,GAAkBV,KAAMM,CAAAA,OAAQF,CAAAA,UAAd,CAAyBM,MAAzB;AAA8B,CAA9B,CAAlB,CAAA,CAA6DA,MAAA,EAE7DV,MAAMM,CAAAA,OAAN,CAAgBN,KAAMM,CAAAA,OAAQK,CAAAA,KAAd,CAAoB,CAApB,CAAuBD,MAAvB,CAChBV,MAAMY,CAAAA,IAAN,CAAW,WAAX,CAAwB,IAAxB,CAA8B,CAA9B,CAN4D,CAA9D,IAQEZ,MAAMM,CAAAA,OACN,CADgBN,KAAMM,CAAAA,OAAQK,CAAAA,KAAd,CAAoB,CAApB,CAAuB,CAAC,CAAxB,CAChB,CAAAX,KAAMY,CAAAA,IAAN,CAAW,WAAX,CAAwB,IAAxB,CAA8B,CAA9B,CAVJ,KAcEZ,MAAMY,CAAAA,IAAN,CAAW,WAAX,CAAwB,IAAxB,CAA8B,CAA9B,CAOJ,KAHAV,GAAA,EAGA,CAAOA,GAAP,CAAaM,GAAb,EAAoBV,OAAA,CAAQE,KAAMG,CAAAA,GAAIC,CAAAA,UAAV,CAAqBF,GAArB,CAAR,CAApB,CAAA,CAA0DA,GAAA,EAE1DF,MAAME,CAAAA,GAAN,CAAYA,GACZ,OAAO,CAAA,CArCwC,CARoE;",
"sources":["node_modules/markdown-it/lib/rules_inline/newline.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_inline$newline\"] = function(global,require,module,exports) {\n// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, ws, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        ws = pmax - 1;\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","isSpace","module.exports","state","silent","pos","src","charCodeAt","pmax","pending","length","max","posMax","ws","slice","push"]
}
