{
"version":3,
"file":"module$js$markdown.js",
"lineCount":3,
"mappings":"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",
"sources":["js/markdown.js"],
"sourcesContent":["shadow$provide[\"module$js$markdown\"] = function(global,require,module,exports) {\nlet MarkdownIt = require('markdown-it'),\n    MD = new MarkdownIt({html: true, linkify: true, breaks: false})\n\nlet texmath = require('markdown-it-texmath')\nMD.use(texmath, {delimiters: \"dollars\"})\n\nlet blockImage = require(\"markdown-it-block-image\")\nMD.use(blockImage)\n\nlet mdToc = require(\"markdown-it-toc-done-right\")\nMD.use(mdToc)\n\nlet sidenotes = require(\"markdown-it-sidenote\")\nMD.use(sidenotes)\n\nfunction todoListPlugin(md, opts) {\n  const startsWithTodoSequence = (text) => {\n    return text.startsWith(\"[ ] \") || text.startsWith(\"[x] \")\n  }\n  const isITodoInlineToken = (tokens, i) => {\n    return tokens[i].type   === 'inline' &&\n           tokens[i-1].type === 'paragraph_open' &&\n           tokens[i-2].type === 'list_item_open' &&\n           startsWithTodoSequence(tokens[i].content)\n  }\n  const removeMarkup = (token) => {\n    let textNode = token.children[0]\n    textNode.content = textNode.content.slice(4)\n  }\n  const closestList = (tokens, index) => {\n    for (let i = index; i >= 0; i--) {\n      let token = tokens[i]\n      if (token.type == 'bullet_list_open') { return token }\n    }\n  }\n  const rule = (state) => {\n    let tokens = state.tokens\n    for (let i = 2; i < tokens.length; i++) {\n      if (isITodoInlineToken(tokens, i)) {\n        // set attrs on the list item\n        tokens[i-2].attrSet(\"todo\", true)\n        tokens[i-2].attrSet(\"checked\", tokens[i].content.startsWith(\"[x] \"))\n        // removes the [-] sequence from the first inline children\n        removeMarkup(tokens[i])\n        // set attrs on closest list container\n        let container = closestList(tokens, i-3)\n        if (container) { container.attrSet(\"has-todos\", true) }\n      }\n    }\n  }\n\n  md.core.ruler.after('inline', 'todo-list-rule', rule)\n}\n\nMD.use(todoListPlugin)\n\nfunction tokenize(text)  { return MD.parse(text, {}) }\nfunction tokenizeJSON(text) { return JSON.stringify(MD.parse(text, {})) }\n\nmodule.exports = {tokenize, tokenizeJSON}\n\n};"],
"names":["shadow$provide","global","require","module","exports","MD","MarkdownIt","html","linkify","breaks","texmath","use","delimiters","blockImage","mdToc","sidenotes","todoListPlugin","md","opts","core","ruler","after","state","rule","tokens","i","length","text","startsWith","attrSet","content","textNode","token","children","slice","type","container","tokenize","parse","tokenizeJSON","JSON","stringify"]
}
