{
"version":3,
"file":"module$node_modules$three$src$renderers$webgl$WebGLShaderCache.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/three/src/renderers/webgl/WebGLShaderCache.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$renderers$webgl$WebGLShaderCache\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLShaderCache = void 0;\nlet _id = 0;\n\nclass WebGLShaderCache {\n  constructor() {\n    this.shaderCache = new Map();\n    this.materialCache = new Map();\n  }\n\n  update(material) {\n    const vertexShader = material.vertexShader;\n    const fragmentShader = material.fragmentShader;\n\n    const vertexShaderStage = this._getShaderStage(vertexShader);\n\n    const fragmentShaderStage = this._getShaderStage(fragmentShader);\n\n    const materialShaders = this._getShaderCacheForMaterial(material);\n\n    if (materialShaders.has(vertexShaderStage) === false) {\n      materialShaders.add(vertexShaderStage);\n      vertexShaderStage.usedTimes++;\n    }\n\n    if (materialShaders.has(fragmentShaderStage) === false) {\n      materialShaders.add(fragmentShaderStage);\n      fragmentShaderStage.usedTimes++;\n    }\n\n    return this;\n  }\n\n  remove(material) {\n    const materialShaders = this.materialCache.get(material);\n\n    for (const shaderStage of materialShaders) {\n      shaderStage.usedTimes--;\n      if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage);\n    }\n\n    this.materialCache.delete(material);\n    return this;\n  }\n\n  getVertexShaderID(material) {\n    return this._getShaderStage(material.vertexShader).id;\n  }\n\n  getFragmentShaderID(material) {\n    return this._getShaderStage(material.fragmentShader).id;\n  }\n\n  dispose() {\n    this.shaderCache.clear();\n    this.materialCache.clear();\n  }\n\n  _getShaderCacheForMaterial(material) {\n    const cache = this.materialCache;\n\n    if (cache.has(material) === false) {\n      cache.set(material, new Set());\n    }\n\n    return cache.get(material);\n  }\n\n  _getShaderStage(code) {\n    const cache = this.shaderCache;\n\n    if (cache.has(code) === false) {\n      const stage = new WebGLShaderStage();\n      cache.set(code, stage);\n    }\n\n    return cache.get(code);\n  }\n\n}\n\nexports.WebGLShaderCache = WebGLShaderCache;\n\nclass WebGLShaderStage {\n  constructor() {\n    this.id = _id++;\n    this.usedTimes = 0;\n  }\n\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebGLShaderCache","_id","constructor","shaderCache","Map","materialCache","update","material","fragmentShader","vertexShaderStage","_getShaderStage","vertexShader","fragmentShaderStage","materialShaders","_getShaderCacheForMaterial","has","add","usedTimes","remove","get","shaderStage","delete","getVertexShaderID","id","getFragmentShaderID","dispose","clear","cache","set","Set","code","stage","WebGLShaderStage"]
}
