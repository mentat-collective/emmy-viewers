shadow$provide.module$node_modules$mathbox$build$esm$primitives$types$view$cartesian4=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Cartesian4=void 0;global=require("module$node_modules$mathbox$build$esm$primitives$types$view$view");class Cartesian4 extends global.View{static initClass(){this.traits="node object visible view view4 vertex".split(" ")}make(){super.make();this.uniforms={basisOffset:this._attributes.make(this._types.vec4()),basisScale:this._attributes.make(this._types.vec4())};
this.basisScale=this.uniforms.basisScale.value;return this.basisOffset=this.uniforms.basisOffset.value}unmake(){super.unmake();delete this.basisScale;delete this.basisOffset;return delete this.uniforms}change(changed,touched,init){if(touched.view||touched.view4||init){touched=this.props.position;init=this.props.scale;var g=this.props.range,{x}=g[0],y=g[1].x,z=g[2].x,w=g[3].x,dx=g[0].y-x||1,dy=g[1].y-y||1,dz=g[2].y-z||1;g=g[3].y-w||1;var mult=function(a,b){a.x*=b.x;a.y*=b.y;a.z*=b.z;return a.w*=b.w};
this.basisScale.set(2/dx,2/dy,2/dz,2/g);this.basisOffset.set(-(2*x+dx)/dx,-(2*y+dy)/dy,-(2*z+dz)/dz,-(2*w+g)/g);mult(this.basisScale,init);mult(this.basisOffset,init);this.basisOffset.add(touched);if(changed["view.range"])return this.trigger({type:"view.range"})}}vertex(shader,pass){1===pass&&shader.pipe("cartesian4.position",this.uniforms);return super.vertex(shader,pass)}}exports.Cartesian4=Cartesian4;Cartesian4.initClass()}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$primitives$types$view$cartesian4.js.map
