shadow$provide.module$node_modules$shadergraph$src$factory$factory=function(global,require,module,exports){function _getRequireWildcardCache(nodeInterop$jscomp$0){if("function"!==typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop$jscomp$0)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===
obj||"object"!==typeof obj&&"function"!==typeof obj)return{default:obj};if((nodeInterop=_getRequireWildcardCache(nodeInterop))&&nodeInterop.has(obj))return nodeInterop.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor,key;for(key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=
obj[key]}newObj.default=obj;nodeInterop&&nodeInterop.set(obj,newObj);return newObj}Object.defineProperty(exports,"__esModule",{value:!0});exports.Factory=void 0;var _graph=require("module$node_modules$shadergraph$src$graph$index"),Block=_interopRequireWildcard(require("module$node_modules$shadergraph$src$block$index")),Visualize=_interopRequireWildcard(require("module$node_modules$shadergraph$src$visualize$index"));class Factory{constructor(language,fetch,config){this.language=language;this.fetch=
fetch;this.config=config;this.graph()}pipe(name,uniforms,namespace,defines){name instanceof Factory?this._concat(name):null!=name&&this._call(name,uniforms,namespace,defines);return this}call(name,uniforms,namespace,defines){return this.pipe(name,uniforms,namespace,defines)}require(name,uniforms,namespace,defines){name instanceof Factory?this._import(name):null!=name&&(this.callback(),this._call(name,uniforms,namespace,defines),this.end());return this}import(name,uniforms,namespace,defines){return this.require(name,
uniforms,namespace,defines)}split(){this._group("_combine",!0);return this}fan(){this._group("_combine",!1);return this}isolate(){this._group("_isolate");return this}callback(){this._group("_callback");return this}next(){this._next();return this}pass(){const pass=this._stack[2].end;this.end();this._state.end=this._state.end.concat(pass);return this}end(){const [sub,main]=Array.from(this._exit()),{op}=sub;if(this[op])this[op](sub,main);return this}join(){return this.end()}graph(){for(;1<(null!=this._stack?
this._stack.length:void 0);)this.end();this._graph&&this._tail(this._state,this._graph);const graph=this._graph;this._graph=new _graph.Graph;this._state=new State;this._stack=[this._state];return graph}compile(namespace){null==namespace&&(namespace="main");return this.graph().compile(namespace)}link(namespace){null==namespace&&(namespace="main");return this.graph().link(namespace)}serialize(){return Visualize.serialize(this._graph)}empty(){return 0===this._graph.nodes.length}_concat(factory){let block;
if(0===factory._state.nodes.length)return this;this._tail(factory._state,factory._graph);try{block=new Block.Isolate(factory._graph)}catch(error){throw this.config.autoInspect&&Visualize.inspect(error,this._graph,factory),error;}this._auto(block);return this}_import(factory){let block;if(0===factory._state.nodes.length)throw"Can't import empty callback";this._tail(factory._state,factory._graph);try{block=new Block.Callback(factory._graph)}catch(error){throw this.config.autoInspect&&Visualize.inspect(error,
this._graph,factory),error;}this._auto(block);return this}_combine(sub,main){for(const to of Array.from(sub.start))for(const from of Array.from(main.end))from.connect(to,sub.multi);main.end=sub.end;return main.nodes=main.nodes.concat(sub.nodes)}_isolate(sub,_main){if(sub.nodes.length){let block;_main=this._subgraph(sub);this._tail(sub,_main);try{block=new Block.Isolate(_main)}catch(error){throw this.config.autoInspect&&Visualize.inspect(error,this._graph,_main),error;}return this._auto(block)}}_callback(sub,
_main){if(sub.nodes.length){let block;_main=this._subgraph(sub);this._tail(sub,_main);try{block=new Block.Callback(_main)}catch(error){throw this.config.autoInspect&&Visualize.inspect(error,this._graph,_main),error;}return this._auto(block)}}_call(name,uniforms,namespace,defines){name=this.fetch(name);name.bind(this.config,uniforms,namespace,defines);uniforms=new Block.Call(name);return this._auto(uniforms)}_subgraph(sub){const subgraph=new _graph.Graph(null,this._graph);subgraph.adopt(sub.nodes);
return subgraph}_tail(state,graph){let tail=state.end.concat(state.tail);tail=tail.filter((node,i)=>tail.indexOf(node)===i);1<tail.length&&(tail=new Block.Join(tail),tail=[tail.node],this._graph.add(tail));graph.tail=tail[0];state.end=tail;state.tail=[];if(!graph.tail)throw Error("Cannot finalize empty graph");graph.compile=namespace=>{null==namespace&&(namespace="main");try{return graph.tail.owner.compile(this.language,namespace)}catch(error){throw this.config.autoInspect&&graph.inspect(error),error;
}};graph.link=namespace=>{null==namespace&&(namespace="main");try{return graph.tail.owner.link(this.language,namespace)}catch(error){throw this.config.autoInspect&&graph.inspect(error),error;}};graph.export=(layout,depth)=>graph.tail.owner.export(layout,depth);return graph.inspect=(message=null)=>Visualize.inspect(message,graph)}_group(op,multi){this._push(op,multi);this._push();return this}_next(){const sub=this._pop();this._state.start=this._state.start.concat(sub.start);this._state.end=this._state.end.concat(sub.end);
this._state.nodes=this._state.nodes.concat(sub.nodes);this._state.tail=this._state.tail.concat(sub.tail);return this._push()}_exit(){this._next();this._pop();return[this._pop(),this._state]}_push(op,multi){this._stack.unshift(new State(op,multi));return this._state=this._stack[0]}_pop(){let left;this._state=this._stack[1];null==this._state&&(this._state=new State);return null!=(left=this._stack.shift())?left:new State}_auto(block){return block.node.inputs.length?this._append(block):this._insert(block)}_append(block){let end;
({node:block}=block);this._graph.add(block);for(end of Array.from(this._state.end))end.connect(block);this._state.start.length||(this._state.start=[block]);this._state.end=[block];this._state.nodes.push(block);block.outputs.length||this._state.tail.push(block)}_prepend(block){let start;({node:block}=block);this._graph.add(block);for(start of Array.from(this._state.start))block.connect(start);this._state.end.length||(this._state.end=[block]);this._state.start=[block];this._state.nodes.push(block);
block.outputs.length||this._state.tail.push(block)}_insert(block){({node:block}=block);this._graph.add(block);this._state.start.push(block);this._state.end.push(block);this._state.nodes.push(block);if(!block.outputs.length)return this._state.tail.push(block)}}exports.Factory=Factory;class State{constructor(op=null,multi,start,end,nodes,tail){this.op=op;null==multi&&(multi=!1);this.multi=multi;null==start&&(start=[]);this.start=start;null==end&&(end=[]);this.end=end;null==nodes&&(nodes=[]);this.nodes=
nodes;null==tail&&(tail=[]);this.tail=tail}}}
//# sourceMappingURL=module$node_modules$shadergraph$src$factory$factory.js.map
