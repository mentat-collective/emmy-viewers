{
"version":3,
"file":"module$node_modules$$mentatcollective$jsxgraph$src$utils$base64.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@mentatcollective/jsxgraph/src/utils/base64.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mentatcollective$jsxgraph$src$utils$base64\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jxg = _interopRequireDefault(require(\"../jxg\"));\n\nvar _encoding = _interopRequireDefault(require(\"./encoding\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n    Copyright 2008-2022\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <http://www.gnu.org/licenses/>\n    and <http://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n\n/*jslint nomen: true, plusplus: true, bitwise: true*/\nvar alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    pad = \"=\"; // Util namespace\n\n_jxg.default.Util = _jxg.default.Util || {}; // Local helper functions\n\n/**\n * Extracts one byte from a string and ensures the result is less than or equal to 255.\n * @param {String} s\n * @param {Number} i\n * @returns {Number} <= 255\n * @private\n */\n\nfunction _getByte(s, i) {\n  return s.charCodeAt(i) & 0xff;\n}\n/**\n * Determines the index of a base64 character in the base64 alphabet.\n * @param {String} s\n * @param {Number} i\n * @returns {Number}\n * @throws {Error} If the character can not be found in the alphabet.\n * @private\n */\n\n\nfunction _getIndex(s, i) {\n  return alphabet.indexOf(s.charAt(i));\n}\n/**\n * Base64 routines\n * @namespace\n */\n\n\n_jxg.default.Util.Base64 = {\n  /**\n   * Encode the given string.\n   * @param {String} input\n   * @returns {string} base64 encoded version of the input string.\n   */\n  encode: function (input) {\n    var i,\n        bin,\n        len,\n        padLen,\n        encInput,\n        buffer = [];\n    encInput = _encoding.default.encode(input);\n    len = encInput.length;\n    padLen = len % 3;\n\n    for (i = 0; i < len - padLen; i += 3) {\n      bin = _getByte(encInput, i) << 16 | _getByte(encInput, i + 1) << 8 | _getByte(encInput, i + 2);\n      buffer.push(alphabet.charAt(bin >> 18), alphabet.charAt(bin >> 12 & 63), alphabet.charAt(bin >> 6 & 63), alphabet.charAt(bin & 63));\n    }\n\n    switch (padLen) {\n      case 1:\n        bin = _getByte(encInput, len - 1);\n        buffer.push(alphabet.charAt(bin >> 2), alphabet.charAt(bin << 4 & 63), pad, pad);\n        break;\n\n      case 2:\n        bin = _getByte(encInput, len - 2) << 8 | _getByte(encInput, len - 1);\n        buffer.push(alphabet.charAt(bin >> 10), alphabet.charAt(bin >> 4 & 63), alphabet.charAt(bin << 2 & 63), pad);\n        break;\n    }\n\n    return buffer.join(\"\");\n  },\n\n  /**\n   * Decode from Base64\n   * @param {String} input Base64 encoded data\n   * @param {Boolean} utf8 In case this parameter is true {@link JXG.Util.UTF8.decode} will be applied to\n   * the result of the base64 decoder.\n   * @throws {Error} If the string has the wrong length.\n   * @returns {String}\n   */\n  decode: function (input, utf8) {\n    var encInput,\n        i,\n        len,\n        padLen,\n        bin,\n        output,\n        result = [],\n        buffer = []; // deactivate regexp linting. Our regex is secure, because we replace everything with ''\n\n    /*jslint regexp:true*/\n\n    encInput = input.replace(/[^A-Za-z0-9+/=]/g, \"\");\n    /*jslint regexp:false*/\n\n    len = encInput.length;\n\n    if (len % 4 !== 0) {\n      throw new Error(\"JSXGraph/utils/base64: Can't decode string (invalid input length).\");\n    }\n\n    if (encInput.charAt(len - 1) === pad) {\n      padLen = 1;\n\n      if (encInput.charAt(len - 2) === pad) {\n        padLen = 2;\n      } // omit the last four bytes (taken care of after the for loop)\n\n\n      len -= 4;\n    }\n\n    for (i = 0; i < len; i += 4) {\n      bin = _getIndex(encInput, i) << 18 | _getIndex(encInput, i + 1) << 12 | _getIndex(encInput, i + 2) << 6 | _getIndex(encInput, i + 3);\n      buffer.push(bin >> 16, bin >> 8 & 255, bin & 255); // flush the buffer, if it gets too big fromCharCode will crash\n\n      if (i % 10000 === 0) {\n        result.push(String.fromCharCode.apply(null, buffer));\n        buffer = [];\n      }\n    }\n\n    switch (padLen) {\n      case 1:\n        bin = _getIndex(encInput, len) << 12 | _getIndex(encInput, len + 1) << 6 | _getIndex(encInput, len + 2);\n        buffer.push(bin >> 10, bin >> 2 & 255);\n        break;\n\n      case 2:\n        bin = _getIndex(encInput, i) << 6 | _getIndex(encInput, i + 1);\n        buffer.push(bin >> 4);\n        break;\n    }\n\n    result.push(String.fromCharCode.apply(null, buffer));\n    output = result.join(\"\");\n\n    if (utf8) {\n      output = _encoding.default.decode(output);\n    }\n\n    return output;\n  },\n\n  /**\n   * Decode the base64 input data as an array\n   * @param {string} input\n   * @returns {Array}\n   */\n  decodeAsArray: function (input) {\n    var i,\n        dec = this.decode(input),\n        ar = [],\n        len = dec.length;\n\n    for (i = 0; i < len; i++) {\n      ar[i] = dec.charCodeAt(i);\n    }\n\n    return ar;\n  }\n};\nvar _default = _jxg.default.Util.Base64;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","_getIndex","s","i","alphabet","indexOf","charAt","Object","defineProperty","value","_jxg","_encoding","Util","Base64","encode","input","buffer","encInput","len","length","padLen","bin","charCodeAt","push","pad","join","decode","utf8","result","replace","Error","String","fromCharCode","apply","output","decodeAsArray","dec","ar"]
}
