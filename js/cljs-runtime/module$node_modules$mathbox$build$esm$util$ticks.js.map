{
"version":3,
"file":"module$node_modules$mathbox$build$esm$util$ticks.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/mathbox/build/esm/util/ticks.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathbox$build$esm$util$ticks\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.make = exports.log = exports.linear = void 0;\n\n// TODO: This file was created by bulk-decaffeinate.\n// Sanity-check the conversion and remove this comment.\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS202: Simplify dynamic range loops\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\n/*\n Generate equally spaced ticks in a range at sensible positions.\n\n @param min/max - Minimum and maximum of range\n @param n - Desired number of ticks in range\n @param unit - Base unit of scale (e.g. 1 or \u03c0).\n @param scale - Division scale (e.g. 2 = binary division, or 10 = decimal division).\n @param bias - Integer to bias divisions one or more levels up or down (to create nested scales)\n @param start - Whether to include a tick at the start\n @param end - Whether to include a tick at the end\n @param zero - Whether to include zero as a tick\n @param nice - Whether to round to a more reasonable interval\n*/\nconst linear = function (min, max, n, unit, base, factor, start, end, zero, nice) {\n  let ticks;\n  let i, f;\n\n  if (nice == null) {\n    nice = true;\n  }\n\n  if (!n) {\n    n = 10;\n  }\n\n  if (!unit) {\n    unit = 1;\n  }\n\n  if (!base) {\n    base = 10;\n  }\n\n  if (!factor) {\n    factor = 1;\n  } // Calculate naive tick size.\n\n\n  const span = max - min;\n  const ideal = span / n; // Unsnapped division\n\n  if (!nice) {\n    ticks = (() => {\n      let asc, end1;\n      const result = [];\n\n      for (i = 0, end1 = n, asc = 0 <= end1; asc ? i <= end1 : i >= end1; asc ? i++ : i--) {\n        result.push(min + i * ideal);\n      }\n\n      return result;\n    })();\n\n    if (!start) {\n      ticks.shift();\n    }\n\n    if (!end) {\n      ticks.pop();\n    }\n\n    if (!zero) {\n      ticks = ticks.filter(x => x !== 0);\n    }\n\n    return ticks;\n  } // Round to the floor'd power of 'scale'\n\n\n  if (!unit) {\n    unit = 1;\n  }\n\n  if (!base) {\n    base = 10;\n  }\n\n  const ref = unit * Math.pow(base, Math.floor(Math.log(ideal / unit) / Math.log(base))); // Make derived steps at sensible factors.\n\n  const factors = base % 2 === 0 ? [base / 2, 1, 1 / 2] : base % 3 === 0 ? [base / 3, 1, 1 / 3] : [1];\n\n  const steps = (() => {\n    const result1 = [];\n\n    for (f of Array.from(factors)) {\n      result1.push(ref * f);\n    }\n\n    return result1;\n  })(); // Find step size closest to ideal.\n\n\n  let distance = Infinity;\n  let step = steps.reduce(function (ref, step) {\n    f = step / ideal;\n    const d = Math.max(f, 1 / f);\n\n    if (d < distance) {\n      distance = d;\n      return step;\n    } else {\n      return ref;\n    }\n  }, ref); // Scale final step\n\n  step *= factor; // Renormalize min/max onto aligned steps.\n\n  min = Math.ceil(min / step + +!start) * step;\n  max = (Math.floor(max / step) - +!end) * step;\n  n = Math.ceil((max - min) / step); // Generate equally spaced ticks\n\n  ticks = (() => {\n    let asc1, end2;\n    const result2 = [];\n\n    for (i = 0, end2 = n, asc1 = 0 <= end2; asc1 ? i <= end2 : i >= end2; asc1 ? i++ : i--) {\n      result2.push(min + i * step);\n    }\n\n    return result2;\n  })();\n\n  if (!zero) {\n    ticks = ticks.filter(x => x !== 0);\n  }\n\n  return ticks;\n};\n/*\n Generate logarithmically spaced ticks in a range at sensible positions.\n*/\n\n\nexports.linear = linear;\n\nconst log = function (_min, _max, _n, _unit, _base, _bias, _start, _end, _zero, _nice) {\n  throw new Error(\"Log ticks not yet implemented.\");\n};\n\nexports.log = log;\nconst LINEAR = 0;\nconst LOG = 1;\n\nconst make = function (type, min, max, n, unit, base, bias, start, end, zero, nice) {\n  switch (type) {\n    case LINEAR:\n      return linear(min, max, n, unit, base, bias, start, end, zero, nice);\n\n    case LOG:\n      return log(min, max, n, unit, base, bias, start, end, zero, nice);\n  }\n};\n\nexports.make = make;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","make","log","linear","min","max","n","unit","base","factor","start","end","zero","nice","i","f","ideal","ticks","asc","end1","result","push","shift","pop","filter","x","ref","Math","pow","floor","factors","steps","result1","Array","from","distance","Infinity","step","reduce","d","ceil","asc1","end2","result2","_min","_max","_n","_unit","_base","_bias","_start","_end","_zero","_nice","Error","type","bias","LINEAR","LOG"]
}
