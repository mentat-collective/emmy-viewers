{"version":3,"sources":["sicmutils/numerical/quadrature/simpson.cljc"],"mappings":";AAqCA,AAAA;;;;;;;;;;;;;;;0DAAA,kEAAAA,5HAAME;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wFAAA,xFAAMD,mGAcFM,EAAEC,EAAEC;AAdR,AAcW,mGAAA,2CAAA,8CAAA,rLAACC,sFAAiBH,EAAEC,EAAEC;;;AAdjC,CAAA,wFAAA,iBAAAN,zGAAMF,mGAeFM,EAAEC,EAAEC;AAfR,AAAA,IAAAL,cAAAD;IAAAC,kBAAA,AAAAC,4BAAAD;QAAA,AAAAE,4CAAAF,gBAAA,8CAAA,9GAekBO;AAflB,AAAA,GAgBU,OAASA;AAhBnB;AAAA,AAAA,MAAA,KAAAT,MAAA;;;uFAiBO,AAACU,0FAAsBL,EAAEC,EAAEC,EAAEE,vLAC7B,0LAAA,IAAA,IAAA,IAAA,/LAACE;;;AAlBR,CAAA,kFAAA,lFAAMZ;;AAAN,AAoBA;;;;;;;;;;;AAAAa,kDAAA,AAAAC,yDAUW,AAACC,6CAAKC,gBAAMhB,yDACbA","names":["var_args","G__102878","sicmutils.numerical.quadrature.simpson/simpson-sequence","js/Error","p__102879","map__102880","cljs.core/--destructure-map","cljs.core.get","f","a","b","sicmutils.numerical.quadrature.simpson.simpson_sequence","n","sicmutils.numerical.quadrature.trapezoid.trapezoid_sequence","sicmutils.polynomial.richardson.richardson_column","sicmutils.numerical.quadrature.simpson/integral","sicmutils.numerical.quadrature.common/make-integrator-fn","cljs.core.comp","cljs.core/first"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.numerical.quadrature.simpson\n  (:require [sicmutils.numerical.quadrature.common :as qc :include-macros true]\n            [sicmutils.numerical.quadrature.trapezoid :as qt]\n            [sicmutils.polynomial.richardson :as pr]))\n\n;; ## Simpson's Rule\n;;\n;; This numerical integration method is a [closed Newton-Cotes\n;; formula](https://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas#Closed_Newton%E2%80%93Cotes_formulas);\n;; for each integral slice, Simpson's rule samples each endpoint and the\n;; midpoint and combines them into an area estimate for this slice using the\n;; following formula:\n;;\n;; $${{h} \\over 3} (f_0 + 4f_1 + f_2)$$\n;;\n;; Given a window of $[a, b]$ and a \"step size\" of $h = {{b - a} \\over 2}$. The\n;; point $f_i$ is the point $i$ steps into the window.\n;;\n;; There are a few simpler ways to understand this:\n;;\n;; - Simpson's rule is simply the trapezoid method (see `trapezoid.cljc`),\n;;   subject to a single refinement of \"Richardson extrapolation\".\n;;\n;; - The trapezoid method fits a line to each integration slice. Simpson's rule\n;;   fits a quadratic to each slice.\n;;\n;; - Simpson's rule $S$ is the weighted average of the Midpoint rule $M$ and the\n;;   trapezoid rule $T$:\n;;\n;; $$S = {{2M + T} \\over 3}$$\n;;\n;; The test namespace contains a symbolic proof that the Richardson-extrapolated\n;; Trapezoid method is equivalent to using the formula above to calculate\n;; Simpson's rule directly.\n\n(defn simpson-sequence\n  \"Returns a (lazy) sequence of successively refined estimates of the integral of\n  `f` over the closed interval $[a, b]$ using Simpson's rule.\n\n  Simpson's rule is equivalent to the trapezoid method subject to one refinement\n  of Richardson extrapolation. The trapezoid method fits a line to each\n  integration slice. Simpson's rule fits a quadratic to each slice.\n\n  Returns estimates with $n, 2n, 4n, ...$ slices, geometrically increasing by a\n  factor of 2 with each estimate.\n\n  ### Optional arguments:\n\n  If supplied, `:n` (default 1) specifies the initial number of slices to use.\"\n  ([f a b] (simpson-sequence f a b {:n 1}))\n  ([f a b {:keys [n] :or {n 1}}]\n   {:pre [(number? n)]}\n   (-> (qt/trapezoid-sequence f a b n)\n       (pr/richardson-column 1 2 2 2))))\n\n(qc/defintegrator integral\n  \"Returns an estimate of the integral of `f` over the closed interval $[a, b]$\n  using Simpson's rule with $1, 2, 4 ... 2^n$ windows for each estimate.\n\n  Optionally accepts `opts`, a dict of optional arguments. All of these get\n  passed on to `us/seq-limit` to configure convergence checking.\n\n  See [[simpson-sequence]] for more information about Simpson's rule, caveats that\n  might apply when using this integration method and information on the optional\n  args in `opts` that customize this function's behavior.\"\n  :area-fn (comp first simpson-sequence)\n  :seq-fn simpson-sequence)\n"]}