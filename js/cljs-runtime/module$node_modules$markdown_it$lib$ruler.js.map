{
"version":3,
"file":"module$node_modules$markdown_it$lib$ruler.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/ruler.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$ruler\"] = function(global,require,module,exports) {\n/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Ruler","__rules__","__cache__","prototype","__find__","Ruler.prototype.__find__","name","i","length","__compile__","Ruler.prototype.__compile__","self","chains","forEach","rule","enabled","alt","altName","indexOf","push","chain","fn","at","Ruler.prototype.at","options","index","opt","Error","before","Ruler.prototype.before","beforeName","ruleName","splice","after","Ruler.prototype.after","afterName","Ruler.prototype.push","enable","Ruler.prototype.enable","list","ignoreInvalid","Array","isArray","result","idx","enableOnly","Ruler.prototype.enableOnly","disable","Ruler.prototype.disable","getRules","Ruler.prototype.getRules","chainName"]
}
