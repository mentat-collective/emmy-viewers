shadow$provide.module$node_modules$$mentatcollective$jsxgraph$src$base$ticks=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _jxg=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$jxg")),_math=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$math$math")),_geometry=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$math$geometry")),
_numerics=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$math$numerics")),_constants=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$constants"));global=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$element"));var _coords=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$coords")),_type=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$utils$type")),
_text=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$base$text"));_jxg.default.Ticks=function(line,ticks,attributes){this.constructor(line.board,attributes,_constants.default.OBJECT_TYPE_TICKS,_constants.default.OBJECT_CLASS_OTHER);this.line=line;this.board=this.line.board;this.fixedTicks=this.ticksFunction=null;this.equidistant=!1;this.labelsData=[];if(_type.default.isFunction(ticks))throw this.ticksFunction=ticks,Error("Function arguments are no longer supported.");
if(_type.default.isArray(ticks))this.fixedTicks=ticks;else{if(Math.abs(ticks)<_math.default.eps||0>ticks)ticks=attributes.defaultdistance;this.ticksFunction=this.makeTicksFunction(ticks);this.equidistant=!0}this.minTicksDistance=attributes.minticksdistance;this.ticks=[];this.ticksDelta=1;this.labels=[];this.labelData=[];this.labelCounter=0;this.id=this.line.addTicks(this);this.elType="ticks";this.inherits.push(this.labels);this.board.setId(this,"Ti")};_jxg.default.Ticks.prototype=new global.default;
_jxg.default.extend(_jxg.default.Ticks.prototype,{makeTicksFunction:function(ticks){return function(){if(_type.default.evaluate(this.visProp.insertticks)){var delta=this.getLowerAndUpperBounds(this.getZeroCoordinates(),"ticksdistance");var dist=delta.upper-delta.lower;delta=Math.pow(10,Math.floor(Math.log(.6*dist)/Math.LN10));dist<=6*delta&&(delta*=.5);return delta}return ticks}},hasPoint:function(x,y){var len=this.ticks&&this.ticks.length||0;if(_type.default.isObject(_type.default.evaluate(this.visProp.precision))){var i=
this.board._inputDevice;var r=_type.default.evaluate(this.visProp.precision[i])}else r=this.board.options.precision.hasPoint;r+=.5*_type.default.evaluate(this.visProp.strokewidth);if(!_type.default.evaluate(this.line.visProp.scalable)||this.line.elementClass===_constants.default.OBJECT_CLASS_CURVE||0!==this.line.stdform[1]&&0!==this.line.stdform[2]&&this.line.type!==_constants.default.OBJECT_TYPE_AXIS)return!1;for(i=0;i<len;i++){var t=this.ticks[i];if(t[2]&&!(0===this.line.stdform[1]&&Math.abs(t[0][0]-
this.line.point1.coords.scrCoords[1])<_math.default.eps||0===this.line.stdform[2]&&Math.abs(t[1][0]-this.line.point1.coords.scrCoords[2])<_math.default.eps)&&(1<=Math.abs(t[0][0]-t[0][1])||1<=Math.abs(t[1][0]-t[1][1])))if(0===this.line.stdform[1]){if(Math.abs(y-.5*(t[1][0]+t[1][1]))<2*r&&t[0][0]-r<x&&x<t[0][1]+r)return!0}else if(0===this.line.stdform[2]&&Math.abs(x-.5*(t[0][0]+t[0][1]))<2*r&&t[1][0]-r<y&&y<t[1][1]+r)return!0}return!1},setPositionDirectly:function(method,coords,oldcoords){coords=new _coords.default(method,
coords,this.board);oldcoords=new _coords.default(method,oldcoords,this.board);method=this.board.getBoundingBox();if(this.line.type!==_constants.default.OBJECT_TYPE_AXIS||!_type.default.evaluate(this.line.visProp.scalable))return this;Math.abs(this.line.stdform[1])<_math.default.eps&&Math.abs(coords.usrCoords[1]*oldcoords.usrCoords[1])>_math.default.eps?(coords=oldcoords.usrCoords[1]/coords.usrCoords[1],method[0]*=coords,method[2]*=coords,this.board.setBoundingBox(method,this.board.keepaspectratio,
"update")):Math.abs(this.line.stdform[2])<_math.default.eps&&Math.abs(coords.usrCoords[2]*oldcoords.usrCoords[2])>_math.default.eps&&(coords=oldcoords.usrCoords[2]/coords.usrCoords[2],method[3]*=coords,method[1]*=coords,this.board.setBoundingBox(method,this.board.keepaspectratio,"update"));return this},calculateTicksCoordinates:function(){if(this.line.elementClass===_constants.default.OBJECT_CLASS_LINE&&(this.setTicksSizeVariables(),Math.abs(this.dx)<_math.default.eps&&Math.abs(this.dy)<_math.default.eps))return;
var coordsZero=this.getZeroCoordinates();var bounds=this.line.elementClass===_constants.default.OBJECT_CLASS_LINE?this.getLowerAndUpperBounds(coordsZero):{lower:this.line.minX(),upper:this.line.maxX()};if("polar"===_type.default.evaluate(this.visProp.type)){var r_max=this.board.getBoundingBox();r_max=Math.max(Math.sqrt(r_max[0]*r_max[0]+r_max[1]*r_max[1]),Math.sqrt(r_max[2]*r_max[2]+r_max[3]*r_max[3]));bounds.upper=r_max}this.ticks=[];this.labelsData=[];this.equidistant?this.generateEquidistantTicks(coordsZero,
bounds):this.generateFixedTicks(coordsZero,bounds);return this},setTicksSizeVariables:function(pos){var distMaj=.5*_type.default.evaluate(this.visProp.majorheight),distMin=.5*_type.default.evaluate(this.visProp.minorheight);if(_type.default.exists(pos)){var mi=this.line.minX();var ma=this.line.maxX();var len=this.line.points.length;2>len?this.dyMaj=this.dxMaj=0:_math.default.relDif(pos,mi)<_math.default.eps?(this.dxMaj=this.line.points[0].usrCoords[2]-this.line.points[1].usrCoords[2],this.dyMaj=this.line.points[1].usrCoords[1]-
this.line.points[0].usrCoords[1]):_math.default.relDif(pos,ma)<_math.default.eps?(this.dxMaj=this.line.points[len-2].usrCoords[2]-this.line.points[len-1].usrCoords[2],this.dyMaj=this.line.points[len-1].usrCoords[1]-this.line.points[len-2].usrCoords[1]):(this.dxMaj=-_numerics.default.D(this.line.Y)(pos),this.dyMaj=_numerics.default.D(this.line.X)(pos))}else this.dxMaj=this.line.stdform[1],this.dyMaj=this.line.stdform[2];this.dxMin=this.dxMaj;this.dyMin=this.dyMaj;this.dx=this.dxMaj;this.dy=this.dyMaj;
pos=Math.sqrt(this.dxMaj*this.dxMaj*this.board.unitX*this.board.unitX+this.dyMaj*this.dyMaj*this.board.unitY*this.board.unitY);this.dxMaj=distMaj/pos*this.dxMaj*this.board.unitX;this.dyMaj=distMaj/pos*this.dyMaj*this.board.unitY;this.dxMin=distMin/pos*this.dxMin*this.board.unitX;this.dyMin=distMin/pos*this.dyMin*this.board.unitY;this.minStyle=0>_type.default.evaluate(this.visProp.minorheight)?"infinite":"finite";this.majStyle=0>_type.default.evaluate(this.visProp.majorheight)?"infinite":"finite"},
getZeroCoordinates:function(){var ev_a=_type.default.evaluate(this.visProp.anchor);if(this.line.elementClass===_constants.default.OBJECT_CLASS_LINE){if(this.line.type===_constants.default.OBJECT_TYPE_AXIS)return _geometry.default.projectPointToLine({coords:{usrCoords:[1,0,0]}},this.line,this.board);var c1z=this.line.point1.coords.usrCoords[0];var c1x=this.line.point1.coords.usrCoords[1];var c1y=this.line.point1.coords.usrCoords[2];var c2z=this.line.point2.coords.usrCoords[0];var c2x=this.line.point2.coords.usrCoords[1];
var c2y=this.line.point2.coords.usrCoords[2];return"right"===ev_a?this.line.point2.coords:"middle"===ev_a?new _coords.default(_constants.default.COORDS_BY_USER,[.5*(c1z+c2z),.5*(c1x+c2x),.5*(c1y+c2y)],this.board):_type.default.isNumber(ev_a)?new _coords.default(_constants.default.COORDS_BY_USER,[c1z+(c2z-c1z)*ev_a,c1x+(c2x-c1x)*ev_a,c1y+(c2y-c1y)*ev_a],this.board):this.line.point1.coords}c1x=this.line.minX();c1y=this.line.maxX();return"right"===ev_a?c1y:"middle"===ev_a?.5*(c1x+c1y):_type.default.isNumber(ev_a)?
c1x*(1-ev_a)+c1y*ev_a:c1x},getLowerAndUpperBounds:function(coordsZero,type){var ev_sf=_type.default.evaluate(this.line.visProp.straightfirst),ev_sl=_type.default.evaluate(this.line.visProp.straightlast),ev_i=_type.default.evaluate(this.visProp.includeboundaries);if(this.line.elementClass===_constants.default.OBJECT_CLASS_CURVE)return{lower:this.line.minX(),upper:this.line.maxX()};var point1=new _coords.default(_constants.default.COORDS_BY_USER,this.line.point1.coords.usrCoords,this.board);var upperBound=
new _coords.default(_constants.default.COORDS_BY_USER,this.line.point2.coords.usrCoords,this.board);var isPoint1inBoard=Math.abs(point1.usrCoords[0])>=_math.default.eps&&0<=point1.scrCoords[1]&&point1.scrCoords[1]<=this.board.canvasWidth&&0<=point1.scrCoords[2]&&point1.scrCoords[2]<=this.board.canvasHeight;var isPoint2inBoard=Math.abs(upperBound.usrCoords[0])>=_math.default.eps&&0<=upperBound.scrCoords[1]&&upperBound.scrCoords[1]<=this.board.canvasWidth&&0<=upperBound.scrCoords[2]&&upperBound.scrCoords[2]<=
this.board.canvasHeight;_type.default.exists(type)||"tickdistance"===type?_geometry.default.calcStraight(this.line,point1,upperBound,_type.default.evaluate(this.line.visProp.margin)):_geometry.default.calcLineDelimitingPoints(this.line,point1,upperBound);type=_type.default.evaluate(this.line.visProp.firstarrow);var lA=_type.default.evaluate(this.line.visProp.lastarrow);if(type||lA)this.board.renderer.getPositionArrowHead(this.line,point1,upperBound,_type.default.evaluate(this.line.visProp.strokewidth)),
type&&point1.setCoordinates(_constants.default.COORDS_BY_SCREEN,[point1.scrCoords[1],point1.scrCoords[2]]),lA&&upperBound.setCoordinates(_constants.default.COORDS_BY_SCREEN,[upperBound.scrCoords[1],upperBound.scrCoords[2]]);point1=this.getDistanceFromZero(coordsZero,point1);upperBound=this.getDistanceFromZero(coordsZero,upperBound);point1<upperBound?(coordsZero=point1,ev_sf||!isPoint1inBoard||ev_i||(coordsZero+=_math.default.eps),ev_sl||!isPoint2inBoard||ev_i||(upperBound-=_math.default.eps)):upperBound<
point1?(coordsZero=upperBound,ev_sl||!isPoint2inBoard||ev_i||(coordsZero+=_math.default.eps),upperBound=point1,ev_sf||!isPoint1inBoard||ev_i||(upperBound-=_math.default.eps)):upperBound=coordsZero=0;return{lower:coordsZero,upper:upperBound}},getDistanceFromZero:function(zero,point){var p1=this.line.point1.coords;var p2=this.line.point2.coords;var distance=zero.distance(_constants.default.COORDS_BY_USER,point);0>_math.default.innerProduct([p2.usrCoords[0]-p1.usrCoords[0],p2.usrCoords[1]-p1.usrCoords[1],
p2.usrCoords[2]-p1.usrCoords[2]],[point.usrCoords[0]-zero.usrCoords[0],point.usrCoords[1]-zero.usrCoords[1],point.usrCoords[2]-zero.usrCoords[2]],3)&&(distance*=-1);return distance},generateEquidistantTicks:function(coordsZero,bounds){var eps2=_math.default.eps,deltas,ticksDelta=this.equidistant?this.ticksFunction(1):this.ticksDelta;var tickPosition=_type.default.evaluate(this.visProp.insertticks);var ev_mt=_type.default.evaluate(this.visProp.minorticks);this.line.elementClass===_constants.default.OBJECT_CLASS_LINE&&
(deltas=this.getXandYdeltas());ticksDelta*=_type.default.evaluate(this.visProp.scale);tickPosition&&this.minTicksDistance>_math.default.eps?(ticksDelta=this.adjustTickDistance(ticksDelta,coordsZero,deltas),ticksDelta/=ev_mt+1):tickPosition||(ticksDelta/=ev_mt+1);this.ticksDelta=ticksDelta;if(!(ticksDelta<_math.default.eps)){tickPosition=0;for(_type.default.evaluate(this.visProp.drawzero)||(tickPosition=ticksDelta);tickPosition<=bounds.upper+eps2&&!(tickPosition>=bounds.lower-eps2&&this.processTickPosition(coordsZero,
tickPosition,ticksDelta,deltas),tickPosition+=ticksDelta,bounds.upper-tickPosition>1E4*ticksDelta););for(tickPosition=-ticksDelta;tickPosition>=bounds.lower-eps2&&!(tickPosition<=bounds.upper+eps2&&this.processTickPosition(coordsZero,tickPosition,ticksDelta,deltas),tickPosition-=ticksDelta,tickPosition-bounds.lower>1E4*ticksDelta););}},adjustTickDistance:function(ticksDelta,coordsZero,deltas){var sgn=1,ev_minti=_type.default.evaluate(this.visProp.minorticks);if(this.line.elementClass===_constants.default.OBJECT_CLASS_CURVE)return ticksDelta;
this.getLowerAndUpperBounds(coordsZero,"ticksdistance");var nx=coordsZero.usrCoords[1]+deltas.x*ticksDelta;var ny=coordsZero.usrCoords[2]+deltas.y*ticksDelta;nx=coordsZero.distance(_constants.default.COORDS_BY_SCREEN,new _coords.default(_constants.default.COORDS_BY_USER,[nx,ny],this.board));if(0===ticksDelta)return 0;for(;nx/(ev_minti+1)<this.minTicksDistance;)ticksDelta=1===sgn?2*ticksDelta:5*ticksDelta,sgn*=-1,nx=coordsZero.usrCoords[1]+deltas.x*ticksDelta,ny=coordsZero.usrCoords[2]+deltas.y*ticksDelta,
nx=coordsZero.distance(_constants.default.COORDS_BY_SCREEN,new _coords.default(_constants.default.COORDS_BY_USER,[nx,ny],this.board));return ticksDelta},processTickPosition:function(coordsZero,tickPosition,ticksDelta,deltas){var ticksPerLabel=_type.default.evaluate(this.visProp.ticksperlabel),labelVal=null;if(this.line.elementClass===_constants.default.OBJECT_CLASS_LINE){var x=coordsZero.usrCoords[1]+tickPosition*deltas.x;deltas=coordsZero.usrCoords[2]+tickPosition*deltas.y}else x=this.line.X(coordsZero+
tickPosition),deltas=this.line.Y(coordsZero+tickPosition);x=new _coords.default(_constants.default.COORDS_BY_USER,[x,deltas],this.board);this.line.elementClass===_constants.default.OBJECT_CLASS_CURVE&&(labelVal=coordsZero+tickPosition,this.setTicksSizeVariables(labelVal));x.major=0===Math.round(tickPosition/ticksDelta)%(_type.default.evaluate(this.visProp.minorticks)+1);ticksPerLabel||(ticksPerLabel=_type.default.evaluate(this.visProp.minorticks)+1);ticksDelta=0===Math.round(tickPosition/ticksDelta)%
ticksPerLabel;tickPosition=this.createTickPath(x,x.major);3===tickPosition.length&&(this.ticks.push(tickPosition),ticksDelta&&_type.default.evaluate(this.visProp.drawlabels)?this.labelsData.push(this.generateLabelData(this.generateLabelText(x,coordsZero,labelVal),x,this.ticks.length)):this.labelsData.push(null))},generateFixedTicks:function(coordsZero,bounds){var i,eps2=_math.default.eps,hasLabelOverrides=_type.default.isArray(this.visProp.labels),deltas,ev_dl=_type.default.evaluate(this.visProp.drawlabels);
this.line.elementClass===_constants.default.OBJECT_CLASS_LINE&&(deltas=this.getXandYdeltas());for(i=0;i<this.fixedTicks.length;i++){if(this.line.elementClass===_constants.default.OBJECT_CLASS_LINE){var labelText=this.fixedTicks[i];var tickCoords=coordsZero.usrCoords[1]+labelText*deltas.x;var ti=coordsZero.usrCoords[2]+labelText*deltas.y}else labelText=coordsZero+this.fixedTicks[i],tickCoords=this.line.X(labelText),ti=this.line.Y(labelText);tickCoords=new _coords.default(_constants.default.COORDS_BY_USER,
[tickCoords,ti],this.board);this.line.elementClass===_constants.default.OBJECT_CLASS_CURVE&&this.setTicksSizeVariables(labelText);ti=this.createTickPath(tickCoords,!0);3===ti.length&&labelText>=bounds.lower-eps2&&labelText<=bounds.upper+eps2&&(this.ticks.push(ti),ev_dl&&(hasLabelOverrides||_type.default.exists(this.visProp.labels[i]))?(labelText=hasLabelOverrides?_type.default.evaluate(this.visProp.labels[i]):labelText,this.labelsData.push(this.generateLabelData(this.generateLabelText(tickCoords,
coordsZero,labelText),tickCoords,i))):this.labelsData.push(null))}},getXandYdeltas:function(){var distP1P2=this.line.point1.Dist(this.line.point2);if(this.line.type===_constants.default.OBJECT_TYPE_AXIS){var point1UsrCoords=this.line.point1.coords.usrCoords;var point2UsrCoords=this.line.point2.coords.usrCoords;if(point1UsrCoords[1]>point2UsrCoords[1]||Math.abs(point1UsrCoords[1]-point2UsrCoords[1])<_math.default.eps&&point1UsrCoords[2]>point2UsrCoords[2])point1UsrCoords=this.line.point2.coords.usrCoords,
point2UsrCoords=this.line.point1.coords.usrCoords}else point1UsrCoords=this.line.point1.coords.usrCoords,point2UsrCoords=this.line.point2.coords.usrCoords;return{x:(point2UsrCoords[1]-point1UsrCoords[1])/distP1P2,y:(point2UsrCoords[2]-point1UsrCoords[2])/distP1P2}},_isInsideCanvas:function(x,y,m){var cw=this.board.canvasWidth,ch=this.board.canvasHeight;void 0===m&&(m=0);return x[0]>=m&&x[0]<=cw-m&&y[0]>=m&&y[0]<=ch-m||x[1]>=m&&x[1]<=cw-m&&y[1]>=m&&y[1]<=ch-m},createTickPath:function(coords,major){var x=
[-2E6,-2E6],y=[-2E6,-2E6];var c=coords.scrCoords;if(major){var dxs=this.dxMaj;var dys=this.dyMaj;var alpha=this.majStyle}else dxs=this.dxMin,dys=this.dyMin,alpha=this.minStyle;var lineStdForm=[-dys*c[1]-dxs*c[2],dys,dxs];if(major&&"polar"===_type.default.evaluate(this.visProp.type)){if(x=this.board.getBoundingBox(),dxs=2*Math.PI,dys=dxs/180,c=coords.usrCoords,c=Math.sqrt(c[1]*c[1]+c[2]*c[2]),x=Math.max(Math.sqrt(x[0]*x[0]+x[1]*x[1]),Math.sqrt(x[2]*x[2]+x[3]*x[3])),c<x){x=[];y=[];for(coords=0;coords<=
dxs;coords+=dys)x.push(this.board.origin.scrCoords[1]+c*Math.cos(coords)*this.board.unitX),y.push(this.board.origin.scrCoords[2]+c*Math.sin(coords)*this.board.unitY);return[x,y,major]}}else if("infinite"===alpha?(c=_geometry.default.meetLineBoard(lineStdForm,this.board),x[0]=c[0].scrCoords[1],x[1]=c[1].scrCoords[1],y[0]=c[0].scrCoords[2],y[1]=c[1].scrCoords[2]):(alpha="\x3e"===_type.default.evaluate(this.visProp.face)?Math.PI/4:"\x3c"===_type.default.evaluate(this.visProp.face)?-Math.PI/4:0,coords=
Math.cos(alpha)*dxs-Math.sin(alpha)*dys,lineStdForm=Math.sin(alpha)*dxs+Math.cos(alpha)*dys,x[0]=c[1]+coords*_type.default.evaluate(this.visProp.tickendings[0]),y[0]=c[2]-lineStdForm*_type.default.evaluate(this.visProp.tickendings[0]),x[1]=c[1],y[1]=c[2],alpha=-alpha,coords=Math.cos(alpha)*dxs-Math.sin(alpha)*dys,lineStdForm=Math.sin(alpha)*dxs+Math.cos(alpha)*dys,x[2]=c[1]-coords*_type.default.evaluate(this.visProp.tickendings[1]),y[2]=c[2]+lineStdForm*_type.default.evaluate(this.visProp.tickendings[1])),
this._isInsideCanvas(x,y))return[x,y,major];return[]},formatLabelText:function(value){var ev_s=_type.default.evaluate(this.visProp.scalesymbol);if(_type.default.isNumber(value)){var labelText=(Math.round(1E11*value)/1E11).toString();if(labelText.length>_type.default.evaluate(this.visProp.maxlabellength)||-1!==labelText.indexOf("e"))labelText=_type.default.evaluate(this.visProp.digits),3!==_type.default.evaluate(this.visProp.precision)&&3===labelText&&(labelText=_type.default.evaluate(this.visProp.precision)),
labelText=value.toExponential(labelText).toString();_type.default.evaluate(this.visProp.beautifulscientificticklabels)&&(labelText=this.beautifyScientificNotationLabel(labelText));-1<labelText.indexOf(".")&&-1===labelText.indexOf("e")&&(labelText=labelText.replace(/0+$/,""),labelText=labelText.replace(/\.$/,""))}else labelText=value.toString();0<ev_s.length&&("1"===labelText?labelText=ev_s:"-1"===labelText?labelText="-"+ev_s:"0"!==labelText&&(labelText+=ev_s));_type.default.evaluate(this.visProp.useunicodeminus)&&
(labelText=labelText.replace(/-/g,"−"));return labelText},beautifyScientificNotationLabel:function(labelText){if(-1===labelText.indexOf("e"))return labelText;labelText=parseFloat(labelText.substring(0,labelText.indexOf("e")))+labelText.substring(labelText.indexOf("e"));return labelText=labelText.replace(/e(.*)$/g,function(match,$1){return"•10"+$1.replace(/-/g,"⁻").replace(/\+/g,"").replace(/0/g,"⁰").replace(/1/g,"¹").replace(/2/g,"²").replace(/3/g,"³").replace(/4/g,"⁴").replace(/5/g,"⁵").replace(/6/g,
"⁶").replace(/7/g,"⁷").replace(/8/g,"⁸").replace(/9/g,"⁹")})},generateLabelText:function(tick,zero,value){if(!_type.default.exists(value)){tick=this.getDistanceFromZero(zero,tick);if(Math.abs(tick)<_math.default.eps)return"0";value=tick/_type.default.evaluate(this.visProp.scale)}return this.formatLabelText(value)},generateLabelData:function(labelText,tick,tickNumber){var fs=_type.default.evaluate(this.visProp.label.fontsize);var xa=[tick.scrCoords[1],tick.scrCoords[1]];var ya=[tick.scrCoords[2],tick.scrCoords[2]];
if(!this._isInsideCanvas(xa,ya,.5*(void 0===fs?12:fs)))return null;xa=_type.default.evaluate(this.visProp.label.offset[0]);ya=_type.default.evaluate(this.visProp.label.offset[1]);return{x:tick.usrCoords[1]+xa/this.board.unitX,y:tick.usrCoords[2]+ya/this.board.unitY,t:labelText,i:tickNumber}},update:function(){this.needsUpdate&&0!==this.board.canvasWidth&&0!==this.board.canvasHeight&&this.calculateTicksCoordinates();return this},updateRenderer:function(){if(!this.needsUpdate)return this;this.visPropCalc.visible&&
this.board.renderer.updateTicks(this);this.updateRendererLabels();this.setDisplayRendNode();this.needsUpdate=!1;return this},updateRendererLabels:function(){var i,j;var lenData=this.labelsData.length;var lenLabels=this.labels.length;for(j=i=0;i<lenData;i++)if(null!==this.labelsData[i]){var ld=this.labelsData[i];if(j<lenLabels){var attr=this.labels[j];attr.setText(ld.t);attr.setCoords(ld.x,ld.y);j++}else this.labelCounter+=1,attr={isLabel:!0,layer:this.board.options.layer.line,highlightStrokeColor:this.board.options.text.strokeColor,
highlightStrokeWidth:this.board.options.text.strokeWidth,highlightStrokeOpacity:this.board.options.text.strokeOpacity,priv:this.visProp.priv},attr=_type.default.deepCopy(attr,this.visProp.label),attr.id=this.id+ld.i+"Label"+this.labelCounter,attr=_text.default.createText(this.board,[ld.x,ld.y,ld.t],attr),this.addChild(attr),attr.setParents(this),attr.isDraggable=!1,attr.dump=!1,this.labels.push(attr);ld=_type.default.evaluate(this.visProp.label.visible);"inherit"===ld&&(ld=this.visPropCalc.visible);
attr.prepareUpdate().updateVisibility(ld).updateRenderer();attr.distanceX=_type.default.evaluate(this.visProp.label.offset[0]);attr.distanceY=_type.default.evaluate(this.visProp.label.offset[1])}for(;j<lenLabels;j++)this.board.renderer.display(this.labels[j],!1),this.labels[j].visProp.visible=this.labels[j].visPropCalc.visible=!1;return this},hideElement:function(){var i;_jxg.default.deprecated("Element.hideElement()","Element.setDisplayRendNode()");this.visPropCalc.visible=!1;this.board.renderer.display(this,
!1);for(i=0;i<this.labels.length;i++)_type.default.exists(this.labels[i])&&this.labels[i].hideElement();return this},showElement:function(){var i;_jxg.default.deprecated("Element.showElement()","Element.setDisplayRendNode()");this.visPropCalc.visible=!0;this.board.renderer.display(this,!1);for(i=0;i<this.labels.length;i++)_type.default.exists(this.labels[i])&&this.labels[i].showElement();return this}});_jxg.default.createTicks=function(board,parents,attributes){board=_type.default.copyAttributes(attributes,
board.options,"ticks");attributes=2>parents.length?board.ticksdistance:parents[1];if(parents[0].elementClass===_constants.default.OBJECT_CLASS_LINE||parents[0].elementClass===_constants.default.OBJECT_CLASS_CURVE)attributes=new _jxg.default.Ticks(parents[0],attributes,board);else throw Error("JSXGraph: Can't create Ticks with parent types '"+typeof parents[0]+"'.");_type.default.isFunction(board.generatelabelvalue)&&(attributes.generateLabelText=board.generatelabelvalue);_type.default.isFunction(board.generatelabeltext)&&
(attributes.generateLabelText=board.generatelabeltext);attributes.setParents(parents[0]);attributes.isDraggable=!0;attributes.fullUpdate(parents[0].visPropCalc.visible);return attributes};_jxg.default.createHatchmark=function(board,parents,attributes){var i,pos=[],attr=_type.default.copyAttributes(attributes,board.options,"hatch");if(parents[0].elementClass!==_constants.default.OBJECT_CLASS_LINE&&parents[0].elementClass!==_constants.default.OBJECT_CLASS_CURVE||"number"!==typeof parents[1])throw Error("JSXGraph: Can't create Hatch mark with parent types '"+
typeof parents[0]+"' and '"+typeof parents[1]+" and ''"+typeof parents[2]+"'.");attributes=parents[1];var width=attr.ticksdistance;var base=.5*-((attributes-1)*width);for(i=0;i<attributes;i++)pos[i]=base+i*width;board=board.create("ticks",[parents[0],pos],attr);board.elType="hatch";return board};_jxg.default.registerElement("ticks",_jxg.default.createTicks);_jxg.default.registerElement("hash",_jxg.default.createHatchmark);_jxg.default.registerElement("hatch",_jxg.default.createHatchmark);exports.default=
{Ticks:_jxg.default.Ticks,createTicks:_jxg.default.createTicks,createHashmark:_jxg.default.createHatchmark,createHatchmark:_jxg.default.createHatchmark}}
//# sourceMappingURL=module$node_modules$$mentatcollective$jsxgraph$src$base$ticks.js.map
