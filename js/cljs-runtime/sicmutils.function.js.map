{"version":3,"sources":["sicmutils/function.cljc"],"mappings":"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","names":["sicmutils$function$IArity$arity$dyn","x__4550__auto__","m__4551__auto__","sicmutils.function/arity","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","sicmutils.function/IArity","f","cljs.core/PROTOCOL_SENTINEL","o","or__4253__auto__","cljs.core/meta","cljs.core/Symbol","_","cljs.core/MultiFn","sicmutils.function/function?","cljs.core.isa_QMARK_","sicmutils.value/kind","var_args","G__80324","sicmutils.function/with-arity","js/Error","arity","sicmutils.function$.with_arity","m","new-meta","cljs.core.merge","cljs.core.assoc","cljs.core/with-meta","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.function/compose","seq80325","self__4852__auto__","cljs.core/seq","fns","a","cljs.core/last","cljs.core/identity","cljs.core.apply","cljs.core/comp","sicmutils.function/memoize","cljs.core/memoize","G__80363","sicmutils.function/get","k","p1__80353#","sicmutils.function$.compose","sicmutils.function$.get","cljs.core.get","not-found","p1__80354#","G__80439","sicmutils.function/get-in","ks","p1__80432#","sicmutils.function$.get_in","cljs.core.get_in","p1__80433#","sicmutils.function/zero-like","meta","args","sicmutils.value/zero-like","sicmutils.function/one-like","sicmutils.value/one-like","sicmutils.function/I","sicmutils.function/identity-like","sicmutils.function/arg-shift","seq80460","G__80461","cljs.core/first","cljs.core/next","self__4851__auto__","shifts","cljs.core.concat","cljs.core.repeat","xs","cljs.core.map","sicmutils.generic/+","sicmutils.function/arg-scale","seq80466","G__80467","factors","sicmutils.generic/*","sicmutils.value/Value","sicmutils.value/zero?","sicmutils.value/one?","sicmutils.value/identity?","sicmutils.value/identity-like","sicmutils.value/exact?","sicmutils.value/freeze","temp__5751__auto__","cljs.core/get-method","cljs.core/Keyword","cljs.core/deref","sicmutils.value/object-name-map","cljs.core/Var","cljs.core/MetaFn","sicmutils.function/variadic?","cljs.core/boolean","sicmutils.function/exposed-arities","pattern","cljs.core/re-pattern","parse","s","temp__5753__auto__","cljs.core/re-find","js/parseInt","cljs.core.subs","arities","cljs.core/js-keys","cljs.core.remove","cljs.core/nil?","cljs.core.into","cljs.core/empty?","cljs.core.sort","sicmutils.function/js-arity","cljs.core._EQ_","cljs.core/count","sicmutils.function/reflect-on-arity","sicmutils.function/*strict-arity-checks*","G__80497","sicmutils.function/combine-arities","b","sicmutils.util/illegal","cljs.core/compare","sicmutils.function$.combine_arities","cljs.core/vector?","a_0__80566","cljs.core.nth","cljs.core/keyword-identical?","b_0__80570","cljs.core.match/backtrack","e80673","e__79159__auto__","e80659","b_0__80576","e80663","e80660","b_0__80579","e80662","e80661","e80655","e80626","a_0__80581","b_0__80584","e80644","e80637","b_0__80587","e80642","e80641","e80636","e80627","a_0__80589","b_0__80591","e80631","e80630","e80629","e80628","k2","x__4336__auto__","y__4337__auto__","n","fail","l","m2","n2","x__4339__auto__","y__4340__auto__","sicmutils.function/joint-arity","cljs.core.reduce","sicmutils.function/seq-arity","cljs.core.transduce","cljs.core.derive","sicmutils.function/unary-operation","cljs.core.partial","sicmutils.function/coerce-to-fn","x","sicmutils.value/numerical?","cljs.core/constantly","sicmutils.function/binary-operation","op","g","f-arity","g-arity","f1","g1","G__80679","G__80680","h","sicmutils.function/defunary","generic-op","unary-op","G__80682","sicmutils.function/defbinary","sicmutils.function$.defbinary","binary-op","binop","seq__80683","chunk__80684","count__80685","i__80686","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","signature","sicmutils.generic/add","sicmutils.generic/sub","sicmutils.generic/-","sicmutils.generic/mul","sicmutils.generic/invert","sicmutils.generic/div","sicmutils.generic/divide","sicmutils.generic/expt","sicmutils.generic/sqrt","sicmutils.generic/negate","sicmutils.generic/negative?","sicmutils.generic/abs","sicmutils.generic/floor","sicmutils.generic/ceiling","sicmutils.generic/integer-part","sicmutils.generic/fractional-part","sicmutils.generic/quotient","sicmutils.generic/remainder","sicmutils.generic/modulo","sicmutils.generic/sin","sicmutils.generic/cos","sicmutils.generic/tan","sicmutils.generic/asin","sicmutils.generic/acos","sicmutils.generic/atan","sicmutils.generic/sinh","sicmutils.generic/cosh","sicmutils.generic/tanh","sicmutils.generic/square","sicmutils.generic/cube","sicmutils.generic/exp","sicmutils.generic/log","sicmutils.generic/transpose","G__80695","sicmutils.generic/determinant","sicmutils.generic/trace","sicmutils.generic/gcd","sicmutils.generic/lcm","sicmutils.generic/exact-divide","sicmutils.generic/solve-linear","sicmutils.generic/solve-linear-right","sicmutils.generic/dimension","sicmutils.generic/dot-product","sicmutils.generic/inner-product","sicmutils.generic/outer-product","sicmutils.generic/cross-product","sicmutils.generic/make-rectangular","sicmutils.generic/make-polar","sicmutils.generic/real-part","sicmutils.generic/imag-part","sicmutils.generic/magnitude","sicmutils.generic/angle","sicmutils.generic/conjugate"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.function\n  \"Procedures that act on Clojure's function and multimethod types, along with\n  extensions of the SICMUtils generic operations to functions.\n\n  See [the `Function`\n  cljdocs](https://cljdoc.org/d/sicmutils/sicmutils/CURRENT/doc/data-types/function)\n  for a discussion of generic function arithmetic.\"\n  (:refer-clojure :exclude [get get-in memoize])\n  (:require [clojure.core :as core]\n            [clojure.core.match :refer [match] :include-macros true]\n            [sicmutils.generic :as g]\n            [sicmutils.util :as u]\n            [sicmutils.value :as v])\n  #?(:clj\n     (:import (clojure.lang AFunction RestFn MultiFn Keyword Symbol Var)\n              (java.lang.reflect Method))))\n\n;; ## Function Algebra\n;;\n;; this namespace extends the sicmutils generic operations to Clojure functions\n;; and multimethods. (Of course, this includes the generic operations\n;; themselves!)\n\n;; ### Utilities\n\n(defprotocol IArity\n  (arity [f]\n    \"Return the cached or obvious arity of `f` if we know it. Otherwise\n    delegates to heavy duty reflection.\"))\n\n(extend-protocol IArity\n  #?(:clj Object :cljs default)\n  (arity [o]\n    (or (:arity (meta o))\n        ;; Faute de mieux, we assume the function is unary. Most math functions\n        ;; are.\n        [:exactly 1]))\n\n  Symbol\n  (arity [_] [:exactly 0])\n\n  MultiFn\n  ;; If f is a multifunction, then we expect that it has a multimethod\n  ;; responding to the argument :arity, which returns the arity.\n  (arity [f] (f :arity)))\n\n(defn function?\n  \"Returns true if `f` is of [[v/kind]] `::v/function`, false otherwise.\"\n  [f]\n  (isa? (v/kind f) ::v/function))\n\n(defn with-arity\n  \"Appends the supplied `arity` to the metadata of `f`, knocking out any\n  pre-existing arity notation.\n\n  Optionally accepts a third parameter `m` of metadata to attach to the return\n  function, in addition to the new `:arity` key.\"\n  ([f arity]\n   (with-arity f arity {}))\n  ([f arity m]\n   (let [new-meta (-> (meta f)\n                      (merge m)\n                      (assoc :arity arity))]\n     (with-meta f new-meta))))\n\n(defn compose\n  \"Arity-preserving version of `clojure.core/comp`.\n\n  The arity of a composition is the arity of the rightmost (that is, first to be\n  applied) function term in `fns`.\"\n  [& fns]\n  (let [a (arity (or (last fns)\n                     identity))]\n    (with-meta (apply comp fns) {:arity a})))\n\n(defn memoize\n  \"meta-preserving version of `clojure.core/memoize`.\n\n  The returned function will have a new `:arity` entry in its metadata with the\n  `arity` of the original `f`; this is because the process used to figure out a\n  function's arity will not work across the memoization boundary.\"\n  [f]\n  (let [m (meta f)\n        m (if (:arity m)\n            m\n            (assoc m :arity (arity f)))]\n    (with-meta (core/memoize f)\n      m)))\n\n(defn get\n  \"For non-functions, acts like [[clojure.core/get]]. For function\n  arguments (anything that responds true to [[function?]]), returns\n\n  ```clojure\n  (comp #(clojure.core/get % k) f)\n  ```\n\n  If `not-found` is supplied it's passed through to the\n  composed [[clojure.core/get]].\"\n  ([f k]\n   (if (function? f)\n     (compose #(get % k) f)\n     (core/get f k)))\n  ([f k not-found]\n   (if (function? f)\n     (compose #(get % k not-found) f)\n     (core/get f k not-found))))\n\n(defn get-in\n  \"For non-functions, acts like [[clojure.core/get-in]]. For function\n  arguments (anything that responds true to [[function?]]), returns\n\n  ```clojure\n  (comp #(clojure.core/get-in % ks) f)\n  ```\n\n  If `not-found` is supplied it's passed through to the\n  composed [[clojure.core/get-in]].\"\n  ([f ks]\n   (if (function? f)\n     (compose #(get-in % ks) f)\n     (core/get-in f ks)))\n  ([f ks not-found]\n   (if (function? f)\n     (compose #(get-in % ks not-found) f)\n     (core/get-in f ks not-found))))\n\n(defn- zero-like [f]\n  (let [meta {:arity (arity f)\n              :from :zero-like}]\n    (-> (fn [& args]\n          (v/zero-like (apply f args)))\n        (with-meta meta))))\n\n(defn- one-like [f]\n  (let [meta {:arity (arity f)\n              :from :one-like}]\n    (-> (fn [& args]\n          (v/one-like (apply f args)))\n        (with-meta meta))))\n\n(def ^{:doc \"Identity function. Returns its argument.\"}\n  I\n  identity)\n\n(defn- identity-like [f]\n  (let [meta {:arity (arity f)\n              :from :identity-like}]\n    (with-meta identity meta)))\n\n(defn arg-shift\n  \"Takes a function `f` and a sequence of `shifts`, and returns a new function\n  that adds each shift to the corresponding argument of `f`. Too many or two few\n  shifts are ignored.\n\n  ```clojure\n  ((arg-shift square 3) 4) ==> 49\n  ((arg-shift square 3 2 1) 4) ==> 49\n  ```\"\n  [f & shifts]\n  (let [shifts (concat shifts (repeat 0))]\n    (-> (fn [& xs]\n          (apply f (map g/+ xs shifts)))\n        (with-meta {:arity (arity f)}))))\n\n(defn arg-scale\n  \"Takes a function `f` and a sequence of `factors`, and returns a new function\n  that multiplies each factor by the corresponding argument of `f`. Too many or\n  two few factors are ignored.\n\n  ```clojure\n  ((arg-scale square 3) 4) ==> 144\n  ((arg-scale square 3 2 1) 4) ==> 144\n  ```\"\n  [f & factors]\n  (let [factors (concat factors (repeat 1))]\n    (-> (fn [& xs]\n          (apply f (map g/* xs factors)))\n        (with-meta {:arity (arity f)}))))\n\n(extend-protocol v/Value\n  MultiFn\n  (zero? [_] false)\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [f] (zero-like f))\n  (one-like [f] (one-like f))\n  (identity-like [f] (identity-like f))\n  (exact? [f] (compose v/exact? f))\n  (freeze [f]\n    (if-let [m (get-method f [Keyword])]\n      (m :name)\n      (core/get @v/object-name-map f f)))\n  (kind [_] ::v/function)\n\n  #?(:clj AFunction :cljs function)\n  (zero? [_] false)\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [f] (zero-like f))\n  (one-like [f] (one-like f))\n  (identity-like [f] (identity-like f))\n  (exact? [f] (compose v/exact? f))\n  (freeze [f] (core/get\n               @v/object-name-map\n               f #?(:clj (:name (meta f) f)\n                    :cljs f)))\n  (kind [_] ::v/function)\n\n  Var\n  (zero? [_] false)\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [f] (zero-like f))\n  (one-like [f] (one-like f))\n  (identity-like [f] (identity-like f))\n  (exact? [f] (compose v/exact? f))\n  (freeze [f] (core/get @v/object-name-map @f f))\n  (kind [_] ::v/function)\n\n  #?@(:cljs\n      [MetaFn\n       (zero? [_] false)\n       (one? [_] false)\n       (identity? [_] false)\n       (zero-like [f] (zero-like f))\n       (one-like [f] (one-like f))\n       (identity-like [f] (identity-like f))\n       (exact? [f] (compose v/exact? f))\n       (freeze [f] (core/get\n                    @v/object-name-map f (:name (.-meta f) f)))\n       (kind [_] ::v/function)]))\n\n;; we record arities as a vector with an initial keyword:\n;;   [:exactly m]\n;;   [:between m n]\n;;   [:at-least m]\n\n#?(:clj\n   (do (defn ^:no-doc arity-map [f]\n         (let [^\"[java.lang.reflect.Method\" methods (.getDeclaredMethods (class f))\n               ;; tally up arities of invoke, doInvoke, and getRequiredArity\n               ;; methods. Filter out invokeStatic.\n               pairs (for [^Method m methods\n                           :let [name (.getName m)]\n                           :when (not (#{\"withMeta\" \"meta\" \"invokeStatic\"} name))]\n                       (condp = name\n                         \"invoke\"   [:invoke (alength (.getParameterTypes m))]\n                         \"doInvoke\" [:doInvoke true]\n                         \"getRequiredArity\" [:getRequiredArity\n                                             (.getRequiredArity ^RestFn f)]))\n               facts (group-by first pairs)]\n           {:arities        (into #{} (map peek) (:invoke facts))\n            :required-arity (second (first (:getRequiredArity facts)))\n            :invoke?        (boolean (seq (:doInvoke facts)))}))\n\n       (defn ^:no-doc jvm-arity [f]\n         (let [{:keys [arities required-arity invoke?] :as m} (arity-map f)]\n           (cond\n             ;; Rule one: if all we have is one single case of invoke, then the\n             ;; arity is the arity of that method. This is the common case.\n             (and (= 1 (count arities))\n                  (not required-arity)\n                  (not invoke?))\n             [:exactly (first arities)]\n\n             ;; Rule two: if we have invokes for the arities 0..3,\n             ;; getRequiredArity says 3, and we have doInvoke, then we consider that\n             ;; this function was probably produced by Clojure's core \"comp\"\n             ;; function, and we somewhat lamely consider the arity of the composed\n             ;; function 1.\n             (and (= #{0 1 2 3} arities)\n                  (= 3 required-arity)\n                  invoke?)\n             [:exactly 1]\n\n             ;; Rule three: if we have exactly one doInvoke and getRequiredArity,\n             ;; then the arity at least the result of .getRequiredArity.\n             (and required-arity\n                  invoke?)\n             [:at-least (apply min required-arity arities)]\n\n             ;; Rule four: If we have more than 1 `invoke` clause, return a\n             ;; `:between`. This won't account for gaps between the arities.\n             (seq arities)\n             [:between\n              (apply min arities)\n              (apply max arities)]\n\n             :else\n             (u/illegal\n              (str \"Not enough info to determine jvm-arity of \" f \" :\" m))))))\n\n   :cljs\n   (do\n     (defn ^:no-doc variadic?\n       \"Returns true if the supplied function is variadic, false otherwise.\"\n       [f]\n       (boolean\n        (.-cljs$core$IFn$_invoke$arity$variadic f)))\n\n     (defn ^:no-doc exposed-arities\n       \"When CLJS functions have different arities, the function is represented as a js\n  object with each arity storied under its own key.\"\n       [f]\n       (let [pattern (re-pattern #\"invoke\\$arity\\$\\d+\")\n             parse   (fn [s]\n                       (when-let [arity (re-find pattern s)]\n                         (js/parseInt (subs arity 13))))\n             arities (->> (map parse (js-keys f))\n                          (concat [(.-cljs$lang$maxFixedArity f)])\n                          (remove nil?)\n                          (into #{}))]\n         (if (empty? arities)\n           [(alength f)]\n           (sort arities))))\n\n     (defn ^:no-doc js-arity\n       \"Returns a data structure indicating the arity of the supplied function.\"\n       [f]\n       (let [arities (exposed-arities f)]\n         (cond (variadic? f)\n               (if (= [0 1 2 3] arities)\n                 ;; Rule 3, where we assume that any function that's variadic and\n                 ;; that has defined these particular arities is a \"compose\"\n                 ;; function... and therefore takes a single argument.\n                 [:exactly 1]\n\n                 ;; this case is where we know we have variadic args, so we set\n                 ;; a minimum. This could break if some arity was missing\n                 ;; between the smallest and the variadic case.\n                 [:at-least (first arities)])\n\n               ;; This corresponds to rule 1 in the JVM case. We have a single\n               ;; arity and no evidence of a variadic function.\n               (= 1 (count arities)) [:exactly (first arities)]\n\n               ;; This is a departure from the JVM rules. A potential error here\n               ;; would occur if someone defined arities 1 and 3, but missed 2.\n               :else [:between\n                      (first arities)\n                      (last arities)])))))\n\n(def ^{:no-doc true\n       :doc \"Returns the arity of the function f. Computing arities of clojure\n  functions is a bit complicated. It involves reflection, so the results are\n  definitely worth memoizing.\"}\n  reflect-on-arity\n  (core/memoize\n   #?(:cljs js-arity :clj jvm-arity)))\n\n(def ^{:dynamic true\n       :doc \"If true, attempting to pass two functions of incompatible arity\n  into any binary function, or into [[combine-arities]], will throw. False by\n  default.\"}\n  *strict-arity-checks*\n  false)\n\n#?(:clj\n   (extend-protocol IArity\n     AFunction\n     (arity [f] (:arity (meta f) (reflect-on-arity f))))\n\n   :cljs\n   (extend-protocol IArity\n     function\n     (arity [f] (reflect-on-arity f))\n\n     MetaFn\n     (arity [f] (:arity (meta f) (reflect-on-arity f)))))\n\n(defn combine-arities\n  \"Returns the joint arity of arities `a` and `b`.\n\n  The joint arity is the loosest possible arity specification compatible with\n  both `a` and `b`. Throws if `a` and `b` are incompatible.\"\n  ([] [:at-least 0])\n  ([a] a)\n  ([a b]\n   (letfn [(fail []\n             (if *strict-arity-checks*\n               (u/illegal (str \"Incompatible arities: \" a \" \" b))\n               [:at-least 0]))]\n     ;; since the combination operation is symmetric, sort the arguments\n     ;; so that we only have to implement the upper triangle of the\n     ;; relation.\n     (if (pos? (compare (first a) (first b)))\n       (combine-arities b a)\n       (match [a b]\n              [[:at-least k] [:at-least k2]] [:at-least (max k k2)]\n              [[:at-least k] [:between m n]] (let [m (max k m)]\n                                               (cond (= m n) [:exactly m]\n                                                     (< m n) [:between m n]\n                                                     :else (fail)))\n              [[:at-least k] [:exactly l]] (if (>= l k)\n                                             [:exactly l]\n                                             (fail))\n              [[:between m n] [:between m2 n2]] (let [m (max m m2)\n                                                      n (min n n2)]\n                                                  (cond (= m n) [:exactly m]\n                                                        (< m n) [:between m n]\n                                                        :else (fail)))\n              [[:between m n] [:exactly k]] (if (and (<= m k)\n                                                     (<= k n))\n                                              [:exactly k]\n                                              (fail))\n              [[:exactly k] [:exactly l]] (if (= k l) [:exactly k] (fail)))))))\n\n(defn joint-arity\n  \"Find the most relaxed possible statement of the joint arity of the given sequence of `arities`.\n  If they are incompatible, an exception is thrown.\"\n  [arities]\n  (reduce combine-arities arities))\n\n(defn seq-arity\n  \"Returns the most general arity compatible with the aritiies of all entries in\n  the supplied sequence `xs` of values.\"\n  [xs]\n  (transduce (map arity) combine-arities xs))\n\n;; ## Generic Implementations\n;;\n;; A `::cofunction` is a type that we know how to combine with a function in a\n;; binary operation.\n\n(derive ::v/scalar ::cofunction)\n\n(defn- unary-operation\n  \"For a unary function `f` (like [[g/sqrt]]), returns a function of one function\n  `g`. The returned function acts like `(comp f g)`. For example:\n\n  ```clojure\n  (([[unary-operation]] f) g)\n  ;;=> (fn [x] (f (g x)))\n  ```\"\n  [f]\n  (-> (partial comp f)\n      (with-meta {:arity [:exactly 1]})))\n\n(defn coerce-to-fn\n  \"Given a [[value/numerical?]] input `x`, returns a function of arity `arity`\n  that always returns `x` no matter what input it receives.\n\n  For non-numerical `x`, returns `x`.\"\n  ([x arity]\n   (if (v/numerical? x)\n     (-> (constantly x)\n         (with-meta {:arity arity}))\n     x)))\n\n(defn- binary-operation\n  \"Accepts a binary function `op`, and returns a function of two functions `f` and\n  `g` which will produce the pointwise operation `op` of the results of applying\n  both `f` and `g` to the input.\n\n  For example:\n\n  ```clojure\n  (([[binary-operation]] op) f g)\n  ;;=> (fn [x] (op (f x) (g x)))\n  ```\"\n  [op]\n  (letfn [(h [f g]\n            (let [f-arity (if (v/numerical? f) (arity g) (arity f))\n                  g-arity (if (v/numerical? g) f-arity   (arity g))\n                  f1      (coerce-to-fn f f-arity)\n                  g1      (coerce-to-fn g g-arity)\n                  arity (joint-arity [f-arity g-arity])]\n              (-> (fn [& args]\n                    (op (apply f1 args)\n                        (apply g1 args)))\n                  (with-meta {:arity arity}))))]\n    (with-meta h {:arity [:exactly 2]})))\n\n(defn- defunary\n  \"Given a generic unary function `generic-op`, define the multimethods necessary\n  to introduce this operation to function arguments.\"\n  [generic-op]\n  (let [unary-op (unary-operation generic-op)]\n    (defmethod generic-op [::v/function] [a]\n      (unary-op a))))\n\n(defn- defbinary\n  \"Given a generic binary function `generic-op` (and an optional `binary-op` to\n  perform the work), define the multimethods necessary to introduce this\n  operation to function arguments.\"\n  ([generic-op] (defbinary generic-op generic-op))\n  ([generic-op binary-op]\n   (let [binop (binary-operation binary-op)]\n     (doseq [signature [[::v/function ::v/function]\n                        [::v/function ::cofunction]\n                        [::cofunction ::v/function]]]\n       (defmethod generic-op signature [a b]\n         (binop a b))))))\n\n(defbinary g/add g/+)\n(defbinary g/sub g/-)\n(defbinary g/mul g/*)\n(defunary g/invert)\n(defbinary g/div g/divide)\n(defbinary g/expt)\n(defunary g/sqrt)\n\n(defunary g/negate)\n(defunary g/negative?)\n(defunary g/abs)\n(defunary g/floor)\n(defunary g/ceiling)\n(defunary g/integer-part)\n(defunary g/fractional-part)\n\n(defbinary g/quotient)\n(defbinary g/remainder)\n(defbinary g/modulo)\n\n(defunary g/sin)\n(defunary g/cos)\n(defunary g/tan)\n(defunary g/asin)\n(defunary g/acos)\n\n(defunary g/atan)\n(defbinary g/atan)\n\n(defunary g/sinh)\n(defunary g/cosh)\n(defunary g/tanh)\n\n(defunary g/square)\n(defunary g/cube)\n\n(defunary g/exp)\n(defunary g/log)\n\n(comment\n  \"This comment expands on a comment from scmutils, function.scm, in the\n  definition of `transpose-defining-relation`:\n\n  $T$ is a linear transformation\n\n  $$T : V -> W$$\n\n  the transpose of $T$ is\n\n  $$T^t : (W -> R) -> (V -> R)$$\n\n  \\\\forall a \\\\in V, g \\\\in (W -> R),\n\n  T^t : g \\\\to g \\\\circ T\n\n  ie:\n\n  (T^t(g))(a) = g(T(a))\")\n(defmethod g/transpose [::v/function] [f]\n  (fn [g]\n    (fn [a]\n      (g (f a)))))\n\n(defunary g/determinant)\n(defunary g/trace)\n\n(defbinary g/gcd)\n(defbinary g/lcm)\n(defbinary g/exact-divide)\n\n(defbinary g/solve-linear)\n(defbinary g/solve-linear-right)\n\n(defunary g/dimension)\n(defbinary g/dot-product)\n(defbinary g/inner-product)\n(defbinary g/outer-product)\n(defbinary g/cross-product)\n\n;; Complex Operations\n\n(defbinary g/make-rectangular)\n(defbinary g/make-polar)\n(defunary g/real-part)\n(defunary g/imag-part)\n(defunary g/magnitude)\n(defunary g/angle)\n(defunary g/conjugate)\n"]}