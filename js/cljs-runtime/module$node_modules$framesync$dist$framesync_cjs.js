shadow$provide.module$node_modules$framesync$dist$framesync_cjs=function(global,require,module,exports){function createRenderStep(runNextFrame){let toRun=[],toRunNextFrame=[],numToRun=0,isProcessing=!1,flushNextFrame=!1;const toKeepAlive=new WeakSet,step={schedule:(callback,keepAlive=!1,immediate=!1)=>{const buffer=(immediate=immediate&&isProcessing)?toRun:toRunNextFrame;keepAlive&&toKeepAlive.add(callback);-1===buffer.indexOf(callback)&&(buffer.push(callback),immediate&&isProcessing&&(numToRun=toRun.length));
return callback},cancel:callback=>{const index=toRunNextFrame.indexOf(callback);-1!==index&&toRunNextFrame.splice(index,1);toKeepAlive.delete(callback)},process:frameData=>{if(isProcessing)flushNextFrame=!0;else{isProcessing=!0;[toRun,toRunNextFrame]=[toRunNextFrame,toRun];toRunNextFrame.length=0;if(numToRun=toRun.length)for(let i=0;i<numToRun;i++){const callback=toRun[i];callback(frameData);toKeepAlive.has(callback)&&(step.schedule(callback),runNextFrame())}isProcessing=!1;flushNextFrame&&(flushNextFrame=
!1,step.process(frameData))}}};return step}Object.defineProperty(exports,"__esModule",{value:!0});const defaultTimestep=1/60*1E3,getCurrentTime="undefined"!==typeof performance?()=>performance.now():()=>Date.now(),onNextFrame="undefined"!==typeof window?callback=>window.requestAnimationFrame(callback):callback=>setTimeout(()=>callback(getCurrentTime()),defaultTimestep);let useDefaultElapsed=!0,runNextFrame=!1,isProcessing=!1;const frame={delta:0,timestamp:0},stepsOrder=["read","update","preRender",
"render","postRender"],steps=stepsOrder.reduce((acc,key)=>{acc[key]=createRenderStep(()=>runNextFrame=!0);return acc},{});global=stepsOrder.reduce((acc,key)=>{const step=steps[key];acc[key]=(process,keepAlive=!1,immediate=!1)=>{runNextFrame||(useDefaultElapsed=runNextFrame=!0,isProcessing||onNextFrame(processFrame));return step.schedule(process,keepAlive,immediate)};return acc},{});require=stepsOrder.reduce((acc,key)=>{acc[key]=steps[key].cancel;return acc},{});module=stepsOrder.reduce((acc,key)=>
{acc[key]=()=>steps[key].process(frame);return acc},{});const processStep=stepId=>steps[stepId].process(frame),processFrame=timestamp=>{runNextFrame=!1;frame.delta=useDefaultElapsed?defaultTimestep:Math.max(Math.min(timestamp-frame.timestamp,40),1);frame.timestamp=timestamp;isProcessing=!0;stepsOrder.forEach(processStep);isProcessing=!1;runNextFrame&&(useDefaultElapsed=!1,onNextFrame(processFrame))};exports.cancelSync=require;exports.default=global;exports.flushSync=module;exports.getFrameData=()=>
frame}
//# sourceMappingURL=module$node_modules$framesync$dist$framesync_cjs.js.map
