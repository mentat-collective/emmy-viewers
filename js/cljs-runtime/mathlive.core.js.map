{"version":3,"sources":["mathlive/core.cljs"],"mappings":"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","names":["mathlive.core/update-options!","mf","opts-or-f","updated","cljs.core/fn?","cljs.core.js__GT_clj","G__103890","cljs.core/map?","js/Error","cljs.core/clj->js","mathlive.core/mathlive-version","mathlive.core/cdn-sounds","mathlive.core/cdn-fonts","mathlive.core/->math-json","var_args","G__103893","mathlive.core/->placeholders","p__103894","map__103898","cljs.core/--destructure-map","cljs.core.get","mathlive.core.__GT_placeholders","type","m","cljs.core.reduce","acc","k","field","mathlive.core.goog$module$goog$object.get","v","cljs.core._EQ_","cljs.core.assoc","cljs.core/js-keys","mathlive.core/math-json->tex","expr","js/module$node_modules$$mentatcollective$mathlive$dist$mathlive_min.serializeMathJsonToLatex","mathlive.core/set-math-json!","mathlive.core/Mathfield","reagent.core/adapt-react-class","js/module$node_modules$react$index.forwardRef","props","ref","vec__103904","cljs.core.nth","map__103907","set-mf","js/module$node_modules$react$index.useState","children","value","options","defaultValue","onChange","soundsDirectory","fontsDirectory","js/module$node_modules$react$index.useEffect","js/console.error","and__4251__auto__","opt-ref","js/module$node_modules$react$index.useRef","cljs.core.not_EQ_","js/module$node_modules$react$index.useImperativeHandle","reagent.core.as_element","cljs.core.dissoc","or__4253__auto__"],"sourcesContent":["(ns mathlive.core\n  \"Reagent component wrapping the `math-field` web component from\n  the [Mathlive](https://cortexjs.io/docs/mathlive) project, along with\n  associated utilities.\"\n  (:require [goog.object :as obj]\n            [reagent.core :as r]\n            [\"@mentatcollective/mathlive\" :as mathl]\n            [\"react\" :as react]))\n\n;; ## Utilities\n\n(defn- update-options!\n  \"Given a `MathfieldElement` `mf` and either a\n\n  - map of keyword-or-string => option\n  - function from current options => new options\n\n  Calls [`mf.setOptions`](https://cortexjs.io/docs/mathlive/#(Mathfield%3Ainterface).setOptions)\n  with\n\n  - `opts-or-f` (if a map) or\n  - the result of `(opts-or-f (.getOptions mf))` if a function.\"\n  [mf opts-or-f]\n  (let [updated (cond\n                  (fn? opts-or-f)\n                  (-> (.getOptions mf)\n                      (js->clj :keywordize-keys true)\n                      (opts-or-f))\n                  (map? opts-or-f) opts-or-f\n                  :else (throw\n                         (js/Error.\n                          (str \"Invalid option for :options.\"\n                               \" must be fn or map.\"))))]\n    (.setOptions mf (clj->js updated))\n    nil))\n\n(def ^{:doc \"Currently loaded version of\nthe [mathlive](https://www.npmjs.com/package/mathlive) npm package. \"}\n  mathlive-version\n  \"0.84.0\"\n  ;; TODO enable this again once we get back to mainline mathlive vs our fork.\n  #_(.-mathlive mathl/version))\n\n(def ^{:doc \"Location of the `sounds` directory in the CDN-served package\n            of [mathlive](https://www.npmjs.com/package/mathlive).\"}\n  cdn-sounds\n  (str \"https://unpkg.com/mathlive@\" mathlive-version \"/dist/sounds/\"))\n\n(def ^{:doc \"Location of the `fonts` directory in the CDN-served package\n            of [mathlive](https://www.npmjs.com/package/mathlive).\"}\n  cdn-fonts\n  (str \"https://unpkg.com/mathlive@\" mathlive-version \"/dist/fonts/\"))\n\n(defn ->math-json\n  \"Given\n  a [`MathfieldElement`](https://cortexjs.io/docs/mathlive/#(MathfieldElement%3Aclass))\n  `mf`, returns a [MathJSON](https://cortexjs.io/math-json/)\n  representation (parsed into Clojure) of the currently displayed expression.\"\n  [mf]\n  (js->clj\n   (.-json ^js (.-expression mf))))\n\n(defn ->placeholders\n  \"Given\n  a [`MathfieldElement`](https://cortexjs.io/docs/mathlive/#(MathfieldElement%3Aclass))\n  `mf`, returns a map of (string) placeholder name => current value of the\n  placeholder.\"\n  ([mf] (->placeholders mf {}))\n  ([mf {:keys [type]\n        :or {type \"latex\"}}]\n   (let [m ^js (.-placeholders mf)]\n     (reduce (fn [acc k]\n               (let [field (obj/get m k)\n                     v (if (= type \"math-json\")\n                         (->math-json field)\n                         (.getValue field type))]\n                 (assoc acc k v)))\n             {}\n             (js-keys m)))))\n\n(defn math-json->tex\n  \"Given a Clojure data structure `expr` representing\n  a [MathJSON](https://cortexjs.io/math-json/) expression, returns a string of\n  LaTeX representing `expr`.\"\n  [expr]\n  (mathl/serializeMathJsonToLatex\n   (clj->js expr)))\n\n(defn set-math-json!\n  \"Given\n\n  - a [`MathfieldElement`](https://cortexjs.io/docs/mathlive/#(MathfieldElement%3Aclass)) `mf` and\n  - a Clojure data structure `expr` representing a [MathJSON](https://cortexjs.io/math-json/) expression,\n\n  sets the value of `mf` to the TeX version of `expr`.\n\n  Equivalent to `(.setValue mf (math-json->tex expr))`.\"\n  [mf expr]\n  (set! ^js (.-expression mf)\n        (clj->js expr)))\n\n;; ## Reagent Component\n;;\n;; This section contains a Reagent component that wraps the `math-field` web\n;; component. You can of course use a `math-field` directly:\n;;\n;; ```\n;; [:math-field {:on-input (fn [x] <do-something>)}\n;;  \"1+x\"]\n;; ```\n;;\n;; This version makes a few changes that I will document soon!\n;;\n;; TODO document changes.\n\n;; - Change to :default-value and :value, log a warning under \"error\" if children are set.\n;; - docs for all of the field things from html, https://cortexjs.io/docs/mathlive/?q=fints-dire, options\n\n\n(def ^{:doc \"Docstring for the Mathfield.\"}\n  Mathfield\n  (r/adapt-react-class\n   (react/forwardRef\n    (fn [props ref]\n      (let [[mf set-mf] (react/useState nil)\n            {:strs [children value options defaultValue onChange\n                    soundsDirectory fontsDirectory] :as props}\n            (js->clj props)]\n\n        ;; These effects run once on initial load (note the empty dependency array).\n        (react/useEffect\n         (fn mount []\n           (when children\n             (js/console.error \"don't set children!\"))\n\n           (when (and defaultValue value)\n             (js/console.error \"don't both value and defaultValue!\")))\n         #js [])\n\n        ;; NOTE this tricky thing, don't use \"options\" since that changes every\n        ;; time! This effect notes if any properties change; this matters if you\n        ;; allow the user to provide a map.\n        (let [opt-ref (react/useRef options)]\n          (when (not= (.-current opt-ref) options)\n            (set! (.-current opt-ref) options))\n\n          (react/useEffect\n           (fn mount []\n             (when (and mf options)\n               (update-options! mf options)))\n           #js [(.-current opt-ref) mf]))\n\n        (react/useEffect\n         (fn []\n           (when (and mf value (not= (.getValue mf) value))\n             (.setValue mf value)))\n         #js [mf value])\n\n        ;; For whatever reason, when the component is controlled, the component\n        ;; can't move its own cursor position well. So this handles the odd case\n        ;; at the very beginning...\n        (react/useEffect\n         (fn []\n           (when (and mf\n                      (.endsWith (.getValue mf) \"?\")\n                      (= 2 (.-position mf)))\n             (.executeCommand ^js mf \"moveToPreviousWord\"))))\n\n        ;; this passes `mf`back out as reference when it changes.\n        (react/useImperativeHandle ref (fn [] mf))\n\n        (r/as-element\n         [:math-field\n          (assoc (dissoc props \"onChange\" \"defaultValue\" \"value\" \"options\")\n                 \"children\" (or value defaultValue \"\")\n                 \"ref\" set-mf\n                 \"onInput\" onChange\n                 \"sounds-directory\" (or soundsDirectory cdn-sounds)\n                 \"fonts-directory\" (or fontsDirectory cdn-fonts))]))))))\n"]}