{"version":3,"sources":["rewrite_clj/node/coercer.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","rewrite-clj.node.whitespace/CommaNode","v","rewrite-clj.node.comment/CommentNode","rewrite-clj.node.reader-macro/DerefNode","rewrite-clj.node.fn/FnNode","rewrite-clj.node.forms/FormsNode","rewrite-clj.node.integer/IntNode","rewrite-clj.node.keyword/KeywordNode","rewrite-clj.node.namespaced-map/MapQualifierNode","rewrite-clj.node.meta/MetaNode","rewrite-clj.node.namespaced-map/NamespacedMapNode","rewrite-clj.node.whitespace/NewlineNode","rewrite-clj.node.quote/QuoteNode","rewrite-clj.node.reader-macro/ReaderMacroNode","rewrite-clj.node.reader-macro/ReaderNode","rewrite-clj.node.regex/RegexNode","rewrite-clj.node.seq/SeqNode","rewrite-clj.node.stringz/StringNode","rewrite-clj.node.token/SymbolNode","rewrite-clj.node.token/TokenNode","rewrite-clj.node.uneval/UnevalNode","rewrite-clj.node.whitespace/WhitespaceNode","rewrite-clj.node.coercer/split-to-lines","s","clojure.string/escape","lines","temp__5751__auto__","m","cljs.core/first","cljs.core/re-find","eol-ndx","clojure.string.index_of","cljs.core.subs","cljs.core/count","cljs.core.conj","rewrite-clj.node.coercer/node-with-meta","n","value","cljs.core/native-satisfies?","cljs.core/IWithMeta","mta","rewrite-clj.node.protocols/meta-elided","cljs.core/empty?","rewrite_clj.node.meta.meta_node","rewrite-clj.node.protocols/coerce","comma","rewrite-clj.node.whitespace/whitespace-nodes","space","rewrite-clj.node.whitespace/whitespace-node","rewrite-clj.node.coercer/map->children","cljs.core.mapcat","p__75116","vec__75117","cljs.core.nth","k","cljs.core.list_STAR_","cljs.core.drop_last","cljs.core/vec","rewrite-clj.node.coercer/record-node","rewrite_clj.node.reader_macro.reader_macro_node","rewrite_clj.node.token.token_node","cljs.core.pr_str","cljs.core.symbol","rewrite-clj.node.seq/map-node","rewrite-clj.node.coercer/create-map-node","children","cljs.core/Keyword","rewrite_clj.node.keyword.keyword_node","rewrite-clj.node.protocols/NodeCoerceable","rewrite-clj.node.stringz/string-node","cljs.core/record?","_v","js/RegExp","rewrite-clj.node.regex/regex-node","rewrite-clj.node.regex/pattern-string-for-regex","rewrite-clj.node.coercer/seq-node","f","sq","cljs.core.map","rewrite-clj.node.whitespace/space-separated","G__75139","cljs.core/PersistentVector","rewrite-clj.node.seq/vector-node","cljs.core/List","rewrite-clj.node.seq/list-node","cljs.core/Cons","cljs.core/PersistentHashSet","rewrite-clj.node.seq/set-node","cljs.core/EmptyList","cljs.core/PersistentHashMap","cljs.core/PersistentArrayMap","cljs.core/Var","rewrite-clj.node.reader-macro/var-node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.coercer\n  \"Notes:\n   - Coercion of records handled specially due different behaviors on different JVMs.\n     Must be in equality of specificity of in our protocol extensions.\n\n     From https://clojure.org/reference/protocols:\n\n       if one interface is derived from the other, the more derived is used,\n       else which one is used is unspecified\"\n  (:require\n   [clojure.string :as string]\n   #?@(:clj\n       [[rewrite-clj.node.comment]\n        [rewrite-clj.node.fn]\n        [rewrite-clj.node.forms]\n        [rewrite-clj.node.integer]\n        [rewrite-clj.node.keyword :refer [keyword-node]]\n        [rewrite-clj.node.meta :refer [meta-node]]\n        [rewrite-clj.node.namespaced-map]\n        [rewrite-clj.node.protocols :as node :refer [NodeCoerceable coerce]]\n        [rewrite-clj.node.quote]\n        [rewrite-clj.node.reader-macro :refer [reader-macro-node var-node]]\n        [rewrite-clj.node.regex :refer [regex-node pattern-string-for-regex]]\n        [rewrite-clj.node.seq :refer [vector-node list-node set-node map-node]]\n        [rewrite-clj.node.stringz :refer [string-node]]\n        [rewrite-clj.node.token :refer [token-node]]\n        [rewrite-clj.node.uneval]\n        [rewrite-clj.node.whitespace :as ws]]\n       :cljs\n       [[rewrite-clj.node.comment :refer [CommentNode]]\n        [rewrite-clj.node.fn :refer [FnNode]]\n        [rewrite-clj.node.forms :refer [FormsNode]]\n        [rewrite-clj.node.integer :refer [IntNode]]\n        [rewrite-clj.node.keyword :refer [KeywordNode keyword-node]]\n        [rewrite-clj.node.meta :refer [MetaNode meta-node]]\n        [rewrite-clj.node.namespaced-map :refer [NamespacedMapNode MapQualifierNode]]\n        [rewrite-clj.node.protocols :as node :refer [NodeCoerceable coerce]]\n        [rewrite-clj.node.quote :refer [QuoteNode]]\n        [rewrite-clj.node.reader-macro :refer [ReaderNode ReaderMacroNode DerefNode reader-macro-node var-node]]\n        [rewrite-clj.node.regex :refer [RegexNode regex-node pattern-string-for-regex]]\n        [rewrite-clj.node.seq :refer [SeqNode vector-node list-node set-node map-node]]\n        [rewrite-clj.node.stringz :refer [StringNode string-node]]\n        [rewrite-clj.node.token :refer [TokenNode SymbolNode token-node]]\n        [rewrite-clj.node.uneval :refer [UnevalNode]]\n        [rewrite-clj.node.whitespace :refer [WhitespaceNode CommaNode NewlineNode] :as ws]]))\n  #?(:clj\n     (:import [rewrite_clj.node.comment CommentNode]\n              [rewrite_clj.node.fn FnNode]\n              [rewrite_clj.node.forms FormsNode]\n              [rewrite_clj.node.integer IntNode]\n              [rewrite_clj.node.keyword KeywordNode]\n              [rewrite_clj.node.meta MetaNode]\n              [rewrite_clj.node.namespaced_map NamespacedMapNode MapQualifierNode]\n              [rewrite_clj.node.quote QuoteNode]\n              [rewrite_clj.node.reader_macro ReaderNode ReaderMacroNode DerefNode]\n              [rewrite_clj.node.regex RegexNode]\n              [rewrite_clj.node.seq SeqNode]\n              [rewrite_clj.node.stringz StringNode]\n              [rewrite_clj.node.token TokenNode SymbolNode]\n              [rewrite_clj.node.uneval UnevalNode]\n              [rewrite_clj.node.whitespace WhitespaceNode CommaNode NewlineNode])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n\n;; ## Rewrite-clj nodes coerce to themselves\n;; It is important that all rewrite-clj nodes be specified, else we'll coerce them to records\n(extend-protocol NodeCoerceable\n  CommaNode          (coerce [v] v)\n  CommentNode        (coerce [v] v)\n  DerefNode          (coerce [v] v)\n  FnNode             (coerce [v] v)\n  FormsNode          (coerce [v] v)\n  IntNode            (coerce [v] v)\n  KeywordNode        (coerce [v] v)\n  MapQualifierNode   (coerce [v] v)\n  MetaNode           (coerce [v] v)\n  NamespacedMapNode  (coerce [v] v)\n  NewlineNode        (coerce [v] v)\n  QuoteNode          (coerce [v] v)\n  ReaderMacroNode    (coerce [v] v)\n  ReaderNode         (coerce [v] v)\n  RegexNode          (coerce [v] v)\n  SeqNode            (coerce [v] v)\n  StringNode         (coerce [v] v)\n  SymbolNode         (coerce [v] v)\n  TokenNode          (coerce [v] v)\n  UnevalNode         (coerce [v] v)\n  WhitespaceNode     (coerce [v] v))\n\n;; ## Helpers\n\n(defn- split-to-lines\n  \"Slightly different than string/split-lines in that:\n   - escape inline double quotes (to emulate the clojure reader)\n   - includes all lines even if empty\n   - behaves the same on clj and cljs\"\n  [s]\n  (loop [s (string/escape s {\\\" \"\\\\\\\"\"})\n         lines []]\n    (if-let [m (first (re-find #\"(\\r\\n|\\r|\\n)\" s))]\n      (let [eol-ndx (string/index-of s m)]\n        (recur (subs s (+ eol-ndx (count m)))\n               (conj lines (subs s 0 eol-ndx))))\n      (conj lines s))))\n\n(defn node-with-meta\n  [n value]\n  (if #?(:clj (instance? clojure.lang.IMeta value)\n         :cljs (satisfies? IWithMeta value))\n    (let [mta (node/meta-elided value)]\n      (if (empty? mta)\n        n\n        (meta-node (coerce mta) n)))\n    n))\n\n(let [comma (ws/whitespace-nodes \", \")\n      space (ws/whitespace-node \" \")]\n  (defn- map->children\n    [m]\n    (->> (mapcat\n          (fn [[k v]]\n            (list* (coerce k) space (coerce v) comma))\n          m)\n         (drop-last (count comma))\n         (vec))))\n\n(defn- record-node\n  [m]\n  (reader-macro-node\n   [(token-node #?(:clj (symbol (.getName ^Class (class m)))\n                   :cljs ;; this is a bit hacky, but is one way of preserving original name\n                   ;; under advanced cljs optimizations\n                   (let [s (pr-str m)]\n                     (symbol (subs s 1 (string/index-of s \"{\"))))))\n    (map-node (map->children m))]))\n\n(defn- create-map-node [children]\n  (node-with-meta\n   (map-node (map->children children))\n   children))\n\n;; ## Tokens (and special case for record for cljs)\n\n(extend-protocol NodeCoerceable\n  #?(:clj clojure.lang.Keyword :cljs Keyword)\n  (coerce [v]\n    (keyword-node v)))\n\n(extend-protocol NodeCoerceable\n  #?(:clj java.lang.String :cljs string)\n  (coerce [v]\n    (string-node (split-to-lines v))))\n\n#?(:clj\n   (extend-protocol NodeCoerceable\n     Object\n     (coerce [v]\n       (node-with-meta\n        (token-node v)\n        v)))\n   :cljs\n   (extend-protocol NodeCoerceable\n     default\n     (coerce [v]\n       (node-with-meta\n        ;; in cljs, this is where we check for a record, in clj it happens under map handling\n        (if (record? v)\n          (record-node v)\n          (token-node v))\n        v))))\n\n(extend-protocol NodeCoerceable\n  nil\n  (coerce [_v]\n    (token-node nil)))\n\n;; ## Regex\n\n(extend-protocol NodeCoerceable\n  #?(:clj java.util.regex.Pattern :cljs js/RegExp)\n  (coerce [v]\n    (regex-node (pattern-string-for-regex v))))\n\n;; ## Seqs\n\n(defn- seq-node\n  [f sq]\n  (node-with-meta\n    (->> (map coerce sq)\n         (ws/space-separated)\n         (vec)\n         (f))\n    sq))\n\n(extend-protocol NodeCoerceable\n  #?(:clj clojure.lang.IPersistentVector :cljs PersistentVector)\n  (coerce [sq]\n    (seq-node vector-node sq))\n  #?(:clj clojure.lang.IPersistentList :cljs List)\n  (coerce [sq]\n    (seq-node list-node sq))\n  #?(:clj clojure.lang.Cons :cljs Cons)\n  (coerce [sq]\n    (seq-node list-node sq))\n  #?(:clj clojure.lang.IPersistentSet :cljs PersistentHashSet)\n  (coerce [sq]\n    (seq-node set-node sq)))\n\n#?(:cljs\n   ;; cljs empty list is special\n   (extend-protocol NodeCoerceable\n     EmptyList\n     (coerce [sq]\n       (seq-node list-node sq))))\n\n;; ## Maps\n\n#?(:clj\n   (extend-protocol NodeCoerceable\n     clojure.lang.IPersistentMap\n     (coerce [m]\n       (if (record? m)\n         (node-with-meta (record-node m) m)\n         (create-map-node m))))\n   :cljs\n   (do\n     (extend-protocol NodeCoerceable\n       PersistentHashMap\n       (coerce [m] (create-map-node m)))\n     (extend-protocol NodeCoerceable\n       PersistentArrayMap\n       (coerce [m] (create-map-node m)))))\n\n;; ## Vars\n\n(extend-protocol NodeCoerceable\n  #?(:clj clojure.lang.Var :cljs Var)\n  (coerce [v]\n    (-> (str v)\n        (subs 2)\n        (symbol)\n        (token-node)\n        (vector)\n        (var-node))))\n"]}