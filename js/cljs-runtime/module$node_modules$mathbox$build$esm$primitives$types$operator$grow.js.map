{
"version":3,
"file":"module$node_modules$mathbox$build$esm$primitives$types$operator$grow.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/mathbox/build/esm/primitives/types/operator/grow.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathbox$build$esm$primitives$types$operator$grow\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grow = void 0;\n\nvar _operator = require(\"./operator.js\");\n\n// TODO: This file was created by bulk-decaffeinate.\n// Sanity-check the conversion and remove this comment.\n\n/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS206: Consider reworking classes to avoid initClass\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass Grow extends _operator.Operator {\n  static initClass() {\n    this.traits = [\"node\", \"bind\", \"operator\", \"source\", \"index\", \"grow\"];\n  }\n\n  sourceShader(shader) {\n    return shader.pipe(this.operator);\n  }\n\n  make() {\n    super.make();\n\n    if (this.bind.source == null) {\n      return;\n    } // Uniforms\n\n\n    const uniforms = {\n      growScale: this.node.attributes[\"grow.scale\"],\n      growMask: this._attributes.make(this._types.vec4()),\n      growAnchor: this._attributes.make(this._types.vec4())\n    };\n    this.growMask = uniforms.growMask.value;\n    this.growAnchor = uniforms.growAnchor.value; // Build shader to spread data on one dimension\n\n    const transform = this._shaders.shader();\n\n    transform.require(this.bind.source.sourceShader(this._shaders.shader()));\n\n    transform.pipe(\"grow.position\", uniforms);\n    return this.operator = transform;\n  }\n\n  unmake() {\n    return super.unmake();\n  }\n\n  resize() {\n    this.update();\n    return super.resize();\n  }\n\n  update() {\n    // Size to fit to include future history\n    const dims = this.bind.source.getFutureDimensions();\n    const order = [\"width\", \"height\", \"depth\", \"items\"];\n\n    const m = (d, anchor) => ((d || 1) - 1) * (0.5 - anchor * 0.5);\n\n    return (() => {\n      const result = [];\n\n      for (let i = 0; i < order.length; i++) {\n        const key = order[i];\n        const anchor = this.props[key];\n        this.growMask.setComponent(i, +(anchor == null));\n        result.push(this.growAnchor.setComponent(i, anchor != null ? m(dims[key], anchor) : 0));\n      }\n\n      return result;\n    })();\n  }\n\n  change(changed, touched, _init) {\n    if (touched[\"operator\"]) {\n      return this.rebuild();\n    }\n\n    if (touched[\"grow\"]) {\n      return this.update();\n    }\n  }\n\n}\n\nexports.Grow = Grow;\nGrow.initClass();\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Grow","_operator","Operator","initClass","traits","sourceShader","shader","pipe","operator","make","bind","source","uniforms","growScale","node","attributes","growMask","_attributes","_types","vec4","growAnchor","transform","_shaders","unmake","resize","update","dims","getFutureDimensions","order","result","i","length","key","anchor","props","setComponent","push","d","change","changed","touched","_init","rebuild"]
}
