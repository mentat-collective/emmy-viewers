{
"version":3,
"file":"module$node_modules$three$src$renderers$webgl$WebGLBufferRenderer.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,mBAAR,CAEAA,QAA4B,CAACC,EAAD,CAAKC,UAAL,CAAiBC,IAAjB,CAAuBC,YAAvB,CAAqC,CAC/D,MAAMC,SAAWD,YAAaC,CAAAA,QAC9B,KAAIC,IAiCJ,KAAKC,CAAAA,OAAL,CA/BAA,QAAgB,CAACR,KAAD,CAAQ,CACtBO,IAAA,CAAOP,KADe,CAgCxB,KAAKS,CAAAA,MAAL,CA5BAA,QAAe,CAACC,KAAD,CAAQC,KAAR,CAAe,CAC5BT,EAAGU,CAAAA,UAAH,CAAcL,IAAd,CAAoBG,KAApB,CAA2BC,KAA3B,CACAP,KAAKS,CAAAA,MAAL,CAAYF,KAAZ,CAAmBJ,IAAnB,CAAyB,CAAzB,CAF4B,CA6B9B,KAAKO,CAAAA,eAAL,CAxBAA,QAAwB,CAACJ,KAAD,CAAQC,KAAR,CAAeI,SAAf,CAA0B,CAChD,GAAkB,CAAlB,GAAIA,SAAJ,CAAA,CAGA,GAAIT,QAAJ,CAAc,CACZ,IAAAU;AAAYd,EACZ,KAAAe,WAAa,qBAFD,CAAd,IAOE,IAHAD,SAGI,CAHQb,UAAWe,CAAAA,GAAX,CAAe,wBAAf,CAGR,CAFJD,UAEI,CAFS,0BAET,CAAc,IAAd,GAAAD,SAAJ,CAAwB,CACtBG,OAAQC,CAAAA,KAAR,CAAc,gIAAd,CACA,OAFsB,CAM1BJ,SAAA,CAAUC,UAAV,CAAA,CAAsBV,IAAtB,CAA4BG,KAA5B,CAAmCC,KAAnC,CAA0CI,SAA1C,CACAX,KAAKS,CAAAA,MAAL,CAAYF,KAAZ,CAAmBJ,IAAnB,CAAyBQ,SAAzB,CAjBA,CADgD,CAba,CAR6D;",
"sources":["node_modules/three/src/renderers/webgl/WebGLBufferRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$renderers$webgl$WebGLBufferRenderer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLBufferRenderer = WebGLBufferRenderer;\n\nfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n  const isWebGL2 = capabilities.isWebGL2;\n  let mode;\n\n  function setMode(value) {\n    mode = value;\n  }\n\n  function render(start, count) {\n    gl.drawArrays(mode, start, count);\n    info.update(count, mode, 1);\n  }\n\n  function renderInstances(start, count, primcount) {\n    if (primcount === 0) return;\n    let extension, methodName;\n\n    if (isWebGL2) {\n      extension = gl;\n      methodName = 'drawArraysInstanced';\n    } else {\n      extension = extensions.get('ANGLE_instanced_arrays');\n      methodName = 'drawArraysInstancedANGLE';\n\n      if (extension === null) {\n        console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n        return;\n      }\n    }\n\n    extension[methodName](mode, start, count, primcount);\n    info.update(count, mode, primcount);\n  } //\n\n\n  this.setMode = setMode;\n  this.render = render;\n  this.renderInstances = renderInstances;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebGLBufferRenderer","gl","extensions","info","capabilities","isWebGL2","mode","setMode","render","start","count","drawArrays","update","renderInstances","primcount","extension","methodName","get","console","error"]
}
