{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_block$paragraph.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAMtHD,MAAOC,CAAAA,OAAP,CAAiBC,QAAkB,CAACC,KAAD,CAAQC,SAAR,CAAgC,CAAA,IACtCC,CACvBC,KAAAA,MAAWF,SAAXE,CAAuB,CAFsC,KAG7DC,gBAAkBJ,KAAMK,CAAAA,EAAGC,CAAAA,KAAMC,CAAAA,KAAMC,CAAAA,QAArB,CAA8B,WAA9B,CAH2C,CAI7DC,QAAUT,KAAMU,CAAAA,OAEpB,KAAAC,cAAgBX,KAAMY,CAAAA,UAItB,KAHAZ,KAAMY,CAAAA,UAGN,CAHmB,WAGnB,CAAOT,KAAP,CAAkBM,OAAlB,EAA6B,CAACT,KAAMa,CAAAA,OAAN,CAAcV,KAAd,CAA9B,CAAuDA,KAAA,EAAvD,CAGE,GAAI,EAA2C,CAA3C,CAAAH,KAAMc,CAAAA,MAAN,CAAaX,KAAb,CAAA,CAAyBH,KAAMe,CAAAA,SAA/B,EAGyB,CAHzB,CAGAf,KAAMc,CAAAA,MAAN,CAAaX,KAAb,CAHA,CAAJ,CAGA,CAGA,IAAAa,QAAY,CAAA,CACP,KAAAC,EAAI,CAAT,KAAYf,CAAZ,CAAgBE,eAAgBc,CAAAA,MAAhC,CAAwCD,CAAxC;AAA4Cf,CAA5C,CAA+Ce,CAAA,EAA/C,CACE,GAAIb,eAAA,CAAgBa,CAAhB,CAAA,CAAmBjB,KAAnB,CAA0BG,KAA1B,CAAoCM,OAApC,CAA6C,CAAA,CAA7C,CAAJ,CAAwD,CACtDO,OAAA,CAAY,CAAA,CACZ,MAFsD,CAK1D,GAAIA,OAAJ,CAAiB,KAVjB,CAaFG,OAAA,CAAUnB,KAAMoB,CAAAA,QAAN,CAAenB,SAAf,CAA0BE,KAA1B,CAAoCH,KAAMe,CAAAA,SAA1C,CAAqD,CAAA,CAArD,CAA4DM,CAAAA,IAA5D,EAEVrB,MAAMsB,CAAAA,IAAN,CAAanB,KAEboB,MAAA,CAAiBvB,KAAMwB,CAAAA,IAAN,CAAW,gBAAX,CAA6B,GAA7B,CAAkC,CAAlC,CACjBD,MAAME,CAAAA,GAAN,CAAiB,CAAExB,SAAF,CAAaD,KAAMsB,CAAAA,IAAnB,CAEjBC,MAAA,CAAiBvB,KAAMwB,CAAAA,IAAN,CAAW,QAAX,CAAqB,EAArB,CAAyB,CAAzB,CACjBD,MAAMJ,CAAAA,OAAN,CAAiBA,OACjBI,MAAME,CAAAA,GAAN,CAAiB,CAAExB,SAAF,CAAaD,KAAMsB,CAAAA,IAAnB,CACjBC,MAAMG,CAAAA,QAAN,CAAiB,EAEA1B,MAAMwB,CAAAA,IAAN,CAAW,iBAAX,CAA8B,GAA9B,CAAmC,CAAC,CAApC,CAEjBxB,MAAMY,CAAAA,UAAN,CAAmBD,aAEnB,OAAO,CAAA,CA7C0D,CANmD;",
"sources":["node_modules/markdown-it/lib/rules_block/paragraph.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_block$paragraph\"] = function(global,require,module,exports) {\n// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","state","startLine","l","nextLine","terminatorRules","md","block","ruler","getRules","endLine","lineMax","oldParentType","parentType","isEmpty","sCount","blkIndent","terminate","i","length","content","getLines","trim","line","token","push","map","children"]
}
