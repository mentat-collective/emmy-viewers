{"version":3,"sources":["sicmutils/collection.cljc"],"mappings":";AAyBA,AAAAA,uEAAA,sHAAA,nCAAuBC,8CAAmBC;AAA1C,AACE,OAACC,6CAAKH,2BAAWE;;AAEnB,AAAA,CAAA,AAAA,8DAAAE,9DAA6CH;;AAA7C,CAAA,AAAA,AAA6CA,iFAE3C,WAAQC;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAW,OAACG,uBAAOC,4BAAQJ;;;AAF7B,CAAA,AAAA,AAA6CD,gFAG3C,WAAOM;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAA;;;AAHF,CAAA,AAAA,AAA6CN,qFAI3C,WAAYM;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;AAJF,CAAA,AAAA,AAA6CN,+EAK3C,WAAYC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAe,OAACC,6CAAKK,0BAAYN;;;AALnC,CAAA,AAAA,AAA6CD,8EAM3C,WAAWM;AAAX,AAAA,YAAA,RAAWA;AAAX,AAAA;;;AANF,CAAA,AAAA,AAA6CN,mFAO3C,WAAgBM;AAAhB,AAAA,YAAA,RAAgBA;AAAhB,AAAA;;;AAPF,CAAA,AAAA,AAA6CN,kFAQ3C,WAASC;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACG,uBAAOI,6BAASP;;;AAR/B,CAAA,AAAA,AAA6CD,4EAS3C,WAASC;AAAT,AAAA,YAAA,RAASA;AAAT,AAAA,OAAAQ,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,OAAqB,AAACC,4CAAIC,uBAASb;;;AATrC,CAAA,AAAA,AAA6CD,0EAU3C,WAAOC;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAU,OAACc,eAAKd;;;AAVlB,CAAA,AAAA,kEAAAE,lEAA6CH;;AAA7C,CAAA,AAAA,AAA6CA,+EAkB3C,WAAQM;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAA,0FAAA,2DAAA,IAAA;;;AAlBF,CAAA,AAAA,0EAAAH,1EAA6CH;;AAA7C,CAAA,AAAA,AAA6CA,kGAwB3C,WAAaC;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAgB,OAACe,mBAAQ,AAACC,eAAKC,wCAAajB;;;AAxB9C,CAAA,AAAA,AAA6CD,6FAyB3C,WAAcC,EAAEkB,IAAIC;AAApB,AAAA,YAAA,RAAcnB;AAAd,AAAyB,oDAAA,WAAAoB,xDAACnB;AAAD,AAAO,0CAAAmB,nCAACC,oDAAgBH,IAAIC;GAAKnB;;;AAzB5D,CAAA,AAAA,AAA6CD,iGA0B3C,WAAkBC,EAAEsB;AAApB,AAAA,YAAA,RAAkBtB;AAAlB,AAAyB,oDAAA,WAAAuB,xDAACtB;AAAD,AAAO,8CAAAsB,vCAACC,wDAAoBF;GAAKtB;;AAQ5D,AAAAF,uEAAA,mHAAA,hCAAuB2B,2CAAYC;AAAnC,AACE,OAACd,4CAAId,2BAAW4B;;AAGlB,IAAAC,mBAAA,AAAAlB,cAAA,mFAC0B+B,eAAKC,qBAAWC,kBAAQ/B,eAAKgC,gBAAMC;IAD7DhB,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,kBAAA,AAAAD,wDAAAE,tEACmBS;AADnB,AAAA,AAEC,AAAA,CAAA,AAAA,+CAAArC,/CAAgCqC;;AAAhC,CAAA,AAAA,AAAgCA,kEAE9B;kBAAQlC;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAA;;;;AAFF,CAAA,AAAA,AAAgCkC,iEAG9B;kBAAOlC;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAA;;;;AAHF,CAAA,AAAA,AAAgCkC,sEAI9B;kBAAYlC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;;AAJF,CAAA,AAAA,AAAgCkC,gEAK9B;kBAAYM;AAAZ,AAAA,aAAA,TAAYA;AAAZ,AAAgB,OAACjC,4CAAIN,0BAAYuC;;;;AALnC,CAAA,AAAA,AAAgCN,+DAM9B;kBAAWM;AAAX,AAAA,aAAA,TAAWA;AAAX,AAAe,OAACC,2BAAc,CAAA,yDAAkBD;;;;AANlD,CAAA,AAAA,AAAgCN,oEAO9B;kBAAgBM;AAAhB,AAAA,aAAA,TAAgBA;AAAhB,AAAoB,OAACC,2BAAc,CAAA,8DAAuBD;;;;AAP5D,CAAA,AAAA,AAAgCN,mEAQ9B;kBAASlC;AAAT,AAAA,YAAA,RAASA;AAAT,AAAA;;;;AARF,CAAA,AAAA,AAAgCkC,6DAS9B;kBAASM;AAAT,AAAA,aAAA,TAASA;AAAT,AAAa,OAACjC,4CAAIC,uBAASgC;;;;AAT7B,CAAA,AAAA,AAAgCN,2DAU9B;kBAAOM;AAAP,AAAA,aAAA,TAAOA;AAAP,AAAW,OAAC/B,eAAK+B;;;;AAVnB,CAAA,AAAA,2DAAA3C,3DAAgCqC;;AAAhC,CAAA,AAAA,AAAgCA,mFAa9B;kBAAalC;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAA;;;;AAbF,CAAA,AAAA,AAAgCkC,8EAc9B;kBAAcM,GAAG3B,IAAIC;AAArB,AAAA,aAAA,TAAc0B;AAAd,AAA0B,mDAAA,5CAACjC;kBAADmC;AAAA,AAAM,0CAAAA,nCAAC1B,oDAAgBH,IAAIC;;CAAK0B;;;;AAd5D,CAAA,AAAA,AAAgCN,kFAe9B;kBAAkBM,GAAGvB;AAArB,AAAA,aAAA,TAAkBuB;AAAlB,AAA0B,mDAAA,5CAACjC;kBAADoC;AAAA,AAAM,8CAAAA,vCAACxB,wDAAoBF;;CAAKuB;;;;AAjB7D;AAAA,eAAAlB;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAtB,cAAAkB;AAAA,AAAA,GAAAI;AAAA,AAAA,IAAAJ,uBAAAI;AAAA,AAAA,GAAA,AAAAC,6BAAAL;AAAA,IAAAM,wBAAA,AAAAC,sBAAAP;AAAA,AAAA,eAAA,AAAAQ,qBAAAR;eAAAM;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,kBAAA,AAAAI,gBAAAV,9BACmBY;AADnB,AAAA,AAEC,AAAA,CAAA,AAAA,+CAAArC,/CAAgCqC;;AAAhC,CAAA,AAAA,AAAgCA,kEAE9B;kBAAQlC;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAA;;;;AAFF,CAAA,AAAA,AAAgCkC,iEAG9B;kBAAOlC;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAA;;;;AAHF,CAAA,AAAA,AAAgCkC,sEAI9B;kBAAYlC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;;AAJF,CAAA,AAAA,AAAgCkC,gEAK9B;kBAAYM;AAAZ,AAAA,aAAA,TAAYA;AAAZ,AAAgB,OAACjC,4CAAIN,0BAAYuC;;;;AALnC,CAAA,AAAA,AAAgCN,+DAM9B;kBAAWM;AAAX,AAAA,aAAA,TAAWA;AAAX,AAAe,OAACC,2BAAc,CAAA,yDAAkBD;;;;AANlD,CAAA,AAAA,AAAgCN,oEAO9B;kBAAgBM;AAAhB,AAAA,aAAA,TAAgBA;AAAhB,AAAoB,OAACC,2BAAc,CAAA,8DAAuBD;;;;AAP5D,CAAA,AAAA,AAAgCN,mEAQ9B;kBAASlC;AAAT,AAAA,YAAA,RAASA;AAAT,AAAA;;;;AARF,CAAA,AAAA,AAAgCkC,6DAS9B;kBAASM;AAAT,AAAA,aAAA,TAASA;AAAT,AAAa,OAACjC,4CAAIC,uBAASgC;;;;AAT7B,CAAA,AAAA,AAAgCN,2DAU9B;kBAAOM;AAAP,AAAA,aAAA,TAAOA;AAAP,AAAW,OAAC/B,eAAK+B;;;;AAVnB,CAAA,AAAA,2DAAA3C,3DAAgCqC;;AAAhC,CAAA,AAAA,AAAgCA,mFAa9B;kBAAalC;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAA;;;;AAbF,CAAA,AAAA,AAAgCkC,8EAc9B;kBAAcM,GAAG3B,IAAIC;AAArB,AAAA,aAAA,TAAc0B;AAAd,AAA0B,mDAAA,5CAACjC;kBAADmC;AAAA,AAAM,0CAAAA,nCAAC1B,oDAAgBH,IAAIC;;CAAK0B;;;;AAd5D,CAAA,AAAA,AAAgCN,kFAe9B;kBAAkBM,GAAGvB;AAArB,AAAA,aAAA,TAAkBuB;AAAlB,AAA0B,mDAAA,5CAACjC;kBAADoC;AAAA,AAAM,8CAAAA,vCAACxB,wDAAoBF;;CAAKuB;;;;AAjB7D;AAAA,eAAA,AAAAP,eAAAX;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAiCG,AACE,2EAAA,3EAACsB,+CAAOC;;AACR,4EAAA,5EAACD,+CAAOE;;AACR,2EAAA,3EAACF,+CAAOG;AAEb,AAAAC,qEAAA,mFAAA,kGAAA,WAA6BC;AAA7B,AACE,OAACC,wBAAWF,yBAASC;;AAEvB,AAAAE,kEAAA,mFAAA,0FAAA,kGAAA,WAAgC9B,EAAE+B;AAAlC,AACE,OAACC,0DAAWF,wEAAM9B,EAAE+B;;AAEtB,AAAAE,kEAAA,mFAAA,0FAAA,kGAAA,WAAgCjC,EAAE+B;AAAlC,AACE,OAACC,0DAAWF,wEAAM9B,EAAE,AAAC6B,wBAAWF,yBAASI;;AAE3C,AAAAG,kEAAA,mFAAA,0FAAA,8FAAA,WAAqCN,EAAEO;AAAvC,AACE,+BAAA,WAAAC,nCAACP;AAAD,AAAa,2DAAAO,pDAACF,qEAAQC;GAAGP;;AAE3B,AAAAM,kEAAA,mFAAA,sFAAA,kGAAA,WAAqCC,EAAEP;AAAvC,AACE,+BAAA,WAAAS,nCAACR;AAAD,AAAa,6DAAAQ,tDAACH,oDAAMC;GAAKP;;AAE3B,AAAAU,kEAAA,mFAAA,0FAAA,8FAAA,WAAqCV,EAAEO;AAAvC,AACE,+BAAA,WAAAI,nCAACV;AAAD,AAAa,2DAAAU,pDAACD,qEAAQH;GAAGP;;AAE3B,+BAAA,/BAAOY,sEAASC,EAAEC,GAAGC,GAAGC;AAAxB,AACE,kBAAA,qDAAsBhB,EAAEiB;AAAxB,AACO,IAAMC,IAAE,AAACC,cAAIF;IACJvE,IAAE,AAAC0E,cAAIH;AADhB,AAEE,OAACI,8CAAMrB,EAAEkB,EAAE,iBAAAI,WAAG,AAACE,4CAAIxB,EAAEkB,EAAEF;IAAZO,WAAuB7E;AAAvB,AAAA,0EAAA4E,SAAAC,wBAAAD,SAAAC,5GAACV,kCAAAA,qDAAAA;;;AAHrB,AAIE,OAACY,+CAAOC,YAAYZ,GAAG,AAAC3D,cAAI4D;;AAEhC,AAAAY,+EAAA,mFAAA,0FAAA,kGAAA,WAA6Cb,GAAGC;AAAhD,AACE,6EAAA,tEAACH,6BAAQe,mCAAmBb,GAAGC;;AAEjC,AAAAa,yEAAA,mFAAA,0FAAA,kGAAA,WAAuCd,GAAGC;AAA1C,AACE,uEAAA,hEAACH,6BAAQgB,6BAAad,GAAGC;;AAE3B,AAAAc,wEAAA,mFAAA,kGAAA,WAAgC7B;AAAhC,AACE,OAACC,wBAAW4B,4BAAY7B;;AAE1B,AAAA8B,wEAAA,mFAAA,kGAAA,WAAgC9B;AAAhC,AACE,OAACC,wBAAW6B,4BAAY9B;;AAE1B,AAAAxD,uEAAA,mFAAA,kGAAA,WAA+BwD;AAA/B,AACE,OAACC,wBAAWzD,2BAAWwD;;AAEzB,IAAM+B,iBAAkB,KAAAC;AAAxB,AAEE,AAAAC,iEAAA,mFAAA,0FAAA,kGAAA,WAA8B1B,EAAE2B;AAAhC,AACE,OAACzE,mBACA,+CAAA,7CAAM,CAAI,AAACqB,gBAAMyB,OAAG,AAACzB,gBAAMoD,KACzB,AAACC,oBACA,WAAKpF,EAAEmE,EAAExE;AAAT,AACE,oBAAI,AAACuF,mDAAI,AAACT,4CAAIU,EAAEhB,EAAEa,gBAAUrF;AAA5B;;AAEE,yBAAA,lBAAC0F;;WALR,RACE,KAMC7B;;AAER,AAAA8B,iFAAA,mFAAA,0HAAA,hCAAuClE,2CAAY6B,EAAEsC;AAArD,AACE,+BAAA,WAAAC,nCAACtC;AAAD,AAAa,0EAAAsC,nEAACF,oFAAuBC;GACzBtC;;AAGd,IAAAwC,mBAAA,AAAArF,cAAA,mFAAoCyC,4BAAkBC,6BAAmBC;IAAzE2C,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,kBAAA,AAAAD,wDAAAE,tEAA6B1D;AAA7B,AAAA,AACC,AAAA,CAAA,AAAA,+CAAArC,/CAA0CqC;;AAA1C,CAAA,AAAA,AAA0CA,kEAExC;kBAAQe;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAW,OAACnD,uBAAOC,4BAAQ,AAAC8F,eAAK5C;;;;AAFnC,CAAA,AAAA,AAA0Cf,iEAGxC;kBAAOlC;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAA;;;;AAHF,CAAA,AAAA,AAA0CkC,sEAIxC;kBAAYlC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;;AAJF,CAAA,AAAA,AAA0CkC,gEAKxC;kBAAYe;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAe,OAACC,wBAAWjD,0BAAYgD;;;;AALzC,CAAA,AAAA,AAA0Cf,+DAMxC;kBAAWe;AAAX,AAAA,YAAA,RAAWA;AAAX,AAAc,OAACR,2BAAc,CAAA,yDAAkBQ;;;;AANjD,CAAA,AAAA,AAA0Cf,oEAOxC;kBAAgBe;AAAhB,AAAA,YAAA,RAAgBA;AAAhB,AAAmB,OAACR,2BAAc,CAAA,8DAAuBQ;;;;AAP3D,CAAA,AAAA,AAA0Cf,mEAQxC;kBAASe;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACnD,uBAAOI,6BAAS,AAAC2F,eAAK5C;;;;AARrC,CAAA,AAAA,AAA0Cf,6DASxC;kBAASe;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACC,wBAAW1C,uBAASyC;;;;AATnC,CAAA,AAAA,AAA0Cf,2DAUxC;kBAAOe;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAU,GAAI,AAAC6C,wBAAQ7C;AACX,OAACxC,eAAKwC;;AACN,OAAA,mFAAOA,MAAE,AAACxC,eAAKwC;;;;;AAZ7B,CAAA,AAAA,mDAAApD,nDAA0CqC;;AAA1C,CAAA,AAAA,AAA0CA,gEAexC;kBAAQlC;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAA,0FAAA,2DAAA,IAAA;;;;AAfF,CAAA,AAAA,2DAAAH,3DAA0CqC;;AAA1C,CAAA,AAAA,AAA0CA,mFAkBxC;kBAAae;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAgB,OAACvC,mBAAQ,AAACC,eAAKC,wCAAa,AAACiF,eAAK5C;;;;AAlBpD,CAAA,AAAA,AAA0Cf,8EAmBxC;kBAAce,EAAEpC,IAAIC;AAApB,AAAA,YAAA,RAAcmC;AAAd,AAAyB,+BAAA,xBAACC;kBAAD6C;AAAA,AAAa,0CAAAA,nCAAC/E,oDAAgBH,IAAIC;;CAAKmC;;;;AAnBlE,CAAA,AAAA,AAA0Cf,kFAoBxC;kBAAkBe,EAAEhC;AAApB,AAAA,YAAA,RAAkBgC;AAAlB,AACE,IAAA+C,qBAAW,AAAA,mFAAO/C;AAAlB,AAAA,oBAAA+C;AAAA,QAAAA,JAASC;AAAT,AAGE,OAACxD,2BAAc,CAAA,2FAAA,HAAiDwD;;AAChE,+BAAA,xBAAC/C;kBAADgD;AAAA,AAAa,8CAAAA,vCAAC/E,wDAAoBF;;CAAKgC;;;;;AA1B9C;AAAA,eAAAwC;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAlE,2BAAA,AAAAtB,cAAAqF;AAAA,AAAA,GAAA/D;AAAA,AAAA,IAAA+D,uBAAA/D;AAAA,AAAA,GAAA,AAAAC,6BAAA8D;AAAA,IAAA7D,wBAAA,AAAAC,sBAAA4D;AAAA,AAAA,eAAA,AAAA3D,qBAAA2D;eAAA7D;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,kBAAA,AAAAI,gBAAAyD,9BAA6BvD;AAA7B,AAAA,AACC,AAAA,CAAA,AAAA,+CAAArC,/CAA0CqC;;AAA1C,CAAA,AAAA,AAA0CA,kEAExC;kBAAQe;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAW,OAACnD,uBAAOC,4BAAQ,AAAC8F,eAAK5C;;;;AAFnC,CAAA,AAAA,AAA0Cf,iEAGxC;kBAAOlC;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAA;;;;AAHF,CAAA,AAAA,AAA0CkC,sEAIxC;kBAAYlC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;;AAJF,CAAA,AAAA,AAA0CkC,gEAKxC;kBAAYe;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAe,OAACC,wBAAWjD,0BAAYgD;;;;AALzC,CAAA,AAAA,AAA0Cf,+DAMxC;kBAAWe;AAAX,AAAA,YAAA,RAAWA;AAAX,AAAc,OAACR,2BAAc,CAAA,yDAAkBQ;;;;AANjD,CAAA,AAAA,AAA0Cf,oEAOxC;kBAAgBe;AAAhB,AAAA,YAAA,RAAgBA;AAAhB,AAAmB,OAACR,2BAAc,CAAA,8DAAuBQ;;;;AAP3D,CAAA,AAAA,AAA0Cf,mEAQxC;kBAASe;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACnD,uBAAOI,6BAAS,AAAC2F,eAAK5C;;;;AARrC,CAAA,AAAA,AAA0Cf,6DASxC;kBAASe;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACC,wBAAW1C,uBAASyC;;;;AATnC,CAAA,AAAA,AAA0Cf,2DAUxC;kBAAOe;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAU,GAAI,AAAC6C,wBAAQ7C;AACX,OAACxC,eAAKwC;;AACN,OAAA,mFAAOA,MAAE,AAACxC,eAAKwC;;;;;AAZ7B,CAAA,AAAA,mDAAApD,nDAA0CqC;;AAA1C,CAAA,AAAA,AAA0CA,gEAexC;kBAAQlC;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAA,0FAAA,2DAAA,IAAA;;;;AAfF,CAAA,AAAA,2DAAAH,3DAA0CqC;;AAA1C,CAAA,AAAA,AAA0CA,mFAkBxC;kBAAae;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAgB,OAACvC,mBAAQ,AAACC,eAAKC,wCAAa,AAACiF,eAAK5C;;;;AAlBpD,CAAA,AAAA,AAA0Cf,8EAmBxC;kBAAce,EAAEpC,IAAIC;AAApB,AAAA,YAAA,RAAcmC;AAAd,AAAyB,+BAAA,xBAACC;kBAAD6C;AAAA,AAAa,0CAAAA,nCAAC/E,oDAAgBH,IAAIC;;CAAKmC;;;;AAnBlE,CAAA,AAAA,AAA0Cf,kFAoBxC;kBAAkBe,EAAEhC;AAApB,AAAA,YAAA,RAAkBgC;AAAlB,AACE,IAAA+C,qBAAW,AAAA,mFAAO/C;AAAlB,AAAA,oBAAA+C;AAAA,QAAAA,JAASC;AAAT,AAGE,OAACxD,2BAAc,CAAA,2FAAA,HAAiDwD;;AAChE,+BAAA,xBAAC/C;kBAADgD;AAAA,AAAa,8CAAAA,vCAAC/E,wDAAoBF;;CAAKgC;;;;;AA1B9C;AAAA,eAAA,AAAAhB,eAAAwD;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAsCG,AACE,2EAAA,3EAAC7C,+CAAOuD;;AACR,2EAAA,3EAACvD,+CAAOwD;AAEb,AAAAjD,kEAAA,mFAAA,2FAAA,mGAAA,WAAgC9B,EAAE+B;AAAlC,AACE,OAACiD,gDAAShF,EAAE+B;;AAGd,IAAAkD,mBAAA,AAAAlG,cAAA,mFAAoC+F,4BAAkBC;IAAtDG,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,kBAAA,AAAAD,wDAAAE,tEAA6BvE;AAA7B,AAAA,AACC,AAAA,CAAA,AAAA,+CAAArC,/CAA0CqC;;AAA1C,CAAA,AAAA,AAA0CA,kEAExC;kBAAQwE;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAW,OAACC,uBAAOD;;;;AAFrB,CAAA,AAAA,AAA0CxE,iEAGxC;kBAAOlC;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAA;;;;AAHF,CAAA,AAAA,AAA0CkC,sEAIxC;kBAAYlC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;;AAJF,CAAA,AAAA,AAA0CkC,gEAKxC;kBAAYlC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;;AALF,CAAA,AAAA,AAA0CkC,+DAMxC;kBAAWwE;AAAX,AAAA,YAAA,RAAWA;AAAX,AAAc,OAACjE,2BAAc,CAAA,yDAAkBiE;;;;AANjD,CAAA,AAAA,AAA0CxE,oEAOxC;kBAAgBwE;AAAhB,AAAA,YAAA,RAAgBA;AAAhB,AAAmB,OAACjE,2BAAc,CAAA,8DAAuBiE;;;;AAP3D,CAAA,AAAA,AAA0CxE,mEAQxC;kBAASlC;AAAT,AAAA,YAAA,RAASA;AAAT,AAAA;;;;AARF,CAAA,AAAA,AAA0CkC,6DASxC;kBAASwE;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACjE,2BAAc,CAAA,uDAAgBiE;;;;AAT7C,CAAA,AAAA,AAA0CxE,2DAUxC;kBAAOwE;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAU,OAACjG,eAAKiG;;;;AAVlB,CAAA,AAAA,mDAAA7G,nDAA0CqC;;AAA1C,CAAA,AAAA,AAA0CA,gEAaxC;kBAAQlC;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAA,0FAAA,2DAAA,IAAA;;;;AAdH;AAAA,eAAAsG;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA/E,2BAAA,AAAAtB,cAAAkG;AAAA,AAAA,GAAA5E;AAAA,AAAA,IAAA4E,uBAAA5E;AAAA,AAAA,GAAA,AAAAC,6BAAA2E;AAAA,IAAA1E,wBAAA,AAAAC,sBAAAyE;AAAA,AAAA,eAAA,AAAAxE,qBAAAwE;eAAA1E;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,kBAAA,AAAAI,gBAAAsE,9BAA6BpE;AAA7B,AAAA,AACC,AAAA,CAAA,AAAA,+CAAArC,/CAA0CqC;;AAA1C,CAAA,AAAA,AAA0CA,kEAExC;kBAAQwE;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAW,OAACC,uBAAOD;;;;AAFrB,CAAA,AAAA,AAA0CxE,iEAGxC;kBAAOlC;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAA;;;;AAHF,CAAA,AAAA,AAA0CkC,sEAIxC;kBAAYlC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;;AAJF,CAAA,AAAA,AAA0CkC,gEAKxC;kBAAYlC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;;AALF,CAAA,AAAA,AAA0CkC,+DAMxC;kBAAWwE;AAAX,AAAA,YAAA,RAAWA;AAAX,AAAc,OAACjE,2BAAc,CAAA,yDAAkBiE;;;;AANjD,CAAA,AAAA,AAA0CxE,oEAOxC;kBAAgBwE;AAAhB,AAAA,YAAA,RAAgBA;AAAhB,AAAmB,OAACjE,2BAAc,CAAA,8DAAuBiE;;;;AAP3D,CAAA,AAAA,AAA0CxE,mEAQxC;kBAASlC;AAAT,AAAA,YAAA,RAASA;AAAT,AAAA;;;;AARF,CAAA,AAAA,AAA0CkC,6DASxC;kBAASwE;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACjE,2BAAc,CAAA,uDAAgBiE;;;;AAT7C,CAAA,AAAA,AAA0CxE,2DAUxC;kBAAOwE;AAAP,AAAA,YAAA,RAAOA;AAAP,AAAU,OAACjG,eAAKiG;;;;AAVlB,CAAA,AAAA,mDAAA7G,nDAA0CqC;;AAA1C,CAAA,AAAA,AAA0CA,gEAaxC;kBAAQlC;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAA,0FAAA,2DAAA,IAAA;;;;AAdH;AAAA,eAAA,AAAAiC,eAAAqE;eAAA;eAAA;eAAA;;;;;;;;AAAA","names":["sicmutils.generic/simplify","cljs.core/PersistentVector","v","cljs.core.mapv","cljs.core/PROTOCOL_SENTINEL","cljs.core/every?","sicmutils.value/zero?","_","sicmutils.value/zero-like","sicmutils.value/exact?","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.map","sicmutils.value/freeze","cljs.core/type","cljs.core/boolean","cljs.core/some","sicmutils.differential/perturbed?","old","new","p1__96784#","sicmutils.differential/replace-tag","tag","p1__96785#","sicmutils.differential/extract-tangent","sicmutils.value/seqtype","a","seq__96800","chunk__96801","count__96802","i__96803","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","klass","cljs.core/Cons","cljs.core/IndexedSeq","cljs.core/LazySeq","cljs.core/Range","cljs.core/IntegerRange","xs","sicmutils.util/unsupported","p1__96797#","p1__96799#","cljs.core.derive","cljs.core/PersistentHashMap","cljs.core/PersistentArrayMap","cljs.core/PersistentTreeMap","sicmutils.generic/negate","m","sicmutils.util/map-vals","sicmutils.generic/add","b","cljs.core.merge_with","sicmutils.generic/sub","sicmutils.generic/mul","x","p1__96852#","p1__96853#","sicmutils.generic/div","p1__96855#","sicmutils.collection/combine","f","m1","m2","l-default","e","k","cljs.core/key","cljs.core/val","cljs.core.assoc","G__96859","G__96860","cljs.core.get","cljs.core.reduce","merge-entry","sicmutils.generic/make-rectangular","sicmutils.generic/make-polar","sicmutils.generic/real-part","sicmutils.generic/imag-part","sentinel","cljs.core/NeverEquiv","sicmutils.value/=","y","cljs.core/reduce-kv","cljs.core/reduced","sicmutils.generic/partial-derivative","selectors","p1__96862#","seq__96865","chunk__96866","count__96867","i__96868","cljs.core/vals","cljs.core/sorted?","p1__96863#","temp__5751__auto__","t","p1__96864#","cljs.core/PersistentHashSet","cljs.core/PersistentTreeSet","clojure.set.union","seq__96878","chunk__96879","count__96880","i__96881","s","cljs.core/empty?"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.collection\n  \"This namespace contains implementations of various SICMUtils protocols for\n  native Clojure collections.\"\n  (:require [clojure.set :as cs]\n            [sicmutils.differential :as d]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g]\n            [sicmutils.util :as u]\n            [sicmutils.value :as v])\n  #?(:clj\n     (:import (clojure.lang PersistentVector\n                            IPersistentVector\n                            IPersistentMap\n                            IPersistentSet\n                            ISeq))))\n\n;; ## Vector Implementations\n;;\n;; Vectors are implicitly treated as [[sicmutils.structure/Structure]] instances\n;; with an `up` orientation, and implement [[v/freeze]] identically. They can\n;; act as `zero?`, but they can't act as `one?` or `identity?`; those are\n;; reserved for instances that have no effect on multiplication.\n\n(defmethod g/simplify [PersistentVector] [v]\n  (mapv g/simplify v))\n\n(extend-type #?(:clj IPersistentVector :cljs PersistentVector)\n  v/Value\n  (zero? [v] (every? v/zero? v))\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [v] (mapv v/zero-like v))\n  (one-like [_] 1)\n  (identity-like [_] 1)\n  (exact? [v] (every? v/exact? v))\n  (freeze [v] `(~'up ~@(map v/freeze v)))\n  (kind [v] (type v))\n\n  ;; Another difference from [[sicmutils.structure/Structure]] is that a\n  ;; structure of functions acts as a function itself that applies its entries\n  ;; to its arguments. Vectors already implement IFn (they take an index and\n  ;; look it up), so they can't respond the same way as a structure via\n  ;; arity. (the `2` arity takes an additional default value.)\n  f/IArity\n  (arity [_] [:between 1 2])\n\n  ;; Vectors are functors, so they can be perturbed if any of their elements are\n  ;; perturbed. [[d/replace-tag]] and [[d/extract-tangent]] pass the buck down\n  ;; the vector's elements.\n  d/IPerturbed\n  (perturbed? [v] (boolean (some d/perturbed? v)))\n  (replace-tag [v old new] (mapv #(d/replace-tag % old new) v))\n  (extract-tangent [v tag] (mapv #(d/extract-tangent % tag) v)))\n\n;; ## Sequences\n;;\n;; Sequences can't act as functions or respond to any of\n;; the [[v/zero?]]-and-friends predicates. They pass along the operations that\n;; they can implement to their elements via [[map]].\n\n(defmethod g/simplify [v/seqtype] [a]\n  (map g/simplify a))\n\n#_{:clj-kondo/ignore [:redundant-do]}\n(#?@(:clj [do]\n     :cljs [doseq [klass [Cons IndexedSeq LazySeq List Range IntegerRange]]])\n (extend-type #?(:clj ISeq :cljs klass)\n   v/Value\n   (zero? [_] false)\n   (one? [_] false)\n   (identity? [_] false)\n   (zero-like [xs] (map v/zero-like xs))\n   (one-like [xs] (u/unsupported (str \"one-like: \" xs)))\n   (identity-like [xs] (u/unsupported (str \"identity-like: \" xs)))\n   (exact? [_] false)\n   (freeze [xs] (map v/freeze xs))\n   (kind [xs] (type xs))\n\n   d/IPerturbed\n   (perturbed? [_] false)\n   (replace-tag [xs old new] (map #(d/replace-tag % old new) xs))\n   (extract-tangent [xs tag] (map #(d/extract-tangent % tag) xs))))\n\n;; ## Maps\n;;\n;; Maps acts as functors that can be perturbed and zeroed out (and pass along\n;; calls to [[g/partial-derivative]] to their elements!), but not much else.\n;;\n;; NOTE: There is probably a case for making something\n;; like [[sicmutils.structure/Structure]] backed by a map, for a sort of sparse\n;; structure, or a dataframe-like structure with named fields instead of\n;; positional fields. Nothing like this exists yet!\n\n#?(:clj\n   (derive IPersistentMap ::map)\n\n   :cljs\n   (do\n     (derive PersistentHashMap ::map)\n     (derive PersistentArrayMap ::map)\n     (derive PersistentTreeMap ::map)))\n\n(defmethod g/negate [::map] [m]\n  (u/map-vals g/negate m))\n\n(defmethod g/add [::map ::map] [a b]\n  (merge-with g/add a b))\n\n(defmethod g/sub [::map ::map] [a b]\n  (merge-with g/add a (u/map-vals g/negate b)))\n\n(defmethod g/mul [::map ::v/scalar] [m x]\n  (u/map-vals #(g/mul % x) m))\n\n(defmethod g/mul [::v/scalar ::map] [x m]\n  (u/map-vals #(g/mul x %) m))\n\n(defmethod g/div [::map ::v/scalar] [m x]\n  (u/map-vals #(g/div % x) m))\n\n(defn- combine [f m1 m2 l-default]\n  (letfn [(merge-entry [m e]\n\t\t\t      (let [k (key e)\n                  v (val e)]\n\t\t\t        (assoc m k (f (get m k l-default) v))))]\n    (reduce merge-entry m1 (seq m2))))\n\n(defmethod g/make-rectangular [::map ::map] [m1 m2]\n  (combine g/make-rectangular m1 m2 0))\n\n(defmethod g/make-polar [::map ::map] [m1 m2]\n  (combine g/make-polar m1 m2 0))\n\n(defmethod g/real-part [::map] [m]\n  (u/map-vals g/real-part m))\n\n(defmethod g/imag-part [::map] [m]\n  (u/map-vals g/imag-part m))\n\n(defmethod g/simplify [::map] [m]\n  (u/map-vals g/simplify m))\n\n(let [sentinel #?(:cljs (NeverEquiv.)\n                  :clj (Object.))]\n  (defmethod v/= [::map ::map] [x y]\n    (boolean\n     (when (== (count x) (count y))\n       (reduce-kv\n        (fn [_ k v]\n          (if (v/= (get y k sentinel) v)\n            true\n            (reduced false)))\n        true\n        x)))))\n\n(defmethod g/partial-derivative [::map v/seqtype] [m selectors]\n  (u/map-vals #(g/partial-derivative % selectors)\n              m))\n\n#_{:clj-kondo/ignore [:redundant-do]}\n(#?@(:clj [do] :cljs [doseq [klass [PersistentHashMap PersistentArrayMap PersistentTreeMap]]])\n (extend-type #?(:clj IPersistentMap :cljs klass)\n   v/Value\n   (zero? [m] (every? v/zero? (vals m)))\n   (one? [_] false)\n   (identity? [_] false)\n   (zero-like [m] (u/map-vals v/zero-like m))\n   (one-like [m] (u/unsupported (str \"one-like: \" m)))\n   (identity-like [m] (u/unsupported (str \"identity-like: \" m)))\n   (exact? [m] (every? v/exact? (vals m)))\n   (freeze [m] (u/map-vals v/freeze m))\n   (kind [m] (if (sorted? m)\n               (type m)\n               (:type m (type m))))\n\n   f/IArity\n   (arity [_] [:between 1 2])\n\n   d/IPerturbed\n   (perturbed? [m] (boolean (some d/perturbed? (vals m))))\n   (replace-tag [m old new] (u/map-vals #(d/replace-tag % old new) m))\n   (extract-tangent [m tag]\n     (if-let [t (:type m)]\n       ;; Do NOT attempt to recurse into the values if this map is being used as a\n       ;; simple representation for some other type, like a manifold point.\n       (u/unsupported (str \"`extract-tangent` not supported for type \" t \".\"))\n       (u/map-vals #(d/extract-tangent % tag) m)))))\n\n\n;; ## Sets\n;;\n;; SICMUtils treats Clojure's set data structure as a monoid, with set union as\n;; the addition operation and the empty set as the zero element.\n\n#?(:clj\n   (derive IPersistentSet ::set)\n\n   :cljs\n   (do\n     (derive PersistentHashSet ::set)\n     (derive PersistentTreeSet ::set)))\n\n(defmethod g/add [::set ::set] [a b]\n  (cs/union a b))\n\n#_{:clj-kondo/ignore [:redundant-do]}\n(#?@(:clj [do] :cljs [doseq [klass [PersistentHashSet PersistentTreeSet]]])\n (extend-type #?(:clj IPersistentSet :cljs klass)\n   v/Value\n   (zero? [s] (empty? s))\n   (one? [_] false)\n   (identity? [_] false)\n   (zero-like [_] #{})\n   (one-like [s] (u/unsupported (str \"one-like: \" s)))\n   (identity-like [s] (u/unsupported (str \"identity-like: \" s)))\n   (exact? [_] false)\n   (freeze [s] (u/unsupported (str \"freeze: \" s)))\n   (kind [s] (type s))\n\n   f/IArity\n   (arity [_] [:between 1 2])))\n"]}