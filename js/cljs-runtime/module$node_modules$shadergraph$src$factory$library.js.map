{
"version":3,
"file":"module$node_modules$shadergraph$src$factory$library.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAAkB,IAAK,EA+DvBJ,QAAQI,CAAAA,OAAR,CA5CgBA,QAAS,CAACC,QAAD,CAAWC,QAAX,CAAqBC,IAArB,CAA2B,CAClD,IAAIC,SAAW,IAAf,CACIC,KAAO,EAEK,KAAhB,EAAIH,QAAJ,GAC0B,UAAxB,GAAI,MAAOA,SAAX,CACEE,QADF,CACaE,IAAAF,EAAQD,IAAA,CAAKF,QAAL,CAAeK,IAAf,CAAqBJ,QAAA,CAASI,IAAT,CAArB,CADrB,CAE+B,QAF/B,GAEW,MAAOJ,SAFlB,GAGEE,QAHF,CAGaA,QAAS,CAACE,IAAD,CAAO,CACzB,GAAsB,IAAtB,EAAIJ,QAAA,CAASI,IAAT,CAAJ,CACE,KAAUC,MAAJ,CAAU,qBAAqBD,IAArB,IAAV,CAAN,CAGF,MAAOH,KAAA,CAAKF,QAAL,CAAeK,IAAf;AAAqBJ,QAAA,CAASI,IAAT,CAArB,CALkB,CAH7B,CADF,CAcA,KAAME,OAASC,IAAAD,EAAQL,IAAA,CAAKF,QAAL,CAAe,EAAf,CAAmBQ,IAAnB,CAEvB,IAAgB,IAAhB,EAAIL,QAAJ,CACE,MAAOI,OAGHE,OAAAA,CAAQA,QAAS,CAACJ,IAAD,CAAO,CAC5B,GAAIA,IAAKK,CAAAA,KAAL,CAAW,MAAX,CAAJ,CACE,MARmBR,KAAA,CAAKF,QAAL,CAAe,EAAf,CAQLK,IARK,CAWrBD,KAAA,CAAKC,IAAL,CAAA,CAAa,CAAA,CACb,OAAOF,SAAA,CAASE,IAAT,CANqB,CAS9BI,OAAML,CAAAA,IAAN,CAAaO,QAAS,CAACC,KAAD,CAAQ,CACf,IAAb,EAAIA,KAAJ,GACEA,KADF,CACUR,IADV,CAIA,OAAOA,KAAP,CAAcQ,KALc,CAQ9B,OAAOH,OAzC2C,CAzB4D;",
"sources":["node_modules/shadergraph/src/factory/library.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$shadergraph$src$factory$library\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.library = void 0;\n\n/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\n/*\n  Snippet library\n\n  Takes:\n    - Hash of snippets: named library\n    - (name) -> getter: dynamic lookup\n    - nothing:          no library, only pass in inline source code\n\n  If 'name' contains any of \"{;(#\" it is assumed to be direct GLSL code.\n*/\nconst library = function (language, snippets, load) {\n  let callback = null;\n  let used = {};\n\n  if (snippets != null) {\n    if (typeof snippets === \"function\") {\n      callback = name => load(language, name, snippets(name));\n    } else if (typeof snippets === \"object\") {\n      callback = function (name) {\n        if (snippets[name] == null) {\n          throw new Error(`Unknown snippet \\`${name}\\``);\n        }\n\n        return load(language, name, snippets[name]);\n      };\n    }\n  }\n\n  const inline = code => load(language, \"\", code);\n\n  if (callback == null) {\n    return inline;\n  }\n\n  const fetch = function (name) {\n    if (name.match(/[{;]/)) {\n      return inline(name);\n    }\n\n    used[name] = true;\n    return callback(name);\n  };\n\n  fetch.used = function (_used) {\n    if (_used == null) {\n      _used = used;\n    }\n\n    return used = _used;\n  };\n\n  return fetch;\n};\n\nexports.library = library;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","library","language","snippets","load","callback","used","name","Error","inline","code","fetch","match","fetch.used","_used"]
}
