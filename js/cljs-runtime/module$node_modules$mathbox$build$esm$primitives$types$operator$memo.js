shadow$provide.module$node_modules$mathbox$build$esm$primitives$types$operator$memo=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Memo=void 0;global=require("module$node_modules$mathbox$build$esm$primitives$types$operator$operator");class Memo extends global.Operator{static initClass(){this.traits="node bind active operator source index texture memo".split(" ")}sourceShader(shader){return this.memo.shaderAbsolute(shader,1)}make(){super.make();
if(null!=this.bind.source){this._helpers.active.make();this._listen("root","root.update",()=>{if(this.isActive)return this.update()});var {minFilter,magFilter,type}=this.props,dims=this.bind.source.getDimensions(),{items,width,height,depth}=dims;this.memo=this._renderables.make("memo",{items,width,height,depth,minFilter,magFilter,type});dims=this._shaders.shader();this.bind.source.sourceShader(dims);this.compose=this._renderables.make("memoScreen",{map:dims,items,width,height,depth});this.memo.adopt(this.compose);
this.objects=[this.compose];return this.renders=this.compose.renders}}unmake(){this._helpers.active.unmake();null!=this.bind.source&&(this.memo.unadopt(this.compose),this.memo.dispose(),this.memo=this.compose=null,super.unmake())}update(){return null!=this.memo?this.memo.render():void 0}resize(){if(null!=this.bind.source){var dims=this.bind.source.getActiveDimensions(),{width,height,depth}=dims;this.compose.cover(width,height,depth);return super.resize()}}change(changed,touched,_init){if(touched.texture||
touched.operator)return this.rebuild()}}exports.Memo=Memo;Memo.initClass()}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$primitives$types$operator$memo.js.map
