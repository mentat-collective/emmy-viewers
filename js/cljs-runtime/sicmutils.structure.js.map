{"version":3,"sources":["sicmutils/structure.cljc"],"mappings":"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A,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA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","names":["sicmutils.structure/*allow-incompatible-multiplication*","sicmutils.structure/orientation->symbol","sicmutils.structure/symbol-set","sicmutils.structure/orientation->separator","sicmutils.structure/opposite-orientation","cljs.core.derive","cljs.core/PersistentVector","sicmutils.structure/kronecker","i","j","var_args","G__99982","sicmutils.structure/basis-unit","js/Error","cljs.core.map","cljs.core.partial","cljs.core.range","n","cljs.core.take","sicmutils.structure.basis_unit","cljs.core/PROTOCOL_SENTINEL","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","unused__43702__auto__","self__","G__100076","args100058","cljs.core/aclone","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","sicmutils.structure/Structure","sicmutils.structure/->Structure","orientation","v","m","_","cljs.core/every?","sicmutils.value/zero?","sicmutils.value/zero-like","sicmutils.value/exact?","sicmutils.value/freeze","sicmutils.function/seq-arity","cljs.core/boolean","cljs.core/some","sicmutils.differential/perturbed?","s","old","new","G__100081","p1__99990#","G__100082","sicmutils.structure/mapr","sicmutils.differential/replace-tag","tag","G__100083","p1__99991#","G__100084","sicmutils.differential/extract-tangent","clojure.string.join","cljs.core/pr-str","x","writer","cljs.core.write_all","item","cljs.core/-conj","this","that","sicmutils.structure/s:=","cljs.core/-seq","cljs.core/-count","cljs.core/-nth","not-found","k","cljs.core/-lookup","entry","cljs.core/-assoc","cljs.core/-contains-key?","cljs.core/-find","f","cljs.core/-reduce","start","init","cljs.core/-kv-reduce","cljs.core/-rseq","p1__100028#","cljs.core.mapv","a","p1__100029#","b","p1__100030#","c","p1__100031#","d","p1__100032#","e","p1__100037#","p1__100038#","g","p1__100039#","h","p1__100040#","p1__100041#","p1__100042#","p1__100043#","l","p1__100044#","m-arg","p1__100045#","p1__100046#","o","p1__100047#","p","p1__100048#","q","p1__100049#","r","p1__100050#","p1__100051#","t","p1__100052#","rest","p1__100053#","cljs.core.apply","sicmutils.structure/structure->vector","cljs.core/vector?","sicmutils.util/illegal","sicmutils.structure/orientation","sicmutils.structure/s:count","cljs.core/sequential?","cljs.core/count","sicmutils.structure/dimension","cljs.core/flatten","sicmutils.structure/s:nth","cljs.core.nth","cljs.core._EQ_","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sicmutils.structure/component","p1__100085#","seq100086","self__4852__auto__","indices","cljs.core.get_in","sicmutils.value/=","sicmutils.value/seqtype","cljs.core/prefer-method","and__4251__auto__","cljs.core/seqable?","sicmutils.structure/structure?","sicmutils.structure/up?","sicmutils.structure/down?","sicmutils.structure/valid-orientation?","cljs.core/contains?","sicmutils.structure/same-orientation?","sicmutils.structure/two-tensor-info","outer-size","outer-orientation","inner-sizes","cljs.core.into","p1__100087#","inner-orientations","cljs.core/first","sicmutils.structure/tensor-pred","outer","inner","temp__5753__auto__","sicmutils.structure/two-tensor?","sicmutils.structure/two-down?","sicmutils.structure/two-up?","sicmutils.structure/up-of-downs?","sicmutils.structure/down-of-ups?","sicmutils.structure/make","xs","sicmutils.structure/up*","sicmutils.structure/vector->up","sicmutils.structure/up","seq100088","sicmutils.structure/down*","sicmutils.structure/vector->down","sicmutils.structure/down","seq100089","sicmutils.structure/same","G__100091","sicmutils.structure/opposite","sicmutils.structure.opposite","G__100092","sicmutils.structure/generate","dimension","sicmutils.structure/literal","sym","size","separator","prefix","cljs.core.symbol","sicmutils.structure/literal-up","sicmutils.structure/literal-down","p__100094","vec__100095","sicmutils.structure/sum:l","structs","G__100098","G__100099","G__100100","sicmutils.util.aggregate/generic-sum","p1__100093#","sicmutils.structure/sum:r:l","structures","elements","sicmutils.structure/sumr","seq100101","G__100102","cljs.core/next","self__4851__auto__","p__100104","vec__100105","sicmutils.structure/map:l","p1__100103#","sicmutils.structure/map:r:l","seq100108","G__100109","sicmutils.structure/map-chain","chain","orientations","walk","cljs.core.conj","sicmutils.structure/structure->access-chains","cljs.core/with-meta","sicmutils.structure/structure->prototype","name","sicmutils.structure.mapr","separators","cljs.core/meta","path-seq","cljs.core/str","G__100111","sicmutils.structure/unflatten","values","struct","sicmutils.structure.unflatten","constructor","vec__100122","values'","struct'","cljs.core.reduce","p__100125","vec__100126","element","vec__100129","u","cljs.core/rest","cljs.core/second","sicmutils.structure/transpose","G__100132","sicmutils.structure/transpose-outer","sicmutils.structure/typical-object","cljs.core.gensym","sicmutils.structure/compatible-zero","sicmutils.structure/dual-zero","sicmutils.structure/compatible-shape","sicmutils.structure/structure*scalar","p1__100133#","sicmutils.generic._STAR_","sicmutils.structure/scalar*structure","p1__100134#","sicmutils.structure/compatible-for-contraction?","p__100135","vec__100136","or__4253__auto__","cljs.core/vector","sicmutils.structure/vector-dot-product","v1","v2","sicmutils.generic/+","sicmutils.generic/*","sicmutils.structure/vector-inner-product","sicmutils.generic/conjugate","sicmutils.structure/s:*","elem","sicmutils.structure/expt","one","sicmutils.value/one-like","sicmutils.value/one?","sicmutils.generic/expt","sicmutils.generic._","sicmutils.util/arithmetic-ex","sicmutils.structure/dot-product","s'","sicmutils.structure/inner-product","sicmutils.structure/outer-product","struct2","struct1","s1","s2","xform","sicmutils.structure/cross-product","cljs.core.not_EQ_","vec__100139","vec__100142","s0","t0","t1","t2","sicmutils.structure.up","sicmutils.structure/elementwise","op","sicmutils.generic/add","sicmutils.generic/negate","sicmutils.generic/sub","sicmutils.generic/-","sicmutils.generic/mul","sicmutils.generic/div","sicmutils.generic/invert","p1__100145#","p1__100146#","sicmutils.generic/square","sicmutils.generic/cube","sicmutils.generic/simplify","sicmutils.generic/magnitude","sicmutils.generic/sqrt","sicmutils.generic/abs","sicmutils.generic/make-rectangular","sicmutils.generic/make-polar","sicmutils.generic/real-part","sicmutils.generic/imag-part","sicmutils.generic/transpose","sicmutils.generic/dimension","sicmutils.generic/dot-product","sicmutils.generic/inner-product","sicmutils.generic/outer-product","sicmutils.generic/cross-product"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.structure\n  (:require [clojure.string :refer [join]]\n            [sicmutils.collection]\n            [sicmutils.differential :as d]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g]\n            [sicmutils.numsymb]\n            [sicmutils.operator :as o]\n            [sicmutils.util :as u]\n            [sicmutils.util.aggregate :as ua]\n            [sicmutils.value :as v])\n  #?(:clj\n     (:import (clojure.lang Associative\n                            AFn IFn\n                            IPersistentVector IReduce IKVReduce\n                            IObj\n                            Indexed Reversible Sequential))))\n\n;; Structures are primitive tensor-like objects. They are represented as\n;; recursive combinations of down vectors and up vectors, useful for dealing\n;; with derivatives of things with structured inputs and outputs.\n\n(def ^:dynamic *allow-incompatible-multiplication* true)\n\n;; Type Declarations\n\n(def ^:no-doc orientation->symbol\n  {::up 'up ::down 'down})\n\n(def ^:no-doc symbol-set\n  #{'up 'down})\n\n(def ^:no-doc orientation->separator\n  {::up \"\u2191\" ::down \"_\"})\n\n(def opposite-orientation\n  {::up ::down ::down ::up})\n\n(derive ::up ::structure)\n(derive ::down ::structure)\n(derive #?(:clj IPersistentVector :cljs PersistentVector) ::up)\n\n;; Structures can interact with functions.\n(derive ::structure ::f/cofunction)\n(derive ::structure ::o/co-operator)\n\n;; ## Utilities\n;;\n;; These are related to structures, but probably need a better home.\n(defn kronecker\n  \"Returns `1` if `i`== `j`, `0` otherwise.\"\n  [i j]\n  (if (== i j) 1 0))\n\n(defn basis-unit\n  \"Returns a basis sequence of `n` 0s, with `1` in the `i`th position.\n\n  If `n` is not supplied returns an infinite sequence.\"\n  ([i] (map (partial kronecker i)\n            (range)))\n  ([n i] (take n (basis-unit i))))\n\n;; ## Structure Type Definition\n\n(declare s:= mapr)\n\n(deftype Structure [orientation v m]\n  v/Value\n  (zero? [_] (every? v/zero? v))\n  (one? [_] false)\n  (identity? [_] false)\n  (zero-like [_] (Structure. orientation (v/zero-like v) m))\n  (one-like [_] 1)\n  (identity-like [_] 1)\n  (exact? [_] (every? v/exact? v))\n  (freeze [_] `(~(orientation orientation->symbol) ~@(map v/freeze v)))\n  (kind [_] orientation)\n\n  f/IArity\n  (arity [_]\n    (f/seq-arity v))\n\n  d/IPerturbed\n  (perturbed? [_] (boolean (some d/perturbed? v)))\n  (replace-tag [s old new] (mapr #(d/replace-tag % old new) s))\n  (extract-tangent [s tag] (mapr #(d/extract-tangent % tag) s))\n\n  #?@(:clj\n      [Object\n       (equals [this that] (s:= this that))\n       (toString [_] (str \"(\"\n                          (orientation orientation->symbol)\n                          \" \"\n                          (join \" \" (map pr-str v))\n                          \")\"))\n\n       IObj\n       (meta [_] m)\n       (withMeta [_ m] (Structure. orientation v m))\n\n       Sequential\n\n       Associative\n       (assoc [_ k entry] (Structure. orientation (assoc v k entry) m))\n       (containsKey [_ k] (.containsKey ^Associative v k))\n       (entryAt [_ k] (.entryAt ^Associative v k))\n       (cons [_ o] (Structure. orientation (conj v o) m))\n       (count [_] (.count ^Associative v))\n       (seq [_] (.seq ^Associative v))\n       (valAt [_ key] (.valAt ^Associative v key))\n       (valAt [_ key default] (.valAt ^Associative v key default))\n       (empty [_] (Structure. orientation [] nil))\n       (equiv [this that] (s:= this that))\n\n       Indexed\n       (nth [_ key] (.nth ^Indexed v key))\n       (nth [_ key default] (.nth ^Indexed v key default))\n\n       IReduce\n       (reduce [_ f] (.reduce ^IReduce v f))\n       (reduce [_ f start] (.reduce ^IReduce v f start))\n\n       IKVReduce\n       (kvreduce [_ f init] (.kvreduce ^IKVReduce v f init))\n\n       Reversible\n       (rseq [_] (.rseq ^Reversible v))\n\n       IFn\n       (invoke [_]\n               (Structure. orientation (mapv #(%) v) m))\n       (invoke [_ a]\n               (Structure. orientation (mapv #(% a) v) m))\n       (invoke [_ a b]\n               (Structure. orientation (mapv #(% a b) v) m))\n       (invoke [_ a b c]\n               (Structure. orientation (mapv #(% a b c) v) m))\n       (invoke [_ a b c d]\n               (Structure. orientation (mapv #(% a b c d) v) m))\n       (invoke [_ a b c d e]\n               (Structure. orientation (mapv #(% a b c d e) v) m))\n       (invoke [_ a b c d e f]\n               (Structure. orientation (mapv #(% a b c d e f) v) m))\n       (invoke [_ a b c d e f g]\n               (Structure. orientation (mapv #(% a b c d e f g) v) m))\n       (invoke [_ a b c d e f g h]\n               (Structure. orientation (mapv #(% a b c d e f g h) v) m))\n       (invoke [_ a b c d e f g h i]\n               (Structure. orientation (mapv #(% a b c d e f g h i) v) m))\n       (invoke [_ a b c d e f g h i j]\n               (Structure. orientation (mapv #(% a b c d e f g h i j) v) m))\n       (invoke [_ a b c d e f g h i j k]\n               (Structure. orientation (mapv #(% a b c d e f g h i j k) v) m))\n       (invoke [_ a b c d e f g h i j k l]\n               (Structure. orientation (mapv #(% a b c d e f g h i j k l) v) m))\n       (invoke [_ a b c d e f g h i j k l m-arg]\n               (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg) v) m))\n       (invoke [_ a b c d e f g h i j k l m-arg n]\n               (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n) v) m))\n       (invoke [_ a b c d e f g h i j k l m-arg n o]\n               (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o) v) m))\n       (invoke [_ a b c d e f g h i j k l m-arg n o p]\n               (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o p) v) m))\n       (invoke [_ a b c d e f g h i j k l m-arg n o p q]\n               (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o p q) v) m))\n       (invoke [_ a b c d e f g h i j k l m-arg n o p q r]\n               (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o p q r) v) m))\n       (invoke [_ a b c d e f g h i j k l m-arg n o p q r s]\n               (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o p q r s) v) m))\n       (invoke [_ a b c d e f g h i j k l m-arg n o p q r s t]\n               (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o p q r s t) v) m))\n       (invoke [_ a b c d e f g h i j k l m-arg n o p q r s t rest]\n               (Structure. orientation (mapv #(apply % a b c d e f g h i j k l m-arg n o p q r s t rest) v) m))\n       (applyTo [s xs] (AFn/applyToHelper s xs))]\n\n      :cljs\n      [Object\n       (toString [_] (str \"(\"\n                          (orientation orientation->symbol)\n                          \" \" (join \" \" (map pr-str v))\n                          \")\"))\n\n       IMeta\n       (-meta [_] m)\n\n       IWithMeta\n       (-with-meta [_ m] (Structure. orientation v m))\n\n       IPrintWithWriter\n       (-pr-writer [x writer _]\n                   (write-all writer (.toString x)))\n\n       ICollection\n       (-conj [_ item] (Structure. orientation (-conj v item) m))\n\n       IEmptyableCollection\n       (-empty [_] (Structure. orientation [] m))\n\n       ISequential\n\n       IEquiv\n       (-equiv [this that] (s:= this that))\n\n       ISeqable\n       (-seq [_] (-seq v))\n\n       ICounted\n       (-count [_] (-count v))\n\n       IIndexed\n       (-nth [_ n] (-nth v n))\n       (-nth [_ n not-found] (-nth v n not-found))\n\n       ILookup\n       (-lookup [_ k] (-lookup v k))\n       (-lookup [_ k not-found] (-lookup v k not-found))\n\n       IAssociative\n       (-assoc [_ k entry] (Structure. orientation (-assoc v k entry) m))\n       (-contains-key? [_ k] (-contains-key? v k))\n\n       IFind\n       (-find [_ n] (-find v n))\n\n       IReduce\n       (-reduce [_ f] (-reduce v f))\n       (-reduce [_ f start] (-reduce v f start))\n\n       IKVReduce\n       (-kv-reduce [_ f init] (-kv-reduce v f init))\n\n       IReversible\n       (-rseq [_] (-rseq v))\n\n       IFn\n       (-invoke [_]\n                (Structure. orientation (mapv #(%) v) m))\n       (-invoke [_ a]\n                (Structure. orientation (mapv #(% a) v) m))\n       (-invoke [_ a b]\n                (Structure. orientation (mapv #(% a b) v) m))\n       (-invoke [_ a b c]\n                (Structure. orientation (mapv #(% a b c) v) m))\n       (-invoke [_ a b c d]\n                (Structure. orientation (mapv #(% a b c d) v) m))\n       (-invoke [_ a b c d e]\n                (Structure. orientation (mapv #(% a b c d e) v) m))\n       (-invoke [_ a b c d e f]\n                (Structure. orientation (mapv #(% a b c d e f) v) m))\n       (-invoke [_ a b c d e f g]\n                (Structure. orientation (mapv #(% a b c d e f g) v) m))\n       (-invoke [_ a b c d e f g h]\n                (Structure. orientation (mapv #(% a b c d e f g h) v) m))\n       (-invoke [_ a b c d e f g h i]\n                (Structure. orientation (mapv #(% a b c d e f g h i) v) m))\n       (-invoke [_ a b c d e f g h i j]\n                (Structure. orientation (mapv #(% a b c d e f g h i j) v) m))\n       (-invoke [_ a b c d e f g h i j k]\n                (Structure. orientation (mapv #(% a b c d e f g h i j k) v) m))\n       (-invoke [_ a b c d e f g h i j k l]\n                (Structure. orientation (mapv #(% a b c d e f g h i j k l) v) m))\n       (-invoke [_ a b c d e f g h i j k l m-arg]\n                (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg) v) m))\n       (-invoke [_ a b c d e f g h i j k l m-arg n]\n                (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n) v) m))\n       (-invoke [_ a b c d e f g h i j k l m-arg n o]\n                (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o) v) m))\n       (-invoke [_ a b c d e f g h i j k l m-arg n o p]\n                (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o p) v) m))\n       (-invoke [_ a b c d e f g h i j k l m-arg n o p q]\n                (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o p q) v) m))\n       (-invoke [_ a b c d e f g h i j k l m-arg n o p q r]\n                (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o p q r) v) m))\n       (-invoke [_ a b c d e f g h i j k l m-arg n o p q r s]\n                (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o p q r s) v) m))\n       (-invoke [_ a b c d e f g h i j k l m-arg n o p q r s t]\n                (Structure. orientation (mapv #(% a b c d e f g h i j k l m-arg n o p q r s t) v) m))\n       (-invoke [_ a b c d e f g h i j k l m-arg n o p q r s t rest]\n                (Structure. orientation (mapv #(apply % a b c d e f g h i j k l m-arg n o p q r s t rest) v) m))\n       ]))\n\n#?(:clj\n   (defmethod print-method Structure [^Structure s w]\n     (-> (list* ((.-orientation s) orientation->symbol)\n                (.-v s))\n         (print-method w))))\n\n;; ## Component Accessors\n\n(defn structure->vector\n  \"Return the structure `s` in unoriented vector form.\"\n  [s]\n  (cond (vector? s)             s\n        (instance? Structure s) (.-v ^Structure s)\n        :else\n        (u/illegal (str \"non-structure supplied: \" s))))\n\n(defn orientation\n  \"Returns the orientation of `s`, either `::up` or `::down`. Defaults to `::up`,\n  even for non-structures.\"\n  [s]\n  (if (instance? Structure s)\n    (.-orientation ^Structure s)\n    ::up))\n\n(defn ^:no-doc s:count\n  \"Returns the count for sequential `s`, `1` otherwise.\"\n  [s]\n  (if (sequential? s)\n    (count s)\n    1))\n\n(defn dimension\n  \"If `s` is sequential, returns its dimension, ie, the total number of\n  non-sequential entries in the structure. Else, returns 1.\"\n  [s]\n  (if (sequential? s)\n    (-> s flatten count)\n    1))\n\n(defn ^:no-doc s:nth\n  \"Structure-specific version of `nth`; acts as [[clojure.core/nth]] for\n  structural things.\n\n  For non-sequential things, if `i` is `0`, acts as identity. Throws otherwise.\"\n  [s i]\n  (cond (sequential? s) (nth s i)\n        (= i 0)         s\n        :else\n        (u/illegal\n         (str \"non-sequential s:nth not supported: \"\n              s \" with index != 0: \" i))))\n\n(defn component\n  \"Given an access chain (a sequence of indices), return a function that accepts a\n  structure and returns the element at the specified access chain.\"\n  [& indices]\n  #(get-in % indices))\n\n;; ## Structure Predicates\n;;\n;; `::down` instances should never be equal to collections, or `::up`. By\n;; default in Clojure, all collections compare as if they were sequences, so an\n;; up can't equal a down... but a vector would! This change fixes that.\n\n(defmethod v/= [::down ::up] [_ _] false)\n(defmethod v/= [::up ::down] [_ _] false)\n(defmethod v/= [::down v/seqtype] [_ _] false)\n(defmethod v/= [v/seqtype ::down] [_ _] false)\n(prefer-method v/= [::up ::down] [v/seqtype ::down])\n(prefer-method v/= [::down ::up] [::down v/seqtype])\n\n(defn- s:=\n  \"Returns true if the supplied structure `this` is equal to the argument on the\n  right, false otherwise.\n\n  Structures are equal to:\n\n  - other structures that are deep-equal, including orientation\n  - other sequences (only for `::up` structures) - the outer sequence is treated\n    as an `::up` structure\"\n  [^Structure this that]\n  (cond (instance? Structure that)\n        (let [^Structure s that]\n          (and (= (.-orientation this)\n                  (.-orientation s))\n               (v/= (.-v this)\n                    (.-v s))))\n\n        (= (.-orientation this) ::up)\n        (cond (vector? that)   (v/= (.-v this) that)\n              (seqable? that) (v/= (seq this) (seq that))\n              :else false)\n        :else false))\n\n(defn structure?\n  \"Returns `true` if `s` is a structure, false otherwise. (Vectors are treated as\n  up structures.)\"\n  [s]\n  (or (instance? Structure s)\n      (vector? s)))\n\n(defn up?\n  \"Returns `true` if `s` is an `up` structure, false otherwise.\"\n  [s]\n  (or (vector? s)\n      (and (instance? Structure s)\n           (= ::up (.-orientation ^Structure s)))))\n\n(defn down?\n  \"Returns `true` if `s` is a `down` structure, false otherwise.\"\n  [s]\n  (and (instance? Structure s)\n       (= ::down (.-orientation ^Structure s))))\n\n(defn valid-orientation?\n  \"Returns true if the supplied orientation lives in the set of allowed\n  orientations, false otherwise.\"\n  [o]\n  (contains? #{::up ::down} o))\n\n(defn same-orientation?\n  \"Returns true if the supplied structures have the same orientation, false\n  otherwise.\"\n  [s t]\n  (= (orientation s)\n     (orientation t)))\n\n;; ## 2 tensors\n;;\n;; A 2 tensor built from structures is an outer structure populated with inner\n;; structures, all with the same orientation and size.\n\n(defn two-tensor-info\n  \"Given an `up` or `down` structure containing structures of the same\n  orientation and size (a 2 tensor), returns a dictionary with keys:\n\n  ```clj\n  {:outer-orientation <::up or ::down>\n   :inner-orientation <::up or ::down>\n   :outer-size <int>\n   :inner-size <int>}\n\n  If `s` is /not/ a valid tensor, returns nil.\n  ```\"\n  [s]\n  (let [outer-size         (count s)\n        outer-orientation  (orientation s)\n        inner-sizes        (into #{} (map #(if (structure? %) (count %) 1)) s)\n        inner-orientations (into #{} (map orientation) s)]\n    (when (and (every? structure? s)\n               (= 1 (count inner-orientations))\n               (= 1 (count inner-sizes)))\n      {:outer-orientation outer-orientation\n       :inner-orientation (first inner-orientations)\n       :outer-size outer-size\n       :inner-size (first inner-sizes)})))\n\n(defn- tensor-pred\n  \"Given `outer` and `inner` orientations, returns a function of a structure `s`\n  that returns true if `s` is a two tensor whose `inner` and `outer`\n  orientations match the supplied arguments, false otherwise.\"\n  [outer inner]\n  (fn [s]\n    (boolean\n     (when-let [m (two-tensor-info s)]\n       (and (= outer (:outer-orientation m))\n            (= inner (:inner-orientation m)))))))\n\n(defn two-tensor?\n  \"Returns true if `s` is an `up` or `down` structure containing all `up` or\n  `down` structures of internally-matching orientation and size, false\n  otherwise.\"\n  [s]\n  (boolean\n   (two-tensor-info s)))\n\n(def ^{:doc \"Returns true if `s` is a `down` structure containing all `down`\nstructures of the same size, false otherwise.\"\n       :arglists '([s])}\n  two-down?\n  (tensor-pred ::down ::down))\n\n(def ^{:doc \"Returns true if `s` is an `up` structure containing all `up`\nstructures of the same size, false otherwise.\"\n       :arglists '([s])}\n  two-up?\n  (tensor-pred ::up ::up))\n\n(def ^{:doc \"Returns true if `s` is an `up` structure containing all `down`\nstructures of the same size, false otherwise.\"\n       :arglists '([s])}\n  up-of-downs?\n  (tensor-pred ::up ::down))\n\n(def ^{:doc \"Returns true if `s` is a `down` structure containing all `up`\n structures of the same size, false otherwise.\"\n       :arglists '([s])}\n  down-of-ups?\n  (tensor-pred ::down ::up))\n\n;; ## Constructors\n\n(defn make\n  \"Generate a structure with the supplied orientation, given some sequence `xs`\"\n  [orientation xs]\n  (let [xs (if (vector? xs) xs (into [] xs))]\n    (->Structure orientation xs nil)))\n\n(defn up*\n  \"Construct an up (contravariant) tuple from the supplied sequence. For a\n  variadic version, see [[up]].\"\n  [xs]\n  (make ::up xs))\n\n(defn vector->up\n  \"Form an up-tuple from a vector.\n\n  NOTE that this is an alias of [[up*]] that is more restrictive, in that it\n  only accepts a vector. Use [[up*]] if you'd like to pass an arbitrary\n  sequence. (If you pass a vector to [[up*]]) it will be just as efficient.\"\n  [v]\n  {:pre [(vector? v)]}\n  (->Structure ::up v nil))\n\n(defn up\n  \"Construct an up (contravariant) tuple from the arguments.\n\n  Variadic version of [[up*]].\"\n  [& xs]\n  (up* xs))\n\n(defn down*\n  \"Construct a down (covariant) tuple from the supplied sequence. For a\n  variadic version, see [[down]].\"\n  [xs]\n  (make ::down xs))\n\n(defn vector->down\n  \"Form a down-tuple from a vector.\n\n  NOTE that this is an alias of [[down*]] that is more restrictive, in that it\n  only accepts a vector. Use [[down*]] if you'd like to pass an arbitrary\n  sequence. (If you pass a vector to [[down*]]) it will be just as efficient.\"\n  [v]\n  {:pre [(vector? v)]}\n  (->Structure ::down v nil))\n\n(defn down\n  \"Construct a down (covariant) tuple from the arguments. Variadic version\n  of [[down*]].\"\n  [& xs]\n  (make ::down xs))\n\n(defn same\n  \"Returns a structure containing `xs` with the same orientation as `s`.\"\n  [s xs]\n  (make (orientation s) xs))\n\n(defn opposite\n  \"For a non-[[Structure]] `s`, the single-arity case acts as [[identity]]. For\n  a [[Structure]], returns an identical structure with its orientation\n  reversed (up becomes down, down becomes up).\n\n  NOTE that a vector is interpreted as an `up` structure, so:\n\n  (opposite [1 2 3])\n  ;;=> (down 1 2 3)\n\n  The two-arity case returns a new [[Structure]] of opposite orientation to `s`\n  with the contents of the sequence `xs`.\"\n  ([s]\n   (if (structure? s)\n     (opposite s (structure->vector s))\n     s))\n  ([s xs]\n   (let [o (opposite-orientation\n            (orientation s))]\n     (make o xs))))\n\n(defn generate\n  \"Generate a structure with the given `orientation` whose elements are\n\n  (f i)\n\n  where i ranges from `[0..dimension)`.\"\n  [dimension orientation f]\n  {:pre [(valid-orientation? orientation)]}\n  (->Structure orientation (mapv f (range dimension)) nil))\n\n(defn literal\n  \"Generates a structure of the specified `orientation` and dimension `size`\n  populated by symbolic entries, each prefixed by the supplied symbol `sym`.\n\n  For example:\n\n  (= (literal 'x 3 ::s/up)\n     (up 'x\u21910 'x\u21911 'x\u21912))\n\n  See [[literal-up]] and [[literal-down]] for constructors with baked in\n  orientations.\"\n  [sym size orientation]\n  {:pre [(valid-orientation? orientation)]}\n  (let [separator (orientation->separator orientation)\n        prefix    (str sym separator)]\n    (generate size orientation\n              (fn [i]\n                (symbol (str prefix i))))))\n\n(defn literal-up\n  \"Generates an `up` structure of dimension `size` populated by symbolic entries,\n  each prefixed by the supplied symbol `sym`.\n\n  For example:\n\n  ```clojure\n  (= (literal-up 'x 3)\n     (up 'x\u21910 'x\u21911 'x\u21912))\n  ```\"\n  [sym size]\n  (literal sym size ::up))\n\n(defn literal-down\n  \"Generates a `down` structure of dimension `size` populated by symbolic entries,\n  each prefixed by the supplied symbol `sym`.\n\n  For example:\n\n  ```clojure\n  (= (literal-down 'x 3)\n     (down 'x_0 'x_1 'x_2))\n  ```\"\n  [sym size]\n  (literal sym size ::down))\n\n;; ## Structure Mappers, Aggregators\n;;\n;; The following functions only make sense if, when there is more than one\n;; structure they are all isomorphic.\n\n(defn- sum:l\n  \"Returns the sum of all values generated by mapping `f` across the same-indexed\n  entries of all supplied structures, one level deep.\"\n  [f [s :as structs]]\n  (ua/generic-sum (fn [i]\n                    (let [xs (map #(s:nth % i) structs)]\n                      (apply f xs)))\n                  0\n                  (count s)))\n\n(defn- sum:r:l\n  \"Accepts a function `f` and a sequence of isomorphic `structures`; returns the\n  sum of the values returned from applying `f` to each associated set of entries\n  in each input structure.\"\n  [f structures]\n  (sum:l (fn [& elements]\n           (if (structure? (first elements))\n             (sum:r:l f elements)\n             (apply f elements)))\n         structures))\n\n(defn sumr\n  \"Given some function `f` and any number of isomorphic `structures`,\n  returns the sum of the results of applying `f` to each associated set of\n  entries in each `structure`.\"\n  [f & structures]\n  (sum:r:l f structures))\n\n(defn- map:l\n  \"Returns a new structure generated by mapping `f` across the same-indexed\n  entries of all supplied structures, one level deep.\"\n  [f [s :as structs]]\n  (if (structure? s)\n    (generate (count s)\n              (orientation s)\n              (fn [i]\n                (let [xs (map #(s:nth % i) structs)]\n                  (apply f xs))))\n    (apply f structs)))\n\n(defn- map:r:l\n  \"Accepts some function `f` and a sequence of isomorphic `structures`; returns a\n  structure of the same shape, with `f` applied to the associated entry of each\n  input structure.\"\n  [f structures]\n  (map:l (fn [& elements]\n           (if (structure? (first elements))\n             (map:r:l f elements)\n             (apply f elements)))\n         structures))\n\n(defn mapr\n  \"Return a structure with the same shape as s but with f applied to each\n  primitive (that is, not structural) component.\"\n  [f & structures]\n  (map:r:l f structures))\n\n(defn map-chain\n  \"Returns a new structure of equivalent shape to `s`, generated by applying `f`\n  to three arguments:\n\n  - the entry in the structure\n  - a vector of its 'access chain', ie, the path you'd pass\n    to [[clojure.core/get-in]] to access the entry\n  - a vector of orientations associated with each index in the access chain\n\n  For example:\n\n  ```clojure\n  (dorun (map-chain println (s/down (s/up 1 2) (s/up 3 4))))\n\n  1 [0 0] [:s/down :s/up]\n  2 [0 1] [:s/down :s/up]\n  3 [1 0] [:s/down :s/up]\n  4 [1 1] [:s/down :s/up]\n  ```\"\n  [f s]\n  (letfn [(walk [s chain orientations]\n            (if (structure? s)\n              (let [o (orientation s)]\n                (generate (count s)\n                          (orientation s)\n                          (fn [i]\n                            (walk (s:nth s i)\n                                  (conj chain i)\n                                  (conj orientations o)))))\n              (f s chain orientations)))]\n    (walk s [] [])))\n\n(defn structure->access-chains\n  \"Return a structure of the same shape as `s` whose elements are access chains\n  corresponding to position of each element (i.e., the sequence of indices\n  needed to address that element via [[get-in]]).\n\n  Each access chain has the sequence of orientations (`::s/up`, `::s/down`)\n  associated with each step attached to it as metadata, under an `:orientations`\n  key. Use this if the orientation of the indices matters.\"\n  [s]\n  (when (structure? s)\n    (map-chain (fn [_ chain orientations]\n                 ;; subtle (I'm afraid). Here is where we put\n                 ;; the access chain into the new structure.\n                 ;; But if we put it in as a vector, that would\n                 ;; introduce a new layer of structure since\n                 ;; vectors are considered up-tuples. So we\n                 ;; have to turn it into a seq, which will\n                 ;; forfeit structure-nature.\n                 (-> (seq chain)\n                     (with-meta {:orientations orientations})))\n               s)))\n\n(defn structure->prototype\n  \"Accepts\n\n  - some symbolic (or string) `name`\n  - a structure `s`\n\n  and returns a new structure of identical shape, with symbolic entries like\n  `'x\u21910_1` that show their access chain with proper orientations for each step.\"\n  [name s]\n  (mapr (fn [chain]\n          (let [separators (->> (meta chain)\n                                (:orientations)\n                                (map orientation->separator))\n                path-seq   (map str separators chain)]\n            (symbol\n             (apply str name path-seq))))\n        (structure->access-chains s)))\n\n(defn unflatten\n  \"Given:\n\n  - a sequence of `values`\n  - a model `struct`\n\n  Returns a new structure generated by unpacking `values` into a structure with\n  the same shape as `struct`.\"\n  ([values struct]\n   (unflatten same values struct))\n  ([constructor values struct]\n   (letfn [(u [values struct]\n             (if (structure? struct)\n               (let [[values' struct']\n                     (reduce (fn [[values struct] element]\n                               (let [[values' struct'] (u values element)]\n                                 [values' (conj struct struct')]))\n                             [values []]\n                             struct)]\n                 [values' (constructor struct struct')])\n               [(rest values) (first values)]))]\n     (second (u values struct)))))\n\n(defn transpose\n  \"Returns a structure with the same shape as `s`, with all orientations\n  inverted.\"\n  [s]\n  (if (structure? s)\n    (->Structure (opposite-orientation (orientation s))\n                 (mapv transpose (structure->vector s))\n                 (meta s))\n    s))\n\n(defn transpose-outer\n  \"Returns a new structure with the same orientation as the first element of `s`,\n  filled with elements of the same orientation as `s`.\n\n  Each element is generating by taking the first element of each entry in `s`,\n  the the second, etc... In that sense this is similar to a traditional matrix\n  transpose.\n\n  A comment from `scmutils` states:\n\n  'used only in symmetrize-Christoffel in\n  src/calculus/covariant-derivative.scm.'\"\n  [s]\n  (let [o (orientation s)]\n    (map:l (fn [& xs]\n             (make o xs))\n           s)))\n\n(defn typical-object\n  \"Returns a structure of the same shape and orientation as `s`, generated by\n  substituting gensymmed symbols in for each entry.\"\n  [s]\n  (mapr (fn [_] (gensym 'x)) s))\n\n(defn compatible-zero\n  \"Returns a structure compatible for multiplication with `s` down to 0.\"\n  [s]\n  (v/zero-like\n   (transpose s)))\n\n(def ^{:doc \"Alias for [[compatible-zero]].\"}\n  dual-zero\n  compatible-zero)\n\n(defn compatible-shape\n  \"Returns a structure compatible for multiplication with `s` down to a scalar,\n  with the slots filled with gensyms.\"\n  [s]\n  (typical-object\n   (transpose s)))\n\n(defn ^:no-doc structure*scalar\n  \"Returns a structure generated by multiplying every element of `v` by `s` (on\n  the right).\"\n  [v s]\n  (same v (map #(g/* % s) v)))\n\n(defn ^:no-doc scalar*structure\n  \"Returns a structure generated by multiplying every element of `v` by `s` (on\n  the left).\"\n  [s v]\n  (same v (map #(g/* s %) v)))\n\n(defn ^:no-doc compatible-for-contraction?\n  \"Returns `true` if `s` and `t` are\n\n  - of opposite orientation\n  - equal in length\n  - are full of elements also compatible for contraction (also true if either\n    pair is NOT a structure)\n\n  false otherwise.\"\n  [s t]\n  (and (not (same-orientation? s t))\n       (= (count s) (count t))\n       (every? (fn [[l r]]\n                 (or (not (structure? l))\n                     (not (structure? r))\n                     (compatible-for-contraction? l r)))\n               (map vector s t))))\n\n(defn vector-dot-product\n  \"Returns the (vector) dot product of `v1` and `v2`; this is equivalent to the sum\n  of the pairwise product of each entry.\n\n  The arguments must have identical length, and all pairwise entries must be\n  compatible via [[g/*]].\"\n  [v1 v2]\n  (assert (= (count v1) (count v2))\n          (str \"Not same dimension -- v:dot-product\"\n               v1 \", \" v2))\n  (apply g/+ (map g/* v1 v2)))\n\n(defn vector-inner-product\n  \"Returns the (vector) inner product of `v1` and `v2`; this is equivalent to the\n  sum of the pairwise product of each entry.\n\n    This is equivalent to [[vector-dot-product]] with every element of `v1`\n  transformed into its complex conjugate.\n\n  The arguments must have identical length, and all pairwise entries must be\n  compatible via [[g/*]].\"\n  [v1 v2]\n  (vector-dot-product\n   (g/conjugate v1) v2))\n\n(defn ^:no-doc s:*\n  \"If `s` and `t` are compatible for contraction, returns their vector dot\n  product.\n\n  Else, returns a new structure generated by multiplying `s` by every element of\n  `t`, following the usual multiplicating rules for whatever entry type exists.\n\n  If `*allow-incompatible-multiplication*` is set to false, `s` and `t` will be\n  checked for:\n\n  - opposite orientations,\n  - every element of `t` must be compatible for multiplication with all of `s`.\n\n  If those tests fail, `s:*` will throw.\"\n  [s t]\n  (cond (compatible-for-contraction? s t)\n        (vector-dot-product s t)\n\n        (or *allow-incompatible-multiplication*\n            (and (not (same-orientation? s t))\n                 (every? (fn [elem]\n                           (compatible-for-contraction? s elem))\n                         t)))\n        (scalar*structure s t)\n\n        :else (u/illegal\n               (str \"Incompatible multiplication: \" s t))))\n\n;; NOTE hmmm. why not do the repeated-squaring trick here? perhaps structures\n;; are not typically raised to high exponents.\n\n(defn- expt\n  \"Raise the structure `s` to the nth power.\"\n  [s n]\n  (let [one (v/one-like n)]\n    (cond (v/one? n) s\n          (> n one) (g/* s (g/expt s (g/- n one)))\n          :else (u/arithmetic-ex (str \"Cannot: \" `(expt ~s ~n))))))\n\n(defn- dot-product\n  \"Returns the structural dot product of the compatible structures `s` and\n  `t`.\n\n  To be compatible, both structures must have the same structure.\"\n  [s t]\n  (let [s' (transpose s)]\n    (if (compatible-for-contraction? s' t)\n      (vector-dot-product s' t)\n      (u/illegal (str \"incompatible structures: dot-product \"\n                      s \", \" t)))))\n\n(defn- inner-product\n  \"Returns the structural inner product of the compatible structures `s` and `t`.\n  This is equivalent to [[dot-product]] with every element of `s` transformed\n  into its complex conjugate.\n\n  To be compatible, both structures must be of the same orientation and\n  dimension. The internal structures currently do NOT have to match.\"\n  [s t]\n  (dot-product (g/conjugate s) t))\n\n(defn- outer-product\n  \"The outer product of s and t is the structure `struct1` with each element at\n  the first level multiplied by all of `struct2`, following the usual structure\n  multiplication rules.\"\n  [struct2 struct1]\n  (letfn [(xform [s1]\n            (mapr (fn [s2]\n                    (g/* s1 s2))\n                  struct2))]\n    (mapr xform struct1)))\n\n(defn ^:no-doc cross-product\n  \"Returns the cross product of structures of length 3. Input orientations are\n  ignored; result is an up-tuple.\"\n  [s t]\n  (when (or (not= (count s) 3)\n            (not= (count t) 3))\n    (u/illegal \"cross product only works on two elements of ^3\"))\n  (let [[s0 s1 s2] s\n        [t0 t1 t2] t]\n    (up (g/- (g/* s1 t2) (g/* s2 t1))\n        (g/- (g/* s2 t0) (g/* s0 t2))\n        (g/- (g/* s0 t1) (g/* s1 t0)))))\n\n;; ## Generic Method Installation\n\n(defn- elementwise\n  \"Given a binary operator and two structures of the same size, return\n  a structure with the same orientation as the first formed from the\n  elementwise binary operation between corresponding elements of the\n  structures.\"\n  [op s t]\n  (if (= (count s) (count t))\n    (->Structure (orientation s) (mapv op s t) nil)\n    (u/arithmetic-ex (str op \" provided arguments of differing length\"))))\n\n(defmethod g/add [::down ::down] [a b] (elementwise g/+ a b))\n(defmethod g/add [::up ::up] [a b] (elementwise g/+ a b))\n\n(defmethod g/negate [::structure] [a] (mapr g/negate a))\n(defmethod g/sub [::down ::down] [a b] (elementwise g/- a b))\n(defmethod g/sub [::up ::up] [a b] (elementwise g/- a b))\n\n(defmethod g/mul [::structure ::structure] [a b] (s:* a b))\n(defmethod g/mul [::structure ::v/scalar] [a b] (structure*scalar a b))\n(defmethod g/mul [::v/scalar ::structure] [a b] (scalar*structure a b))\n\n(defmethod g/div [::structure ::v/scalar] [a b] (structure*scalar a (g/invert b)))\n\n;; NOTE: structures extend `::f/cofunction`, so when you multiply a function by\n;; a structure, the multiplication is deferred to multiplication between the\n;; structure and the function's return value.\n;;\n;; This is NOT the case with operator / structure multiplication. Operators push\n;; their multiplication inside of the structure; the return value is a structure\n;; of the same shape.\n\n(defmethod g/mul [::o/operator ::structure] [op s]\n  (same s (map #(g/* op %) s)))\n\n(defmethod g/mul [::structure ::o/operator] [s op]\n  (same s (map #(g/* % op) s)))\n\n(defmethod g/square [::structure] [a] (dot-product a a))\n(defmethod g/cube [::structure] [a] (s:* a (s:* a a)))\n(defmethod g/expt [::structure ::v/integral] [a b] (expt a b))\n(defmethod g/simplify [::structure] [a]\n  (mapr g/simplify a))\n\n(defmethod g/magnitude [::structure] [a]\n  (g/sqrt (inner-product a a)))\n\n(defmethod g/abs [::structure] [a]\n  (g/sqrt (dot-product a a)))\n\n;; NOTE: `g/make-rectangular` and `g/make-polar` _should_ check that both\n;; dimensions match all the way down, but they currently don't. Use with that in\n;; mind!\n\n(defmethod g/make-rectangular [::up ::up] [a b]\n  (mapr g/make-rectangular a b))\n\n(defmethod g/make-rectangular [::down ::down] [a b]\n  (mapr g/make-rectangular a b))\n\n(defmethod g/make-polar [::up ::up] [a b]\n  (mapr g/make-polar a b))\n\n(defmethod g/make-polar [::down ::down] [a b]\n  (mapr g/make-polar a b))\n\n(defmethod g/real-part [::structure] [m] (mapr g/real-part m))\n(defmethod g/imag-part [::structure] [m] (mapr g/imag-part m))\n(defmethod g/conjugate [::structure] [a] (mapr g/conjugate a))\n\n(defmethod g/transpose [::structure] [a] (transpose a))\n(defmethod g/dimension [::structure] [a] (dimension a))\n(defmethod g/dot-product [::structure ::structure] [a b] (dot-product a b))\n(defmethod g/inner-product [::structure ::structure] [a b] (inner-product a b))\n(defmethod g/outer-product [::structure ::structure] [a b] (outer-product a b))\n(defmethod g/cross-product [::up ::up] [a b] (cross-product a b))\n"]}