{
"version":3,
"file":"module$node_modules$three$src$math$Plane.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/three/src/math/Plane.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$math$Plane\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plane = void 0;\n\nvar _Matrix = require(\"./Matrix3.js\");\n\nvar _Vector = require(\"./Vector3.js\");\n\nconst _vector1 = /*@__PURE__*/new _Vector.Vector3();\n\nconst _vector2 = /*@__PURE__*/new _Vector.Vector3();\n\nconst _normalMatrix = /*@__PURE__*/new _Matrix.Matrix3();\n\nclass Plane {\n  constructor(normal = new _Vector.Vector3(1, 0, 0), constant = 0) {\n    // normal is assumed to be normalized\n    this.normal = normal;\n    this.constant = constant;\n  }\n\n  set(normal, constant) {\n    this.normal.copy(normal);\n    this.constant = constant;\n    return this;\n  }\n\n  setComponents(x, y, z, w) {\n    this.normal.set(x, y, z);\n    this.constant = w;\n    return this;\n  }\n\n  setFromNormalAndCoplanarPoint(normal, point) {\n    this.normal.copy(normal);\n    this.constant = -point.dot(this.normal);\n    return this;\n  }\n\n  setFromCoplanarPoints(a, b, c) {\n    const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n    this.setFromNormalAndCoplanarPoint(normal, a);\n    return this;\n  }\n\n  copy(plane) {\n    this.normal.copy(plane.normal);\n    this.constant = plane.constant;\n    return this;\n  }\n\n  normalize() {\n    // Note: will lead to a divide by zero if the plane is invalid.\n    const inverseNormalLength = 1.0 / this.normal.length();\n    this.normal.multiplyScalar(inverseNormalLength);\n    this.constant *= inverseNormalLength;\n    return this;\n  }\n\n  negate() {\n    this.constant *= -1;\n    this.normal.negate();\n    return this;\n  }\n\n  distanceToPoint(point) {\n    return this.normal.dot(point) + this.constant;\n  }\n\n  distanceToSphere(sphere) {\n    return this.distanceToPoint(sphere.center) - sphere.radius;\n  }\n\n  projectPoint(point, target) {\n    return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n  }\n\n  intersectLine(line, target) {\n    const direction = line.delta(_vector1);\n    const denominator = this.normal.dot(direction);\n\n    if (denominator === 0) {\n      // line is coplanar, return origin\n      if (this.distanceToPoint(line.start) === 0) {\n        return target.copy(line.start);\n      } // Unsure if this is the correct method to handle this case.\n\n\n      return null;\n    }\n\n    const t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n    if (t < 0 || t > 1) {\n      return null;\n    }\n\n    return target.copy(direction).multiplyScalar(t).add(line.start);\n  }\n\n  intersectsLine(line) {\n    // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n    const startSign = this.distanceToPoint(line.start);\n    const endSign = this.distanceToPoint(line.end);\n    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n  }\n\n  intersectsBox(box) {\n    return box.intersectsPlane(this);\n  }\n\n  intersectsSphere(sphere) {\n    return sphere.intersectsPlane(this);\n  }\n\n  coplanarPoint(target) {\n    return target.copy(this.normal).multiplyScalar(-this.constant);\n  }\n\n  applyMatrix4(matrix, optionalNormalMatrix) {\n    const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n    const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n    const normal = this.normal.applyMatrix3(normalMatrix).normalize();\n    this.constant = -referencePoint.dot(normal);\n    return this;\n  }\n\n  translate(offset) {\n    this.constant -= offset.dot(this.normal);\n    return this;\n  }\n\n  equals(plane) {\n    return plane.normal.equals(this.normal) && plane.constant === this.constant;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n}\n\nexports.Plane = Plane;\nPlane.prototype.isPlane = true;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Plane","_Matrix","_Vector","_vector1","Vector3","_vector2","_normalMatrix","Matrix3","constructor","normal","constant","set","copy","setComponents","x","y","z","w","setFromNormalAndCoplanarPoint","point","dot","setFromCoplanarPoints","a","b","c","subVectors","cross","normalize","plane","inverseNormalLength","length","multiplyScalar","negate","distanceToPoint","distanceToSphere","sphere","center","radius","projectPoint","target","add","intersectLine","line","direction","delta","denominator","start","t","intersectsLine","startSign","endSign","end","intersectsBox","box","intersectsPlane","intersectsSphere","coplanarPoint","applyMatrix4","matrix","optionalNormalMatrix","normalMatrix","getNormalMatrix","referencePoint","applyMatrix3","translate","offset","equals","clone","prototype","isPlane"]
}
