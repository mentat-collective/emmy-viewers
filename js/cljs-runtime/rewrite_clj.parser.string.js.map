{"version":3,"sources":["rewrite_clj/parser/string.cljc"],"mappings":";;AAQA;;;uCAAA,vCAAOA,sFAEJC,MAAoBC;AAFvB,AAGE,IAAMC,IAAE,AAAWD;AAAnB,AACmC,AAAQA;;AACzC,OAACE,6CAAKH,MAAME;;AAEhB,6CAAA,7CAAOE,kGACiBC;AADxB,AAEE,AAACC,0BAAcD;;AACf,IAAMJ,MAAI,KAAAM;AAAV,AACE,oBAAA,hBAAOC;YAAP,RACOR;;AADP,AAEE,IAAAS,qBAAW,AAACE,wBAAYN;AAAxB,AAAA,oBAAAI;AAAA,QAAAA,JAASC;AAAT,AACE,GAAM,EAAK,AAACE,cAAIJ,oBAAS,OAAA,NAAYE;AAC/B,OAACX,qCAAWC,MAAMC;;AADxB,GAGM,OAAA,NAAYS;AACZ,eAAOF;eAAQ,AAACT,qCAAWC,MAAMC;;;;;AAJvC,AAOM,AACE,AAASA,WAAIS;;AACb,eAAO,EAAK,AAACE,cAAIJ,oBAAS,OAAA,NAAYE;eAAOV;;;;;;;;AACrD,8CAAA,vCAACa,gCAAoBR;;;;;AAE7B,yCAAA,zCAAMS,0FACkBT;AADxB,AAEE,OAACU,qCAAoB,AAACX,2CAAiBC;;AAEzC,wCAAA,xCAAMW,wFACkBX;AADxB,AAEE,IAAMY,IAAE,AAACb,2CAAiBC;AAA1B,AACE,yDAAA,lDAACa,uDAAiBD","names":["rewrite-clj.parser.string/flush-into","lines","buf","s","cljs.core.conj","rewrite-clj.parser.string/read-string-data","reader","rewrite-clj.reader/ignore","js/goog.string.StringBuffer","escape?","temp__5751__auto__","c","rewrite-clj.reader/next","cljs.core/not","rewrite-clj.reader/throw-reader","rewrite-clj.parser.string/parse-string","rewrite-clj.node.stringz/string-node","rewrite-clj.parser.string/parse-regex","h","clojure.string.join"],"sourcesContent":["(ns ^:no-doc rewrite-clj.parser.string\n  (:require [clojure.string :as string]\n            [rewrite-clj.node.stringz :as nstring]\n            [rewrite-clj.reader :as reader])\n  #?(:cljs (:import [goog.string StringBuffer])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn- flush-into\n  \"Flush buffer and add string to the given vector.\"\n  [lines ^StringBuffer buf]\n  (let [s (.toString buf)]\n    #?(:clj (.setLength buf 0) :cljs (.clear buf))\n    (conj lines s)))\n\n(defn- read-string-data\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader)\n  (let [buf (StringBuffer.)]\n    (loop [escape? false\n           lines []]\n      (if-let [c (reader/next reader)]\n        (cond (and (not escape?) (identical? c \\\"))\n              (flush-into lines buf)\n\n              (identical? c \\newline)\n              (recur escape? (flush-into lines buf))\n\n              :else\n              (do\n                (.append buf c)\n                (recur (and (not escape?) (identical? c \\\\)) lines)))\n        (reader/throw-reader reader \"Unexpected EOF while reading string.\")))))\n\n(defn parse-string\n  [#?(:cljs ^not-native reader :default reader)]\n  (nstring/string-node (read-string-data reader)))\n\n(defn parse-regex\n  [#?(:cljs ^not-native reader :default reader)]\n  (let [h (read-string-data reader)]\n    (string/join \"\\n\" h)))\n"]}