{"version":3,"sources":["sicmutils/calculus/covariant.cljc"],"mappings":"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","names":["sicmutils.calculus.covariant/vector-field-Lie-derivative","X","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","freeze-X","sicmutils.value/freeze","op-name","Y","sicmutils.function/function?","sicmutils.calculus.vector-field/vector-field?","sicmutils.operator/commutator","sicmutils.calculus.form-field/form-field?","k","sicmutils.calculus.form-field/get-rank","op","vectors","cljs.core.into","js/Error","cljs.core._EQ_","cljs.core/count","cljs.core.map","cljs.core/meta","sicmutils.generic._","G__87844","fexpr__87843","sicmutils.generic/Lie-derivative","cljs.core.apply","G__87846","G__87847","G__87848","sicmutils.util.aggregate/generic-sum","i","xs","cljs.core.update","name","sicmutils.calculus.form_field.procedure__GT_nform_field","sicmutils.structure/structure?","sicmutils.structure.mapr","sicmutils.util/unsupported","sicmutils.operator.make_operator","V","sicmutils.calculus.covariant/Lie-D","R","F","sicmutils.generic._STAR_","sicmutils.calculus.derivative/D","sicmutils.calculus.covariant/interior-product","alpha","p","sicmutils.calculus.covariant/make-Cartan","forms","basis","sicmutils.calculus.covariant/Cartan?","x","sicmutils.value/kind","sicmutils.calculus.covariant/Cartan->forms","C","sicmutils.calculus.covariant/Cartan->basis","sicmutils.calculus.covariant/make-Christoffel","symbols","sicmutils.calculus.covariant/Christoffel?","sicmutils.calculus.covariant/Christoffel->symbols","sicmutils.calculus.covariant/Christoffel->basis","sicmutils.calculus.covariant/Cartan->Christoffel","Cartan","sicmutils.calculus.basis/basis->vector-basis","sicmutils.calculus.covariant/Christoffel->Cartan","Christoffel","sicmutils.calculus.basis/basis->oneform-basis","sicmutils.calculus.covariant/symmetrize-Christoffel","G","s","sicmutils.generic._SLASH_","sicmutils.generic._PLUS_","sicmutils.structure/transpose-outer","sicmutils.calculus.covariant/symmetrize-Cartan","sicmutils.calculus.covariant/Cartan-transform","cartan","basis-prime","prime-dual-basis","prime-vector-basis","vector-basis","oneform-basis","J-inv","J","omega-prime-forms","sicmutils.calculus.form_field.procedure__GT_oneform_field","u","sicmutils.calculus.covariant/Cartan->Cartan-over-map","map","sicmutils.calculus.map/basis->basis-over-map","sicmutils.calculus.map/form-field->form-field-over-map","sicmutils.calculus.covariant/covariant-derivative-vector","Cartan-forms","CV","U","u-components","deriv-components","sicmutils.calculus.vector_field.procedure__GT_vector_field","f","sicmutils.calculus.covariant/covariant-derivative-form","tau","nabla_V","G__87867","G__87868","G__87869","G__87870","sicmutils.calculus.covariant/covariant-derivative-argument-types","T","arg-types","sicmutils.calculus.indexed/argument-types","cljs.core/every?","t","cljs.core.isa_QMARK_","types","args","targs","factors","cljs.core/empty?","G__87896","sicmutils.generic/*","sicmutils.calculus.basis/contract","e","w","cljs.core/first","lp","cljs.core/rest","cljs.core.conj","G__87899","sicmutils.calculus.form-field/oneform-field?","fexpr__87900","argv","VT","corrections","G__87901","cljs.core.map_indexed","type","fexpr__87902","cljs.core.nth","cljs.core.assoc","sicmutils.generic/negate","G__87903","sicmutils.calculus.indexed/with-argument-types","the-derivative","sicmutils.calculus.covariant/covariant-derivative-function","sicmutils.value/argument-kind","sicmutils.calculus.manifold/manifold-point?","G__87907","fexpr__87906","arg","fexpr__87908","sicmutils.util/illegal","sicmutils.calculus.covariant/covariant-derivative-ordinary","fexpr__87920","fexpr__87922","sicmutils.calculus.indexed/has-argument-types?","fexpr__87923","fexpr__87924","nabla_X","var_args","G__87926","sicmutils.calculus.covariant/covariant-derivative","mapped","sicmutils.function$.compose","sicmutils.calculus.map/differential","sicmutils.calculus.covariant/covariant-differential","fexpr__87927","sicmutils.calculus.covariant.covariant_derivative","sicmutils.calculus.covariant/geodesic-equation","source-coordsys","target-coordsys","Cartan-on-target","gamma","source-m","sicmutils.calculus.manifold/manifold","sicmutils.calculus.vector-field/coordinate-system->vector-basis","fexpr__87941","G__87946","fexpr__87945","G__87948","fexpr__87947","fexpr__87949","sicmutils.calculus.manifold/chart","sicmutils.calculus.covariant/parallel-transport-equation","vector-over-gamma","fexpr__87954","G__87957","fexpr__87956","fexpr__87958"],"sourcesContent":["#_\"SPDX-License-Identifier: GPL-3.0\"\n\n(ns sicmutils.calculus.covariant\n  (:require [sicmutils.calculus.basis :as b]\n            [sicmutils.calculus.derivative :refer [D]]\n            [sicmutils.calculus.form-field :as ff]\n            [sicmutils.calculus.indexed :as ci]\n            [sicmutils.calculus.manifold :as manifold]\n            [sicmutils.calculus.map :as cm]\n            [sicmutils.calculus.vector-field :as vf]\n            [sicmutils.function :as f]\n            [sicmutils.generic :as g]\n            [sicmutils.operator :as o]\n            [sicmutils.structure :as s]\n            [sicmutils.util :as u]\n            [sicmutils.util.aggregate :as ua]\n            [sicmutils.value :as v]))\n\n;; This comes from `Lie.scm`.\n\n(defn- vector-field-Lie-derivative [X]\n  (let [freeze-X (v/freeze X)\n        op-name `(~'Lie-derivative ~freeze-X)]\n    (-> (fn rec [Y]\n          (cond (f/function? Y)      (X Y)\n                (vf/vector-field? Y) (o/commutator X Y)\n\n                (ff/form-field? Y)\n                (let [k (ff/get-rank Y)\n                      op (fn [& vectors]\n                           (let [vectors (into [] vectors)]\n                             (assert (= k (count vectors))\n                                     `(~'\u2260 ~k ~(count vectors)\n                                       ~@vectors\n                                       ~@(map meta vectors)))\n                             (g/- ((g/Lie-derivative X) (apply Y vectors))\n                                  (ua/generic-sum\n                                   (fn [i]\n                                     (let [xs (update vectors i (g/Lie-derivative X))]\n                                       (apply Y xs)))\n                                   0 k))))\n                      name `((~'Lie-derivative ~freeze-X) ~(v/freeze Y))]\n                  (ff/procedure->nform-field op k name))\n\n                (s/structure? Y)\n                (s/mapr (vector-field-Lie-derivative X) Y)\n\n                :else (u/unsupported \"Bad argument: Lie Derivative\")))\n        (o/make-operator op-name))))\n\n(defmethod g/Lie-derivative [::vf/vector-field] [V]\n  (vector-field-Lie-derivative V))\n\n;; ## From ODE.scm:\n;;\n;; Let (sigma t) be the state of a system at time t.  Let the\n;; (first-order) system of differential equations governing the evolution of\n;; this state be:\n\n;; ((D sigma) t) = (R (sigma t))\n;; or  (D sigma) = (compose R sigma)\n\n;; i.e. R is a system derivative.\n\n;; Let F be any function of state, then a differential equation for the\n;; evolution of F, as it is dragged along the integral curve sigma is:\n\n;; (D (compose F sigma)) = (* (compose (D F) sigma) (D sigma))\n;; = (compose (* (D F) R) sigma)\n\n;; Let's call this operation Lie-D (the Lie derivative for coordinates):\n\n(defn Lie-D\n  \"Takes a system derivative `R` and returns a operator that takes a function `F`\n  of coordinatized state and performs the operation described below, from\n  ODE.scm in scmutils:\n\n  Let `(sigma t)` be the state of a system at time `t`. Let the\n  (first-order) system of differential equations governing the evolution of\n  this state be:\n\n  ```clojure\n  ((D sigma) t) = (R (sigma t))\n  ```\n\n  ```clojure\n  (D sigma) = (compose R sigma)\n  ```\n\n  i.e. `R` is a system derivative.\n\n  Let `F` be any function of state, then a differential equation for the\n  evolution of `F`, as it is dragged along the integral curve sigma is:\n\n  ```clojure\n  (D (compose F sigma)) = (* (compose (D F) sigma) (D sigma))\n  = (compose (* (D F) R) sigma)\n  ```\n\n  Let's call this operation `Lie-D` (the Lie derivative for coordinates).\"\n  [R]\n  (-> (fn [F]\n        (g/* (D F) R))\n      (o/make-operator\n       (list 'Lie-D (v/freeze R)))))\n\n;; ## Interior Product, from interior-product.scm\n\n(defn interior-product [X]\n  (assert (vf/vector-field? X))\n  (fn ix [alpha]\n    (assert (ff/form-field? alpha))\n    (let [p (ff/get-rank alpha)]\n      (assert (> p 0)\n              \"Rank of form not greater than zero: interior-product\")\n      (ff/procedure->nform-field\n       (fn the-product [& vectors]\n         (assert (= (dec p) (count vectors)))\n         (apply alpha X vectors))\n       (dec p)\n       `((~'interior-product ~(v/freeze X))\n         ~(v/freeze alpha))))))\n\n;; ## Covariant Derivative, from covariant-derivative.scm\n\n(defn make-Cartan\n  [forms basis]\n  {:type ::Cartan\n   :forms forms\n   :basis basis})\n\n(defn Cartan? [x]\n  (= (v/kind x) ::Cartan))\n\n(defn Cartan->forms [C]\n  (:forms C))\n\n(defn Cartan->basis [C]\n  (:basis C))\n\n(defn make-Christoffel\n  \"Returns a data structure representing [Christoffel symbols of the second\n  kind](https://en.wikipedia.org/wiki/Christoffel_symbols#Christoffel_symbols_of_the_second_kind_(symmetric_definition)).\"\n  [symbols basis]\n  {:type ::Christoffel\n   :symbols symbols\n   :basis basis})\n\n(defn Christoffel? [x]\n  (= (v/kind x) ::Christoffel))\n\n(defn Christoffel->symbols [C]\n  (:symbols C))\n\n(defn Christoffel->basis [C]\n  (:basis C))\n\n(defn Cartan->Christoffel [Cartan]\n  {:pre [(Cartan? Cartan)]}\n  (let [basis (Cartan->basis Cartan)\n        forms (Cartan->forms Cartan)]\n    (make-Christoffel\n     (s/mapr forms (b/basis->vector-basis basis))\n     basis)))\n\n(defn Christoffel->Cartan [Christoffel]\n  {:pre [(Christoffel? Christoffel)]}\n  (let [basis   (Christoffel->basis Christoffel)\n        symbols (Christoffel->symbols Christoffel)]\n    (make-Cartan\n     (g/* symbols (b/basis->oneform-basis basis))\n     basis)))\n\n(defn symmetrize-Christoffel [G]\n  (let [s (Christoffel->symbols G)]\n    (make-Christoffel\n     (g/* (g// 1 2)\n          (g/+ s (s/transpose-outer s)))\n     (Christoffel->basis G))))\n\n(defn symmetrize-Cartan [Cartan]\n  (Christoffel->Cartan\n   (symmetrize-Christoffel\n    (Cartan->Christoffel Cartan))))\n\n(defn Cartan-transform\n  [cartan basis-prime]\n  (let [basis (Cartan->basis cartan) ;; tuple of basis vectors\n        forms (Cartan->forms cartan)\n        prime-dual-basis (b/basis->oneform-basis basis-prime)\n        prime-vector-basis (b/basis->vector-basis basis-prime)\n        vector-basis (b/basis->vector-basis basis)\n        oneform-basis (b/basis->oneform-basis basis)\n        J-inv (s/mapr oneform-basis prime-vector-basis)\n        J (s/mapr prime-dual-basis vector-basis)\n        omega-prime-forms (ff/procedure->oneform-field\n                           (fn [u]\n                             (g/+\n                              (g/* J (u J-inv))\n                              (g/* J (g/* (forms u) J-inv))))\n                           'omega-prime-forms)]\n    (make-Cartan omega-prime-forms basis-prime)))\n\n(defn Cartan->Cartan-over-map [Cartan map]\n  (let [basis (cm/basis->basis-over-map\n               map (Cartan->basis Cartan))\n        forms (s/mapr (cm/form-field->form-field-over-map map)\n                      (Cartan->forms Cartan))]\n    (make-Cartan forms basis)))\n\n;; ### Covariant Vector Definition\n\n(defn- covariant-derivative-vector [Cartan]\n  (let [basis (Cartan->basis Cartan)\n        Cartan-forms (Cartan->forms Cartan)\n        vector-basis (b/basis->vector-basis basis)\n        oneform-basis (b/basis->oneform-basis basis)]\n    (fn [V]\n      (let [CV (Cartan-forms V)]\n        (fn [U]\n          (let [u-components (oneform-basis U)\n                deriv-components (g/+ (V u-components)\n                                      (g/* CV u-components))]\n            (vf/procedure->vector-field\n             (fn the-derivative [f]\n               (g/* (vector-basis f) deriv-components))\n             `((~'nabla ~(v/freeze V))\n               ~(v/freeze U)))))))))\n\n(defn- covariant-derivative-form [Cartan]\n  (fn [V]\n    (fn [tau]\n      (let [k (ff/get-rank tau)\n            nabla_V ((covariant-derivative-vector Cartan) V)\n            op (fn [& vectors]\n                 (let [vectors (into [] vectors)]\n                   (assert (= k (count vectors)))\n                   (g/- (V (apply tau vectors))\n                        (ua/generic-sum\n                         (fn [i]\n                           (let [xs (update vectors i nabla_V)]\n                             (apply tau xs)))\n                         0 k))))\n            name `((~'nabla ~(v/freeze V))\n                   ~(v/freeze tau))]\n        (ff/procedure->nform-field op k name)))))\n\n(defn- covariant-derivative-argument-types\n  \"NOTE: Returns a derivative with the same argument types as the original input\n  function.\"\n  [Cartan]\n  (let [basis (Cartan->basis Cartan)\n        vector-basis (b/basis->vector-basis basis)\n        oneform-basis (b/basis->oneform-basis basis)\n        Cartan-forms (Cartan->forms Cartan)]\n    (fn [V]\n      (let [CV (Cartan-forms V)]\n        (fn [T]\n          (let [arg-types (ci/argument-types T)]\n            (assert\n             (every? (fn [t]\n                       (or (isa? t ::vf/vector-field)\n                           (isa? t ::ff/oneform-field)))\n                     arg-types))\n            (letfn [(lp [types args targs factors]\n                      (if (empty? types)\n                        (g/* (V (apply T targs))\n                             (apply g/* factors))\n                        (b/contract\n                         (fn [e w]\n                           (cond (isa? (first types) ::vf/vector-field)\n                                 (do (assert (vf/vector-field? (first args)))\n                                     (lp (rest types)\n                                         (rest args)\n                                         (conj targs e)\n                                         (conj factors (w (first args)))))\n\n                                 (isa? (first types) ::ff/oneform-field)\n                                 (do (assert (ff/oneform-field? (first args)))\n                                     (lp (rest types)\n                                         (rest args)\n                                         (conj targs w)\n                                         (conj factors ((first args) e))))))\n                         basis)))\n                    (the-derivative [& args]\n                      (assert (= (count args)\n                                 (count arg-types)))\n                      (let [argv (into [] args)\n                            VT (lp arg-types argv [] [])\n                            corrections (ua/generic-sum\n                                         (map-indexed\n                                          (fn [i type]\n                                            (cond\n                                              ;; positive\n                                              (isa? type ::ff/oneform-field)\n                                              (g/*\n                                               (g/* (s/mapr (fn [e]\n                                                              ((nth argv i) e))\n                                                            vector-basis)\n                                                    CV)\n                                               (s/mapr\n                                                (fn [w]\n                                                  (apply T (assoc argv i w)))\n                                                oneform-basis))\n\n                                              ;; negative\n                                              (isa? type ::vf/vector-field)\n                                              (g/negate\n                                               (g/*\n                                                (s/mapr\n                                                 (fn [e]\n                                                   (apply T (assoc argv i e)))\n                                                 vector-basis)\n                                                (g/* CV (s/mapr\n                                                         (fn [w]\n                                                           (w (nth argv i)))\n                                                         oneform-basis))))))\n                                          arg-types))]\n                        (g/+ VT corrections)))]\n              (ci/with-argument-types\n                the-derivative\n                arg-types))))))))\n\n(defn- covariant-derivative-function [Cartan]\n  (fn [X]\n    (fn [f]\n      (fn [& args]\n        (let [types (apply v/argument-kind args)]\n          (cond (and (= (count args) 1)\n                     (manifold/manifold-point? (first args)))\n                (let [f (ci/with-argument-types f types)]\n                  ((X f) (first args)))\n\n                (every? (fn [arg] ;; either a vector field or oneform.\n                          (or (vf/vector-field? arg)\n                              (ff/oneform-field? arg)))\n                        args)\n                (let [f (ci/with-argument-types f types)]\n                  (apply (((covariant-derivative-argument-types Cartan) X) f)\n                         args))\n\n                :else\n                (u/illegal \"Bad function or arguments to covariant derivative\")))))))\n\n(defn- covariant-derivative-ordinary [Cartan]\n  {:pre [(Cartan? Cartan)]}\n  (fn [X]\n    (let [op (fn nabla_X [V]\n               (cond (vf/vector-field? V)\n                     (((covariant-derivative-vector Cartan) X) V)\n\n                     (ff/form-field? V)\n                     (((covariant-derivative-form Cartan) X) V)\n\n                     (ci/has-argument-types? V)\n                     (((covariant-derivative-argument-types Cartan) X) V)\n\n                     (f/function? V)\n                     (((covariant-derivative-function Cartan) X) V)\n\n                     (s/structure? V)\n                     (s/mapr nabla_X V)\n\n                     :else\n                     (u/unsupported\n                      (str \"Can't do this kind of covariant derivative yet \"\n                           (v/freeze X) \" @ \" (v/freeze V)))))\n          name `(~'nabla\n                 ~(v/freeze X))]\n      (o/make-operator op name))))\n\n(defn covariant-derivative\n  ([Cartan]\n   (covariant-derivative-ordinary Cartan))\n  ([Cartan map]\n   (let [mapped (Cartan->Cartan-over-map Cartan map)]\n     (covariant-derivative-ordinary\n      (make-Cartan (f/compose (Cartan->forms mapped)\n                              (cm/differential map))\n                   (Cartan->basis mapped))))))\n\n(defn covariant-differential [Cartan]\n  (fn [V]\n    (fn [X]\n      (((covariant-derivative Cartan) X) V))))\n\n(defn geodesic-equation\n  [source-coordsys target-coordsys Cartan-on-target]\n  (fn [gamma]\n    (fn [source-m]\n      {:pre [(= 1 (:dimension\n                   (manifold/manifold source-coordsys)))]}\n      (let [e (vf/coordinate-system->vector-basis source-coordsys)]\n        (((((covariant-derivative Cartan-on-target gamma)\n            e)\n           ((cm/differential gamma) e))\n          (manifold/chart target-coordsys))\n         source-m)))))\n\n(defn parallel-transport-equation\n  [source-coordsys target-coordsys Cartan-on-target]\n  (fn [gamma]\n    (fn [vector-over-gamma]\n      (fn [source-m]\n        {:pre [(= 1 (:dimension\n                     (manifold/manifold source-coordsys)))]}\n        (let [e (vf/coordinate-system->vector-basis source-coordsys)]\n          (((((covariant-derivative Cartan-on-target gamma)\n              e) ;; d/dt\n             vector-over-gamma)\n            (manifold/chart target-coordsys))\n           source-m))))))\n"]}