{
"version":3,
"file":"module$node_modules$$motionone$dom$dist$gestures$scroll$offsets$offset_cjs.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,0EAAA,CAA+F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,MAAQN,OAAA,CAAQ,qDAAR,CAAZ,CACIO,KAAOP,OAAA,CAAQ,0EAAR,CAEX,OAAMQ,cAAgB,CAAC,CAAD,CAAI,CAAJ,CAgCtBN,QAAQO,CAAAA,aAAR,CA/BAA,QAAsB,CAACC,MAAD,CAASC,eAAT,CAA0BC,YAA1B,CAAwCC,WAAxC,CAAqD,CACvE,IAAIC,iBAAmBC,KAAMC,CAAAA,OAAN,CAAcN,MAAd,CAAA,CAAwBA,MAAxB;AAAiCF,aAGpDF,MAAMW,CAAAA,QAAN,CAAeP,MAAf,CAAJ,CAMII,gBANJ,CAMuB,CAACJ,MAAD,CAASA,MAAT,CANvB,CAQSJ,KAAMY,CAAAA,QAAN,CAAeR,MAAf,CART,GASIA,MAEI,CAFKA,MAAOS,CAAAA,IAAP,EAEL,CAAAL,gBAAA,CADAJ,MAAOU,CAAAA,QAAP,CAAgB,GAAhB,CAAJ,CACuBV,MAAOW,CAAAA,KAAP,CAAa,GAAb,CADvB,CASuB,CAACX,MAAD,CAASH,IAAKe,CAAAA,UAAL,CAAgBZ,MAAhB,CAAA,CAA0BA,MAA1B,CAAoC,GAA7C,CAnB3B,CAsBAa,OAAA,CAAchB,IAAKiB,CAAAA,WAAL,CAAiBV,gBAAA,CAAiB,CAAjB,CAAjB,CAAsCF,YAAtC,CAAoDC,WAApD,CACdY,gBAAA,CAAiBlB,IAAKiB,CAAAA,WAAL,CAAiBV,gBAAA,CAAiB,CAAjB,CAAjB,CAAsCH,eAAtC,CACjB,OAAOY,OAAP,CAAqBE,eA5BkD,CAT4D;",
"sources":["node_modules/@motionone/dom/dist/gestures/scroll/offsets/offset.cjs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$motionone$dom$dist$gestures$scroll$offsets$offset_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('@motionone/utils');\nvar edge = require('./edge.cjs.js');\n\nconst defaultOffset = [0, 0];\nfunction resolveOffset(offset, containerLength, targetLength, targetInset) {\n    let offsetDefinition = Array.isArray(offset) ? offset : defaultOffset;\n    let targetPoint = 0;\n    let containerPoint = 0;\n    if (utils.isNumber(offset)) {\n        /**\n         * If we're provided offset: [0, 0.5, 1] then each number x should become\n         * [x, x], so we default to the behaviour of mapping 0 => 0 of both target\n         * and container etc.\n         */\n        offsetDefinition = [offset, offset];\n    }\n    else if (utils.isString(offset)) {\n        offset = offset.trim();\n        if (offset.includes(\" \")) {\n            offsetDefinition = offset.split(\" \");\n        }\n        else {\n            /**\n             * If we're provided a definition like \"100px\" then we want to apply\n             * that only to the top of the target point, leaving the container at 0.\n             * Whereas a named offset like \"end\" should be applied to both.\n             */\n            offsetDefinition = [offset, edge.namedEdges[offset] ? offset : `0`];\n        }\n    }\n    targetPoint = edge.resolveEdge(offsetDefinition[0], targetLength, targetInset);\n    containerPoint = edge.resolveEdge(offsetDefinition[1], containerLength);\n    return targetPoint - containerPoint;\n}\n\nexports.resolveOffset = resolveOffset;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","edge","defaultOffset","resolveOffset","offset","containerLength","targetLength","targetInset","offsetDefinition","Array","isArray","isNumber","isString","trim","includes","split","namedEdges","targetPoint","resolveEdge","containerPoint"]
}
