shadow$provide.module$node_modules$mathbox$build$esm$primitives$types$present$transition=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Transition=void 0;global=require("module$node_modules$mathbox$build$esm$primitives$types$base$parent");class Transition extends global.Parent{static initClass(){this.traits="node transition transform mask visible active".split(" ")}init(){this.uniforms=this.animate=null;this.state={isVisible:!0,isActive:!0,enter:1,
exit:1};return this.locked=this.latched=null}make(){this.uniforms={transitionFrom:this._attributes.make(this._types.vec4()),transitionTo:this._attributes.make(this._types.vec4()),transitionActive:this._attributes.make(this._types.bool()),transitionScale:this._attributes.make(this._types.vec4()),transitionBias:this._attributes.make(this._types.vec4()),transitionEnter:this._attributes.make(this._types.number()),transitionExit:this._attributes.make(this._types.number()),transitionSkew:this._attributes.make(this._types.number())};
const slideParent=this._inherit("slide"),visibleParent=this._inherit("visible"),activeParent=this._inherit("active");this._listen(slideParent,"transition.latch",e=>this.latch(e.step));this._listen(slideParent,"transition.release",()=>this.release());this._listen(visibleParent,"visible.change",()=>this.update(this.state.isVisible=visibleParent.isVisible));this._listen(activeParent,"active.change",()=>this.update(this.state.isActive=activeParent.isActive));this.animate=this._animator.make(this._types.vec2(1,
1),{step:value=>{this.state.enter=value.x;this.state.exit=value.y;return this.update()},complete:done=>this.complete(done)});return this.move=null!=this.props.from||null!=this.props.to}unmake(){return this.animate.dispose()}latch(step){this.locked=null;this.latched=step={isVisible:this.state.isVisible,isActive:this.state.isActive,step};if(!this.isVisible){const [enter,exit]=Array.from(0<=step.step?[0,1]:[1,0]);return this.animate.set(enter,exit)}}release(){const {latched}=this,{state}=this;this.latched=
null;if(latched.isVisible!==state.isVisible){const forward=0<=latched.step,visible=state.isVisible,[enter,exit]=Array.from(visible?[1,1]:forward?[1,0]:[0,1]);let {duration,durationEnter,durationExit}=this.props;null==durationEnter&&(durationEnter=duration);null==durationExit&&(durationExit=duration);duration=visible*durationEnter+!visible*durationExit;let {delay,delayEnter,delayExit}=this.props;null==delayEnter&&(delayEnter=delay);null==delayExit&&(delayExit=delay);delay=visible*delayEnter+!visible*
delayExit;this.animate.immediate({x:enter,y:exit},{duration,delay,ease:"linear"});this.locked={isVisible:!0,isActive:latched.isActive||state.isActive}}return this.update()}complete(done){if(done)return this.locked=null,this.update()}update(){if(null==this.latched){var {enter,exit}=this.props;null==enter&&({enter}=this.state);null==exit&&({exit}=this.state);var level=enter*exit,visible=0<level;this.uniforms.transitionEnter.value=enter;this.uniforms.transitionExit.value=exit;this.uniforms.transitionActive.value=
1>level;visible&&(visible=!!this.state.isVisible);null!=this.locked&&(visible=this.locked.isVisible);this.isVisible!==visible&&(this.isVisible=visible,this.trigger({type:"visible.change"}));level=!!(this.state.isActive||null!=this.locked&&this.locked.isActive);if(this.isActive!==level)return this.isActive=level,this.trigger({type:"active.change"})}}change(changed,touched,init){(changed["transition.enter"]||changed["transition.exit"]||init)&&this.update();if(changed["transition.stagger"]||init){var {stagger}=
this.props;changed=0>stagger.x;touched=0>stagger.y;init=0>stagger.z;const flipW=0>stagger.w,staggerX=Math.abs(stagger.x),staggerY=Math.abs(stagger.y),staggerZ=Math.abs(stagger.z);stagger=Math.abs(stagger.w);this.uniforms.transitionSkew.value=staggerX+staggerY+staggerZ+stagger;this.uniforms.transitionScale.value.set((1-2*changed)*staggerX,(1-2*touched)*staggerY,(1-2*init)*staggerZ,(1-2*flipW)*stagger);return this.uniforms.transitionBias.value.set(changed*staggerX,touched*staggerY,init*staggerZ,flipW*
stagger)}}}exports.Transition=Transition;Transition.initClass()}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$primitives$types$present$transition.js.map
