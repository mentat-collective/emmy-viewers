{
"version":3,
"file":"module$node_modules$lodash$_equalArrays.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAChGC,SAAWH,OAAA,CAAQ,sCAAR,CADqF,CAEhGI,UAAYJ,OAAA,CAAQ,uCAAR,CAFoF,CAGhGK,SAAWL,OAAA,CAAQ,sCAAR,CAiFfC,OAAOC,CAAAA,OAAP,CA9DAI,QAAoB,CAACC,KAAD,CAAQC,KAAR,CAAeC,OAAf,CAAwBC,UAAxB,CAAoCC,SAApC,CAA+CC,KAA/C,CAAsD,CAAA,IACpEC,UAAYJ,OAAZI,CAjBqBC,CAgB+C,CAEpEC,UAAYR,KAAMS,CAAAA,MAFkD,CAGpEC,UAAYT,KAAMQ,CAAAA,MAEtB,IAAID,SAAJ,EAAiBE,SAAjB,EAA8B,EAAEJ,SAAF,EAAeI,SAAf,CAA2BF,SAA3B,CAA9B,CACE,MAAO,CAAA,CAGLG,UAAAA,CAAaN,KAAMO,CAAAA,GAAN,CAAUZ,KAAV,CACjB;IAAIa,WAAaR,KAAMO,CAAAA,GAAN,CAAUX,KAAV,CACjB,IAAIU,SAAJ,EAAkBE,UAAlB,CACE,MAAOF,UAAP,EAAqBV,KAArB,EAA8BY,UAA9B,EAA4Cb,KAE1Cc,UAAAA,CAAQ,CAAC,CACTC,WAAAA,CAAS,CAAA,CADb,KAEIC,KAAQd,OAAD,CA/BgBe,CA+BhB,CAAqC,IAAIrB,QAAzC,CAAoDsB,IAAAA,EAE/Db,MAAMc,CAAAA,GAAN,CAAUnB,KAAV,CAAiBC,KAAjB,CAIA,KAHAI,KAAMc,CAAAA,GAAN,CAAUlB,KAAV,CAAiBD,KAAjB,CAGA,CAAO,EAAEc,SAAT,CAAiBN,SAAjB,CAAA,CAA4B,CAAA,IACtBY,SAAWpB,KAAA,CAAMc,SAAN,CADW,CAEtBO,SAAWpB,KAAA,CAAMa,SAAN,CAEf,IAAIX,UAAJ,CACE,IAAImB,SAAWhB,SAAA,CACXH,UAAA,CAAWkB,QAAX,CAAqBD,QAArB,CAA+BN,SAA/B,CAAsCb,KAAtC,CAA6CD,KAA7C,CAAoDK,KAApD,CADW,CAEXF,UAAA,CAAWiB,QAAX,CAAqBC,QAArB,CAA+BP,SAA/B,CAAsCd,KAAtC,CAA6CC,KAA7C,CAAoDI,KAApD,CAEN,IAAiBa,IAAAA,EAAjB,GAAII,QAAJ,CAA4B,CAC1B,GAAIA,QAAJ,CACE,QAEFP,WAAA;AAAS,CAAA,CACT,MAL0B,CAQ5B,GAAIC,IAAJ,CACE,IAAI,CAACnB,SAAA,CAAUI,KAAV,CAAiB,QAAQ,CAACoB,QAAD,CAAWE,QAAX,CAAqB,CAC7C,GAAI,CAACzB,QAAA,CAASkB,IAAT,CAAeO,QAAf,CAAL,GACKH,QADL,GACkBC,QADlB,EAC8BjB,SAAA,CAAUgB,QAAV,CAAoBC,QAApB,CAA8BnB,OAA9B,CAAuCC,UAAvC,CAAmDE,KAAnD,CAD9B,EAEE,MAAOW,KAAKQ,CAAAA,IAAL,CAAUD,QAAV,CAHoC,CAA9C,CAAL,CAKQ,CACNR,UAAA,CAAS,CAAA,CACT,MAFM,CALR,CADF,IAUO,IACDK,QADC,GACYC,QADZ,EAEC,CAAAjB,SAAA,CAAUgB,QAAV,CAAoBC,QAApB,CAA8BnB,OAA9B,CAAuCC,UAAvC,CAAmDE,KAAnD,CAFD,CAGA,CACLU,UAAA,CAAS,CAAA,CACT,MAFK,CA9BmB,CAmC5BV,KAAA,CAAM,QAAN,CAAA,CAAgBL,KAAhB,CACAK,MAAA,CAAM,QAAN,CAAA,CAAgBJ,KAAhB,CACA,OAAOc,WA3DiE,CAtB0B;",
"sources":["node_modules/lodash/_equalArrays.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_equalArrays\"] = function(global,require,module,exports) {\nvar SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetCache","arraySome","cacheHas","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","COMPARE_PARTIAL_FLAG","arrLength","length","othLength","arrStacked","get","othStacked","index","result","seen","COMPARE_UNORDERED_FLAG","undefined","set","arrValue","othValue","compared","othIndex","push"]
}
