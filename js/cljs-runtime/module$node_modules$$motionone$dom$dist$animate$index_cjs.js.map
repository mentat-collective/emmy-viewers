{
"version":3,
"file":"module$node_modules$$motionone$dom$dist$animate$index_cjs.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,aAAeN,OAAA,CAAQ,mEAAR,CAAnB,CACIO,QAAUP,OAAA,CAAQ,mEAAR,CADd,CAEIQ,gBAAkBR,OAAA,CAAQ,oEAAR,CAFtB,CAGIS,SAAWT,OAAA,CAAQ,oEAAR,CAHf;AAIIU,QAAUV,OAAA,CAAQ,2DAAR,CA+BdE,QAAQS,CAAAA,OAAR,CA7BAA,QAAgB,CAACC,QAAD,CAAWC,SAAX,CAAsBC,SAAA,CAAY,EAAlC,CAAsC,CAClDF,QAAA,CAAWJ,eAAgBA,CAAAA,eAAhB,CAAgCI,QAAhC,CACX,OAAMG,YAAcH,QAASI,CAAAA,MAA7B,CAIMC,mBAAqB,EAC3B,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,WAApB,CAAiCG,CAAA,EAAjC,CAAsC,CAClC,MAAMC,QAAUP,QAAA,CAASM,CAAT,CAChB,KAAK,MAAME,GAAX,GAAkBP,UAAlB,CAA6B,CACzB,IAAMQ,aAAed,OAAQe,CAAAA,UAAR,CAAmBR,SAAnB,CAA8BM,GAA9B,CACrBC,aAAaE,CAAAA,KAAb,CAAqBb,OAAQc,CAAAA,aAAR,CAAsBH,YAAaE,CAAAA,KAAnC,CAA0CL,CAA1C,CAA6CH,WAA7C,CACfU,aAAAA,CAAYnB,YAAaA,CAAAA,YAAb,CAA0Ba,OAA1B,CAAmCC,GAAnC;AAAwCP,SAAA,CAAUO,GAAV,CAAxC,CAAwDC,YAAxD,CAClBJ,mBAAmBS,CAAAA,IAAnB,CAAwBD,YAAxB,CAJyB,CAFK,CAStC,MAAOhB,SAASkB,CAAAA,YAAT,CAAsBV,kBAAtB,CAA0CH,SAA1C,CAUPA,SAAUc,CAAAA,QAVH,CAhB2C,CAXgE;",
"sources":["node_modules/@motionone/dom/dist/animate/index.cjs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$motionone$dom$dist$animate$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar animateStyle = require('./animate-style.cjs.js');\nvar options = require('./utils/options.cjs.js');\nvar resolveElements = require('../utils/resolve-elements.cjs.js');\nvar controls = require('./utils/controls.cjs.js');\nvar stagger = require('../utils/stagger.cjs.js');\n\nfunction animate(elements, keyframes, options$1 = {}) {\n    elements = resolveElements.resolveElements(elements);\n    const numElements = elements.length;\n    /**\n     * Create and start new animations\n     */\n    const animationFactories = [];\n    for (let i = 0; i < numElements; i++) {\n        const element = elements[i];\n        for (const key in keyframes) {\n            const valueOptions = options.getOptions(options$1, key);\n            valueOptions.delay = stagger.resolveOption(valueOptions.delay, i, numElements);\n            const animation = animateStyle.animateStyle(element, key, keyframes[key], valueOptions);\n            animationFactories.push(animation);\n        }\n    }\n    return controls.withControls(animationFactories, options$1, \n    /**\n     * TODO:\n     * If easing is set to spring or glide, duration will be dynamically\n     * generated. Ideally we would dynamically generate this from\n     * animation.effect.getComputedTiming().duration but this isn't\n     * supported in iOS13 or our number polyfill. Perhaps it's possible\n     * to Proxy animations returned from animateStyle that has duration\n     * as a getter.\n     */\n    options$1.duration);\n}\n\nexports.animate = animate;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","animateStyle","options","resolveElements","controls","stagger","animate","elements","keyframes","options$1","numElements","length","animationFactories","i","element","key","valueOptions","getOptions","delay","resolveOption","animation","push","withControls","duration"]
}
