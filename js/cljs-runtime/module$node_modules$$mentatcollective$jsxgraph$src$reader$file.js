shadow$provide.module$node_modules$$mentatcollective$jsxgraph$src$reader$file=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _jxg=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$jxg"));global=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$utils$env"));var _type=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$utils$type")),
_encoding=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$utils$encoding")),_base=_interopRequireDefault(require("module$node_modules$$mentatcollective$jsxgraph$src$utils$base64"));_jxg.default.FileReader={handleRemoteFile:function(url,board,format,async,encoding,callback){var request=!1;try{request=new XMLHttpRequest,"raw"===format.toLowerCase()?request.overrideMimeType("text/plain; charset\x3d"+encoding):request.overrideMimeType("text/xml; charset\x3d"+encoding)}catch(e){try{request=
new ActiveXObject("Msxml2.XMLHTTP")}catch(ex){try{request=new ActiveXObject("Microsoft.XMLHTTP")}catch(exc){request=!1}}}if(request){request.open("GET",url,async);"raw"===format.toLowerCase()?this.cbp=function(){var req=request;4===req.readyState&&board(req.responseText)}:this.cbp=function(){var req=request;4===req.readyState&&(req=!_type.default.exists(req.responseStream)||"PK"!==req.responseText.slice(0,2)&&31!==_encoding.default.asciiCharCodeAt(req.responseText.slice(0,1),0)?req.responseText:_base.default.decode(jxgBinFileReader(req)),
this.parseString(req,board,format,callback))};this.cb=_type.default.bind(this.cbp,this);request.onreadystatechange=this.cb;try{request.send(null)}catch(ex2){throw Error("JSXGraph: A problem occurred while trying to read remote file '"+url+"'.");}}else _jxg.default.debug("AJAX not activated!")},handleLocalFile:function(url,board,format,async,encoding,callback){_type.default.exists(async)||(async=!0);"raw"===format.toLowerCase()?this.cbp=function(e){board(e.target.result)}:this.cbp=function(e){this.parseString(e.target.result,
board,format,callback)};this.cb=_type.default.bind(this.cbp,this);async=new FileReader;async.onload=this.cb;"raw"===format.toLowerCase()?async.readAsText(url):async.readAsText(url,encoding)},parseFileContent:function(url,board,format,async,encoding,callback){_type.default.isString(url)||void 0===FileReader?this.handleRemoteFile(url,board,format,async,encoding,callback):this.handleLocalFile(url,board,format,async,encoding,callback)},parseString:function(str,board,format,callback){format=format.toLowerCase();
var Reader=_jxg.default.readers[format];if(_type.default.exists(Reader))str=new Reader(board,str),str.read();else if("jessiecode"!==format)throw Error("JSXGraph: There is no reader available for '"+format+"'.");_type.default.isFunction(callback)&&callback(board)}};!global.default.isMetroApp()&&global.default.isBrowser&&"object"===typeof navigator&&/msie/i.test(navigator.userAgent)&&!/opera/i.test(navigator.userAgent)&&document&&document.write&&document.write('\x3cscript type\x3d"text/vbscript"\x3e\nFunction Base64Encode(inData)\n  Const Base64 \x3d "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"\n  Dim cOut, sOut, I\n  For I \x3d 1 To LenB(inData) Step 3\n    Dim nGroup, pOut, sGroup\n    nGroup \x3d \x26H10000 * AscB(MidB(inData, I, 1)) + _\n      \x26H100 * MyASC(MidB(inData, I + 1, 1)) + MyASC(MidB(inData, I + 2, 1))\n    nGroup \x3d Oct(nGroup)\n    nGroup \x3d String(8 - Len(nGroup), "0") \x26 nGroup\n    pOut \x3d Mid(Base64, CLng("\x26o" \x26 Mid(nGroup, 1, 2)) + 1, 1) + _\n      Mid(Base64, CLng("\x26o" \x26 Mid(nGroup, 3, 2)) + 1, 1) + _\n      Mid(Base64, CLng("\x26o" \x26 Mid(nGroup, 5, 2)) + 1, 1) + _\n      Mid(Base64, CLng("\x26o" \x26 Mid(nGroup, 7, 2)) + 1, 1)\n    sOut \x3d sOut + pOut\n  Next\n  Select Case LenB(inData) Mod 3\n    Case 1: \'8 bit final\n      sOut \x3d Left(sOut, Len(sOut) - 2) + "\x3d\x3d"\n    Case 2: \'16 bit final\n      sOut \x3d Left(sOut, Len(sOut) - 1) + "\x3d"\n  End Select\n  Base64Encode \x3d sOut\nEnd Function\n\nFunction MyASC(OneChar)\n  If OneChar \x3d "" Then MyASC \x3d 0 Else MyASC \x3d AscB(OneChar)\nEnd Function\n\nFunction jxgBinFileReader(xhr)\n    Dim byteString\n    Dim b64String\n    Dim i\n    byteString \x3d xhr.responseBody\n    ReDim byteArray(LenB(byteString))\n    For i \x3d 1 To LenB(byteString)\n        byteArray(i-1) \x3d AscB(MidB(byteString, i, 1))\n    Next\n    b64String \x3d Base64Encode(byteString)\n    jxgBinFileReader \x3d b64String\nEnd Function\n\x3c/script\x3e\n');
exports.default=_jxg.default.FileReader}
//# sourceMappingURL=module$node_modules$$mentatcollective$jsxgraph$src$reader$file.js.map
