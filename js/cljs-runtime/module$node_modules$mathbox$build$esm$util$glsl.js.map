{
"version":3,
"file":"module$node_modules$mathbox$build$esm$util$glsl.js",
"lineCount":59,
"mappings":"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",
"sources":["node_modules/mathbox/build/esm/util/glsl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathbox$build$esm$util$glsl\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.constant = exports.identity = exports.invertSwizzleVec4 = exports.swizzleVec4 = exports.injectVec4 = exports.truncateVec = exports.extendVec = exports.binaryOperator = exports.sample2DArray = exports.mapByte2FloatOffset = exports.toType = void 0;\n// TODO: This file was created by bulk-decaffeinate.\n// Sanity-check the conversion and remove this comment.\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nconst letters = \"xyzw\".split(\"\");\nconst index = {\n  0: -1,\n  x: 0,\n  y: 1,\n  z: 2,\n  w: 3\n};\n\nconst parseOrder = function (order) {\n  if (order === \"\" + order) {\n    order = order.split(\"\");\n  }\n\n  if (order === +order) {\n    order = [order];\n  }\n\n  return order;\n};\n\nconst toType = function (type) {\n  if (type === +type) {\n    type = \"vec\" + type;\n  }\n\n  if (type === \"vec1\") {\n    type = \"float\";\n  }\n\n  return type;\n};\n\nexports.toType = toType;\n\nconst toFloatString = function (value) {\n  value = \"\" + value;\n\n  if (value.indexOf(\".\") < 0) {\n    return value += \".0\";\n  }\n}; // Helper for float to byte conversion on the w axis, for readback\n\n\nconst mapByte2FloatOffset = function (stretch) {\n  if (stretch == null) {\n    stretch = 4;\n  }\n\n  const factor = toFloatString(stretch);\n  return `\\\nvec4 float2ByteIndex(vec4 xyzw, out float channelIndex) {\n  float relative = xyzw.w / ${factor};\n  float w = floor(relative);\n  channelIndex = (relative - w) * ${factor};\n  return vec4(xyzw.xyz, w);\n}\\\n`;\n}; // Sample data texture array\n\n\nexports.mapByte2FloatOffset = mapByte2FloatOffset;\n\nconst sample2DArray = function (textures) {\n  const divide = function (a, b) {\n    let out;\n\n    if (a === b) {\n      out = `\\\nreturn texture2D(dataTextures[${a}], uv);\\\n`;\n    } else {\n      const mid = Math.ceil(a + (b - a) / 2);\n      out = `\\\nif (z < ${mid - 0.5}) {\n  ${divide(a, mid - 1)}\n}\nelse {\n  ${divide(mid, b)}\n}\\\n`;\n    }\n\n    return out = out.replace(/\\n/g, \"\\n  \");\n  };\n\n  const body = divide(0, textures - 1);\n  return `\\\nuniform sampler2D dataTextures[${textures}];\n\nvec4 sample2DArray(vec2 uv, float z) {\n  ${body}\n}\\\n`;\n}; // Binary operator\n\n\nexports.sample2DArray = sample2DArray;\n\nconst binaryOperator = function (type, op, curry) {\n  type = toType(type);\n\n  if (curry != null) {\n    return `\\\n${type} binaryOperator(${type} a) {\n  return a ${op} ${curry};\n}\\\n`;\n  } else {\n    return `\\\n${type} binaryOperator(${type} a, ${type} b) {\n  return a ${op} b;\n}\\\n`;\n  }\n}; // Extend to n-vector with zeroes\n\n\nexports.binaryOperator = binaryOperator;\n\nconst extendVec = function (from, to, value) {\n  if (value == null) {\n    value = 0;\n  }\n\n  if (from > to) {\n    return truncateVec(from, to);\n  }\n\n  const diff = to - from;\n  from = toType(from);\n  to = toType(to);\n  value = toFloatString(value);\n\n  const parts = __range__(0, diff, true).map(function (x) {\n    if (x) {\n      return value;\n    } else {\n      return \"v\";\n    }\n  });\n\n  const ctor = parts.join(\",\");\n  return `\\\n${to} extendVec(${from} v) { return ${to}(${ctor}); }\\\n`;\n}; // Truncate n-vector\n\n\nexports.extendVec = extendVec;\n\nconst truncateVec = function (from, to) {\n  if (from < to) {\n    return extendVec(from, to);\n  }\n\n  const swizzle = \".\" + \"xyzw\".substr(0, to);\n  from = toType(from);\n  to = toType(to);\n  return `\\\n${to} truncateVec(${from} v) { return v${swizzle}; }\\\n`;\n}; // Inject float into 4-component vector\n\n\nexports.truncateVec = truncateVec;\n\nconst injectVec4 = function (order) {\n  const swizzler = [\"0.0\", \"0.0\", \"0.0\", \"0.0\"];\n  order = parseOrder(order);\n  order = order.map(function (v) {\n    if (v === \"\" + v) {\n      return index[v];\n    } else {\n      return v;\n    }\n  });\n\n  for (let i = 0; i < order.length; i++) {\n    const channel = order[i];\n    swizzler[channel] = [\"a\", \"b\", \"c\", \"d\"][i];\n  }\n\n  const mask = swizzler.slice(0, 4).join(\", \");\n  const args = [\"float a\", \"float b\", \"float c\", \"float d\"].slice(0, order.length);\n  return `\\\nvec4 inject(${args}) {\n  return vec4(${mask});\n}\\\n`;\n}; // Apply 4-component vector swizzle\n\n\nexports.injectVec4 = injectVec4;\n\nconst swizzleVec4 = function (order, size = null) {\n  const lookup = [\"0.0\", \"xyzw.x\", \"xyzw.y\", \"xyzw.z\", \"xyzw.w\"];\n\n  if (size == null) {\n    size = order.length;\n  }\n\n  order = parseOrder(order);\n  order = order.map(function (v) {\n    if (Array.from([0, 1, 2, 3, 4]).includes(+v)) {\n      v = +v;\n    }\n\n    if (v === \"\" + v) {\n      v = index[v] + 1;\n    }\n\n    return lookup[v];\n  });\n\n  while (order.length < size) {\n    order.push(\"0.0\");\n  }\n\n  const mask = order.join(\", \");\n  return `\\\nvec${size} swizzle(vec4 xyzw) {\n  return vec${size}(${mask});\n}\\\n`.replace(/vec1/g, \"float\");\n}; // Invert full or truncated swizzles for pointer lookups\n\n\nexports.swizzleVec4 = swizzleVec4;\n\nconst invertSwizzleVec4 = function (order) {\n  const swizzler = [\"0.0\", \"0.0\", \"0.0\", \"0.0\"];\n  order = parseOrder(order);\n  order = order.map(function (v) {\n    if (v === +v) {\n      return letters[v - 1];\n    } else {\n      return v;\n    }\n  });\n\n  for (let i = 0; i < order.length; i++) {\n    const letter = order[i];\n    const src = letters[i];\n    const j = index[letter];\n    swizzler[j] = `xyzw.${src}`;\n  }\n\n  const mask = swizzler.join(\", \");\n  return `\\\nvec4 invertSwizzle(vec4 xyzw) {\n  return vec4(${mask});\n}\\\n`;\n};\n\nexports.invertSwizzleVec4 = invertSwizzleVec4;\n\nconst identity = function (type) {\n  let args = [].slice.call(arguments);\n\n  if (args.length > 1) {\n    args = args.map((t, i) => [\"inout\", t, String.fromCharCode(97 + i)].join(\" \"));\n    args = args.join(\", \");\n    return `\\\nvoid identity(${args}) { }\\\n`;\n  } else {\n    return `\\\n${type} identity(${type} x) {\n  return x;\n}\\\n`;\n  }\n};\n\nexports.identity = identity;\n\nconst constant = (type, value) => `\\\n${type} constant() {\nreturn ${value};\n}\\\n`;\n\nexports.constant = constant;\n\nfunction __range__(left, right, inclusive) {\n  const range = [];\n  const ascending = left < right;\n  const end = !inclusive ? right : ascending ? right + 1 : right - 1;\n\n  for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n    range.push(i);\n  }\n\n  return range;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","__range__","left","right","inclusive","range","ascending","end","i","push","Object","defineProperty","value","constant","identity","invertSwizzleVec4","swizzleVec4","injectVec4","truncateVec","extendVec","binaryOperator","sample2DArray","mapByte2FloatOffset","toType","letters","index","x","y","z","w","parseOrder","order","split","type","toFloatString","indexOf","stretch","factor","textures","divide","a","b","out","mid","Math","ceil","replace","body","op","curry","from","to","diff","ctor","map","parts","join","swizzle","substr","swizzler","v","length","channel","mask","slice","args","size","lookup","Array","includes","j","letter","src","call","arguments","t","String","fromCharCode"]
}
