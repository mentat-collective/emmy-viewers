{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_inline$image.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/rules_inline/image.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_inline$image\"] = function(global,require,module,exports) {\n// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","normalizeReference","isSpace","module.exports","state","silent","ref","href","oldPos","pos","max","posMax","src","charCodeAt","labelStart","labelEnd","md","helpers","parseLinkLabel","code","res","parseLinkDestination","ok","normalizeLink","str","validateLink","start","parseLinkTitle","title","env","references","label","slice","content","inline","parse","tokens","token","push","attrs","children"]
}
