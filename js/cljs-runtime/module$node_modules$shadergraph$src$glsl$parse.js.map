{
"version":3,
"file":"module$node_modules$shadergraph$src$glsl$parse.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/shadergraph/src/glsl/parse.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$shadergraph$src$glsl$parse\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.walk = exports.parse = void 0;\n\nvar _string = _interopRequireDefault(require(\"glsl-tokenizer/string\"));\n\nvar _direct = _interopRequireDefault(require(\"@sicmutils/glsl-parser/direct\"));\n\nvar _decl = require(\"./decl\");\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS201: Simplify complex destructure assignments\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nlet debug = false;\n/*\nparse GLSL into AST\nextract all global symbols and make type signatures\n*/\n// Parse a GLSL snippet\n\nconst parse = function (name, code) {\n  const ast = parseGLSL(name, code);\n  return processAST(ast, code);\n}; // Parse GLSL language into AST\n\n\nexports.parse = parse;\n\nconst parseGLSL = function (name, code) {\n  let ast, tock;\n  let errors = [];\n\n  if (debug) {\n    tock = tick();\n  }\n\n  try {\n    const tokens = (0, _string.default)(code);\n    ast = (0, _direct.default)(tokens);\n  } catch (e) {\n    errors = [{\n      message: e\n    }];\n  }\n\n  if (debug) {\n    tock(\"GLSL Tokenize & Parse\");\n  }\n\n  const fmt = function (code) {\n    code = code.split(\"\\n\");\n    const max = (\"\" + code.length).length;\n\n    const pad = function (v) {\n      if ((v = \"\" + v).length < max) {\n        return (\"       \" + v).slice(-max);\n      } else {\n        return v;\n      }\n    };\n\n    return code.map((line, i) => `${pad(i + 1)}: ${line}`).join(\"\\n\");\n  };\n\n  if (!ast || errors.length) {\n    if (!name) {\n      name = \"(inline code)\";\n    }\n\n    console.warn(fmt(code));\n\n    for (const error of errors) {\n      console.error(`${name} -`, error.message);\n    }\n\n    throw new Error(\"GLSL parse error\");\n  }\n\n  return ast;\n}; // Process AST for compilation\n\n\nconst processAST = function (ast, code) {\n  let tock;\n\n  if (debug) {\n    tock = tick();\n  } // Walk AST tree and collect global declarations\n\n\n  const symbols = [];\n  walk(mapSymbols, collect(symbols), ast, \"\"); // Sort symbols into bins\n\n  const [main, internals, externals] = Array.from(sortSymbols(symbols)); // Extract storage/type signatures of symbols\n\n  const signatures = extractSignatures(main, internals, externals);\n\n  if (debug) {\n    tock(\"GLSL AST\");\n  }\n\n  return {\n    ast,\n    code,\n    signatures\n  };\n}; // Extract functions and external symbols from AST\n\n\nconst mapSymbols = function (node, collect) {\n  switch (node.type) {\n    case \"decl\":\n      collect(_decl.decl.node(node));\n      return false;\n  }\n\n  return true;\n};\n\nconst collect = out => function (value) {\n  if (value != null) {\n    Array.from(value).map(obj => out.push(obj));\n  }\n}; // Identify internals, externals and main function\n\n\nconst sortSymbols = function (symbols) {\n  let main = null;\n  const internals = [];\n  let externals = [];\n  const maybe = {};\n  let found = false;\n\n  for (const s of Array.from(symbols)) {\n    if (!s.body) {\n      // Unmarked globals are definitely internal\n      if (s.storage === \"global\") {\n        internals.push(s); // Possible external\n      } else {\n        externals.push(s);\n        maybe[s.ident] = true;\n      }\n    } else {\n      // Remove earlier forward declaration\n      if (maybe[s.ident]) {\n        externals = Array.from(externals).filter(e => e.ident !== s.ident);\n        delete maybe[s.ident];\n      } // Internal function\n\n\n      internals.push(s); // Last function is main\n      // unless there is a function called 'main'\n\n      if (s.ident === \"main\") {\n        main = s;\n        found = true;\n      } else if (!found) {\n        main = s;\n      }\n    }\n  }\n\n  return [main, internals, externals];\n}; // Generate type signatures and appropriate ins/outs\n\n\nconst extractSignatures = function (main, internals, externals) {\n  let symbol;\n  const sigs = {\n    uniform: [],\n    attribute: [],\n    varying: [],\n    external: [],\n    internal: [],\n    global: [],\n    main: null\n  };\n\n  const defn = symbol => _decl.decl.type(symbol.ident, symbol.type, symbol.quant, symbol.count, symbol.inout, symbol.storage);\n\n  const func = function (symbol, inout) {\n    let d;\n    const signature = Array.from(symbol.args).map(arg => defn(arg)); // Split inouts into in and out\n\n    for (d of Array.from(signature)) {\n      if (d.inout === _decl.decl.inout) {\n        const a = d;\n        const b = d.copy();\n        a.inout = _decl.decl.in;\n        b.inout = _decl.decl.out;\n        b.meta = {\n          shadow: a.name\n        };\n        b.name += _constants.SHADOW_ARG;\n        a.meta = {\n          shadowed: b.name\n        };\n        signature.push(b);\n      }\n    } // Add output for return type\n\n\n    if (symbol.type !== \"void\") {\n      signature.unshift(_decl.decl.type(_constants.RETURN_ARG, symbol.type, false, \"\", \"out\"));\n    } // Make type string\n\n\n    const inTypes = (() => {\n      const result = [];\n\n      for (d of Array.from(signature)) {\n        if (d.inout === _decl.decl.in) {\n          result.push(d.type);\n        }\n      }\n\n      return result;\n    })().join(\",\");\n\n    const outTypes = (() => {\n      const result1 = [];\n\n      for (d of Array.from(signature)) {\n        if (d.inout === _decl.decl.out) {\n          result1.push(d.type);\n        }\n      }\n\n      return result1;\n    })().join(\",\");\n\n    const type = `(${inTypes})(${outTypes})`;\n    return {\n      name: symbol.ident,\n      type,\n      signature,\n      inout,\n      spec: symbol.type\n    };\n  }; // Main\n\n\n  sigs.main = func(main, _decl.decl.out); // Internals (for name replacement only)\n\n  for (symbol of Array.from(internals)) {\n    sigs.internal.push({\n      name: symbol.ident\n    });\n  } // Externals\n\n\n  for (symbol of Array.from(externals)) {\n    let def;\n\n    switch (symbol.decl) {\n      // Uniforms/attributes/varyings\n      case \"external\":\n        def = defn(symbol);\n        sigs[symbol.storage].push(def);\n        break;\n      // Callbacks\n\n      case \"function\":\n        def = func(symbol, _decl.decl.in);\n        sigs.external.push(def);\n        break;\n    }\n  }\n\n  return sigs;\n}; // Walk AST, apply map and collect values\n\n\ndebug = false;\n\nconst walk = function (map, collect, node, indent) {\n  debug && console.log(indent, node.type, node.token != null ? node.token.data : undefined, node.token != null ? node.token.type : undefined);\n  const recurse = map(node, collect);\n\n  if (recurse) {\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      walk(map, collect, child, indent + \"  \", debug);\n    }\n  }\n\n  return null;\n}; // #####\n\n\nexports.walk = walk;\n\nconst tick = function () {\n  const now = +new Date();\n  return function (label) {\n    const delta = +new Date() - now;\n    console.log(label, delta + \" ms\");\n    return delta;\n  };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","walk","parse","_string","_direct","_decl","_constants","debug","name","code","ast","parseGLSL","tock","tick","symbols","mapSymbols","collect","main","internals","externals","Array","from","sortSymbols","signatures","extractSignatures","errors","tokens","e","message","fmt","split","max","length","map","line","i","v","slice","join","console","warn","error","Error","node","type","decl","out","push","maybe","found","s","body","ident","filter","storage","symbol","sigs","uniform","attribute","varying","external","internal","func","inout","d","signature","args","arg","quant","count","a","b","copy","in","meta","shadow","SHADOW_ARG","shadowed","unshift","RETURN_ARG","inTypes","result","outTypes","result1","spec","def","indent","log","token","data","undefined","recurse","children","child","now","Date","label","delta"]
}
