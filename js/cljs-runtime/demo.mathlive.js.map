{"version":3,"sources":["demo/mathlive.cljs"],"mappings":"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","names":["demo.mathlive/constants","sicmutils.complex/I","demo.mathlive/f-name->sym","demo.mathlive/process-str","s","or__4253__auto__","and__4251__auto__","cljs.core.symbol","demo.mathlive/process-head","head","cljs.core/Symbol","cljs.core.match/backtrack","e103932","js/Error","e__18676__auto__","e103934","demo.mathlive/process-map","m","demo.mathlive/v-processor","simplify","v","cljs.core/vector?","cljs.core/count","v_left__103960","cljs.core.subvec","v_left__103960_0__103966","cljs.core.nth","e104146","e104147","e104144","e104027","v_0__103971","v_1__103972","e104137","e104130","e104131","e104032","v_left__103979","v_left__103979_0__103981","e104129","e104125","e104033","v_0__103986","v_1__103987","e104110","e104111","e104112","e104113","e104116","e104118","e104119","e104120","e104121","e104122","e104123","e104124","e104106","e104034","v_left__104002","v_left__104002_0__104005","e104085","e104075","e104037","v_left__104006","v_left__104006_0__104008","e104067","e104055","e104038","v_left__104010","e104043","e104042","h","tail","process-v","cljs.core.into","xs","sicmutils.structure/up*","cljs.core.map","pow","G__104140","fexpr__104139","sicmutils.numsymb/symbolic-operator","l","r","G__104133","G__104134","fexpr__104132","G__104136","fexpr__104135","_ignore","expr","args","temp__5751__auto__","sym","cljs.core.apply","demo.mathlive/process","cljs.core/map?","demo.mathlive/mathjson->expression","j","sicmutils.structure.mapr","sicmutils.env/literal-number","cljs.core.js__GT_clj"],"sourcesContent":["(ns demo.mathlive\n  (:require [clojure.core.match :refer [match] :include-macros true]\n            [sicmutils.complex :as c]\n            [sicmutils.structure :as ss]\n            [sicmutils.env :as e]\n            [sicmutils.numsymb :refer [symbolic-operator]]))\n\n;; ## String\n(def constants\n  {\"ExponentialE\" 'E\n   \"ImaginaryUnit\" c/I\n\n   \"GoldenRatio\" 'phi\n\n   ;; TODO add all greek characters.\n   \"Pi\" 'pi \"CapitalPi\" 'Pi\n   \"Gamma\" 'gamma \"CapitalGamma\" 'Gamma})\n\n(def f-name->sym\n  {\n   ;; Arithmetic\n   \"Add\" '+\n   \"Subtract\" '- \"Negate\" '-\n   \"Multiply\"'*\n   \"Divide\" '/ \"Rational\" '/\n   \"Power\" 'expt ;; root handled below... TODO add root to symbolic env of sicmutils.\n   \"Square\" 'square\n   \"Sqrt\" 'sqrt\n\n   \"Exp\" 'exp\n   \"Ln\" 'log\n\n   ;; \"Log\" TODO this is [Log a b], log base blah... support that.\n   ;; \"Lb\" TODO log base 2\n   ;; \"Lg\" TODO log base 10\n   ;; \"LogOnePlus\" TODO\n\n   \"Cos\" 'cos\n   \"Sin\" 'sin\n   \"Tan\" 'tan\n   \"Cot\" 'cot\n   \"Sec\" 'sec\n   \"Csc\" 'csc\n\n   \"Arcsin\" 'asin\n   \"Arccos\" 'acos\n   \"Arctan\" 'atan\n\n   \"Sinh\" 'sinh\n   \"Cosh\" 'cosh\n   \"Tanh\" 'tanh\n   \"Coth\" 'coth\n   \"Sech\" 'sech\n   \"Csch\" 'csch\n\n   \"Equal\" '=\n\n   ;; 'and (ua/monoid sym:and true false?)\n   ;; 'or (ua/monoid sym:or false true?)\n   ;; 'negate negate\n   ;; 'invert invert\n\n   ;; 'modulo modulo\n   ;; 'remainder remainder\n   ;; 'gcd (ua/monoid gcd 0)\n   ;; 'lcm (ua/monoid lcm 1 v/zero?)\n   ;; 'floor floor\n   ;; 'ceiling ceiling\n   ;; 'integer-part integer-part\n   ;; 'fractional-part fractional-part\n\n   ;; 'cube #(expt % 3)\n   ;; 'square #(expt % 2)\n   ;; 'abs abs\n   ;; 'sqrt sqrt\n   ;; 'log log\n\n   ;; 'expt expt\n   ;; 'make-rectangular make-rectangular\n   ;; 'make-polar make-polar\n   ;; 'real-part real-part\n   ;; 'imag-part imag-part\n   ;; 'conjugate conjugate\n   ;; 'magnitude magnitude\n   ;; 'dot-product dot-product\n   ;; 'inner-product dot-product\n   ;; 'angle angle\n   ;; 'derivative derivative\n\n   })\n\n(defn process-str [s]\n  (or (constants s)\n      (f-name->sym s)\n      (if (and (.startsWith s \"'\")\n               (.endsWith s \"'\"))\n        (.slice s 1 -1)\n        (symbol s))))\n\n(defn process-head\n  \"Convert the head of a function form into a symbol.\"\n  [head]\n  (match [head]\n         [(_ :guard symbol?)] head\n         [(_ :guard string?)] (f-name->sym head head)\n         :else head))\n\n;; ## Maps\n\n(defn process-map [m] m)\n\n;; ## Vector\n;;\n;; Catch some ones we want to combine, then go wild.\n\n(defn v-processor [simplify]\n  (fn process-v [v]\n    (match [v]\n           [[(h :guard vector?) & tail]]  (process-v (into [(process-v h)] tail))\n           [[\"List\" & xs]] (ss/up* (map simplify xs))\n           [[\"Power\" \"ExponentialE\" pow]] ((symbolic-operator 'exp) (simplify pow))\n           [[\"Root\" l r]] ((symbolic-operator 'expt) (simplify l)\n                           ((symbolic-operator 'invert)\n                            (simplify r)))\n\n           ;; TODO this only comes in when errors are empty valid isValid is\n           ;; false. Fix!\n           [[\"Error\" & _ignore]] '_\n\n           ;; inverse trig functions\n           [[\"InverseFunction\" \"Sin\"]]    'asin\n           [[\"InverseFunction\" \"Cos\"]]    'acos\n           [[\"InverseFunction\" \"Tan\"]]    'atan\n           [[\"InverseFunction\" \"Cot\"]]    'acot\n           [[\"InverseFunction\" \"Sec\"]]    'asec\n           [[\"InverseFunction\" \"Csc\"]]    'acsc\n\n           [[\"InverseFunction\" \"Cosh\"]]    'acosh\n           [[\"InverseFunction\" \"Sinh\"]]    'asinh\n           [[\"InverseFunction\" \"Tanh\"]]    'atanh\n\n           [[\"InverseFunction\" \"Coth\"]]    'acoth\n           [[\"InverseFunction\" \"Sech\"]]    'asech\n           [[\"InverseFunction\" \"Csch\"]]    'acsch\n\n           [[\"Sequence\" & _]]             nil\n           [[\"Delimiter\" expr & _]]       (simplify expr)\n\n           [[head & args]]                (if-let [sym (process-head head)]\n                                            (apply (symbolic-operator sym)\n                                                   (map simplify args))\n                                            v)\n           :else v)))\n\n(defn process [expr]\n  (let [process-v (v-processor process)]\n    (cond (number? expr) expr\n          (string? expr) (process-str expr)\n          (map? expr)    (process-map expr)\n          (vector? expr) (process-v expr)\n          :else expr)))\n\n(defn mathjson->expression\n  \"Converts MathJSON to an expression or structure of expressions.\"\n  [j]\n  (ss/mapr e/literal-number\n           (process\n            (js->clj j))))\n"]}