{"version":3,"sources":["demo/mathlive.cljs"],"mappings":"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","names":["demo.mathlive/constants","sicmutils.complex/I","demo.mathlive/f-name->sym","demo.mathlive/process-str","s","or__4253__auto__","and__4251__auto__","cljs.core.symbol","demo.mathlive/process-head","head","cljs.core/Symbol","cljs.core.match/backtrack","e83010","js/Error","e__18676__auto__","e83011","demo.mathlive/process-map","m","demo.mathlive/v-processor","simplify","v","cljs.core/vector?","cljs.core/count","v_left__83015","cljs.core.subvec","v_left__83015_0__83017","cljs.core.nth","e83074","e83075","e83073","e83036","v_0__83018","v_1__83019","e83070","e83063","e83064","e83037","v_left__83021","v_left__83021_0__83023","e83062","e83061","e83038","v_0__83024","v_1__83025","e83049","e83050","e83051","e83052","e83053","e83054","e83055","e83056","e83057","e83058","e83059","e83060","e83048","e83039","v_left__83026","v_left__83026_0__83028","e83047","e83046","e83040","v_left__83029","v_left__83029_0__83031","e83045","e83044","e83041","v_left__83033","e83043","e83042","h","tail","process-v","cljs.core.into","xs","sicmutils.structure/up*","cljs.core.map","pow","G__83072","fexpr__83071","sicmutils.numsymb/symbolic-operator","l","r","G__83066","G__83067","fexpr__83065","G__83069","fexpr__83068","_ignore","expr","args","temp__5751__auto__","sym","cljs.core.apply","demo.mathlive/process","cljs.core/map?","demo.mathlive/mathjson->expression","j","sicmutils.structure.mapr","sicmutils.env/literal-number","cljs.core.js__GT_clj","demo.mathlive/->TeX","x","sicmutils.env/->TeX","demo.mathlive/Mathfield","!state","mfe","js/module$node_modules$mathlive$dist$mathlive_min.MathfieldElement","js/console.log","cljs.core/reset!","cljs.core/empty?","ref","el"],"sourcesContent":["(ns demo.mathlive\n  (:require [clojure.core.match :refer [match] :include-macros true]\n            [\"mathlive\" :as ml]\n            [sicmutils.complex :as c]\n            [sicmutils.structure :as ss]\n            [nextjournal.clerk.sci-viewer :as sv]\n            [nextjournal.clerk.viewer :as v]\n            [sicmutils.env :as e]\n            [sicmutils.numsymb :refer [symbolic-operator]]\n            [reagent.core :as re :include-macros true]))\n\n;; ## String\n(def constants\n  {\"ExponentialE\" 'E\n   \"ImaginaryUnit\" c/I\n\n   \"GoldenRatio\" 'phi\n\n   ;; TODO add all greek characters.\n   \"Pi\" 'pi \"CapitalPi\" 'Pi\n   \"Gamma\" 'gamma \"CapitalGamma\" 'Gamma})\n\n(def f-name->sym\n  {\n   ;; Arithmetic\n   \"Add\" '+\n   \"Subtract\" '- \"Negate\" '-\n   \"Multiply\"'*\n   \"Divide\" '/ \"Rational\" '/\n   \"Power\" 'expt ;; root handled below... TODO add root to symbolic env of sicmutils.\n   \"Square\" 'square\n   \"Sqrt\" 'sqrt\n\n   \"Exp\" 'exp\n   \"Ln\" 'log\n\n   ;; \"Log\" TODO this is [Log a b], log base blah... support that.\n   ;; \"Lb\" TODO log base 2\n   ;; \"Lg\" TODO log base 10\n   ;; \"LogOnePlus\" TODO\n\n   \"Cos\" 'cos\n   \"Sin\" 'sin\n   \"Tan\" 'tan\n   \"Cot\" 'cot\n   \"Sec\" 'sec\n   \"Csc\" 'csc\n\n   \"Arcsin\" 'asin\n   \"Arccos\" 'acos\n   \"Arctan\" 'atan\n\n   \"Sinh\" 'sinh\n   \"Cosh\" 'cosh\n   \"Tanh\" 'tanh\n   \"Coth\" 'coth\n   \"Sech\" 'sech\n   \"Csch\" 'csch\n\n   \"Equal\" '=\n\n   ;; 'and (ua/monoid sym:and true false?)\n   ;; 'or (ua/monoid sym:or false true?)\n   ;; 'negate negate\n   ;; 'invert invert\n\n   ;; 'modulo modulo\n   ;; 'remainder remainder\n   ;; 'gcd (ua/monoid gcd 0)\n   ;; 'lcm (ua/monoid lcm 1 v/zero?)\n   ;; 'floor floor\n   ;; 'ceiling ceiling\n   ;; 'integer-part integer-part\n   ;; 'fractional-part fractional-part\n\n   ;; 'cube #(expt % 3)\n   ;; 'square #(expt % 2)\n   ;; 'abs abs\n   ;; 'sqrt sqrt\n   ;; 'log log\n\n   ;; 'expt expt\n   ;; 'make-rectangular make-rectangular\n   ;; 'make-polar make-polar\n   ;; 'real-part real-part\n   ;; 'imag-part imag-part\n   ;; 'conjugate conjugate\n   ;; 'magnitude magnitude\n   ;; 'dot-product dot-product\n   ;; 'inner-product dot-product\n   ;; 'angle angle\n   ;; 'derivative derivative\n\n   })\n\n(defn process-str [s]\n  (or (constants s)\n      (f-name->sym s)\n      (if (and (.startsWith s \"'\")\n               (.endsWith s \"'\"))\n        (.slice s 1 -1)\n        (symbol s))))\n\n(defn process-head\n  \"Convert the head of a function form into a symbol.\"\n  [head]\n  (match [head]\n         [(_ :guard symbol?)] head\n         [(_ :guard string?)] (f-name->sym head head)\n         :else head))\n\n;; ## Maps\n\n(defn process-map [m] m)\n\n;; ## Vector\n;;\n;; Catch some ones we want to combine, then go wild.\n\n(defn v-processor [simplify]\n  (fn process-v [v]\n    (match [v]\n           [[(h :guard vector?) & tail]]  (process-v (into [(process-v h)] tail))\n           [[\"List\" & xs]] (ss/up* (map simplify xs))\n           [[\"Power\" \"ExponentialE\" pow]] ((symbolic-operator 'exp) (simplify pow))\n           [[\"Root\" l r]] ((symbolic-operator 'expt) (simplify l)\n                           ((symbolic-operator 'invert)\n                            (simplify r)))\n\n           ;; TODO this only comes in when errors are empty valid isValid is\n           ;; false. Fix!\n           [[\"Error\" & _ignore]] '_\n\n           ;; inverse trig functions\n           [[\"InverseFunction\" \"Sin\"]]    'asin\n           [[\"InverseFunction\" \"Cos\"]]    'acos\n           [[\"InverseFunction\" \"Tan\"]]    'atan\n           [[\"InverseFunction\" \"Cot\"]]    'acot\n           [[\"InverseFunction\" \"Sec\"]]    'asec\n           [[\"InverseFunction\" \"Csc\"]]    'acsc\n\n           [[\"InverseFunction\" \"Cosh\"]]    'acosh\n           [[\"InverseFunction\" \"Sinh\"]]    'asinh\n           [[\"InverseFunction\" \"Tanh\"]]    'atanh\n\n           [[\"InverseFunction\" \"Coth\"]]    'acoth\n           [[\"InverseFunction\" \"Sech\"]]    'asech\n           [[\"InverseFunction\" \"Csch\"]]    'acsch\n\n           [[\"Sequence\" & _]]             nil\n           [[\"Delimiter\" expr & _]]       (simplify expr)\n\n           [[head & args]]                (if-let [sym (process-head head)]\n                                            (apply (symbolic-operator sym)\n                                                   (map simplify args))\n                                            v)\n           :else v)))\n\n(defn process [expr]\n  (let [process-v (v-processor process)]\n    (cond (number? expr) expr\n          (string? expr) (process-str expr)\n          (map? expr)    (process-map expr)\n          (vector? expr) (process-v expr)\n          :else expr)))\n\n(defn mathjson->expression\n  \"Converts MathJSON to an expression or structure of expressions.\"\n  [j]\n  (ss/mapr e/literal-number\n           (process\n            (js->clj j))))\n\n(defn ->TeX [x] (e/->TeX x))\n\n(defn Mathfield [!state]\n  (let [mfe (ml/MathfieldElement.\n             #js {:fontsDirectory \"https://unpkg.com/mathlive@0.83.0/dist/fonts/\"})]\n\n    ;; Demo shows how to go back and forth... https://cortexjs.io/mathlive/demo/\n\n    ;; This is a slightly older react component, similar to what we should\n    ;; probably be building here.\n    ;; https://github.com/concludio/react-mathlive/blob/b3ffefb30f8b63448d925c47228b8d0befcaf898/src/MathfieldComponent.tsx\n    (.addEventListener\n     mfe \"input\" (fn [x]\n                   (js/console.log (.getValue (.-target x) \"math-json\"))\n                   (js/console.log (.-isValid ^js (.-expression (.-target x))))\n                   (js/console.log (.-errors ^js (.-expression (.-target x))))\n                   (reset! !state\n                           ;; weird, seems like a bug with isValid.\n                           (if (or (.-isValid ^js (.-expression (.-target x)))\n                                   (empty?\n                                    (.-errors ^js (.-expression (.-target x)))))\n                             {:valid? true\n                              :expr (.-json (.-expression (.-target x)))}\n                             {:valid? false}))))\n    (reset! !state (.getValue mfe \"math-json\"))\n    ;; TODO note that we do this to prevent a remount...\n    (let [ref (fn [el]\n                (when el\n                  (.replaceWith ^js el mfe)))]\n      (fn []\n        [:div\n         [:div {:ref ref}]\n         #_(let [s @!state]\n             (if-not (:valid? s)\n               [:p \"Invalid!\"]\n               ;; TODO right now we are ASSUMING that what comes through is either\n               ;; a structure or a literal number, and we wrap it all up at the\n               ;; end.\n               (let [clj    (mathjson->expression (:expr s))\n                     simple (e/simplify clj)]\n                 [:<>\n                  [sv/inspect (v/code clj)]\n                  [sv/inspect (v/tex (try (e/->TeX clj)\n                                          (catch\n                                              js/Error\n                                              _ \"\\\\mathit{processing...}\")))]\n                  [sv/inspect (v/code simple)]\n                  [sv/inspect (v/tex (try (e/->TeX simple)\n                                          (catch\n                                              js/Error\n                                              _ \"\\\\mathit{processing...}\")))]])))]))))\n"]}