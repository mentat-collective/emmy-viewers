shadow$provide.module$node_modules$mathbox$build$esm$shaders$glsl$surface_position_normal=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;exports.default="uniform vec4 mapSize;\nuniform vec4 geometryResolution;\nuniform vec4 geometryClip;\nattribute vec4 position4;\n\n// External\nvec3 getPosition(vec4 xyzw, float canonical);\nvec3 getNormal(vec4 xyzw);\n\nvarying vec3 vNormal;\nvarying vec3 vLight;\nvarying vec3 vPosition;\n\nvec3 getSurfacePositionNormal() {\n\n  vec4 p \x3d min(geometryClip, position4);\n#ifdef SURFACE_CLOSED_X\n  if (p.x \x3d\x3d geometryClip.x) p.x \x3d 0.0;\n#endif\n#ifdef SURFACE_CLOSED_Y\n  if (p.y \x3d\x3d geometryClip.y) p.y \x3d 0.0;\n#endif\n\n  vec3 center \x3d getPosition(p, 1.0);\n  vNormal     \x3d normalMatrix * normalize(getNormal(p));\n  vLight      \x3d normalize((viewMatrix * vec4(1.0, 2.0, 2.0, 0.0)).xyz); // hardcoded directional light\n  vPosition   \x3d -center;\n\n#ifdef POSITION_UV\n#ifdef POSITION_UV_INT\n  vUV \x3d -.5 + (position4.xy * geometryResolution.xy) * mapSize.xy;\n#else\n  vUV \x3d position4.xy * geometryResolution.xy;\n#endif\n#endif\n\n  return center;\n}\n"}
//# sourceMappingURL=module$node_modules$mathbox$build$esm$shaders$glsl$surface_position_normal.js.map
