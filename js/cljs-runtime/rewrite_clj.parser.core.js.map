{"version":3,"sources":["rewrite_clj/parser/core.cljc"],"mappings":";;AAwBA,gDAAA,hDAAyBA;AAGzB,mCAAA,nCAAOC,8EACJC;AADH,AAEE,GAAM,MAAA,LAAMA;AAAZ;;AAAA,oBACM,AAACC,qCAAmBD;AAD1B;;AAAA,GAEM,AAACE,6CAAEF,EAAEF;AAFX;;AAAA,AAGY,mDAAA,wCAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,MAAA,uDAAA,sEAAA,0DAAA,sDAAA,uDAAA,oDAAA,+DAAA,0DAAA,0DAAA,yDAAA,mDAAA,+DAAA,+DAAA,qDAAA,+DAAA,5/BAACK,0/BAMIH;;;;;;AAEnB,GAAA,QAAAI,wCAAAC,+CAAAC,oDAAAC;AAAA;AAAA,AAAA,2CAAA,iBAAAC,6BAAA,AAAAC,6CAAA,tIAAoBQ;IAApBP,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAV,4CAAA,mCAAA,gEAAA,iBAAAW,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,0BAAA,ggDAAA,4DAAAH,wBAAAL,2BAAAE,2BAAAC,2BAAAC,tpDACE,6CAAA,uEAAA,AAAA,+GAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,qOAAA,AAAA,kEAAA,AAAA,+BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,8JAAA,AAAA,KAAA,kBAAAb,kCAAA,AAAA,AAAAA,gDAAA,/8CAACmB,w9CAAgBC;;;AAEnB,qCAAA,rCAAMC,kFACkBC;AADxB,AAEE,OAACC,kCAAsBD,OAAOJ;;AAIhC,sCAAA,tCAAOM,oFACiBF,OAAwBG;AADhD,AAEE,AAACC,0BAAcJ;;AAGV,iDAAA,WAAAO,rDAACC,mCAAuBR;AAFvB,IAAAK,wCAAU5B,5CAEX;IAFC6B,wCAAsBH;AAAtB,AAAA,iDAAAG,hDAAU7B;;AAAV,IAAA,AACE,0CAAA8B,nCAACR;UADH,AAAA,iDAAAM,hDAAU5B;;;AAIlB,AAAA,2CAAA,mDAAAgC,9FAAOM;AAAP,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,8EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,gFAAA,6BAAAG,7GAAOD,2FACiBf,OAAwB0B,SAASC;AADzD,AAAA,IAAAV,aAAAD;oBAAA,AAAAE,4CAAAD,WAAA,IAAA,3EAC8DW;AAD9D,AAEE,oBAAMA;AAAN,AACE,AAACxB,0BAAcJ;;AADjB;;AAEA,OAAC6B,0BACC7B,OACA0B,SACA3B,mCACA,AAAC+B,qBAAWC,kDACZJ;;;AATJ,CAAA,mEAAA,nEAAOZ;;AAAP;AAAA,CAAA,6DAAA,WAAAI,xEAAOJ;AAAP,AAAA,IAAAK,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAG,SAAAC,SAAAL;;;AAAA,AAeA,AAAAvB,qFAAA,wDAAA,WACwBI;AADxB,AAEE,OAACgC,qCAAYhC;;AAEf,AAAAJ,qFAAA,gEAAA,WACwBI;AADxB,AAEE,OAACI,0BAAcJ;;AAEjB,AAAAJ,qFAAA,+DAAA,WACwBI;AADxB,AAEE,mFAAA,5EAACiC,qEACCjC,mFAEA,AAACF,wBAAYE;;AAEjB,AAAAJ,qFAAA,mDAAA,WACwBI;AADxB,AAEE,oBAAMvB;AAAN,AACE,8CAAA,vCAACyD,gCAAoBlC;;AADvB;;;AAKF,AAAAJ,qFAAA,kEAAA,WACwBI;AADxB,AAEE,OAACmC,+CAAiBnC;;AAEpB,AAAAJ,qFAAA,0DAAA,WACwBI;AADxB,AAEE,AAACI,0BAAcJ;;AACf,2EAAA,pEAACoC,wEAAiB,AAACC,0CAA8BrC;;AAInD,AAAAJ,qFAAA,0DAAA,WACwBI;AADxB,AAEE,OAACsC,yCAActC;;AAEjB,AAAAJ,qFAAA,0DAAA,WACwBI;AADxB,AAEE,OAACuC,uCAAavC;;AAIhB,AAAAJ,qFAAA,qDAAA,WACwBI;AADxB,AAEE,AAACI,0BAAcJ;;AACf,OAACwC,8DAAU,gDAAA,qDAAA,rGAACzB,yCAAiBf;;AAI/B,8CAAA,9CAAOyC,oGAAqBzC;AAA5B,AACE,iCAAA,jCAAC0C,0BAAc1C;;AACf,OAACgC,qCAAYhC;;AAEf,gDAAA,hDAAO2C,wGAAuB3C;AAA9B,AACE,AAACI,0BAAcJ;;AACf,2EAAA,pEAACoC,yEAAkB,AAACC,0CAA8BrC;;AAEpD,AAAAJ,qFAAA,sDAAA,WACwBI;AADxB,AAEE,AAACI,0BAAcJ;;AACf,IAAA4C,WAAM,AAAC9C,wBAAYE;AAAnB,AAAA,GAAA,AAAAnB,6CAAA,KAAA+D;AACM,8CAAA,vCAACV,gCAAoBlC;;AAD3B,GAAA,AAAAnB,6CAAA,IAAA+D;AAGK,OAACD,8CAAsB3C;;AAH5B,GAAA,AAAAnB,6CAAA,KAAA+D;AAMK,OAACG,kCAAW,AAACC,sCAAYhD;;AAN9B,GAAA,AAAAnB,6CAAA,IAAA+D;AAEK,OAACH,4CAAoBzC;;AAF1B,GAAA,AAAAnB,6CAAA,IAAA+D;AAQK,OAACO,uCAAS,qFAAA,mDAAA,sDAAA,9LAACD,8EAAiBlD;;AARjC,GAAA,AAAAnB,6CAAA,IAAA+D;AAKK,OAACE,4BAAQ,2CAAA,3CAAC5C,oCAAYF;;AAL3B,GAAA,AAAAnB,6CAAA,IAAA+D;AAWK,OAACU,uDAAqBtD,OAAOD;;AAXlC,GAAA,AAAAlB,6CAAA,IAAA+D;AAIK,OAACC,8BAAS,2CAAA,3CAAC3C,oCAAYF;;AAJ5B,GAAA,AAAAnB,6CAAA,IAAA+D;AASK,OAACQ,wCAAU,qFAAA,sDAAA,sDAAA,jMAACF,8EAAiBlD;;AATlC,GAAA,AAAAnB,6CAAA,IAAA+D;AAOK,OAACK,kEAAc,qFAAA,qDAAA,sDAAA,hMAACC,8EAAiBlD;;AAPtC,GAAA,AAAAnB,6CAAA,IAAA+D;AAYK,AAEE,AAACW,wBAAYvD;;AAEb,OAACwD,8EACA,iBAAMC,QAAM;AAAA,AAAO,uDAAA,oEAAA,pHAAC1C,yCAAiBf;;AAArC,AACE,OAAC0D,eAAK,iBAAAC,WAAM,AAAC7D,wBAAYE;AAAnB,AAAA,QAAA2D;KAAA;AAEK,OAACC,gEAAW,+CAAA,/CAACjE;;;KAFlB;AAKK,AAAI,AAAC4D,wBAAYvD;;AACb,OAAC4D,gEAAW,+CAAA,/CAACjE;;;;AAGpB,AAAI,iCAAA,jCAAC+C,0BAAc1C;;AACf,OAACqB,gBAAM,AAACoC;;;KACd,AAACA;;;AA7BjB,GAAA,AAAA5E,6CAAA,IAAA+D;AAUK,OAACS,oCAAY,qFAAA,yDAAA,sDAAA,pMAACH,8EAAiBlD;;AAVpC,AA8BE,OAACwD,8EAAkB,gDAAA,oEAAA,pHAACzC,yCAAiBf;;;;;;;;;;;;;;;AAEzC,AAAAJ,qFAAA,uDAAA,WACwBI;AADxB,AAEE,OAAC6D,yCAAW,qFAAA,uDAAA,sDAAA,lMAACX,8EAAiBlD;;AAIhC,AAAAJ,qFAAA,uDAAA,WACwBI;AADxB,AAEE,OAAC8D,kCAAW,qFAAA,uDAAA,sDAAA,lMAACZ,8EAAiBlD;;AAEhC,AAAAJ,qFAAA,sEAAA,WACwBI;AADxB,AAEE,OAAC+D,yCAAkB,qFAAA,sEAAA,sDAAA,jNAACb,8EAAiBlD;;AAEvC,AAAAJ,qFAAA,2DAAA,WACwBI;AADxB,AAEE,AAACI,0BAAcJ;;AACf,IAAMrB,IAAE,AAACmB,wBAAYE;AAArB,AACE,GAAI,+CAAA,/CAACnB,6CAAEF;AACL,OAACqF,6CACC,qFAAA,2DAAA,sDAAA,tMAACd,8EAAiBlD;;AACpB,OAACiE,oCACC,gDAAA,2DAAA,3GAAClD,yCAAiBf;;;AAI1B,AAAAJ,qFAAA,oDAAA,WACwBI;AADxB,AAEE,OAACkE,+BAAU,2CAAA,3CAAChE,oCAAYF;;AAE1B,AAAAJ,qFAAA,yDAAA,WACwBI;AADxB,AAEE,OAACmE,iCAAY,2CAAA,3CAACjE,oCAAYF;;AAE5B,AAAAJ,qFAAA,mDAAA,WACwBI;AADxB,AAEE,OAACoE,8BAAS,2CAAA,3CAAClE,oCAAYF","names":["rewrite-clj.parser.core/*delimiter*","rewrite-clj.parser.core/dispatch","c","rewrite-clj.reader/whitespace?","cljs.core._EQ_","cljs.core.get","js/rewrite-clj","js/rewrite-clj.parser","js/rewrite-clj.parser.core","js/rewrite-clj.parser.core.parse-next*","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__75102","cljs.core/MultiFn","cljs.core.symbol","rewrite-clj.parser.core/parse-next*","cljs.core.comp","rewrite-clj.reader/peek","rewrite-clj.parser.core/parse-next","reader","rewrite-clj.reader/read-with-meta","rewrite-clj.parser.core/parse-delim","delimiter","rewrite-clj.reader/ignore","*delimiter*-orig-val__75105","*delimiter*-temp-val__75106","p1__75104#","rewrite-clj.reader/read-repeatedly","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","rewrite-clj.parser.core/parse-printables","p__75112","vec__75113","cljs.core.nth","seq75108","G__75109","cljs.core/first","cljs.core/next","G__75110","G__75111","self__5754__auto__","node-tag","n","ignore?","rewrite-clj.reader/read-n","cljs.core/complement","rewrite-clj.node.protocols/printable-only?","rewrite-clj.parser.token/parse-token","rewrite_clj.reader.throw_reader","rewrite-clj.reader/throw-reader","rewrite-clj.parser.whitespace/parse-whitespace","rewrite_clj.node.comment.comment_node","rewrite-clj.reader/read-include-linebreak","rewrite-clj.parser.keyword/parse-keyword","rewrite-clj.parser.string/parse-string","rewrite_clj.node.meta.meta_node","rewrite-clj.parser.core/read-symbolic-value","rewrite-clj.reader/unread","rewrite-clj.parser.core/parse-shebang-comment","G__75126","rewrite-clj.node.seq/set-node","rewrite-clj.node.fn/fn-node","rewrite-clj.node.regex/regex-node","rewrite-clj.parser.string/parse-regex","rewrite_clj.node.meta.raw_meta_node","rewrite_clj.parser.core.parse_printables","rewrite-clj.node.reader-macro/var-node","rewrite-clj.node.reader-macro/eval-node","rewrite-clj.node.uneval/uneval-node","rewrite-clj.parser.namespaced-map/parse-namespaced-map","rewrite-clj.reader/next","rewrite_clj.node.reader_macro.reader_macro_node","read1","cljs.core/cons","G__75127","rewrite_clj.node.token.token_node","rewrite-clj.node.reader-macro/deref-node","rewrite-clj.node.quote/quote-node","rewrite-clj.node.quote/syntax-quote-node","rewrite-clj.node.quote/unquote-splicing-node","rewrite-clj.node.quote/unquote-node","rewrite-clj.node.seq/list-node","rewrite-clj.node.seq/vector-node","rewrite-clj.node.seq/map-node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.parser.core\n  (:require ;; using internal node nses rather than public rewrite-clj.node\n            ;; allows us to use rewrite-clj to generate code for import-vars target nses\n            [rewrite-clj.node.comment :refer [comment-node]]\n            [rewrite-clj.node.fn :refer [fn-node]]\n            [rewrite-clj.node.meta :refer [meta-node raw-meta-node]]\n            [rewrite-clj.node.protocols :as protocols]\n            [rewrite-clj.node.quote :refer [quote-node syntax-quote-node unquote-node unquote-splicing-node]]\n            [rewrite-clj.node.reader-macro :refer [var-node eval-node reader-macro-node deref-node]]\n            [rewrite-clj.node.regex :refer [regex-node]]\n            [rewrite-clj.node.seq :refer [list-node map-node vector-node set-node]]\n            [rewrite-clj.node.token :refer [token-node]]\n            [rewrite-clj.node.uneval :refer [uneval-node]]\n            [rewrite-clj.parser.keyword :refer [parse-keyword]]\n            [rewrite-clj.parser.namespaced-map :refer [parse-namespaced-map]]\n            [rewrite-clj.parser.string :refer [parse-string parse-regex]]\n            [rewrite-clj.parser.token :refer [parse-token]]\n            [rewrite-clj.parser.whitespace :refer [parse-whitespace]]\n            [rewrite-clj.reader :as reader]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Base Parser\n\n(def ^:dynamic ^:private *delimiter*\n  nil)\n\n(defn- dispatch\n  [c]\n  (cond (nil? c)               :eof\n        (reader/whitespace? c) :whitespace\n        (= c *delimiter*)      :delimiter\n        :else (get {\\^ :meta      \\# :sharp\n                    \\( :list      \\[ :vector    \\{ :map\n                    \\} :unmatched \\] :unmatched \\) :unmatched\n                    \\~ :unquote   \\' :quote     \\` :syntax-quote\n                    \\; :comment   \\@ :deref     \\\" :string\n                    \\: :keyword}\n                   c :token)))\n\n(defmulti ^:private parse-next*\n  (comp #'dispatch reader/peek))\n\n(defn parse-next\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/read-with-meta reader parse-next*))\n\n;; # Parser Helpers\n\n(defn- parse-delim\n  [#?(:cljs ^not-native reader :default reader) delimiter]\n  (reader/ignore reader)\n  (->> #(binding [*delimiter* delimiter]\n          (parse-next %))\n       (reader/read-repeatedly reader)))\n\n(defn- parse-printables\n  [#?(:cljs ^not-native reader :default reader) node-tag n & [ignore?]]\n  (when ignore?\n    (reader/ignore reader))\n  (reader/read-n\n    reader\n    node-tag\n    parse-next\n    (complement protocols/printable-only?)\n    n))\n\n;; ## Parser Functions\n\n;; ### Base\n\n(defmethod parse-next* :token\n  [#?(:cljs ^not-native reader :default reader)]\n  (parse-token reader))\n\n(defmethod parse-next* :delimiter\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader))\n\n(defmethod parse-next* :unmatched\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/throw-reader\n    reader\n    \"Unmatched delimiter: %s\"\n    (reader/peek reader)))\n\n(defmethod parse-next* :eof\n  [#?(:cljs ^not-native reader :default reader)]\n  (when *delimiter*\n    (reader/throw-reader reader \"Unexpected EOF.\")))\n\n;; ### Whitespace\n\n(defmethod parse-next* :whitespace\n  [#?(:cljs ^not-native reader :default reader)]\n  (parse-whitespace reader))\n\n(defmethod parse-next* :comment\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader)\n  (comment-node \";\" (reader/read-include-linebreak reader)))\n\n;; ### Special Values\n\n(defmethod parse-next* :keyword\n  [#?(:cljs ^not-native reader :default reader)]\n  (parse-keyword reader))\n\n(defmethod parse-next* :string\n  [#?(:cljs ^not-native reader :default reader)]\n  (parse-string reader))\n\n;; ### Meta\n\n(defmethod parse-next* :meta\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader)\n  (meta-node (parse-printables reader :meta 2)))\n\n;; ### Reader Specialities\n\n(defn- read-symbolic-value [reader]\n  (reader/unread reader \\#)\n  (parse-token reader))\n\n(defn- parse-shebang-comment [reader]\n  (reader/ignore reader)\n  (comment-node \"#!\" (reader/read-include-linebreak reader)))\n\n(defmethod parse-next* :sharp\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader)\n  (case (reader/peek reader)\n    nil (reader/throw-reader reader \"Unexpected EOF.\")\n    \\# (read-symbolic-value reader)\n    \\! (parse-shebang-comment reader)\n    \\{ (set-node (parse-delim reader \\}))\n    \\( (fn-node (parse-delim reader \\)))\n    \\\" (regex-node (parse-regex reader))\n    \\^ (raw-meta-node (parse-printables reader :meta 2 true))\n    \\' (var-node (parse-printables reader :var 1 true))\n    \\= (eval-node (parse-printables reader :eval 1 true))\n    \\_ (uneval-node (parse-printables reader :uneval 1 true))\n    \\: (parse-namespaced-map reader parse-next)\n    \\? (do\n         ;; we need to examine the next character, so consume one (known \\?)\n         (reader/next reader)\n         ;; we will always have a reader-macro-node as the result\n         (reader-macro-node\n          (let [read1 (fn [] (parse-printables reader :reader-macro 1))]\n            (cons (case (reader/peek reader)\n                    ;; the easy case, just emit a token\n                    \\( (token-node (symbol \"?\"))\n\n                    ;; the harder case, match \\@, consume it and emit the token\n                    \\@ (do (reader/next reader)\n                           (token-node (symbol \"?@\")))\n\n                    ;; otherwise no idea what we're reading but its \\? prefixed\n                    (do (reader/unread reader \\?)\n                        (first (read1))))\n                  (read1)))))\n    (reader-macro-node (parse-printables reader :reader-macro 2))))\n\n(defmethod parse-next* :deref\n  [#?(:cljs ^not-native reader :default reader)]\n  (deref-node (parse-printables reader :deref 1 true)))\n\n;; ## Quotes\n\n(defmethod parse-next* :quote\n  [#?(:cljs ^not-native reader :default reader)]\n  (quote-node (parse-printables reader :quote 1 true)))\n\n(defmethod parse-next* :syntax-quote\n  [#?(:cljs ^not-native reader :default reader)]\n  (syntax-quote-node (parse-printables reader :syntax-quote 1 true)))\n\n(defmethod parse-next* :unquote\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader)\n  (let [c (reader/peek reader)]\n    (if (= c \\@)\n      (unquote-splicing-node\n        (parse-printables reader :unquote 1 true))\n      (unquote-node\n        (parse-printables reader :unquote 1)))))\n\n;; ### Seqs\n\n(defmethod parse-next* :list\n  [#?(:cljs ^not-native reader :default reader)]\n  (list-node (parse-delim reader \\))))\n\n(defmethod parse-next* :vector\n  [#?(:cljs ^not-native reader :default reader)]\n  (vector-node (parse-delim reader \\])))\n\n(defmethod parse-next* :map\n  [#?(:cljs ^not-native reader :default reader)]\n  (map-node (parse-delim reader \\})))\n"]}