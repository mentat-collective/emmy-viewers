;; # Welcome to [Clerk](https://clerk.vision/)!

^{:nextjournal.clerk/toc true}
(ns {{top/ns}}.{{main/ns}}
    (:refer-clojure
     :exclude [+ - * / zero? compare divide numerator denominator
               infinite? abs ref partial =])
    (:require [emmy.clerk :as ec]
              [emmy.env :as e :refer :all]
              [emmy.leva :as leva]
              [emmy.mafs :as mafs]
              [emmy.mathbox.plot :as p]
              [emmy.viewer :as ev]
              [nextjournal.clerk :as clerk]))

{::clerk/width :wide}

^{::clerk/visibility {:code :hide :result :hide}}
(ec/install!)

;; Hello! This project was generated by the [`emmy-viewers/clerk`
;; template](https://emmy-viewers.mentat.org/#project-template). The template
;; comes with everything you need you everything you need to

;; - Interactively develop Clerk notebooks
;; - Publish them to [GitHub Pages](https://pages.github.com/) or [Clerk's Garden](https://github.clerk.garden/)

;; Some good next steps:

;; - Visit this project's README.md for guides on how to proceed.
;; - Read the [`Emmy-Viewers` documentation notebook](https://emmy-viewers.mentat.org)
;; - Read the [Book of Clerk](https://book.clerk.vision/)
;; - Visit the [Awesome-Clerk](https://github.com/mentat-collective/awesome-clerk) list for ideas
;; - Delete anything in this notebook you feel like you don't need.

;; ## Clerk Environment Basics
;;
;; Here's a basic use of Clerk. This is a function:

(defn hello [s]
  (str "Hello, " s "!"))

;; If we call this function, Clerk will render the form and its output:

(hello "Clerk")

;; - The form `(hello "Clerk")` executes in the JVM.
;; - The resulting string "Hello, Clerk!" is serialized over a WebSocket to the
;;   browser, where Clerk's ClojureScript side renders it using a
;;   pre-registered "viewer".
;; - These viewers are written in code evaluated using the [Small Clojure
;;   Interpreter](https://github.com/babashka/sci), or "SCI".

;; Clerk comes with [many viewers](https://book.clerk.vision/#viewers), and
;; gives us the ability to [write _new_
;; viewers](https://book.clerk.vision/#writing-viewers) using a default SCI
;; environment that Clerk makes available to us.

;; ## Emmy-Viewers Quickstart

;; Here is a Mafs plot using Leva:

(ev/with-let [!phase [0 0]]
  (let [shifted (ev/with-params {:atom !phase :params [0]}
                  (fn [shift]
                    (((cube D) tanh) (- identity shift))))]
    (mafs/mafs
     (mafs/cartesian)
     (mafs/of-x shifted)
     (mafs/inequality
      {:y {:<= shifted :> cos} :color :blue})
     (mafs/movable-point
      {:atom !phase :constrain "horizontal"}))))

;; Next, equations for a torus:

(defn toroidal->rect [R r]
  (fn [[theta phi]]
    (*
     (rotate-z-matrix phi)
     (up (+ R (* r (cos theta)))
         0
         (* r (sin theta))))))

;; And some MathBox. Make sure to play with the controls in the top right, and
;; zoom in to experience the `:full` width!

^{::clerk/width :full}
(ev/with-let [!opts {:scale 1 :R 2 :r 0.5}]
  (p/scene
   (leva/controls
    {:atom !opts
     :folder {:name "Torus and Spring"}
     :schema
     {:scale {:min 0.5 :max 2 :step 0.01}
      :R     {:min 0.5 :max 2 :step 0.01}
      :r     {:min 0.5 :max 2 :step 0.01}}})

   (p/parametric-curve
    {:f (ev/with-params {:atom !opts :params [:scale :R]}

          (fn [scale R]
            (up (* R cos) (* R sin) (* scale 0.3 identity))))
     :t [-10 10]})
   (p/parametric-surface
    {:f (ev/with-params {:atom !opts :params [:R :r]}
          toroidal->rect)
     :u [0 (* 2 Math/PI)]
     :v [0 (* 2 Math/PI)]})))
